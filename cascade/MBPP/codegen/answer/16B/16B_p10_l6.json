[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = list()\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements\n",
        "num_ids": 51
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #return len(set(test_tup1).intersection(test_tup2))\n",
        "num_ids": 25
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for ele in test_tup1:\n        if ele in test_tup2:\n            print('Shared elements between ', test_tup1,'and ', test_tup2,'is ', ele)\n",
        "num_ids": 51
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    list3 = list(set(list1) & set(list2))\n    return list3\n",
        "num_ids": 51
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n",
        "num_ids": 50
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if type(test_tup1)!= tuple or type(test_tup2)!= tuple:\n        return None\n",
        "num_ids": 31
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for i in test_tup1:\n        if i in test_tup2:\n            print(i)\n",
        "num_ids": 30
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('input tuples not same length')\n    #your code here\n    return list(set(test_tup1) & set(test_tup2))\n",
        "num_ids": 62
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = list()\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i = i + 6\n    return False\n    \n",
        "num_ids": 93
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return True\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i==0:\n            return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    sqrt_n = math.sqrt(n)\n    for i in range(2,int(sqrt_n)):\n        if n%i == 0:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    def prime(num):\n        for i in range(2,int(math.sqrt(num))+1):\n            if num%i==0:\n                return False\n        return True\n",
        "num_ids": 47
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    #Pretend to get the factors of a number and iterate through them to see if the number is divisible.\n    #If it is divisible then it is a prime number.\n    #Factorizing is O(n) where n is the number being factored.\n    factors = []\n    if n <= 1:\n        return True\n    for i in range(2,n):\n        if n % i == 0:\n            factors.append(i)\n    if len(factors) == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 132
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)<n:\n        print(\"There are less number of elements in the list than you want.\")\n    heap = []\n    for i in nums:\n        hq.heappush(heap,i)\n    for i in range(n):\n        hq.heappop(heap)\n    while len(heap)>0:\n        print(hq.heappop(heap))\nnums = [9,3,1,4,7,8,5,2,6]\nn = 3\nheap_queue_largest(nums,n)\n",
        "num_ids": 144
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    return largest\n",
        "num_ids": 48
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    ans = []\n    if len(nums) < n:\n        return 'Invalid Input!'\n    for i in range(n):\n        a = hq.heappop(nums)\n        ans.append(a)\n    return ans[::-1]\n",
        "num_ids": 65
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return None\n    if n>=len(nums):\n        return None\n    return hq.nlargest(n, nums)[::-1]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if not nums:\n        return None\n    if n>=len(nums):\n        return None\n    return hq.nsmallest(n, nums)\ndef heap_queue_add(nums,num):\n    '''\n    Write a function to add an integer to the given list of numbers.\n    '''\n    nums.append(num)\n    # sort the list\n    nums.sort()\n    return nums\ndef heap_queue_remove_min(nums):\n    '''\n    Write a function to remove the smallest number from the given list of numbers.\n    '''\n    # sort the list\n    nums.sort()\n    # return the last element\n    return nums.pop()\ndef heap_queue_remove_max(nums):\n    '''\n    Write a function to remove the largest number from the given list of numbers.\n    '''\n    nums.sort(reverse=True)\n    # return the first element\n    return nums.pop(0)\ndef heap_queue_union(nums1,nums2):\n    '''\n    Write a function to return all the numbers in the first given list, that are not in the second.\n    '''\n    return list(set(nums1)-set(nums2))\ndef heap_queue_intersection(nums1,nums2):\n    '''\n    Write a function to return all the numbers in the first given list, that are in the second.\n    '''\n    return list(set(nums1) & set(nums2))\ndef heap_queue_difference(nums1,nums2):\n    '''\n    Write a function to return all the numbers in the first given list, that are not in the second.\n    '''\n    return list(set(nums1)-set(nums2))\ndef heap_queue_is_empty(nums):\n    '''\n    Write a function that return True if the given list is empty, False otherwise.\n    '''\n    if len(nums)==0:\n        return True\n    else:\n        return False\ndef heap_queue_add_all(nums, nums_to_add):\n    '''\n    Write a function to add all the numbers in the given list.\n    '''\n    return nums+nums_to_add\ndef heap_queue_heapify(nums):\n    '''\n    Write a function that converts a regular list of numbers into a heap.\n    '''\n    return hq.heapify(nums)\ndef heap_queue_reverse(nums):\n    '''\n    Write a function that reverses the list in place.\n    '''\n    nums.reverse()\n    return nums\ndef heap_queue_sort(nums):\n    '''\n    Write a function that sorts the list in place.\n    '''\n    nums.sort()\n    return nums\ndef heap_queue_merge(nums1,nums2):\n    '''\n    Write a function that merge two given lists of numbers in order.\n    '''\n    return list(set(nums1+nums2))\ndef heap_queue_get_min(nums):\n    '''\n    Write a function that return the minimum number in the list, if it exists.\n    '''\n    if not nums:\n        return None\n    return min(nums)\ndef heap_queue_get_max(nums):\n    '''\n    Write a function that return the maximum number in the list, if it exists.\n    '''\n    if not nums:\n        return None\n    return max(nums)\ndef heap_queue_get_median(nums):\n    '''\n    Write a function to return the median of a given list of numbers.\n    '''\n    nums.sort()\n    l = len(nums)\n    if l%2==0:\n        return (nums[l//2]+nums[l//2-1])/2\n    else:\n        return nums[l//2]\ndef heap_queue_move_min_to_top(nums):\n    '''\n    Write a function that moves the minimum number to the top of the heap, maintaining the heap invariant.\n    '''\n    # convert list to heap\n    hq.heapify(nums)\n    # extract the min\n    min_n = hq.heappop(nums)\n    # add the min at the end\n    hq.heappush(nums, min_n)\n    # return the heap\n    return nums\ndef heap_queue_move_max_to_top(nums):\n    '''\n    Write a function that moves the maximum number to the top of the heap, maintaining the heap invariant.\n    '''\n    # convert list to heap\n    hq.heapify(nums)\n    # extract the max\n    max_n = hq.heappop(nums)\n    # add the max at the end\n    hq.heappush(nums, max_n)\n    # return the heap\n    return nums\ndef heap_queue_get_parent_index(index):\n    '''\n    Write a function to get the index of the parent of a node at a given index in a binary heap.\n    '''\n    return (index-1)//2\ndef heap_queue_get_left_child_index(index):\n    '''\n    Write a function to get the index of the left child of a node at a given index in a binary heap.\n    '''\n    return 2*index+1\ndef heap_queue_get_right_child_index(index):\n    '''\n    Write a function to get the index of the right child of a node at a given index in a binary heap.\n    '''\n    return 2*(index+1)\ndef heap_queue_get_sorted_list(nums):\n    '''\n    Write a function that returns a sorted list from a given heap.\n    '''\n    if not nums:\n        return None\n    return hq.heapify(nums)\ndef heap_queue_has_cycle(nums):\n    '''\n    Write a function that takes a list of numbers and return True if there is a cycle in the list.\n    '''\n    return hq.heapsize(nums)==len(nums)\ndef heap_queue_is_full(nums):\n    '''\n    Write a function that returns True if the heap is full and False otherwise.\n    '''\n    return hq.heapsize(nums)==len(nums)\ndef heap_queue_is_empty(nums):\n    '''\n    Write a function that returns True if the heap is empty and False otherwise.\n    '''\n    return hq.heapsize(nums)==0\ndef heap_queue_get_cycle_length(nums):\n    '''\n    Write a function that returns the length of the cycle if the list contains a cycle.\n    '''\n    return hq.heappop(nums)\ndef heap_queue_get_first_element(nums):\n    '''\n    Write a function that returns the first element of the list.\n    '''\n    if not nums:\n        return None\n    return nums[0]\ndef heap_queue_get_last_element(nums):\n    '''\n    Write a function that returns the last element of the list.\n    '''\n    if not nums:\n        return None\n    return nums[-1]\ndef heap_queue_make_cycle(nums,index):\n    '''\n    Write a function that creates a cycle in a list at a given index.\n    '''\n    nums[index] = 1000\n    return nums\ndef heap_queue_get_node_value(nums,index):\n    '''\n    Write a function that returns the value of a node at a given index in a binary heap.\n    '''\n    return nums[index]\ndef heap_queue_swap_nodes(nums,index1,index",
        "num_ids": 28
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if(n==0):\n        return []\n    if(n>len(nums)):\n        return []\n    heap = nums[0:n]\n    hq.heapify(heap)\n    for i in range(n,len(nums)):\n        if(heap[0]<nums[i]):\n            hq.heapreplace(heap,nums[i])\n    return heap\n",
        "num_ids": 106
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap,(-num,num))\n        if len(heap)>n:\n            hq.heappop(heap)\n    heap = [x[1] for x in heap]\n    return heap\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap,(num,num))\n        if len(heap)>n:\n            hq.heappop(heap)\n    heap = [x[1] for x in heap]\n    return heap\n",
        "num_ids": 75
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #return nlargest(n,nums)\n    if len(nums) == 0:\n        return []\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(n)]\n",
        "num_ids": 62
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    k = n\n    return [hq.heappop(nums) for i in range(n)]\n",
        "num_ids": 40
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return hq.nlargest(n, nums)\n",
        "num_ids": 16
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap=[]\n    for i in range(n):\n        hq.heappush(max_heap,(-1)*nums[i])\n    return [-1*hq.heappop(max_heap) for i in range(n)]\ndef min_heapify(nums,n,i):\n    '''\n    Write a function to restore a binary search tree from a given list of numbers in ascending order.\n    '''\n    largest = i\n    left = 2*i+1\n    right = 2*i+2\n    if left < n and nums[left] < nums[largest]:\n        largest = left\n    if right < n and nums[right] < nums[largest]:\n        largest = right\n    if largest!= i:\n        nums[i],nums[largest] = nums[largest],nums[i]\n        min_heapify(nums,n,largest)\ndef build_min_heap(nums):\n    n=len(nums)\n    for i in range(n//2,-1,-1):\n        min_heapify(nums,n,i)\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    min_heap=[]\n    for i in range(n):\n        hq.heappush(min_heap,nums[i])\n    return [hq.heappop(min_heap) for i in range(n)]\ndef merge_sorted(nums1,m,nums2,n):\n    '''\n    Write a function that merges two sorted arrays, where nums1 has m+n elements, and nums2 has n elements, into a single sorted array.\n    '''\n    index1,index2,index3=m-1,n-1,m+n-1\n    while index1 >= 0 and index2 >= 0:\n        if nums1[index1] > nums2[index2]:\n            nums1[index3]=nums1[index1]\n            index1-=1\n        else:\n            nums1[index3]=nums2[index2]\n            index2-=1\n        index3-=1\n    if index2 >= 0:\n        nums1[:index2+1]=nums2[:index2+1]\ndef inplace_merge_sorted(nums1,m,nums2,n):\n    '''\n    Write a function to sort a list of sorted lists, where each list is sorted and elements are in ascending order, into a single one-dimensional sorted list.\n    '''\n    index1,index2,index3=m-1,n-1,m+n-1\n    while index1 >= 0 and index2 >= 0:\n        if nums1[index1] > nums2[index2]:\n            nums1[index3]=nums1[index1]\n            index1-=1\n        else:\n            nums1[index3]=nums2[index2]\n            index2-=1\n        index3-=1\n    if index2 >= 0:\n        nums1[:index2+1]=nums2[:index2+1]\ndef merge_sorted_count_inversions(nums1,m,nums2,n):\n    '''\n    Write a function that merges two sorted arrays, where nums1 has m+n elements, and nums2 has n elements, into a single sorted array.\n    '''\n    index1,index2,index3=m-1,n-1,m+n-1\n    count=0\n    while index1 >= 0 and index2 >= 0:\n        if nums1[index1] > nums2[index2]:\n            nums1[index3]=nums1[index1]\n            index1-=1\n        else:\n            nums1[index3]=nums2[index2]\n            count+=index1+1\n            index2-=1\n        index3-=1\n    if index2 >= 0:\n        nums1[:index2+1]=nums2[:index2+1]\n    return count\ndef max_heap(nums):\n    '''\n    Write a function to find the largest element in a binary search tree.\n    '''\n    n=len(nums)\n    for i in range(n//2,-1,-1):\n        min_heapify(nums,n,i)\n    return nums[0]\ndef min_heap(nums):\n    '''\n    Write a function to find the smallest element in a binary search tree.\n    '''\n    n=len(nums)\n    for i in range(n//2,-1,-1):\n        min_heapify(nums,n,i)\n    return nums[0]\ndef extract_max_heap(nums):\n    '''\n    Write a function to remove and return the largest element from a binary search tree.\n    '''\n    n=len(nums)\n    max=nums[0]\n    nums[0]=nums[n-1]\n    nums.pop()\n    min_heapify(nums,n-1,0)\n    return max\ndef extract_min_heap(nums):\n    '''\n    Write a function to remove and return the smallest element from a binary search tree.\n    '''\n    n=len(nums)\n    min=nums[0]\n    nums[0]=nums[n-1]\n    nums.pop()\n    max_heapify(nums,n-1,0)\n    return min\ndef insert_max_heap(nums,val):\n    '''\n    Write a function to insert an element into a binary search tree.\n    '''\n    n=len(nums)\n    nums[n-1]=val\n    index=(n-1)//2\n    while nums[index] < nums[n-1]:\n        nums[index],nums[n-1] = nums[n-1],nums[index]\n        index=(index-1)//2\ndef insert_min_heap(nums,val):\n    '''\n    Write a function to insert an element into a binary search tree.\n    '''\n    n=len(nums)\n    nums[n-1]=val\n    index=(n-1)//2\n    while nums[index] > nums[n-1]:\n        nums[index],nums[n-1] = nums[n-1],nums[index]\n        index=(index-1)//2\ndef build_min_heap_count_inversions(nums):\n    '''\n    Write a function that takes in an array of integers and returns the number of inversions.\n    '''\n    n=len(nums)\n    count=0\n    for i in range(n):\n        count+=count_inversions(nums,i)\n    return count\ndef count_inversions(nums,i):\n    '''\n    Write a function that takes in an array of integers and returns the number of inversions.\n    '''\n    count=0\n    for j in range(i+1,len(nums)):\n        if nums[j] < nums[i]:\n            count+=1\n    return count\ndef build_max_heap_count_inversions(nums):\n    '''\n    Write a function that takes in an array of integers and returns the number of inversions.\n    '''\n    n=len(nums)\n    count=0\n    for i in range(n):\n        count+=count_inversions(nums,i)\n    return count\ndef count_inversions(nums,i):\n    '''\n    Write a function that takes in an array of integers and returns the number of inversions.\n    '''\n    count=0\n    for j in range(i+1,len(nums)):\n        if nums[j] < nums[i]:\n            count+=1\n    return count\ndef merge_sorted_count_inversions(nums1,m,nums2,n):\n    '''\n    Write a function that merges two sorted arrays, where nums",
        "num_ids": 16
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    if (x & (x - 1)) == 0:\n        return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        while x > 1:\n            if (x % 2)!= 0:\n                return False\n            else:\n                x //= 2\n        return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 0): \n        return False\n    else: \n        return (x & (x - 1)) == 0\n    \ndef print_binary_num_with_0b(n): \n    '''\n    Write a python function to print binary representation of number n.\n    '''\n    print(bin(n))\n",
        "num_ids": 10
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = x - 1\n    y = x & (x - 1)\n    if y == 0 : \n        return True \n    else : \n        return False\n        \ndef next_power_of_2 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (is_Power_Of_Two(x)): \n        return x \n    else : \n        x = x + 1\n        while (not is_Power_Of_Two(x)):\n            x = x + 1\n        return x\n    \ndef find_Rotation(x,y):\n    '''\n    Given 2 numbers x and y,\n    check whether y is rotation of x or not.\n    '''\n    if(x==y):\n        return True\n    elif((x^y)==0):\n        return False\n    else:\n        return ((x&y)==0)\n        \ndef find_Rotation_optimized(x,y):\n    '''\n    Given 2 numbers x and y,\n    check whether y is rotation of x or not.\n    '''\n    return (y^x)==0\n    \ndef check_sum(lst): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    s = sum(lst)\n    if(s&(s-1))==0:\n        return True\n    else:\n        return False\n    \ndef count_ones(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x:\n        count += 1\n        x &= (x - 1)\n    return count\n    \ndef count_ones_optimized(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return bin(x).count('1')\n    \ndef find_all_divisors(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    divisors = []\n    for i in range(1,x+1):\n        if(x%i==0):\n            divisors.append(i)\n    return divisors\n    \ndef find_all_divisors_optimized(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = x - 1\n    divisors = []\n    while x:\n        divisors.append(x+1)\n        x = x & (x - 1)\n    return divisors\n    \ndef find_numbers_in_range(a,b): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    a = a - 1\n    b = b - 1\n    while (a!=b):\n        if(a>b):\n            a = a - b\n        else:\n            b = b - a\n    return a+1\n    \ndef find_numbers_in_range_optimized(a,b): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    a = a - 1\n    b = b - 1\n    while (a!=b):\n        if(a>b):\n            a = a ^ b\n        else:\n            b = b ^ a\n    return a+1\n    \ndef find_numbers_in_range_inclusive(a,b): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    a = a - 1\n    b = b - 1\n    while (a!=b):\n        if(a>b):\n            a = a ^ b\n        else:\n            b = b ^ a\n    return a+1\n    \ndef find_numbers_in_range_optimized_inclusive(a,b): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    a = a - 1\n    b = b - 1\n    while (a!=b):\n        if(a>b):\n            a = a ^ b\n        else:\n            b = b ^ a\n    return a+1\n    \ndef search_number(numbers,number_to_find): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    low = 0\n    high = len(numbers) - 1\n    while(low<=high):\n        mid = (low+high)//2\n        if(numbers[mid] == number_to_find):\n            return True\n        elif(number_to_find < numbers[mid]):\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n    \ndef search_number_optimized(numbers,number_to_find): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    low = 0\n    high = len(numbers) - 1\n    while(low<=high):\n        mid = (low+high)//2\n        if(numbers[mid] == number_to_find):\n            return True\n        elif(number_to_find < numbers[mid]):\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n    \ndef find_numbers_with_bit_set_at_specific_position(n,p): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((n&(1<<p))!=0)\n    \ndef find_numbers_with_bit_set_at_specific_position_optimized(n,p): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((n&(1<<p))!=0)\n    \ndef find_numbers_in_range_with_bit_set_at_specific_position(a,b,p): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((a&(1<<p)) and ((b&(1<<p))!=0))\n    \ndef find_numbers_in_range_with_bit_set_at_specific_position_optimized(a,b,p): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((a&(1<<p)) and ((b&(1<<p))!=0))\n    \ndef find_numbers_in_range_with_bit_set_at_all_positions_except_at_specific_position(a,b,p): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((a&((~(1<<p))&(0xFFFFFFFF))) and ((b&(1<<p))!=0))\n    \ndef find_numbers_in_range_with_bit_set_at_all_positions_except_at_specific_position_optimized(a,b,p): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((a&((~(1<<p))&(0xFFFFFFFF))) and ((b&(1<<p))!=0))\n    \ndef find_number_with_bit_set_at_all_positions_except_at_specific_position(n,p): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((n&((~(1<<p))&(0xFFFFFFFF)))!= 0)\n    \ndef find_number_with_bit_set_at_all_positions_except",
        "num_ids": 47
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #return x & (x-1)\n    #return (x & x-1)==0\n    return x & (-x)==x",
        "num_ids": 35
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    bin(x)\n    x_binary = str(bin(x))\n    if len(x_binary) == 10:\n        if x_binary[0] == '1' and x_binary[1] == '1':\n            return True\n        else:\n            return False\n    elif len(x_binary) == 11:\n        if x_binary[0] == '1' and x_binary[1] == '1' and x_binary[2] == '1':\n            return True\n        else:\n            return False\n    elif len(x_binary) == 12:\n        if x_binary[0] == '1' and x_binary[1] == '1' and x_binary[2] == '1' and x_binary[3] == '1':\n            return True\n        else:\n            return False\n    elif len(x_binary) == 13:\n        if x_binary[0] == '1' and x_binary[1] == '1' and x_binary[2] == '1' and x_binary[3] == '1' and x_binary[4] == '1':\n            return True\n        else:\n            return False\n    elif len(x_binary) == 14:\n        if x_binary[0] == '1' and x_binary[1] == '1' and x_binary[2] == '1' and x_binary[3] == '1' and x_binary[4] == '1' and x_binary[5] == '1':\n            return True\n        else:\n            return False\n    elif len(x_binary) == 15:\n        if x_binary[0] == '1' and x_binary[1] == '1' and x_binary[2] == '1' and x_binary[3] == '1' and x_binary[4] == '1' and x_binary[5] == '1' and x_binary[6] == '1':\n            return True\n        else:\n            return False\n    elif len(x_binary) == 16:\n        if x_binary[0] == '1' and x_binary[1] == '1' and x_binary[2] == '1' and x_binary[3] == '1' and x_binary[4] == '1' and x_binary[5] == '1' and x_binary[6] == '1' and x_binary[7] == '1':\n            return True\n        else:\n            return False\n    elif len(x_binary) == 17:\n        if x_binary[0] == '1' and x_binary[1] == '1' and x_binary[2] == '1' and x_binary[3] == '1' and x_binary[4] == '1' and x_binary[5] == '1' and x_binary[6] == '1' and x_binary[7] == '1' and x_binary[8] == '1':\n            return True\n        else:\n            return False\n    elif len(x_binary) == 18:\n        if x_binary[0] == '1' and x_binary[1] == '1' and x_binary[2] == '1' and x_binary[3] == '1' and x_binary[4] == '1' and x_binary[5] == '1' and x_binary[6] == '1' and x_binary[7] == '1' and x_binary[8] == '1' and x_binary[9] == '1':\n            return True\n        else:\n            return False\n    elif len(x_binary) == 19:\n        if x_binary[0] == '1' and x_binary[1] == '1' and x_binary[2] == '1' and x_binary[3] == '1' and x_binary[4] == '1' and x_binary[5] == '1' and x_binary[6] == '1' and x_binary[7] == '1' and x_binary[8] == '1' and x_binary[9] == '1' and x_binary[10] == '1':\n            return True\n        else:\n            return False\n    elif len(x_binary) == 20:\n        if x_binary[0] == '1' and x_binary[1] == '1' and x_binary[2] == '1' and x_binary[3] == '1' and x_binary[4] == '1' and x_binary[5] == '1' and x_binary[6] == '1' and x_binary[7] == '1' and x_binary[8] == '1' and x_binary[9] == '1' and x_binary[10] == '1' and x_binary[11] == '1':\n            return True\n        else:\n            return False\n    elif len(x_binary) == 21:\n        if x_binary[0] == '1' and x_binary[1] == '1' and x_binary[2] == '1' and x_binary[3] == '1' and x_binary[4] == '1' and x_binary[5] == '1' and x_binary[6] == '1' and x_binary[7] == '1' and x_binary[8] == '1' and x_binary[9] == '1' and x_binary[10] == '1' and x_binary[11] == '1' and x_binary[12] == '1':\n            return True\n        else:\n            return False\n    elif len(x_binary) == 22:\n        if x_binary[0] == '1' and x_binary[1] == '1' and x_binary[2] == '1' and x_binary[3] == '1' and x_binary[4] == '1' and x_binary[5] == '1' and x_binary[6] == '1' and x_binary[7] == '1' and x_binary[8] == '1' and x_binary[9] == '1' and x_binary[10] == '1' and x_binary[11] == '1' and x_binary[12] == '1' and x_binary[13] == '1':\n            return True\n        else:\n            return False\n    elif len(x_binary) == 23:\n        if x_binary[0] == '1' and x_binary[1] == '1' and x_binary[2] == '1' and x_binary[3] == '1' and x_binary[4] == '1' and x_binary[5] == '1' and x_binary[6] == '1' and x_binary[7] == '1' and x_binary[8] == '1' and x_binary[9] == '1' and x_binary[10] == '1' and x_binary[11] == '1' and x_binary[12] == '1' and x_binary[13] == '1' and x_binary[14] == '1':\n            return True\n        else:\n            return False\n    elif len(x_binary) == 24:\n        if x_binary[0] == '1' and x_binary[1] == '1' and x_binary[2] == '1' and x_binary[3] == '1' and x_binary[4] == '1' and x_binary[5] == '1' and x_binary[6] == '1' and x_binary[7] == '1' and x_binary[8] == '1' and x_binary[9] == '1' and x_binary[10] == '1' and x_binary[11] == '1' and x_binary[12] == '1' and x_binary[13] == '1' and x_binary[14] == '1' and x_binary[15] == '1':\n            return True\n        else:\n            return False\n    elif len(x_binary) == 25:\n        if x_binary[0] == '1' and x_binary[1] == '1' and x_binary[2] == '1' and x_binary[3] == '1' and x_binary[4] == '1' and x_binary[5] == '1' and x_binary[6] == '1' and x_binary[7] =",
        "num_ids": 2008
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1))!= 0: \n        return 0\n    return 1\n",
        "num_ids": 26
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if ((x & (x - 1)) == 0): \n        return True\n    else: \n        return False\n",
        "num_ids": 30
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\ndef Hamming_Distance(x,y):\n    '''\n    Write a python function to compute the hamming distance between two integers.\n    '''\n    x = bin(x)\n    y = bin(y)\n    d = 0\n    for i in range(2, len(x)):\n        if x[i]!= y[i]:\n            d = d + 1\n    return d\ndef add_One(x):\n    '''\n    Write a python function to add 1 to a number.\n    '''\n    return x + 1\ndef subset_Sum(arr, k):\n    '''\n    Write a Python function to compute the maximum subset sum for a given array.\n    '''\n    n = len(arr)\n    dp = [[0 for i in range(k + 1)] for j in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j >= arr[i - 1]:\n                dp[i][j] = max(dp[i - 1][j], arr[i - 1] + dp[i - 1][j - arr[i - 1]])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][k]\ndef Single_Number(nums):\n    '''\n    Write a Python function to return the single number that appears once in a given array.\n    '''\n    return 2 * sum(set(nums)) - sum(nums)\ndef Single_Number_Hash_Table(nums):\n    '''\n    Write a Python function to return the single number that appears once in a given array using hash table.\n    '''\n    hash_table = {}\n    for num in nums:\n        try:\n            hash_table.pop(num)\n        except:\n            hash_table[num] = 1\n    return hash_table.popitem()[0]\ndef find_Median_Sorted_Arrays(nums1, nums2):\n    '''\n    Write a Python function to return the median of two given sorted arrays.\n    '''\n    len1 = len(nums1)\n    len2 = len(nums2)\n    if len1 == len2:\n        return (nums1[len1 // 2] + nums2[len2 // 2]) / 2\n    if len1 > len2:\n        return find_Median_Sorted_Arrays(nums2, nums1)\n    nums1_idx = 0\n    nums2_idx = 0\n    count = len1 + len2\n    while count > 0:\n        if nums1_idx < len1 and nums2_idx < len2:\n            if nums1[nums1_idx] <= nums2[nums2_idx]:\n                nums1_idx += 1\n                count -= 1\n            else:\n                nums2_idx += 1\n                count -= 1\n        else:\n            if nums1_idx < len1:\n                nums1_idx += 1\n                count -= 1\n            elif nums2_idx < len2:\n                nums2_idx += 1\n                count -= 1\n    return (nums1[nums1_idx - 1] + nums2[nums2_idx - 1]) / 2\ndef find_Median_Sorted_Arrays_II(nums1, nums2):\n    '''\n    Write a Python function to return the median of two given sorted arrays.\n    '''\n    len1 = len(nums1)\n    len2 = len(nums2)\n    if len1 == len2:\n        return (nums1[len1 // 2] + nums2[len2 // 2]) / 2\n    if len1 > len2:\n        return find_Median_Sorted_Arrays(nums2, nums1)\n    nums1_idx = 0\n    nums2_idx = 0\n    count = len1 + len2\n    while count > 0:\n        if nums1_idx < len1 and nums2_idx < len2:\n            if nums1[nums1_idx] <= nums2[nums2_idx]:\n                nums1_idx += 1\n                count -= 1\n            else:\n                nums2_idx += 1\n                count -= 1\n        elif nums1_idx < len1:\n            nums1_idx += 1\n            count -= 1\n        elif nums2_idx < len2:\n            nums2_idx += 1\n            count -= 1\n    if count == 0:\n        return (nums1[nums1_idx - 1] + nums2[nums2_idx - 1]) / 2\n    if count == 1:\n        if nums1[nums1_idx - 1] <= nums2[nums2_idx - 1]:\n            return nums1[nums1_idx - 1]\n        else:\n            return nums2[nums2_idx - 1]\ndef has_Pair(a, b):\n    '''\n    Write a Python function to return true if first array has pair with second array and false otherwise.\n    '''\n    for i in range(len(b)):\n        if a.count(b[i]) >= 1:\n            return True\n    return False\ndef sum_Pair(a, b):\n    '''\n    Write a Python function to return the sum of the pairs in the first array with sum equal to that of the second array.\n    '''\n    s = 0\n    for i in range(len(b)):\n        if a.count(b[i] - 1) >= 1:\n            s = s + b[i]\n    return s\ndef min_Number_Of_Operations(a, b):\n    '''\n    Write a Python function to return the minimum number of operations needed to make the sum of two arrays equal.\n    '''\n    len1 = len(a)\n    len2 = len(b)\n    if len1 == len2:\n        return (max(a) + max(b)) - (min(a) + min(b))\n    if len1 > len2:\n        return (max(a) + max(b)) - (min(a) + min(b))\n    if len1 < len2:\n        return (max(a) + max(b)) - (min(a) + min(b))\ndef max_Subarray_Sum_Less_Than_K(a, k):\n    '''\n    Write a Python function to return the maximum sum of a contiguous subarray of a given array which has a sum less than a given number.\n    '''\n    l = []\n    sum = 0\n    for i in range(len(a)):\n        sum = sum + a[i]\n        l.append(sum)\n    m = 0\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            if (l[j] - l[i - 1]) < k:\n                m = max(m, l[j] - l[i - 1])\n    return m\ndef max_Subarray_Sum_Less_Than_K_II(a, k):\n    '''\n    Write a Python function to return the maximum sum of a contiguous subarray of a given array which has a sum less than a given number.\n    '''\n    m = 0\n    sum = 0\n    for i in range(len(a)):\n        sum = sum + a[i]\n        if sum < k:\n            m = max(m, sum)\n        elif sum > k:\n            sum = sum - a[i]\n    return m\ndef is_Strictly_Increasing(a):\n    '''\n    Write a Python function to check whether a given array is strictly increasing or not.\n    '''\n    for i in range(len(a) - 1):\n        if a[i] >= a[i + 1]:\n            return False\n    return True\ndef num_of_Subarrays_with_Sum_Less_Than_K(a, k):\n    '''\n    Write a Python function to count the number of subarrays with sum less than a given number.\n    '''\n    s ",
        "num_ids": 5
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}', text)\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words=re.findall(\"\\S+\",text)\n    for i in range(len(words)):\n        if len(words[i])>=4:\n            print(words[i])\n",
        "num_ids": 50
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    result = re.findall(pattern, text)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text) < 4:\n        return False\n    else:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    result = pattern.findall(text)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # regex = r'\\s\\w{4}'\n    # regex = r'\\w{4,}'\n    # regex = r'\\w{4,}\\s'\n    # regex = r'\\w{4,}'\n    # regex = r'\\w{4,}(?=\\s)'\n    # regex = r'\\w{4,}(?=[\\s,.?!@#$%^&*()])'\n    # regex = r'\\w{4,}(?=[\\s,.?!@#$%^&*()\\n])'\n    # regex = r'\\w{4,}(?=\\s\\n)'\n    # regex = r'\\w{4,}(?=[\\s,?.!@#$%^&*()\\n])'\n    # regex = r'\\w{4,}(?=[\\s,?.!@#$%^&*()\\n],.?!@#$%^&*()\\n])'\n    regex = r'\\w{4,}(?=\\s\\n,?\\n)'\n    result = re.finditer(regex,text)\n    for match in result:\n        print(match)\n    print(len(result))\n",
        "num_ids": 298
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\s\\w{4,}\\s')\n    result = pattern.findall(text)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.split()\n    print(text)\n    output = []\n    for word in text:\n        if len(word) >= 4:\n            output.append(word)\n    return output\n",
        "num_ids": 50
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words=text.split()\n    print(words)\n    return [word for word in words if len(word) >=4]\n",
        "num_ids": 33
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num * num for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Method 1\n    # for num in nums:\n    #     print(num ** 2)\n",
        "num_ids": 26
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i*i)\n",
        "num_ids": 18
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i*i)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i**2)\n    return new_list\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    #Version 1\n    # list1 = []\n    # for i in nums:\n    #     list1.append(i*i)\n    # return list1\n",
        "num_ids": 42
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] * nums[i]\n",
        "num_ids": 34
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        new_list.append(num**2)\n    return new_list\n",
        "num_ids": 35
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    original_string = str\n    rotations = 0\n    \n    while(True):\n        string = original_string[len(original_string)-1] + original_string[:len(original_string)-1]\n        \n        if(string == original_string):\n            return rotations\n        \n        rotations += 1\n        \n        \n        \nstr = input()\nprint(find_Rotations(str))\n",
        "num_ids": 101
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    for i in range(0,n): \n        temp=str[i:] + str[0:i]\n        if(temp==str): \n            return i\n    return -1\n",
        "num_ids": 55
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    for i in range(n - 1): \n        if str[i]!= str[i + 1]: \n            return i + 1\n    return -1\n",
        "num_ids": 50
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    prev = str[0]\n    count = 1\n    for i in range(1,len(str)):\n        if(str[i]!= prev):\n            count+=1\n            prev = str[i]\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    new_str = str[len(str)-1] + str[:len(str)-1]\n    return len(str) - len(new_str)\n",
        "num_ids": 40
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # taking length of string \n    n = len(str) \n    count = 0 \n    # traversing string \n    for i in range(0, n - 1): \n        if (str[i]!= str[i + 1]): \n            # if mismatch found, increment count \n            count += 1\n            # if mismatch found in first half, rotate string by half. \n            # example: aaabbbbcddd\n            # and checking for match in second half. \n            if (i < n // 2): \n                count += (n // 2) - i \n                # if match found, then break out of loop \n                break\n            # if mismatch found in second half, rotate string by half. \n            # example: aaabbbbcddd\n            # and checking for match in first half. \n            else: \n                count += i - (n // 2) \n                # if match found, then break out of loop \n                break\n    return count \n",
        "num_ids": 236
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) < 2:\n        return 0\n    n = len(str)\n    rotations = 0\n    i = 0\n    while i < n-1:\n        if str[i]!= str[i+1]:\n            break\n        i += 1\n    if i == n-1:\n        return 0\n    for j in range(1, i+1):\n        if str[j]!= str[i+1]:\n            rotations += 1\n    return rotations\n",
        "num_ids": 119
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = list(str)\n    print('Rotations: ', end='')\n    print(*str)\n    for i in range(len(str)):\n        if str[i:] + str[:i] == str:\n            print(i)\n            return\n    return -1\n",
        "num_ids": 70
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    original = str\n    # set variable to store the length of string\n    length = len(str)\n    # set variable to store the number of rotations\n    rotations = 0\n    for i in range(1,length):\n        if str[i:] + str[0:i] == original:\n            rotations += 1\n    return rotations\n",
        "num_ids": 83
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    result = 0\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            result += 1\n",
        "num_ids": 40
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return (s[:s.find(ch)]+s[s.find(ch)+1:s.rfind(ch)]).replace(ch,\"\")\n",
        "num_ids": 39
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch = ch.upper()\n    s = s.upper()\n    for i in range(0,len(s)):\n        if(s[i] == ch):\n            return s[:i]+s[i+1:]\n    return s\n",
        "num_ids": 61
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '')\n",
        "num_ids": 21
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,'')\n    s=s[::-1].replace(ch,'')\n    return s[::-1]\n",
        "num_ids": 37
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    lst = s.split(ch) \n    return lst[0] + ch + lst[len(lst)-1] \n",
        "num_ids": 36
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # slice indices start:stop:step\n    s=s[0:len(s)-1]\n    print(s)\n    return s\n",
        "num_ids": 36
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # return s.replace(ch,'',2)\n    # slice it and replace the character\n    return s[:s.find(ch)] + s[s.rfind(ch)+1:]\n    \n    \nif __name__ == \"__main__\":\n    s = input('Enter the string: ')\n    ch = input('Enter the character to remove: ')\n    print(remove_Occ(s,ch)",
        "num_ids": 100
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '')\n",
        "num_ids": 21
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return (s.replace(ch, \"\", 1))\n    \ndef replace_Occ(s,ch1,ch2): \n    '''\n    Write a python function to replace first and last occurrence of a given character with another character.\n    '''\n    return (s.replace(ch1, ch2, 1))\n    \ndef remove_AllOcc(s,ch): \n    '''\n    Write a python function to remove all occurrences of a given character from the string.\n    '''\n    return (s.replace(ch, \"\"))\n    \ndef swap_Case(s): \n    '''\n    Write a python function to change the case of string to upper case and vice versa\n    '''\n    return (s.swapcase())\n    \ndef split_String(s, delimiter): \n    '''\n    Write a python function to split the string on the first occurrence of the delimiter.\n    '''\n    return (s.split(delimiter, 1))\n",
        "num_ids": 16
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")\n",
        "num_ids": 13
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    matrix = sorted(M, key=sum)\n    return matrix\n",
        "num_ids": 19
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key = sum)\n    return M\n",
        "num_ids": 16
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # get list of sum of row\n    row_sums = [sum(row) for row in M]\n",
        "num_ids": 28
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    L = len(M)\n    sums = [0]*L\n    for r in range(L):\n        for c in range(L):\n            sums[r] += M[r][c]\n    # print(sums)\n    M = [[M[r][c] for c in range(L)] for r in range(L)]\n    for r in range(L):\n        for c in range(L):\n            M[r][c] = sums[r] - M[r][c]\n    # print(M)\n    return M\n",
        "num_ids": 134
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n",
        "num_ids": 13
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    temp_list = []\n    for row in M:\n        temp_list.append(sum(row))\n",
        "num_ids": 28
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]\n    sorted_row_sums = sorted(row_sums)\n    indices = [row_sums.index(i) for i in sorted_row_sums]\n    M = [M[i] for i in indices]\n    return M\n",
        "num_ids": 79
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    for row in range(N):\n        for col in range(row + 1, N):\n            M[row][col], M[col][row] = M[col][row], M[row][col]\n    M.sort(key = sum)\n    return M\n",
        "num_ids": 73
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n",
        "num_ids": 13
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        M[i].sort(reverse=True)\n    return M\n",
        "num_ids": 30
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n",
        "num_ids": 10
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = l*b*h\n    return vol\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3)*b*h*l\n    print(volume)\n    return volume\n",
        "num_ids": 26
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/2)*l*b*h\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return(1/6) * l * b * h\n",
        "num_ids": 16
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = ((1/3)*h*(l*b)) \n    return volume \n    \ndef find_Perimeter(l,b) : \n    '''\n    Write a python function to find the perimeter of a trapezoidal prism.\n    '''\n    perimeter = ((l+b)*2)\n    return perimeter\n    \ndef find_Surface_Area(l,b,h) : \n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    surface_area = ((1/2)*l*b) + ((1/2)*b*h) + ((1/2)*h*l)\n    return surface_area\n    \ndef find_Apothem(l,b) : \n    '''\n    Write a python function to find the apothem of a trapezoidal prism.\n    '''\n    apothem = ((1/2)*l)*math.sqrt(2)\n    return apothem\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a rectangular prism.\n    '''\n    area = l*b\n    return area\n    \ndef find_Circumference(r) : \n    '''\n    Write a python function to find the circumference of a circle.\n    '''\n    circumference = (2*math.pi*r)\n    return circumference\n    \ndef find_Diameter(r) : \n    '''\n    Write a python function to find the diameter of a circle.\n    '''\n    diameter = (2*r)\n    return diameter\n    \ndef find_Radius(d) : \n    '''\n    Write a python function to find the radius of a circle.\n    '''\n    radius = (d/2)\n    return radius\n    \ndef find_Diameter_Circumference_Ratio(r) : \n    '''\n    Write a python function to find the diameter to circumference ratio of a circle.\n    '''\n    diameter_to_circumference_ratio = (r/2)\n    return diameter_to_circumference_ratio\n    \ndef find_Circumference_Diameter_Ratio(r) : \n    '''\n    Write a python function to find the circumference to diameter ratio of a circle.\n    '''\n    circumference_to_diameter_ratio = (r*2)\n    return circumference_to_diameter_ratio\n    \ndef find_Radius_Area(r,a) : \n    '''\n    Write a python function to find the radius to area ratio of a circle.\n    '''\n    radius_to_area_ratio = (a/math.pi)\n    return radius_to_area_ratio\n    \ndef find_Radius_Area_Radius_Circumference_Ratio(r,a) : \n    '''\n    Write a python function to find the radius to area to radius to circumference ratio of a circle.\n    '''\n    radius_to_area_to_radius_to_circumference_ratio = ((a/math.pi) / (r/2))\n    return radius_to_area_to_radius_to_circumference_ratio\n    \ndef find_Radius_Circumference_Diameter_Ratio(r,c) : \n    '''\n    Write a python function to find the radius to circumference to diameter ratio of a circle.\n    '''\n    radius_to_circumference_to_diameter_ratio = ((c/2) / r)\n    return radius_to_circumference_to_diameter_ratio\n    \ndef find_Area_Diameter_Area_Circumference_Ratio(a,d) : \n    '''\n    Write a python function to find the area to diameter to area to circumference ratio of a circle.\n    '''\n    area_to_diameter_to_area_to_circumference_ratio = (math.pi / (d/2))\n    return area_to_diameter_to_area_to_circumference_ratio\n    \ndef find_Area_Diameter_Radius_Area_Circumference_Ratio(a,d,r) : \n    '''\n    Write a python function to find the area to diameter to radius to area to circumference ratio of a circle.\n    '''\n    area_to_diameter_to_radius_to_area_to_circumference_ratio = ((math.pi / (d/2)) / (r/2))\n    return area_to_diameter_to_radius_to_area_to_circumference_ratio\n    \ndef find_Diameter_Circumference_Circumference_Area_Ratio(d,c,a) : \n    '''\n    Write a python function to find the diameter to circumference to circumference to area ratio of a circle.\n    '''\n    diameter_to_circumference_to_circumference_to_area_ratio = ((c/2) * (c/2)) / a\n    return diameter_to_circumference_to_circumference_to_area_ratio\n    \ndef find_Area_Circumference_Diameter_Circumference_Area_Ratio(a,c,d) : \n    '''\n    Write a python function to find the area to circumference to diameter to circumference to area ratio of a circle.\n    '''\n    area_to_circumference_to_diameter_to_circumference_to_area_ratio = (a/(c/2)) / ((c/2)*(d/2))\n    return area_to_circumference_to_diameter_to_circumference_to_area_ratio\n",
        "num_ids": 76
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol=l*b*h\n    return vol\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3) * l * b * h\n",
        "num_ids": 16
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall('^[a-z]+_[a-z]+$', text)!= []\n    \nassert text_lowercase_underscore('hello') == False\nassert text_lowercase_underscore('hello_world') == True\nassert text_lowercase_underscore('hello__world') == False\nassert text_lowercase_underscore('hello_world_') == False\nassert text_lowercase_underscore('hello_world__') == True\nassert text_lowercase_underscore('hello_world_and_david') == True\nassert text_lowercase_underscore('hello_world__and_david') == True\nassert text_lowercase_underscore('hello_world_and_david__') == False\nassert text_lowercase_underscore('hello_world_and_david__and_david') == False\nassert text_lowercase_underscore('hello_world_and_david__and_david__and_david') == False\nassert text_lowercase_underscore('hello_world__and_david__and_david__and_david') == True\nassert text_lowercase_underscore('hello_world_and_david__and_david__and_david_') == False\nassert text_lowercase_underscore('hello_world_and_david__and_david__and_david_and_david') == True\n",
        "num_ids": 330
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #re.sub('<:.+?:>', '', text)\n    res = re.findall(r\"_[a-z]+_\", text)\n    if res == []:\n        return False\n    else:\n        return True\n",
        "num_ids": 60
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match('[a-z]+_[a-z]+', text)\n",
        "num_ids": 23
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[_]+\\w+',text):\n        return True\n    return False\n",
        "num_ids": 25
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'_+', text) is None:\n        return False\n    else:\n        return True\n",
        "num_ids": 31
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.match(r'[a-z]_[a-z]', text))\n",
        "num_ids": 27
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]_[a-z]', text))\n",
        "num_ids": 27
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'^[a-z]_[a-z]+$', text)\n",
        "num_ids": 27
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #return re.compile(r'(([a-z])+)_([a-z])+').search(text)\n    return bool(re.search(r'(([a-z])+)_([a-z])+',text))\n",
        "num_ids": 60
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4*a\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a * 4\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    chars_list = []\n    for i in range(len(string)):\n        chars_list.append(string[i])\n    chars_list = [ord(x) for x in chars_list]\n    return chars_list\n",
        "num_ids": 60
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output_string = []\n    for i in range(0, len(string)):\n        if string[i] not in output_string:\n            output_string.append(string[i])\n",
        "num_ids": 48
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = []\n    for i in string:\n        string_list.append(i)\n    return string_list\n",
        "num_ids": 32
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    main_string = string[0]\n    check_string = string[1]\n    output_string = list(main_string)\n    for i in check_string:\n        output_string.remove(i)\n    return \"\".join(output_string)\nprint(str_to_list([\"abcdefghijklmnopqrstuvwxyz\", \"bcdefghijklmnopqrstuvwxyzab\"]))\n",
        "num_ids": 107
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li_str = list(string) \n    li_str_new = list() \n    for i in range(len(li_str)): \n        if li_str[i] not in li_str_new: \n            li_str_new.append(li_str[i]) \n    str_new = \"\" \n    for ele in li_str_new: \n        str_new += ele \n    return str_new \n",
        "num_ids": 109
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_1 = string.split()\n    string_2 = string_2.split()\n    string_3 = []\n    for i in string_1:\n        if i in string_2:\n            string_3.append(i)\n    print(string_3)\n",
        "num_ids": 67
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [c for c in string if c not in string[:string.find(c)]]\n    \nif __name__ == '__main__':\n    string_1 = input(\"Enter the string: \")\n    string_2 = input(\"Enter the string: \")\n    print(\"Input String: \"+string_1)\n    print(\"Input String: \"+string_2)\n    print(\"Resultant String: \")\n    print(''.join(str_to_list(string_1)))",
        "num_ids": 116
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.replace(\" \",\"\")\n    lst = list(string)\n    lst1 = list(string)\n    for i in lst:\n        if i in lst1:\n            lst1.remove(i)\n    return lst1\n",
        "num_ids": 65
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string)\ndef find_index(s, ch):\n    return [i for i, letter in enumerate(s) if letter == ch]\n",
        "num_ids": 39
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #print(string)\n    #print(string[0:1])\n    #print(string[0:2])\n    #print(string[0:3])\n    #print(string[0:4])\n    #print(string[0:5])\n    #print(string[0:6])\n    #print(string[0:7])\n    #print(string[0:8])\n    #print(string[0:9])\n    #print(string[0:10])\n    #print(string[0:11])\n    #print(string[0:12])\n    #print(string[0:13])\n    #print(string[0:14])\n    #print(string[0:15])\n    #print(string[0:16])\n    #print(string[0:17])\n    #print(string[0:18])\n    #print(string[0:19])\n    #print(string[0:20])\n    #print(string[0:21])\n    #print(string[0:22])\n    #print(string[0:23])\n    #print(string[0:24])\n    #print(string[0:25])\n    #print(string[0:26])\n    #print(string[0:27])\n    #print(string[0:28])\n    #print(string[0:29])\n    #print(string[0:30])\n    #print(string[0:31])\n    #print(string[0:32])\n    #print(string[0:33])\n    #print(string[0:34])\n    #print(string[0:35])\n    #print(string[0:36])\n    #print(string[0:37])\n    #print(string[0:38])\n    #print(string[0:39])\n    #print(string[0:40])\n    #print(string[0:41])\n    #print(string[0:42])\n    #print(string[0:43])\n    #print(string[0:44])\n    #print(string[0:45])\n    #print(string[0:46])\n    #print(string[0:47])\n    #print(string[0:48])\n    #print(string[0:49])\n    #print(string[0:50])\n    #print(string[0:51])\n    #print(string[0:52])\n    #print(string[0:53])\n    #print(string[0:54])\n    #print(string[0:55])\n    #print(string[0:56])\n    #print(string[0:57])\n    #print(string[0:58])\n    #print(string[0:59])\n    #print(string[0:60])\n    #print(string[0:61])\n    #print(string[0:62])\n    #print(string[0:63])\n    #print(string[0:64])\n    #print(string[0:65])\n    #print(string[0:66])\n    #print(string[0:67])\n    #print(string[0:68])\n    #print(string[0:69])\n    #print(string[0:70])\n    #print(string[0:71])\n    #print(string[0:72])\n    #print(string[0:73])\n    #print(string[0:74])\n    #print(string[0:75])\n    #print(string[0:76])\n    #print(string[0:77])\n    #print(string[0:78])\n    #print(string[0:79])\n    #print(string[0:80])\n    #print(string[0:81])\n    #print(string[0:82])\n    #print(string[0:83])\n    #print(string[0:84])\n    #print(string[0:85])\n    #print(string[0:86])\n    #print(string[0:87])\n    #print(string[0:88])\n    #print(string[0:89])\n    #print(string[0:90])\n    #print(string[0:91])\n    #print(string[0:92])\n    #print(string[0:93])\n    #print(string[0:94])\n    #print(string[0:95])\n    #print(string[0:96])\n    #print(string[0:97])\n    #print(string[0:98])\n    #print(string[0:99])\n    #print(string[0:100])\n    #print(string[0:101])\n    #print(string[0:102])\n    #print(string[0:103])\n    #print(string[0:104])\n    #print(string[0:105])\n    #print(string[0:106])\n    #print(string[0:107])\n    #print(string[0:108])\n    #print(string[0:109])\n    #print(string[0:110])\n    #print(string[0:111])\n    #print(string[0:112])\n    #print(string[0:113])\n    #print(string[0:114])\n    #print(string[0:115])\n    #print(string[0:116])\n    #print(string[0:117])\n    #print(string[0:118])\n    #print(string[0:119])\n    #print(string[0:120])\n    #print(string[0:121])\n    #print(string[0:122])\n    #print(string[0:123])\n    #print(string[0:124])\n    #print(string[0:125])\n    #print(string[0:126])\n    #print(string[0:127])\n    #print(string[0:128])\n    #print(string[0:129])\n    #print(string[0:130])\n    #print(string[0:131])\n    #print(string[0:132])\n    #print(string[0:133])\n    #print(string[0:134])\n    #print(string[0:135])\n    #print(string[0:136])\n    #print(string[0:137])\n    #print(string[0:138])\n    #print(string[0:139])\n    #print(string[0:140])\n    #print(string[0:141])\n    #print(string[0:142])\n    #print(string[0:143])\n    #print(string[0:144])\n    #print(string[0:145])\n    #print(string[0:146])\n    #print(string[0:147])\n    #print(string[0:148])\n    #print(string[0:149])\n    #print(string[0:150])\n    #print(string[0:151])\n    #print(string[0:152])\n    #print(string[0:153])\n    #print(string[0:154])\n    #print(string[0:155])\n    #print(string[0:156])\n    #print(string[0:157])\n    #print(string[0:158])\n    #print(string[0:159])\n    #print(string[0:160])\n    #print(string[0:161])\n    #print(string[0:162])\n    #print(string[0:163])\n    #print(string[0:164])\n    #print(string[0:165])\n    #print(string[0:166])\n    #print(string[0:167])\n    #print(string[0:168])\n    #print(string[0:169])\n    #print(string[0:170])\n    #print(string[0:171])\n    #print(string[0:172])\n    #print(string[0:173])\n    #print(string[0:174])\n    #print(string[0:175])\n    #print(string[0:176])\n    #print(string[0:177])\n    #print(string[0:178])\n    #print(string[0:179])\n    #print(string[0:180])\n    #print(string[0:181])\n    ",
        "num_ids": 2001
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    for i in range(len(arraynums)-1):\n        if arraynums[i]==arraynums[i+1]:\n            return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if arraynums.count(i) > 1:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # using set\n    result = set()\n    for num in arraynums:\n        if num not in result:\n            result.add(num)\n        else:\n            return num\n    return None\n    # using list\n    # result = []\n    # for num in arraynums:\n    #     if num not in result:\n    #         result.append(num)\n    #     else:\n    #         return num\n    # return None\n",
        "num_ids": 108
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n",
        "num_ids": 10
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(len(arraynums)):\n            if i!=j and arraynums[i]==arraynums[j]:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # the time complexity is O(n)\n    # the space complexity is O(n)\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert containsDuplicate(arraynums) == True\n    assert containsDuplicate([1, 2, 3, 4]) == False\n    assert containsDuplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]) == True\n",
        "num_ids": 64
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return all(i in arraynums for i in arraynums)\n",
        "num_ids": 19
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    dic = {}\n    for ele in arraynums:\n        if ele not in dic:\n            dic[ele] = 1\n        else:\n            return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n",
        "num_ids": 20
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 8 or x == 9:\n        return True\n    elif x == 10 or x == 11:\n        return False\n    elif x == 12 or x == 13:\n        return True\n    elif x == 14 or x == 15:\n        return False\n    elif x == 16 or x == 17:\n        return True\n    elif x == 18 or x == 19:\n        return False\n    elif x == 20 or x == 21:\n        return True\n    elif x == 22 or x == 23:\n        return False\n    elif x == 24 or x == 25:\n        return True\n    else:\n        return False\n",
        "num_ids": 153
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [5,6,7,8,9,10]:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 0:\n        return False\n    elif x == 0:\n        return True\n    else:\n        return is_woodall(x // 10)\n",
        "num_ids": 41
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 1 or x % 5 == 4:\n        return True\n    else: \n        return False\n    \ndef is_woodall_2(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x % 5 == 1 or x % 5 == 4)\n    \n",
        "num_ids": 20
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    l = len(str(x))\n    s = str(x)\n    for i in range(0, l):\n        if i == 0:\n            if (int(s[i]) - int(s[i+1])) % 9!= 0:\n                return False\n        elif i == 1:\n            if (int(s[i]) - int(s[i-1])) % 9!= 0:\n                return False\n        else:\n            if (int(s[i]) - int(s[i-1])) % 9!= 0 or (int(s[i]) - int(s[i+1])) % 9!= 0:\n                return False\n    return True\n",
        "num_ids": 167
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%3 == 0\n",
        "num_ids": 10
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x > 0 and x % 3 == 0)\n",
        "num_ids": 16
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    l=[]\n    for i in range(2, x): \n        if (x % i == 0): \n            l.append(i)\n    if (len(l) == 0): \n        return True\n    else: \n        return False\n",
        "num_ids": 63
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    a = x / 3\n    b = x / 5\n    if a == int(a) and b == int(b):\n        return True\n    else:\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x = int(input('Enter a number: '))\n    if x % 3 == 0 and x % 5 == 0:\n        print('{0} is a woodall.'.format(x))\n    else:\n        print('{0} is not a woodall.'.format(x))\nis_woodall(x)\n",
        "num_ids": 78
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = int(str(num)[::-1])\n    return num-rev\n",
        "num_ids": 22
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = num[::-1]\n    return int(rev_num) == num - 1\n    \n    \nif __name__ == \"__main__\":\n    print(rev(1234)",
        "num_ids": 50
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == num[::-1][:-1]*2\n",
        "num_ids": 18
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #count = 0\n    #rev_num = str(num)[::-1]\n    #for i in range(len(rev_num)):\n        #if rev_num[i] == \"0\":\n            #count = count + 1\n    #if count == 0:\n        #return num == int(rev_num) * 2\n    #return False\n    return num % 2 == 0 and num == 2 * int(str(num)[::-1])\n",
        "num_ids": 110
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num1 = 0\n    num2 = num\n    while num2>0:\n        num1 = num1*10 + num2%10\n        num2 = int(num2/10)\n    print(num1)\n    return num1 == num*2\n",
        "num_ids": 64
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    s=str(num)\n    num1=int(s[::-1])\n    num2=num+1\n    if num2==num1:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if len(str(num)) % 2 == 0:\n        return str(num)[::-1] == str(num - 1)[::-1]\n    else:\n        return str(num)[::-1] == str(num - 1)[::-1]\n",
        "num_ids": 64
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    rev2 = 0\n    for i in range(0, len(str(num))):\n        rev += int(str(num)[i]) * (10 ** i)\n    for i in range(0, len(str(rev))):\n        rev2 += int(str(rev)[i]) * (10 ** i)\n    if num == rev2:\n        return True\n    else:\n        return False\n",
        "num_ids": 102
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    num = int(num[::-1])\n    if num < 2 * num:\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = list(str(num))\n    if num[::-1] == num:\n        return \"True\"\n    else:\n        return \"False\"\n",
        "num_ids": 40
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    arr = [int(i) for i in arr]\n    \n    arr.sort()\n    \n    for i in range(len(arr)-1,0,-1) :\n        if arr[i] > 0 :\n            return arr[i]\n    return arr[0]\n    \ndef find_Max_Num_2(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    arr = [int(i) for i in arr]\n    \n    arr.sort()\n    \n    return \"\".join([str(i) for i in arr])\n    ",
        "num_ids": 45
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    my_set = set(arr)\n    my_list = list(my_set)\n    my_list.sort()\n    my_list.reverse()\n    largest_num = \"\"\n    for i in my_list :\n        largest_num += str(i)\n    return largest_num\n",
        "num_ids": 72
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if n == 0 : \n        return 0\n    if n == 1 : \n        return arr[0]\n    max_num = arr[0]\n    for i in range(1,n) : \n        max_num = max(max_num,arr[i] * 10**(n-1) + find_Max_Num(arr[:i] + arr[i+1:]))\n    return max_num\n",
        "num_ids": 110
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    nums = [int(x) for x in arr]\n    max_num = max(nums)\n    return max_num\n    \nprint(find_Max_Num(\"12345\"))\n",
        "num_ids": 48
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    print(\"Largest number = \", end = \" \") \n    n = len(arr) \n    arr.sort(reverse = True) \n    largest = 0 \n    for i in range(0,n) : \n        largest = largest * 10 + arr[i] \n    print(largest)\n",
        "num_ids": 76
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse = True) \n    result = ''\n    for i in arr :\n        result += str(i)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr) \n    #print(\"The array is: \",arr)\n    max_num = [0] * n \n    max_num[0] = arr[0] \n    for i in range(1, n) : \n        max_num[i] = max(max_num[i - 1] * 10 + arr[i], arr[i]) \n",
        "num_ids": 93
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if (arr[0] < arr[1]): \n        big = arr[0] \n    else: \n        big = arr[1] \n    for i in range(2,len(arr)): \n        if arr[i] > big: \n            big = arr[i] \n    return big\n",
        "num_ids": 79
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # creating an empty list\n    arr_list = []\n    # for loop to store all the values of array in a list\n    for num in arr:\n        arr_list.append(num)\n",
        "num_ids": 48
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    return arr[0]\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False\n        \ndef write_a_function_to_return_max_sum_of_any_subarray(arr):\n    '''\n    Write a python function to return the maximum sum of any subarray of an array.\n    '''\n    max_sum=0\n    for i in range(len(arr)):\n        current_sum=0\n        for j in range(i,len(arr)):\n            current_sum+=arr[j]\n            if(current_sum>max_sum):\n                max_sum=current_sum\n    return max_sum\n",
        "num_ids": 79
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x>0 and y>0) or (x<0 and y<0):\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0 and y>0) or (x>0 and y<0): \n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x == 0 or y == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # x = int(input('Enter first number: '))\n    # y = int(input('Enter second number: '))\n    if x<0 and y<0: \n        return True\n    if x>0 and y>0:\n        return True\n    else:\n        return False\n",
        "num_ids": 71
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    if x > 0 and y > 0:\n        return True\n    else:\n        return False\n        \nprint(opposite_Signs(-2,-3))\nprint(opposite_Signs(-5,2))\nprint(opposite_Signs(5,2))\n",
        "num_ids": 81
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=int(input(\"Enter the value for x:\"))\n    y=int(input(\"Enter the value for y:\"))\n    def opposite_signs(x,y):\n        if x<0 and y>0:\n            print(True)\n        elif x>0 and y<0:\n            print(True)\n        else:\n            print(False)\nopposite_signs(x,y",
        "num_ids": 98
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n",
        "num_ids": 19
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)//2\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = n - 1\n    return n ** 2 + n\n",
        "num_ids": 17
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # n = 3\n    # 1\n    # 3\n    # 6\n    # 10\n    # 15\n    # 21\n    # 28\n    # 36\n    # 45\n    # 55\n    # 66\n    # 78\n    # 91\n    # 105\n    # 120\n    # 136\n    # 153\n    # 170\n    # 186\n    # 204\n    # 221\n    # 238\n    # 256\n    # 273\n    # 289\n    # 306\n    # 324\n    # 341\n    # 348\n    # 366\n    # 381\n    # 397\n    # 414\n    # 430\n    # 447\n    # 463\n    # 470\n    # 488\n    # 506\n    # 524\n    # 541\n    # 559\n    # 576\n    # 593\n    # 611\n    # 628\n    # 646\n    # 663\n    # 681\n    # 699\n    # 716\n    # 733\n    # 751\n    # 769\n    # 786\n    # 804\n    # 821\n    # 839\n    # 856\n    # 873\n    # 891\n    # 908\n    # 926\n    # 943\n    # 961\n    # 979\n    # 996\n    # 1123\n    # 1140\n    # 1158\n    # 1175\n    # 1193\n    # 1210\n    # 1228\n    # 1246\n    # 1264\n    # 1281\n    # 1299\n    # 1316\n    # 1334\n    # 1351\n    # 1368\n    # 1386\n    # 1403\n    # 1421\n    # 1438\n    # 1456\n    # 1473\n    # 1490\n    # 1508\n    # 1525\n    # 1543\n    # 1561\n    # 1578\n    # 1596\n    # 1613\n    # 1631\n    # 1648\n    # 1665\n    # 1683\n    # 1700\n    # 1718\n    # 1735\n    # 1753\n    # 1770\n    # 1788\n    # 1806\n    # 1823\n    # 1840\n    # 1858\n    # 1876\n    # 1893\n    # 1911\n    # 1928\n    # 1945\n    # 1963\n    # 1980\n    # 1998\n    # 2016\n    # 2033\n    # 2051\n    # 2068\n    # 2085\n    # 2103\n    # 2120\n    # 2138\n    # 2155\n    # 2172\n    # 2190\n    # 2208\n    # 2226\n    # 2244\n    # 2252\n    # 2270\n    # 2287\n    # 2305\n    # 2323\n    # 2340\n    # 2358\n    # 2376\n    # 2393\n    # 2411\n    # 2428\n    # 2446\n    # 2463\n    # 2481\n    # 2499\n    # 2516\n    # 2534\n    # 2551\n    # 2569\n    # 2586\n    # 2604\n    # 2621\n    # 2639\n    # 2646\n    # 2663\n    # 2681\n    # 2698\n    # 2716\n    # 2733\n    # 2751\n    # 2768\n    # 2786\n    # 2803\n    # 2821\n    # 2838\n    # 2856\n    # 2873\n    # 2891\n    # 2908\n    # 2926\n    # 2943\n    # 2961\n    # 2979\n    # 2996\n    # 3014\n    # 3031\n    # 3048\n    # 3066\n    # 3083\n    # 3100\n    # 3118\n    # 3136\n    # 3153\n    # 3170\n    # 3188\n    # 3205\n    # 3222\n    # 3240\n    # 3258\n    # 3275\n    # 3293\n    # 3310\n    # 3328\n    # 3346\n    # 3363\n    # 3380\n    # 3398\n    # 3415\n    # 3432\n    # 3450\n    # 3457\n    # 3475\n    # 3492\n    # 3510\n    # 3527\n    # 3545\n    # 3562\n    # 3580\n    # 3587\n    # 3605\n    # 3622\n    # 3640\n    # 3658\n    # 3675\n    # 3693\n    # 3710\n    # 3728\n    # 3745\n    # 3752\n    # 3770\n    # 3787\n    # 3805\n    # 3822\n    # 3840\n    # 3857\n    # 3875\n    # 3892\n    # 3910\n    # 3927\n    # 3945\n    # 3962\n    # 3980\n    # 3998\n    # 4016\n    # 4033\n    # 4050\n    # 4068\n    # 4086\n    # 4103\n    # 4130\n    # 4148\n    # 4165\n    # 4182\n    # 4200\n    # 4217\n    # 4235\n    # 4253\n    # 4280\n    # 4298\n    # 4315\n    # 4333\n    # 4350\n    # 4368\n    # 4386\n    # 4404\n    # 4421\n    # 4439\n    # 4457\n    # 4475\n    # 4493\n    # 4511\n    # 4528\n    # 4546\n    # 4563\n    # 4580\n    # 4598\n    # 4615\n    # 4633\n    # 4650\n    # 4668\n    # 4685\n    # 4703\n    # 4720\n    # 4738\n    # 4755\n    # 4773\n    # 4788\n    # 4806\n    # 4824\n    # 4842\n    # 4860\n    # 4878\n    # 4896\n    # 4913\n    # 4931\n    # 4948\n    # 4965\n    # 4983\n    # 5001\n    # 5018\n    # 5035\n    # 5053\n    # 5071\n    # 5088\n    # 5105\n    # 5123\n    # 5140\n    # 5157\n    # 5175\n    # 5193\n    # 5210\n    # 5227\n    # 5245\n    # 5262\n    # 5279\n    # 5297\n    # 5314\n    # 5332\n    # 5349\n    # 5366\n    # 5384\n    # 5401\n    # 5419\n    # 5436\n    # 5453\n    # 5470\n    # 5487\n    # 5505\n    # 5522\n    # 5540\n    # 5557\n    # 5575\n    # 5593\n    # 5610\n    # 5628\n    # 5646\n    # 5663\n    # 5681\n    # 5698\n    # 5715\n    # 5733\n    # 5750\n    # 5778\n    # 5795\n    # 5812\n    # 5830\n    # 5847\n    # 5865\n    # 5882\n    # 5900\n    # 5917\n    # 5935\n    # 5953\n    # 5981\n    # 5998\n    # 6016\n    # 6044\n    # 6062\n    # 6080\n    # 6087\n    # 6105\n    # 6123\n    # 6142\n    # 6160\n    # 6178\n    # 6195\n    # 6213\n    # 6231\n    # 6248\n    # 6266\n    # 6284\n    # 6302\n    # 6320\n    # 6337\n    # 6355\n    # 6372\n    # 6380\n    # 6397\n    # 6415\n    # 6433\n    # 6451\n    # 6468\n    # 6486\n    # 6504\n    # 6522\n    # 6539\n    # 6567\n    # 6584\n    # 6602\n    # 6620\n    # 6638\n    # 6656\n    # 6674\n    # 6681\n    # 6698\n    # 6716\n    # 6734\n    # 6752\n    # 6770\n    # 6787\n    # 6805\n    # 6822\n    # 6840\n    # 6858\n    # 6876\n    # 6894\n    # 6912\n    # 6929\n    # 6947\n    # 6964\n    # 6982\n    # 7000\n    # 7017\n    # 7035\n    # 7052\n    # 7070\n    # 7087\n    # 710",
        "num_ids": 2017
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return n + is_octagonal(n - 1)\n",
        "num_ids": 46
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # octagonal_numbers = []\n    # for i in range(0,n):\n    #     octagonal_numbers.append(i*((3*i)+1))\n    # return octagonal_numbers[n-1]\n    return (3 * n) + 1\n",
        "num_ids": 69
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    subs = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            subs[s[i:j]] += 1\n    return sum([subs[i] for i in subs if len(i) == len(s) and len(set(i)) == len(i)])\n",
        "num_ids": 91
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    N = len(s)\n    count = 0\n    for i in range(N):\n        for j in range(i, N):\n            total = 0\n            for k in range(i, j+1):\n                total += int(s[k])\n            if total == j-i+1:\n                count += 1\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def is_valid_substring(string):\n        # print(string)\n        num_sum = 0\n        for i in string:\n            num_sum += int(i)\n        if len(string) == num_sum:\n            return True\n        else:\n            return False\n    substrings_counter = defaultdict(int)\n    for i in range(0, len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            if is_valid_substring(substring):\n                substrings_counter[substring] += 1\n    return substrings_counter\n",
        "num_ids": 153
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    subStrings = defaultdict(int)\n    subStrings[0] = 1\n    subStrings[1] = 1\n    def totalSubStrings(i, total):\n        if i == len(s):\n            return\n        if i == len(s)-1:\n            total = total + len(s)-i\n            subStrings[total] += 1\n            return\n        total = total + int(s[i+1])\n        totalSubStrings(i+1, total)\n        total = total - int(s[i+1])\n        totalSubStrings(i+1, total)\n    totalSubStrings(0, 0)\n    return subStrings[len(s)]\n",
        "num_ids": 168
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    curr_sum = 0\n    seen = defaultdict(list)\n    for i in range(n):\n        curr_sum += int(s[i])\n        seen[curr_sum].append(i)\n    ans = 0\n    for k,v in seen.items():\n        if k == len(s):\n            ans += len(v)\n    return ans\n",
        "num_ids": 99
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    if n == 1:\n        return 1\n    result = [0] * n\n    for i in range(n - 1):\n        result[i] = 1 if s[i] == '0' else 2\n        for j in range(i + 1, n):\n            result[j] += 1 if int(s[i:j + 1]) % 3 == 0 else 0\n    return sum(result)\n",
        "num_ids": 105
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    lens = len(s)\n    for i in range(lens):\n        for j in range(i,lens):\n            if sum(list(map(int, s[i:j+1]))) == len(s[i:j+1]):\n                result += 1\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    dict = defaultdict(int)\n    dict[0] = 1\n    sum = 0\n    for i in range(len(s)):\n        sum += int(s[i])\n        dict[sum] += 1\n    return dict[len(s)]\n",
        "num_ids": 73
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dic = defaultdict(list)\n    for i in range(len(s)):\n        dic[i].append(s[i])\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            count += checkSum(dic,s,i,j)\n    return count\ndef checkSum(dic,s,i,j):\n    l = 0\n    r = 0\n    temp = 0\n    for k in range(i,j):\n        l = dic[i][k]\n        r = dic[k+1][j]\n        if l!='0' and r!='0':\n            temp = int(l)+int(r)\n            if temp==(j-i+1):\n                return 1\n    return 0\n",
        "num_ids": 201
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    num_substrings = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if(sum(int(x) for x in s[i:j]) == j-i):\n                num_substrings += 1\n    return num_substrings\n",
        "num_ids": 81
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest is None:\n            smallest = x\n        elif x < smallest:\n            smallest = x\n    return smallest\n",
        "num_ids": 47
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    # your code here\n    return min(xs)\n",
        "num_ids": 17
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    return min(xs)\n    \ndef print_list(li):\n    '''\n    Write a python function to print a list.\n    '''\n    return print(li)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n",
        "num_ids": 43
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    l = len(test_list)\n    diff = -1\n    for i in range(l):\n        for j in range(i + 1, l):\n            d = abs(test_list[i] - test_list[j])\n            if d > diff:\n                diff = d\n    return diff\n",
        "num_ids": 75
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    if n == 1:\n        return None\n    elif n == 2:\n        return abs(test_list[0]-test_list[1])\n    elif n == 3:\n        return abs(test_list[0]-test_list[1]) if abs(test_list[0]-test_list[1]) > abs(test_list[0]-test_list[2]) else abs(test_list[0]-test_list[2])\n    else:\n        diff_l = []\n        for i in range(n-1):\n            for j in range(i+1,n):\n                diff_l.append(abs(test_list[i]-test_list[j]))\n        return max(diff_l)\n",
        "num_ids": 185
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(test_list[i] - test_list[i+1] for i in range(len(test_list)-1))\n",
        "num_ids": 35
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(abs(a - b) for a, b in zip(test_list, test_list[1:]))\n",
        "num_ids": 31
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    # Write your code here\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j] - test_list[i]\n            diff_list.append(diff)\n    return max(diff_list)\n",
        "num_ids": 84
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #...\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if abs(test_list[i]-test_list[j]) > max_diff:\n                max_diff = abs(test_list[i]-test_list[j])\n    return max_diff\n",
        "num_ids": 94
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    max_diff = test_list[0] - test_list[1]\n    for i in range(len(test_list)-1):\n        diff = test_list[i] - test_list[i+1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "num_ids": 85
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 1:\n        return None\n    max_diff = test_list[1] - test_list[0]\n    for i in range(len(test_list)-1):\n        if test_list[i+1] - test_list[i] > max_diff:\n            max_diff = test_list[i+1] - test_list[i]\n    return max_diff\n",
        "num_ids": 102
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        raise ValueError('Too small.')\n    min_value = test_list[0]\n    max_value = test_list[0]\n    for x in test_list:\n        if min_value > x:\n            min_value = x\n        if max_value < x:\n            max_value = x\n    return max_value - min_value\n",
        "num_ids": 99
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 83
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n",
        "num_ids": 29
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    list_tup=sorted(subjectmarks,key=lambda x:x[1])\n    return list_tup\n",
        "num_ids": 31
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n",
        "num_ids": 29
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks = sorted(subjectmarks, key = lambda x: x[1])\n    return subject_marks\n",
        "num_ids": 28
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x: x[1], reverse = True)\n",
        "num_ids": 22
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(\"Original List of Tuples: \")\n    print(subjectmarks)\n    print(\"\\nSorted List of Tuples: \")\n    print(sorted(subjectmarks, key=lambda x: x[1]))\n    return\n",
        "num_ids": 59
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(sorted(subjectmarks, key=lambda x: x[1]))\n",
        "num_ids": 22
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n",
        "num_ids": 29
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(subjectmarks)\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "num_ids": 26
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO:\n    # pass\n    # Finish the function body\n    pass\n",
        "num_ids": 22
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for element in data_list:\n        if type(element) == list:\n            sum += recursive_list_sum(element)\n        else:\n            sum += element\n    return sum\n    \n    \nif __name__ == '__main__':\n    assert recursive_list_sum([1, 2, 3]) == 6\n    assert recursive_list_sum([1, [2, 2, 2], 4]) == 10\n    assert recursive_list_sum([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]) == 28",
        "num_ids": 139
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) > 0:\n        first_item = data_list[0]\n        if type(first_item) == list:\n            return recursive_list_sum(first_item) + recursive_list_sum(data_list[1:])\n        else:\n            return first_item + recursive_list_sum(data_list[1:])\n    else:\n        return 0\n",
        "num_ids": 97
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) is list:\n        return sum([recursive_list_sum(item) for item in data_list])\n    return data_list\n",
        "num_ids": 41
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 50
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 46
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Initialize our accumulator\n    accumulator = 0\n",
        "num_ids": 17
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case\n    if data_list == []:\n        return 0\n    # recursive case\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 48
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n",
        "num_ids": 51
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for number in list:\n        if number > 0:\n            count += 1\n    return count\n    \nprint(pos_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3]))\n",
        "num_ids": 69
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for i in list:\n        if i>0:\n            counter +=1\n    return counter\nprint(pos_count([4,5,-1,-2,3,6,7,-4]))\n",
        "num_ids": 54
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for i in list:\n        if i > 0:\n            counter += 1\n    return counter\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num >= 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = bell_list(n)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    else:\n        return bell_number(n - 1) + bell_number(n - 2) + bell_number(n - 3)\n",
        "num_ids": 90
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #Bell(n) = sum(Bell(j)*Bell(n-j), for j in range(n))\n    #Bell(0) = 1\n    #Bell(1) = 1\n    #Bell(2) = 2\n    #Bell(n) = sum(Bell(j)*Bell(n-j), for j in range(n)) = sum(sum(Bell(j)*Bell(n-j), for j in range(n)))\n    bells = [1, 1, 2]\n    for i in range(3, n+1):\n        bells.append(sum([bells[i-j]*bells[j] for j in range(i)]))\n    return bells[n]\n",
        "num_ids": 167
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 115975]\n    return bell_numbers[n]\n    \ndef number_of_partitions(n):\n    if n < 0:\n        return 0\n    if n == 0 or n == 1:\n        return 1\n    return bell_number(n)\n",
        "num_ids": 97
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1,1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_1 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_2 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_3 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_4 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_5 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_6 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_7 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_8 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_9 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_10 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_11 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_12 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_13 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_14 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_15 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_16 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_17 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_18 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_19 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_20 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_21 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_22 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_23 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_24 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_25 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_26 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_27 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_28 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_29 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_30 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_31 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_32 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_33 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_34 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_35 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_36 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_37 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_38 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_39 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_40 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_41 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_42 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_43 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_44 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_45 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_46 = [1,2,5,15,52,203,822,4140,23040,103680,61440,258960]\n    bell_numbers_47 = [1,2,5,15,52,203,822,4140,23040,103680,61440,2",
        "num_ids": 2014
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_dict = {}\n    bell_dict[0] = 1\n    bell_dict[1] = 1\n    for i in range(2,n+1):\n        bell_dict[i] = bell_dict[i-1] + bell_dict[i-2]\n    return bell_dict[n]\n",
        "num_ids": 77
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def num_partitions(n,m):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        elif m == 1:\n            return 1\n        elif m == 2:\n            return 1\n        else:\n            return num_partitions(n-m,m) + num_partitions(n,m-1)\n    \n    def find_partitions(n,m):\n        if n < 0:\n            return 0\n        elif n == 0:\n            return 1\n        elif m == 1:\n            return 1\n        else:\n            return num_partitions(n,m)\n    # print(find_partitions(15,4))\n    # print(find_partitions(15,3))\n    return num_partitions(n,n)\n",
        "num_ids": 195
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n, k):\n        if k < 0 or n < k:\n            return 0\n        elif k == 0 or n == k:\n            return 1\n        else:\n            return partition(n-1,k-1) + partition(n-1,k)\n",
        "num_ids": 68
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [0, 1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 624320, 2680853, 20884291, 12014790, 66603542]\n    \n    if n >= len(bells):\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n",
        "num_ids": 111
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_numbers = [0]*(n+1)\n        bell_numbers[0] = 1\n        bell_numbers[1] = 1\n        for i in range(2,n+1):\n            for j in range(1,i):\n                bell_numbers[i] += bell_numbers[j-1]*bell_numbers[i-j]\n        return bell_numbers[n]\n",
        "num_ids": 118
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = []\n    for i in range(1,n+1):\n        bells.append(bell(i))\n    return number_partitions(bells)\n",
        "num_ids": 43
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "num_ids": 57
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n        all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "num_ids": 59
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if(len(A)<=2):\n        return True\n    return A==sorted(A) or A==sorted(A,reverse=True)\n",
        "num_ids": 40
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n",
        "num_ids": 60
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n",
        "num_ids": 60
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n",
        "num_ids": 60
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    if A[0] < A[1]:\n        for i in range(2, len(A)):\n            if A[i - 1] <= A[i]:\n                return False\n    elif A[0] >= A[1]:\n        for i in range(2, len(A)):\n            if A[i - 1] >= A[i]:\n                return False\n    return True\n",
        "num_ids": 109
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "num_ids": 57
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n        \n    \ndef MonotonicArray(A):\n    '''\n    Write a python function to return the index position of the given element in the given array such that\n    if the element in the array is found, return the index position. If the element is not present in the array, then return -1.\n    '''\n    for i in range(len(A) - 1):\n        if A[i] == A[i + 1]:\n            return i\n    return -1\n        \n        \ndef SecondLargest(A):\n    '''\n    Write a python function to return the second largest element in the array. If the array has less than 2 elements, then return -1.\n    '''\n    if len(A) < 2:\n        return -1\n    A.sort()\n    return A[-2]\n    \n    \ndef CheckBalance(A):\n    '''\n    Write a python function to check whether a given array is balanced or not.\n    '''\n    left_side = 0\n    right_side = 0\n    for i in range(len(A)):\n        if A[i] == 0:\n            left_side += 1\n        else:\n            right_side += 1\n    if left_side == right_side:\n        return True\n    else:\n        return False\n        \n        \ndef SearchArray(A, key):\n    '''\n    Write a python function to search for a given key in the array.\n    '''\n    for i in range(len(A)):\n        if A[i] == key:\n            return i\n    return -1\n        \n        \ndef CheckPalindrome(A):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    A = A.lower()\n    A = list(A)\n    A.reverse()\n    if A == A[::-1]:\n        return True\n    else:\n        return False\n        \n        \ndef FindUnique(A):\n    '''\n    Write a python function to find the unique element from the given array.\n    '''\n    for i in range(len(A)):\n        if A.count(A[i]) == 1:\n            return A[i]\n    return -1\n        \n        \ndef FindAllUnique(A):\n    '''\n    Write a python function to find the unique element from the given array.\n    '''\n    unique = []\n    for i in range(len(A)):\n        if A.count(A[i]) == 1:\n            unique.append(A[i])\n    return unique\n        \n        \ndef ReverseString(A):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    A = list(A)\n    A.reverse()\n    return \"\".join(A)\n        \n        \ndef ReverseArray(A):\n    '''\n    Write a python function to reverse an array.\n    '''\n    return A[::-1]\n        \n        \ndef CheckPallindrome(A):\n    '''\n    Write a python function to check whether the given array is palindrome or not.\n    '''\n    return A == A[::-1]\n        \n        \ndef CheckPermutation(A, B):\n    '''\n    Write a python function to check whether the given two strings are permutation of each other.\n    '''\n    if len(A)!= len(B):\n        return False\n    A = list(A)\n    B = list(B)\n    A.sort()\n    B.sort()\n    if A == B:\n        return True\n    else:\n        return False\n        \n        \ndef CheckAnagram(A, B):\n    '''\n    Write a python function to check whether the given two strings are anagram or not.\n    '''\n    return sorted(A) == sorted(B)\n    \n    \ndef FindWord(A, B):\n    '''\n    Write a python function to find the given word in a given string.\n    '''\n    if B in A:\n        return A.find(B)\n    return -1\n        \n        \ndef FindRotation(A, B):\n    '''\n    Write a python function to find the rotation of the given string.\n    '''\n    if len(A)!= len(B):\n        return -1\n    B = B + B\n    if B in A:\n        return A.find(B)\n    return -1\n    \n    \ndef FindSubstring(A, B):\n    '''\n    Write a python function to find the substring in a given string.\n    '''\n    if B in A:\n        return A.find(B)\n    return -1\n    \n    \ndef CheckPermutationOfSets(A, B):\n    '''\n    Write a python function to check whether the given two sets are permutation of each other.\n    '''\n    return len(A) == len(B) and len(set(A) & set(B)) == len(set(A))\n    \n    \ndef CheckPermutationOfStrings(A, B):\n    '''\n    Write a python function to check whether the given two strings are permutation of each other.\n    '''\n    if len(A)!= len(B):\n        return False\n    A = list(A)\n    B = list(B)\n    A.sort()\n    B.sort()\n    if A == B:\n        return True\n    else:\n        return False\n        \n        \ndef CheckPermutationOfStrings(A, B):\n    '''\n    Write a python function to check whether the given two strings are permutation of each other.\n    '''\n    if len(A)!= len(B):\n        return False\n    count = {}\n    for i in range(len(A)):\n        if A[i] not in count:\n            count[A[i]] = 1\n        else:\n            count[A[i]] += 1\n    for i in range(len(B)):\n        if B[i] not in count:\n            count[B[i]] = 1\n        else:\n            count[B[i]] -= 1\n    for i in count:\n        if count[i]!= 0:\n            return False\n    return True\n        \n        \ndef CompareStrings(A, B):\n    '''\n    Write a python function to compare two given strings.\n    '''\n    return A == B\n    \n    \ndef CheckPermutationOfStrings(A, B):\n    '''\n    Write a python function to check whether the given two strings are permutation of each other.\n    '''\n    if len(A)!= len(B):\n        return False\n    count = {}\n    for i in range(len(A)):\n        if A[i] not in count:\n            count[A[i]] = 1\n        else:\n            count[A[i]] += 1\n    for i in range(len(B)):\n        if B[i] not in count:\n            count[B[i]] = 1\n        else:\n            count[B[i]] -= 1\n    for i in count:\n        if count[i]!= 0:\n            return False\n    return True\n    \n    \ndef CheckPermutationOfStrings(A, B):\n    '''\n    Write a python function to check whether the given two strings are permutation of each other.\n    '''\n    if len(A)!= len(B):\n        return False\n    count = {}\n    for i in range(len(A)):\n        if A[i] not in count:\n            count[A[i]] = 1\n        else:\n            count[A[i]] += 1\n    for i in range(len(B)):\n        if B[i] not in count:\n            count[B[i]] = 1\n        else:\n            count[B[i]] -= 1\n    for i in count:\n        if count[i]!= 0:\n            return False\n    return True\n    \n    \ndef CheckPermutationOfStrings(A, B):\n    '''\n    Write a python function to check whether the given two strings are permutation of each other.\n    '''\n    if len(A)!= len(",
        "num_ids": 11
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (sorted(A, reverse=True) == A):\n        return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "num_ids": 70
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    n = len(s)\n    for i in range(0, len(l)):\n        if l[i] == s[0]:\n            if l[i:i+n] == s:\n                return True\n    return False\n",
        "num_ids": 74
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s_hash = [0]*len(s)\n    for i in range(len(s)):\n        s_hash[i] = s[i]\n",
        "num_ids": 41
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    try:\n        return l.index(s) >= 0\n    except ValueError:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n                if n == len(s):\n                    sub_set = True\n    return sub_set\n",
        "num_ids": 142
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n",
        "num_ids": 58
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len([c for c in range(len(l)) if l[c] == s[0]]) == len(s)\n",
        "num_ids": 33
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n",
        "num_ids": 58
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n",
        "num_ids": 120
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # base case\n    if not s:\n        return True\n    if not l or len(s) > len(l):\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def find_length(tuple):\n        return len(tuple)\n    if len(set(map(find_length, Input))) == 1:\n        return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in Input:\n        if len(i) == count:\n            count += 1\n        else:\n            break\n    return (count == len(Input))\n",
        "num_ids": 46
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    list = []\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if len(Input[i]) == len(Input[j]):\n                list.append(len(Input[i]))\n            else:\n                pass\n    if len(list)!= 0:\n        print('False')\n    else:\n        print('True')\n",
        "num_ids": 104
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = 0\n    return Output\n",
        "num_ids": 11
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length_of_tuple = len(Input[0])\n    for item in Input:\n        if len(item)!= length_of_tuple:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    print(len(Input)==len(set([len(t) for t in Input])))\n",
        "num_ids": 25
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i) == len(Input[0]):\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(map(len, Input))) == 1\n",
        "num_ids": 17
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Find tuples having equal length\n    if len(Input) == len(set(map(len,Input))):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "num_ids": 46
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    gap = size\n    swapped = True\n",
        "num_ids": 22
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n",
        "num_ids": 42
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))  # minimum gap is 1\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "num_ids": 123
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #comb sort\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25)) # minimum gap is 1\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n",
        "num_ids": 127
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n",
        "num_ids": 22
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combsort(nums)\n    return nums\n",
        "num_ids": 16
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    gap = size\n    swapped = True\n    while gap!= 1 or swapped == True:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, size - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "num_ids": 131
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap!= 1 or swapped == True:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n            \n        swapped = False\n        \n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n",
        "num_ids": 132
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combs = [nums[x:x+len(nums)-1] for x in range(0,len(nums))]\n    #print(combs)\n    gap = len(combs)\n    while gap > 1:\n        gap = max(1, int(gap / 1.25))\n        combs_sorted = []\n        for comb in combs:\n            if len(comb) < gap:\n                combs_sorted.append(comb)\n                continue\n            comb.sort()\n            combs_sorted.append(comb[0:gap])\n        combs = combs_sorted\n    return combs\n",
        "num_ids": 154
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))  # minimum gap is 1\n        swapped = False\n        for i in range(len(nums) - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n",
        "num_ids": 119
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def isSquare(n): \n      \n    # Find the square root of n and floor it \n    # This will be our initial guess for the square root \n    x = nthroot(n, 2) \n      \n    # While our guess is not an integer, increment it by 1 \n    while (x * x!= n): \n        x = x + 1\n      \n    # Check if the number is a square \n    return True if x * x == n else False\n    \n    # This method takes O(n log(n)) time, but it may not be the most efficient solution. Can you think of a more efficient solution? \n",
        "num_ids": 152
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if (i**2 + j**2) == n:\n                print(i,j,n)\n                break\n    \ndef lcm(a, b):\n    '''\n    Write a python function to find the lowest common multiple of two numbers.\n    '''\n    lcm = a*b / gcd(a,b)\n    return lcm\n",
        "num_ids": 23
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def square_nums(n): \n        nums = []\n        for i in range(0,n):\n            if i**2 <= n:\n                nums.append(i**2)\n        return nums\n    \n    def is_square(n,l):\n        for i in l:\n            if i==n:\n                return True\n        return False\n",
        "num_ids": 90
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i*i < n:\n        if (i*i+i) == n:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if int(sqrt(n) + 0.5) ** 2 == n: \n        print(n, 'is a perfect square') \n    else: \n        print(n, 'is not a perfect square') \n",
        "num_ids": 55
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    def is_square(n, root):\n        return math.sqrt(root) == int(math.sqrt(root))\n    i=1\n    while i**2<=n:\n        if is_square(n,i):\n            return \"Yes\"\n        else:\n            i+=1\n    return \"No\"\n",
        "num_ids": 84
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_list = []\n    for i in range(n):\n        square_list.append(i**2)\n    print(square_list)\n    print(\"\")\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (square_list[i] + square_list[j] == square_list[k]):\n                    print(square_list[i],square_list[j],square_list[k])\n",
        "num_ids": 125
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        if i**2 == n:\n            return \"yes\"\n            break\n        if i**2 > n:\n            return \"no\"\n            break\n",
        "num_ids": 47
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_list = []\n    for i in range(1,n+1):\n        if i*i <= n:\n            square_list.append(i*i)\n    for x in square_list:\n        if n - x in square_list:\n            return True\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def is_in(pattern, colors):\n        return (colors[pattern[0]] == 'b' and colors[pattern[1]] == 'y') or (colors[pattern[0]] == 'y' and colors[pattern[1]] == 'b')\n    for pattern in patterns:\n        if not is_in(pattern, colors):\n            return False\n    return True\n",
        "num_ids": 90
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if patterns:\n        if len(patterns) == 1:\n            return colors == patterns[0]\n        elif len(patterns) == 2:\n            return (colors[0] == patterns[0] and colors[1] == patterns[1]) or (colors[0] == patterns[1] and colors[1] == patterns[0])\n        elif len(patterns) == 3:\n            return (colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2]) or (colors[0] == patterns[1] and colors[1] == patterns[2] and colors[2] == patterns[0]) or (colors[0] == patterns[2] and colors[1] == patterns[0] and colors[2] == patterns[1])\n        else:\n            return False\n    else:\n        return True\n",
        "num_ids": 211
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-len(patterns)+1):\n        for j in range(len(patterns)):\n            if patterns[j]==colors[i+j]:\n                pass\n            else:\n                break\n        else:\n            return True\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    assert(len(colors) == len(patterns)), 'Input arrays must have the same length.'\n    count = 0\n    for i in range(len(colors)-1):\n        if colors[i+1] == patterns[i]:\n            count += 1\n        if count > 1:\n            return False\n    return True\n",
        "num_ids": 79
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        if color not in patterns:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return all(colors[i] == patterns[i] for i in range(len(colors)))\n",
        "num_ids": 27
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for x in patterns:\n        if x not in colors:\n            return False\n    for i in range(len(patterns)-1):\n        if patterns[i] == patterns[i+1]:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    for color in colors:\n        if color == patterns[i]:\n            i += 1\n            if i == len(patterns):\n                return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # print(colors)\n    # print(patterns)\n",
        "num_ids": 18
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n",
        "num_ids": 34
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for a, b in test_list:\n        if a % K == 0 and b % K == 0:\n            tuples.append((a, b))\n    return tuples\n",
        "num_ids": 50
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for i in test_list:\n        if (i[0] % K == 0) and (i[1] % K == 0):\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 58
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for elem in test_list:\n        if elem[0] % K == elem[1] % K == 0:\n            new_list.append(elem)\n    return new_list\n",
        "num_ids": 57
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    print(\"\\nTuple : {}\\n\".format(K))\n    a = [(x[0], x[1], x[0] % K == 0, x[1] % K == 0) for x in test_list]\n    print(\"All tuples divisible by {} in the list are : \\n{}\".format(K, a))\n",
        "num_ids": 84
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [item for item in test_list if all(i % K == 0 for i in item)]\n",
        "num_ids": 26
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [t for t in test_list if all(el % K == 0 for el in t)]\n",
        "num_ids": 26
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(x[0], x[1]) for x in test_list if (x[0]%K == 0 and x[1]%K == 0)]\n",
        "num_ids": 40
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # initialize empty list to hold tuples which satisfy conditions\n    answer_list = []\n    for i in range(len(test_list)):\n        if test_list[i][0] % K == 0 and test_list[i][1] % K == 0:\n            answer_list.append(test_list[i])\n    return answer_list\n",
        "num_ids": 85
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = list()\n    for i,j in test_list:\n        if j%K == 0:\n            tuples.append((i,j))\n",
        "num_ids": 40
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple_ in test_list:\n        if all(map(lambda x: x % K == 0, tuple_)):\n            result.append(tuple_)\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    return False\n    \n",
        "num_ids": 21
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        return True\n    else:\n        return False\ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 2 == 0):\n        return True\n    else:\n        return False\ndef check_Divisibility(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef odd_even(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is an even number\".format(n))\n    else:\n        print(\"{0} is an odd number\".format(n))\ndef check_even_odd(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is an even number\".format(n))\n    else:\n        print(\"{0} is an odd number\".format(n))\ndef myfunc(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is an even number\".format(n))\n    else:\n        print(\"{0} is an odd number\".format(n))\ndef divisible(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef is_Divisible(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef is_Divisible(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef is_divisible(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef is_divisible(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef divisible(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef is_Divisible(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef divisible(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef is_divisible(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef divisible(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef is_Divisible(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef divisible(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef is_divisible(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef divisible(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef is_Divisible(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef divisible(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef is_divisible(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef divisible(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef is_Divisible(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (is_Even(n)):\n        print(\"{0} is divisible by 11\".format(n))\n    else:\n        print(\"{0} is not divisible by 11\".format(n))\ndef divisible(n): \n    '''\n    Write a python function to fin",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n%11 == 0)\nn = int(input(\"Enter the number : \"))\nif is_Diff(n) == True:\n    print(\"The entered number is a Diff number\")\nelse:\n    print(\"The entered number is not a Diff number\")",
        "num_ids": 63
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    len_words = len(s) \n    if len_words % 2 == 0: \n        return False\n    else: \n        return True\n",
        "num_ids": 38
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print(\"The given word is even\")\n    else:\n        print(\"The given word is odd\")\n",
        "num_ids": 38
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 26
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n    # return len(s)%2==0\n",
        "num_ids": 23
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Start writing your code here\n    # pass\n    if len(s)%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n    pass\n",
        "num_ids": 46
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def is_pentagonal(p):\n        '''\n        Write a function to check if a number is pentagonal.\n        '''\n        return ((p*(3*p-1))/2) == int((p*(3*p-1))/2)\n    def is_hexagonal(h):\n        '''\n        Write a function to check if a number is hexagonal.\n        '''\n        return ((h*(2*h-1)) == int((h*(2*h-1))))\n    def is_heptagonal(h):\n        '''\n        Write a function to check if a number is heptagonal.\n        '''\n        return ((h*(3*h-2))/2 == int((h*(3*h-2))/2))\n    def is_octagonal(o):\n        '''\n        Write a function to check if a number is octagonal.\n        '''\n        return ((o*(2*o-1)) == int((o*(2*o-1))))\n    def is_triangular(t):\n        '''\n        Write a function to check if a number is triangular.\n        '''\n        return ((t*(t+1))/2) == int((t*(t+1))/2)\n    def is_square(s):\n        '''\n        Write a function to check if a number is square.\n        '''\n        return ((s**2) == int((s**2)))\n    def is_pentagonal(p):\n        '''\n        Write a function to check if a number is pentagonal.\n        '''\n        return ((p*(3*p-1))/2) == int((p*(3*p-1))/2)\n    def is_hexagonal(h):\n        '''\n        Write a function to check if a number is hexagonal.\n        '''\n        return ((h*(2*h-1)) == int((h*(2*h-1))))\n    def is_heptagonal(h):\n        '''\n        Write a function to check if a number is heptagonal.\n        '''\n        return ((h*(3*h-2))/2 == int((h*(3*h-2))/2))\n    def is_octagonal(o):\n        '''\n        Write a function to check if a number is octagonal.\n        '''\n        return ((o*(2*o-1)) == int((o*(2*o-1))))\n    def is_triangular(t):\n        '''\n        Write a function to check if a number is triangular.\n        '''\n        return ((t*(t+1))/2) == int((t*(t+1))/2)\n    def is_square(s):\n        '''\n        Write a function to check if a number is square.\n        '''\n        return ((s**2) == int((s**2)))\n    def is_pentagonal(p):\n        '''\n        Write a function to check if a number is pentagonal.\n        '''\n        return ((p*(3*p-1))/2) == int((p*(3*p-1))/2)\n    def is_hexagonal(h):\n        '''\n        Write a function to check if a number is hexagonal.\n        '''\n        return ((h*(2*h-1)) == int((h*(2*h-1))))\n    def is_heptagonal(h):\n        '''\n        Write a function to check if a number is heptagonal.\n        '''\n        return ((h*(3*h-2))/2 == int((h*(3*h-2))/2))\n    def is_octagonal(o):\n        '''\n        Write a function to check if a number is octagonal.\n        '''\n        return ((o*(2*o-1)) == int((o*(2*o-1))))\n    def is_triangular(t):\n        '''\n        Write a function to check if a number is triangular.\n        '''\n        return ((t*(t+1))/2) == int((t*(t+1))/2)\n    def is_square(s):\n        '''\n        Write a function to check if a number is square.\n        '''\n        return ((s**2) == int((s**2)))\n    def is_pentagonal(p):\n        '''\n        Write a function to check if a number is pentagonal.\n        '''\n        return ((p*(3*p-1))/2) == int((p*(3*p-1))/2)\n    def is_hexagonal(h):\n        '''\n        Write a function to check if a number is hexagonal.\n        '''\n        return ((h*(2*h-1)) == int((h*(2*h-1))))\n    def is_heptagonal(h):\n        '''\n        Write a function to check if a number is heptagonal.\n        '''\n        return ((h*(3*h-2))/2 == int((h*(3*h-2))/2))\n    def is_octagonal(o):\n        '''\n        Write a function to check if a number is octagonal.\n        '''\n        return ((o*(2*o-1)) == int((o*(2*o-1))))\n    def is_triangular(t):\n        '''\n        Write a function to check if a number is triangular.\n        '''\n        return ((t*(t+1))/2) == int((t*(t+1))/2)\n    def is_square(s):\n        '''\n        Write a function to check if a number is square.\n        '''\n        return ((s**2) == int((s**2)))\n    def is_pentagonal(p):\n        '''\n        Write a function to check if a number is pentagonal.\n        '''\n        return ((p*(3*p-1))/2) == int((p*(3*p-1))/2)\n    def is_hexagonal(h):\n        '''\n        Write a function to check if a number is hexagonal.\n        '''\n        return ((h*(2*h-1)) == int((h*(2*h-1))))\n    def is_heptagonal(h):\n        '''\n        Write a function to check if a number is heptagonal.\n        '''\n        return ((h*(3*h-2))/2 == int((h*(3*h-2))/2))\n    def is_octagonal(o):\n        '''\n        Write a function to check if a number is octagonal.\n        '''\n        return ((o*(2*o-1)) == int((o*(2*o-1))))\n    def is_triangular(t):\n        '''\n        Write a function to check if a number is triangular.\n        '''\n        return ((t*(t+1))/2) == int((t*(t+1))/2)\n    def is_square(s):\n        '''\n        Write a function to check if a number is square.\n        '''\n        return ((s**2) == int((s**2)))\n    def is_pentagonal(p):\n        '''\n        Write a function to check if a number is pentagonal.\n        '''\n        return ((p*(3*p-1))/2) == int((p*(3*p-1))/2)\n    def is_hexagonal(h):\n        '''\n        Write a function to check if a number is hexagonal.\n        '''\n        return ((h*(2*h-1)) == int((h*(2*h-1))))\n    def is_heptagonal(h):\n        '''\n        Write a function to check if a number is heptagonal.\n        '''\n        return ((h*(3*h-2))/2 == int((h*(3*h-2))/2))\n    def is_octagonal(o):\n        '''\n        Write a function to check if a number is octagonal.\n        '''\n        return ((o*(2*o-1)) == int((o*(2*o-1))))\n    def is_triangular(t):\n        '''\n        Write a function to check if a number is triangular.\n        '''\n        return ((t*(t+1))/2) == int((t*(t+",
        "num_ids": 23
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n",
        "num_ids": 20
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n+1)*(n+2)*(n+3)/6)\n",
        "num_ids": 23
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * (n + 1) // 2\n",
        "num_ids": 29
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def poly(n):\n        return n * (n + 1) * (n + 2) / 6\n    # By definition, n*(n+1)*(n+2) = pentagonal number, and hence,\n    # pentagonal number = n(3n-1)/2. The same holds for tetrahedral numbers.\n    return int(poly(n) * 4)\n",
        "num_ids": 90
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # base case\n    if n == 0:\n        return 0\n    # recursive step\n    return n * ((3 * n) + 1) / 2\n",
        "num_ids": 38
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(3*n-1)/2\n",
        "num_ids": 15
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n",
        "num_ids": 20
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n - 1) * n * n + n * n\n",
        "num_ids": 45
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n",
        "num_ids": 20
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r=int(r)\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "num_ids": 30
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi=3.14\n    r=float(r)\n    v=4/3*pi*r**3\n    return v\ndef perimeter_sphere(r):\n    '''\n    Write a function to find the perimeter of a sphere.\n    '''\n    pi=3.14\n    r=float(r)\n    p=4*pi*r\n    return p\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    pi=3.14\n    r=float(r)\n    a=4*pi*r**2\n    return a\ndef fib(n):\n    '''\n    Write a function that returns the nth Fibonacci number\n    Fibonacci numbers are defined as the sum of the two preceding numbers.\n    '''\n    f=1\n    l=[0,1]\n    for i in range(n-2):\n        f=l[0]+l[1]\n        l[0],l[1]=f,l[0]\n    return f\ndef palindrome(s):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    n=len(s)\n    for i in range(n//2):\n        if s[i]!=s[n-1-i]:\n            return False\n    return True\ndef least_difference(a, b, c):\n    '''\n    Write a function to find the smallest difference between any two numbers in an array.\n    '''\n    a,b,c=sorted([a,b,c])\n    d=b-a\n    e=c-a\n    return min([d,e])\ndef longest_nonrepeating_substring(s):\n    '''\n    Write a function to find the longest nonrepeating substring in the given string.\n    '''\n    n=len(s)\n    l=[]\n    for i in range(n):\n        for j in range(i+1,n):\n            if s[i]==s[j] and j-i+1>len(l):\n                l=s[i:j+1]\n    return l\ndef nonrepeating_character(s):\n    '''\n    Write a function to find the first nonrepeating character in given string.\n    '''\n    n=len(s)\n    for i in range(n):\n        if s.count(s[i])==1:\n            return s[i]\ndef rev_string(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    return s[::-1]\ndef number_of_factors(n):\n    '''\n    Write a function to return the number of divisors of given number.\n    '''\n    factors=0\n    for i in range(1,n+1):\n        if n%i==0:\n            factors+=1\n    return factors\ndef sum_of_naturals(n):\n    '''\n    Write a function to return the sum of all positive integers up to a given number.\n    '''\n    return n*(n+1)//2\ndef sum_of_primes(n):\n    '''\n    Write a function to return the sum of all prime numbers up to and including a given number.\n    '''\n    total=0\n    for i in range(2,n+1):\n        if all(i%j!=0 for j in range(2,math.ceil(i**0.5)+1)):\n            total+=i\n    return total\ndef harmonic_mean(n):\n    '''\n    Write a function to compute the harmonic mean of a set of numbers.\n    '''\n    n=list(map(lambda x:1/x,n))\n    h=1\n    for i in n:\n        h*=i\n    return len(n)/h\ndef ceil(x):\n    '''\n    Write a function to compute the ceiling of a number.\n    '''\n    return int(x)+1 if x>0 and x%1>0 else int(x)\ndef is_power_of_two(n):\n    '''\n    Write a function to determine if a given number is a power of two.\n    '''\n    n=ceil(log(n,2))\n    return n>0 and n==int(n)\ndef number_of_digits(n):\n    '''\n    Write a function to determine the number of digits in a given number.\n    '''\n    return len(str(n))\ndef palindrome_permutation(s):\n    '''\n    Write a function to determine if a given string is a permutation of a palindrome.\n    '''\n    l=list(s.lower())\n    n=len(l)\n    d={}\n    for i in l:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    flag=False\n    for i in d:\n        if d[i]%2!=0:\n            flag=True\n    return n%2==0 or flag\ndef collatz_sequence(n):\n    '''\n    Write a function to return the Collatz sequence starting with a given number.\n    '''\n    l=[]\n    while n!=1:\n        l.append(n)\n        if n%2==0:\n            n=n//2\n        else:\n            n=3*n+1\n    l.append(1)\n    return l\ndef rotate(l,n):\n    '''\n    Write a function to rotate a list by the given amount.\n    '''\n    n=n%len(l)\n    return l[n:]+l[:n]\ndef product_of_array(l):\n    '''\n    Write a function to compute the product of all numbers in a given array.\n    '''\n    total=1\n    for i in l:\n        total*=i\n    return total\ndef factorial_of_array(l):\n    '''\n    Write a function to compute the factorial of all numbers in a given array.\n    '''\n    fact=[]\n    for i in l:\n        fact.append(math.factorial(i))\n    return fact\ndef count_all_primes(l):\n    '''\n    Write a function to count all the prime numbers in a given array.\n    '''\n    return len([i for i in l if is_prime(i)])\ndef is_prime(n):\n    '''\n    Write a function to determine if a number is a prime number.\n    '''\n    if n==1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef greatest_common_factor(a,b):\n    '''\n    Write a function to compute the greatest common factor of two given numbers.\n    '''\n    while b:\n        a,b=b,a%b\n    return a\ndef gcd_of_array(l):\n    '''\n    Write a function to compute the greatest common divisor of all numbers in a given array.\n    '''\n    return reduce(greatest_common_factor,l)\ndef least_common_multiple(a,b):\n    '''\n    Write a function to compute the least common multiple of two given numbers.\n    '''\n    return a*b//greatest_common_factor(a,b)\ndef sum_of_array_except_at_index(l,index):\n    '''\n    Write a function to compute the sum of a given array,\n    except for a given index which is passed to the function.\n    '''\n    return sum(l)-l[index]\ndef sum_of_array(l):\n    '''\n    Write a function to compute the sum of a given array.\n    '''\n    return sum(l)\ndef sum_of_array_from_index(l,index):\n    '''\n    Write a function to compute the sum of a given array,\n    from a given index to the end of the array.\n    '''\n    return sum(l[index:])\ndef rotate_array(l,n):\n    '''\n    Write a function to rotate an array by the given amount.\n    '''\n    return l[n:]+l[:n]\ndef count_triplets(n,k):\n    '",
        "num_ids": 28
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 3\n",
        "num_ids": 16
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r=float(r)\n    volume=float((4/3)*(math.pi)*(r**3))\n    print('Volume of sphere with radius {} is {}'.format(r,volume))\n    return\n",
        "num_ids": 52
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*(r**2)*h\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*(r**2)*h\ndef volume_rectangularprism(length, width, height):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return length*width*height\ndef area_square(s):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return s**2\ndef area_rectangle(length, width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length*width\ndef area_triangle(base, height):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (base*height)/2\ndef area_trapezoid(base1, base2, height):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return ((base1+base2)*height)/2\ndef area_parallelogram(base, height):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return base*height\ndef area_isosceles_triangle(base, height):\n    '''\n    Write a function to find the area of a isosceles triangle.\n    '''\n    return (math.sqrt(3)*base*height)/2\ndef area_equilateral_triangle(s):\n    '''\n    Write a function to find the area of an equilateral triangle.\n    '''\n    return (3*s**2)/4\ndef area_star(diagonal, points):\n    '''\n    Write a function to find the area of a star.\n    '''\n    return (diagonal*points)/2\ndef area_regular_polygon(n, s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    return n*s/2\ndef area_right_triangle(side1, side2):\n    '''\n    Write a function to find the area of a right triangle.\n    '''\n    return (side1*side2)/2\ndef area_equilateral_pentagon(s):\n    '''\n    Write a function to find the area of an equilateral pentagon.\n    '''\n    return (5*s**2)/4\ndef area_square_pyramid(base, height):\n    '''\n    Write a function to find the area of a square pyramid.\n    '''\n    return (base**2*height)/3\ndef area_kite(side1, side2):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    return (3*(side1**2 + side2**2))/4\ndef area_hexagon(side):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return (3*side**2)/2\ndef area_octagon(side):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    return (2*side**2*math.sqrt(2))\ndef area_decagon(s):\n    '''\n    Write a function to find the area of a decagon.\n    '''\n    return (5*s**2)/2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef area_rhombus(diagonal1, diagonal2):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return (diagonal1*diagonal2)/2\ndef area_trapezoid(base1, base2, height):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return ((base1+base2)*height)/2\ndef area_kite(side1, side2):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    return (3*(side1**2 + side2**2))/4\ndef area_octagon(side):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    return (2*side**2*math.sqrt(2))\ndef area_kite(side1, side2):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    return (3*(side1**2 + side2**2))/4\ndef area_rhombus(diagonal1, diagonal2):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return (diagonal1*diagonal2)/2\ndef area_trapezoid(base1, base2, height):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return ((base1+base2)*height)/2\ndef area_pentagon(side):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    return (5*side**2)/2\ndef area_rhombus(diagonal1, diagonal2):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return (diagonal1*diagonal2)/2\ndef area_pentagon(side):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    return (5*side**2)/2\ndef area_octagon(side):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    return (2*side**2*math.sqrt(2))\ndef area_trapezoid(base1, base2, height):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return ((base1+base2)*height)/2\ndef area_trapezoid(base1, base2, height):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return ((base1+base2)*height)/2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r*",
        "num_ids": 11
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3\n    \ndef volume_cylinder(radius, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * radius ** 2 * height\n",
        "num_ids": 14
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v= (4/3)*math.pi*(r**3)\n    return v\ndef volume_sphere_calc(r):\n    v= (4/3)*math.pi*(r**3)\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    a=4*math.pi*(r**2)\n    return a\ndef surface_area_sphere_calc(r):\n    a=4*math.pi*(r**2)\n    return a\ndef length_of_a_side(c,a):\n    '''\n    Write a function to calculate the length of a side of a regular polygon.\n    '''\n    l= math.sqrt(c**2+a**2)\n    return l\ndef length_of_a_side_calc(c,a):\n    l= math.sqrt(c**2+a**2)\n    return l\ndef area_of_a_regular_polygon(n,a):\n    '''\n    Write a function to calculate the area of a regular polygon.\n    '''\n    a=n*a\n    return a\ndef area_of_a_regular_polygon_calc(n,a):\n    a=n*a\n    return a\ndef area_of_a_circle(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    a=math.pi*(r**2)\n    return a\ndef area_of_a_circle_calc(r):\n    a=math.pi*(r**2)\n    return a\ndef volume_of_a_prism(l,w,h):\n    '''\n    Write a function to calculate the volume of a prism.\n    '''\n    v=l*w*h\n    return v\ndef volume_of_a_prism_calc(l,w,h):\n    v=l*w*h\n    return v\ndef volume_of_a_cube(s):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    v=s**3\n    return v\ndef volume_of_a_cube_calc(s):\n    v=s**3\n    return v\ndef volume_of_a_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    v= math.pi*(r**2)*h\n    return v\ndef volume_of_a_cylinder_calc(r,h):\n    v= math.pi*(r**2)*h\n    return v\ndef volume_of_a_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    v= 1/3*math.pi*(r**2)*h\n    return v\ndef volume_of_a_cone_calc(r,h):\n    v= 1/3*math.pi*(r**2)*h\n    return v\ndef area_of_a_rectangular_prism(l,w,h):\n    '''\n    Write a function to calculate the area of a rectangular prism.\n    '''\n    a=2*(l*w+l*h+w*h)\n    return a\ndef area_of_a_rectangular_prism_calc(l,w,h):\n    a=2*(l*w+l*h+w*h)\n    return a\ndef area_of_a_triangular_prism(a,b,c):\n    '''\n    Write a function to calculate the area of a triangular prism.\n    '''\n    a=math.sqrt(a**2+b**2+c**2)\n    return a\ndef area_of_a_triangular_prism_calc(a,b,c):\n    a=math.sqrt(a**2+b**2+c**2)\n    return a\ndef area_of_a_quadrate(s):\n    '''\n    Write a function to calculate the area of a quadrate.\n    '''\n    a=s*s\n    return a\ndef area_of_a_quadrate_calc(s):\n    a=s*s\n    return a\ndef area_of_a_trapezoid(a,b,h):\n    '''\n    Write a function to calculate the area of a trapezoid.\n    '''\n    a=a+b\n    h=h/2\n    a=a*h\n    return a\ndef area_of_a_trapezoid_calc(a,b,h):\n    '''\n    Write a function to calculate the area of a trapezoid.\n    '''\n    a=a+b\n    h=h/2\n    a=a*h\n    return a\ndef area_of_a_circular_sector(r,angle):\n    '''\n    Write a function to calculate the area of a circular sector.\n    '''\n    a=math.pi*r*angle\n    return a\ndef area_of_a_circular_sector_calc(r,angle):\n    a=math.pi*r*angle\n    return a\ndef area_of_a_circle_sector(r,angle):\n    '''\n    Write a function to calculate the area of a circle sector.\n    '''\n    a=math.pi*r*angle/360\n    return a\ndef area_of_a_circle_sector_calc(r,angle):\n    a=math.pi*r*angle/360\n    return a\ndef perimeter_of_a_rectangle(l,w):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    p=2*(l+w)\n    return p\ndef perimeter_of_a_rectangle_calc(l,w):\n    p=2*(l+w)\n    return p\ndef perimeter_of_a_rhombus(d1,d2):\n    '''\n    Write a function to calculate the perimeter of a rhombus.\n    '''\n    p=d1+d2+d1+d2\n    return p\ndef perimeter_of_a_rhombus_calc(d1,d2):\n    p=d1+d2+d1+d2\n    return p\ndef perimeter_of_a_rhombus(l,w):\n    '''\n    Write a function to calculate the perimeter of a rhombus.\n    '''\n    p=4*(l+w)\n    return p\ndef perimeter_of_a_rhombus_calc(l,w):\n    p=4*(l+w)\n    return p\ndef perimeter_of_a_kite(d1,d2,d3,d4):\n    '''\n    Write a function to calculate the perimeter of a kite.\n    '''\n    p=d1+d2+d3+d4+d1+d2+d3+d4\n    return p\ndef perimeter_of_a_kite_calc(d1,d2,d3,d4):\n    p=d1+d2+d3+d4+d1+d2+d3+d4\n    return p\ndef perimeter_of_a_kite(l,w):\n    '''\n    Write a function to calculate the perimeter of a kite.\n    '''\n    p=4*(l+w)\n    return p\ndef perimeter_of_a_kite_calc(l,w):\n    p=4*(l+w)\n    return p\ndef perimeter_of_a_parallelogram(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p=2*(l+b)\n    return p\ndef perimeter_of_a_parallelogram_calc(l,b):\n    p=2*(l+b)\n    return p\ndef perimeter_of_a_parallelogram(l,w,h):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p=2*(l+w)\n    return p\ndef perimeter_of_a_parallelogram_calc(l,w,h):\n    p",
        "num_ids": 40
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0 * math.pi * r**3\n",
        "num_ids": 20
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n",
        "num_ids": 25
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\ndef area_circulo(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi*(r**2)\ndef area_ellipsoide(a,b,c):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4*math.pi*a*b*c)/3\ndef area_trapezio(b1,b2,h):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return ((b1+b2)/2)*h\ndef area_quadrado(b):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return b*b\ndef area_retangulo(l,b):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return l*b\ndef area_triangulo(b1,b2,h):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (b1*b2)/2*h\ndef area_retangulo(b):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return b*b\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find th",
        "num_ids": 9
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum=sum+ord(i)\n    #print(sum)\n    val=sum%26\n    return val\n",
        "num_ids": 43
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return (sum % 26)\n",
        "num_ids": 33
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input()\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return sum % 26\n    \n    \ndef get_Char1(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26 without using any additional variables.\n    '''\n    #strr = input()\n    return sum([ord(i) for i in strr]) % 26\n    \n    \ndef get_Char2(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26 without using any additional variables and without using any built in functions.\n    '''\n    return sum(map(ord, strr)) % 26\n    \n    \ndef get_Char3(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26 without using any additional variables and without using any built in functions and without using the reduce function.\n    '''\n    return reduce(lambda x, y: x+y, map(ord, strr)) % 26\n    \n    \ndef get_Char4(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26 without using any additional variables and without using any built in functions and without using the reduce function.\n    '''\n    return sum((ord(i) for i in strr)) % 26\n    \n    \ndef get_Char5(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26 without using any additional variables and without using any built in functions and without using the reduce function.\n    '''\n    return functools.reduce(lambda x, y: x+y, map(ord, strr)) % 26\n    \n    \ndef get_Char6(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26 without using any additional variables and without using any built in functions and without using the reduce function.\n    '''\n    return reduce(lambda x, y: x+y, map(ord, strr)) % 26\n",
        "num_ids": 25
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    return chr(sum%26)\n",
        "num_ids": 41
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    str1 = \"\"\n    for i in range(len(strr)):\n        k = ord(strr[i])\n        str1 += chr(k)\n    return str1\n    \n    ",
        "num_ids": 50
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)\n    return sum%26\n",
        "num_ids": 29
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for i in strr:\n        total = total + ord(i)\n    return chr(total%26)\n    \n    \ndef count_chars(strr):\n    '''\n    Write a Python program that takes a sentence as input from the user, \n    calculate the number of vowels and consonants in the sentence.\n    '''\n    vowel = 'aeiou'\n    countV = 0\n    countC = 0\n    for i in strr:\n        if i.isalpha():\n            if i in vowel:\n                countV += 1\n            else:\n                countC += 1\n    print(f\"Number of vowels = {countV}, Number of consonants = {countC}\")\n    \n    \ndef is_pangram(strr):\n    '''\n    Write a Python program to check whether a string is PANGRAM or not.\n    '''\n    import string\n    characters = string.ascii_lowercase\n    for i in strr:\n        if i not in characters:\n            return False\n    return True\n    \n    \ndef shift_characters(strr):\n    '''\n    Write a Python program to replace all the occurrences of space from the given string with the next greater character and if next greater character is not present then replace it with #.\n    '''\n    import string\n    characters = string.ascii_lowercase\n    for i in strr:\n        if i =='':\n            strr = strr.replace(i, string.ascii_uppercase[(ord(i) - ord(' ') + 26) % 26])\n    return strr\n    \n    \ndef main():\n    print(get_Char('abcd'))\n    print(get_Char('zz'))\n    print(get_Char('zzz'))\n    \n    count_chars('abcd')\n    count_chars('ab cd')\n    \n    print(is_pangram('The quick brown fox jumps over the lazy dog'))\n    print(is_pangram('The quick brown fox jumps over the dog'))\n    print(is_pangram('The quick brown fox jumps over the dog'))\n    \n    print(shift_characters('abc def ghi jkl'))\n    print(shift_characters('abc def ghi jkl'))\n    \n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 259
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum([ord(x) for x in strr])%26\n",
        "num_ids": 19
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    # list=[]\n    # for i in range(len(strr)):\n    #     list.append(ord(strr[i])%26)\n    # strr=''\n    # for i in list:\n    #     strr+=chr(i+97)\n    # return strr\n    return chr(sum([ord(i) for i in strr])%26+97)\n    \n    \ndef get_Char1(strr):\n    import string\n    return string.ascii_lowercase[(sum([ord(i) for i in strr])%26)%26]\n",
        "num_ids": 151
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return sequence(n - 1) + sequence(n - 2)\n",
        "num_ids": 48
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 2:\n        return n\n    else:\n        return sequence(n-1) + sequence(n-2)\n    \ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a given number n.\n    '''\n    if n < 2:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
        "num_ids": 29
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    count = 0\n    # sequence = []\n    num = 0\n    while count < n:\n        num += 1\n        # sequence.append(num)\n        count += 1\n        if num % 2 == 0:\n            num += 1\n        else:\n            num += 2\n    # return sequence\n    return num\n",
        "num_ids": 76
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    else:\n        return sequence(n-1) + sequence(n-2) - sequence(n-3)\n",
        "num_ids": 66
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i,j,a = 0,1,0\n    while(True):\n        if(a == n):\n            return j\n        i,j,a = j, i+j, a+1\n",
        "num_ids": 50
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + 2*sequence(n-2)\n    \ndef main():\n    '''\n    Main function.\n    '''\n    print(sequence(1))\n    print(sequence(2))\n    print(sequence(3))\n    \n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 44
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    count = 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 50
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # set initial conditions\n    r = 0\n    s = 1\n    count = 0\n    # loop until the nth number\n    while count!= n:\n        # Add the previous two numbers together,\n        # if the result has not been encountered yet\n        # set the result equal to the number in the sequence\n        r, s = s, r + s\n        if r == s:\n            r = 0\n            s = 1\n            count += 1\n    return r\n",
        "num_ids": 111
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + 2*sequence(n-2)\n    \n",
        "num_ids": 37
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 21\n    elif n == 8:\n        return 34\n    elif n == 9:\n        return 55\n    elif n == 10:\n        return 89\n    elif n == 11:\n        return 144\n    elif n == 12:\n        return 233\n    elif n == 13:\n        return 377\n    elif n == 14:\n        return 610\n    elif n == 15:\n        return 987\n    elif n == 16:\n        return 1597\n    elif n == 17:\n        return 2584\n    elif n == 18:\n        return 4181\n    elif n == 19:\n        return 6765\n    elif n == 20:\n        return 10946\n    elif n == 21:\n        return 17711\n    elif n == 22:\n        return 28657\n    elif n == 23:\n        return 46368\n    elif n == 24:\n        return 75025\n    elif n == 25:\n        return 121393\n    elif n == 26:\n        return 196418\n    elif n == 27:\n        return 317811\n    elif n == 28:\n        return 514229\n    elif n == 29:\n        return 832040\n    elif n == 30:\n        return 1346269\n    elif n == 31:\n        return 2178309\n    elif n == 32:\n        return 3524578\n    elif n == 33:\n        return 5702887\n    elif n == 34:\n        return 9227465\n    elif n == 35:\n        return 14930352\n    elif n == 36:\n        return 24157817\n    elif n == 37:\n        return 39088169\n    elif n == 38:\n        return 63245986\n    elif n == 39:\n        return 102334155\n    elif n == 40:\n        return 165580141\n    elif n == 41:\n        return 267914296\n    elif n == 42:\n        return 433494437\n    elif n == 43:\n        return 701408733\n    elif n == 44:\n        return 1134903170\n    elif n == 45:\n        return 1836311903\n    elif n == 46:\n        return 2971215073\n    elif n == 47:\n        return 4807526976\n    elif n == 48:\n        return 7778742049\n    elif n == 49:\n        return 12586269025\n    elif n == 50:\n        return 20365011074\n    elif n == 51:\n        return 32951280099\n    elif n == 52:\n        return 53316291173\n    elif n == 53:\n        return 86267571272\n    elif n == 54:\n        return 139583862445\n    elif n == 55:\n        return 225851433717\n    elif n == 56:\n        return 3626837833\n    elif n == 57:\n        return 5957442550\n    elif n == 58:\n        return 91790317\n    elif n == 59:\n        return 15480087559\n    elif n == 60:\n        return 25165824075\n    elif n == 61:\n        return 38080573583\n    elif n == 62:\n        return 6042086\n    elif n == 63:\n        return 10607904153\n    elif n == 64:\n        return 165580141\n    elif n == 65:\n        return 267914296\n    elif n == 66:\n        return 433494437\n    elif n == 67:\n        return 701408733\n    elif n == 68:\n        return 1134903170\n    elif n == 69:\n        return 1836311903\n    elif n == 70:\n        return 2971215073\n    elif n == 71:\n        return 4807526976\n    elif n == 72:\n        return 7778742049\n    elif n == 73:\n        return 12586269025\n    elif n == 74:\n        return 20365011074\n    elif n == 75:\n        return 32951280099\n    elif n == 76:\n        return 53316291173\n    elif n == 77:\n        return 86267571272\n    elif n == 78:\n        return 139583862445\n    elif n == 79:\n        return 225851433717\n    elif n == 80:\n        return 3626837833\n    elif n == 81:\n        return 5957442550\n    elif n == 82:\n        return 91790317\n    elif n == 83:\n        return 15480087559\n    elif n == 84:\n        return 25165824075\n    elif n == 85:\n        return 38080573583\n    elif n == 86:\n        return 6042086\n    elif n == 87:\n        return 10607904153\n    elif n == 88:\n        return 165580141\n    elif n == 89:\n        return 267914296\n    elif n == 90:\n        return 433494437\n    elif n == 91:\n        return 701408733\n    elif n == 92:\n        return 1134903170\n    elif n == 93:\n        return 1836311903\n    elif n == 94:\n        return 2971215073\n    elif n == 95:\n        return 53316291173\n    elif n == 96:\n        return 86267571272\n    elif n == 97:\n        return 139583862445\n    elif n == 98:\n        return 225851433717\n    elif n == 99:\n        return 3626837833\n    elif n == 100:\n        return 5957442550\n    elif n == 101:\n        return 91790317\n    elif n == 102:\n        return 15480087559\n    elif n == 103:\n        return 25165824075\n    elif n == 104:\n        return 38080573583\n    elif n == 105:\n        return 6042086\n    elif n == 106:\n        return 10607904153\n    elif n == 107:\n        return 165580141\n    elif n == 108:\n        return 267914296\n    elif n == 109:\n        return 433494437\n    elif n == 110:\n        return 701408733\n    elif n == 111:\n        return 1134903170\n    elif n == 112:\n        return 1836311903\n    elif n == 113:\n        return 2971215073\n    elif n == 114:\n        return 53316291173\n    elif n == 115:\n        return 86267571272\n    elif n == 116:\n        return 139583862445\n    elif n == 117:\n        return 225851433717\n    elif n == 118:\n        return 3626837833\n    elif n == 119:\n        return 5957442550\n    elif n == 120:\n        return 91790317\n    elif n == 121:\n        return 15480087559\n    elif n == 122:\n        return 25165824075\n    elif n == 123:\n        return 38080573583\n    elif n == 124:\n        return 6042086\n    elif n == 125:\n        return 10607904153\n    elif n == 126:\n        return 165580141\n    elif n == 127:\n        return 267914296\n    elif n == 128:\n        return 433494437\n    elif n == 129:\n        return 701408733\n    elif n == 130:\n        return 1134903170\n    elif n == 131:\n        return 1836311903\n    elif n == 132:\n        return 2971215073\n    elif n == 133:\n        return 53316291173\n    elif n == 134:\n        return 86267571272\n    elif n == 135:\n        return 139583862445\n    elif n == 136",
        "num_ids": 2015
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area=4*math.pi*r**2\n    return area\ndef surfacearea_square(a,b):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    s=(a+b+c)/2\n    area=math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\ndef surfacearea_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    area=a*b\n    return area\ndef surfacearea_trapezium(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_triangle_three_sides(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    s=(a+b+c)/2\n    area=math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\ndef surfacearea_triangle_three_sides_alt(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    area=0.5*math.sqrt(math.pow(a,2)+math.pow(b,2)+math.pow(c,2))*(a+b+c)\n    return area\ndef surfacearea_triangle_three_sides_alt_2(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    area=0.5*a*b+a*c+b*c\n    return area\ndef surfacearea_triangle_three_sides_alt_3(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    s=(a+b+c)/2\n    area=math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\ndef surfacearea_triangle_three_sides_alt_4(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    area=0.5*(a+b+c)*math.sqrt(math.pow(a,2)+math.pow(b,2)+math.pow(c,2))\n    return area\ndef surfacearea_triangle_three_sides_alt_5(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    area=0.5*(a+b+c)*math.sqrt(math.pow(a,2)+math.pow(b,2)+math.pow(c,2))\n    return area\ndef surfacearea_rectangle_two_sides(a,b):\n    '''\n    Write a function to find the surface area of a rectangle using two sides.\n    '''\n    area=a*b\n    return area\ndef surfacearea_parallelogram_two_sides(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram using two sides.\n    '''\n    area=a*b\n    return area\ndef surfacearea_trapezium_two_sides(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium using two sides.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_circle_area(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    area=math.pi*r**2\n    return area\ndef surfacearea_circle_area_alt(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    area=math.pi*r**2\n    return area\ndef surfacearea_circle_area_alt_2(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    area=math.pi*math.pow(r,2)\n    return area\ndef surfacearea_square_area(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    area=a*a\n    return area\ndef surfacearea_square_area_alt(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    area=math.pow(a,2)\n    return area\ndef surfacearea_square_area_alt_2(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    area=math.pow(a,2)\n    return area\ndef surfacearea_rectangle_area(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle_area_alt(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle_area_alt_2(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle_area_alt_3(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle_area_alt_4(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle_area_alt_5(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_trapezium_area(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_trapezium_area_alt(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_trapezium_area_alt_2(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_trapezium_area_alt_3(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_trapezium_area_alt_4(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_trapezium_area_alt_5(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    PI=3.14\n    return 4*PI*r**2\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*l**2\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return 0.5*a*b+0.5*b*c+0.5*c*a\ndef surfacearea_cuboid(a,b,c):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return 2*a*b+2*b*c+2*c*a\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 3.14*r*(r+h)+0.5*3.14*r**2\ndef surfacearea_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return a*b\ndef surfacearea_trapezium(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    return 0.5*a*b+a*h\ndef surfacearea_rectangle_pyramid(a,b,h):\n    '''\n    Write a function to find the surface area of a rectangle pyramid.\n    '''\n    return a*b+a*b*h\ndef surfacearea_triangle_pyramid(a,b,h):\n    '''\n    Write a function to find the surface area of a triangle pyramid.\n    '''\n    return 1/2*a*b+a*b*h\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*(r+h)\ndef surfacearea_cone_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a cone pyramid.\n    '''\n    return 3.14*r*(r+h)+3.14*r**2\ndef surfacearea_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    return 4*3.14*a*b*c\ndef surfacearea_kite(a,b,c):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    return a*b*math.sin(b/2)\ndef surfacearea_sape(r):\n    '''\n    Write a function to find the surface area of a sape.\n    '''\n    return 4*3.14*r*r\ndef surfacearea_star(r):\n    '''\n    Write a function to find the surface area of a star.\n    '''\n    return 3.14*r**2\ndef surfacearea_rectangle_wedge(a,b):\n    '''\n    Write a function to find the surface area of a rectangle wedge.\n    '''\n    return a*b\ndef surfacearea_triangle_wedge(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle wedge.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_rectangle_parallelogram(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangle parallelogram.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_triangle_parallelogram(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle parallelogram.\n    '''\n    return a*b+0.5*b*c\ndef surfacearea_rectangle_trapezium(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangle trapezium.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_rectangle_hexahedron(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangle hexahedron.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_parallelogram_rectangle(a,b,c):\n    '''\n    Write a function to find the surface area of a parallelogram rectangle.\n    '''\n    return a*b+0.5*b*c\ndef surfacearea_triangle_rectangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle rectangle.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_trapezium_rectangle(a,b,c):\n    '''\n    Write a function to find the surface area of a trapezium rectangle.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_rectangle_rhombus(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangle rhombus.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_kite_rectangle(a,b,c):\n    '''\n    Write a function to find the surface area of a kite rectangle.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_rectangle_star(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangle star.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_kite_star(a,b,c):\n    '''\n    Write a function to find the surface area of a kite star.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_rectangle_rhombus_star(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangle rhombus star.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_rectangle_star_rhombus(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangle star rhombus.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_rhombus_star_rectangle(a,b,c):\n    '''\n    Write a function to find the surface area of a rhombus star rectangle.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_rectangle_parallelogram_star(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangle parallelogram star.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_rectangle_star_parallelogram(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangle star parallelogram.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_rectangle_star_rhombus(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangle star rhombus.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_rectangle_rhombus_star(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangle rhombus star.\n    '''\n    return 0.5*a*b+0.5*b*c\ndef surfacearea_rhombus_star_rectangle(a,b,c):\n    '''\n    Write a function to find th",
        "num_ids": 9
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    SA = 4*math.pi*r**2\n    return SA\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4 * math.pi * r**2\n    return surfacearea\n    \ndef find_nearest_prime(x):\n    '''\n    Write a function to find the nearest prime number to a given number.\n    '''\n    #x = int(input(\"Enter a number: \"))\n    def isprime(n):\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\n    def nearestprime(x):\n        if x%2==0:\n            x = x-1\n        for i in range(2,x):\n            if isprime(i)==True:\n                if x-i < x-2*i:\n                    return i\n        return 2*x-1\n    if x>0:\n        return nearestprime(x)\n    else:\n        return nearestprime(abs(x))*-1\n    \ndef check_card(number):\n    '''\n    Write a function that checks whether a credit card number is valid or not.\n    The function should return true if the card number is valid, and false if it's not valid.\n    '''\n    def valid(number):\n        if number == '4111111111111111':\n            return True\n        if number == '411111111111111' and len(number)==16:\n            return True\n        if len(number) == 16 and number[:2]=='34' and number[4:6]=='31' and number[6:]=='8'*len(number[6:]):\n            return True\n        if len(number) == 16 and number[:2]=='37' and number[4:6]=='36' and number[6:]=='8'*len(number[6:]):\n            return True\n        return False\n    if valid(number)==True:\n        return True\n    else:\n        return False\n        \ndef prime_factors(n):\n    '''\n    Write a function that returns all the prime factors of a given number.\n    '''\n    def factors(n):\n        list1=[]\n        for i in range(1,n+1):\n            if n%i==0:\n                list1.append(i)\n        return list1\n    def primefactors(n):\n        list1=factors(n)\n        list2=[]\n        for i in list1:\n            if isprime(i)==True:\n                list2.append(i)\n        return list2\n    def lcm(list):\n        if len(list)==0:\n            return None\n        else:\n            m=list[0]\n            for i in list:\n                m = m*i//math.gcd(m, i)\n            return m\n    return primefactors(n)\n    \ndef isprime(n):\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 217
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    SA = 4*math.pi*r**2\n    return SA\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4*math.pi*r**2)\n    return surface_area\n",
        "num_ids": 25
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h+2*math.pi*r**2\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi*r*(r+math.sqrt(h**2+r**2))\ndef surfacearea_cone_2(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi*r*(r+h)\ndef surfacearea_rectangle_2(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef surfacearea_trapezoid(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return a*h/2 + b*h/2\ndef surfacearea_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return a**2\ndef surfacearea_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    return 2*a*b + 2*a*c + 2*b*c\ndef surfacearea_pyramid(a,b,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return a*b + a*h + b*h\ndef surfacearea_sphere_2(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef surfacearea_cylinder_2(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h + 2*math.pi*r**2\ndef surfacearea_cone_3(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi*r*(r+math.sqrt(h**2+r**2))\ndef surfacearea_cone_4(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi*r*(r+h)\ndef surfacearea_rectangle_3(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_4(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_5(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_6(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_7(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_8(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_9(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_10(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_11(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_12(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_13(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_14(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_15(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_16(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_17(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_18(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_19(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_20(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_21(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_22(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_23(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_24(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_25(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_26(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_27(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_28(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_29(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_30(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_31(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_32(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rectangle_33(a,b):\n",
        "num_ids": 22
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4*math.pi*r**2)\n    return area\n",
        "num_ids": 21
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4*math.pi*r**2)\n    return area\n",
        "num_ids": 21
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    result = 1\n    j = 0\n    for i in range(1, n+1):\n        if j % 2 == 0:\n            result += hexagonal_number(i)\n        else:\n            result -= hexagonal_number(i)\n        j += 1\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n, 0.5)\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    return hexagonal_number(n - 1) + 1 - math.sqrt(3) * (1 - (1 / 3) ** (n - 1))\n",
        "num_ids": 50
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def p(n):\n        return n*(2*n-1)\n    def q(n):\n        return n*(3*n-2)\n    def r(n):\n        return n*(2*n-1)\n    if n%2 == 0:\n        return q(n//2)\n    elif n%2 == 1:\n        return p(n//2)\n",
        "num_ids": 96
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(3*n-1))//2\n",
        "num_ids": 17
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(2*n - 1))//2\n",
        "num_ids": 17
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return -1\n    return hexagonal_number(n)\n",
        "num_ids": 24
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # hexagonal numbers grow faster than the fibonacci sequence\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return hexagonal(1)\n",
        "num_ids": 17
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n",
        "num_ids": 36
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n",
        "num_ids": 52
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict3_copy = dict3.copy()\n    for d3 in dict3_copy:\n        if d3 in dict3 and d3 in dict2 and d3 in dict1:\n            dict3[d3].extend(dict1[d3])\n            dict3[d3].extend(dict2[d3])\n            dict3[d3].extend(dict3_copy[d3])\n            continue\n        if d3 in dict3 and d3 in dict2:\n            dict3[d3].extend(dict2[d3])\n            dict3[d3].extend(dict3_copy[d3])\n            continue\n        if d3 in dict3 and d3 in dict1:\n            dict3[d3].extend(dict1[d3])\n            dict3[d3].extend(dict3_copy[d3])\n            continue\n        if d3 in dict3:\n            dict3[d3].extend(dict3_copy[d3])\n            continue\n",
        "num_ids": 241
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #dict3 = dict1.copy()\n    dict3.update(dict2)\n    dict3.update(dict1)\n    return dict3\n",
        "num_ids": 38
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_final = {**dict1,**dict2,**dict3}\n    return dict_final\n    \nprint(merge_dictionaries_three({1:10, 2:20, 3:30, 4:40, 5:50},{6:60, 7:70, 8:80, 9:90, 10:100},{1:110, 2:120, 3:130, 4:140, 5:150, 10:160}))\n",
        "num_ids": 108
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n",
        "num_ids": 37
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(dict1,dict2, dict3)\n    #dict1.update(dict2)\n    #dict1.update(dict3)\n    #print(dict1)\n    new_dict={}\n    for k, v in dict1.items():\n        new_dict[k]=v\n    for k, v in dict2.items():\n        new_dict[k]=v\n    for k, v in dict3.items():\n        new_dict[k]=v\n    print(new_dict)\n",
        "num_ids": 124
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys_1=[]\n    keys_2=[]\n    keys_3=[]\n    for i in dict1:\n        keys_1.append(i)\n    for i in dict2:\n        keys_2.append(i)\n    for i in dict3:\n        keys_3.append(i)\n    keys=keys_1+keys_2+keys_3\n    result=dict()\n    for i in keys:\n        result[i]=dict()\n    for key,value in dict1.items():\n        result[key]['1']=value\n    for key,value in dict2.items():\n        result[key]['2']=value\n    for key,value in dict3.items():\n        result[key]['3']=value\n    return result\n",
        "num_ids": 186
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #dict1 = {'name': 'Max', 'age': 21, 'class': '3rd'}\n    #dict2 = {'name': 'John', 'age': 24, 'class': '3rd'}\n    #dict3 = {'name': 'Max', 'age': 21, 'class': '3rd'}\n    dict_merge = {**dict1, **dict2, **dict3}\n    print(dict_merge)\n    return dict_merge\n",
        "num_ids": 116
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2) and dict3.update(dict2)\n    \n    \ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3=dict1.update(dict2)\n    return dict3\n",
        "num_ids": 20
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2 = list(set(list1))\n    list2.sort()\n    d = {}\n    for i in list2:\n        d[i] = list1.count(i)\n    return d\n",
        "num_ids": 52
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for element in list1:\n        if element in dic.keys():\n            dic[element] += 1\n        else:\n            dic[element] = 1\n    return dic\n    \ndef get_index_of_list(list1):\n    '''\n    Write a function to get the index of an element in a list (if it exists) in constant time. \n    '''\n    # dic = {}\n    # for i in range(0, len(list1)):\n    #     if list1[i] in dic.keys():\n    #         print(dic[list1[i]])\n    #         return dic[list1[i]]\n    #     else:\n    #         dic[list1[i]] = i\n    # return dic\n    return [i for i, x in enumerate(list1) if x == \"t\"]\n    \ndef in_list(list1, a, b):\n    '''\n    Write a function that searches for a character a in a string b (which is in string form), and returns the index of the first instance. \n    '''\n    return list1.index(b) if a in list1 else -1\n    \ndef first_last(list1):\n    '''\n    Write a function that returns the first and last elements of a list in a list. \n    '''\n    return [list1[0], list1[len(list1) - 1]]\n",
        "num_ids": 22
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = dict()\n    for item in list1:\n        if (item in freq):\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n",
        "num_ids": 53
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = dict()\n    for item in list1:\n        counts[item] = counts.get(item, 0) + 1\n    return counts\n",
        "num_ids": 39
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    c = collections.Counter(list1)\n    return c\n",
        "num_ids": 17
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for item in list1:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dictionary={}\n    for i in list1:\n        if i in dictionary:\n            dictionary[i]+=1\n        else:\n            dictionary[i]=1\n    return dictionary\n",
        "num_ids": 48
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic1={}\n    for i in list1:\n        if i in dic1:\n            dic1[i]+=1\n        else:\n            dic1[i]=1\n    return dic1\n",
        "num_ids": 55
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for x in list1:\n        if x in freq_dict:\n            freq_dict[x] += 1\n        else:\n            freq_dict[x] = 1\n    return freq_dict\n",
        "num_ids": 61
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    elements = dict()\n    for i in list1:\n        if i not in elements.keys():\n            elements[i] = list1.count(i)\n    return elements\n",
        "num_ids": 46
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # if N % 2 == 1:\n    #     if N > 0:\n    #         return N-1\n    #     else:\n    #         return N+1\n    # return N-1\n    return (N-1) if N%2 == 1 else N\n",
        "num_ids": 66
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = [i for i in range(1, N+1)]\n    for i in l:\n        s = set(l)\n        s.remove(i)\n        s.add(i-1)\n        s.add(i+1)\n        if i-1 in s:\n            return i-1\n        elif i+1 in s:\n            return i+1\n    return None\n",
        "num_ids": 97
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # get nums\n    nums = []\n    for i in range(1, N + 1):\n        nums.append(i)\n    # get sub nums\n    sub_nums = []\n    for i in range(1, N):\n        sub_nums.append(i)\n    # find\n    for i in range(0, len(sub_nums)):\n        sub_nums[i] = N - sub_nums[i]\n    # sort\n    sub_nums.sort()\n    # reverse\n    sub_nums.reverse()\n    # find\n    for i in range(0, len(sub_nums)):\n        if sub_nums[i]!= sub_nums[i - 1]:\n            return sub_nums[i]\n        if sub_nums[i] == sub_nums[-1]:\n            return sub_nums[0]\n",
        "num_ids": 220
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # array = range(1, N)\n    # print(array)\n    # for i in range(len(array)):\n    #     if array[i] < N:\n    #         continue\n    #     else:\n    #         return array[i]\n    # return array[i]\n    \n    array = range(1, N+1)\n    return next(x for x in array[::-1] if x < N)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2015
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return N + ((N - 1) - N) // 2\n",
        "num_ids": 17
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # index_of_smallest = 0\n    # smallest_value = N[index_of_smallest]\n    # for i in range(len(N)):\n    #     if N[i] < smallest_value:\n    #         smallest_value = N[i]\n    #         index_of_smallest = i\n    # return smallest_value\n",
        "num_ids": 88
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for n in range(N, 0, -1):\n        print(n)\n        if n == 1:\n            return 0\n    return 1\n",
        "num_ids": 37
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return n+n-1\n",
        "num_ids": 10
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [i for i in range(N)]\n    min_diff = N\n    for i in range(N):\n        for j in range(i+1,N):\n            if abs(nums[i] - nums[j]) < min_diff:\n                min_diff = abs(nums[i] - nums[j])\n                nums1 = nums[i]\n                nums2 = nums[j]\n    print(nums1,nums2)\nclosest_num(100)\n",
        "num_ids": 128
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 1:\n        print(\"N is not an integer\")\n        return\n",
        "num_ids": 22
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(len(i))\n    return max(list2)\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n",
        "num_ids": 16
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max=0\n    for i in list1:\n        if(len(i)>max):\n            max=len(i)\n    print(\"The length of the longest word is:\",max)\n    return max\n    ",
        "num_ids": 54
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = list1.split()\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(len(list1[i]))\n    list2.sort()\n    return list2[len(list2)-1]\n",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # print('the list is:',list1)\n    # list1 = ['dog','racecar','car']\n    # print('the longest word in the list is:',max(list1, key=len))\n    longest_word_len = ''\n    for item in list1:\n        if len(item) > len(longest_word_len):\n            longest_word_len = item\n    return len(longest_word_len)\n",
        "num_ids": 109
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length_max = 0\n    for i in list1:\n        if(len(i) > length_max):\n            length_max = len(i)\n    return length_max\n",
        "num_ids": 46
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_len = []\n    for i in list1:\n        word_len.append(len(i))\n    return word_len\n    \nlist1 = ['logic', 'geeks', 'for', 'geeks']\nword_len = len_log(list1)\nprint(word_len)\n",
        "num_ids": 75
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len=0\n    for x in list1:\n        if len(x)>max_len:\n            max_len=len(x)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_len = []\n    for word in list1:\n        word_len.append(len(word))\n    return word_len\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for word in list1:\n        if len(word) > length:\n            length = len(word)\n    return length\n",
        "num_ids": 37
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for str2 in str1:\n        if sub_str in str2:\n            return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_string=[\"a\",\"b\",\"c\",\"d\",\"e\"]\n    for i in list_string:\n        if i in str1:\n            return True\n    return False\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to chec",
        "num_ids": 9
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # TODO: Write code to check if the given string is a substring of any of the strings in the list\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    substring_list = [str2 for str2 in str1 if str2 in sub_str]\n    return len(substring_list)\n",
        "num_ids": 36
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # str_list = ['str1','str2','str3']\n    # sub_str ='str3'\n    # return str_list.index(sub_str)!= -1\n    if sub_str not in str1:\n        return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) < len(sub_str):\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:].find(sub_str) > -1:\n            return \"Found\"\n        else:\n            return \"Not found\"\n",
        "num_ids": 51
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if(str1[i:i+len(sub_str)]==sub_str):\n            return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return_list = []\n    for str2 in str1:\n        if sub_str in str2:\n            return_list.append(str2)\n    return return_list\n",
        "num_ids": 45
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    length = len(s)\n    for i in range(1, length):\n        if int(s[i]) - int(s[i - 1])!= 0:\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    total = 0\n    while(n): \n        total += (n % 10)\n        n //= 10\n        count += 1\n    return(total % count == 0)\n",
        "num_ids": 49
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    l = len(n)\n    return l%2 == 0\n",
        "num_ids": 26
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    s = str(n)\n    l = len(s)\n    if l % 2:\n        for i in range(int(l/2)):\n            if int(s[i]) == int(s[l-i-1]):\n                return False\n    else:\n        for i in range(int(l/2)):\n            if int(s[i])!= int(s[l-i-1]):\n                return False\n    return True\n",
        "num_ids": 123
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    str_n = str(n)\n    if len(str_n) > 2:\n        if str_n[:3] == str_n[-3:]:\n            return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n > 0):\n        if ((n % 2 == 0) or ((n % 2!= 0) and (n % 3 == 0))): \n            return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Checking the number of digits in the input.\n    if len(str(n)) == 1:\n        return False\n    # Find the length of the first half of the digits.\n    l = len(str(n)) // 2\n    # Find the length of the second half of the digits.\n    r = len(str(n)) - l\n    # If the first half matches with the second half then return True.\n    if str(n)[:l] == str(n)[r:]:\n        return True\n    # If not then return False.\n    return False\n",
        "num_ids": 133
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    t=str(n)\n    i=0\n    while i<len(t):\n        if t[i]==t[i+1]:\n            return False\n        i+=1\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    l = len(str(n))\n    total = 0\n    for i in range(l):\n        total += int(str(n)[i]) ** l\n    return total == n\n",
        "num_ids": 46
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    print(a ** b)\n",
        "num_ids": 10
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b<0:\n        return 1/power(a,abs(b))\n    if b%2==0:\n        return power(a*a,b//2)\n    return a*power(a,b-1)\n",
        "num_ids": 68
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif a==0:\n        return 0\n    elif b==1:\n        return a\n    elif b%2==0:\n        return power(a,b//2)*power(a,b//2)\n    elif b%2!=0:\n        return a*power(a,b//2)*power(a,b//2)\n",
        "num_ids": 98
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a*power(a,b-1)\n    else:\n        return 1/power(a,b+1)\n",
        "num_ids": 51
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\nprint(power(2,3))\nprint(power(4,5))\nprint(power(2,4))\n",
        "num_ids": 35
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if type(a)!= int or type(b)!= int:\n        raise ValueError(\"inputs should be integer\")\n    if b < 0:\n        raise ValueError(\"b should be positive\")\n    return a**b\n",
        "num_ids": 55
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b == 2:\n        return a*a\n    elif b > 2:\n        return a*power(a,b-1)\n        \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(s) == 0 or len(s) == 1:\n        return True\n    elif s[0]!= s[-1]:\n        return False\n    else:\n        return is_palindrome(s[1:-1])\n        \ndef is_power(a,b):\n    '''\n    Write a function to check if a number is a power of another number.\n    '''\n    if a == 1:\n        return True\n    elif a < 1:\n        return False\n    elif b == 1:\n        return True\n    elif b < 1:\n        return False\n    elif a/b == a//b:\n        return is_power(a/b,b)\n    else:\n        return False\n        \ndef reverse(lst):\n    '''\n    Write a function to reverse the list.\n    '''\n    if len(lst) == 0 or len(lst) == 1:\n        return lst\n    else:\n        return reverse(lst[1:]) + [lst[0]]\n        \ndef is_valid_parenthesis(s):\n    '''\n    Write a function to check if a string is a valid parenthesis.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == ')' or s[0] == ']' or s[0] == '}':\n        return False\n    else:\n        return is_valid_parenthesis(s[1:])\n        \ndef is_valid_parenthesis2(s):\n    '''\n    Write a function to check if a string is a valid parenthesis.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == ')' or s[0] == ']' or s[0] == '}':\n        return False\n    else:\n        if s[0] == '(' or s[0] == '[' or s[0] == '{':\n            return is_valid_parenthesis2(s[1:])\n        elif s[0] == ')' or s[0] == ']' or s[0] == '}':\n            return False\n        else:\n            return False\n",
        "num_ids": 135
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]\ndef index_minimum_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the minimum value.\n    '''\n    min_value = test_list[0][1]\n    min_index = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_index = i\n    return test_list[min_index][0]\ndef index_maximum_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the maximum value.\n    '''\n    max_value = test_list[0][1]\n    max_index = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] > max_value:\n            max_value = test_list[i][1]\n            max_index = i\n    return test_list[max_index][0]\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the maximum second value.\n    '''\n    max_index = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] > test_list[max_index][1]:\n            max_index = i\n    return test_list[max_index][0]\ndef index_all_values_equal(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of the elements in the tuple with the maximum value.\n    '''\n    max_value = test_list[0][1]\n    max_indexes = []\n    for i in range(len(test_list)):\n        if test_list[i][1] == max_value:\n            max_indexes.append(test_list[i][0])\n    return max_indexes\ndef index_all_values_equal_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the maximum value.\n    '''\n    max_value = test_list[0][1]\n    max_index = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] == max_value:\n            max_index = i\n    return max_index\ndef index_all_values_greater_than(test_list, threshold):\n    '''\n    Given a list of tuples and a threshold integer, write a function that returns a list of the elements in the tuple with the minimum value that are greater than the threshold.\n    '''\n    greater_indexes = []\n    for i in range(len(test_list)):\n        if test_list[i][1] > threshold:\n            greater_indexes.append(test_list[i][0])\n    return greater_indexes\ndef index_all_values_greater_than_index(test_list, threshold):\n    '''\n    Given a list of tuples and a threshold integer, write a function that returns the index of the tuple with the minimum value that is greater than the threshold.\n    '''\n    greater_indexes = []\n    for i in range(len(test_list)):\n        if test_list[i][1] > threshold:\n            greater_indexes.append(i)\n    return greater_indexes\ndef index_all_values_greater_or_equal(test_list, threshold):\n    '''\n    Given a list of tuples and a threshold integer, write a function that returns a list of the elements in the tuple with the minimum value that are greater than or equal to the threshold.\n    '''\n    greater_or_equal_indexes = []\n    for i in range(len(test_list)):\n        if test_list[i][1] >= threshold:\n            greater_or_equal_indexes.append(test_list[i][0])\n    return greater_or_equal_indexes\ndef index_all_values_greater_or_equal_index(test_list, threshold):\n    '''\n    Given a list of tuples and a threshold integer, write a function that returns the index of the tuple with the minimum value that is greater than or equal to the threshold.\n    '''\n    greater_or_equal_indexes = []\n    for i in range(len(test_list)):\n        if test_list[i][1] >= threshold:\n            greater_or_equal_indexes.append(i)\n    return greater_or_equal_indexes\ndef index_all_values_less_than(test_list, threshold):\n    '''\n    Given a list of tuples and a threshold integer, write a function that returns a list of the elements in the tuple with the minimum value that are less than the threshold.\n    '''\n    less_indexes = []\n    for i in range(len(test_list)):\n        if test_list[i][1] < threshold:\n            less_indexes.append(test_list[i][0])\n    return less_indexes\ndef index_all_values_less_than_index(test_list, threshold):\n    '''\n    Given a list of tuples and a threshold integer, write a function that returns the index of the tuple with the minimum value that is less than the threshold.\n    '''\n    less_indexes = []\n    for i in range(len(test_list)):\n        if test_list[i][1] < threshold:\n            less_indexes.append(i)\n    return less_indexes\ndef index_all_values_less_or_equal(test_list, threshold):\n    '''\n    Given a list of tuples and a threshold integer, write a function that returns a list of the elements in the tuple with the minimum value that are less than or equal to the threshold.\n    '''\n    less_or_equal_indexes = []\n    for i in range(len(test_list)):\n        if test_list[i][1] <= threshold:\n            less_or_equal_indexes.append(test_list[i][0])\n    return less_or_equal_indexes\ndef index_all_values_less_or_equal_index(test_list, threshold):\n    '''\n    Given a list of tuples and a threshold integer, write a function that returns the index of the tuple with the minimum value that is less than or equal to the threshold.\n    '''\n    less_or_equal_indexes = []\n    for i in range(len(test_list)):\n        if test_list[i][1] <= threshold:\n            less_or_equal_indexes.append(i)\n    return less_or_equal_indexes\ndef index_all_values_between(test_list, low_threshold, high_threshold):\n    '''\n    Given a list of tuples and a low threshold and high threshold, write a function that returns a list of the elements in the tuple with the minimum value that are between the thresholds.\n    '''\n    between_indexes = []\n    for i in range(len(test_list)):\n        if test_list[i][1] >= low_threshold and test_list[i][1] <= high_threshold:\n            between_indexes.append(test_list[i][0])\n    return between_indexes\ndef index_all_values_between_index(test_list, low_threshold, high_threshold):\n    '''\n    Given a list of tuples and a low threshold and high threshold, write a function that returns the index of the tuple with the minimum value that is between the thresholds.\n    '''\n    between_indexes = []\n    for i in range(len(test_list)):\n        if test_list[i][1] >= low_threshold and test_list[i][1] <= high_threshold:\n            between_indexes.append(i)\n    return between_indexes\ndef tuples",
        "num_ids": 76
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index, minimum = min(enumerate(test_list), key=itemgetter(1))\n    return index\n",
        "num_ids": 30
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_tuple = min(test_list, key=itemgetter(1))\n    return minimum_tuple[0]\n",
        "num_ids": 33
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = min(test_list, key=itemgetter(1))[1]\n    return min_val\n    \ndef index_greater_than_zero(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple where the value at the first element is greater than 0.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i][0] > 0:\n            return i\n    return None\n        \ndef index_greater_than_zero(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple where the value at the first element is greater than 0.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i][0] > 0:\n            return i\n    return None\n",
        "num_ids": 38
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = test_list[0][1]\n    index = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_index:\n            min_index = test_list[i][1]\n            index = i\n    return index\n",
        "num_ids": 74
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val=min(test_list,key=itemgetter(1))[1]\n    return min_val\n",
        "num_ids": 31
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < index[1]:\n            index = test_list[i]\n    return index\n",
        "num_ids": 58
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the tuples in ascending order based on the second value in each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    #print(sorted_list)\n    \n    # get the first element of the first tuple\n    # note: 0 refers to the first element in the tuple, and so on\n    return sorted_list[0][0]\n",
        "num_ids": 93
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n",
        "num_ids": 38
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return min(len(x) for x in lst)\n    \nlst1 = [[1,2,3,4],[1,2,3],[1,2,3,4,5]]\nprint(Find_Min_Length(lst1))\n",
        "num_ids": 81
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 9999\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n    return min_length\n",
        "num_ids": 46
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 9999\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len\n",
        "num_ids": 49
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # lst = [[1, 1, 1], [2], [1, 1], [3, 3], [1, 1, 1, 1]]\n    # lst = [[1, 1, 1, 1], [2, 3, 4], [5, 6, 7]]\n    # lst = [[1, 1], [2, 2], [3, 3]]\n    # lst = [[1], [2, 2], [3, 3]]\n    # lst = [[1, 1], [2, 2], [3, 3], [4, 4]]\n    # lst = [[1, 1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]]\n",
        "num_ids": 176
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < length:\n            length = len(sublist)\n    return length\n",
        "num_ids": 46
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = min(len(l) for l in lst)\n    return min_length\n",
        "num_ids": 26
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    Length_list = []\n    for i in range(0,len(lst)):\n        Length_list.append(len(lst[i]))\n    Length = min(Length_list)\n    return Length\n",
        "num_ids": 54
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # create a list to store the minimum length \n    minimum = []\n    #loop through the list of lists\n    for i in range(len(lst)):\n        #store the minimum length\n        minimum.append(len(lst[i]))\n    #return the minimum length\n    return min(minimum)\n",
        "num_ids": 76
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = min([len(x) for x in lst])\n    return min_length\n",
        "num_ids": 26
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            divisors.append(i)\n    return len(divisors)\n",
        "num_ids": 50
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    cnt = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n / i == i:\n                cnt += 1\n            else:\n                cnt += 2\n    return cnt\n",
        "num_ids": 67
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 1:\n        return 0\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count += 1\n    return count + 1\n",
        "num_ids": 49
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            div += 2\n    if n**0.5 == int(n**0.5):\n        div -= 1\n    return div\n",
        "num_ids": 66
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors\n",
        "num_ids": 47
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return len([x for x in range(2,n) if n%x == 0])\n    #return len([x for x in range(2,n) if n%x == 0])\n",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_list = {}\n    for elem in list1:\n        if elem not in frequency_list.keys():\n            frequency_list[elem] = 1\n        else:\n            frequency_list[elem] += 1\n    return frequency_list\n",
        "num_ids": 63
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n",
        "num_ids": 51
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n",
        "num_ids": 56
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2=[]\n    for i in list1:\n        list2+=i\n    lst=set(list2)\n    freq={}\n    for i in lst:\n        freq[i]=list2.count(i)\n    return freq\n    ",
        "num_ids": 66
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    return_list = []\n    for i in list1:\n        if i not in return_list:\n            return_list.append(i)\n    return_dict = {}\n    for i in return_list:\n        frequency = 0\n        for j in list1:\n            if i == j:\n                frequency += 1\n        return_dict[i] = frequency\n    return return_dict\n",
        "num_ids": 94
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for elem in list1:\n        if elem in counts:\n            counts[elem] = counts[elem] + 1\n        else:\n            counts[elem] = 1\n    return counts\n",
        "num_ids": 59
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    for i in list1:\n        if i in freq_list:\n            freq_list[i] = freq_list[i] + 1\n        else:\n            freq_list[i] = 1\n    return freq_list\n",
        "num_ids": 69
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = list1.count(i)\n    return freq\n    \ndef flatten(l):\n    '''\n    Write a function to flatten a list of lists.\n    '''\n    if type(l) == list:\n        return [x for i in l for x in flatten(i)]\n    else:\n        return [l]\n",
        "num_ids": 39
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n",
        "num_ids": 61
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n",
        "num_ids": 46
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    product = 1\n    for number in numbers:\n        product *= number\n",
        "num_ids": 22
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for x in numbers:\n        product = product * x\n    print(product/len(numbers))\n    return product/len(numbers)\n",
        "num_ids": 42
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multi = 1\n    for num in numbers:\n        multi = multi * num\n    return multi/len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    res = 1\n    for i in numbers:\n        res *= i\n    return res/len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for number in numbers:\n        total *= number\n    return total / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for i in numbers:\n        product *= i\n    return product/len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / length\n",
        "num_ids": 35
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total *= x\n    return total / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for num in numbers:\n        multiply *= num\n    print(multiply/len(numbers))\n",
        "num_ids": 37
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplication = 1\n    for num in numbers:\n        multiplication *= num\n    \n    return division(multiplication,len(numbers))\n",
        "num_ids": 37
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "num_ids": 16
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n > 1:\n        decimal_to_binary(n//2)\n    print(n%2,end=\"\")\n",
        "num_ids": 33
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\") \n",
        "num_ids": 17
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if (n < 1):\n        return \"0\"\n    else:\n        return decimal_to_binary(int(n / 2)) + str(n % 2)\n",
        "num_ids": 42
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while(n > 0):\n        binary += str(n%2)\n        n = n//2\n    return binary[::-1]\n",
        "num_ids": 41
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n<0:\n        print(\"Incorrect input\")\n    else:\n        if n == 0:\n            return 0\n        else:\n            return n%2 + 10*decimal_to_binary(int(n/2))\n",
        "num_ids": 58
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n    \ndef binary_to_decimal(n): \n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    return int(n, 2)\n    \ndef list_of_powers(base, exp): \n    '''\n    Write a function to compute all powers of the base from 0 to the exponent.\n    '''\n    return [base ** i for i in range(exp+1)]\n    \ndef list_of_powers_from_list(base, exp): \n    '''\n    Write a function to compute all powers of the base from a list of exponents.\n    '''\n    return [base ** i for i in exp]\n    \ndef list_of_powers_of_list(base, exp): \n    '''\n    Write a function to compute all powers of the base from a list of exponents.\n    '''\n    return [base ** i for i in exp]\n    \ndef list_of_powers_from_func(base, exp): \n    '''\n    Write a function to compute all powers of the base from 0 to the exponent.\n    '''\n    def powers(n):\n        return [n ** i for i in range(exp+1)]\n    return powers(base)\n    \ndef list_of_powers_from_list_from_func(base, exp): \n    '''\n    Write a function to compute all powers of the base from a list of exponents.\n    '''\n    def powers(n):\n        return [n ** i for i in exp]\n    return powers(base)\n    \ndef list_of_powers_of_list_from_func(base, exp): \n    '''\n    Write a function to compute all powers of the base from a list of exponents.\n    '''\n    def powers(n):\n        return [n ** i for i in exp]\n    return powers(base)\n    \ndef list_of_powers_from_func_from_func(base, exp): \n    '''\n    Write a function to compute all powers of the base from 0 to the exponent.\n    '''\n    def powers(n):\n        return [n ** i for i in range(exp+1)]\n    return powers(base)\n    \ndef list_of_powers_from_list_from_func_from_func(base, exp): \n    '''\n    Write a function to compute all powers of the base from a list of exponents.\n    '''\n    def powers(n):\n        return [n ** i for i in exp]\n    return powers(base)\n    \ndef list_of_powers_of_list_from_func_from_func(base, exp): \n    '''\n    Write a function to compute all powers of the base from a list of exponents.\n    '''\n    def powers(n):\n        return [n ** i for i in exp]\n    return powers(base)\n    \ndef reverse_list(l): \n    '''\n    Write a function to reverse the given list.\n    '''\n    return list(reversed(l))\n    \ndef reverse_string(s): \n    '''\n    Write a function to reverse the given string.\n    '''\n    return s[::-1]\n    \ndef reverse_list_from_func(l): \n    '''\n    Write a function to reverse the given list.\n    '''\n    def reverse(l):\n        return list(reversed(l))\n    return reverse(l)\n    \ndef reverse_string_from_func(s): \n    '''\n    Write a function to reverse the given string.\n    '''\n    def reverse(s):\n        return s[::-1]\n    return reverse(s)\n    \ndef reverse_list_from_func_from_func(l): \n    '''\n    Write a function to reverse the given list.\n    '''\n    def reverse(l):\n        def r(l):\n            return list(reversed(l))\n        return r(l)\n    return reverse(l)\n    \ndef reverse_string_from_func_from_func(s): \n    '''\n    Write a function to reverse the given string.\n    '''\n    def reverse(s):\n        def r(s):\n            return s[::-1]\n        return r(s)\n    return reverse(s)\n    \ndef reverse_list_from_func_from_func_from_func(l): \n    '''\n    Write a function to reverse the given list.\n    '''\n    def reverse(l):\n        def r(l):\n            def rev(l):\n                return list(reversed(l))\n            return rev(l)\n        return r(l)\n    return reverse(l)\n    \ndef reverse_string_from_func_from_func_from_func(s): \n    '''\n    Write a function to reverse the given string.\n    '''\n    def reverse(s):\n        def r(s):\n            def rev(s):\n                return s[::-1]\n            return rev(s)\n        return r(s)\n    return reverse(s)\n    \ndef reverse_list_from_func_from_func_from_func_from_func(l): \n    '''\n    Write a function to reverse the given list.\n    '''\n    def reverse(l):\n        def r(l):\n            def rev(l):\n                def rev(l):\n                    return list(reversed(l))\n                return rev(l)\n            return r(l)\n        return r(l)\n    return reverse(l)\n    \ndef reverse_string_from_func_from_func_from_func_from_func(s): \n    '''\n    Write a function to reverse the given string.\n    '''\n    def reverse(s):\n        def r(s):\n            def rev(s):\n                def rev(s):\n                    return s[::-1]\n                return rev(s)\n            return r(s)\n        return r(s)\n    return reverse(s)\n    \ndef reverse_list_from_func_from_func_from_func_from_func_from_func(l): \n    '''\n    Write a function to reverse the given list.\n    '''\n    def reverse(l):\n        def r(l):\n            def rev(l):\n                def rev(l):\n                    def rev(l):\n                        return list(reversed(l))\n                    return rev(l)\n                return r(l)\n            return rev(l)\n        return r(l)\n    return reverse(l)\n    \ndef reverse_string_from_func_from_func_from_func_from_func_from_func(s): \n    '''\n    Write a function to reverse the given string.\n    '''\n    def reverse(s):\n        def r(s):\n            def rev(s):\n                def rev(s):\n                    def rev(s):\n                        return s[::-1]\n                    return rev(s)\n                return r(s)\n            return rev(s)\n        return r(s)\n    return reverse(s)\n    \ndef reverse_list_from_func_from_func_from_func_from_func_from_func_from_func(l): \n    '''\n    Write a function to reverse the given list.\n    '''\n    def reverse(l):\n        def r(l):\n            def rev(l):\n                def rev(l):\n                    def rev(l):\n                        def rev(l):\n                            return list(reversed(l))\n                        return rev(l)\n                    return rev(l)\n                return r(l)\n            return rev(l)\n        return r(l)\n    return reverse(l)\n    \ndef reverse_string_from_func_from_func_from_func_from_func_from_func_from_func_from_func(s): \n    '''\n    Write a function to reverse the given string.\n    '''\n    def reverse(s):\n        def r(s):\n            def rev(s):\n                def rev(s):\n                    def rev(s):\n                        def rev(s):\n                            return s[::-1]\n                        return rev(s)\n                    return rev(s)\n                return r(s",
        "num_ids": 72
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n)\n    return binary[2:]\n",
        "num_ids": 17
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    decimal = []\n    binary = []\n",
        "num_ids": 13
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = '{0:b}'.format(n)\n    if len(binary)%2!= 0:\n        binary = '0' + binary\n    return binary\n",
        "num_ids": 43
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #if negative, convert to positive\n    num = abs(num)\n    #convert to string\n    s = str(num)\n    #add zeroes to the front if the length of the number is odd\n    if len(s)%2 == 1:\n        s = '0'+s\n    #iterate through the number and see if we've found the next smallest palindrome\n    for i in range(len(s)):\n        #if we find a palindrome, increment it by one and return the next palindrome\n        if s[i:] == s[i:][::-1]:\n            s = s[:i]+str(int(s[i])+1)\n            break\n    #check if the number is even, and if so, increment the last digit\n    if len(s)%2 == 0:\n        s = s[:-1]+str(int(s[-1])+1)\n    return int(s)\n",
        "num_ids": 225
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    len_num = len(s)\n    if len_num % 2!= 0:\n        return int(s[:len_num//2] + s[::-1])\n    else:\n        return int(s[:len_num//2] + s[::-1][:-1])\n",
        "num_ids": 81
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    max_len = len(num_str)\n    mid_point = max_len // 2\n    if max_len % 2 == 1:\n        mid_point += 1\n    mid_chars = num_str[:mid_point]\n    mid_chars = list(reversed(mid_chars))\n    mid_chars = ''.join(mid_chars)\n    next_palindrome = num_str + mid_chars\n    return int(next_palindrome)\n",
        "num_ids": 130
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    while True:\n        new_num = int(num[::-1])+1\n        if str(new_num) == str(new_num)[::-1]:\n            return new_num\n        else:\n            num = str(new_num)\n",
        "num_ids": 71
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #Idea: Start with a string of the number and reverse it.\n    #    Return the number plus the reversed string\n    def num_to_str(num):\n        num_str = str(num)\n        num_str = num_str[::-1]\n        return int(num_str)\n",
        "num_ids": 74
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    original_num = num\n    num = original_num\n    num_list = []\n    while num > 0:\n        num_list.append(num%10)\n        num //= 10\n    num_list.reverse()\n    for i in range(len(num_list)):\n        if num_list[i]!= num_list[-1-i]:\n            if num_list[-1-i] == 0:\n                num_list[-1-i] = 1\n                num_list[i] -= 1\n            else:\n                num_list[-1-i] += 1\n                num_list[i] -= 1\n                break\n    num_list.reverse()\n    num_list = int(''.join(map(str, num_list)))\n    if num_list < original_num:\n        return num_list\n    else:\n        return num_list + 1\n",
        "num_ids": 225
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    s = str(num)\n    while True:\n        if s == s[::-1]:\n            return int(s)\n        else:\n            s = str(int(s)+1)\n            if int(s) >= 10**9:\n                return -1\n            \ndef next_largest_palindrome(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    s = str(num)\n    while True:\n        if s == s[::-1]:\n            return int(s)\n        else:\n            s = str(int(s)-1)\n            if int(s) <= 0:\n                return -1\n            \ndef is_palindrome(num):\n    '''\n    Write a function to determine whether a specified integer is a palindrome, returned as a boolean.\n    '''\n    \n    s = str(num)\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_permutation(num1, num2):\n    '''\n    Write a function to determine whether two specified integers are a permutation, returned as a boolean.\n    '''\n    \n    s1 = str(num1)\n    s2 = str(num2)\n    if len(s1)!= len(s2):\n        return False\n    d1 = {}\n    d2 = {}\n    for i in s1:\n        if i in d1:\n            d1[i] += 1\n        else:\n            d1[i] = 1\n    for i in s2:\n        if i in d2:\n            d2[i] += 1\n        else:\n            d2[i] = 1\n    for i in d2:\n        if i in d1:\n            if d1[i] == d2[i]:\n                continue\n            else:\n                return False\n        else:\n            return False\n    return True\n    \ndef reverse_num(num):\n    '''\n    Write a function to reverse a specified integer, returned as an integer.\n    '''\n    \n    s = str(num)\n    s = s[::-1]\n    return int(s)\n    \ndef base_conversion(num, base):\n    '''\n    Write a function to convert a specified integer from a given base to another base, returned as a string.\n    '''\n    \n    s = str(num)\n    d = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9}\n    b = base\n    s = list(s)\n    s = list(map(d.get,s))\n    base = list(map(d.get,list(str(b))))\n    if len(s)!= len(base):\n        while len(s) < len(base):\n            s.insert(0,0)\n    t = 0\n    for i in range(len(s)):\n        t += s[i]*b**(len(s)-1-i)\n    return t\n    \ndef long_division(num1, num2):\n    '''\n    Write a function to perform a division using long division, returning the quotient and remainder, returned as a tuple.\n    '''\n    \n    s1 = str(num1)\n    s2 = str(num2)\n    if s1 < s2:\n        return \"This function is only defined for integers greater than or equal to the divisor.\"\n    quotient = 0\n    r = num1\n    while r >= num2:\n        r = r - num2\n        quotient += 1\n    return (quotient,r)\n    \ndef long_division_recursive(num1, num2):\n    '''\n    Write a function to perform a division using long division, returning the quotient and remainder, returned as a tuple.\n    '''\n    \n    s1 = str(num1)\n    s2 = str(num2)\n    if s1 < s2:\n        return \"This function is only defined for integers greater than or equal to the divisor.\"\n    if num1 == 0:\n        return (0,0)\n    if num1 == num2:\n        return (1,0)\n    if num1 < num2:\n        return (0,num1)\n    else:\n        remainder = num1 % num2\n        if remainder == 0:\n            return (num1//num2,0)\n        else:\n            return long_division_recursive(num1-remainder,num2)\n        \ndef exponentiation(num1, num2):\n    '''\n    Write a function to calculate the specified integer raised to the specified power, returned as an integer.\n    '''\n    \n    s1 = str(num1)\n    s2 = str(num2)\n    if num1 == 0 and num2 == 0:\n        return 1\n    if num1 == 1 and num2 == 0:\n        return 1\n    if num1 == 1 and num2 == 1:\n        return num1\n    if num1 == 0:\n        return 0\n    else:\n        return num1*exponentiation(num1, num2-1)\n        \ndef exponentiation_recursive(num1, num2):\n    '''\n    Write a function to calculate the specified integer raised to the specified power, returned as an integer.\n    '''\n    \n    s1 = str(num1)\n    s2 = str(num2)\n    if num1 == 0 and num2 == 0:\n        return 1\n    if num1 == 1 and num2 == 0:\n        return 1\n    if num1 == 1 and num2 == 1:\n        return num1\n    if num1 == 0:\n        return 0\n    if num1 < num2:\n        return 0\n    else:\n        return num1*exponentiation_recursive(num1, num2-1)\n        \ndef fibonacci(num):\n    '''\n    Write a function to calculate the nth Fibonacci number, where n is a specified integer, returned as an integer.\n    '''\n    \n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return fibonacci(num-1) + fibonacci(num-2)\n        \ndef fibonacci_sequence(num):\n    '''\n    Write a function to return the nth Fibonacci number, where n is a specified integer, returned as an integer.\n    '''\n    \n    if num < 0:\n        return \"This function is only defined for integers greater than or equal to 0.\"\n    else:\n        return fibonacci(num)\n        \ndef fibonacci_sequence_recursive(num):\n    '''\n    Write a function to return the nth Fibonacci number, where n is a specified integer, returned as an integer.\n    '''\n    \n    if num < 0:\n        return \"This function is only defined for integers greater than or equal to 0.\"\n    elif num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return fibonacci_sequence_recursive(num-1) + fibonacci_sequence_recursive(num-2)\n        \ndef collatz_sequence(num):\n    '''\n    Write a function to return the Collatz sequence for the specified integer, returning a list.\n    '''\n    \n    if num <= 1:\n        return [num]\n    else:\n        if num%2 == 0:\n            return collatz_sequence(num/2) + [num]\n        else:\n            return collatz_sequence(3*num+1) + [num]\n            \ndef collatz_sequence_recursive(num):\n    '''\n    Write a function to return the Collatz sequence for the specified integer, returning a list.\n    '''\n    \n    if num <= 1:\n        return [num]\n    else:\n        if num%2 == 0:\n            return collatz_sequence_recursive(num/2) + [num]\n        else:\n            return collatz_sequence_recursive(3*num+1) + [num]\n            \ndef is_prime(num):\n    '''\n    Write a function to determine whether a specified integer is prime, returning a boolean.\n    ''",
        "num_ids": 22
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = num\n    while n < sys.maxsize:\n        n += 1\n        if str(n) == str(n)[::-1]:\n            return n\n",
        "num_ids": 42
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if not num:\n        return 0\n    if num < 10:\n        return int(str(num)[::-1])\n    if num < 100:\n        r = num % 10\n        if r < 8:\n            return int(str(num)[::-1]) + 10 - r\n        return int(str(num)[::-1]) + 10 - r + 1\n    \n    t = str(num)\n    r = num % 100\n    \n    l = len(t)\n    if r < 10:\n        return int(t[::-1]) + 100 - 10 + r\n    elif r < 100:\n        return int(t[::-1]) + 100 - r + 10\n    \n    if l > 2:\n        t = t[:l//2]\n    return int(t[::-1]) + 100 - int(t[::-1])\n    \n    \n",
        "num_ids": 211
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 9\n    n = 1\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n*10 + 1\n        n += 1\n",
        "num_ids": 52
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left = 0\n    right = len(arr) - 1\n    pivot = partition(arr, left, right)\n    while pivot!= k:\n        if pivot > k:\n            right = pivot - 1\n            pivot = partition(arr, left, right)\n        else:\n            left = pivot + 1\n            pivot = partition(arr, left, right)\n    return arr[pivot]\n",
        "num_ids": 97
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pivot = arr[0]\n    smaller = []\n    larger = []\n    for i in range(1, len(arr)):\n        if arr[i] < pivot:\n            smaller.append(arr[i])\n        else:\n            larger.append(arr[i])\n    if k <= len(smaller):\n        return kth_element(smaller, k)\n    elif k > len(smaller) + len(larger):\n        return kth_element(larger, k-len(smaller)-len(larger))\n    else:\n        return pivot\n",
        "num_ids": 144
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return sorted(arr)[k-1]\n",
        "num_ids": 13
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(left, right, pivot_index):\n        pivot = arr[pivot_index]\n        arr[right], arr[pivot_index] = arr[pivot_index], arr[right]\n        store_index = left\n        for i in range(left, right):\n            if arr[i] < pivot:\n                arr[store_index], arr[i] = arr[i], arr[store_index]\n                store_index += 1\n        arr[store_index], arr[right] = arr[right], arr[store_index]\n        return store_index\n",
        "num_ids": 139
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    mid_idx = n//2\n    if k == mid_idx + 1:\n        return arr[mid_idx]\n    if k < mid_idx + 1:\n        return kth_element(arr[:mid_idx], k)\n    return kth_element(arr[mid_idx:], k-mid_idx)\n",
        "num_ids": 109
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left = 0\n    right = len(arr) - 1\n",
        "num_ids": 17
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise Exception('Please enter a valid k')\n",
        "num_ids": 26
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # if the element is the first or the last, then return\n    if k == 1 or k == len(arr):\n        return arr[k-1]\n",
        "num_ids": 39
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return sorted(arr)[k - 1]\n",
        "num_ids": 13
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, c in enumerate(word):\n        if i == 0:\n            camel_case += c.upper()\n        else:\n            camel_case += c\n",
        "num_ids": 52
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('-', '_')\n    return word[0].upper() + word[1:]\n",
        "num_ids": 29
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # camel_case = ''\n    # for i, c in enumerate(word):\n    #     if i == 0:\n    #         camel_case += c.capitalize()\n    #     else:\n    #         camel_case += c\n    # return camel_case\n",
        "num_ids": 69
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(char.capitalize() if i!= 0 else char for i, char in enumerate(word))\n",
        "num_ids": 31
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title().replace('_', '')\n",
        "num_ids": 15
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n",
        "num_ids": 18
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake_case = ''.join(word.split('_'))\n    camel_case = snake_case[0].lower() + snake_case[1:]\n    return camel_case\n",
        "num_ids": 48
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = ''\n    for i in range(len(word)):\n        if i == 0:\n            res += word[i].upper()\n        elif word[i-1] == '_' and word[i]!= '_':\n            res += word[i].upper()\n        else:\n            res += word[i]\n    return res\n",
        "num_ids": 86
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() for w in word.split('_'))\n",
        "num_ids": 24
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split the input string into words\n    words = word.split('_')\n",
        "num_ids": 21
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    #print('n = ', n)\n    #print('m = ', m)\n    if n == m:\n        return 1\n    if m > n:\n        return 0\n    if m == 0:\n        return 0\n    if m == 1:\n        return 1\n    if m == 2:\n        if n == 2:\n            return 3\n        else:\n            return 2\n    #print('A', 'B')\n    return eulerian_num(n, m-1) + eulerian_num(n-1, m)\n",
        "num_ids": 130
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Insert your code here\n    # Fill in the the appropriate return values\n    # Consider the base cases\n    # The recurrence relation\n    if n == 1:\n        return 0\n    if m == 1:\n        return 0\n    if n == m:\n        return 1\n    if n == 0:\n        return 0\n    if m == 0:\n        return 0\n    # The function is a(n, m) = a(n-1, m) + a(n, m-1)\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n",
        "num_ids": 146
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        n, m = m, n\n    if n == m == 0:\n        return 1\n    elif n == 0 and m!= 0:\n        return 0\n    else:\n        return eulerian_num(n, m - 1) + m * eulerian_num(n - 1, m)\n",
        "num_ids": 82
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return n * (n + 1) // 2\n    elif m == 2:\n        return n * (n + 1) * (2 * n + 1) // 6\n    elif m == 3:\n        return n * (n + 1) * (2 * n + 1) * (3 * n + 1) // 24\n",
        "num_ids": 85
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*m - n - m + 1\n",
        "num_ids": 14
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    from collections import defaultdict\n    edge_list = defaultdict(list)\n    for i in range(n):\n        for j in range(m):\n            if (G[i][j] == 1):\n                edge_list[i].append(j)\n                #print(\"List of neighbours of\", i, \":\", edge_list[i])\n    degree_list = defaultdict(int)\n    for i in range(n):\n        if i not in edge_list:\n            edge_list[i] = []\n        degree_list[i] = len(edge_list[i])\n    print(\"Degree List: \", degree_list)\n    print(\"Edge List: \", edge_list)\n",
        "num_ids": 167
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n == 0 and m == 0):\n        return 1\n    elif (n == 1 and m == 1):\n        return 2\n    elif (n == 2 and m == 1):\n        return 4\n    elif (n == 2 and m == 2):\n        return 4\n    elif (n == 3 and m == 2):\n        return 9\n    elif (n == 3 and m == 3):\n        return 6\n    elif (n == 4 and m == 3):\n        return 10\n    elif (n == 4 and m == 4):\n        return 6\n    elif (n == 5 and m == 4):\n        return 10\n    elif (n == 5 and m == 5):\n        return 9\n    elif (n == 6 and m == 5):\n        return 16\n    elif (n == 6 and m == 6):\n        return 7\n    elif (n == 7 and m == 6):\n        return 20\n    elif (n == 7 and m == 7):\n        return 15\n    elif (n == 8 and m == 7):\n        return 28\n    elif (n == 8 and m == 8):\n        return 14\n    elif (n == 9 and m == 8):\n        return 36\n    elif (n == 9 and m == 9):\n        return 21\n    elif (n == 10 and m == 9):\n        return 48\n    elif (n == 10 and m == 10):\n        return 10\n    elif (n == 11 and m == 10):\n        return 72\n    elif (n == 11 and m == 11):\n        return 28\n    elif (n == 12 and m == 11):\n        return 75\n    elif (n == 12 and m == 12):\n        return 32\n    elif (n == 13 and m == 12):\n        return 100\n    elif (n == 13 and m == 13):\n        return 20\n    elif (n == 14 and m == 13):\n        return 147\n    elif (n == 14 and m == 14):\n        return 56\n    elif (n == 15 and m == 14):\n        return 224\n    elif (n == 15 and m == 15):\n        return 54\n    elif (n == 16 and m == 15):\n        return 1216\n    elif (n == 16 and m == 16):\n        return 56\n    elif (n == 17 and m == 16):\n        return 3840\n    elif (n == 17 and m == 17):\n        return 220\n    elif (n == 18 and m == 17):\n        return 8064\n    elif (n == 18 and m == 18):\n        return 64\n    elif (n == 19 and m == 18):\n        return 11840\n    elif (n == 19 and m == 19):\n        return 131\n    elif (n == 20 and m == 19):\n        return 48609\n    elif (n == 20 and m == 20):\n        return 8\n    elif (n == 21 and m == 20):\n        return 64128\n    elif (n == 21 and m == 21):\n        return 137\n    elif (n == 22 and m == 21):\n        return 104096\n    elif (n == 22 and m == 22):\n        return 320\n    elif (n == 23 and m == 22):\n        return 117911\n    elif (n == 23 and m == 23):\n        return 49\n    elif (n == 24 and m == 23):\n        return 141581\n    elif (n == 24 and m == 24):\n        return 42\n    elif (n == 25 and m == 24):\n        return 163584\n    elif (n == 25 and m == 25):\n        return 272\n    elif (n == 26 and m == 25):\n        return 217986\n    elif (n == 26 and m == 26):\n        return 54\n    elif (n == 27 and m == 26):\n        return 256818\n    elif (n == 27 and m == 27):\n        return 630\n    elif (n == 28 and m == 27):\n        return 322558\n    elif (n == 28 and m == 28):\n        return 828\n    elif (n == 29 and m == 28):\n        return 395768\n    elif (n == 29 and m == 29):\n        return 36\n    elif (n == 30 and m == 29):\n        return 406890\n    elif (n == 30 and m == 30):\n        return 120\n    elif (n == 31 and m == 30):\n        return 43792\n    elif (n == 31 and m == 31):\n        return 34\n    elif (n == 32 and m == 31):\n        return 55889\n    elif (n == 32 and m == 32):\n        return 112\n    elif (n == 33 and m == 32):\n        return 65400\n    elif (n == 33 and m == 33):\n        return 138\n    elif (n == 34 and m == 33):\n        return 71343\n    elif (n == 34 and m == 34):\n        return 140\n    elif (n == 35 and m == 34):\n        return 83734\n    elif (n == 35 and m == 35):\n        return 27\n    elif (n == 36 and m == 35):\n        return 9853\n    elif (n == 36 and m == 36):\n        return 20\n    elif (n == 37 and m == 36):\n        return 108756\n    elif (n == 37 and m == 37):\n        return 29\n    elif (n == 38 and m == 37):\n        return 119549\n    elif (n == 38 and m == 38):\n        return 16\n    elif (n == 39 and m == 38):\n        return 133550\n    elif (n == 39 and m == 39):\n        return 32\n    elif (n == 40 and m == 39):\n        return 147838\n    elif (n == 40 and m == 40):\n        return 24\n    elif (n == 41 and m == 40):\n        return 150616\n    elif (n == 41 and m == 41):\n        return 55\n    elif (n == 42 and m == 41):\n        return 166466\n    elif (n == 42 and m == 42):\n        return 14\n    elif (n == 43 and m == 42):\n        return 185626\n    elif (n == 43 and m == 43):\n        return 51\n    elif (n == 44 and m == 43):\n        return 182288\n    elif (n == 44 and m == 44):\n        return 70\n    elif (n == 45 and m == 44):\n        return 187088\n    elif (n == 45 and m == 45):\n        return 41\n    elif (n == 46 and m == 45):\n        return 195730\n    elif (n == 46 and m == 46):\n        return 76\n    elif (n == 47 and m == 46):\n        return 233502\n    elif (n == 47 and m == 47):\n        return 131\n    elif (n == 48 and m == 47):\n        return 238596\n    elif (n == 48 and m == 48):\n        return 22\n    elif (n == 49 and m == 48):\n        return 251614\n    elif (n == 49 and m == 49):\n        return 281\n    elif (n == 50 and m == 49):\n        return 275846\n    elif (n == 50 and m == 50):\n        return 251\n    elif (n == 51 and m == 50):\n        return 286962\n    elif (n == 51 and m == 51):\n        return 89\n    elif (n == 52 and m == 51):\n        return 291076\n    elif (n == 52 and m == 52):\n        return 270\n    elif (n == 53 and m == 52):\n        return 303098\n    elif (n == 53 and m == 53):\n        return 131\n    elif (n == 54 and m == 53):\n        return 313402\n    elif (n == 54 and m == 54):\n        return 176\n    elif (n == 55 and m == 54):\n        return 329554\n    elif (n == 55 and m == 55):\n        return 79\n    elif (n == 56 and m == 55):\n        return 338986\n    elif (n == 56 and m == 56):\n        return 134\n    elif (n == 57 and m == 56):\n        return 344118\n    elif (n == 57 and m == 57):\n        return 22\n    elif (n =",
        "num_ids": 2011
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    result = 0\n    if n == m:\n        result = 1\n    elif m % n == 0:\n        result = n\n    else:\n        result = eulerian_num(m % n, n)\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0 or m < 0:\n        return None\n    if n == 1 and m == 1:\n        return 1\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n",
        "num_ids": 60
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    assert n >= 1 and m >= 0 and n > m\n    return sum([1 for i in range(m) for j in range(i, n-m+i+1)])\n",
        "num_ids": 45
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for list_item in input_list:\n        list_item.sort()\n",
        "num_ids": 21
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for x in input_list:\n        x.sort()\n    return input_list\n",
        "num_ids": 23
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return list(map(sorted,input_list))\n",
        "num_ids": 16
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in input_list:\n        i.sort()\n    return input_list\n",
        "num_ids": 23
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sublist.sort()\n        sorted_list.append(sublist)\n    return sorted_list\n",
        "num_ids": 45
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "num_ids": 32
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create a new list to store the sublists\n    sorted_sublists = []\n    # Iterate over the input_list, slicing out each sublist\n    for sublist in input_list:\n        # Create a new list to store the sorted sublists\n        sorted_sublists.append(sorted(sublist))\n",
        "num_ids": 78
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # create a new list to store sorted sublists\n    sorted_lists = []\n    # loop through the list of lists of strings\n    for sublist in input_list:\n        # use the sort method to sort each sublist\n        sublist.sort()\n        # append the sorted sublist back to the new list\n        sorted_lists.append(sublist)\n    # return the new list of sorted sublists\n    return sorted_lists\n",
        "num_ids": 104
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # each sublist is sorted in alphabetical order.\n    # wrap each sublist in a list to enable sorting by.sort()\n    for lst in input_list:\n        lst.sort()\n    # sort the sorted lists by string length\n    input_list.sort(key=len)\n    # iterate through the sorted lists\n    for lst in input_list:\n        # join the sublists to one list,\n        # then join the sublists with commas (,).\n        # then join the sorted lists with commas (,)\n        print(','.join(lst))\n",
        "num_ids": 139
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # iterate over each sublist\n    for sublist in input_list:\n        # sort each sublist\n        sublist.sort()\n",
        "num_ids": 35
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n",
        "num_ids": 12
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    trueCount=0\n    for item in lst:\n        if isinstance(item,bool):\n            if item == True:\n                trueCount +=1\n    return trueCount\n",
        "num_ids": 44
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([item for item in lst if item])\n",
        "num_ids": 16
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x == True])\n",
        "num_ids": 18
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for val in lst:\n        if val:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\nprint(count([True, False, False, True, True]))\n",
        "num_ids": 47
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if i])\n",
        "num_ids": 16
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n",
        "num_ids": 13
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list + test_tup\n    return test_list\n",
        "num_ids": 22
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return_list = []\n    for tuple_num in range(len(test_tup)):\n        return_list.append(test_tup[tuple_num] + test_list[tuple_num])\n    return return_list\n",
        "num_ids": 60
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # TODO: Implement Function\n    test_tup += test_list\n    return test_tup\n",
        "num_ids": 27
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # TODO: Implement Function\n    test_list.append(test_tup)\n    return\n",
        "num_ids": 26
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list+list(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n    return test_tup\n",
        "num_ids": 22
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + test_list\n    return(test_tup)\n",
        "num_ids": 26
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for x in test_list:\n        test_tup.append(x)\n    return test_tup\n",
        "num_ids": 29
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return (test_list + test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Initialize empty list\n    sorted_list = []\n",
        "num_ids": 17
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    start_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            start_list.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            start_list.append(num2[j])\n            j += 1\n        elif num3[k] <= num1[i] and num3[k] <= num2[j]:\n            start_list.append(num3[k])\n            k += 1\n    return start_list\ndef merge_sorted_list_heap(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    start_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        min_num = min(num1[i],num2[j],num3[k])\n        if min_num == num1[i]:\n            i += 1\n        elif min_num == num2[j]:\n            j += 1\n        elif min_num == num3[k]:\n            k += 1\n        start_list.append(min_num)\n    return start_list\ndef merge_sorted_list_optimal(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    start_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] == num2[j] and num1[i] == num3[k]:\n            i += 1\n            j += 1\n            k += 1\n        elif num1[i] < num2[j]:\n            start_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i]:\n            start_list.append(num2[j])\n            j += 1\n        elif num3[k] < num1[i]:\n            start_list.append(num3[k])\n            k += 1\n    while i < len(num1):\n        start_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        start_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        start_list.append(num3[k])\n        k += 1\n    return start_list\ndef merge_sorted_list_reverse(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    start_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] == num2[j] and num1[i] == num3[k]:\n            i += 1\n            j += 1\n            k += 1\n        elif num1[i] < num2[j]:\n            start_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i]:\n            start_list.append(num2[j])\n            j += 1\n        elif num3[k] < num1[i]:\n            start_list.append(num3[k])\n            k += 1\n    while i < len(num1):\n        start_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        start_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        start_list.append(num3[k])\n        k += 1\n    return start_list\ndef insertion_sort(num_list):\n    '''\n    Write a function to sort a list of integers.\n    '''\n    sorted_list = []\n    for i in range(len(num_list)):\n        for j in range(i,0,-1):\n            if num_list[j] < num_list[j-1]:\n                sorted_list.append(num_list[j])\n                sorted_list.remove(num_list[j-1])\n                num_list[j] = num_list[j-1]\n                num_list[j-1] = sorted_list[-1]\n                sorted_list.remove(sorted_list[-1])\n            else:\n                sorted_list.append(num_list[j])\n                break\n    return sorted_list\ndef insertion_sort_heap(num_list):\n    '''\n    Write a function to sort a list of integers.\n    '''\n    sorted_list = []\n    for i in range(len(num_list)):\n        for j in range(i,0,-1):\n            if num_list[j] < num_list[j-1]:\n                sorted_list.append(num_list[j])\n                sorted_list.remove(num_list[j-1])\n                num_list[j] = num_list[j-1]\n                num_list[j-1] = sorted_list[-1]\n                sorted_list.remove(sorted_list[-1])\n            else:\n                sorted_list.append(num_list[j])\n                break\n    return sorted_list\ndef insertion_sort_reverse(num_list):\n    '''\n    Write a function to sort a list of integers.\n    '''\n    sorted_list = []\n    for i in range(len(num_list)):\n        for j in range(i,0,-1):\n            if num_list[j] < num_list[j-1]:\n                sorted_list.append(num_list[j])\n                sorted_list.remove(num_list[j-1])\n                num_list[j] = num_list[j-1]\n                num_list[j-1] = sorted_list[-1]\n                sorted_list.remove(sorted_list[-1])\n            else:\n                sorted_list.append(num_list[j])\n                break\n    return sorted_list\ndef merge_sort(num_list):\n    '''\n    Write a function to sort a list of integers.\n    '''\n    if len(num_list) < 2:\n        return num_list\n    mid = len(num_list)//2\n    return merge(merge_sort(num_list[:mid]),merge_sort(num_list[mid:]))\ndef merge_sort_heap(num_list):\n    '''\n    Write a function to sort a list of integers.\n    '''\n    if len(num_list) < 2:\n        return num_list\n    mid = len(num_list)//2\n    return merge_heap(merge_sort_heap(num_list[:mid]),merge_sort_heap(num_list[mid:]))\ndef merge_sort_reverse(num_list):\n    '''\n    Write a function to sort a list of integers.\n    '''\n    if len(num_list) < 2:\n        return num_list\n    mid = len(num_list)//2\n    return merge_reverse(merge_sort_reverse(num_list[:mid]),merge_sort_reverse(num_list[mid:]))\ndef selection_sort(num_list):\n    '''\n    Write a function to sort a list of integers.\n    '''\n    for i in range(len(num_list)):\n        min_num = num_list[i]\n        min_index = i\n        for j in range(i,len(num_list)):\n            if num_list[j] < min_num:\n                min_num = num_list[j]\n                min_inde",
        "num_ids": 82
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    num1.sort()\n    return num1\n",
        "num_ids": 36
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    a,b,c = [],[],[]\n    while(len(num1)>0 and len(num2)>0):\n        if num1[0] < num2[0]:\n            a.append(num1.pop(0))\n        else:\n            a.append(num2.pop(0))\n    while(len(num1)>0):\n        a.append(num1.pop(0))\n    while(len(num2)>0):\n        a.append(num2.pop(0))\n    while(len(num3)>0):\n        a.append(num3.pop(0))\n    return a\n",
        "num_ids": 157
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    output=[]\n    i=0\n    j=0\n    k=0\n    while(i<len(num1) and j<len(num2) and k<len(num3)):\n        if(num1[i]<=num2[j] and num1[i]<=num3[k]):\n            output.append(num1[i])\n            i+=1\n        elif(num2[j]<=num1[i] and num2[j]<=num3[k]):\n            output.append(num2[j])\n            j+=1\n        elif(num3[k]<=num1[i] and num3[k]<=num2[j]):\n            output.append(num3[k])\n            k+=1\n    while(i<len(num1)):\n        output.append(num1[i])\n        i+=1\n    while(j<len(num2)):\n        output.append(num2[j])\n        j+=1\n    while(k<len(num3)):\n        output.append(num3[k])\n        k+=1\n    return output\ndef merge_sorted_list_alt(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    output=[]\n    i=0\n    j=0\n    k=0\n    while(i<len(num1) and j<len(num2) and k<len(num3)):\n        if(num1[i]<=num2[j] and num1[i]<=num3[k]):\n            output.append(num1[i])\n            i+=1\n        elif(num2[j]<=num1[i] and num2[j]<=num3[k]):\n            output.append(num2[j])\n            j+=1\n        elif(num3[k]<=num1[i] and num3[k]<=num2[j]):\n            output.append(num3[k])\n            k+=1\n    while(i<len(num1)):\n        output.append(num1[i])\n        i+=1\n    while(j<len(num2)):\n        output.append(num2[j])\n        j+=1\n    while(k<len(num3)):\n        output.append(num3[k])\n        k+=1\n    return output\ndef merge_sorted_list_alt2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    output=[]\n    i=0\n    j=0\n    k=0\n    while(i<len(num1) and j<len(num2) and k<len(num3)):\n        if(num1[i]<=num2[j] and num1[i]<=num3[k]):\n            output.append(num1[i])\n            i+=1\n        elif(num2[j]<=num1[i] and num2[j]<=num3[k]):\n            output.append(num2[j])\n            j+=1\n        elif(num3[k]<=num1[i] and num3[k]<=num2[j]):\n            output.append(num3[k])\n            k+=1\n    while(i<len(num1)):\n        output.append(num1[i])\n        i+=1\n    while(j<len(num2)):\n        output.append(num2[j])\n        j+=1\n    while(k<len(num3)):\n        output.append(num3[k])\n        k+=1\n    return output\ndef min_heap_sort(num_list):\n    '''\n    Use a heap to sort a list of numbers.\n    '''\n    heapq.heapify(num_list)\n    output=[]\n    while(len(num_list)>0):\n        output.append(heapq.heappop(num_list))\n    return output\ndef min_heap_sort_alt(num_list):\n    '''\n    Use a heap to sort a list of numbers.\n    '''\n    output=[]\n    while(len(num_list)>0):\n        output.append(heapq.heappop(num_list))\n    return output\ndef bubble_sort(num_list):\n    '''\n    Use a bubble sort to sort a list of numbers.\n    '''\n    for i in range(len(num_list)):\n        for j in range(len(num_list)-i-1):\n            if(num_list[j]>num_list[j+1]):\n                num_list[j],num_list[j+1]=num_list[j+1],num_list[j]\n    return num_list\ndef bubble_sort_alt(num_list):\n    '''\n    Use a bubble sort to sort a list of numbers.\n    '''\n    for i in range(len(num_list)):\n        for j in range(len(num_list)-i-1):\n            if(num_list[j]>num_list[j+1]):\n                num_list[j],num_list[j+1]=num_list[j+1],num_list[j]\n    return num_list\ndef insertion_sort(num_list):\n    '''\n    Use an insertion sort to sort a list of numbers.\n    '''\n    for i in range(1,len(num_list)):\n        for j in range(i-1,-1,-1):\n            if(num_list[j]>num_list[i]):\n                num_list[j+1],num_list[i]=num_list[i],num_list[j+1]\n            else:\n                break\n    return num_list\ndef insertion_sort_alt(num_list):\n    '''\n    Use an insertion sort to sort a list of numbers.\n    '''\n    for i in range(1,len(num_list)):\n        for j in range(i):\n            if(num_list[i]<num_list[j]):\n                num_list[i],num_list[j]=num_list[j],num_list[i]\n    return num_list\ndef selection_sort(num_list):\n    '''\n    Use a selection sort to sort a list of numbers.\n    '''\n    for i in range(len(num_list)-1,0,-1):\n        max_index=0\n        for j in range(1,i+1):\n            if(num_list[j]>num_list[max_index]):\n                max_index=j\n        num_list[i],num_list[max_index]=num_list[max_index],num_list[i]\n    return num_list\ndef selection_sort_alt(num_list):\n    '''\n    Use a selection sort to sort a list of numbers.\n    '''\n    for i in range(len(num_list)-1,0,-1):\n        max_index=0\n        for j in range(1,i+1):\n            if(num_list[j]>num_list[max_index]):\n                max_index=j\n        num_list[i],num_list[max_index]=num_list[max_index],num_list[i]\n    return num_list\ndef quick_sort_rec(num_list,first_index,last_index):\n    '''\n    Use a quick sort to sort a list of numbers.\n    '''\n    if(first_index<last_index):\n        pivot_index=partition(num_list,first_index,last_index)\n        quick_sort_rec(num_list,first_index,pivot_index-1)\n        quick_sort_rec(num_list,pivot_index+1,last_index)\n    return num_list\ndef quick_sort(num_list):\n    '''\n    Use a quick sort to sort a list of numbers.\n    '''\n    first_index=0\n    last_index=len(num_list)-1\n    return quick_sort_rec(num_lis",
        "num_ids": 33
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # initialize empty list to store the sorted elements\n    combine_list = []\n    # make sure the number of elements in each list is the same\n    num1_count = len(num1)\n    num2_count = len(num2)\n    num3_count = len(num3)\n    if num1_count > num2_count and num1_count > num3_count:\n        greater_count = num1_count\n    elif num2_count > num1_count and num2_count > num3_count:\n        greater_count = num2_count\n    elif num3_count > num1_count and num3_count > num2_count:\n        greater_count = num3_count\n    else:\n        greater_count = min(num1_count,num2_count,num3_count)\n    # add the smaller number of elements to the list\n    for i in range(greater_count):\n        if num1_count > num2_count and num1_count > num3_count:\n            combine_list.append(num1.pop(0))\n        elif num2_count > num1_count and num2_count > num3_count:\n            combine_list.append(num2.pop(0))\n        elif num3_count > num1_count and num3_count > num2_count:\n            combine_list.append(num3.pop(0))\n    return combine_list\n",
        "num_ids": 353
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1==[] or num2==[] or num3==[]:\n        return num1+num2+num3\n    result = []\n    i=j=k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            result.append(num1[i])\n            i+=1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            result.append(num2[j])\n            j+=1\n        elif num3[k] < num2[j] and num3[k] < num1[i]:\n            result.append(num3[k])\n            k+=1\n    if i<len(num1):\n        result.extend(num1[i:])\n    if j<len(num2):\n        result.extend(num2[j:])\n    if k<len(num3):\n        result.extend(num3[k:])\n    return result\n",
        "num_ids": 272
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    n1,n2,n3 = len(num1),len(num2),len(num3)\n    i,j,k = 0,0,0\n    while i<n1 and j<n2 and k<n3:\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            sorted_list.append(num1[i])\n            i += 1\n        elif num2[j] < num3[k]:\n            sorted_list.append(num2[j])\n            j += 1\n        else:\n            sorted_list.append(num3[k])\n            k += 1\n    while i<n1:\n        sorted_list.append(num1[i])\n        i += 1\n    while j<n2:\n        sorted_list.append(num2[j])\n        j += 1\n    while k<n3:\n        sorted_list.append(num3[k])\n        k += 1\n    return sorted_list\n",
        "num_ids": 256
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    start = 0\n    end = 0\n    merged_list = []\n    while start < len(num1) and end < len(num2):\n        if num1[start] < num2[end]:\n            merged_list.append(num1[start])\n            start+=1\n        else:\n            merged_list.append(num2[end])\n            end+=1\n    while start < len(num1):\n        merged_list.append(num1[start])\n        start+=1\n    while end < len(num2):\n        merged_list.append(num2[end])\n        end+=1\n    while len(num3) > 0:\n        merged_list.append(num3[0])\n        num3.pop(0)\n    return merged_list\n",
        "num_ids": 192
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    result.extend(num1)\n    result.extend(num2)\n    result.extend(num3)\n    result.sort()\n    return result\n    \n",
        "num_ids": 49
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s.split('0')\n    count=0\n    for i in s:\n        if i[0]!='':\n            count+=len(i)\n        \n    return count\n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    s = s.split('0')\n    count=0\n    for i in s:\n        if i[0]!='':\n            count+=len(i)\n        \n    return count\n    \ndef max_Rotations(s): \n    '''\n    Write a python function to find the number of characters of string rotation when rotating a string the given number of times. \n    '''\n    s = s.split('0')\n    s = list(filter(None, s))\n    count=0\n    for i in s:\n        if i[0]!='':\n            count+=len(i)\n        \n    return count\n    \ndef unique(s): \n    '''\n    Write a python function to return if a string has all unique characters.\n    '''\n    return len(set(s)) == len(s)\n    \ndef non_decreasing(s): \n    '''\n    Write a python function to return if a string is non-decreasing.\n    '''\n    s = list(s)\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            return False\n    \n    return True\n    \ndef check_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically smallest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return min(non_dec_s)\n    \n    return \"\"\n    \ndef check_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically smallest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return min(non_dec_s)\n    \n    return \"\"\n    \ndef non_decreasing(s): \n    '''\n    Write a python function to return if a string is non-decreasing.\n    '''\n    s = list(s)\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            return False\n    \n    return True\n    \ndef non_decreasing(s): \n    '''\n    Write a python function to return if a string is non-decreasing.\n    '''\n    s = list(s)\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            return False\n    \n    return True\n    \ndef non_decreasing(s): \n    '''\n    Write a python function to return if a string is non-decreasing.\n    '''\n    s = list(s)\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            return False\n    \n    return True\n    \ndef longest_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically largest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return max(non_dec_s)\n    \n    return \"\"\n    \ndef longest_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically largest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return max(non_dec_s)\n    \n    return \"\"\n    \ndef longest_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically largest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return max(non_dec_s)\n    \n    return \"\"\n    \ndef longest_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically largest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return max(non_dec_s)\n    \n    return \"\"\n    \ndef longest_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically largest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return max(non_dec_s)\n    \n    return \"\"\n    \ndef longest_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically largest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return ma",
        "num_ids": 100
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return (sum([1 if s[i] == '0' else 0 for i in range(n)]) + sum([1 if s[i] == '1' else 0 for i in range(n)]))",
        "num_ids": 50
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += int(s[i])\n    return sum\n",
        "num_ids": 30
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        temp = s[i:] + s[:i]\n        if temp.count('1') % 2 == 1:\n            count += 1\n",
        "num_ids": 49
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n    return count_Odd(string_rotation(s,n))\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n    return count_Odd(string_rotation(s,n))\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n    return count_Odd(string_rotation(s,n))\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n    return count_Odd(string_rotation(s,n))\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n    return count_Odd(string_rotation(s,n))\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n    return count_Odd(string_rotation(s,n))\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n    return count_Odd(string_rotation(s,n))\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n    return count_Odd(string_rotation(s,n))\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n    return count_Odd(string_rotation(s,n))\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n    return count_Odd(string_rotation(s,n))\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n    return count_Odd(string_rotation(s,n))\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n    return count_Odd(string_rotation(s,n))\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n    return count_Odd(string_rotation(s,n))\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n    return count_Odd(string_rotation(s,n))\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n    return count_Odd(string_rotation(s,n))\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def count_Odd(s):\n        c = 0\n        for i in s:\n            if i == '0':\n                c += 1\n        return c \n    def string_rotation(s,n):\n        return s[n:] + s[:n]\n",
        "num_ids": 67
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s==\"0\" and n==0:\n        return 0\n    if n%2==0:\n        return 0\n    else:\n        return len(s)\n",
        "num_ids": 43
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Code here\n    def binary_to_decimal(binary):\n        decimal, i, n = 0, 0, 0\n        while(binary!= 0):\n            dec = binary % 10\n            decimal = decimal + dec * pow(2, i)\n            binary = binary//10\n            i += 1\n        return decimal\n",
        "num_ids": 80
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s[::-1]\n    print(s)\n    return n in s\n",
        "num_ids": 24
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if int(s[i])%2!= 0:\n            count += 1\n    return(count)\n",
        "num_ids": 45
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    k=0\n    for i in range(len(s)):\n        if((i+n)>len(s)):\n            break\n        else:\n            if((s[i]=='0' and s[i+n]=='1') or (s[i]=='1' and s[i+n]=='0')):\n                k=k+1\n    print(k)\n",
        "num_ids": 98
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in nestedlist:\n        if isinstance(i,list):\n            result = result + common_in_nested_lists(i)\n        else:\n            if not i in result:\n                result.append(i)\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def find_common(list1, list2):\n        intersection = []\n        for element in list1:\n            if element in list2:\n                intersection.append(element)\n        return intersection\n",
        "num_ids": 50
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # nestedlist = [[1, 2, 3, 4], [3, 4, 5, 6], [5, 6, 7, 8]]\n    # nestedlist = [[1, 2, 3, 4], [3, 4, 5, 6], [5, 6, 7, 8], [1, 2, 3, 4]]\n    # nestedlist = [[1, 2, 3, 4], [3, 4, 5, 6], [5, 6, 7, 8]]\n    # nestedlist = [[1, 2, 3, 4], [3, 4, 5, 6], [5, 6, 7, 8], [1, 2, 3, 4]]\n    # nestedlist = [[1, 2, 3, 4], [3, 4, 5, 6], [5, 6, 7, 8]]\n    # nestedlist = [[1, 2, 3, 4], [3, 4, 5, 6], [5, 6, 7, 8], [1, 2, 3, 4]]\n",
        "num_ids": 227
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    elements = [nestedlist[0]]\n    for sublist in nestedlist[1:]:\n        for element in elements[:]:\n            if element not in sublist:\n                elements.remove(element)\n            if element in sublist:\n                elements.append(element)\n    return elements\n",
        "num_ids": 74
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l = []\n    def check_common(l1,l2):\n        if type(l1)==list and type(l2)==list:\n            if l1[0] == l2[0]:\n                return True\n            else:\n                return False\n        else:\n            return False\n    for index in range(len(nestedlist)):\n        l = []\n        for i in range(len(nestedlist)):\n            if check_common(nestedlist[index],nestedlist[i]):\n                l.append(nestedlist[index])\n        for index2 in range(len(l)):\n            for i in range(len(nestedlist)):\n                if l[index2]!= nestedlist[i] and check_common(l[index2],nestedlist[i]):\n                    l.append(nestedlist[i])\n        print(l)\n",
        "num_ids": 215
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_nested_list = []\n    nested_list = []\n    for inner_list in nestedlist:\n        for element in inner_list:\n            if element not in nested_list:\n                nested_list.append(element)\n    return nested_list\n",
        "num_ids": 66
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # print(nestedlist)\n    # print(\"--------------------------------------\")\n    if nestedlist == []:\n        return []\n    \n    temp_list = []\n    for elem in nestedlist:\n        if type(elem) == list:\n            temp_list = temp_list + common_in_nested_lists(elem)\n        elif elem not in temp_list:\n            temp_list.append(elem)\n        \n    return temp_list\n",
        "num_ids": 113
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    new_list = []\n    common = []\n    for lists in nestedlist:\n        for element in lists:\n            if element not in new_list:\n                new_list.append(element)\n            else:\n                common.append(element)\n    return common\n",
        "num_ids": 65
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if nestedlist == []:\n        return []\n    else:\n        return common_in_nested_lists(nestedlist[0]) + common_in_nested_lists(nestedlist[1:])\n",
        "num_ids": 53
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    comon = set(nestedlist[0])\n    for i in nestedlist[1:]:\n        comon = comon.intersection(set(i))\n    return comon\n",
        "num_ids": 46
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        x = int(text)\n        return isinstance(x, int)\n    except ValueError:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        try:\n            int(text)\n            return True\n        except ValueError:\n            return False\n",
        "num_ids": 43
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)==0:\n        print(False)\n    else:\n        for i in range(len(list1)):\n            if list1[i]:\n                print(False)\n                break\n            else:\n                print(True)\n                break\nlist1=[]\nn=int(input(\"Enter the number of elements: \"))\nfor i in range(n):\n    list1.append({})\nempty_dit(list1)\n",
        "num_ids": 110
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i):\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)==0:\n        return 1\n    else:\n        for i in list1:\n            if len(i)!=0:\n                return 0\n        return 1\n",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag=1\n    if len(list1)==0:\n        flag=1\n    else:\n        flag=0\n    return flag\n",
        "num_ids": 36
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            result.append(False)\n        else:\n            result.append(True)\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = True\n    for dict1 in list1:\n        if bool(dict1) == True:\n            flag = False\n            break\n    return flag\n",
        "num_ids": 39
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1[0] == {}:\n        empty_dit(list1[1:])\n    else:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = 1\n    for i in list1:\n        if len(i)!= 0:\n            flag = 0\n    return flag\n",
        "num_ids": 34
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = 1\n    for x in list1:\n        if isinstance(x,dict):\n            if not x:\n                flag = 0\n                break\n    if flag == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        i = 0\n        while i < len(nums)-1:\n            if nums[i+1] == 0:\n                nums[i] = nums[i] * 10\n                nums[i+1] = nums[i+1] * 10\n                nums = nums[:i+1] + nums[i+2:]\n                i = i - 1\n            else:\n                i = i + 1\n        return sum(nums)\n",
        "num_ids": 136
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(x) for x in nums]))\n",
        "num_ids": 21
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0] * (10**len(str(nums[1]))) + nums[1]\n",
        "num_ids": 53
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = [str(i) for i in nums]\n    res = ''.join(num)\n    return int(res)\n    \ndef int_to_tuple(num):\n    '''\n    Write a function to convert a given integer into a tuple of positive integers.\n    '''\n    l = []\n    while num > 0:\n        l.append(num % 10)\n        num = num // 10\n    return tuple(l[::-1])\n        ",
        "num_ids": 43
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_tuple = []\n    for num in nums:\n        num_tuple.append(str(num))\n    return int(''.join(num_tuple))\n",
        "num_ids": 44
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    while len(nums)!= 1:\n        nums = sum(nums)\n    return nums[0]\n",
        "num_ids": 41
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(num) for num in nums]))\n",
        "num_ids": 21
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in nums))\n",
        "num_ids": 20
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for i in test_list:\n        try:\n            float_list.append(float(i))\n        except ValueError:\n            pass\n    return float_list\n",
        "num_ids": 49
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for elem in test_list:\n        try:\n            result_list.append(float(elem))\n        except ValueError:\n            pass\n    return result_list\n",
        "num_ids": 51
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index in range(len(test_list)):\n        test_list[index] = list(map(float, test_list[index]))\n    return test_list\n",
        "num_ids": 44
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(x) for x in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(x) for x in element] for element in test_list]\n",
        "num_ids": 22
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(x) for x in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [float(i) if i.isdigit() else i for i in test_list]\n    return test_list\n",
        "num_ids": 35
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [list_to_float(sublist) if sublist is not None else None for sublist in test_list]\n",
        "num_ids": 31
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [list(map(float, sublist)) for sublist in test_list]\n",
        "num_ids": 23
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split(' '))\n",
        "num_ids": 13
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.replace(' ', ',')\n    string = string.replace('\\n', '')\n    return string.split(',')\n",
        "num_ids": 36
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string:\n        return string.split(' ')\n    else:\n        return []\n",
        "num_ids": 24
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split(' ')\n    return list\n",
        "num_ids": 16
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # list_string = []\n    # for i in string.split(' '):\n    #     list_string.append(i)\n    # return list_string\n    # return list(string.split(' '))\n",
        "num_ids": 53
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    sorted_arr = sorted(arr)\n    for i in sorted_arr:\n        if sorted_arr.count(i)==1:\n            return i\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return -1\n        else:\n            return arr[0]\n    if arr[0]!= arr[1]:\n        return arr[0]\n    mid = int(len(arr) / 2)\n    if arr[mid] == arr[mid + 1]:\n        return search(arr[mid:])\n    else:\n        return search(arr[:mid+1])\n",
        "num_ids": 130
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    current_element = arr[0]\n    current_index = 0\n",
        "num_ids": 19
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return\n    \n    unique = 0\n    for i in range(len(arr)):\n        if arr[unique]!= arr[i]:\n            unique = unique + 1\n            arr[unique] = arr[i]\n    return arr[unique]\n",
        "num_ids": 68
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    i = 0\n    j = n-1\n    while i < j:\n        mid = i + (j-i)//2\n        if arr[mid] == arr[mid+1]:\n            if mid%2==0:\n                i = mid+2\n            else:\n                j = mid-1\n        elif arr[mid] == arr[mid-1]:\n            if mid%2==1:\n                i = mid+1\n            else:\n                j = mid-2\n        else:\n            return arr[mid]\n    return arr[j]\n",
        "num_ids": 143
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    index = 0\n    while index < len(arr)-1:\n        if arr[index] == arr[index+1]:\n            index+=2\n        else:\n            return arr[index]\n    return -1\n",
        "num_ids": 59
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    mid = int(len(arr)/2)\n    if mid < arr[mid]:\n        #left half\n        return search(arr[:mid])\n    else:\n        #right half\n        return search(arr[mid+1:])\n",
        "num_ids": 90
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # set to keep track of the elements we've seen so far\n    seen = set()\n    # set to hold the only element\n    only_element = None\n    # iterate through the array\n    for element in arr:\n        # if the element has not been seen so far\n        if element not in seen:\n            # add it to the set of seen elements\n            seen.add(element)\n        else:\n            # if we have seen this element already, then it's the only element and we can stop\n            only_element = element\n            break\n    # return the only element\n    return only_element\n",
        "num_ids": 141
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # O(n)\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            return max(arr)\n    else:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n",
        "num_ids": 102
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    min_val = min(arr)\n    max_val = max(arr)\n",
        "num_ids": 22
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            list1[i], list1[j] = list1[j], list1[i]\n            list1.sort()\n            list_prod = list1[-1] * list1[-2]\n            list1[i], list1[j] = list1[j], list1[i]\n            if list_prod > max_prod:\n                max_prod = list_prod\n    return max_prod\n",
        "num_ids": 134
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 1\n    for x in list1:\n        for y in list1:\n            if x == y:\n                continue\n            prod = x[0] * y[0] * y[1] * x[1]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n",
        "num_ids": 85
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if (abs(list1[i][0]*list1[j][1])>max_prod):\n                max_prod = abs(list1[i][0]*list1[j][1])\n    print(max_prod)\nlist1 = [(3, 4), (1, 2), (-2, 0), (0, 4), (0, -1)]\nmax_product_tuple(list1)\n",
        "num_ids": 141
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x: x[0])\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(list1[i])\n        elif list1[i][0] == list1[i-1][0]:\n            list2.append(list1[i])\n        elif list1[i][0] > list1[i-1][0]:\n            list2.append(list1[i])\n        elif list1[i][0] < list1[i-1][0]:\n            list2.append(list1[i-1])\n            list2.append(list1[i])\n    print(list2)\n    list3 = []\n    for i in range(len(list2)-1):\n        list3.append(list2[i][1]*list2[i+1][1])\n    print(list3)\n    print(max(list3))\n    return max(list3)\n",
        "num_ids": 244
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # iterate through list\n    for i in range(len(list1)):\n        # find pair with largest product\n        for j in range(i+1,len(list1)):\n            if list1[i][0] * list1[j][1] > list1[i][1] * list1[j][0]:\n                list1[i],list1[j] = list1[j],list1[i]\n    \n    # return the maximum product tuple\n    return list1[0]\n",
        "num_ids": 124
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product_tuple = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1]\n            if max_product_tuple < prod:\n                max_product_tuple = prod\n    return max_product_tuple\n",
        "num_ids": 109
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    m = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            m.append(list1[i]*list1[j])\n    return max(m)\n",
        "num_ids": 61
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    import numpy as np\n    arr = np.array(list1)\n    res = np.linalg.norm(arr, axis=1)\n    print(res)\n",
        "num_ids": 44
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = -1\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max:\n                max = abs(list1[i][0] * list1[j][1])\n    return max\n",
        "num_ids": 88
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort()\n    list1 = list(dict.fromkeys(list1))\n    for i in range(0,len(list1)-1,2):\n        list2 = [list1[i],list1[i+1]]\n        list2.sort()\n        if (list2[0]*list2[1]) > (list2[1]*list2[2]):\n            result = list2[0]*list2[1]\n        else:\n            result = list2[1]*list2[2]\n    print(result)\n",
        "num_ids": 136
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    nums = [i for i in range(2,limit+1)]\n    dic = {}\n    sum = 0\n    for i in nums:\n        n = dic.get(i,None)\n        if n:\n            dic[n] = sum + i\n            sum += i\n        else:\n            dic[i] = i\n    return sum\n",
        "num_ids": 90
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if i == sum_divisors(sum_divisors(i)) and i!= sum_divisors(i):\n            print(f'{i} + {sum_divisors(i)} = {sum_divisors(i) + i}')\n            sum += i + sum_divisors(i)\n    return sum\n",
        "num_ids": 100
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def divisors(n):\n        '''\n        Return a list of divisors of a number.\n        '''\n        divisors = []\n        for i in range(1, n//2+1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n",
        "num_ids": 49
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            sum_amicable += i\n    return sum_amicable\n",
        "num_ids": 46
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = set(range(1, limit+1))\n    amicable_numbers = []\n    for number in numbers:\n        if not number == sum(divisors(number)[:-1]):\n            continue\n        other_number = sum(divisors(number)[:-1])\n        if number < other_number < limit:\n            amicable_numbers.append(number)\n            amicable_numbers.append(other_number)\n    return sum(amicable_numbers)\n",
        "num_ids": 119
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers_dict = {}\n    for number in range(1, limit):\n        number_sum = sum_of_divisors(number)\n        if number_sum == number:\n            continue\n        if number_sum <= limit:\n            numbers_dict[number] = number_sum\n        else:\n            break\n",
        "num_ids": 78
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # print('=====================')\n    # print(f'{limit}')\n    a = b = 0\n    for i in range(limit):\n        # print(i)\n        a = sum_of_divisors(i)\n        # print(f'{a=}')\n        if a > i:\n            b = sum_of_divisors(a)\n            if b == i and a!= i:\n                print(f'{i} + {a} = {b}')\n                print(f'{i} + {a} = {sum_of_divisors(i)}')\n                print(f'{i} + {a} = {sum_of_divisors(a)}')\n                print(f'{a} + {a} = {sum_of_divisors(a)}')\n                a = b = 0\n                # print(f'{i=}')\n                # print(f'{a=}')\n                # print(f'{b=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f'{a=}')\n                # print(f",
        "num_ids": 2012
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_divisors(n):\n        result = 0\n        for i in range(1, n):\n            if n % i == 0:\n                result += i\n        return result\n    amicable_numbers = set()\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        divisors_sum = sum_divisors(i)\n        if divisors_sum!= sum_divisors(divisors_sum):\n            continue\n        amicable_numbers.add(i)\n        amicable_numbers.add(divisors_sum)\n    return sum(amicable_numbers)\n",
        "num_ids": 162
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for number in range(1, limit+1):\n        sum_1 = get_sum_of_proper_divisors(number)\n        sum_2 = get_sum_of_proper_divisors(sum_1)\n        if number == sum_2 and number!= sum_1:\n            amicable_numbers.append(number)\n            amicable_numbers.append(sum_1)\n",
        "num_ids": 110
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # todo: this is so slow\n    def sum_amicable_numbers(limit):\n        numbers = [number for number in range(1, limit + 1)]\n        sums = set()\n        for number in numbers:\n            if number in sums:\n                continue\n            if number == sum_factors(sum_factors(number)) and number!= sum_factors(number):\n                sums.add(number)\n                sums.add(sum_factors(number))\n        return sum(sums)\n    return sum_amicable_numbers(limit)\n",
        "num_ids": 139
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return(complex(a).angle(complex(b)))\n",
        "num_ids": 16
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #x = a + b*1j\n    x = complex(a,b)\n    z = cmath.phase(x)\n    return z\n",
        "num_ids": 38
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n",
        "num_ids": 16
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n    #cmath.phase(complex(a,b))\n    #cmath.phase()\n    #cmath.phase()\n    #return cmath.phase()\n    #return cmath.phase()\n    \na,b = input().split()\n",
        "num_ids": 75
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #print(a,b)\n    z = complex(a,b)\n    print(cmath.phase(z))\n    return cmath.phase(z)\n",
        "num_ids": 42
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.polar(a)[1]\n",
        "num_ids": 15
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print((cmath.phase(a)*180)/3.14)\n    print((cmath.phase(b)*180)/3.14)\n",
        "num_ids": 36
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    r = abs(a)\n    t = cmath.phase(a)\n    return t\n",
        "num_ids": 25
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n",
        "num_ids": 17
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return (angle)\n",
        "num_ids": 24
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0 = 0\n    count1 = 0\n    maxdiff = 0\n    for i in string:\n        if i == '1':\n            count1+=1\n        else:\n            count0+=1\n        if abs(count0-count1) > maxdiff:\n            maxdiff = abs(count0-count1)\n    return maxdiff\n",
        "num_ids": 84
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    s = string\n    s_len = len(s) \n    max_diff = 0\n    \n    for i in range(s_len): \n        count0 = 0\n        count1 = 0\n        for j in range(i, s_len): \n            if (s[j] == '0'): \n                count0 += 1\n            else: \n                count1 += 1\n            if (count0 - count1 > max_diff): \n                max_diff = count0 - count1\n                \n    return max_diff\n    \n    # One line Solution\n    # return max(map(lambda i: s.count('0') - s.count('1'), range(len(s))))\n    ",
        "num_ids": 171
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    string_list = [char for char in string]\n    max_diff = 0\n    for i in range(len(string_list)):\n        if string_list[i] == \"0\":\n            string_list[i] = \"1\"\n        else:\n            string_list[i] = \"0\"\n        temp_list = string_list[:]\n        for j in range(i,len(string_list)):\n            temp_list[j] = \"0\"\n        diff = 0\n        for char in temp_list:\n            diff += int(char)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 160
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # for i in range(len(string)):\n    #     if string[i]=='0':\n    #         count0+=1\n    #     else:\n    #         count1+=1\n    count0=0\n    count1=0\n    for i in string:\n        if i=='1':\n            count0+=1\n        else:\n            count1+=1\n    return max(count0,count1)\n",
        "num_ids": 104
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max(map(lambda x: len([y for y in x if y == '1']) - len([y for y in x if y == '0']),string))\n",
        "num_ids": 43
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Method 1 (using a list comprehension)\n    result = [len([1 for i in sub_string if i == '0']) for sub_string in string.split('1')]\n    return max(result)\n",
        "num_ids": 53
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    string = ''.join(sorted(string))\n    list_of_strings = list(string)\n    max = 0\n    for i in list_of_strings:\n        if i == '0':\n            max -= 1\n        else:\n            max += 1\n    return max\n",
        "num_ids": 69
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0, count1 = 0, 0\n    prev = ''\n    result = 0\n    for i in string:\n        if prev == '0':\n            if i == '0':\n                count0 += 1\n            else:\n                count1 += 1\n        else:\n            if i == '0':\n                count1 += 1\n            else:\n                count0 += 1\n        result = max(result, abs(count0 - count1))\n        prev = i\n    return result\n",
        "num_ids": 115
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in string:\n        if i == '1':\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 0\n    return max_count\n",
        "num_ids": 65
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n        else:\n            count -= 1\n        max = max(count, max)\n    return max\n",
        "num_ids": 63
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return int(gcd(a,b))\n",
        "num_ids": 14
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = []\n    for i in range(1, a):\n        if a%i == 0 and b%i == 0:\n            c.append(i)\n    return sum(c)\n",
        "num_ids": 48
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x = min(a,b)\n    y = max(a,b)\n    t = x\n    sum = 1\n",
        "num_ids": 32
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a_set = set(reduce(list.__add__,([i,a//i] for i in range(1,a) if a%i == 0)))\n    b_set = set(reduce(list.__add__,([i,b//i] for i in range(1,b) if b%i == 0)))\n    return len(a_set.intersection(b_set))\n",
        "num_ids": 98
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a+b\n",
        "num_ids": 8
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(x,y): \n        return x if y == 0 else gcd(y,x%y) \n    return gcd(a,b)\n",
        "num_ids": 42
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return sum(a,b-1)\n    \ndef factors(n):\n    '''\n    Write a python function to calculate all factors of a given number n.\n    '''\n    l=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            l.append(i)\n    return l\n",
        "num_ids": 41
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return (math.gcd(a,b))\n",
        "num_ids": 15
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #First check for common factors in both numbers to avoid counting them twice\n    i = 1\n    while a!= 0 and b!= 0:\n        if a % i == 0 and b % i == 0:\n            a = a / i\n            b = b / i\n        else:\n            i = i + 1\n    return a + b\n",
        "num_ids": 82
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    list1=[]\n    for i in range(2,a):\n        if a%i==0:\n            list1.append(i)\n    for j in range(2,b):\n        if b%j==0:\n            list1.append(j)\n    print(list1)\n    print(len(list1))\n",
        "num_ids": 82
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n",
        "num_ids": 13
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str if len(w) > n]\n",
        "num_ids": 19
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n",
        "num_ids": 22
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    #split the words in the str\n    str_split = str.split()\n    #iterate through each word in the list\n    for word in str_split:\n        #if the word length is greater than n, print it out\n        if len(word) > n:\n            print(word)\n",
        "num_ids": 72
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    output = []\n    for i in words:\n        if len(i) > n:\n            output.append(i)\n    return output\n",
        "num_ids": 46
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [i for i in str if len(i) > n]\n",
        "num_ids": 19
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(\" \")\n    print(words)\n    words = [x for x in words if len(x) > n]\n    return words\n",
        "num_ids": 40
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long = []\n    for i in str.split():\n        if len(i) > n:\n            long.append(i)\n    return long\n",
        "num_ids": 38
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_list = str.split()\n    long_words = []\n    for word in word_list:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 54
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n",
        "num_ids": 48
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    for word in words:\n        if len(word) > n:\n            print(word)\n    return\n",
        "num_ids": 38
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #check if sum of each column = sum of each row\n    #check if sum of each diagonal = sum of the sum of each column\n    sum_each_col = 0\n    sum_each_row = 0\n    sum_diag = 0\n    \n    for col in range(len(my_matrix)):\n        sum_each_col += my_matrix[col][col]\n",
        "num_ids": 93
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_sum = sum(my_matrix[0])\n    # sum of column\n    for i in range(len(my_matrix)):\n        col_sum = 0\n        for j in range(len(my_matrix)):\n            col_sum += my_matrix[j][i]\n        if col_sum!= magic_sum:\n            return False\n    # sum of diagonal\n    for i in range(len(my_matrix)):\n        diag_sum = 0\n        for j in range(len(my_matrix)):\n            if i == j:\n                diag_sum += my_matrix[i][j]\n        if diag_sum!= magic_sum:\n            return False\n    # sum of reverse diagonal\n    for i in range(len(my_matrix)):\n        rev_diag_sum = 0\n        for j in range(len(my_matrix)):\n            if i + j == (len(my_matrix) - 1):\n                rev_diag_sum += my_matrix[i][j]\n        if rev_diag_sum!= magic_sum:\n            return False\n    return True\n",
        "num_ids": 281
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_sums = []\n    col_sums = []\n    diagonal_sums = []\n    for i in range(len(my_matrix)):\n        row_sum = 0\n        for j in range(len(my_matrix[i])):\n            row_sum += my_matrix[i][j]\n        row_sums.append(row_sum)\n    for j in range(len(my_matrix[0])):\n        col_sum = 0\n        for i in range(len(my_matrix)):\n            col_sum += my_matrix[i][j]\n        col_sums.append(col_sum)\n    for i in range(len(my_matrix)):\n        diagonal_sum = 0\n        if i == 0:\n            diagonal_sum += my_matrix[i][i]\n            diagonal_sum += my_matrix[i][len(my_matrix) - 1 - i]\n        else:\n            diagonal_sum += my_matrix[i][i - 1]\n            diagonal_sum += my_matrix[i][len(my_matrix) - 1 - i]\n        diagonal_sums.append(diagonal_sum)\n    row_sums.sort()\n    col_sums.sort()\n    diagonal_sums.sort()\n    # print(row_sums)\n    # print(col_sums)\n    # print(diagonal_sums)\n    if len(set(row_sums))!= 1 or len(set(col_sums))!= 1 or len(set(diagonal_sums))!= 1:\n        return False\n    # print(row_sums)\n    # print(col_sums)\n    # print(diagonal_sums)\n    return True\n",
        "num_ids": 437
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # if the sum of the two side is not equal to the sum of the top side or bottom side or the diagonal\n    # the matrix is not a magic square\n    \n    # matrix must be of dimension n x n where n is odd\n    \n    # print(my_matrix)\n    \n    # create 2 variables to store the top row and the last column\n    top_row = my_matrix[0]\n    bottom_row = my_matrix[-1]\n    \n    # print(top_row)\n    # print(bottom_row)\n    \n    # find the sum of the top row\n    top_sum = 0\n    for i in top_row:\n        top_sum += i\n    \n    # print(top_sum)\n    \n    # find the sum of the last column\n    last_col_sum = 0\n    for i in range(0, len(my_matrix)):\n        last_col_sum += my_matrix[i][-1]\n    \n    # print(last_col_sum)\n    \n    # find the sum of the diagonal\n    diag_sum = 0\n    for i in range(0, len(my_matrix)):\n        diag_sum += my_matrix[i][i]\n    \n    # print(diag_sum)\n    \n    # print(top_sum)\n    # print(last_col_sum)\n    # print(diag_sum)\n    \n    # if not (top_sum == bottom_row[0] and bottom_row[-1] == last_col_sum and diag_sum == top_sum):\n    if not (top_sum == bottom_row[0] and last_col_sum == bottom_row[-1] and diag_sum == top_sum):\n        return False\n    \n    # find the sum of the diagonal\n    diag_sum = 0\n    for i in range(0, len(my_matrix)):\n        diag_sum += my_matrix[i][-i - 1]\n    \n    # print(diag_sum)\n    \n    # if not (top_sum == bottom_row[0] and bottom_row[-1] == last_col_sum and diag_sum == top_sum):\n    if not (top_sum == bottom_row[0] and last_col_sum == bottom_row[-1] and diag_sum == top_sum):\n        return False\n    \n    return True\n",
        "num_ids": 587
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_square_test_1 = True\n",
        "num_ids": 13
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= 3:\n        return False\n    # Check the rows\n    for row in my_matrix:\n        if sum(row)!= 15:\n            return False\n    # Check the columns\n    for col in range(len(my_matrix[0])):\n        total = 0\n        for row in my_matrix:\n            total += row[col]\n        if total!= 15:\n            return False\n    # Check the diagonals\n    diag_total_1 = 0\n    for idx in range(len(my_matrix[0])):\n        diag_total_1 += my_matrix[idx][idx]\n    diag_total_2 = 0\n    for idx in range(len(my_matrix)):\n        diag_total_2 += my_matrix[idx][len(my_matrix) - 1 - idx]\n    if diag_total_1!= 15 or diag_total_2!= 15:\n        return False\n    return True\n",
        "num_ids": 250
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    m = len(my_matrix)\n    n = len(my_matrix[0])\n    sum_row = [0] * m\n    sum_col = [0] * n\n    for i in range(m):\n        for j in range(n):\n            sum_row[i] += my_matrix[i][j]\n            sum_col[j] += my_matrix[i][j]\n    if sum_row == [m*(m**2+1)/2] * m and sum_col == [n*(n**2+1)/2] * n:\n        return True\n    return False\n",
        "num_ids": 151
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= 3:\n        return False\n    if len(my_matrix[0])!= 3:\n        return False\n    #return True\n    #sum_list = [sum(my_matrix[0]),sum(my_matrix[1]),sum(my_matrix[2])]\n    sum_list = [my_matrix[0][0] + my_matrix[1][0] + my_matrix[2][0],my_matrix[0][1] + my_matrix[1][1] + my_matrix[2][1],my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][2]]\n    for i in range(3):\n        sum_list.append(my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2])\n    if sum_list[0]!= sum(sum_list[1:4]):\n        return False\n    for i in range(3):\n        sum_list.append(my_matrix[0][i] + my_matrix[1][i] + my_matrix[2][i])\n    if sum_list[4]!= sum(sum_list[5:8]):\n        return False\n    for i in range(3):\n        sum_list.append(my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2])\n    return sum_list[8] == sum_list[0]\n",
        "num_ids": 380
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sum_d = 0\n    sum_r = 0\n    sum_s = 0\n    for i in range(len(my_matrix)):\n        sum_d += my_matrix[i][0]\n    for i in range(len(my_matrix)):\n        sum_r += my_matrix[0][i]\n    for i in range(len(my_matrix)):\n        sum_s += my_matrix[i][len(my_matrix)-1]\n    sum_l = 0\n    sum_u = 0\n    for i in range(len(my_matrix)):\n        sum_l += my_matrix[i][len(my_matrix)-1]\n    for i in range(len(my_matrix)):\n        sum_u += my_matrix[len(my_matrix)-1][i]\n    if (sum_d==sum_r and sum_d==sum_s and sum_d==sum_l and sum_d==sum_u):\n        return True\n    else:\n        return False",
        "num_ids": 255
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return True\n",
        "num_ids": 6
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a frequency dictionary\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n",
        "num_ids": 40
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #We use a defaultdict to store the frequencies of each item in the list\n    #It will return a key error if the item is not in the list\n    frequencies = defaultdict(int)\n",
        "num_ids": 48
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(int)\n    for num in nums:\n        dict[num] += 1\n    max_key = max(dict, key = dict.get)\n    return max_key\n",
        "num_ids": 49
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = {}\n    for num in nums:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    max_count = 0\n    for num, count in d.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    return max_num\n",
        "num_ids": 89
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_nums = defaultdict(int)\n    for n in nums:\n        dict_nums[n] += 1\n    return max(dict_nums, key = lambda x: dict_nums[x])\n",
        "num_ids": 55
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    output = {}\n    for x in nums:\n        if x in output:\n            output[x] += 1\n        else:\n            output[x] = 1\n    max_val = max(output.values())\n    result = []\n    for key,value in output.items():\n        if value == max_val:\n            result.append(key)\n    return result\n",
        "num_ids": 91
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(int)\n    for num in nums:\n        dict[num] += 1\n    return max(dict, key=dict.get)\n",
        "num_ids": 40
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_item = None\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n        if max_count < count_dict[num]:\n            max_count = count_dict[num]\n            max_item = num\n    return max_item\n",
        "num_ids": 83
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Creating the dictionary\n    dict_ = defaultdict(int)\n    for i in nums:\n        dict_[i] += 1\n    max_key = list(dict_.keys())[0]\n    for key in dict_.keys():\n        if dict_[key] > dict_[max_key]:\n            max_key = key\n    return max_key\n",
        "num_ids": 88
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    # Declare a dict to hold item and frequency of the item\n    count_dict = defaultdict(int)\n",
        "num_ids": 30
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    vowel = \"\"\n    str2 = \"\"\n    for char in str1:\n        if char in vowels:\n            vowel = vowel + char\n        else:\n            str2 = str2 + char\n    return str2 + vowel[::-1]\n",
        "num_ids": 76
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowel_list = [c for c in str1 if c in vowels]\n    vowel_list.reverse()\n    return ''.join(vowel_list)\n",
        "num_ids": 60
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowels = set(vowels)\n    s = set(str1)\n    #print(vowels)\n    #print(s)\n    result = []\n    for i in s:\n        if i in vowels:\n            result.append(i)\n    result = ''.join(result)\n    print(result)\n",
        "num_ids": 97
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1_list = list(str1)\n    vowel_list = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(str1_list)):\n        if str1_list[i].lower() in vowel_list:\n            str1_list[i] = str1_list[i].lower()\n",
        "num_ids": 88
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = set(\"aeiouAEIOU\")\n    vowel_str = \"\"\n    for i in str1:\n        if i in vowel:\n            vowel_str += i\n    print(vowel_str[::-1])\n",
        "num_ids": 64
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    str1 = str1.lower()\n    vowel_list = []\n    for char in str1:\n        if char in vowels:\n            vowel_list.append(char)\n    print(vowel_list)\n    vowel_list.reverse()\n    print(vowel_list)\n    reverse_vowel_list = []\n    for char in str1:\n        if char in vowels:\n            reverse_vowel_list.append(vowel_list[0])\n            vowel_list.pop(0)\n        else:\n            reverse_vowel_list.append(char)\n    return ''.join(reverse_vowel_list)\n",
        "num_ids": 198
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    vowel_list = []\n    for i in str1:\n        if i.lower() in vowels:\n            vowel_list.append(i)\n    vowel_list.reverse()\n    vowel_list = \"\".join(vowel_list)\n    return vowel_list\n",
        "num_ids": 87
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str2 = ''\n    for ch in str1:\n        if ch in vowels:\n            str2 = str2 + ch\n    return str2[::-1]\n",
        "num_ids": 57
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    vowel_indexes = []\n    for index, char in enumerate(str1):\n        if char in vowels:\n            vowel_indexes.append(index)\n    str2 = list(str1)\n    for index in vowel_indexes:\n        str2[index] = str1[index]\n    for i in range(len(str2)):\n        if str2[i] in vowels:\n            str2[i] = str1[i]\n    str2 = \"\".join(str2)\n    return str2\n",
        "num_ids": 170
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowels_list = list(filter(lambda x: x in vowels, str1))\n    vowels_list.reverse()\n    result = [i if i not in vowels else vowels_list.pop() for i in str1]\n    result = \"\".join(result)\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    print(str(tup1))\n",
        "num_ids": 12
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string1 = ''\n    for i in range(len(tup1)):\n        tup_string1 += str(tup1[i])\n        tup_string1 += ','\n    tup_string1 = tup_string1[:-1]\n    return tup_string1\n",
        "num_ids": 76
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str = \"\"\n    for i in range(len(tup1)):\n        if i == len(tup1)-1:\n            str += tup1[i]\n        else:\n            str += tup1[i] + \" \"\n    return str\n",
        "num_ids": 65
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Initialize an empty string\n    string = \"\"\n    # For each element in the tuple\n    for i in tup1:\n        # Append the element to the string\n        string += str(i)\n        # If it is not the last element\n        if i!= tup1[-1]:\n            # Add a comma after it\n            string += \",\"\n    # Return the string\n    return string\n",
        "num_ids": 98
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 = str1 + str(i) + ','\n    return str1\n",
        "num_ids": 37
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    list1 = list(tup1)\n    return ''.join(list1)\n    \ndef get_tup_list(string1, tup1):\n    '''\n    Write a function to split a string on any character other than a whitespace.\n    '''\n    list1 = []\n    for i in string1:\n        if i!='':\n            list1.append(i)\n    tup1 = tuple(list1)\n    return tup1\n    \ndef convert_string_to_tup(string1):\n    '''\n    Write a function to convert a string to a tuple.\n    '''\n    tup1 = tuple(string1)\n    return tup1\n",
        "num_ids": 19
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1[0]) +'' + str(tup1[1])\n",
        "num_ids": 24
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(tup1)\n",
        "num_ids": 14
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_num = 0\n    for num in nums:\n        if num < 0:\n            negative_num += num\n    return negative_num\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        result = sum([num for num in nums if num < 0])\n        return result\n",
        "num_ids": 42
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    nums_sum = 0\n    for num in nums:\n        if num < 0:\n            nums_sum += num\n    return nums_sum\n",
        "num_ids": 40
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    if not nums:\n        return None\n        \n    sum_negatives = 0\n    for num in nums:\n        if num < 0:\n            sum_negatives += num\n    \n    return sum_negatives\n",
        "num_ids": 57
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n    \ndef sum_negativenum_rec(nums, i=0):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if i == len(nums):\n        return 0\n    if nums[i] < 0:\n        return nums[i] + sum_negativenum_rec(nums, i+1)\n    else:\n        return sum_negativenum_rec(nums, i+1)\n",
        "num_ids": 75
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return sum([num for num in nums if num < 0])\n",
        "num_ids": 34
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    return 1 + 6 * hexagonal_num(n - 1)\n",
        "num_ids": 29
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def hexagonal_number(n): \n        '''\n        Return nth hexagonal number\n        '''\n        return n * (2 * n - 1) \n    def hexagonal_number_less_than(n, nth): \n        '''\n        Return nth hexagonal number less than nth\n        '''\n        return (n * (2 * n - 1)) - (nth - 1) \n    def hexagonal_number_greater_than(n, nth): \n        '''\n        Return nth hexagonal number greater than nth\n        '''\n        return (n * (2 * n - 1)) + (nth - 1) \n    def hexagonal_number_less_than_greater_than(n, nth1, nth2): \n        '''\n        Return nth hexagonal number greater than nth1 and less than nth2\n        '''\n        return (n * (2 * n - 1)) - (nth2 - 1) - (nth1 - 1) \n    def hexagonal_number_greater_than_less_than(n, nth1, nth2): \n        '''\n        Return nth hexagonal number less than nth1 and greater than nth2\n        '''\n        return (n * (2 * n - 1)) + (nth1 - 1) + (nth2 - 1) \n    def hexagonal_number_between(n, nth1, nth2): \n        '''\n        Return nth hexagonal number between nth1 and nth2\n        '''\n        return (n * (2 * n - 1)) + (nth1 - 1) + (nth2 - nth1 - 1) \n    def hexagonal_number_between_less_than(n, nth1, nth2): \n        '''\n        Return nth hexagonal number less than between nth1 and nth2\n        '''\n        return (n * (2 * n - 1)) - (nth2 - nth1 - 1) \n    def hexagonal_number_between_greater_than(n, nth1, nth2): \n        '''\n        Return nth hexagonal number greater than between nth1 and nth2\n        '''\n        return (n * (2 * n - 1)) + (nth1 - 1) + (nth2 - nth1 - 1) \n    # check for other hexagonal numbers that are less than nth\n    if n < 1: \n        return \"Invalid Input!\"\n    elif n == 1: \n        return 0\n    elif nth == 2: \n        return 2\n    elif nth == 1: \n        return 1\n    elif hexagonal_number_greater_than(n, nth) == n: \n        return hexagonal_number_greater_than(n, nth)\n    elif hexagonal_number_greater_than_less_than(n, nth, nth + 1) == n: \n        return hexagonal_number_greater_than_less_than(n, nth, nth + 1)\n    elif hexagonal_number_greater_than_less_than(n, nth, nth - 1) == n: \n        return hexagonal_number_greater_than_less_than(n, nth, nth - 1)\n    elif hexagonal_number_less_than_greater_than(n, nth, nth + 1) == n: \n        return hexagonal_number_less_than_greater_than(n, nth, nth + 1)\n    elif hexagonal_number_less_than_greater_than(n, nth, nth - 1) == n: \n        return hexagonal_number_less_than_greater_than(n, nth, nth - 1)\n    elif hexagonal_number_between(n, nth, nth + 1) == n: \n        return hexagonal_number_between(n, nth, nth + 1)\n    elif hexagonal_number_between_less_than(n, nth, nth + 1) == n: \n        return hexagonal_number_between_less_than(n, nth, nth + 1)\n    elif hexagonal_number_between_greater_than(n, nth, nth + 1) == n: \n        return hexagonal_number_between_greater_than(n, nth, nth + 1)\n    elif hexagonal_number_between(n, nth, nth - 1) == n: \n        return hexagonal_number_between(n, nth, nth - 1)\n    elif hexagonal_number_between_less_than(n, nth, nth - 1) == n: \n        return hexagonal_number_between_less_than(n, nth, nth - 1)\n    elif hexagonal_number_between_greater_than(n, nth, nth - 1) == n: \n        return hexagonal_number_between_greater_than(n, nth, nth - 1)\n    # check for other hexagonal numbers that are between nth1 and nth2\n    elif hexagonal_number_greater_than(n, nth1) == nth1: \n        return hexagonal_number_greater_than(n, nth1)\n    elif hexagonal_number_greater_than_less_than(n, nth1, nth1 + 1) == nth1: \n        return hexagonal_number_greater_than_less_than(n, nth1, nth1 + 1)\n    elif hexagonal_number_greater_than_less_than(n, nth1, nth1 - 1) == nth1: \n        return hexagonal_number_greater_than_less_than(n, nth1, nth1 - 1)\n    elif hexagonal_number_less_than_greater_than(n, nth1, nth1 + 1) == nth1: \n        return hexagonal_number_less_than_greater_than(n, nth1, nth1 + 1)\n    elif hexagonal_number_less_than_greater_than(n, nth1, nth1 - 1) == nth1: \n        return hexagonal_number_less_than_greater_than(n, nth1, nth1 - 1)\n    elif hexagonal_number_between(n, nth1, nth1 + 1) == nth1: \n        return hexagonal_number_between(n, nth1, nth1 + 1)\n    elif hexagonal_number_between_less_than(n, nth1, nth1 + 1) == nth1: \n        return hexagonal_number_between_less_than(n, nth1, nth1 + 1)\n    elif hexagonal_number_between_greater_than(n, nth1, nth1 + 1) == nth1: \n        return hexagonal_number_between_greater_than(n, nth1, nth1 + 1)\n    elif hexagonal_number_between(n, nth1, nth1 - 1) == nth1: \n        return hexagonal_number_between(n, nth1, nth1 - 1)\n    elif hexagonal_number_between_less_than(n, nth1, nth1 - 1) == nth1: \n        return hexagonal_number_between_less_than(n, nth1, nth1 - 1)\n    elif hexagonal_number_between_greater_than(n, nth1, nth1 - 1) == nth1: \n        return hexagonal_number_between_greater_than(n, nth1, nth1 - 1)\n    # check for other hexagonal numbers that are between nth2 and nth3\n    elif hexagonal_number_greater_than(n, nth2) == nth2: \n        return hexagonal_number_greater_than(n, nth2)\n    elif hexagonal_number_greater_than_less_than(n, nth2, nth2 + 1) == nth2: \n        return hexagonal_number_greater_than_less_than(n, nth2, nth",
        "num_ids": 1480
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    print(\"The {} hexagonal number is {}\".format(n, int(1/2*n**2*(2*n-1)))\n    \n    \ndef sum_digits(n):\n    '''\n    Write a function to sum all the digits of a given number.\n    '''\n    # your code here\n    # print(sum([int(i) for i in str(n)]))\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n",
        "num_ids": 54
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num_hexa = 1\n    count = 1\n    while count < n:\n        num_hexa += 6*count\n        count += 1\n    return num_hexa\n    \ndef hexagonal_num_2(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))\n    \nprint(hexagonal_num(1))\nprint(hexagonal_num(5))\nprint(hexagonal_num(6))\nprint(hexagonal_num(7))\nprint(hexagonal_num(8))\nprint(hexagonal_num(9))\nprint(hexagonal_num(10))\n",
        "num_ids": 87
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    #return((-1 + (1+8*n)**0.5)/2) \n    return n*(2*n-1) \n",
        "num_ids": 38
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))\n",
        "num_ids": 15
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            sum = sum + 1\n    ratio = float(sum/len(nums))\n    print(\"The ratio of zeroes and non-zeroes is: {}\".format(ratio))\n",
        "num_ids": 76
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nums.append(0)\n    zero_count = 0\n    zero_index = 0\n    non_zero_count = 0\n    non_zero_index = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n            zero_index = i\n        else:\n            non_zero_count += 1\n            non_zero_index = i\n    return zero_count/(zero_count+non_zero_count)\n",
        "num_ids": 120
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for i in nums:\n        if i == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return (zeroes, non_zeroes)\n",
        "num_ids": 61
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return len(list(filter(lambda x: x==0, nums))) / len(nums)\n",
        "num_ids": 27
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # declare variables to store the num of zeros and non-zeros\n    z_count = 0\n    nz_count = 0\n",
        "num_ids": 33
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    total = 0\n    for i in range(n):\n        if nums[i] == 0:\n            total += 1\n    return total/n\n",
        "num_ids": 47
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    for i in nums:\n        if i == 0:\n            num_zeroes += 1\n    return num_zeroes/len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    total_zeros = 0\n    total_non_zeros = 0\n    for num in nums:\n        if num == 0:\n            total_zeros += 1\n        else:\n            total_non_zeros += 1\n    return total_zeros / total_non_zeros\n",
        "num_ids": 71
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # the array of non-zeroes and the number of zeroes\n    nz = 0\n    nz_count = 0\n",
        "num_ids": 31
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_nonzeroes = 0\n",
        "num_ids": 19
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n > 0): \n        if (n % 2 == 0): \n            print(n)\n            n = n / 2; \n        else: \n            break\n    return n == 1\nprint(is_Sum_Of_Powers_Of_Two(8))\n",
        "num_ids": 69
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    i = 0\n    while (2**i <= n): \n        sum += 2**i\n        i += 1\n        if sum == n:\n            return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    while (n!= 0): \n        sum = sum + (n & 1) \n        n = n >> 1\n    return (sum == 1) \nn = int(input(\"Enter the number: \"))\nif (is_Sum_Of_Powers_Of_Two(n)): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n",
        "num_ids": 96
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    \n    def is_power_of_two(n):\n        return (n and (not(n & (n - 1))))\n",
        "num_ids": 35
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0: \n        return False\n    if n == 0: \n        return True\n    while n % 2 == 0: \n        n = n / 2\n    return n == 1\n",
        "num_ids": 49
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n < 0): \n        return False\n    while(n): \n        if(n % 2 == 0): \n            n = n / 2\n        else: \n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    t=0\n    while(n):\n        if (n & 1):\n            t += 1\n        n >>= 1\n    return t==1\n",
        "num_ids": 38
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    powers_of_two = [2**i for i in range(31)]\n    for power in powers_of_two:\n        if n == sum([2**i for i in range(n) if i%power == 0]):\n            return True\n    return False\n    \ndef is_Sum_Of_Powers_Of_Two_v2(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    powers_of_two = [2**i for i in range(31)]\n    for power in powers_of_two:\n        if n == sum([2**i for i in range(31) if i%power == 0]):\n            return True\n    return False\n",
        "num_ids": 76
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #Base Case - Number 0\n    if n == 0: \n        return False\n    # Base Case - Number 1\n    if n == 1: \n        return True\n    # If the number is even then it can be expressed as a sum of powers of two. \n    if n % 2 == 0: \n        return is_Sum_Of_Powers_Of_Two(n//2)\n    # If the number is odd, it can be expressed as a sum of powers of two only if one of the terms is 2.\n    else: \n        return False\n    \ndef is_Sum_Of_Powers_Of_Two_v2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #Base Case - Number 0\n    if n == 0: \n        return False\n    # Base Case - Number 1\n    if n == 1: \n        return True\n    # If the number is even then it can be expressed as a sum of powers of two. \n    if n % 2 == 0: \n        return is_Sum_Of_Powers_Of_Two_v2(n//2)\n    else: \n        return False\n",
        "num_ids": 106
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Base cases \n    if (n <= 0): \n        return False\n    if (n == 1): \n        return True\n    if (n == 2): \n        return True\n    if (n > 2): \n        while(n): \n            if (n % 2 == 0): \n                n = n/2\n            else: \n                break\n        if (n == 1): \n            return True\n        else: \n            return False\n",
        "num_ids": 111
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    c = pi * r * 2\n    return c\n",
        "num_ids": 21
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * r * pi\n    return c\n",
        "num_ids": 15
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    c = 2 * math.pi * r\n    return c\n",
        "num_ids": 21
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * 3.14 * r\n    return c\n",
        "num_ids": 17
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    temp_list = []\n    for i in test_list:\n        for j in i:\n            temp_list.append(j)\n    return temp_list\n",
        "num_ids": 41
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j]\n    return test_list\n",
        "num_ids": 57
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for i in test_list:\n        for j in i:\n            result.add(j)\n    return list(result)\n",
        "num_ids": 39
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for item in test_list:\n        if len(item) == 1:\n            singly_list.append(item[0])\n        else:\n            return False\n    return singly_list\n",
        "num_ids": 57
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for y in test_list for x in y]\n",
        "num_ids": 18
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #sol 1\n    flat = []\n    for i in test_list:\n        if type(i) is list:\n            flat += extract_singly(i)\n        else:\n            flat.append(i)\n    return flat\n    #sol 2\n    return [i for j in test_list for i in (j if type(j) is list else [j])]\n    #sol 3\n    return list(chain(*test_list))\n    #sol 4\n    return list(itertools.chain(*test_list))\n    #sol 5\n    flat = []\n    for i in test_list:\n        flat += i if type(i) is list else [i]\n    return flat\n    #sol 6\n    return [i for j in test_list for i in (j if type(j) is list else [j])]\n    #sol 7\n    return list(itertools.chain(*test_list))\n",
        "num_ids": 219
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(itertools.chain(*test_list))\n",
        "num_ids": 17
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [test_list[i][0] for i in range(len(test_list))]\n",
        "num_ids": 26
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #print(nums)\n    swapped = True\n    length = len(nums)\n    i = 0\n    while(swapped == True and i < (length-1)):\n        swapped = False\n        for j in range(length-1):\n            if(nums[j] > nums[j+1]):\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swapped = True\n        length = length - 1\n        #print(nums)\n        i = i + 1\n",
        "num_ids": 137
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    for size in reversed(range(1, len(nums))):\n        for i in range(0, len(nums)-size):\n            if nums[i] > nums[i+size]:\n                swap(nums, i, i+size)\n    return nums\n",
        "num_ids": 86
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n",
        "num_ids": 34
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return\n    current_length = len(nums)\n    while current_length > 1:\n        i = 1\n        max_index = 0\n        while i < current_length:\n            if nums[i] > nums[max_index]:\n                max_index = i\n            i += 1\n        if max_index == 0:\n            max_index = current_length - 1\n        #swap\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        current_length -= 1\n        nums[:max_index+1] = sorted(nums[:max_index+1])\n        # print(nums)\n",
        "num_ids": 177
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    '''\n    I am going to use a Pivot, and I have to find the best pivot, but I have no idea how to do it.\n    '''\n    # base case\n    if len(nums) <= 1:\n        return\n",
        "num_ids": 21
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)//2):\n        flip(nums, i)\n    for j in range(len(nums)-1, 0, -1):\n        flip(nums, j)\n    return nums\n",
        "num_ids": 61
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(lst, i):\n        '''\n        Flip the list lst from i to the end of lst.\n        '''\n        lst[:i+1] = reversed(lst[:i+1])\n        return lst\n",
        "num_ids": 28
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # number of operations = length of the list - 1 (floor)\n    # max number of operations = (len(list) - 1) * 2\n    # ex. 7\n    #    pancake_sort(7)\n    #    [1, 2, 3, 4, 5, 6, 7]\n    #    [1, 5, 2, 4, 3, 6, 7]\n    #    [1, 2, 5, 3, 4, 6, 7]\n    #    [1, 2, 3, 4, 5, 6, 7]\n    #    [1, 2, 3, 4, 5, 6, 7]\n    #    [1, 2, 3, 4, 5, 6, 7]\n    #    [1, 2, 3, 4, 5, 6, 7]\n    #    [1, 2, 3, 4, 5, 6, 7]\n",
        "num_ids": 206
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for n in range(len(nums) // 2):\n        flip(nums, n)\n    for n in range(len(nums) - 1, 0, -1):\n        flip(nums, n)\n    return nums\n",
        "num_ids": 62
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        cur_max = max(nums[:i])\n        cur_index = nums.index(cur_max)\n        if cur_max!= i:\n            nums = nums[:cur_index + 1][::-1] + nums[cur_index + 1:]\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
        "num_ids": 113
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_pair=0\n    for item in range(len(list1)):\n        if list1[item]==list2[item] and list2[item]==list3[item]:\n            count_pair+=1\n    return count_pair\n",
        "num_ids": 61
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            result += 1\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count+=1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    n=0\n    for i in range(len(list1)):\n        if(list1[i]==list2[i]==list3[i]):\n            n+=1\n    return n\n",
        "num_ids": 51
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!=len(list2) or len(list1)!=len(list3):\n        return print('Error: Please check the inputs.')\n    else:\n        count = 0\n        for x in range(len(list1)):\n            if list1[x]==list2[x]==list3[x]:\n                count += 1\n    return print('Number of same pair items in three lists: ',count)\n",
        "num_ids": 105
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #print(list1,list2,list3)\n    same_item=0\n    same_item_list=[]\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            same_item+=1\n            same_item_list.append(i+1)\n    if same_item>0:\n        return same_item,same_item_list\n    else:\n        return False\n",
        "num_ids": 121
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_pairs = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            same_pairs += 1\n    return same_pairs\n",
        "num_ids": 58
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            num+=1\n    return num\n",
        "num_ids": 51
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = list(Input)\n    count = 0\n    for i in Input:\n        if isinstance(i,list):\n            count+=1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = (1, [2, 3, 4], 3, 4, [3, 4, 5], 1, [1, 2, 3], 2, 2, [1, 3, 4])\n    \n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\nprint(find_lists(Input))\n",
        "num_ids": 89
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n",
        "num_ids": 9
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for i in Input:\n        if type(i) == list:\n            list_count += 1\n    return list_count\n",
        "num_ids": 39
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if not isinstance(Input, tuple): \n        raise TypeError(\"Only tuple is accepted as input\")\n    \n    count = 0\n    for x in Input:\n        if isinstance(x, tuple):\n            count += 1\n            \n    return count\n    \ndef is_list(Input):\n    '''\n    Write a function that returns True if the given input is a list, otherwise it returns False.\n    '''\n    if not isinstance(Input, list): \n        raise TypeError(\"Only list is accepted as input\")\n    \n    return False if len(Input) == 0 else True\n",
        "num_ids": 42
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # The following function is the one we developed\n    def find_lists(Input): \n        temp = []\n        for elem in Input:\n            if type(elem) == list:\n                temp.append(elem)\n        return len(temp)\n        \n    # A second solution is \n    return sum([1 for elem in Input if isinstance(elem,list)])\n",
        "num_ids": 94
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for i in Input:\n        if type(i) is list:\n            count+=1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if (isinstance(Input[i], list)):\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input) == tuple:\n        L = []\n        for item in Input:\n            if type(item) == list:\n                L.append(item)\n        return L\n    else:\n        raise TypeError\n",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    arr.sort()\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if(diff > max_diff):\n            max_diff = diff\n    return max_diff\n",
        "num_ids": 66
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Find the difference between the largest and the smallest element\n    largest_element = -1\n    for element in arr:\n        if largest_element < element:\n            largest_element = element\n",
        "num_ids": 46
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return (max(arr) - min(arr))\nprint(\"Input array:\")\nn=int(input())\narr=list(int(i) for i in input().strip().split(' '))[:n]\nprint(max_Abs_Diff(arr)",
        "num_ids": 63
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    arr.sort()\n    max = abs(arr[0]-arr[1])\n    for i in range(len(arr)-1):\n        temp = abs(arr[i]-arr[i+1])\n        if(temp > max):\n            max = temp\n    return max\n",
        "num_ids": 70
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if(diff>max_diff):\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 74
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(max(arr) - min(arr), abs(max(arr) - min(arr))) \n",
        "num_ids": 28
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # difference = 0\n    # for i in range(0,len(arr)-1):\n    #     for j in range(i+1,len(arr)):\n    #         if(abs(arr[i]-arr[j])>difference):\n    #             difference = abs(arr[i]-arr[j])\n    # return difference\n    return max(abs(arr[i]-arr[j]) for i in range(0,len(arr)-1) for j in range(i+1,len(arr)))\n",
        "num_ids": 125
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(arr) - min(arr)\n    \n",
        "num_ids": 16
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort() \n    return max(arr[i+1] - arr[i] for i in range(len(arr)-1)) \n  \ndef reverse_array(arr): \n    '''\n    Write a function that takes an array as an argument and returns \n    an array with the elements reversed.\n    '''\n    rev = arr[::-1]\n    return rev \n  \ndef is_Monotonic(arr): \n    '''\n    Write a function that returns true if the given array is monotonic \n    or false otherwise. An array is said to be monotonic if array elements \n    are either monotonically increasing or monotonically decreasing. \n    Monotonically increasing means that for all i <= j, \n    arr[i] <= arr[j]. Monotonically decreasing means that for all i <= j, \n    arr[i] >= arr[j].\n    '''\n    return (all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or\n        all(arr[i] >= arr[i+1] for i in range(len(arr)-1))) \n  \ndef all_Star(arr): \n    '''\n    Write a function that takes an array as argument and returns \n    an array with the '*' characters converted to the values \n    that are present in the original array.\n    '''\n    return [('*' if el!='*' else el) for el in arr] \n  \ndef replace_negative(arr): \n    '''\n    Write a function that takes an array as argument and returns \n    an array with all negative values changed to positive values\n    '''\n    return [el if el>0 else abs(el) for el in arr] \n  \ndef min_Diff(arr): \n    '''\n    Write a function that takes an array as argument and returns \n    the minimum difference between any two elements in the array.\n    '''\n    arr.sort() \n    return min(arr[i+1] - arr[i] for i in range(len(arr)-1)) \n  \ndef all_Prime(arr): \n    '''\n    Write a function that takes an array as argument and returns \n    true if all elements in the array are prime numbers or false otherwise.\n    '''\n    for num in arr: \n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                return True\n    return False \n  \ndef num_of_words(sentence): \n    '''\n    Write a function that takes a sentence as input and returns \n    the number of words in the sentence.\n    '''\n    return len(sentence.split()) \n  \ndef num_of_words_and_characters(sentence): \n    '''\n    Write a function that takes a sentence as input and returns \n    the number of characters in the sentence, including spaces and special characters\n    '''\n    return len(sentence) \n  \ndef distinct_words(sentence): \n    '''\n    Write a function that takes a sentence as input and returns \n    the number of distinct words in the sentence.\n    '''\n    words = sentence.split()\n    return len(set(words)) \n  \ndef capitalize_Sentence(sentence): \n    '''\n    Write a function that takes a sentence as input and capitalizes the first character of each word in the sentence.\n    '''\n    words = sentence.split()\n    return''.join([word[0].upper()+word[1:] for word in words]) \n  \ndef rotate_array(arr, n): \n    '''\n    Write a function that takes an array as input and returns \n    an array which is rotated by 'n' places.\n    '''\n    return arr[n:]+arr[:n] \n  \ndef string_rotation(string1, string2): \n    '''\n    Write a function that takes 2 strings as input and returns True \n    if string 2 is a rotated version of string 1. \n    '''\n    return string1 in string2+string2 \n  \ndef string_compression(string): \n    '''\n    Write a function that takes a string as input and returns \n    the character followed by the frequency of the character.\n    '''\n    chars = {}\n    for c in string: \n        if c in chars: \n            chars[c] += 1\n        else: \n            chars[c] = 1\n    return ''.join([k+str(v) for k,v in chars.items()]) \n  \ndef string_rotation_1(string1, string2): \n    '''\n    Write a function that takes 2 strings as input and returns True \n    if string 2 is a rotated version of string 1.\n    '''\n    if len(string1)!= len(string2): \n        return False\n    temp = string1 + string1 \n    return string2 in temp \n  \ndef is_Prime(n): \n    '''\n    Write a function that takes an integer as input and returns \n    true if the number is prime and false otherwise.\n    '''\n    if n < 2: \n        return False\n    for i in range(2,n): \n        if n % i == 0: \n            return False\n    return True \n  \ndef get_Pythagorean_Triplets(arr): \n    '''\n    Write a function that takes an array as argument and returns \n    an array of pythagorean triplets that sum up to the largest element of the array.\n    '''\n    sorted_arr = sorted(arr) \n    triplets = [] \n    for i in range(len(sorted_arr)-2): \n        k = i+1\n        l = len(sorted_arr)-1\n        while k < l: \n            a = sorted_arr[i] \n            b = sorted_arr[k] \n            c = sorted_arr[l] \n            if a**2 + b**2 == c**2: \n                triplets.append([a,b,c]) \n            if a**2 + c**2 == b**2: \n                triplets.append([a,c,b]) \n            k += 1\n            l -= 1\n    return triplets \n  \ndef reverse_Sentence(sentence): \n    '''\n    Write a function that takes a sentence as input and returns \n    the sentence in reverse order.\n    '''\n    words = sentence.split() \n    reversed_sentence = \" \".join(reversed(words)) \n    return reversed_sentence \n  \ndef reverse_Sentence_1(sentence): \n    '''\n    Write a function that takes a sentence as input and returns \n    the sentence in reverse order.\n    '''\n    return \" \".join(reversed(sentence.split())) \n  \ndef reverse_Words_in_a_Sentence(sentence): \n    '''\n    Write a function that takes a sentence as input and returns \n    the sentence in reverse order. The words in the new sentence \n    should appear in reverse order, and the words should appear \n    in the same order as the words in the input sentence.\n    '''\n    return \" \".join(sentence.split()[::-1]) \n  \ndef reverse_Words_in_a_Sentence_1(sentence): \n    '''\n    Write a function that takes a sentence as input and returns \n    the sentence in reverse order. The words in the new sentence \n    should appear in reverse order, and the words should appear \n    in the same order as the words in the input sentence.\n    '''\n    return \" \".join(reversed(sentence.split())) \n  \ndef all_Odd_or_Even(arr): \n    '''\n    Write a function that takes an array as argument and returns \n    an array with all elements converted to odd or even. \n    An element is said to be even if it has a remainder of 0 when divided \n    by 2, otherwise, it is said to be odd. If the parameter passed is \n    not an array, it should be treated as a single number.\n    '''\n    return [el if (el%2 == 0) else 'Odd' for el in arr] \n  \ndef all_Even_or_Od",
        "num_ids": 37
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(arr[i] - arr[j]) for i in range(len(arr)) for j in range(i + 1, len(arr)))\n    \nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(max_Abs_Diff(arr)",
        "num_ids": 87
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = 1, 0\n    while x <= n:\n        if (n - (a*x + b*y)) % a == 0:\n            return x, y\n        x += 1\n        y += 1\n    return None\n",
        "num_ids": 58
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if x*a + y*b == n:\n                return (x,y)\n",
        "num_ids": 41
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        if (a*x + b) % n == 0:\n            return (x, int((a*x + b)/n))\n",
        "num_ids": 42
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return x, y\n    return None\n",
        "num_ids": 43
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 1\n    for i in range(n):\n        if (a * x + b * y == n):\n            return (x, y)\n        elif (a * x + b * y > n):\n            y -= 1\n        else:\n            x += 1\n    return None\n",
        "num_ids": 76
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(0, n):\n        if a*i + b*i == n:\n            return (i, i)\n",
        "num_ids": 34
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    if n % a == 0 and n % b == 0:\n        return int(n / max(a, b)), int(n / min(a, b))\n    if n % a == 0:\n        return int(n / a), None\n    if n % b == 0:\n        return None, int(n / b)\n    return None\n",
        "num_ids": 98
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return x,y\n    return None\n",
        "num_ids": 43
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a * x + b * y == n:\n                return (x, y)\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = None, None\n    if n % a == 0:\n        x = 0\n        y = n / a\n    elif n % b == 0:\n        x = n / b\n        y = 0\n    elif (a + b) % n == 0:\n        x = (a + b) / n\n        y = (a + b) / n\n    return x, y\n",
        "num_ids": 96
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result\n    \n    \ndef my_enumerate(lst):\n    '''\n    Write a function which accepts a list and returns a new list having \n    tuples having first element as the index and second element as the \n    corresponding value of the list.\n    '''\n    return list(enumerate(lst))\n    \n    \ndef reverse(lst):\n    '''\n    Write a function to reverse an array in a given dimension.\n    '''\n    return lst[::-1]\n    \n    \ndef merge_two_list(lst1, lst2):\n    '''\n    Write a function to merge two lists. \n    '''\n    return list(set(lst1 + lst2))\n    \n    \ndef my_list_sort(lst):\n    '''\n    Write a function which sorts the list in ascending order.\n    '''\n    return sorted(lst)\n    \n    \ndef my_histogram(lst):\n    '''\n    Write a function which takes a list of numbers as an argument and returns \n    a dictionary where the keys are the numbers in the list and the values \n    are their counts in the list.\n    '''\n    return {x: lst.count(x) for x in set(lst)}\n    \n    \ndef my_repetitions(lst):\n    '''\n    Write a function to check if all elements of a list are repeated consecutively.\n    '''\n    # print(lst)\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i+1]:\n            return True\n    return False\n    \n    \ndef my_deletion(lst, indexes):\n    '''\n    Write a function which takes a list and a list of indexes and returns \n    a new list where elements of the list at indexes are removed.\n    '''\n    return [element for i, element in enumerate(lst) if i not in indexes]\n    \n    \ndef my_dict_init(lst):\n    '''\n    Write a function which returns a dictionary with key as a word in a list \n    and value as the word's length. \n    '''\n    return {word: len(word) for word in lst}\n    \n    \ndef my_string_len(lst):\n    '''\n    Write a function to get a dictionary of word lengths for a given sentence.\n    '''\n    return {word: len(word) for word in lst.split()}\n    \n    \ndef my_list_subtraction(lst1, lst2):\n    '''\n    Write a function to get a new list by subtracting one list from the other.\n    '''\n    return [item for item in lst1 if item not in lst2]\n    \n    \ndef my_list_intersection(lst1, lst2):\n    '''\n    Write a function to get a new list by taking intersection of two lists.\n    '''\n    return list(set(lst1) & set(lst2))\n    \n    \ndef my_list_difference(lst1, lst2):\n    '''\n    Write a function to get a new list by taking the difference of two lists.\n    '''\n    return list(set(lst1) - set(lst2))\n    \n    \ndef my_dictionary_combination(lst):\n    '''\n    Write a function to create a dictionary of numbers and their combinations.\n    '''\n    return {i: (i, i+1) for i in lst}\n    \n    \ndef my_set_union(lst1, lst2):\n    '''\n    Write a function to get a new set by taking the union of two sets.\n    '''\n    return set(lst1) | set(lst2)\n    \n    \ndef my_longest_consecutive_subsequence(lst):\n    '''\n    Write a function to get the longest consecutive subsequence in a given list.\n    '''\n    return max(map(lambda x: (x[1] - x[0], x), [(i, i+1) for i in lst]))\n    \n    \ndef my_longest_subsequence(lst):\n    '''\n    Write a function to get the longest consecutive subsequence in a given list.\n    '''\n    return max(map(lambda x: len(x), lst))\n    \n    \ndef my_list_square(lst):\n    '''\n    Write a function to get a new list with squares of the elements of the original list.\n    '''\n    return [i**2 for i in lst]\n    \n    \ndef my_list_square_odd_even(lst):\n    '''\n    Write a function to get a new list with the even numbers squared and the odd numbers \n    squared in the original list.\n    '''\n    even = [i**2 for i in lst if i%2 == 0]\n    odd = [i**2 for i in lst if i%2!= 0]\n    return even, odd\n    \n    \ndef my_list_chunks(lst, n):\n    '''\n    Write a function to divide a list into sub lists of size n.\n    '''\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n    \n    \ndef my_list_negative(lst):\n    '''\n    Write a function to create a new list where all the negative elements are removed.\n    '''\n    return [i for i in lst if i < 0]\n    \n    \ndef my_list_with_delimiter(lst, delimiter):\n    '''\n    Write a function to create a new list with delimiter between each element.\n    '''\n    return delimiter.join(lst)\n    \n    \ndef my_frequency(lst):\n    '''\n    Write a function which returns a dictionary with the frequency of elements in \n    the list.\n    '''\n    return {item: lst.count(item) for item in set(lst)}\n    \n    \ndef my_reversed_frequency(lst):\n    '''\n    Write a function which takes a list of elements and returns a dictionary \n    containing the frequency of elements.\n    '''\n    return {item: lst.count(item) for item in set(lst)}\n    \n    \ndef my_set_union(lst1, lst2):\n    '''\n    Write a function to return a set of elements which are either in the first set\n    or in the second set.\n    '''\n    return set(lst1) | set(lst2)\n    \n    \ndef my_set_intersection(lst1, lst2):\n    '''\n    Write a function to return a set of elements which are common in both the sets.\n    '''\n    return set(lst1) & set(lst2)\n    \n    \ndef my_set_difference(lst1, lst2):\n    '''\n    Write a function to return a set of elements which are unique in the first set.\n    '''\n    return set(lst1) - set(lst2)\n    \n    \ndef my_set_symmetric_difference(lst1, lst2):\n    '''\n    Write a function to return a set of elements which are either unique in the first\n    set or unique in the second set but not in both.\n    '''\n    return set(lst1) ^ set(lst2)\n    \n    \ndef my_sublist_search(lst, sub_lst):\n    '''\n    Write a function to check if the sublist is present in the list.\n    '''\n    return sub_lst in lst\n    \n    \ndef my_sublist_replace(lst, sub_lst):\n    '''\n    Write a function to replace all occurences of a given sublist in a given list.\n    '''\n    return [item if item!= sub_lst else sub_lst[0] for item in lst]\n    \n    \ndef my_sublist_add(lst, sub_lst, number):\n    '''\n    Write a function to ad",
        "num_ids": 8
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n",
        "num_ids": 24
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n            \n    return list1\n",
        "num_ids": 36
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for i in list1:\n        if i not in list2:\n            result.append(i)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    list3 = list1.difference(list2)\n    list3 = list(list3)\n    return list3\n",
        "num_ids": 51
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1)-set(list2))\n",
        "num_ids": 17
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    l1 = list1.copy()\n    l2 = list2.copy()\n    for item in l1:\n        if item in l2:\n            l1.remove(item)\n    return l1\n",
        "num_ids": 52
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    return n + sum_series(n-2)\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # for i in range(n // 2):\n    #     print(n - (2 * i))\n    #     n = n - (2 * i)\n",
        "num_ids": 40
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    return sum_series(n - 2) + sum_series(n - 4)\n",
        "num_ids": 33
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        print(\"Please enter a positive integer.\")\n    elif n == 0:\n        print(0)\n    else:\n        sum = 0\n        for i in range(0, n // 2 + 1):\n            sum += n - 2 * i\n        print(sum)\n    return\n",
        "num_ids": 75
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    if n >= 0:\n        while n - (2 * i) >= 0:\n            i += 1\n        return n + (n - 2 * i)\n    else:\n        print(\"Only non-negative numbers allowed\")\n        return None\n",
        "num_ids": 63
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    return n + sum_series(n - 2)\n",
        "num_ids": 37
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n - 2)\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n + sum_series(n-2))\n",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2 + 1):\n        sum = sum + n - 2*i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n        \ndef fib(n):\n    '''\n    Write a function that returns the nth Fibonacci number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib(n-1) + fib(n-2)\n        \ndef factorial(n):\n    '''\n    Write a function that returns the nth factorial.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef reverse(word):\n    '''\n    Write a function that returns the reverse of a string.\n    '''\n    if len(word) == 1:\n        return word\n    else:\n        return word[-1] + reverse(word[0:len(word)-1])\n        \ndef is_palindrome(word):\n    '''\n    Write a function that returns True or False if a string is a palindrome.\n    '''\n    if len(word) == 1:\n        return True\n    elif len(word) == 2:\n        return word[0] == word[-1]\n    else:\n        return word[0] == word[-1] and is_palindrome(word[1:len(word)-1])\n    \ndef fibonacci(n):\n    '''\n    Write a function that returns a list of the Fibonacci sequence up to the nth element.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \ndef power(base, exponent):\n    '''\n    Write a function that returns the result of a ** b.\n    '''\n    if exponent == 0:\n        return 1\n    else:\n        return base * power(base, exponent-1)\n        \ndef reverse_list(list):\n    '''\n    Write a function that returns a reversed list.\n    '''\n    if len(list) == 1:\n        return list\n    else:\n        return list[-1:] + reverse_list(list[0:len(list)-1])\n        \ndef factorial_list(list):\n    '''\n    Write a function that returns the factorial of a list.\n    '''\n    if len(list) == 0:\n        return 1\n    else:\n        return list[0] * factorial_list(list[1:len(list)])\n",
        "num_ids": 42
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = s\n    l = l\n    # area = 0.25 * s**2 / tan(pi/n)\n    # area = 0.25 * s**2 * n / tan(pi/n)\n    # area = 0.25 * s**2 * n / (s * tan(pi/n))\n    area = s**2 * n / (4 * tan(pi/n))\n    return area\n",
        "num_ids": 99
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s*l/2\n    return area\n    \ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    area = b*h/2\n    return area\n    \ndef area_rectangle(length, width):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    area = length*width\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s ** 2) / (4 * tan(pi / l))\n",
        "num_ids": 20
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) / 2 * tan(pi / l)\n",
        "num_ids": 19
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # p = perimeter\n    p = s * l\n    a = s ** 2 / (4 * tan(pi / l))\n    return a\n",
        "num_ids": 36
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = int(s)\n    area = n * (l**2) / (4 * tan(pi/n))\n    return area\n",
        "num_ids": 35
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #sides = int(input('Enter the number of sides: '))\n    #length = int(input('Enter the length of the sides: '))\n    area = (s*l)/2\n    return area\n",
        "num_ids": 52
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = int(s)\n    l = int(l)\n    return (s * l ** 2) / (4 * tan(pi / l))\n",
        "num_ids": 38
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2) / (4 * tan(pi/l))\n",
        "num_ids": 20
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l * 1/2 * ((1/2)**0.5)\n",
        "num_ids": 23
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_div=[]\n    for i in range(1,n):\n        if n%i==0:\n            sum_div.append(i)\n    sum_sum_div=sum(sum_div)\n    if sum_sum_div==n:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 80
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    total = 0\n    if n < 1: \n        return total\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0: \n            if n / i == i: \n                total += i\n            else: \n                total += i + n / i\n    return total\n",
        "num_ids": 83
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return sum(divisors(n))==sum(divisors(n+1))\n",
        "num_ids": 24
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s=0\n    l=[1,n]\n    if n==1:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            s+=i\n            if s!=i:\n                l.append(s)\n                s=0\n    if sum(l)==n:\n        return True\n    else:\n        return False\n",
        "num_ids": 94
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum_list.append(i)\n    sum_of_divisors = sum(div_sum_list)\n    return sum_of_divisors\ndef sum_of_divisors(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_of_divisors_list.append(i)\n    return sum(sum_of_divisors_list)\ndef compare_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_of_divisors_list.append(i)\n    if sum(sum_of_divisors_list) == sum_of_divisors(n):\n        return True\n    else:\n        return False\ndef div_diff(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    diff_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            diff_list.append(i)\n    difference = max(diff_list) - min(diff_list)\n    return difference\ndef sum_diff(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_list.append(i)\n    difference = max(sum_list) - min(sum_list)\n    return difference\ndef compare_diff(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    diff_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            diff_list.append(i)\n    if max(diff_list) - min(diff_list) == sum_diff(n):\n        return True\n    else:\n        return False\ndef fib(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    fib_list = [0, 1]\n    for i in range(2, n+1):\n        fib_list.append(fib_list[i-1] + fib_list[i-2])\n    return fib_list\ndef is_fib(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if (fib(n)[n+1] - fib(n)[n-1]) == fib(n)[n+1]:\n        return True\n    else:\n        return False\ndef factorization(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    factorization_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factorization_list.append(i)\n    return factorization_list\ndef compare_factorization(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    factorization_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factorization_list.append(i)\n    if factorization(n) == factorization(n):\n        return True\n    else:\n        return False\ndef fib_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    fib_sum_list = []\n    for i in range(1, n+1):\n        fib_sum_list.append(fib(i)[i+1] + fib(i)[i-1])\n    return fib_sum_list\ndef compare_fib_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if fib_sum(n) == fib_sum(n):\n        return True\n    else:\n        return False\ndef sum_fib_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_fib_sum_list = []\n    for i in range(1, n+1):\n        sum_fib_sum_list.append(fib_sum(i)[i+1] + fib_sum(i)[i-1])\n    return sum_fib_sum_list\ndef compare_sum_fib_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if sum_fib_sum(n) == sum_fib_sum(n):\n        return True\n    else:\n        return False\ndef div_sum_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum_sum_list = []\n    for i in range(1, n+1):\n        div_sum_sum_list.append(div_sum(i)[i+1] + div_sum(i)[i-1])\n    return div_sum_sum_list\ndef compare_div_sum_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if div_sum_sum(n) == div_sum_sum(n):\n        return True\n    else:\n        return False\ndef div_diff_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_diff_sum_list = []\n    for i in range(1, n+1):\n        div_diff_sum_list.append(div_diff(i)[i+1] + div_diff(i)[i-1])\n    return div_diff_sum_list\ndef compare_div_diff_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if div_diff_sum(n) == div_diff_sum(n):\n        return True\n    else:\n        return False\ndef sum_diff_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_diff_sum_list = []\n    for i in range(1, n+1):\n        sum_diff_sum_list.append(sum_diff(i)[i+1] + sum_diff(i)[i-1])\n    return sum_diff_sum_list\ndef compare_sum_diff_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if sum_diff_sum(n) == sum_diff_sum(n):\n        return True\n    else:\n        return False\ndef div_sum_diff(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum_diff_list = []\n    for i in range(1, n+1):\n        div_sum_diff_list.append(div_sum(i)[i+1] - div_sum(i)[i-1])\n    return div_sum_diff_list\ndef compare_div_sum_diff(n):\n    '''",
        "num_ids": 1
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #Get the divisors of n\n    divisors = get_divisors(n)\n    #Get the sum of the divisors of n\n    div_sum = sum(divisors)\n    #Get the sum of the divisors of n\n    n_sum = sum(range(1,n+1))\n",
        "num_ids": 80
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n / i == i:\n                sum += i\n            else:\n                sum += (i + n/i)\n    return sum\n",
        "num_ids": 70
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n=n\n    a=[]\n    s=0\n    for i in range(1,(n//2)+1):\n        if n%i==0:\n            s=s+i\n            a.append(i)\n    for j in range(len(a)):\n        for k in range(j+1,len(a)):\n            if s==(a[j]+a[k]):\n                print(\"YES\")\n                print(\"divisors are: \",a[j],\"and\",a[k])\n                return \n    print(\"NO\")\n",
        "num_ids": 136
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n):\n        if n % i == 0: \n            sum1 = sum1 + i\n        \n    for j in range(1,n):\n        if sum1 % j == 0: \n            sum2 = sum2 + j\n        \n    if sum1 == sum2:\n        return True\n    else:\n        return False\n        \n",
        "num_ids": 104
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # If n is negative, return false.\n    if n < 0:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    dict1 = {}\n    dict2 = {}\n    for i in range(len(str1)):\n        if ord(str1[i])>=97 and ord(str1[i])<=122:\n            dict1[str1[i].lower()] = i\n        if ord(str1[i])>=65 and ord(str1[i])<=90:\n            dict2[str1[i].lower()] = i\n    if len(dict1)!= len(dict2):\n        return -1\n    else:\n        return dict1, dict2\n    \nstr1 = 'Rohit'\nprint(count_char_position(str1))\n",
        "num_ids": 163
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    chars_lower_case=list(\"abcdefghijklmnopqrstuvwxyz\")\n    chars_upper_case=list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    for i in range(len(str1)):\n        if str1[i].lower() in chars_lower_case:\n            count+=1\n        elif str1[i].lower() in chars_upper_case:\n            count+=1\n    return count\n",
        "num_ids": 122
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([char for char in str1 if char.lower() in string.ascii_lowercase])\n",
        "num_ids": 28
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    char_position = {}\n    for char in str1:\n        if char not in char_position:\n            char_position[char] = 1\n        else:\n            char_position[char] += 1\n    return char_position\n",
        "num_ids": 67
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    chars = {}\n    for c in str1:\n        if c.lower() not in chars:\n            chars[c.lower()] = 0\n        chars[c.lower()] += 1\n    return sum(chars.values())\n",
        "num_ids": 61
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str2 = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(str1)):\n        if str1[i].lower() in str2:\n            return str2.index(str1[i].lower())+1\n    return 0\n",
        "num_ids": 71
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    import string\n    lower_str = str1.lower()\n    print(lower_str)\n    d = dict.fromkeys(string.ascii_lowercase,0)\n    for key in lower_str:\n        d[key] += 1\n    print(d)\n    \n    for key,value in d.items():\n        if value > 1:\n            print(key,value)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1997
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1=str1.lower()\n    str1=list(str1)\n    count=0\n    for i in range(len(str1)):\n        if ord(str1[i])>=97 and ord(str1[i])<=122:\n            count=count+1\n    return count\n",
        "num_ids": 76
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    freq = [0] * 26\n    for i in range(len(str1)):\n        freq[ord(str1[i].lower()) - ord('a')] += 1\n    return freq\n",
        "num_ids": 52
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    from collections import Counter\n    str1 = ''.join(str1.split(' '))\n    count = Counter(str1.lower())\n    return { k:v for k,v in count.items() if str(k) in \"abcdefghijklmnopqrstuvwxyz\"}\n",
        "num_ids": 73
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return sum(A.count(x) - 1 for x in set(A) if x % 2 == 0) // 2\n",
        "num_ids": 31
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor = lambda a, b: a ^ b\n    even = lambda n: n % 2 == 0\n",
        "num_ids": 27
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A) - 1):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_count += 1\n    return even_count\n",
        "num_ids": 70
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n    else:\n        count = 0\n        for i in range(0, len(A)):\n            for j in range(i+1, len(A)):\n                if (A[i] ^ A[j]) % 2 == 0:\n                    count += 1\n        return count\n",
        "num_ids": 82
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for num in A:\n        if num & 1 == 0:\n            even_pairs += 1\n    return even_pairs // 2\n",
        "num_ids": 43
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count\nprint(find_even_pair([1, 2, 3]))\n",
        "num_ids": 77
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_pairs += 1\n",
        "num_ids": 64
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    B = []\n    for i in A:\n        x = (i | A[1]) % 2 == 0\n        if x:\n            B.append(i)\n    return len(B)\n",
        "num_ids": 49
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairCount = 0\n",
        "num_ids": 8
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    pow_ = 1\n    while pow_<n:\n        pow_ *= 2\n    return pow_\n",
        "num_ids": 30
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if(n & (n-1) == 0):\n        return n\n    else:\n        return pow(2, ceil(log(n,2)))\n    \nif __name__ == '__main__':\n    print(next_power_of_2(5))\n    print(next_power_of_2(7))\n    print(next_power_of_2(8))\n    print(next_power_of_2(15))\n    print(next_power_of_2(16))\n    print(next_power_of_2(32))",
        "num_ids": 136
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # base cases: 1, 2, 3, 4,..., 8, 16, 32, 64, 128,...\n    # if n is even, n/2 = (n/2) + 1\n    # if n is odd, n/2 = (n/2) + 1\n    if n <= 0: \n        return -1\n    if n == 1: \n        return 2\n    if n == 2: \n        return 4\n    return next_power_of_2(n / 2) * 2 if (n & 1) == 0 else next_power_of_2((n / 2)) * 2 + 1\n",
        "num_ids": 144
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n",
        "num_ids": 16
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 0\n    while 1 << i <= n: \n        i += 1\n    return 1 << i\n",
        "num_ids": 28
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n and not(n & (n - 1))): \n        return n \n    while (n!= 0): \n        n >>= 1\n    return n << 1\n    \n",
        "num_ids": 48
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return 1 << (len(bin(n))-3)\n",
        "num_ids": 32
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # base case: 1\n    if n <= 0:\n        return 0\n    # base case: 2\n    elif n == 1:\n        return 1\n    # recursive case:\n    else:\n        return next_power_of_2(n // 2) * 2\n",
        "num_ids": 66
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**int(n).bit_length()\n",
        "num_ids": 15
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** int(n).bit_length()\n    \ndef largest_power_of_2(n):\n    '''\n    Write a python function to find the largest power of 2 less than or equal to n.\n    '''\n    return 2 ** (int(n) - 1).bit_length()\n    \ndef next_power_of_2_less_than(n):\n    '''\n    Write a python function to find the next largest power of 2 less than n.\n    '''\n    return 2 ** int(n).bit_length() - 1\n    \ndef power_of_2_greater_than(n):\n    '''\n    Write a python function to find the next largest power of 2 greater than n.\n    '''\n    return 2 ** int(n).bit_length()\n",
        "num_ids": 15
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # find the number of occurrences of x in list a\n    count = 0\n    for i in a:\n        if x == i:\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n    \ndef frequency1(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n    \ndef frequency2(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n    \ndef frequency3(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n    \ndef frequency4(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n    \ndef frequency5(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n    \ndef frequency6(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n    \ndef frequency7(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n    \ndef frequency8(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n    \ndef frequency9(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n    \ndef frequency10(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=0\n    for i in a:\n        if(i==x):\n            c+=1\n    return c\n",
        "num_ids": 31
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if x==a[i]:\n            count+=1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count \n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n < m:\n        return 0\n    else:\n        return sum_range_list(list1, m-1, n) + list1[n]\n",
        "num_ids": 45
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    # O(1)\n    if m == 0:\n        return list1[n]\n    \n    # O(n)\n    sum = 0\n    for i in range(m - 1, n):\n        sum += list1[i]\n",
        "num_ids": 62
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    try:\n        if m < 1 or n < 1 or m > len(list1) or n > len(list1):\n            return 0\n        else:\n            return sum(list1[m-1:n])\n    except TypeError:\n        return 0\n        \ndef find_range_list(list1, m, n):                                                                                                                                                                                                                \n    '''\n    Write a function to find the range of a given list between a particular range of indices.\n    '''\n    try:\n        if m < 1 or n < 1 or m > len(list1) or n > len(list1):\n            return None\n        else:\n            return list1[m-1:n]\n    except TypeError:\n        return None\n        \ndef mean_list(list1):                                                                                                                                                                                                                        \n    '''\n    Write a function to compute the mean value of a list of numbers.\n    '''\n    try:\n        if len(list1) == 0:\n            return 0\n        else:\n            return sum(list1)/len(list1)\n    except TypeError:\n        return 0\n    \ndef join_lists(list1, list2):                                                                                                                                                                                                                        \n    '''\n    Write a function to join two lists.\n    '''\n    try:\n        return list1 + list2\n    except TypeError:\n        return None\n    \ndef char_range(c1, c2):                                                                                                                                                                                                                        \n    '''\n    Write a function to return a list of characters from a given range.\n    '''\n    try:\n        return list(chr(c1) + chr(c2))\n    except TypeError:\n        return None\n    \ndef even_index_list(list1):                                                                                                                                                                                                                        \n    '''\n    Write a function to return only the even indexed elements of a list.\n    '''\n    try:\n        if len(list1) == 0:\n            return []\n        else:\n            return list1[::2]\n    except TypeError:\n        return None\n        \ndef triple_sum(list1):                                                                                                                                                                                                                        \n    '''\n    Write a function to return the sum of three consecutive elements in a list.\n    '''\n    try:\n        if len(list1) < 3:\n            return 0\n        else:\n            return sum(list1[0:3])\n    except TypeError:\n        return None\n        \ndef get_index_list(list1, m):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the element index from a list.\n    '''\n    try:\n        if m > len(list1) or m < 1:\n            return None\n        else:\n            return list1.index(m)\n    except TypeError:\n        return None\n        \ndef count_list(list1, m):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the number of occurrences of an element in a list.\n    '''\n    try:\n        if m not in list1:\n            return 0\n        else:\n            return list1.count(m)\n    except TypeError:\n        return None\n        \ndef flatten_list(list1):                                                                                                                                                                                                                        \n    '''\n    Write a function to flatten a list.\n    '''\n    try:\n        return [y for x in list1 for y in x]\n    except TypeError:\n        return None\n        \ndef reverse_list(list1):                                                                                                                                                                                                                        \n    '''\n    Write a function to reverse the order of a list.\n    '''\n    try:\n        return list1[::-1]\n    except TypeError:\n        return None\n        \ndef list_common_elements(list1, list2):                                                                                                                                                                                                                        \n    '''\n    Write a function to return a list of common elements in two lists.\n    '''\n    try:\n        return list(set(list1).intersection(list2))\n    except TypeError:\n        return None\n        \ndef list_union(list1, list2):                                                                                                                                                                                                                        \n    '''\n    Write a function to return a list of all elements in both lists.\n    '''\n    try:\n        return list(set(list1).union(list2))\n    except TypeError:\n        return None\n    \ndef slice_list(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to slice a list.\n    '''\n    try:\n        return list1[m-1:n]\n    except TypeError:\n        return None\n        \ndef list_average(list1):                                                                                                                                                                                                                        \n    '''\n    Write a function to return the average value of a list of numbers.\n    '''\n    try:\n        if len(list1) == 0:\n            return 0\n        else:\n            return sum(list1)/len(list1)\n    except TypeError:\n        return 0\n",
        "num_ids": 48
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum
        "num_ids": 2321
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # using sum() function\n    # time complexity O(n)\n    # space complexity O(n)\n    # return sum(list1[m:n+1])\n",
        "num_ids": 42
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # for i in range(m, n+1):\n    #     print(i)\n",
        "num_ids": 24
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in range(m,n+1):\n        sum1 += list1[i]\n    return sum1",
        "num_ids": 35
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m,n+1):\n        total += list1[i]\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    summ = 0\n    for i in list1[m:n+1]:\n        summ = summ + i\n    return summ\n    #print(list1[m:n+1])\n    #return sum(list1[m:n+1])\n",
        "num_ids": 63
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n + 1):\n        total += list1[i]\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\ndef area_pentagon(b):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    area = (5 * (5 **.5) * b ** 2) / 4\n    return area\ndef angle_pentagon(c):\n    '''\n    Write a function to find the interior angle of a pentagon from the length of its sides.\n    '''\n    angle = (5 * math.pi) / 5\n    return angle\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = 6 * a\n    return perimeter\ndef area_hexagon(b):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    area = ((3 * (3 **.5) * b ** 2) / 2)\n    return area\ndef angle_hexagon(c):\n    '''\n    Write a function to find the interior angle of a regular hexagon from the length of its sides.\n    '''\n    angle = (6 * math.pi) / 6\n    return angle\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    perimeter = 7 * a\n    return perimeter\ndef area_heptagon(b):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    area = ((5 * (5 **.5) * b ** 2) / 2)\n    return area\ndef angle_heptagon(c):\n    '''\n    Write a function to find the interior angle of a regular heptagon from the length of its sides.\n    '''\n    angle = (7 * math.pi) / 7\n    return angle\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = 8 * a\n    return perimeter\ndef area_octagon(b):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    area = (2 * ((2 **.5) * b) ** 2)\n    return area\ndef angle_octagon(c):\n    '''\n    Write a function to find the interior angle of a regular octagon from the length of its sides.\n    '''\n    angle = (8 * math.pi) / 8\n    return angle\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = 9 * a\n    return perimeter\ndef area_nonagon(b):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    area = ((3 * (3 **.5) * b ** 2) / 2)\n    return area\ndef angle_nonagon(c):\n    '''\n    Write a function to find the interior angle of a regular nonagon from the length of its sides.\n    '''\n    angle = (9 * math.pi) / 9\n    return angle\ndef circumference_circle(r):\n    '''\n    Write a function to calculate the circumference of a circle from the length of its radius.\n    '''\n    circumference = 2 * r * math.pi\n    return circumference\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle from the length of its radius.\n    '''\n    area = (r ** 2) * math.pi\n    return area\ndef radius_circle(a):\n    '''\n    Write a function to calculate the radius of a circle from the length of its diameter.\n    '''\n    radius = (a / 2) **.5\n    return radius\ndef circumference_semi_circle(r):\n    '''\n    Write a function to calculate the circumference of a semi-circle from the length of its radius.\n    '''\n    circumference = (2 * r) * math.pi\n    return circumference\ndef area_semi_circle(r):\n    '''\n    Write a function to calculate the area of a semi-circle from the length of its radius.\n    '''\n    area = (r ** 2) * math.pi\n    return area\ndef radius_semi_circle(a):\n    '''\n    Write a function to calculate the radius of a semi-circle from the length of its diameter.\n    '''\n    radius = (a / 2) **.5\n    return radius\ndef circumference_ellipse(r):\n    '''\n    Write a function to calculate the circumference of an ellipse from the length of its radius.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\ndef area_ellipse(a):\n    '''\n    Write a function to calculate the area of an ellipse from the length of its radius.\n    '''\n    area = math.pi * a ** 2\n    return area\ndef radius_ellipse(b):\n    '''\n    Write a function to calculate the radius of an ellipse from the length of its width.\n    '''\n    radius = (b / 2) **.5\n    return radius\ndef circumference_parallelogram(a, b):\n    '''\n    Write a function to calculate the circumference of a parallelogram from the lengths of its sides.\n    '''\n    perimeter = 2 * (a + b)\n    return perimeter\ndef area_parallelogram(a, b):\n    '''\n    Write a function to calculate the area of a parallelogram from the lengths of its sides.\n    '''\n    area = a * b\n    return area\ndef perimeter_parallelogram(a, b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram from the lengths of its sides.\n    '''\n    perimeter = 2 * (a + b)\n    return perimeter\ndef radius_parallelogram(a, b):\n    '''\n    Write a function to calculate the radius of a parallelogram from the lengths of its sides.\n    '''\n    radius = ((a ** 2 + b ** 2) **.5) / 2\n    return radius\ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle from the lengths of its sides.\n    '''\n    area = (a * b * math.sin(math.radians(180)) / 2)\n    return area\ndef circumference_triangle(a, b):\n    '''\n    Write a function to calculate the circumference of a triangle from the length of its longest side.\n    '''\n    circumference = a + b + (2 * (math.sqrt((a ** 2) + (b ** 2))))\n    return circumference\ndef perimeter_triangle(a, b, c):\n    '''\n    Write a function to calculate the perimeter of a triangle from the length of its sides.\n    '''\n    perimeter = a + b + c\n    return perimeter\ndef area_trapezium(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezium from the lengths of its sides.\n    '''\n    area = ((a + b) / 2) * h\n    return area\ndef perimeter_trapezium(a, b, h):\n    '''\n    Write a function to calculate the perimeter of a trapezium from the lengths of its sides.\n    '''\n    perimeter = a + b + h\n    return perimeter\ndef radius_trapezium(a, b, h):\n    '''\n    Write a function to calculate the radius of a trapezium from the lengths of its sides.\n    '''\n    radius = ((a ** 2 + b ** 2 + (h ** 2)) **.5) / 2\n    return radius\ndef area_circle_sector(r, angle):\n    '''\n    Write a function to calculate the area of a circle sector from the radius of its circle and the interior angle.\n    '''\n    area = (r ** 2) * angle / 360\n    return area\ndef circumference_circle_sector(r, angle):\n    '''\n    Write a function to calculate the circumference of a circle sector from the radius of it",
        "num_ids": 19
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return ((math.sqrt(5) * a**2) / 4)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6*a\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return ((3 * math.sqrt(3) * a**2) / 2)\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 7*a\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    return ((5 * math.sqrt(5) * a**2) / 4)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8*a\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return ((2 * math.sqrt(2) * a**2) / 2)\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return (3*a)\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return ((math.sqrt(5) * a**2) / 4)\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    return 10*a\ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return ((5 * math.sqrt(5) * a**2) / 4)\ndef perimeter_undecagon(a):\n    '''\n    Write a function to find the perimeter of a regular undecagon from the length of its sides.\n    '''\n    return 11*a\ndef area_undecagon(a):\n    '''\n    Write a function to find the area of a regular undecagon from the length of its sides.\n    '''\n    return ((3 * math.sqrt(3) * a**2) / 2)\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return 12*a\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a regular dodecagon from the length of its sides.\n    '''\n    return ((3 * math.sqrt(3) * a**2) / 2)\ndef perimeter_tridecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tridecagon from the length of its sides.\n    '''\n    return 13*a\ndef area_tridecagon(a):\n    '''\n    Write a function to find the area of a regular tridecagon from the length of its sides.\n    '''\n    return ((5 * math.sqrt(5) * a**2) / 4)\ndef perimeter_tetraedron(a):\n    '''\n    Write a function to find the perimeter of a regular tetraedron from the length of its sides.\n    '''\n    return 14*a\ndef area_tetraedron(a):\n    '''\n    Write a function to find the area of a regular tetraedron from the length of its sides.\n    '''\n    return ((math.sqrt(2) * a**3) / 4)\ndef perimeter_octahedron(a):\n    '''\n    Write a function to find the perimeter of a regular octahedron from the length of its sides.\n    '''\n    return 15*a\ndef area_octahedron(a):\n    '''\n    Write a function to find the area of a regular octahedron from the length of its sides.\n    '''\n    return ((3 * math.sqrt(3) * a**3) / 2)\ndef perimeter_icosahedron(a):\n    '''\n    Write a function to find the perimeter of a regular icosahedron from the length of its sides.\n    '''\n    return 16*a\ndef area_icosahedron(a):\n    '''\n    Write a function to find the area of a regular icosahedron from the length of its sides.\n    '''\n    return ((5 * math.sqrt(5) * a**3) / 12)\ndef perimeter_icosandantagon(a):\n    '''\n    Write a function to find the perimeter of a regular icosandantagon from the length of its sides.\n    '''\n    return 17*a\ndef area_icosandantagon(a):\n    '''\n    Write a function to find the area of a regular icosandantagon from the length of its sides.\n    '''\n    return ((7 * math.sqrt(7) * a**3) / 12)\ndef perimeter_dodecahedral(a):\n    '''\n    Write a function to find the perimeter of a regular dodecahedral from the length of its sides.\n    '''\n    return 18*a\ndef area_dodecahedral(a):\n    '''\n    Write a function to find the area of a regular dodecahedral from the length of its sides.\n    '''\n    return ((5 * math.sqrt(5) * a**3) / 12)\ndef perimeter_dodecahedron(a):\n    '''\n    Write a function to find the perimeter of a regular dodecahedron from the length of its sides.\n    '''\n    return 19*a\ndef area_dodecahedron(a):\n    '''\n    Write a function to find the area of a regular dodecahedron from the length of its sides.\n    '''\n    return ((15 * math.sqrt(15) * a**3) / 16)\ndef perimeter_truncateddodecahydron(a):\n    '''\n    Write a function to find the perimeter of a regular truncated dodecahedral from the length of its sides.\n    '''\n    return 20*a\ndef area_truncateddodecahydron(a):\n    '''\n    Write a function to find the area of a regular truncated dodecahedral from the length of its sides.\n    '''\n    return ((15 * math.sqrt(15) * a**3) / 16)\ndef perimeter_truncatedicosahedron(a):\n    '''\n    Write a function to find the perimeter of a regular truncated icosahedral from the length of its sides.\n    '''\n    return 21*a\ndef area_truncatedicosahedron(a):\n    '''\n    Write a function to find the area of a regular truncated icosahedral from the length of its sides.\n    '''\n    return ((15 * math.sqrt(15) * a**3) / 16)\ndef perimeter_truncatedicosandantagon(a):\n    '''\n    Write a function to find the perimeter of a regular truncated icosandantagonal from the length of its sides.\n    '''\n    return 22*a\ndef area_truncatedicosandantagon(a):\n    '''\n    Write a function to find the area of a regular truncated icosandantagonal from the length of its sides.\n    '''\n    return ((7 * math.sqrt(7) * a**3) / 12)\ndef perimeter_rhombus(a):\n    '''\n    Write a function to find the perimeter of a regular rhombus from the length of its sides.\n    '''\n    return 23*a\ndef area_rhombus(a):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p=5*a\n    return p\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    a=pow(((5*a)/(4*math.tan(math.pi/5))),2)\n    return a\ndef area_square(a):\n    '''\n    Write a function to find the area of a square from its length.\n    '''\n    a=pow(a,2)\n    return a\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from its length.\n    '''\n    a=4*a\n    return a\ndef radius_circle(a):\n    '''\n    Write a function to find the radius of a circle from its diameter.\n    '''\n    a=a/2\n    return a\ndef circumference_circle(a):\n    '''\n    Write a function to find the circumference of a circle from its radius.\n    '''\n    a=2*(math.pi)*a\n    return a\ndef area_circle(a):\n    '''\n    Write a function to find the area of a circle from its radius.\n    '''\n    a=math.pi*pow(a,2)\n    return a\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube from its length.\n    '''\n    a=pow(a,3)\n    return a\ndef perimeter_cube(a):\n    '''\n    Write a function to find the perimeter of a cube from its length.\n    '''\n    a=6*a\n    return a\ndef area_cube(a):\n    '''\n    Write a function to find the area of a cube from its length.\n    '''\n    a=pow(a,2)\n    return a\ndef volume_cone(a):\n    '''\n    Write a function to find the volume of a cone from its length and radius.\n    '''\n    a=math.pi*a*pow(a/3,2)/3\n    return a\ndef perimeter_cone(a):\n    '''\n    Write a function to find the perimeter of a cone from its length and radius.\n    '''\n    a=2*math.pi*a+2*a*math.sqrt((pow(a,2)/3))\n    return a\ndef area_cone(a):\n    '''\n    Write a function to find the area of a cone from its length and radius.\n    '''\n    a=math.pi*a*pow(a/3,2)\n    return a\ndef volume_cylinder(a):\n    '''\n    Write a function to find the volume of a cylinder from its height and radius.\n    '''\n    a=a*pow(a/2,2)*math.pi\n    return a\ndef perimeter_cylinder(a):\n    '''\n    Write a function to find the perimeter of a cylinder from its height and radius.\n    '''\n    a=2*math.pi*a+2*math.pi*a*math.sqrt((pow(a,2)/3))\n    return a\ndef area_cylinder(a):\n    '''\n    Write a function to find the area of a cylinder from its height and radius.\n    '''\n    a=math.pi*pow(a,2)\n    return a\ndef area_sphere(a):\n    '''\n    Write a function to find the area of a sphere from its radius.\n    '''\n    a=4*math.pi*pow(a,2)\n    return a\ndef volume_sphere(a):\n    '''\n    Write a function to find the volume of a sphere from its radius.\n    '''\n    a=4/3*math.pi*pow(a,3)\n    return a\ndef distance_point_line(a,b,c,d):\n    '''\n    Write a function to find the distance between a point and a line.\n    '''\n    a=math.sqrt(pow(a-c,2)+pow(b-d,2))\n    return a\ndef distance_point_segment(a,b,c,d):\n    '''\n    Write a function to find the distance between a point and a line segment.\n    '''\n    a=math.sqrt(pow(c-a,2)+pow(d-b,2))\n    return a\ndef distance_point_point(a,b,c):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    a=math.sqrt(pow(a-c,2))\n    return a\ndef slope_point_line(a,b,c,d):\n    '''\n    Write a function to find the slope of a line from two points.\n    '''\n    a=b-d\n    b=a/2\n    c=c-a\n    d=c/2\n    a=a/2\n    a=b-a\n    a=a/c\n    return a\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle from its width and height.\n    '''\n    a=a*b\n    return a\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle from its width and height.\n    '''\n    a=2*(a+b)\n    return a\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle from the lengths of its sides.\n    '''\n    a=a*b/2\n    return a\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle from the lengths of its sides.\n    '''\n    a=a+b+c\n    return a\ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram from the length of its sides.\n    '''\n    a=a*b\n    return a\ndef perimeter_parallelogram(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram from the length of its sides.\n    '''\n    a=2*(a+b)\n    return a\ndef area_trapezoid(a,b,c):\n    '''\n    Write a function to find the area of a trapezoid from the lengths of its sides.\n    '''\n    a=a+b\n    c=a+c\n    a=a*b/2\n    return a\ndef perimeter_trapezoid(a,b,c):\n    '''\n    Write a function to find the perimeter of a trapezoid from the lengths of its sides.\n    '''\n    a=a+b+c\n    a=a-2*(a/2)\n    return a\ndef area_kite(a):\n    '''\n    Write a function to find the area of a kite from its length.\n    '''\n    a=math.sqrt(3)*a\n    return a\ndef circumference_kite(a):\n    '''\n    Write a function to find the circumference of a kite from its length.\n    '''\n    a=a*4\n    return a\ndef area_rhombus(a):\n    '''\n    Write a function to find the area of a rhombus from the length of its sides.\n    '''\n    a=a*a\n    return a\ndef perimeter_rhombus(a):\n    '''\n    Write a function to find the perimeter of a rhombus from the length of its sides.\n    '''\n    a=4*a\n    return a\ndef area_kite_b(a,b,c):\n    '''\n    Write a function to find the area of a kite with its length and radius.\n    '''\n    a=a*math.sqrt(3)/2\n    return a\ndef circumference_kite_b(a,b,c):\n    '''\n    Write a function to find the circumference of a kite with its length and radius.\n    '''\n    a=2*math.pi*(a+b)\n    return a\ndef area_rectangle_b(a,b,c):\n    '",
        "num_ids": 38
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (5 * a)\n    return(perimeter)\n",
        "num_ids": 19
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5 * a)\n",
        "num_ids": 10
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # write your function code here\n    perimeter=5*a\n    return perimeter",
        "num_ids": 21
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter=a*5\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    \n    perimeter = 5*a\n    return(perimeter)\n",
        "num_ids": 19
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    total = 0\n    for _ in s.split(\" \"):\n        if _.strip() == \"std\":\n            total += 1\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if not isinstance(s,str):\n        raise TypeError(\"Invalid input\")\n    else:\n        n = len(s)\n        x = 0\n        for i in range(n-2):\n            if s[i] =='s' and s[i+1] == 'd' and s[i+2] == 't':\n                x += 1\n        return x\n        \n        \n    \n",
        "num_ids": 98
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    #return s.count('std')\n    cnt = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            cnt += 1\n    return cnt\n",
        "num_ids": 57
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # return len([i for i in range(len(s)-3) if s[i:i+3] =='std'])\n    occurance = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            occurance += 1\n    return occurance\n",
        "num_ids": 79
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    cnt = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std':\n            cnt += 1\n    return cnt\n",
        "num_ids": 47
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+4] == \"std\":\n            count = count + 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i:i+3]=='std':\n            count+=1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = [int(item) if isinstance(item, int) or isinstance(item, float) else item for item in test_tuple]\n    return all(isinstance(item, type(test_list[0])) for item in test_list)\n",
        "num_ids": 65
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if isinstance(test_tuple[0], test_tuple[1]):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    l = []\n    for i in test_tuple:\n        l.append(type(i))\n    if len(set(l)) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)>1:\n        first_element = type(test_tuple[0])\n        if first_element == type(test_tuple[1]):\n            for i in test_tuple:\n                if first_element!= type(i):\n                    return False\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 93
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple[0]) == type(test_tuple[1]):\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for x in test_tuple:\n        data_types.append(type(x))\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef check_if_tuple_has_all_strings(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple are of type string.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef check_if_tuple_has_all_integers(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple are of type integer.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef extract_tuples_from_list(test_list):\n    '''\n    Write a function to extract all the tuples from the given list of tuples.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef tuple_element_multiplication(test_tuple):\n    '''\n    Write a function to multiply all the elements in tuple.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef remove_tuples_from_list(test_list):\n    '''\n    Write a function to remove all the tuples from the given list of tuples.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef return_pythagorean_tuples(test_tuple):\n    '''\n    Write a function that will return all the pythagorean tuples from given tuple.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef sort_tuples_by_number_of_elements(test_tuple):\n    '''\n    Write a function that will sort the given tuple according to the number of elements in each tuple.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef swap_first_and_last_tuples(test_tuple):\n    '''\n    Write a function that will swap first and last elements of the tuple.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef remove_first_and_last_tuples(test_tuple):\n    '''\n    Write a function that will remove first and last element of the tuple.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef remove_third_element_from_each_tuple(test_tuple):\n    '''\n    Write a function that will remove third element from each tuple.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef return_tuple_from_tuple(test_tuple):\n    '''\n    Write a function that will return a tuple from a given tuple.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef return_new_tuple_with_tuple_length(test_tuple):\n    '''\n    Write a function that will return a new tuple with each element of given tuple changed by +1.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef tuple_to_list(test_tuple):\n    '''\n    Write a function that will convert a tuple to a list.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef list_to_tuple(test_list):\n    '''\n    Write a function that will convert a list to a tuple.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef tuple_to_dictionary(test_tuple):\n    '''\n    Write a function that will convert a tuple to a dictionary.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef list_to_dictionary(test_list):\n    '''\n    Write a function that will convert a list to a dictionary.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef convert_dict_to_tuple(test_dict):\n    '''\n    Write a function that will convert a dictionary to a tuple.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef convert_dict_to_list(test_dict):\n    '''\n    Write a function that will convert a dictionary to a list.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef return_tuple_from_dictionary(test_dict):\n    '''\n    Write a function that will return a tuple from a given dictionary.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef change_all_tuple_values_in_list(test_list):\n    '''\n    Write a function that will change all the tuple values in list.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef remove_all_tuples_from_list(test_list):\n    '''\n    Write a function that will remove all the tuples from a given list.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef sort_dictionary_keys_by_length(test_dict):\n    '''\n    Write a function that will sort dictionary keys by length.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef sort_list_of_tuples(test_list):\n    '''\n    Write a function that will sort a list of tuples according to 2nd element of each tuple.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef sort_list_of_tuples_by_1st_element(test_list):\n    '''\n    Write a function that will sort a list of tuples according to 1st element of each tuple.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef sort_list_of_tuples_by_2nd_element(test_list):\n    '''\n    Write a function that will sort a list of tuples according to 2nd element of each tuple.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef sort_dictionary_keys_alphabetically(test_dict):\n    '''\n    Write a function that will sort dictionary keys alphabetically.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef sort_dictionary_keys_numerically(test_dict):\n    '''\n    Write a function that will sort dictionary keys numerically.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef sort_list_of_tuples_by_2nd_element_descending(test_list):\n    '''\n    Write a function that will sort list of tuples by 2nd element in descending order.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef sort_list_of_tuples_by_2nd_element_ascending(test_list):\n    '''\n    Write a function that will sort list of tuples by 2nd element in ascending order.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef sort_list_of_tuples_by_1st_element_descending(test_list):\n    '''\n    Write a function that will sort list of tuples by 1st element in descending order.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef sort_list_of_tuples_by_1st_element_ascending(test_list):\n    '''\n    Write a function that will sort list of tuples by 1st element in ascending order.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef sort_dictionary_keys_by_length_ascending(test_dict):\n    '''\n    Write a function that will sort dictionary keys by length in ascending order.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef sort_dictionary_keys_by_length_descending(test_dict):\n    '''\n    Write a function that will sort dictionary keys by length in descending order.\n    '''\n    \n    # TODO: Write the function\n    pass\n    \ndef swap_tuples_in_list(test_list):\n    '''\n    Write a function that will swap all the tuples in list.\n    '''\n    \n",
        "num_ids": 4
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_list = list(test_tuple)\n    for item in tuple_list:\n        if isinstance(item, int) is False:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return False\n    return type(test_tuple[0]) == type(test_tuple[1])\n",
        "num_ids": 41
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    #create a new array that will hold the number of times x occurs\n    new_arr = [0] * 100\n    #get the index of the x in the new array by using the binary search algorithm\n    index = binary_search(arr, 0, n - 1, x, new_arr)\n    #if the index is negative then x is not in the given array\n    if index < 0:\n        return False\n    #check if the number of times x occurs is greater than n/2\n    if new_arr[index] > n / 2:\n        return True\n    #if the number of times x occurs is not greater than n/2, then x is not the majority element\n    return False\n",
        "num_ids": 161
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    j = n-1\n    mid = 0\n    \n    while i < j:\n        mid = i + (j-i)//2\n        \n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            j = mid - 1\n        else:\n            i = mid + 1\n            \n    if i < n and arr[i] == x:\n        return True\n    return False\n    \n    \n    # if x in arr:\n    #     return True\n    # return False\n",
        "num_ids": 133
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return None\n    if arr[0] == x:\n        return True\n    if arr[n-1] == x:\n        return True\n    if x > arr[n//2]:\n        return is_majority(arr[n//2:], n - n//2, x)\n    if x < arr[n//2]:\n        return is_majority(arr[:n//2], n - n//2, x)\n    if x == arr[n//2]:\n        return True\n    return False\n",
        "num_ids": 128
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(0, n):\n        if arr[i] == x:\n            count = count + 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) == 0:\n        return False\n    count = 0\n    if n%2!= 0:\n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n        return True if count > n/2 else False\n    else:\n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n        if count > n/2:\n            return True\n        else:\n            return False",
        "num_ids": 115
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n-1\n    while left <= right:\n        mid = left + (right-left)//2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n",
        "num_ids": 81
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n//2\n",
        "num_ids": 34
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return x == arr[0] or arr[1]\n    count = 1\n    for i in range(1, n):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            break\n    return count <= 0\n",
        "num_ids": 94
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[n-1] == x:\n        return True\n    if arr[n//2] == x:\n        return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s = 0\n    while (n): \n        s += n & 1\n        n >>= 1\n    return s\ndef reverse_in_place(n): \n    '''\n    Write a python function to reverse the digits of a given number.\n    '''\n    rev = 0\n    while (n): \n        rev = rev * 10 + n % 10\n        n //= 10\n    return rev\ndef get_missing_number(list): \n    '''\n    Write a python function to print the missing number in a given list.\n    '''\n    miss = 0\n    for i in range(len(list)): \n        miss ^= list[i]\n    for i in range(len(list) + 1): \n        miss ^= i\n    return miss\ndef get_all_primes_in_range(n): \n    '''\n    Write a python function to return all the primes in a given range.\n    '''\n    visited = [0] * (n + 1)\n    primes = []\n    for i in range(2, n + 1): \n        if (visited[i] == 0): \n            primes.append(i)\n            for j in range(i, n + 1, i): \n                visited[j] = 1\n    return primes\ndef is_prime(n): \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if (n == 1): \n        return False\n    elif (n == 2): \n        return True\n    else: \n        for i in range(2, int(n / 2) + 1): \n            if (n % i == 0): \n                return False\n        return True\ndef sum_of_array_elements(arr): \n    '''\n    Write a python function to return the sum of all the elements of a given array.\n    '''\n    sum = 0\n    for i in range(len(arr)): \n        sum += arr[i]\n    return sum\ndef count_triplets(arr, r): \n    '''\n    Write a python function to return the count of all the triplets present in a given array having sum of elements as r.\n    '''\n    count = 0\n    for i in range(len(arr) - 2): \n        for j in range(i + 1, len(arr) - 1): \n            for k in range(j + 1, len(arr)): \n                if (arr[i] + arr[j] + arr[k] == r): \n                    count += 1\n    return count\ndef find_all_triplets(arr, r): \n    '''\n    Write a python function to print all the triplets that sum to a given value.\n    '''\n    for i in range(0, len(arr) - 2): \n        for j in range(i + 1, len(arr) - 1): \n            for k in range(j + 1, len(arr)): \n                if (arr[i] + arr[j] + arr[k] == r): \n                    print(\"%d, %d, %d\" %(arr[i], arr[j], arr[k]))\ndef segregate(arr, n): \n    '''\n    Write a python function to segregate even and odd numbers in a given array.\n    '''\n    j = 0\n    for i in range(0, n): \n        if (arr[i] & 1): \n            temp = arr[i] \n            arr[i] = arr[j] \n            arr[j] = temp \n            j += 1\ndef find_largest_index(arr, n): \n    '''\n    Write a python function to find the index of the largest element in a given array.\n    '''\n    max_index = 0\n    for i in range(1, n): \n        if (arr[i] > arr[max_index]): \n            max_index = i\n    return max_index\ndef remove_duplicates(arr, n): \n    '''\n    Write a python function to remove duplicate elements from a sorted array.\n    '''\n    j = 0\n    for i in range(0, n - 1): \n        if (arr[i]!= arr[i + 1]): \n            arr[j] = arr[i] \n            j += 1\n    arr[j] = arr[n - 1] \n    return j\ndef next_greatest_letter(arr, n, x): \n    '''\n    Write a python function to find the smallest element in a given array greater than the given value.\n    '''\n    for i in range(n): \n        if (arr[i] > x): \n            return arr[i]\n    return \"No such element found!\"\ndef find_n_digit_number(n, digit): \n    '''\n    Write a python function to print all n digit numbers in the form of a list.\n    '''\n    number = 10**(n-1)\n    while(number >= 10): \n        print_list(number)\n        number = number - 10\n    print_list(number)\ndef print_list(n): \n    '''\n    Write a python function to print all the elements of a given array in a column fashion.\n    '''\n    for i in range(n): \n        print(i, end=\" \")\ndef is_anagram(str1, str2): \n    '''\n    Write a python function to check if the two given strings are anagrams.\n    '''\n    if (sorted(str1) == sorted(str2)): \n        return True\n    return False\ndef move_zeros(arr): \n    '''\n    Write a python function to move all zeros to the end of a given array.\n    '''\n    for i in range(len(arr) - 1, -1, -1): \n        if (arr[i] == 0): \n            temp = arr[i] \n            arr[i] = arr[i - 1] \n            arr[i - 1] = temp\ndef get_zeros(arr): \n    '''\n    Write a python function to return all the zeros present in a given array.\n    '''\n    count = 0\n    for i in range(len(arr)): \n        if (arr[i] == 0): \n            count += 1\n    return count\ndef print_subsets(arr, n): \n    '''\n    Write a python function to print all the subsets of a given array.\n    '''\n    return print_subsets_util(arr, 0, n, 0)\ndef print_subsets_util(arr, idx, n, k): \n    '''\n    Write a recursive python function to print all the subsets of a given array.\n    '''\n    if (idx == n): \n        print(k, end=\" \")\n        return\n    print_subsets_util(arr, idx + 1, n, k + [arr[idx]])\n    print_subsets_util(arr, idx + 1, n, k)\ndef sort_by_columns(mat, n, m): \n    '''\n    Write a python function to sort a given matrix by column.\n    '''\n    temp = [[0] * m for i in range(n)]\n    for j in range(m): \n        for i in range(n): \n            temp[i][j] = mat[i][j]\n    for i in range(n): \n        temp[i] = sorted(temp[i])\n    k = 0\n    for j in range(m): \n        for i in range(n): \n            mat[i][j] = temp[i][k]\n            k += 1\ndef rotate_matrix_by_90_degree(mat, n, m): \n    '''\n    Write a python function to rotate a given matrix by 90 degree.\n    '''\n    temp = [[0] * m for i in range(n)]\n    for i in range(m): \n        for j in range(n): \n            temp[i][j] = mat[n - j - 1][i]\n    mat = temp\ndef is_cyclic(graph, n): \n    '''\n    Write a python function to check if a graph is cyclic or not.\n    '''\n    visited = [False] * ",
        "num_ids": 11
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 31
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    while (n): \n        c += n & 1\n        n >>= 1\n    return c \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "num_ids": 13
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    while (n): \n        set_bits += n & 1\n        n >>= 1\n    return set_bits\n",
        "num_ids": 37
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "num_ids": 13
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c=0\n    while (n): \n        c += n & 1\n        n >>= 1\n    return c \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst=[]\n    for i in range(len(str)):\n        if i%2!=0:\n            lst.append(str[i])\n    return ''.join(lst)\n",
        "num_ids": 51
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_str_char = []\n    if len(str) < 2:\n        return str\n    else:\n        for i in range(1,len(str),2):\n            odd_str_char.append(str[i])\n        return ''.join(odd_str_char)\n",
        "num_ids": 71
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = []\n    for i in range(len(str)):\n        if i%2 == 0:\n            lst.append(str[i])\n    return ''.join(lst)\n",
        "num_ids": 50
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    s=''\n    for i in str:\n        if(i%2==0):\n            s+=i\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    out=''\n    for i in range(len(str)):\n        if i%2!=0:\n            out+=str[i]\n    return out\n",
        "num_ids": 41
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str1 = list(str)\n    str2 = []\n    for i in range(0, len(str1)):\n        if i%2 == 0:\n            str2.append(str1[i])\n    str3 = ''.join(str2)\n    print(str3)\n",
        "num_ids": 72
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # To take input from the user\n    # str = input(\"Enter a string: \")\n",
        "num_ids": 24
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if not isinstance(str,str):\n        return None\n    list_str = list(str)\n    for i in range(len(list_str)):\n        if i % 2 == 0:\n            list_str[i] =''\n    return \"\".join(list_str)\n",
        "num_ids": 71
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # str = \"abcd1234\"\n    # for i in range(1,len(str)):\n    #     print(\"str[i] =\",str[i])\n    #     print(\"str[i-1] =\",str[i-1])\n    #     if int(str[i]) % 2 == 0 and int(str[i-1]) % 2!= 0:\n    #         print(\"deleting \",str[i])\n    #         del str[i]\n    #     else:\n    #         print(\"value is even\")\n    # return str\n",
        "num_ids": 138
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([i for i in str if str.index(i) % 2 == 0])\n",
        "num_ids": 26
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    #return min(a,b,c)\n    if(a<b):\n        if(a<c):\n            return a\n        else:\n            return c\n    else:\n        if(b<c):\n            return b\n        else:\n            return c\n",
        "num_ids": 66
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return a if a < b and a < c else (b if b < c else c)\n",
        "num_ids": 24
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return (a,b,c) [n < m for n, m in ((a,b), (b,c), (a,c))].count(True) == 1\n",
        "num_ids": 43
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    elif c<a and c<b:\n        return c\n",
        "num_ids": 49
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n",
        "num_ids": 37
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b:\n        if b<=c:\n            return c\n        else:\n            return b\n    else:\n        if a<=c:\n            return c\n        else:\n            return a\n",
        "num_ids": 54
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min=a if a<b else b\n    min=min if min<c else c\n    return min\n",
        "num_ids": 28
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if(i & n!= 0):\n            return False\n    return True\n    \n",
        "num_ids": 36
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if i & n!= i:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    temp = n\n    while(temp):\n        rem = temp % 2\n        temp //= 2\n        if rem == 0:\n            l = l + 1\n        else:\n            r = r - 1\n            if l > r:\n                return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i)\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>=l:\n        for i in range(l,r+1):\n            if i%2==0:\n                print(i,end=\" \")\n            else:\n                print(i,end=\" \")\n    else:\n        print(\"invalid input\")\ndef all_Bits_Set_In_The",
        "num_ids": 79
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # return 0b
        "num_ids": 1996
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if bin(i)!= bin(i&n):\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(n<0 or l<0 or r<0):\n        return False\n    return (2**n-1)^((2**l)-1)^((2**r)-1) == (2**n-1)\n",
        "num_ids": 56
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def all_bits_set(n):\n        if n == 0:\n            return 1\n        else:\n            return n & (n-1)\n",
        "num_ids": 38
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & (n-1)) == 0) and ((l & (l-1)) == 0) and ((r & (r-1)) == 0)\n",
        "num_ids": 40
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    while n>0:\n        remainder = n%2\n        if remainder == 1:\n            return False\n        n = n//2\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    left_index = 0\n    right_index = n - 1\n",
        "num_ids": 18
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i, j = 0, 0\n    while j < n:\n        if arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        j += 1\n    return arr\n",
        "num_ids": 61
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if not arr or n > len(arr):\n        return False\n",
        "num_ids": 18
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = 0\n    while (j < n) and (i < n):\n        if (arr[i] < 0) and (arr[j] >= 0):\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            j += 1\n        elif (arr[i] < 0):\n            i += 1\n        else:\n            i += 1\n            j += 1\n    return arr\n",
        "num_ids": 113
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        if arr[start] < 0:\n            start += 1\n        else:\n            arr[start], arr[end] = arr[end], arr[start]\n            end -= 1\n    return arr\n",
        "num_ids": 71
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = [i for i in arr if i >= 0]\n    neg = [i for i in arr if i < 0]\n    \n    neg_i = 0\n    pos_i = 0\n",
        "num_ids": 48
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        for j in range(n-1, i, -1):\n            if arr[j] < 0 and arr[i] > 0:\n                arr[j], arr[i] = arr[i], arr[j]\n            elif arr[j] > 0 and arr[i] < 0:\n                arr[j], arr[i] = arr[i], arr[j]\n    return arr\n",
        "num_ids": 104
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    left, right = 0, len(arr)-1\n    while left <= right:\n        if arr[left] < 0 and arr[right] >= 0:\n            arr[left], arr[right] = arr[right], arr[left]\n        elif arr[left] >= 0 and arr[right] < 0:\n            left += 1\n            continue\n        elif arr[left] < 0 and arr[right] < 0:\n            left += 1\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n    return arr\n",
        "num_ids": 130
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low, high = 0, n - 1\n    while low < high:\n        if arr[low] < 0 and arr[high] >= 0:\n            arr[low], arr[high] = arr[high], arr[low]\n            low += 1\n            high -= 1\n        elif arr[low] < 0 and arr[high] < 0:\n            high -= 1\n        elif arr[low] >= 0 and arr[high] < 0:\n            low += 1\n        elif arr[low] >= 0 and arr[high] >= 0:\n            low += 1\n            high -= 1\n    return arr\n",
        "num_ids": 144
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Given an array of integers arr and an integer n, modify the array so that:\n    # The first n elements in the array contain the first n elements in arr, in their original order.\n    # All elements that are between the first n elements and the remaining elements maintain their relative order in the modified array.\n    # If n exceeds the length of the input array, pad the end of the array with negative elements so that the returned array contains n elements.\n    # Note: You are not allowed to mutate the input array.\n",
        "num_ids": 117
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    print(str1.replace(' ','%s'%char))\n",
        "num_ids": 19
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char is None:\n        return str1\n    else:\n        return str1.replace(\" \",\"\")\n",
        "num_ids": 29
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','%s')\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s'%char)\n",
        "num_ids": 18
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = 'This is a string.  This is another string.'\n    char = '*'\n    return str1.replace(\" \",char)\n",
        "num_ids": 37
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s')%(char)\n",
        "num_ids": 19
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #create empty list\n    l_list=[]\n    for i in range(n):\n        #find max value and push into list\n        heapq.heappush(l_list,list1[i])\n    return l_list\n    #return l_list[0]\n",
        "num_ids": 69
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    new_list = []\n    heapq.heapify(list1)\n    for i in range(n):\n        new_list.append(heapq.heappop(list1))\n    return new_list\n",
        "num_ids": 56
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(max(list1))\n        list1.remove(max(list1))\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)\n",
        "num_ids": 29
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    my_list=[]\n    heapq.heapify(my_list)\n    for i in range(n):\n        heapq.heappush(my_list,list1[i])\n    return my_list\n",
        "num_ids": 57
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    list1=sorted(list1)\n    for i in range(0,n):\n        list2.append(list1[-i-1])\n    return list2\n",
        "num_ids": 50
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # # '''\n    # # nlargest return the items of list with the n largest keys\n    # # '''\n    # # return list(map(lambda x:x[1],heapq.nlargest(n, enumerate(list1), key = lambda x:x[1])))\n    # '''\n    # # return the n largest items in list1\n    # '''\n    return sorted(list1)[-n:]\n",
        "num_ids": 13
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq._heapify_max(list1)\n    return [heapq._heappop_max(list1) for _ in range(n)]\n",
        "num_ids": 41
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    def heapify(nums, heap_size, root_index):\n        # Find the index of the largest element from the root.\n        largest = root_index\n        left_child = (2 * root_index) + 1\n        right_child = (2 * root_index) + 2\n",
        "num_ids": 70
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # This function will return the n largest items from the list.\n    # initialize a new list.\n    new_list = []\n    # initialize a min heap.\n    heap = []\n    # add the first n items to the min heap\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    # iterate through the list, adding the item if it is greater than the n largest item in the min heap\n    for j in range(n, len(list1)):\n        if list1[j] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[j])\n    # for every item in the min heap, add it to the new list\n    for k in heap:\n        new_list.append(k)\n    # return the new list.\n    return new_list\n    # nlargest\n    # def nlargest(self,n, iterable, key=None):\n    #     h = []\n    #     heapq.heapify(h)\n    #     if key:\n    #         key_value = lambda x:key(x[1])\n    #     else:\n    #         key_value = lambda x:x\n    #     data = [(key_value(item), item) for item in iterable]\n    #     heapq.heapify(data)\n    #     return [item[1] for item in heapq.nlargest(n, data)]\n",
        "num_ids": 361
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    \n    surf = 2 * math.pi * r * h + 2 * math.pi * r**2\n    \n    print(f'The lateral surface area of a cylinder of radius {r} and height {h} is {surf}.')\n    \n    \nlateralsuface_cylinder(1,2)\nlateralsuface_cylinder(3,4)\n",
        "num_ids": 94
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*r*h+math.pi*r**2\n    \n",
        "num_ids": 28
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    return math.pi*r*r + 2*math.pi*r*h\n",
        "num_ids": 26
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*pi*r*h + 2*pi*r*h)\n",
        "num_ids": 22
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.1415926535\n    return pi*(r**2)*h\n",
        "num_ids": 23
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159\n    A = 2*pi*r*h\n    return A\n",
        "num_ids": 25
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    def pi(r):\n        return (r**2) * math.pi\n    def lateral_surface_area(r, h):\n        return 2 * pi(r) * h + 2 * pi(r) * r\n    return lateral_surface_area(r, h)\n",
        "num_ids": 67
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2)*h\n",
        "num_ids": 17
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    S = 2*pi*r*(r+h)\n    return(S)\n",
        "num_ids": 29
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*np.pi*r*h + 2*np.pi*r**2\n",
        "num_ids": 24
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n",
        "num_ids": 13
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass #TODO\n",
        "num_ids": 9
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n",
        "num_ids": 13
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    #return(l**3)\n    return 6*(l**2)\n",
        "num_ids": 21
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if isinstance(l, int) or isinstance(l, float):\n        if l > 0:\n            return float(l**3)\n        else:\n            return 0\n    else:\n        return None\n",
        "num_ids": 52
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n | (n >> 1)\n    n = n & 0x55555555\n    n = n | (n >> 2)\n    n = n & 0x33333333\n    n = n | (n >> 4)\n    n = n & 0x0f0f0f0f\n    return n\n",
        "num_ids": 77
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n >> 1\n    n = n | n >> 2\n    n = n | n >> 4\n    n = n | n >> 8\n    n = n | n >> 16\n    print(n)\n    return n\n",
        "num_ids": 55
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n ^= n>>1\n",
        "num_ids": 10
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Store the even bits of the number in the first 32 bits \n    # of an integer variable. \n    num = 0\n    for i in range(32): \n        if n & (1 << i)!= 0: \n            num += (1 << i) \n    \n    # set all even bits of the variable \n    return num\n",
        "num_ids": 83
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # 2. using for loop \n    # bit_to_be_set = 0\n    # for i in range(32): \n    #     if n & (1<<i)!= 0: \n    #         bit_to_be_set = bit_to_be_set | (1<<i) \n    # return bit_to_be_set \n",
        "num_ids": 88
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return int(''.join(['1' if int(i) & 1 == 0 else '0' for i in bin(n)[2:]]), 2)\n",
        "num_ids": 39
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    def set_even_bit(n, i):\n        if n & 1 == 1:\n            return n ^ (1 << i)\n        else:\n            return n\n    even_bit_set_num = 0\n    for i in range(32):\n        even_bit_set_num = set_even_bit(even_bit_set_num, i)\n    return even_bit_set_num\n",
        "num_ids": 98
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 1\n    while mask < n:\n        mask = mask << 1\n    mask = mask >> 1\n    return n & mask\n",
        "num_ids": 34
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    ans = 0\n    while (n):\n        ans += (n & 1)\n        n >>= 1\n    return ans\n    \n    \ndef prime_factors(n):\n    '''\n    Write a python function to get prime factors of a number n.\n    '''\n    factors = []\n    for i in range(2, n+1):\n        if n%i == 0:\n            while n%i == 0:\n                factors.append(i)\n                n = n/i\n    return factors\n    \n    \ndef print_prime_factors(n):\n    '''\n    Write a python function to print prime factors of a number n.\n    '''\n    for i in range(2, n+1):\n        if n%i == 0:\n            while n%i == 0:\n                print(i),\n                n = n/i\n    return\n    \n    \ndef print_prime_factors_less_than_k(n, k):\n    '''\n    Write a python function to print all prime factors less than k.\n    '''\n    for i in range(2, n+1):\n        if n%i == 0:\n            while n%i == 0:\n                if i < k:\n                    print(i),\n                n = n/i\n    return\n    \n    \ndef print_prime_factors_greater_than_k(n, k):\n    '''\n    Write a python function to print all prime factors greater than k.\n    '''\n    for i in range(2, n+1):\n        if n%i == 0:\n            while n%i == 0:\n                if i > k:\n                    print(i),\n                n = n/i\n    return\n    \n    \ndef print_greater_than_k(n, k):\n    '''\n    Write a python function to print all numbers greater than k.\n    '''\n    for i in range(n, k-1, -1):\n        print(i),\n    return\n    \n    \ndef print_smaller_than_k(n, k):\n    '''\n    Write a python function to print all numbers smaller than k.\n    '''\n    for i in range(n, k+1):\n        print(i),\n    return\n    \n    \ndef print_divisors_greater_than_k(n, k):\n    '''\n    Write a python function to print all divisors greater than k.\n    '''\n    for i in range(1, n+1):\n        if n%i == 0:\n            if i > k:\n                print(i),\n    return\n    \n    \ndef print_divisors_smaller_than_k(n, k):\n    '''\n    Write a python function to print all divisors smaller than k.\n    '''\n    for i in range(1, n+1):\n        if n%i == 0:\n            if i < k:\n                print(i),\n    return\n    \n    \ndef print_divisors_less_than_k(n, k):\n    '''\n    Write a python function to print all divisors smaller than k.\n    '''\n    for i in range(1, n+1):\n        if n%i == 0:\n            if i < k:\n                print(i),\n    return\n    \n    \ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if (n%i) == 0:\n                return False\n        return True\n    else:\n        return False\n        \n        \ndef print_all_primes_less_than_k(n, k):\n    '''\n    Write a python function to print all primes less than k.\n    '''\n    for i in range(2, n+1):\n        if is_prime(i):\n            if i < k:\n                print(i),\n    return\n    \n    \ndef print_all_primes_greater_than_k(n, k):\n    '''\n    Write a python function to print all primes greater than k.\n    '''\n    for i in range(n, k-1, -1):\n        if is_prime(i):\n            print(i),\n    return\n    \n    \ndef print_all_non_primes_less_than_k(n, k):\n    '''\n    Write a python function to print all non primes less than k.\n    '''\n    for i in range(2, n+1):\n        if not is_prime(i):\n            if i < k:\n                print(i),\n    return\n    \n    \ndef print_all_non_primes_greater_than_k(n, k):\n    '''\n    Write a python function to print all non primes greater than k.\n    '''\n    for i in range(n, k-1, -1):\n        if not is_prime(i):\n            print(i),\n    return\n    \n    \ndef print_all_multiples_of_k(n, k):\n    '''\n    Write a python function to print all multiples of k.\n    '''\n    for i in range(k, n+1, k):\n        print(i),\n    return\n    \n    \ndef print_all_multiples_less_than_k(n, k):\n    '''\n    Write a python function to print all multiples of k.\n    '''\n    for i in range(k, n+1, -k):\n        print(i),\n    return\n    \n    \ndef is_prime_in_list(n, l):\n    '''\n    Write a python function to check if a number is prime or not in a list.\n    '''\n    for i in l:\n        if n%i == 0:\n            return False\n    return True\n    \n    \ndef print_all_prime_numbers_less_than_k_in_list(n, k, l):\n    '''\n    Write a python function to print all primes less than k in a list.\n    '''\n    for i in range(2, n+1):\n        if is_prime_in_list(i, l):\n            if i < k:\n                print(i),\n    return\n    \n    \ndef print_all_prime_numbers_greater_than_k_in_list(n, k, l):\n    '''\n    Write a python function to print all primes greater than k in a list.\n    '''\n    for i in range(n, k-1, -1):\n        if is_prime_in_list(i, l):\n            print(i),\n    return\n    \n    \ndef print_all_non_prime_numbers_greater_than_k_in_list(n, k, l):\n    '''\n    Write a python function to print all non primes greater than k in a list.\n    '''\n    for i in range(n, k-1, -1):\n        if not is_prime_in_list(i, l):\n            print(i),\n    return\n    \n    \ndef print_all_non_prime_numbers_less_than_k_in_list(n, k, l):\n    '''\n    Write a python function to print all non primes less than k in a list.\n    '''\n    for i in range(2, n+1):\n        if not is_prime_in_list(i, l):\n            if i < k:\n                print(i),\n    return\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    s = str(n)\n    l = len(s)\n    for i in range(l//2 + 1):\n        if s[i]!= s[l-i-1]:\n            return False\n    return True\n    \n    \ndef print_palindrome_numbers_less_than_n(n):\n    '''\n    Write a python function to print all palindrome numbers less than n.\n    '''\n    for i in range(n):\n        if is_palindrome(i):\n            print(i),\n    return\n    \n    \ndef print_palindrome_numbers_greater_tha",
        "num_ids": 49
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    pass # Replace the line below\n",
        "num_ids": 10
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_tup = Counter(test_list)\n    return count_tup\n",
        "num_ids": 22
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [('a',1),('b',2),('a',3),('c',4),('b',1)]\n    \n    uniq_dict = {}\n    for i,j in test_list:\n        if i not in uniq_dict:\n            uniq_dict[i] = j\n        else:\n            uniq_dict[i] += j\n    print(uniq_dict)\n",
        "num_ids": 101
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Your code here\n    dictionary = {}\n    for item in test_list:\n        if item not in dictionary.keys():\n            dictionary[item] = 1\n        else:\n            dictionary[item] += 1\n    return dictionary\n",
        "num_ids": 59
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n",
        "num_ids": 11
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    if not isinstance(test_list, list) or not isinstance(test_list[0], tuple):\n        return \"Invalid input type\"\n    for i in range(len(test_list)):\n        if not isinstance(test_list[i], tuple):\n            return \"Invalid input type\"\n    new_list = []\n    for i in test_list:\n        new_list.append(i[0])\n    a = Counter(new_list)\n    return a\n",
        "num_ids": 115
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # Check for edge cases and return empty dict if there are none\n    if len(test_list) == 0:\n        return {}\n    elif len(test_list) == 1:\n        return {test_list[0]: 1}\n    \n    # Create dictionary and iterate through each tuple\n    dictionary = {}\n    for tuple in test_list:\n        # Check if tuple is already in dictionary\n        if tuple not in dictionary:\n            # Add new tuple to dictionary\n            dictionary[tuple] = 1\n        else:\n            # Increment value of existing key in dictionary\n            dictionary[tuple] += 1\n    return dictionary\n",
        "num_ids": 153
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #create dictionary to store the occurences of each tuple and set all values to 0 \n    dictionary = {}\n    for item in test_list:\n        if item in dictionary.keys():\n            dictionary[item] += 1\n        else:\n            dictionary[item] = 1\n",
        "num_ids": 69
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n",
        "num_ids": 20
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = dict(Counter(test_list))\n    return d\n",
        "num_ids": 18
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [1,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5]\n    counter = {}\n    # Using a for loop for reference\n    # for num in test_list:\n    #     if num not in counter:\n    #         counter[num] = 1\n    #     else:\n    #         counter[num] += 1\n    \n    # Using the Counter class from the collections library for reference\n    counter = Counter(test_list)\n    print(counter)\n    \n    return counter\n",
        "num_ids": 148
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    n = len(str) \n    \n    for i in range(n): \n        for j in range(i, n): \n            subs = str[i:j+1] \n            count = count + 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if not isinstance(str, str) or len(str) == 0:\n        return 0\n    \n    non_empty_substrings = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            if len(str[i:j]) == 0:\n                continue\n            non_empty_substrings += 1\n            \n    return non_empty_substrings\n",
        "num_ids": 102
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    if str == '' or length == 0:\n        return 0\n    ans = length - 1\n    for i in range(length-1):\n        if str[i] == '1' and str[i+1] == '0':\n            ans += 1\n    return ans\n",
        "num_ids": 74
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)): \n        for j in range(i, len(str)): \n            count += 1\n    return count \n",
        "num_ids": 47
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = []\n    for i in range(len(str)):\n        for j in range(i, len(str) + 1):\n            substrings.append(str[i:j])\n    return len(list(filter(lambda x: len(x)!= 0, substrings)))\n",
        "num_ids": 71
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def count_substrings(s):\n        if len(s)==0:\n            return 0\n        else:\n            if s[0]!='0' and s[0]!='1':\n                s = '0' + s\n            if s[-1]!='0' and s[-1]!='1':\n                s = s + '0'\n            s = [i for i in range(len(s))]\n            for i in range(len(s)):\n                s[i] = s[i] + i + 1\n            return len(s)\n    return count_substrings(str)\n",
        "num_ids": 150
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str) == 0:\n        return 0\n    \n    #array to store the substrings length\n    substr_length = []\n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= \"\":\n                substr_length.append(len(str[i:j+1]))\n                \n    return len(substr_length)\n",
        "num_ids": 116
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    sub = []\n    sub.append(str[0])\n    for i in range(1,length):\n        if str[i]!= str[i-1]:\n            sub.append(str[i])\n        else:\n            continue\n    return len(sub)\n",
        "num_ids": 75
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    num_of_substrings = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                num_of_substrings += 1\n    return num_of_substrings\n",
        "num_ids": 69
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    num = 0\n    for i in range(1,n+1):\n        if i < 2:\n            num += m**i\n        elif 2 <= i <= m:\n            num += ((m-1)**(m-i+1))\n    return num",
        "num_ids": 64
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m**n\n",
        "num_ids": 8
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return math.factorial(m+n)//(math.factorial(m)*math.factorial(n))\n",
        "num_ids": 30
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if (n == 0):\n        return 1\n    elif (m == 0):\n        return 0\n    else:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m-1,n-1)\n",
        "num_ids": 71
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return m\n    elif n>1:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-2)\n",
        "num_ids": 71
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Base cases \n    if n == 0: \n        return 1\n    if n == 1: \n        return m\n    #Makes a variable for the bottom result\n    bottom = 0\n    #Makes a variable for the top result\n    top = m\n    #Makes a loop for the m to n-1 ranges\n    for i in range(m,n): \n        #Adds the two numbers together\n        top_new = bottom + top\n        #Adds the top new number to the bottom number\n        bottom = top\n        #Sets the new top number\n        top = top_new\n    #Returns the bottom number\n    return bottom\n",
        "num_ids": 152
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Creating a list of lists for all possible sequences\n    sequences_list = [[]]\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            sequences_list.append([i]*j)\n    return len(sequences_list)\n",
        "num_ids": 73
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n > 2*m:\n        return 0\n    if n == 2:\n        return int((m*(m+1))/2)\n    return get_total_number_of_sequences(m, n-1) + int((m*(m+1))/2 - get_total_number_of_sequences(m-1, n-1))\n    \n",
        "num_ids": 91
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # if m == 1:\n    #     return 0\n    # else:\n    #     return m*(m-1)/2 - (m-n)*(m-1)/2 + (m-n+1)*(m-2*n+1)/2\n",
        "num_ids": 64
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1,list2)\n    list1.pop()\n    list1.extend(list2)\n    print(list1)\n",
        "num_ids": 37
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) >= len(list2):\n        for i in range(len(list2)):\n            list1[i] = list2[i]\n        list1[len(list2)] = list1[len(list1)-1]\n        list1.pop(len(list1)-1)\n    else:\n        for i in range(len(list1)):\n            list2[i] = list1[i]\n        list2[len(list1)] = list2[len(list2)-1]\n        list2.pop(len(list2)-1)\n    return list1, list2\n",
        "num_ids": 150
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n",
        "num_ids": 13
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0 and len(list2) == 0:\n        return []\n    elif len(list1)!= 0 and len(list2) == 0:\n        return list1\n    else:\n        list1[-1] = list2\n        return list1\n",
        "num_ids": 70
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[:]\n    return list1\n",
        "num_ids": 20
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for x in list2:\n        list1.append(x)\n    return list1\n",
        "num_ids": 31
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count+=1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    ",
        "num_ids": 11
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return(len(str1))\n",
        "num_ids": 11
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str_len = len(str1)\n    print(str_len)\n",
        "num_ids": 21
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    start = int(math.sqrt(N))\n    if math.sqrt(N) == start:\n        return (2*start + 1)**2\n    else:\n        return (start+1)**2\n        \ndef HCF_and_LCM(A, B):\n    '''\n    Write a Python program to compute the HCF and LCM of two numbers.\n    '''\n    \n    num1=int(A)\n    num2=int(B)\n    \n    while num1>0 and num2>0:\n        if num1>num2:\n            num1=num1-num2\n        else:\n            num2=num2-num1\n    print(num1)\n    print(num2)\n    print(num1*num2)\n    \ndef sum_of_digits(num):\n    '''\n    Write a Python function that takes a positive integer and returns the sum of the absolute \n    differences of all the pairs of its digits.\n    '''\n    \n    x=str(num)\n    sum=0\n    for i in range(0,len(x)):\n        for j in range(i+1,len(x)):\n            sum=sum+abs(int(x[i])-int(x[j]))\n    return sum\n    \ndef prime_or_not(num):\n    '''\n    Write a Python program to check whether a given number is a prime number or not.\n    '''\n    if num>1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\n    \ndef lcm(num1,num2):\n    '''\n    Write a Python program to compute the L.C.M. of two input number.\n    '''\n    \n    x=num1\n    y=num2\n    while num2!=0:\n        temp=num2\n        num2=num1%num2\n        num1=temp\n    return num1\n    \ndef fibonacci(num):\n    '''\n    Write a Python program to generate the Fibonacci Sequence.\n    '''\n    \n    print(0)\n    if num<1:\n        return 0\n    elif num==1:\n        return 1\n    else:\n        return fibonacci(num-1)+fibonacci(num-2)\n        \ndef fibonacci_even(num):\n    '''\n    Write a Python program to generate the even Fibonacci Sequence.\n    '''\n    \n    x=1\n    y=0\n    \n    if num<1:\n        return 0\n    elif num==1:\n        return 1\n    else:\n        while num>=2:\n            y=x+y\n            x=y\n            num=num-1\n    return y\n    \ndef fibonacci_odd(num):\n    '''\n    Write a Python program to generate the odd Fibonacci Sequence.\n    '''\n    \n    x=0\n    y=1\n    \n    if num<1:\n        return 0\n    elif num==1:\n        return 1\n    else:\n        while num>=2:\n            x=y\n            y=x+y\n            num=num-1\n    return x\n    \ndef check_armstrong_or_not(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not.\n    '''\n    \n    x=len(str(num))\n    sum=0\n    while x>0:\n        y=num%10\n        sum=sum+(y**x)\n        num=num//10\n        x=x-1\n    if num==sum:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \ndef check_armstrong_or_not_v2(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not. Using function.\n    '''\n    \n    def sum_of_digit(num):\n        return sum(int(i) for i in str(num))\n    \n    x=len(str(num))\n    sum=0\n    while x>0:\n        y=num%10\n        sum=sum+(y**x)\n        num=num//10\n        x=x-1\n    if num==sum:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \ndef check_armstrong_or_not_v3(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not. Using function.\n    '''\n    \n    x=len(str(num))\n    sum=0\n    y=num\n    while x>0:\n        y=y%10\n        sum=sum+math.pow(y,x)\n        x=x-1\n    if sum==num:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \ndef check_armstrong_or_not_v4(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not. Using function.\n    '''\n    \n    x=len(str(num))\n    sum=0\n    y=num\n    while x>0:\n        y=y%10\n        sum=sum+math.pow(y,x)\n        x=x-1\n    if sum==num:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \ndef check_armstrong_or_not_v5(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not. Using function.\n    '''\n    \n    x=len(str(num))\n    sum=0\n    y=num\n    while x>0:\n        y=y%10\n        sum=sum+math.pow(y,x)\n        x=x-1\n    if sum==num:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \ndef check_armstrong_or_not_v6(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not. Using function.\n    '''\n    \n    x=len(str(num))\n    sum=0\n    y=num\n    while x>0:\n        y=y%10\n        sum=sum+math.pow(y,x)\n        x=x-1\n    if sum==num:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \ndef check_armstrong_or_not_v7(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not. Using function.\n    '''\n    \n    x=len(str(num))\n    sum=0\n    y=num\n    while x>0:\n        y=y%10\n        sum=sum+math.pow(y,x)\n        x=x-1\n    if sum==num:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \ndef check_armstrong_or_not_v8(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not. Using function.\n    '''\n    \n    x=len(str(num))\n    sum=0\n    y=num\n    while x>0:\n        y=y%10\n        sum=sum+math.pow(y,x)\n        x=x-1\n    if sum==num:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \ndef is_leap_year(year):\n    '''\n    Write a Python program to check whether a year is a leap year or not.\n    '''\n    \n    if year%4==0 and year%100!=0 or year%400==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \ndef check_palindrome(num):\n    '''\n    Write a Python program to check whether a number is a palindrome or not.\n    '''\n    \n    num1=num\n    num2=0\n    while num1>0:\n        num2=num2*10+num1%10\n        num1=num1//10\n    if num1==num2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
        "num_ids": 72
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(math.sqrt(N) - math.floor(math.sqrt(N)) == 0): \n        return (int(math.sqrt(N))) \n    else: \n        return (int(math.sqrt(N)) + 1) \ndef fun(n): \n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if(n<0): \n        return (0) \n    elif(n==0 or n==1): \n        return (1) \n    else: \n        return (n * fun(n - 1)) \ndef fib(n): \n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    if(n<0): \n        return (0) \n    elif(n==0): \n        return (0) \n    elif(n==1 or n==2): \n        return (1) \n    else: \n        return (fib(n-2) + fib(n-1)) \ndef nCr(n, r): \n    '''\n    Write a function to calculate the number of combinations of r items taken from n items without replacement.\n    '''\n    if(n==0): \n        return (0) \n    elif(n<0 or r<0): \n        return (0) \n    elif(n==1 or r==1): \n        return (1) \n    else: \n        return (nCr(n-1, r) + nCr(n-1, r-1)) \ndef nPr(n, r): \n    '''\n    Write a function to calculate the number of permutations of r items taken from n items without replacement.\n    '''\n    if(n==0): \n        return (0) \n    elif(n<0 or r<0): \n        return (0) \n    elif(n==1 or r==1): \n        return (1) \n    else: \n        return (nPr(n-1, r) + nPr(n-1, r-1)) \ndef numberOfDigits(n): \n    '''\n    Write a function to calculate the number of digits in a number.\n    '''\n    if(n<0): \n        return (0) \n    elif(n==0): \n        return (1) \n    else: \n        return (1 + numberOfDigits(n//10)) \ndef sumOfDigits(n): \n    '''\n    Write a function to calculate the sum of digits of a number.\n    '''\n    if(n<0): \n        return (0) \n    elif(n==0): \n        return (0) \n    elif(n==1 or n==2): \n        return (1) \n    else: \n        return (n%10 + sumOfDigits(n//10)) \ndef reverseNumber(n): \n    '''\n    Write a function to calculate the reverse of a number.\n    '''\n    if(n<0): \n        return (0) \n    elif(n==0): \n        return (0) \n    elif(n==1 or n==2): \n        return (n) \n    else: \n        return (reverseNumber(n//10) * (10) + n%10) \ndef reverse(s): \n    '''\n    Write a function to calculate the reverse of a string.\n    '''\n    if(len(s)<2): \n        return (s) \n    else: \n        return (s[len(s)-1] + reverse(s[0:len(s)-1])) \ndef isPalindrome(n): \n    '''\n    Write a function to calculate whether a number is palindrome or not.\n    '''\n    if(n<0): \n        return (False) \n    elif(n==0): \n        return (True) \n    elif(n==1 or n==2): \n        return (True) \n    else: \n        return (n==reverseNumber(n)) \ndef isPangram(s): \n    '''\n    Write a function to check whether a string is pangram or not.\n    '''\n    if(len(s)<1): \n        return (False) \n    else: \n        return (len(set(s))==26) \ndef check(a): \n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    if(len(a)<1): \n        return (False) \n    else: \n        return (len(set(a))==26) \ndef isPangram(s): \n    '''\n    Write a function to check whether a string is pangram or not.\n    '''\n    if(len(s)<1): \n        return (False) \n    else: \n        return (len(set(s))==26) \ndef factorial(n): \n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if(n<0): \n        return (0) \n    elif(n==0 or n==1): \n        return (1) \n    else: \n        return (n * factorial(n-1)) \ndef factorial(n): \n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if(n<0): \n        return (0) \n    elif(n==0 or n==1): \n        return (1) \n    else: \n        return (n * factorial(n-1)) \ndef factorial(n): \n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if(n<0): \n        return (0) \n    elif(n==0 or n==1): \n        return (1) \n    else: \n        return (n * factorial(n-1)) \ndef factorial(n): \n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if(n<0): \n        return (0) \n    elif(n==0 or n==1): \n        return (1) \n    else: \n        return (n * factorial(n-1)) \ndef factorial(n): \n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if(n<0): \n        return (0) \n    elif(n==0 or n==1): \n        return (1) \n    else: \n        return (n * factorial(n-1)) \ndef factorial(n): \n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if(n<0): \n        return (0) \n    elif(n==0 or n==1): \n        return (1) \n    else: \n        return (n * factorial(n-1)) \ndef factorial(n): \n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if(n<0): \n        return (0) \n    elif(n==0 or n==1): \n        return (1) \n    else: \n        return (n * factorial(n-1)) \ndef factorial(n): \n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if(n<0): \n        return (0) \n    elif(n==0 or n==1): \n        return (1) \n    else: \n        return (n * factorial(n-1)) \ndef factorial(n): \n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if(n<0): \n        return (0) \n    elif(n==0 or n==1): \n        return (1) \n    else: \n        return (n * factorial(n-1)) \ndef factoria",
        "num_ids": 61
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    root = math.ceil(root)\n    return ((root+1)*(root+1))\n",
        "num_ids": 37
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N \n    # here x is the first perfect square greater than N\n    Sqrt = int(math.sqrt(x)) \n    # we find the square root of x, and use it to calculate the next perfect square\n    \n    for i in range(Sqrt, 2, -1):  \n        # here, we are finding the next perfect square greater than N, by first finding the square root of N and then finding the upper bound of the next perfect square.\n        #  we have taken i as the upper bound, so that the next perfect square will be greater than i*i.\n        if (i * i <= x): \n            # this condition checks whether the next perfect square is greater than the square root of N.\n            x = x - i * i \n            # if it is, then we can update our value of x\n            # by decrementing it by i*i, as we are decrementing the upper bound, so the next perfect square greater than N will be less than it.\n        else: \n            # if the next perfect square is greater than the square root of N, then we set x to the square root of N.\n            x = Sqrt * Sqrt \n            # we have updated the value of x, and now it is the next perfect square greater than N.\n            break\n    x += 1\n    # here we have updated x, so the next perfect square greater than N is x.\n    print(\"Next Perfect Square of {} is {}\".format(N, x)) \n    return x ",
        "num_ids": 351
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # return the next perfect square greater than N \n    i = N \n    while i <= N: \n        i = i + 1\n        if (is_perfect_square(i) == True): \n            return i \n    return -1\n    \ndef is_perfect_square(x): \n    # This function returns true if x is a perfect square \n    s = int(math.sqrt(x)) \n    return s*s == x \n    \ndef is_Fibonacci(N): \n    '''\n    Write a python function to check whether a given number is Fibonacci or not.\n    '''\n    # return true if N is Fibonacci otherwise false. \n    # Note : 0 and 1 are Fibonacci \n    if N <= 1: \n        return True\n    if N <= 3: \n        return False\n    else: \n        return is_Fibonacci(N-1) and is_Fibonacci(N-2)\n        \ndef is_prime(N): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    # return true if N is prime otherwise false. \n    # 2 is the only even prime number \n    if (N <= 1): \n        return False\n    if (N <= 3): \n        return True\n    if (N % 2 == 0 or N % 3 == 0): \n        return False\n    # find out the upper bound of the range of numbers to be checked \n    i = 5\n    while (i*i <= N): \n        if (N % i == 0 or N % (i + 2) == 0): \n            return False\n        i = i + 6\n    return True\n    \ndef is_palindrome(N): \n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    # return true if N is palindrome otherwise false. \n    # note : 11 is palindrome, since reversed(11) is 11\n    return str(N) == str(N)[::-1]\n    \ndef is_power(N, M): \n    '''\n    Write a python function to check whether a given number N is power of another given number M.\n    '''\n    # return true if N is power of M otherwise false. \n    if (N == 0): \n        return False\n    if (M == 0): \n        return False\n    if (N == 1): \n        return True\n    if (N % M == 0): \n        return is_power(N/M, M)\n    else: \n        return False\n        \ndef is_power_Optimized(N, M): \n    '''\n    Write a python function to check whether a given number N is power of another given number M.\n    '''\n    # return true if N is power of M otherwise false. \n    if (N == 0): \n        return False\n    if (M == 0): \n        return False\n    if (N == 1): \n        return True\n    if (M == 1): \n        return False\n    if (N % M == 0): \n        return is_power_Optimized(N/M, M)\n    else: \n        return False\n        \ndef reverse_string(s): \n    '''\n    Write a python function to reverse a string. \n    '''\n    # return reverse of s \n    return s[::-1]\n    \ndef reverse_string_Optimized(s): \n    '''\n    Write a python function to reverse a string. \n    '''\n    # return reverse of s \n    return s[::-1]\n    \ndef reverse_words(s): \n    '''\n    Write a python function to reverse words in a string. \n    '''\n    # return reverse of each word in the string s \n    return reverse_string(s.split(\" \")) \n    \ndef reverse_words_Optimized(s): \n    '''\n    Write a python function to reverse words in a string. \n    '''\n    # return reverse of each word in the string s \n    return \" \".join(reverse_string_Optimized(s.split(\" \")))\n    \ndef rotate_matrix(A): \n    '''\n    Write a python function to rotate a matrix by 90 degrees (clockwise)\n    '''\n    # return rotate matrix A 90 degrees in clockwise direction \n    n = len(A)\n    for layer in range(n // 2): \n        first = layer \n        last = n - 1 - layer \n        for i in range(first, last): \n            # save top \n            top = A[layer][i] \n            # left -> top \n            A[layer][i] = A[-i - 1][layer] \n            # bottom -> left \n            A[-i - 1][layer] = A[-layer - 1][-i - 1] \n            # right -> bottom \n            A[-layer - 1][-i - 1] = A[i][-layer - 1] \n            # top -> right \n            A[i][-layer - 1] = top\n    return A\n    \ndef rotate_matrix_Optimized(A): \n    '''\n    Write a python function to rotate a matrix by 90 degrees (clockwise)\n    '''\n    # return rotate matrix A 90 degrees in clockwise direction \n    n = len(A)\n    for layer in range(n // 2): \n        first = layer \n        last = n - 1 - layer \n        for i in range(first, last): \n            # save top \n            top = A[layer][i] \n            # left -> top \n            A[layer][i] = A[-i - 1][layer] \n            # bottom -> left \n            A[-i - 1][layer] = A[-layer - 1][-i - 1] \n            # right -> bottom \n            A[-layer - 1][-i - 1] = A[i][-layer - 1] \n            # top -> right \n            A[i][-layer - 1] = top\n    return A\n    \ndef print_matrix(A): \n    '''\n    Write a python function to print a matrix in a good format.\n    '''\n    for i in range(len(A)): \n        for j in range(len(A[0])): \n            print(A[i][j], end=\" \")\n        print()\n        \ndef print_matrix_Optimized(A): \n    '''\n    Write a python function to print a matrix in a good format.\n    '''\n    for i in range(len(A)): \n        for j in range(len(A[0])): \n            print(A[i][j], end=\" \")\n        print()\n        \ndef count_substring(s, word): \n    '''\n    Write a python function to count the number of substrings of a string starting and ending with a given word.\n    '''\n    # return the count of substrings of s starting and ending with the given word \n    count = 0\n    length = len(word)\n    for i in range(len(s)): \n        if s[i:i+length] == word: \n            count += 1\n    return count\n    \ndef count_substring_Optimized(s, word): \n    '''\n    Write a python function to count the number of substrings of a string starting and ending with a given word.\n    '''\n    # return the count of substrings of s starting and ending with the given word \n    count = 0\n    length = len(word)\n    for i in range(len(s)): \n        if s[i:i+length] == word: \n            count += 1\n    return count\n    \ndef count_substring_table(s, word): \n    '''\n    Write a python function to count the number of substrings of a string starting and ending with a given word.\n    '''\n    # return the count of substrings of s starting and ending with the given word \n    count = 0\n    length = len(word)\n    s_length = len(s)\n    table = [0] * (s_length + 1)\n    for i in range(length): \n        table[i] = s[i]\n    for i in range(length, s",
        "num_ids": 89
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int((math.sqrt(1 + 8 * N)))\n",
        "num_ids": 18
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N > 1):  \n        i = 1 \n        while(i*i <= N): \n            i = i+1\n        return (i-1)\n    else: \n        return 1\ndef is_Perfect_Square(x): \n    s = int(math.sqrt(x)) \n    return s*s == x \ndef next_Perfect_Square_Binary_Search(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number using binary search.\n    '''\n    if(N > 1): \n        low = 1\n        high = N \n        while(low <= high): \n            mid = (low+high)//2\n            if(mid*mid == N): \n                return mid \n            elif(mid*mid < N): \n                low = mid+1\n            else: \n                high = mid-1\n        return low \n    else: \n        return 1\ndef next_Perfect_Square_Linear_Search(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number using linear search.\n    '''\n    if(N > 1): \n        for i in range(1,N): \n            if(i*i == N): \n                return i \n        return N\n    else: \n        return 1\ndef next_Perfect_Square_Binary_Search_Stable(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number using binary search.\n    '''\n    if(N > 1): \n        low = 1\n        high = N \n        while(low <= high): \n            mid = (low+high)//2\n            if(mid*mid == N): \n                return mid \n            elif(mid*mid > N): \n                high = mid-1\n            else: \n                low = mid+1\n        return high \n    else: \n        return 1\ndef next_Perfect_Square_Linear_Search_Stable(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number using linear search.\n    '''\n    if(N > 1): \n        for i in range(1,N): \n            if(i*i == N): \n                return i \n        return N\n    else: \n        return 1\ndef next_Perfect_Square_Binary_Search_Recursive(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number using binary search.\n    '''\n    if(N > 1): \n        low = 1\n        high = N \n        if(low*low == N): \n            return low \n        elif(high*high > N): \n            return high \n        else: \n            mid = (low+high)//2\n            if(mid*mid == N): \n                return mid \n            elif(mid*mid > N): \n                return next_Perfect_Square_Binary_Search_Recursive(mid-1,N) \n            else: \n                return next_Perfect_Square_Binary_Search_Recursive(mid+1,N) \n    else: \n        return 1\ndef next_Perfect_Square_Linear_Search_Recursive(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number using linear search.\n    '''\n    if(N > 1): \n        for i in range(1,N): \n            if(i*i == N): \n                return i \n        return N\n    else: \n        return 1\ndef next_Perfect_Square_Binary_Search_Recursive_Stable(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number using binary search.\n    '''\n    if(N > 1): \n        low = 1\n        high = N \n        if(low*low == N): \n            return low \n        elif(high*high > N): \n            return high \n        else: \n            mid = (low+high)//2\n            if(mid*mid == N): \n                return mid \n            elif(mid*mid > N): \n                return next_Perfect_Square_Binary_Search_Recursive_Stable(mid-1,N) \n            else: \n                return next_Perfect_Square_Binary_Search_Recursive_Stable(mid+1,N) \n    else: \n        return 1\ndef next_Perfect_Square_Linear_Search_Recursive_Stable(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number using linear search.\n    '''\n    if(N > 1): \n        for i in range(1,N): \n            if(i*i == N): \n                return i \n        return N\n    else: \n        return 1\ndef is_Perfect_Square_Binary_Search(N): \n    '''\n    Write a python function to check whether a given number is a perfect square or not using binary search.\n    '''\n    if(N > 1): \n        low = 1\n        high = N \n        while(low <= high): \n            mid = (low+high)//2\n            if(mid*mid == N): \n                return True \n            elif(mid*mid < N): \n                low = mid+1\n            else: \n                high = mid-1\n        return False \n    else: \n        return True\ndef is_Perfect_Square_Linear_Search(N): \n    '''\n    Write a python function to check whether a given number is a perfect square or not using linear search.\n    '''\n    if(N > 1): \n        for i in range(1,N): \n            if(i*i == N): \n                return True \n        return False \n    else: \n        return True\ndef is_Perfect_Square_Binary_Search_Stable(N): \n    '''\n    Write a python function to check whether a given number is a perfect square or not using binary search.\n    '''\n    if(N > 1): \n        low = 1\n        high = N \n        while(low <= high): \n            mid = (low+high)//2\n            if(mid*mid == N): \n                return True \n            elif(mid*mid > N): \n                high = mid-1\n            else: \n                low = mid+1\n        return False \n    else: \n        return True\ndef is_Perfect_Square_Linear_Search_Stable(N): \n    '''\n    Write a python function to check whether a given number is a perfect square or not using linear search.\n    '''\n    if(N > 1): \n        for i in range(1,N): \n            if(i*i == N): \n                return True \n        return False \n    else: \n        return True\ndef is_Perfect_Square_Binary_Search_Recursive(N): \n    '''\n    Write a python function to check whether a given number is a perfect square or not using binary search.\n    '''\n    if(N > 1): \n        low = 1\n        high = N \n        if(low*low == N): \n            return True \n        elif(high*high > N): \n            return False \n        else: \n            mid = (low+high)//2\n            if(mid*mid == N): \n                return True \n            elif(mid*mid > N): \n                return is_Perfect_Square_Binary_Search_Recursive(mid-1,N) \n            else: \n                return is_Perfect_Square_Binary_Search_Recursive(mid+1,N) \n    else: \n        return True\ndef is_Perfect_Square_Linear_Search_Recursive(N): \n    '''\n    Write a python function to check whether a given number is a perfect square or not using linear search.\n    '''\n    if(N > 1): \n        for i in range(1,N): \n            if(i*i == N): \n                return True \n        return False \n    else: \n        return True\ndef is_Perfect_Square_Binary_Searc",
        "num_ids": 66
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i=1\n    while(i*i<=N):\n        i=i+1\n    if(i*i==N):\n        return i\n    return -1\n",
        "num_ids": 44
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x=math.ceil(math.sqrt(N))\n    return (x*x)\n",
        "num_ids": 26
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    Sqrt = int(math.sqrt(N)) \n    Sqrt = (Sqrt + 1) * (Sqrt + 1) \n    if (Sqrt == N): \n        Sqrt = Sqrt + 1\n  \n    return Sqrt \n",
        "num_ids": 71
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr.sort() #sort arr in place\n    n = len(arr) #arr length\n",
        "num_ids": 24
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #Approach 1: Brute force\n    #Time Complexity: O(n^2)\n    #Space Complexity: O(1)\n    max_sum = float(\"-inf\")\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            current_sum = 0\n            for k in range(i, j):\n                current_sum += arr[k]\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n",
        "num_ids": 127
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr) - 1)\n",
        "num_ids": 23
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    def max_sum_in(arr, n):\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n        for i in range(1, n):\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    \n    def max_sum_de(arr, n):\n        max_ending_here = arr[n - 1]\n        max_so_far = arr[n - 1]\n        for i in range(n - 2, -1, -1):\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n",
        "num_ids": 220
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    #O(N)\n    #since we know that there are only 2 subarrays, we can keep track of the max sum of the left and right subarrays\n    #we can then compute the max of those sums\n    max_sum = 0\n    sum_left = 0\n    sum_right = 0\n    for i in range(len(arr)):\n        if i == 0:\n            sum_left += arr[i]\n        else:\n            sum_left = max(arr[i] + arr[i-1], sum_left)\n        if i == len(arr)-1:\n            sum_right += arr[i]\n        else:\n            sum_right = max(arr[i] + arr[i+1], sum_right)\n        max_sum = max(max_sum, sum_left+sum_right)\n",
        "num_ids": 199
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max([sum(arr[i:j]) for i in range(len(arr)) for j in range(i + 1, len(arr))])\n",
        "num_ids": 38
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_ending_here = [None] * len(arr)\n    max_ending_here[0] = arr[0] \n    for i in range(1, len(arr)): \n        max_ending_here[i] = max(max_ending_here[i-1], arr[i]) \n",
        "num_ids": 77
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # store the array in descending order\n    arr.sort(reverse=True)\n    # store the max value at each point\n    max_sum = []\n    # store the sum of the current subsequence\n    current_subsequence = 0\n    # iterate through the array\n    for index in range(len(arr)):\n        # if the array is empty, return 0\n        if not arr:\n            return 0\n        # if the current value is less than the previous value\n        if arr[index] < arr[index-1]:\n            # keep track of the maximum sum seen so far\n            max_sum.append(current_subsequence)\n            # reset the current subsequence sum\n            current_subsequence = 0\n        # add the current value to the current subsequence sum\n        current_subsequence += arr[index]\n    # if the array is empty, return 0\n    if not arr:\n        return 0\n    # add the final subsequence sum to the list\n    max_sum.append(current_subsequence)\n    # return the maximum sum\n    return max(max_sum)\n",
        "num_ids": 253
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum, max_sum + arr[i])\n    return max_sum\n",
        "num_ids": 52
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    tolerance = 0.001\n    x = number / 2.0\n    while True:\n        y = (x + number / x) / 2\n        if abs(y - x) < tolerance:\n            return y\n            break\n        x = y\n",
        "num_ids": 61
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def improve(guess, number):\n        return (guess + number / guess) / 2\n",
        "num_ids": 25
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number+1)//2\n    while x!= y:\n        x = (x + y) // 2\n        y = (x + y) // 2\n    return x\n",
        "num_ids": 52
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number + 1)/2\n    while True:\n        y = 0.5*(x + y)\n        if y == 0:\n            break\n        x = number/y\n    return y\n",
        "num_ids": 56
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while abs(guess**2 - number) >= 0.00000000001:\n        guess = (guess + (number/guess))/2\n    return guess\n",
        "num_ids": 49
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    previous_x = 1\n    previous_previous_x = 0\n",
        "num_ids": 26
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print(\"Error, cannot compute square root of a negative number\")\n        return 0\n    approximation = number / 2.0\n    difference = abs(approximation ** 2 - number)\n    while difference > 0.01:\n        new_approximation = (approximation + (number / approximation)) / 2\n        difference = abs(new_approximation ** 2 - number)\n        approximation = new_approximation\n    print(\"\\nWith the Babylonian Method, the square root of \" + str(number) + \" is approx. \" + str(approximation) + \".\")\n",
        "num_ids": 149
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    while abs(guess**2 - number) > 0.00001:\n        guess = guess + ((number/guess) - guess)/(2*guess)\n    return guess\n    # you may want to add a loop that continues generating\n    # successive guesses until some suitably high precision is reached\n",
        "num_ids": 78
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    current_guess = 1\n    previous_guess = 0\n    while True:\n        previous_guess = current_guess\n        current_guess = (current_guess + number / current_guess) / 2\n        if abs(current_guess - previous_guess) < 0.001:\n            return current_guess\n",
        "num_ids": 85
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    lps = [0 for i in range(n)]\n    lps[0] = 1\n    length = 0\n    i = 1\n    while i < n:\n        if str[i] == str[length]:\n            length += 1\n            lps[i] = length\n            i += 1\n        else:\n            if length!= 0:\n                length = lps[length-1]\n            else:\n                lps[i] = 0\n                i += 1\n    return lps[n-1]\n",
        "num_ids": 132
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n    return L[0][n-1] \ndef print_lps(str): \n    l = lps(str) \n    #print(l)\n    i = 0\n    j = l-1\n    while(j>=0): \n        if str[i]!= str[j]: \n            break\n        print(str[i], end=\"\") \n        i += 1\n        j -= 1\n    print()\n    return\n    \ndef find_shortest_unique_subsequence(arr, n): \n    '''\n    https://www.geeksforgeeks.org/find-shortest-unique-subsequence-string/\n    arr = \"ABCBABBA\"\n    n = len(arr)\n    '''\n    S = set()\n    i = 0\n    j = 0\n    \n    while(i<n and j<n): \n        if arr[i] not in S: \n            S.add(arr[i]) \n            i += 1\n        elif arr[j] not in S: \n            S.add(arr[j]) \n            j += 1\n        else: \n            S.remove(arr[i]) \n            i += 1\n            j += 1\n    return i\n    \ndef print_subsequence(arr, l): \n    '''\n    Given a sequence, find the shortest unique subsequence of that sequence.\n    '''\n    l = lps(arr) \n    print_lps(arr)\n    print(l)\n    print(\"Shortest Unique Subsequence: \")\n    i = 0\n    j = l-1\n    while(j>=0): \n        if arr[i]!= arr[j]: \n            break\n        print(arr[i], end=\"\") \n        i += 1\n        j -= 1\n    print()\n    return\n",
        "num_ids": 107
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    \n    T = [[False for i in range(n)] for j in range(n)] \n    \n    \n    #Table is symmetrical, so only need to compute half\n    for i in range(n): \n        T[i][i] = True\n",
        "num_ids": 71
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n+1)] for x in range(n+1)] \n",
        "num_ids": 36
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n",
        "num_ids": 11
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    # Create a table to store results of subproblems \n    L = [[0 for x in range(n)] for x in range(n)] \n",
        "num_ids": 46
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)]for j in range(n)]\n",
        "num_ids": 30
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # create a table to store results of subproblems \n    L = [[0 for x in range(n)] for x in range(n)] \n    # Str[i][j] = true if str[i:j] is palindromic \n    for i in range(n): \n        L[i][i] = 1\n    for j in range(n): \n        for i in range(j+1): \n            # if str[i] == str[j], then str[i:j] is palindromic if str[i+1] == str[j-1] \n            if str[i] == str[j] and str[i+1] == str[j-1]: \n                L[i][j] = L[i+1][j-1] + 2\n            # else check if L[i+1][j] > L[i][j-1]\n            elif L[i+1][j] > L[i][j-1]: \n                L[i][j] = L[i+1][j] \n            else: \n                L[i][j] = L[i][j-1] \n    return L[0][n-1] \n",
        "num_ids": 297
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    \n    for i in range(n): \n        L[i][i] = 1\n    \n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i + 1][j - 1] + 2\n            else: \n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n",
        "num_ids": 189
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return len(str)\n    \n    if len(str) == 2:\n        if str[0] == str[1]:\n            return 2\n        else:\n            return 1\n",
        "num_ids": 55
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    harmonic_sum = 0\n    \n    for i in range(1, n):\n        harmonic_sum += 1/i\n    \n    return harmonic_sum\n    \n",
        "num_ids": 45
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n",
        "num_ids": 13
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 2:\n        return n\n    return 1/n + harmonic_sum(n-1)\n",
        "num_ids": 28
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1/num for num in range(1, n))\n",
        "num_ids": 19
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # if n = 1, return 1\n    # if n > 1, return 1/n + sum of n - 1 of its own harmonic sum\n",
        "num_ids": 35
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def harmonic_sum_helper(n, acc):\n        if n == 1:\n            return acc\n        return harmonic_sum_helper(n-1, acc+1/n)\n    return harmonic_sum_helper(n, 0)\n",
        "num_ids": 61
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n",
        "num_ids": 25
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # your code here\n",
        "num_ids": 8
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Sort the arrays and initialize a counter variable\n    array_nums1.sort()\n    array_nums2.sort()\n    count = 0\n",
        "num_ids": 38
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [i for i in array_nums1 if i in array_nums2]\n",
        "num_ids": 24
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = list()\n    array_nums1.sort()\n    array_nums2.sort()\n",
        "num_ids": 29
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    i=0\n    j=0\n    intersect_array=[]\n    while i<len(array_nums1) and j<len(array_nums2):\n        if array_nums1[i]==array_nums2[j]:\n            intersect_array.append(array_nums1[i])\n            i=i+1\n            j=j+1\n        elif array_nums1[i]<array_nums2[j]:\n            i=i+1\n        elif array_nums1[i]>array_nums2[j]:\n            j=j+1\n    return intersect_array\narray_nums1=[1,2,3,3,3,3,4,5]\narray_nums2=[1,2,3,4,5]\nintersection_array(array_nums1,array_nums2)",
        "num_ids": 234
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    return list(set1 & set2)\n",
        "num_ids": 41
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    inter = set_nums1.intersection(set_nums2)\n    return list(inter)\n",
        "num_ids": 60
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    nums1 = set(array_nums1)\n    nums2 = set(array_nums2)\n",
        "num_ids": 35
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if not array_nums1 or not array_nums2:\n        return []\n    array_nums1.sort()\n    array_nums2.sort()\n    len1 = len(array_nums1)\n    len2 = len(array_nums2)\n    result = []\n    i,j = 0,0\n    while i < len1 and j < len2:\n        if array_nums1[i] < array_nums2[j]:\n            i += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        else:\n            result.append(array_nums1[i])\n            i += 1\n            j += 1\n    return result\n",
        "num_ids": 179
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            intersection_list.append(num1)\n    return intersection_list\n",
        "num_ids": 52
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a = []\n    for i in array_nums1:\n        if i in array_nums2:\n            a.append(i)\n    return a\n",
        "num_ids": 41
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for t in tup: \n        if t == x: \n            count += 1\n    return count \n",
        "num_ids": 34
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #return tup.count(x)\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    ctr = 0\n    for i in tup:\n        if i == x:\n            ctr += 1\n    return ctr\n",
        "num_ids": 32
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for ele in tup:\n        if ele == x:\n            count += 1\n    return count\nprint(count_X((2, 4, 6, 3, 2, 4, 6), 2))\n",
        "num_ids": 54
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count=0\n    for item in tup:\n        if item==x:\n            count+=1\n    return count\n    ",
        "num_ids": 32
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for e in tup:\n        if e == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #new_list = []\n    #for index in range(len(list)):\n        #new_list.append(element)\n        #new_list.append(list[index])\n    #return new_list\n    return [element] + list\n",
        "num_ids": 62
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Your code here\n    return [element] + list\n",
        "num_ids": 16
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Fill this in.\n    \n    # a = [1,2,3,4]\n    # insert_element(a,0) # [0,1,2,3,4]\n    # insert_element(a,5) # [5,1,2,3,4]\n    # insert_element(a,3) # [3,1,2,3,4]\n    # insert_element(a,1) # [1,0,1,2,3,4]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2001
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #list = [0,1,2,3,4]\n    #element = 'x'\n    return [element] + [i for i in list]\n",
        "num_ids": 40
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for index in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[index])\n",
        "num_ids": 43
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n",
        "num_ids": 28
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if element not in list:\n        list.insert(0,element)\n    return list\n",
        "num_ids": 24
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Create a copy of the list\n    my_copy = list[:]\n    # Get the first item in the list\n    first_item = my_copy.pop(0)\n    # Repeat for each item in the list\n    for i in range(len(my_copy)):\n        # Insert the new element before the current item\n        my_copy.insert(i,element)\n        # Insert the first item back on the list\n        my_copy.insert(i+1,first_item)\n    # Return the result\n    return my_copy\n",
        "num_ids": 130
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for item in list:\n        new_list.append(item)\n        new_list.append(element)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        if i == 0:\n            new_list.append(element)\n        new_list.append(list[i])\n        if i == len(list)-1:\n            new_list.append(element)\n    return new_list\n",
        "num_ids": 79
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    re=[]\n    im=[]\n    for i in range(len(numbers)):\n        a=complex(numbers[i][0],numbers[i][1])\n        re.append(round(abs(a),2))\n        im.append(round(cmath.phase(a),2))\n    return (re,im)\n",
        "num_ids": 84
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = numbers\n    r = cmath.polar(a)[0]\n    phi = cmath.polar(a)[1]\n    print('r = ', r, '\\nphi = ', phi)\n    return r, phi\n",
        "num_ids": 60
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    tot = len(numbers)\n    x = 0\n    y = 0\n    r = 0\n    p = 0\n    for i in range(0,tot):\n        r = cmath.polar(numbers[i])\n        print(\"The converted numbers are:\")\n        print(r)\n        x = r[0]\n        y = r[1]\n        p = cmath.phase(numbers[i])\n        print(\"The converted phase is:\")\n        print(p)\n        ",
        "num_ids": 122
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print('Converting a complex number into polar form')\n    complex = numbers\n    num = complex.real\n    dem = complex.imag\n    polar = cmath.polar(complex)\n    return(polar)\n",
        "num_ids": 54
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers = input()\n    number = numbers.split(\" \")\n    a = float(number[0])\n    b = float(number[1])\n    a = complex(a,b)\n    print(\"The complex number is:\",a)\n    cmath.phase(a)\n    print(\"The polar of the complex number is:\",cmath.phase(a))\n    r = cmath.polar(a)\n    print(\"The polar form of the complex number is:\",r)\n    print(\"The magnitude of the complex number is:\",r[0])\n    print(\"The angle of the complex number is:\",r[1])\n",
        "num_ids": 152
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = cmath.polar(complex(numbers[0],numbers[1]))\n    return [polar_coordinates[0],polar_coordinates[1]]\n",
        "num_ids": 49
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    '''\n    Convert a complex number to polar coordinates.\n    '''\n    r = abs(numbers)\n    theta = cmath.phase(numbers)\n    theta = 180 * theta / cmath.pi\n    return (r, theta)\n",
        "num_ids": 47
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_number = cmath.sqrt(numbers[0] * numbers[0] + numbers[1] * numbers[1])\n    theta = cmath.atan(numbers[1] / numbers[0])\n    return complex_number, theta\n    ",
        "num_ids": 64
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in numbers:\n        r = cmath.polar(complex(i))\n        print(\"The magnitude of\", i, \"is\", r[0])\n        print(\"The phase of\", i, \"is\", r[1])\n    return r    \n",
        "num_ids": 62
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def polar(complex):\n        polar = cmath.polar(complex)\n        print (\"The polar form is: \",polar)\n    for i in numbers:\n        polar(i)\n",
        "num_ids": 49
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.isnumeric():\n            count = count + 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list1 = [1,2,3,4,5,6,7,8,9,10]\n    integer_count = 0\n    for i in list1:\n        if type(i) == int:\n            integer_count += 1\n    return integer_count\nprint(count_integer([1,2,3,4,5,6,7,8,9,10]))\n",
        "num_ids": 94
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i].isdigit():\n            count += 1\n    return count\n    \n    \nprint(count_integer([1,3,5,\"a\",\"1\",\"10\"]))\nprint(count_integer([1,\"3\",\"5\",10]))\nprint(count_integer([1,2,3,4,5,6,\"10\"]))\nprint(count_integer([1,\"Hello\",5,\"10\"]))\nprint(count_integer([1,\"Hello\",'5',\"10\"]))\nprint(count_integer([1,2,3,4,5,\"10\"]))\nprint(count_integer([1,\"Hello\",5,10]))\n",
        "num_ids": 172
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_of_integer = 0\n    for element in list1:\n        if type(element)==int:\n            num_of_integer+=1\n    return num_of_integer\n",
        "num_ids": 46
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list_of_integer = []\n    for i in list1:\n        if type(i)== int:\n            list_of_integer.append(i)\n    return list_of_integer\n",
        "num_ids": 49
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    res = []\n    for i in range(len(l)+1):\n        for comb in combinations_with_replacement(l, i):\n            if len(comb) == n:\n                res.append(comb)\n    return res\n",
        "num_ids": 58
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [i for i in combinations_with_replacement(l, n)]\n",
        "num_ids": 21
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # start with an empty list\n    lst = []\n    # loop over all possible combinations\n    for comb in combinations_with_replacement(l, n):\n        # append each combination to the list\n        lst.append(comb)\n    # return the list of combinations\n    return lst\n",
        "num_ids": 71
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        if i >= n:\n            break\n        for c in combinations_with_replacement(l, i+1):\n            if len(set(c)) == len(c):\n                result.append(tuple(c))\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [\n        combination\n        for i in range(1, len(l)+1) \n            for combination in combinations_with_replacement(l, i)\n    ]\n",
        "num_ids": 45
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(l[i], l[j]) for i, j in combinations_with_replacement(range(len(l)), n)]\n",
        "num_ids": 34
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n) if sum(comb) == sum(l)]\n",
        "num_ids": 31
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]\n",
        "num_ids": 25
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    print (list(combinations_with_replacement(l, n)))\ncombinations_colors([\"a\", \"b\", \"c\", \"d\", \"e\"], 2)\n",
        "num_ids": 44
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for j in combinations_with_replacement(l, n):\n        print(j)\n",
        "num_ids": 24
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    prime = [2]\n    for i in range(3, n + 1, 2):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            prime.append(i)\n    return len(prime)\n",
        "num_ids": 77
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    nums = [i for i in range(1,n+1)]\n    count = 0\n    for i in range(2,n+1):\n        if i in nums:\n            count += 1\n            for j in range(i*i,n+1,i):\n                if j in nums:\n                    nums.remove(j)\n    return count\n",
        "num_ids": 111
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # The number 0 and 1 are not prime\n    if n == 0 or n == 1:\n        return 0\n    # Check for 0 and 1 in the prime number list\n    if n == 2:\n        return 1\n    # Initialize a list of primes to 2\n    primes = [2]\n    # Iterate through the given number\n    for i in range(3, n):\n        # Check to see if i is a prime\n        for j in primes:\n            # Check if i is divisible by j, if it is break out of the loop and go to the next i\n            if i % j == 0:\n                break\n        # If i is not divisible by any number in the primes list, then it is a prime and append to list\n        else:\n            primes.append(i)\n    # Return the length of the primes list\n    return len(primes)\n",
        "num_ids": 208
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count=0\n    for i in range(0,n+1):\n        if prime(i)==True:\n            count+=1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # base case\n    if n == 0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    count = 0\n    \n    for num in range(1, n+1):\n        prime = True\n        \n        for div in primes:\n            if num % div == 0:\n                prime = False\n                break\n            \n            if div > num**0.5:\n                break\n        \n        if prime:\n            count += 1\n            primes.append(num)\n    \n    return count\n    \ndef get_smallest_Divisor(n):\n    '''\n    Write a python function that returns the smallest prime divisor of a given number.\n    '''\n    min_div = None\n    \n    for num in range(2, n+1):\n        if n % num == 0:\n            min_div = num\n            break\n    \n    return min_div\n    \ndef get_largest_Divisor(n):\n    '''\n    Write a python function that returns the largest prime divisor of a given number.\n    '''\n    max_div = None\n    \n    for num in range(2, n+1):\n        if n % num == 0:\n            if is_Prime(num):\n                max_div = num\n                break\n    \n    return max_div\n    \ndef get_Largest_Divisor(n):\n    '''\n    Write a python function that returns the largest prime divisor of a given number.\n    '''\n    max_div = None\n    \n    for num in range(2, n+1):\n        if n % num == 0:\n            max_div = num\n            break\n    \n    return max_div\n    \ndef is_Prime(n):\n    '''\n    Write a python function that returns True if the number is prime and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    \n    for num in range(2, n):\n        if n % num == 0:\n            return False\n    \n    return True\n    \ndef get_Largest_Divisor_v2(n):\n    '''\n    Write a python function that returns the largest prime divisor of a given number.\n    '''\n    max_div = None\n    \n    for num in range(2, n):\n        if n % num == 0:\n            if is_Prime(num):\n                max_div = num\n                break\n    \n    return max_div\n    \ndef is_Prime_v2(n):\n    '''\n    Write a python function that returns True if the number is prime and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    \n    for num in range(2, n):\n        if n % num == 0:\n            return False\n    \n    return True\n    \ndef is_Prime_v3(n):\n    '''\n    Write a python function that returns True if the number is prime and False otherwise.\n    '''\n    for num in range(2, n):\n        if n % num == 0:\n            return False\n    \n    return True\n    \ndef is_Prime_v4(n):\n    '''\n    Write a python function that returns True if the number is prime and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    \n    for num in range(2, n):\n        if n % num == 0:\n            return False\n    \n    return True\n",
        "num_ids": 45
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(n):\n        if n <= 1:\n            return False\n        elif n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n",
        "num_ids": 65
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(n):\n        if is_prime(i):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        '''\n        Write a Python program to check whether a number is prime or not\n        '''\n        if n == 1:\n            return False\n        else:\n            for j in range(2, n):\n                if n % j == 0:\n                    return False\n            return True\n",
        "num_ids": 45
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # print(a,b)\n    return(b,a)\n",
        "num_ids": 19
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    new_tuple = (b,a)\n    return new_tuple\n",
        "num_ids": 21
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n    ",
        "num_ids": 9
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('Tuples do not have the same length, please try again')\n        return\n    \n    max_list = []\n    for i in range(len(test_tup1)):\n        max_list.append(max(test_tup1[i], test_tup2[i]))\n",
        "num_ids": 94
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1), max(test_tup2)\n",
        "num_ids": 21
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i, j in zip(test_tup1, test_tup2):\n        if i > j:\n            max_tup += (i, )\n        else:\n            max_tup += (j, )\n    return max_tup\n",
        "num_ids": 71
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1, test_tup2 = tuple(test_tup1), tuple(test_tup2)\n    return tuple(i if i > j else j for i, j in zip(test_tup1, test_tup2))\n",
        "num_ids": 63
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += test_tup1[i],\n        else:\n            max_tup += test_tup2[i],\n    return max_tup\n",
        "num_ids": 87
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (max(test_tup1), max(test_tup2))\n",
        "num_ids": 22
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    try:\n        max_tuple = (max(test_tup1), max(test_tup2))\n    except ValueError:\n        print('Not all tuples are of same length.')\n    return max_tuple\n",
        "num_ids": 57
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if(len(test_tup1)==0 or len(test_tup2)==0):\n        return ()\n    if(test_tup1[0] > test_tup2[0]):\n        return (test_tup1[0],) + maximize_elements(test_tup1[1:], test_tup2)\n    else:\n        return (test_tup2[0],) + maximize_elements(test_tup1, test_tup2[1:])\n",
        "num_ids": 126
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # nth prime is 2**(n + 1) + 1\n    return 2**(n+1) + 1\n",
        "num_ids": 30
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def square_root(n):\n        \n        # Get the square root for n\n        m = n ** 0.5\n        \n        # If the square root is an integer, it means that n is a perfect square\n        if m == int(m):\n            return m\n        else:\n            # If not, return a false value\n            return False\n    \n    # If the number is even, return False\n    if n % 2 == 0:\n        return False\n    \n    # Get the prime factors of n\n    pfactors = []\n    \n    # Continue while n is a factor of 2\n    while n % 2 == 0:\n        pfactors.append(2)\n        n /= 2\n    \n    # Continue while n is a factor of 5\n    while n % 5 == 0:\n        pfactors.append(5)\n        n /= 5\n        \n    # Continue while n is a factor of 6\n    while n % 6 == 0:\n        pfactors.append(6)\n        n /= 6\n    \n    # If the number is still greater than 2\n    if n > 2:\n        # Append the first 3 prime factors\n        pfactors.append(n)\n    \n    # Get the least common multiple of all the prime factors\n    lcm = functools.reduce(lambda x, y: x*y // gcd(x, y), pfactors)\n    \n    # If the least common multiple is greater than 1000, return False\n    if lcm > 1000:\n        return False\n    \n    # If the square root of the least common multiple is a whole number\n    if square_root(lcm) == False:\n        # The least common multiple is a prime number\n        return lcm\n    else:\n        # The least common multiple is not a prime number\n        return False\n    \ndef euler_prime(n):\n    '''\n    Write a function to check if a number is prime by taking the square root\n    and seeing if the number is a perfect square.\n    '''\n    # If the number is even, return False\n    if n % 2 == 0:\n        return False\n    \n    # Get the square root for n\n    m = n ** 0.5\n    \n    # If the square root is an integer, it means that n is a perfect square\n    if m == int(m):\n        return False\n    else:\n        return True\n    \ndef euler_prime_opt(n):\n    '''\n    Write a function to check if a number is prime by taking the square root\n    and seeing if the number is a perfect square.\n    '''\n    # If the number is even, return False\n    if n % 2 == 0:\n        return False\n    \n    # If the square root is an integer, it means that n is a perfect square\n    if n ** 0.5 == int(n ** 0.5):\n        return False\n    else:\n        return True\n",
        "num_ids": 76
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1: return \"n must be positive integer.\"\n    else:\n        if n == 1: return 2\n        else:\n            result = [2]\n            i = 1\n            while len(result) < n:\n                a = result[-1]\n                b = (a + 1) % 6\n                result.append(b)\n            return result[n - 1]\n",
        "num_ids": 93
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1: \n        return -1\n    q, r = divmod(n, 2) \n    if r == 0: \n        r = 2\n    k = q + 1\n    while True: \n        if (k * (k + 1)) % r == 0: \n            p = (k * (k + 1)) // r \n            if n <= p: \n                return p\n            k += 1\n        else: \n            k += 1\n            if r == 1: \n                r = 2\n            else: \n                r = (r * 2) % (2 * k)\n",
        "num_ids": 147
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 3:\n        return n\n    else:\n        x = n\n        s = n - 1\n        d = 0\n        while (s % 2 == 0):\n            s = s / 2\n            d = d + 1\n        s1 = (s * s) - 1\n        s2 = (s * (s + 1)) / 2\n        for i in range(1, 1001):\n            x = (x * s2) - s1\n            if (x % 2 == 0):\n                x = x / 2\n                s1 = (s1 * s2) - 1\n                s2 = (s * (s + 1)) / 2\n            if i % 5 == 0:\n                d = d + 1\n                if d == 3:\n                    break\n        return int(x)\n",
        "num_ids": 189
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n<1:\n        return None\n    elif n==1:\n        return 2\n    elif n==2:\n        return 3\n    else:\n        a = (n) * (n + 1) / 2\n        p = newman_prime(int(a))\n        return p + 1\n",
        "num_ids": 75
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Determine if n is prime\n    def is_prime(n):\n        if n < 2: return False\n        if n % 2 == 0: return n == 2\n        k = 3\n        while k*k <= n:\n            if n % k == 0: return False\n            k += 2\n        return True\n",
        "num_ids": 76
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # 0, 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997\n    \n    def is_prime(n):\n        if n == 1:\n            return False\n        for x in range(2, n):\n            if n % x == 0:\n                return False\n        return True\n    \n    def prime_generator():\n        D = {}\n        q = 2\n        while 1:\n            if q not in D:\n                yield q\n                D[q * q] = [q]\n            else:\n                for p in D[q]:\n                    D.setdefault(p + q, []).append(p)\n                del D[q]\n            q += 1\n    \n    if is_prime(n):\n        return n\n    \n    return next(x for x in prime_generator() if x > n)\n",
        "num_ids": 601
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def nth_prime_newman_williams(n):\n        if n == 1:\n            return 2\n        elif n == 2:\n            return 3\n        else:\n            p = 1\n            x = p * 2\n            while p < n:\n                x = x + 1\n                if Miller_Rabin(x) == True:\n                    p += 1\n            return x\n    return nth_prime_newman_williams(n)\n",
        "num_ids": 111
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n < 2:\n            return False\n        i = 2\n        while i*i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n",
        "num_ids": 58
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # YOUR CODE HERE\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([x / y for x, y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(i/j for i,j in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        x = test_tup1[0]/test_tup2[0]\n        y = test_tup1[1]/test_tup2[1]\n        return (x, y)\n    except ZeroDivisionError as e:\n        return e\n",
        "num_ids": 70
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n",
        "num_ids": 53
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # initializing test tuples\n    test_tup1 = (1, 2)\n    test_tup2 = (3, 4)\n    # expected output\n    res = (0.500, 0.333)\n    returned_val = division_elements(test_tup1, test_tup2)\n    # assert conditions\n    assert type(returned_val) == tuple\n    assert returned_val == res\n",
        "num_ids": 103
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(operator.truediv, test_tup1, test_tup2))\n",
        "num_ids": 27
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(test_tup1[i] / test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 37
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_1 = []\n    list_2 = []\n    for i in list1:\n        if len(list_1) == L:\n            break\n        list_1.append(i)\n    for j in list1:\n        if len(list_2) == L:\n            break\n        list_2.append(j)\n    return(list_1, list_2)\n",
        "num_ids": 94
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return_list = []\n    for i in list1:\n        if len(return_list) < L:\n            return_list.append(i)\n        else:\n            break\n    return return_list\n    # return (return_list, list1[len(return_list):])\n",
        "num_ids": 71
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    len_list = len(list1)\n    index_L = len_list//2\n    \n    #print(\"index_L: \", index_L)\n    \n    if index_L == 0:\n        print(\"Error: L is too large.\")\n        return\n    elif index_L > L:\n        print(\"Error: L is too small.\")\n        return\n    else:\n        part1 = list1[0:index_L]\n        part2 = list1[index_L:len_list]\n        #print(\"part1: \", part1)\n        #print(\"part2: \", part2)\n        return part1, part2\n",
        "num_ids": 155
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = []\n    list1_length = len(list1)\n    list1_index = 0\n",
        "num_ids": 28
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1)%2 == 0:\n        list1, list2 = [list1[i:i+L] for i in range(0,len(list1),L)], [list1[i:i+L] for i in range(L,len(list1),L)]\n    else:\n        list1, list2 = [list1[i:i+L] for i in range(0,len(list1),L)], [list1[i:i+L] for i in range(L+1,len(list1),L)]\n    return (list1, list2)\n",
        "num_ids": 145
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[0:L], list1[L:])\n",
        "num_ids": 19
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    def split_two_parts(list1, L):\n        # loop from 0 to L-1\n        # if the list1[i] is less than L, remove it\n        # if the list1[i] is greater than L, remove it\n        # if the list1[i] is equal to L, don't remove it\n        pass\n    def split_two_parts(list1, L):\n        list1_copy = list1[:]\n        while len(list1_copy) > L:\n            list1_copy.remove(max(list1_copy))\n        return list1_copy, list1[len(list1_copy):]\n    return split_two_parts(list1, L)\n",
        "num_ids": 169
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # return tuple(list1[:L], list1[L:])\n    return (list1[:L], list1[L:])\n",
        "num_ids": 36
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check that list is not empty\n    if list1 == []:\n        return ([], [])\n    # Check that L is not negative\n    if L < 0:\n        return ([], [])\n    # Check that the length of the list is not less than L\n    if len(list1) < L:\n        return ([], list1)\n    # Check that the list is not empty\n    if list1 == []:\n        return ([], [])\n    # Check if the list has an odd number of elements\n    if len(list1) % 2 == 1:\n        return (list1[0:L], list1[L:])\n    # Check if the list has an even number of elements\n    if len(list1) % 2 == 0:\n        return (list1[0:L-1], list1[L-1:])\n    \n",
        "num_ids": 200
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    h_age = int(h_age)\n    age = h_age * 10.5\n    return age\n",
        "num_ids": 29
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        dog_age = h_age * 10.5\n    else:\n        dog_age = 21 + (h_age - 2) * 4\n    return dog_age\n",
        "num_ids": 51
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age)!= int or h_age < 0:\n        return \"Input Error\"\n    return h_age * 10.5\n",
        "num_ids": 37
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    h_age_integer = int(h_age)\n    if h_age_integer <= 0:\n        return 'Invalid value for the age.'\n    \n    # years = 10.5*(10.5 - dog_age)\n    years = (h_age - 2)/4\n    years = int(years)\n    return years\n",
        "num_ids": 81
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return ((h_age - 2) * 4) + 21\n",
        "num_ids": 40
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print(\"Age can't be negative\")\n    else:\n        return h_age * 10\n",
        "num_ids": 33
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age*7\n",
        "num_ids": 13
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # 4.2.2\n    dog_age = h_age * 7\n    return dog_age\n",
        "num_ids": 27
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = ((h_age - 2) * 4) + 21\n    return dog_age\n",
        "num_ids": 26
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i + step] for i in range(0, len(S), step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 0 or step > len(S):\n        return S\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 48
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    print('\\n')\n    print(\"Question 9\")\n    print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\")\n    print('\\n')\n    my_list = [2,5,7,11,13,3,13,15,20,6,13]\n    result = list_split(my_list, 3)\n    print(result)\n",
        "num_ids": 81
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    a = []\n    while len(S) >= step:\n        a.append(S[:step])\n        S = S[step:]\n    return a\n",
        "num_ids": 40
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def split(S, step):\n        newlist = []\n        if len(S) < step:\n            return newlist\n        for i in range(0, len(S), step):\n            newlist.append(S[i:i+step])\n        return newlist\n    return split(S, step)\n",
        "num_ids": 76
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    print('\\nList split:')\n    l = [1,2,3,4,5,6,7,8,9,10]\n    result = []\n    for i in range(0,len(l),step):\n        result.append(l[i:i+step])\n    print(result)\n",
        "num_ids": 77
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = S.split(\" \")\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 29
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i + step] for i in range(0, len(S), step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 27
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*l\n",
        "num_ids": 8
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l <= 0:\n        print(\"Enter a positive number\")\n    else:\n        print(l ** 2)\n",
        "num_ids": 30
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    #side is the side length of the cube\n    side = l\n    #calculate lateral surface area by multiplying side length with 6\n    lateral_surface_area = 6 * side ** 2\n    return lateral_surface_area\n",
        "num_ids": 59
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # your code here\n    import math\n    a = float(l)\n    b = a * a\n    c = b * 6\n    return(c)\n",
        "num_ids": 40
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6*l)**2\n",
        "num_ids": 12
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side = l ** 2\n    lateral_surface = 6 * side\n    print(lateral_surface)\n",
        "num_ids": 28
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = l**2\n    return surface\n",
        "num_ids": 13
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n==1:\n        return 1\n    else:\n        return (n*(n+1))/2*(n+2)\nprint(square_Sum(1))\nprint(square_Sum(5))\nprint(square_Sum(3))\n",
        "num_ids": 63
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n**3+n**2+n\n",
        "num_ids": 14
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum=sum+i*i\n    return sum\n    \n",
        "num_ids": 37
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(0,n+1,2):\n        total += i**2\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def square_Sum(n):\n        sum = 0\n        for i in range(0, n):\n            sum = sum + (i+1)*(i+1)\n        return sum\n",
        "num_ids": 47
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if type(n)!= int:\n        return 'Invalid Input. Please enter an integer.'\n    elif n > 0:\n        sum = 0\n        for i in range(n+1):\n            if i%2 == 1:\n                sum += i**2\n        return sum\n    else:\n        return 'Please enter a positive integer.'\n",
        "num_ids": 82
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def sum_Squares(n):\n        return sum([i**2 for i in range(1,n+1)])\n    return sum_Squares(n)\n",
        "num_ids": 42
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x*x for x in range(1,n+1,2)])\n",
        "num_ids": 24
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum+=i**2\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return square_Sum(n - 1) + (2 * n + 1)\n",
        "num_ids": 36
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # base case\n    if n == 1: \n        return '*'\n    else: \n        # recurse n-1 times\n        return '*' + find_star_num(n-1) \n",
        "num_ids": 53
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    #n = 5\n    i = 0\n    while i < n:\n        i += 1\n        if (i%3 == 1):\n            print('*')\n            continue\n        print(i, end ='')\n",
        "num_ids": 54
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = 0 \n    for i in range(n):\n        result += (3 * i) + 1\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 1\n    for i in range(n):\n        star_num = star_num * 3\n        star_num += 1\n        star_num = star_num * 3\n        star_num += 1\n    return star_num\n",
        "num_ids": 60
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Pick the first digit, and if it is 0, then we have to pick the 2nd digit. If it is 1 we don't need to pick. So let's just return the value of 1.\n    # We can start the recursion at 2 (the first 2 digits) and then we pick the first digit\n    # If the first digit is 0, we can pick the 2nd digit, but if the first digit is 1, we can't pick the 2nd digit\n    # So we return 1\n",
        "num_ids": 112
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    stars = '*'\n    star_num = ''.join(stars[:n])\n    return star_num\n",
        "num_ids": 30
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def is_prime(n):\n        for i in range(2, int(n**0.5)):\n            if n%i == 0:\n                return False\n        return True\n    \n    def find_star_num(n):\n        n = str(n)\n        for i in range(2, 10):\n            if len(n) < i:\n                return 0\n            elif is_prime(int(n[0:i])):\n                return int(n[0:i])\n    \n    return find_star_num(n)\n",
        "num_ids": 133
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num_of_stars = 0\n    while num_of_stars < n:\n        num_of_stars += 1\n        for i in range(num_of_stars):\n            print(\"*\", end='')\n        print()\n",
        "num_ids": 58
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Define the base number.\n    star_num = 1\n    # Define the counter variable.\n    count = 0\n    # Define the constant for the calculation.\n    next_num = 2\n",
        "num_ids": 50
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 1\n    nums = []\n    while len(nums) < n: \n        nums.append(i)\n        i += 3\n    return nums[n-1]\n",
        "num_ids": 49
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    pass\n    return 0\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper()\n    return ord(k)\n",
        "num_ids": 17
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    for i in range(0,k):\n        print(i)\n    return\n",
        "num_ids": 22
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    print(ord(k))\n",
        "num_ids": 10
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= 'a' and k <= 'z':\n        return ord(k) - ord('a')\n    elif k >= 'A' and k <= 'Z':\n        return ord(k) - ord('A')\n    else:\n        return -1\n",
        "num_ids": 64
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    arr1 = []\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            arr1.append(arr[i])\n    print(arr1)\n    return sum(arr1)\n",
        "num_ids": 64
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            if arr[i]%2==0 and i%2==0:\n                sum+=arr[i]\n    return sum\n",
        "num_ids": 61
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index_sum = 0\n    for index, value in enumerate(arr):\n        if index % 2 == 0 and value % 2 == 0:\n            even_index_sum += value\n    return even_index_sum\n",
        "num_ids": 55
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if (i % 2 == 0) and (arr[i] % 2 == 0):\n            sum = sum + arr[i]\n    print(sum)\n",
        "num_ids": 58
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            res += arr[i]\n    return res\n",
        "num_ids": 49
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        if arr[i]%2==0 and i%2==0:\n            sum+=arr[i]\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in arr:\n        if i%2==0:\n            sum += i\n    return sum\nprint(sum_even_and_even_index([1,2,3,4,5,6,7]))\n",
        "num_ids": 60
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum = sum + arr[i]\n    return sum\n",
        "num_ids": 59
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    #list = []\n    #for i in range(len(arr)):\n    #    if (arr[i] % 2 == 0) and (i % 2 == 0):\n    #        list.append(arr[i])\n    #return sum(list)\n    return sum([arr[i] for i in range(len(arr)) if i % 2 == 0 and arr[i] % 2 == 0])\n",
        "num_ids": 98
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    #if len(arr)<1:\n    #    return None\n    #else:\n    #    even_sum = 0\n    #    for i in range(0,len(arr)):\n    #        if i%2==0 and arr[i]%2==0:\n    #            even_sum+=arr[i]\n    #    return even_sum\n    #return arr\n    return sum([arr[i] for i in range(0,len(arr)) if i%2==0 and arr[i]%2==0])\n",
        "num_ids": 130
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum += (i**5)\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(i**5 for i in range(1,n+1) if i%2 == 0)\n    \ndef sum_of_Digits_Fibonacci(n):\n    '''\n    Write a python program to find the sum of the first n Fibonacci numbers.\n    '''\n    return sum(fib_nums(n))\n    \ndef fib_nums(n):\n    '''\n    Write a python program to create a list of first n Fibonacci numbers.\n    '''\n    fib_list = [0,1]\n    for i in range(2,n):\n        fib_list.append(fib_list[i-1] + fib_list[i-2])\n    return fib_list\n",
        "num_ids": 58
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n)])\n",
        "num_ids": 18
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(i**5 for i in range(1,n+1) if i%2==0)\n",
        "num_ids": 28
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if (i % 2 == 0):\n            sum += (i**5)\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**5\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power_sum = sum(np.power(range(0,n+1),5))\n    return power_sum\n",
        "num_ids": 30
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(list(filter(lambda x: x**5 < n, range(0,n+1))))\n",
        "num_ids": 28
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for num in range(1, n + 1): \n        total += (num ** 5) \n    return total\n    \ndef multiples_of_3(n): \n    '''\n    Write a python function that takes in an integer n and returns the sum of all the multiples of 3 between 1 and n.\n    '''\n    total = 0\n    for num in range(3, n + 1, 3): \n        total += num\n    return total\n    \ndef prime_factorization(n):\n    '''\n    Write a python function that takes in an integer n and prints all the prime numbers between 2 and n.\n    '''\n    prime_numbers = []\n    for num in range(2, n + 1): \n        if num > 1:\n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                prime_numbers.append(num)\n    return prime_numbers\n",
        "num_ids": 81
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**5\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_of_tuples = [('a', '1', '2'), ('b', '3', '4'), ('c', '5', '6')]\n    list_of_rear_elements = []\n    for item in list_of_tuples:\n        list_of_rear_elements.append(item[2])\n    return list_of_rear_elements\n",
        "num_ids": 95
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_of_tuples = test_list\n    list_of_rears = []\n    for tuple in list_of_tuples:\n        list_of_rears.append(tuple[1])\n    return list_of_rears\n",
        "num_ids": 61
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[1] for item in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_list2 = []\n    for tup in test_list:\n        test_list2.append(tup[1])\n    return test_list2\n",
        "num_ids": 41
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda tup: tup[1], test_list))\n",
        "num_ids": 22
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [test_list[i][1] for i in range(len(test_list))]\n",
        "num_ids": 26
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [element[1] for element in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for each_tuple in test_list:\n        result.append(each_tuple[-1])\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
        "num_ids": 53
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n",
        "num_ids": 38
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple( (x - y) for x, y in zip(test_tup1, test_tup2))\n    else:\n        raise ValueError('Not possible to substract')\n",
        "num_ids": 67
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += ((test_tup1[i]-test_tup2[i]),)\n    return new_tup\n",
        "num_ids": 58
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for index in range(len(test_tup1)):\n        test_tup1[index] -= test_tup2[index]\n    return test_tup1\n",
        "num_ids": 45
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(map(lambda x, y: x-y, test_tup1, test_tup2))\n    else:\n        return 'Sorry, you can\\'t subtract elements from tuples of different lengths.'\n",
        "num_ids": 73
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    tup3 = ()\n    for x in range(0, len(tup1)):\n        tup3 += (tup1[x]-tup2[x],)\n    return tup3\n",
        "num_ids": 73
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #EXAMPLE TUPLE 1 = (5, 1, 8, 3, 2)\n    #EXAMPLE TUPLE 2 = (2, 4, 4, 8, 1)\n    #OUTPUT = (3, 1, 6, 5, 0)\n",
        "num_ids": 64
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([test_tup1[i]-test_tup2[i] for i in range(len(test_tup1))])\n",
        "num_ids": 37
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = tuple(map(lambda x,y: x-y, test_tup1, test_tup2))\n    print(result)\n",
        "num_ids": 37
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    odd_n = math.factorial(n)\n    even_n = n * (n - 2) * (n - 4) * (n - 6) * (n - 8) * (n - 10) * (n - 12) * (n - 14) * (n - 16) * (n - 18)\n    if n % 2!= 0:\n        return even_n / odd_n\n    else:\n        return (n - 2) * (n - 4) * (n - 6) * (n - 8) * (n - 10) * (n - 12) * (n - 14) * (n - 16) * (n - 18) / odd_n\n        \ndef C(n, r): \n    '''\n    Write a python function that takes in two positive integers n and r and computes the nth Bernoulli number with r terms.\n    '''\n    return sum([(-1) ** i * even_binomial_Coeff_Sum(i) for i in range(0, r)])\n    \nprint(C(4, 3)) \nprint(C(8, 5))\n",
        "num_ids": 57
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    assert isinstance(n, int), \"Please enter an integer.\"\n    assert n >= 0, \"Please enter a positive integer.\"\n",
        "num_ids": 32
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum([ int(i/2) * math.factorial(i) / math.factorial(i-2) for i in range(2, n+1, 2)])\n",
        "num_ids": 45
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    C = [0 for i in range(n + 1)] \n    C[0] = 0\n    C[1] = 1\n    for i in range(2, n + 1): \n        C[i] = C[i - 1] + C[i - 2] \n    return C[n] \n",
        "num_ids": 79
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #Using Binomial Coefficient Function\n    binomial_coeff = lambda n,k: math.factorial(n)//(math.factorial(k)*math.factorial(n-k))\n    #Sum of Even Binomial Coefficients\n    sum_binomial_coeff = 0\n    for i in range(n):\n        if i%2==0:\n            sum_binomial_coeff+=binomial_coeff(n,i)\n    return sum_binomial_coeff\n    #Using numpy.polynomial.polynomial.polyval()\n    # import numpy as np\n    # a=np.polynomial.polynomial.polyval([0,1,2],n)\n    # return a[0]\n",
        "num_ids": 178
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1): \n        if i%2 == 0:\n            sum += ((math.factorial(n))//(math.factorial(n-i)*math.factorial(i)))\n    return sum \n",
        "num_ids": 65
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0,n):\n        for j in range(0,i+1):\n            if ((i+j)%2 == 0):\n                sum += int( math.factorial(i)/(math.factorial(j)*math.factorial(i-j)))\n    return sum\n        \ndef odd_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1,n):\n        for j in range(0,i+1):\n            if ((i+j)%2!= 0):\n                sum += int( math.factorial(i)/(math.factorial(j)*math.factorial(i-j)))\n    return sum\n",
        "num_ids": 79
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomial(n,k):\n        return int(math.factorial(n)/(math.factorial(k)*math.factorial(n-k)))\n    sum=0\n    for i in range(n):\n        if i%2==0:\n            sum+=binomial(n,i)\n    return sum\n    \ndef fibonacci_sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the first n terms in the fibonacci sequence.\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibonacci_sum(n-1)+fibonacci_sum(n-2)\n        \n        \ndef fibonacci_sum_efficient(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the first n terms in the fibonacci sequence.\n    '''\n    a=0\n    b=1\n    sum=0\n    for i in range(n):\n        sum=a+b\n        a=b\n        b=sum\n    return sum\n",
        "num_ids": 47
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if(n < 1):\n        print(\"please provide a valid n \")\n    else:\n        a = [1, 1, 1] \n        if(n == 1):\n            return 1\n        if(n == 2):\n            return 2\n        for i in range(3, n + 1):\n            a.append((a[i - 1] + a[i - 2]) % 1000000007) \n        return a[-1]\n        # print(a)\n",
        "num_ids": 114
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n==0):\n        return 0\n    if (n==1):\n        return 1\n    if (n%2!=0):\n        return -1\n    else:\n        return even_binomial_Coeff_Sum(n//2)+even_binomial_Coeff_Sum(n//2+1)\n",
        "num_ids": 81
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    def cylinder(r,h):\n        vol = (1/3)*pi*(r**2)*h\n        return vol\n    return cylinder(r,h)\n",
        "num_ids": 48
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi=3.14\n    return pi*r**2*h\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return math.pi*(r**2)*h\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159*r*r*h\n    return volume\n",
        "num_ids": 20
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Volume = Pi*r^2*h\n    # (Pi) = 3.14\n    # r = 5, h = 6\n    # v = 3.14*5**2*6\n    v = 3.14*(r**2)*h\n    return v\n",
        "num_ids": 66
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h\n",
        "num_ids": 15
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #calculate volume\n    vol = 3.14*(r**2)*h\n    #return volume\n    return vol\n",
        "num_ids": 32
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    if r > 0 and h > 0:\n        return 3.14*(r*r)*h\n    else:\n        return \"Input must be greater than 0.\"\n",
        "num_ids": 41
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi=3.14159\n    volume=pi*(r**2)*h\n    return volume\n",
        "num_ids": 26
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filter({\"a\":5,\"b\":3,\"c\":9,\"d\":4},5)\n",
        "num_ids": 27
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    output=dict((k,v) for k,v in dict.items() if v>=n)\n    return output\n",
        "num_ids": 31
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered[key] = value\n    return filtered\n",
        "num_ids": 39
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_list = list(dict.items())\n    return {k:v for (k,v) in dict_list if v >= n}\n",
        "num_ids": 36
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n",
        "num_ids": 24
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return{key:val for key, val in dict.items() if val>=n}\n",
        "num_ids": 24
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newdict = {}\n    for key,value in dict.items():\n        if value >= n:\n            newdict[key] = value\n    return newdict\n",
        "num_ids": 40
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {key:value for (key,value) in dict.items() if value>=n}\n    return new_dict\n",
        "num_ids": 35
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for key in dict:\n        if dict[key] >= n:\n            new_dict[key]=dict[key]\n    return new_dict\nprint(dict_filter({1:5, 2:3, 3:8, 4:-1},10))\n",
        "num_ids": 69
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "num_ids": 43
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return count_elements(test_tup,0)\n",
        "num_ids": 17
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    #unpacking the tuple\n    count = 0\n    for x in test_tup:\n        if isinstance(x, tuple):\n            for y in x:\n                count+=1\n        else:\n            count+=1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # HINT: Use a single for loop\n    list_of_tuples = []\n    for i in test_tup:\n        list_of_tuples.append(i)\n    print(list_of_tuples)\n    list_of_indexes = []\n    for index, element in enumerate(list_of_tuples):\n        if element == '1':\n            list_of_indexes.append(index)\n    print(list_of_indexes)\n    \n    def list_of_tuples_function(list_of_indexes):\n        list_of_tuples_with_lengths = []\n        for index in list_of_indexes:\n            list_of_tuples_with_lengths.append(len(list_of_tuples[:index]))\n        print(list_of_tuples_with_lengths)\n        return list_of_tuples_with_lengths\n    \n    return list_of_tuples_function(list_of_indexes)\n    \n    \n",
        "num_ids": 248
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return 0\n    temp = test_tup[0]\n    count = 0\n    for i in test_tup[1:]:\n        if i == temp:\n            count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup = tuple(test_tup)\n    counter = 0\n    for i in tup:\n        if tup.index(i) < tup.index(i + 1):\n            counter = counter + 1\n    return counter\n",
        "num_ids": 58
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_list = [0,0,0,1,0,1,1,2,0,0,0,0]\n    print(count_first_elements(tuple(test_list)))\n    return len([i for i in test_list if i==0])\n    # test_list = [1,1,2,3,4,4,5]\n    # first_test = [i for i in test_list if i==1]\n    # first_test_list = test_list[0:test_list.index(1)]\n    # print(first_test_list)\n    # print(first_test)\n    # print(sum(first_test_list))\n",
        "num_ids": 166
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    # Solution 1 -using slicing\n    # test_tup = (1,2,1,2,3,1,2,3,4,5,1,1,2,3,4,5,1,1,2,1,2,3,1,2,3,1,2,3,4,5,1,1,2,3,4,5,1,1,2,1,2,3,1,2,3,1,2,3,4,5,1,1,2,3,4,5,1,1,2,1,2,3,1,2,3,1,2,3,1,2,3,4,5,1,1,2,1,2,3,1,2,3,1,2,3,1,2,3,4,5,1,1,2,1,2,3,1,2,3,1,2,3,4,5)\n    # print('count of first element =',test_tup.count(1))\n    # print('count of first element =',test_tup.count(2))\n    # print('count of first element =',test_tup.count(3))\n    # print('count of first element =',test_tup.count(4))\n    # print('count of first element =',test_tup.count(5))\n    \n    \n    # Solution 2 -using dict\n    # test_tup = (1,2,1,2,3,1,2,3,4,5,1,1,2,3,4,5,1,1,2,1,2,3,1,2,3,1,2,3,4,5,1,1,2,3,4,5,1,1,2,1,2,3,1,2,3,1,2,3,4,5,1,1,2,3,4,5,1,1,2,1,2,3,1,2,3,1,2,3,1,2,3,4,5,1,1,2,1,2,3,1,2,3,1,2,3,1,2,3,4,5,1,1,2,1,2,3,1,2,3,1,2,3,4,5)\n    # dict1 = {}\n    # for i in test_tup:\n    #     if i in dict1:\n    #         dict1[i] += 1\n    #     else:\n    #         dict1[i] = 1\n    # print(dict1)\n    \n    # Solution 3 -using dict\n    # dict1 = {}\n    # for i in range(0, len(test_tup)):\n    #     if test_tup[i] in dict1:\n    #         dict1[test_tup[i]] += 1\n    #     else:\n    #         dict1[test_tup[i]] = 1\n    # print(dict1)\n    \n    # Solution 4 -using counter\n    # from collections import Counter\n    # print(Counter(test_tup).most_common(1)[0][0])\n    # print(Counter(test_tup).most_common(1)[0][1])\n    \n    # Solution 5 -using Counter\n    # print(Counter(test_tup).most_common(1)[0][0])\n    # print(Counter(test_tup).most_common(1)[0][1])\n    \n    # Solution 6 -using most_common() method\n    from collections import Counter\n    print(Counter(test_tup).most_common(1)[0][0])\n    print(Counter(test_tup).most_common(1)[0][1])\n    \n    \nif __name__ == '__main__':\n    test_tup = (1,2,1,2,3,1,2,3,4,5,1,1,2,3,4,5,1,1,2,1,2,3,1,2,3,1,2,3,4,5,1,1,2,3,4,5,1,1,2,1,2,3,1,2,3,1,2,3,4,5,1,1,2,3,4,5,1,1,2,1,2,3,1,2,3,1,2,3,1,2,3,4,5,1,1,2,1,2,3,1,2,3,1,2,3,1,2,3,4,5,1,1,2,1,2,3,1,2,3,1,2,3,4,5)\n    count_first_elements(test_tup)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1997
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for index in range(len(test_tup)):\n        if index!= 0:\n            print(test_tup[index],test_tup.count(test_tup[index]))\n",
        "num_ids": 51
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n",
        "num_ids": 19
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def num_digits(num):\n        return 1 + num_digits(num // 10) if num > 0 else 0\n    return int(0.5*n*(n+1)*(9*n + 8) + 1)\n",
        "num_ids": 58
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n - 1) // 2\n",
        "num_ids": 14
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(10*n-n+1)/2)\n",
        "num_ids": 20
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+1)//2\n",
        "num_ids": 14
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(0.5*n*(n+1)*(n+2))\n",
        "num_ids": 23
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #decagonal number is equal to number of digits in nth number * 10 + the sum of the digits in nth number\n    \n    n = str(n)\n    length = len(n)\n    dec = length * 10 + sum([int(i) for i in n])\n    return dec == n\n",
        "num_ids": 73
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def dec(n):\n        return n*10 + n\n    return dec(n)\n",
        "num_ids": 24
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n+10)\n",
        "num_ids": 12
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0: \n        return False \n    if n == 0: \n        return 0\n    return int((n*((9*n) - 1))/2)\n",
        "num_ids": 45
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    dlist_size = len(dlist)\n    for index in range(dlist_size):\n        if dlist[index] == item:\n            return (True, index)\n    return (False, -1)\n",
        "num_ids": 54
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    position = 0\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            position = i\n            break\n        else:\n            position = -1\n",
        "num_ids": 59
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0,len(dlist)):\n        if dlist[i]==item:\n            return (True,i)\n    return (False,-1)\n",
        "num_ids": 44
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return (False, -1)\n    index = 0\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, index)\n        index += 1\n    return (False, -1)\n",
        "num_ids": 73
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index in range(len(dlist)):\n        if item == dlist[index]:\n            return (True, index)\n    return (False, -1)\n",
        "num_ids": 42
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = 0\n    found = False\n    while position < len(dlist) and not found:\n        if dlist[position] == item:\n            found = True\n        else:\n            position = position + 1\n    if found:\n        return (True, position)\n    else:\n        return (False, -1)\n",
        "num_ids": 79
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index_pos = -1\n    i = 0\n",
        "num_ids": 15
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 45
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    position = -1\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            found = True\n            position = i\n            break\n    return (found, position)\n",
        "num_ids": 60
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = [1,3,4,2]\n    for i in range(len(test_list)-1):\n        for j in range(len(test_list)-1):\n            if test_list[j] == test_list[j+1]:\n                print('List has same element',test_list[j])\n                return False\n    print('List is unique')\n    return True\n",
        "num_ids": 96
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # start writing your code here\n    return len(test_list) == len(set(test_list))\n    \ndef main():\n    print(\"### check for unique ###\")\n    test_list = [1,3,5,4,1]\n    print(all_unique(test_list))\n    test_list = [1,3,5,4,4]\n    print(all_unique(test_list))\n    test_list = [1,3,5,4,2]\n    print(all_unique(test_list))\n    test_list = [1,3,5,4]\n    print(all_unique(test_list))\n    test_list = [1,3,5,2]\n    print(all_unique(test_list))\n    test_list = []\n    print(all_unique(test_list))\n",
        "num_ids": 204
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if test_list.count(i) > 1:\n            return False\n        else:\n            pass\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if(len(test_list) == len(set(test_list))):\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_set = set(test_list)\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp_list = []\n    for i in test_list:\n        if i in temp_list:\n            return False\n        else:\n            temp_list.append(i)\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    checker = []\n    for element in test_list:\n        if element not in checker:\n            checker.append(element)\n        else:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # use set to see if it is a unique list\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    def sub(list1,list2):\n        return [list1[i]-list2[i] for i in range(len(list1))]\n    print(sub(nums1,nums2))\n    return sub(nums1,nums2)\n    \ndef sub_list2(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n    \ndef sub_list3(nums1,nums2):\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n    \nif __name__ == \"__main__\":\n    #sub_list2([1,2,3,4], [1,2,3,4])\n    #sub_list2([1,2,3,4], [1,2,3,4,5])\n    #sub_list2([1,2,3,4], [1,2,3,4,5,6,7])\n    #sub_list2([1,2,3,4], [1,2,3,4,5,6,7,8,9,10])\n    #sub_list2([1,2,3,4], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n    #sub_list2([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10])\n    #sub_list2([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n    #sub_list2([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n    #sub_list2([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\n    #sub_list2([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99])\n    #sub_list2([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300])\n    #sub_list2([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274",
        "num_ids": 1913
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 31
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for (x,y) in zip(nums1,nums2)]\n",
        "num_ids": 26
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    nums1 = nums1.copy()\n    nums2 = nums2.copy()\n    \n    for i in range(0,len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n",
        "num_ids": 74
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    list_1 = list(map(lambda x: x*2, nums1))\n    list_2 = list(map(lambda x: x*3, nums2))\n    return list(map(lambda x, y: x - y, list_1, list_2))\n",
        "num_ids": 68
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == 0 and len(nums2) == 0:\n        return 0\n    if len(nums1) == 0:\n        return nums2\n    if len(nums2) == 0:\n        return nums1\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 92
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x1 - x2 for (x1, x2) in zip(nums1,nums2)]\n",
        "num_ids": 30
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n",
        "num_ids": 40
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    x = len(str(n))\n    d = {}\n    for i in range(x):\n        if str(n)[i] in d:\n            d[str(n)[i]] = d[str(n)[i]]+1\n        else:\n            d[str(n)[i]] = 1\n    for i in d:\n        if d[i] > int(i):\n            return False\n    return True\n",
        "num_ids": 102
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) == 1:\n        return 1\n    a = []\n    for i in range(0, 10):\n        a.append(str(n).count(str(i)))\n    for i in range(0, 10):\n        if a[i] > i:\n            return 0\n    return 1\ndef number_of_digits(n):\n    '''\n    Write a python function takes in an integer and returns the number of digits in the integer.\n    '''\n    return len(str(n))\ndef radix_sort(arr):\n    '''\n    Write a python function that performs a radix sort on a given list.\n    '''\n    n = len(arr)\n    for i in range(0, number_of_digits(max(arr))):\n        # sort according to the ith digit\n        temp = [[] for j in range(10)]\n        for j in range(0, n):\n            temp[int(str(arr[j])[i])].append(arr[j])\n        arr = [item for sublist in temp for item in sublist]\n    return arr\n",
        "num_ids": 108
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if(len(str(n)) == 1):\n        return True\n    if(len(str(n)) == 2):\n        if(n%10 <= n//10):\n            return True\n    if(len(str(n)) == 3):\n        if(n%100 <= n//100):\n            return True\n    if(len(str(n)) == 4):\n        if(n%1000 <= n//1000):\n            return True\n    if(len(str(n)) == 5):\n        if(n%10000 <= n//10000):\n            return True\n    if(len(str(n)) == 6):\n        if(n%100000 <= n//100000):\n            return True\n    if(len(str(n)) == 7):\n        if(n%10000000 <= n//10000000):\n            return True\n    if(len(str(n)) == 8):\n        if(n%1000000 <= n//1000000):\n            return True\n    if(len(str(n)) == 9):\n        if(n%10000000 <= n//10000000):\n            return True\n    if(len(str(n)) == 10):\n        if(n%1000000 <= n//1000000):\n            return True\n    return False\n",
        "num_ids": 294
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    while n > 0:\n        d[n%10] = d.get(n%10,0) + 1\n        n //= 10\n    for key,value in d.items():\n        if value > key:\n            return False\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    import string\n",
        "num_ids": 6
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    #if n = 0, then all the digits have frequency less than or equal to itself\n    if n == 0:\n        return True\n    \n    #create a dictionary which stores the frequencies of digits\n    freq = dict()\n    while n > 0:\n        rem = n % 10\n        freq[rem] = freq[rem] + 1 if rem in freq else 1\n        n = n // 10\n    \n    #check whether each digit in the dictionary has frequency less than or equal to itself\n    for val in freq:\n        if val in freq and val!= 0 and freq[val] > val:\n            return False\n    return True\n",
        "num_ids": 156
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    l = []\n    for i in str(n): \n        l.append(i)\n    for j in l: \n        if int(j) == 0 and n % int(j)!= 0: \n            return False\n        elif n % int(j)!= 0: \n            return False\n    return True\ndef frequencySort(n): \n    '''\n    Write a python function to sort the elements of the string in the increasing order of their frequencies. \n    If two elements have the same frequency then sort them in their increasing order.\n    '''\n    l = []\n    l2 = []\n    for i in str(n): \n        l.append(i)\n    for j in l: \n        if l.count(j) >= 2: \n            l2.append(j)\n    l2 = list(set(l2))\n    l2.sort()\n    for k in l2: \n        for j in l: \n            if j == k: \n                l.remove(j)\n    return \"\".join(l)\ndef largestNumber(nums):\n    '''\n    Write a python function to sort the elements of the array in the increasing order of their frequencies. \n    If two elements have the same frequency then sort them in their increasing order.\n    '''\n    l = []\n    l2 = []\n    l3 = []\n    for i in str(nums): \n        l.append(i)\n    for j in l: \n        if l.count(j) >= 2: \n            l2.append(j)\n    l2 = list(set(l2))\n    l2.sort()\n    for k in l2: \n        for j in l: \n            if j == k: \n                l3.append(j)\n    l3 = list(set(l3))\n    return \"\".join(l3)\ndef reverse(n): \n    '''\n    Write a python function to reverse an integer.\n    '''\n    return int(str(n)[::-1])\ndef isPalindrome(s):\n    '''\n    Write a python function to check whether the input string is palindrome or not.\n    '''\n    if s == s[::-1]: \n        return True\n    else: \n        return False\ndef superDigit(n, k): \n    '''\n    Write a python function to find the smallest positive integer that is evenly divisible by all the numbers from 1 to n.\n    '''\n    s = 0\n    for i in str(n): \n        s += int(i)\n    s = s * k\n    if s % 9 == 0: \n        return s\n    else: \n        return s % 9\ndef reverseInParentheses(s):\n    '''\n    Write a python function to reverse the input string by reversing the words in each pair of parentheses,\n    the function will return an empty string if no parentheses are present.\n    '''\n    s1 = \"\"\n    l = []\n    for i in s: \n        if i == '(': \n            l.append(i)\n        elif i == ')': \n            l.pop()\n        else: \n            s1 += i\n    s1 = s1.split(' ')\n    s1 =''.join(s1[::-1])\n    return s1\ndef isValid(s):\n    '''\n    Write a python function to check whether the input string is valid or not. A string is valid if all the parentheses in the string are balanced.\n    '''\n    l = []\n    for i in s: \n        if i == '(': \n            l.append(i)\n        elif i == ')': \n            if len(l) == 0: \n                return False\n            else: \n                l.pop()\n    if len(l) == 0: \n        return True\n    else: \n        return False\ndef findShortestSubArray(nums): \n    '''\n    Write a python function to find the length of the shortest subarray in the input array which has the given sum.\n    '''\n    l = []\n    for i in nums: \n        if i not in l: \n            l.append(i)\n    l.sort()\n    # print(l)\n    l1 = []\n    for j in l: \n        for k in range(len(nums)): \n            if nums[k] == j and k not in l1: \n                l1.append(k)\n    # print(l1)\n    # print(l1[-1] - l1[0] + 1)\n    return l1[-1] - l1[0] + 1\ndef printNumbers(n): \n    '''\n    Write a python function to print all the numbers in the range 1 to n that are divisible by either 2 or 3 or both 2 and 3.\n    '''\n    l = []\n    for i in range(1, n+1): \n        if i % 2 == 0 or i % 3 == 0: \n            l.append(i)\n    return l\ndef arrayChange(inputArray): \n    '''\n    Write a python function to find the maximum difference between any two elements such that larger element appears after the smaller number.\n    '''\n    l = []\n    for i in range(len(inputArray)-1): \n        for j in range(i, len(inputArray)): \n            if inputArray[i] > inputArray[j]: \n                l.append(inputArray[i] - inputArray[j])\n    return max(l)\ndef insertionSort1(n, arr): \n    '''\n    Write a python function to sort the input array using insertion sort.\n    '''\n    for i in range(1, len(arr)): \n        for j in range(i, 0, -1): \n            if arr[j] > arr[j-1]: \n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            else: \n                break\n    return arr\ndef insertionSort2(n, arr): \n    '''\n    Write a python function to sort the input array using insertion sort.\n    '''\n    for i in range(1, len(arr)): \n        j = i - 1\n        while j >= 0 and arr[j] > arr[j+1]: \n            arr[j], arr[j+1] = arr[j+1], arr[j]\n            j -= 1\n    return arr\ndef arrayManipulation(n, queries): \n    '''\n    Write a python function to calculate the sum of contiguous subarray with maximum sum.\n    '''\n    arr = [0] * (n+2)\n    l = []\n    for i in queries: \n        l.append(i[0])\n        l.append(i[1])\n    for j in l: \n        arr[j] = arr[j-1] + 1\n    l = []\n    for i in arr: \n        l.append(i)\n    l1 = []\n    l1.append(arr[0])\n    l1.append(l[0] + l[1])\n    for k in range(2, len(arr)): \n        l1.append(max(l1[k-1], l1[k-2] + l[k]))\n    return l1[-1]\ndef arrayManipulation1(n, queries): \n    '''\n    Write a python function to calculate the sum of contiguous subarray with maximum sum.\n    '''\n    arr = [0] * (n+2)\n    for i in queries: \n        arr[i[0]] = arr[i[0]] + i[2]\n        arr[i[1]+1] = arr[i[1]+1] - i[2]\n    l = []\n    for i in range(len(arr)): \n        if arr[i] > 0: \n            l.append(arr[i])\n    return max(l)\ndef findMaxConsecutiveOnes(nums): \n    '''\n    Write a python function to find the maximum number of consecutive 1s in the input array.\n    '''\n    l = []\n    for i in nums: \n        if i == 1: \n            l.append(i)\n    return max(l)\ndef maxSubArrayLen",
        "num_ids": 44
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_frequency = {}\n    for digit in str(n):\n        if digit in digit_frequency:\n            digit_frequency[digit] += 1\n        else:\n            digit_frequency[digit] = 1\n    for digit in str(n):\n        if int(digit_frequency[digit]) > int(digit):\n            return False\n    return True\n",
        "num_ids": 84
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for x in str(n):\n        if int(x) > int(n):\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n)\n    for i in range(0, 10): \n        if s.count(str(i)) > i: \n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all([x==element for x in list])\n",
        "num_ids": 15
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # your code here\n    return list.count(element) == len(list)\n",
        "num_ids": 22
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(list[0] == element for i in list)\n",
        "num_ids": 18
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Not all items in the list are equal to the given element.\")\n",
        "num_ids": 52
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list)==0:\n        return False\n    else:\n        if list[0]==element:\n            return check_element(list[1:],element)\n        else:\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    check= True\n    for item in list:\n        if item!= element:\n            check= False\n            break\n    return check\n",
        "num_ids": 34
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = re.compile(r'(ab+)')\n    mo = regex.search(text)\n    if mo:\n        return 'Found a match!'\n    else:\n        return 'Not Found!'\n",
        "num_ids": 52
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    pattern = r'.a.{2,3}b'\n    match = re.search(pattern, text)\n    \n    return match\n",
        "num_ids": 37
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'.*ab{2,3}.'\n    result = re.match(pattern, text) is not None\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.{2}b|a.{3}b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    a_pattern = r\"(.+)?a(.+)?(ab){2,3}\"\n    result = re.search(a_pattern, text)\n    if result:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 60
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(a.{2,3}b)')\n    result = re.search(pattern, text)\n    return result!= None\n",
        "num_ids": 43
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(ab){2,3}')\n    result = pattern.search(text)\n    return result!= None\n",
        "num_ids": 38
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # return re.search(r'a.b{2,3}a', text)\n    pattern = r'a.b{2,3}a'\n    if re.search(pattern, text):\n        print(\"MATCH\")\n    else:\n        print(\"NO MATCH\")\n",
        "num_ids": 70
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match_two = re.findall(\"ab{2}\", text)\n    match_three = re.findall(\"ab{3}\", text)\n",
        "num_ids": 38
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search('ab{2,3}', text)\n    return match!= None\n",
        "num_ids": 26
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    b = [] \n    s = 0 \n    \n    for i in range(0, n): \n        s = s + a[i] \n        b.append(s) \n    \n    \n    \n    for i in range(0, n): \n        for j in range(0, k): \n            if (i + j < n): \n                b[i + j] += a[i] \n    \n    print(b)\n    \n    \n    max = 0 \n    for i in range(0, n): \n        if (b[i] > max): \n            max = b[i] \n    \n    return max \n    \n    \ndef max_sub_array_sum_opt(a, n): \n    max_sum = 0\n    curr_sum = 0\n    \n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        \n        if curr_sum < 0: \n            curr_sum = 0\n        \n        elif curr_sum > max_sum: \n            max_sum = curr_sum\n    \n    return max_sum \n    \n    \ndef max_sub_array_sum_opt_2(a, n): \n    max_sum = 0\n    curr_sum = 0\n    \n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        \n        if curr_sum < 0: \n            curr_sum = 0\n        \n        elif curr_sum > max_sum: \n            max_sum = curr_sum\n    \n    return max_sum \n    \n    \ndef max_sub_array_sum_opt_3(a, n): \n    curr_sum = 0\n    max_sum = a[0]\n    \n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        \n        if curr_sum > max_sum: \n            max_sum = curr_sum\n    \n    return max_sum \n    \n    \ndef max_sub_array_sum_opt_4(a, n): \n    curr_sum = 0\n    max_sum = 0\n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        \n        if curr_sum < 0: \n            curr_sum = 0\n        \n        elif curr_sum > max_sum: \n            max_sum = curr_sum\n    \n    return max_sum \n    \n    \ndef max_sub_array_sum_opt_5(a, n): \n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, n): \n        curr_sum = max(a[i], curr_sum + a[i]) \n        \n        if curr_sum > max_sum: \n            max_sum = curr_sum\n    \n    return max_sum \n    \n    \ndef max_sub_array_sum_opt_6(a, n): \n    max_sum = a[0]\n    curr_sum = 0\n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        \n        if curr_sum > max_sum: \n            max_sum = curr_sum\n        \n    return max_sum \n    \n    \ndef max_sub_array_sum_opt_7(a, n): \n    curr_sum = 0\n    max_sum = a[0]\n    \n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        \n        if curr_sum < 0: \n            curr_sum = 0\n        \n        elif curr_sum > max_sum: \n            max_sum = curr_sum\n    \n    return max_sum \n    \n    \ndef max_sub_array_sum_opt_8(a, n): \n    curr_sum = 0\n    max_sum = a[0]\n    \n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        \n        if curr_sum < 0: \n            curr_sum = 0\n        \n        elif curr_sum > max_sum: \n            max_sum = curr_sum\n        \n    return max_sum \n    \n    \ndef max_sub_array_sum_opt_9(a, n): \n    curr_sum = 0\n    max_sum = 0\n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        \n        if curr_sum < 0: \n            curr_sum = 0\n        \n        elif curr_sum > max_sum: \n            max_sum = curr_sum\n        \n    return max_sum \n    \n    \ndef max_sub_array_sum_opt_10(a, n): \n    curr_sum = 0\n    max_sum = a[0]\n    \n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        \n        if curr_sum < 0: \n            curr_sum = 0\n        \n        elif curr_sum > max_sum: \n            max_sum = curr_sum\n        \n    return max_sum \n    \n    \ndef max_sub_array_sum_opt_11(a, n): \n    curr_sum = 0\n    max_sum = 0\n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        \n        if curr_sum < 0: \n            curr_sum = 0\n        \n        elif curr_sum > max_sum: \n            max_sum = curr_sum\n        \n    return max_sum \n    \n    \ndef max_sub_array_sum_opt_12(a, n): \n    curr_sum = 0\n    max_sum = 0\n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        \n        if curr_sum < 0: \n            curr_sum = 0\n        \n        elif curr_sum > max_sum: \n            max_sum = curr_sum\n        \n    return max_sum \n    \n    \ndef max_sub_array_sum_opt_13(a, n): \n    curr_sum = 0\n    max_sum = 0\n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        \n        if curr_sum < 0: \n            curr_sum = 0\n        \n        elif curr_sum > max_sum: \n            max_sum = curr_sum\n        \n    return max_sum \n    \n    \ndef max_sub_array_sum_opt_14(a, n): \n    curr_sum = 0\n    max_sum = 0\n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        \n        if curr_sum < 0: \n            curr_sum = 0\n        \n        elif curr_sum > max_sum: \n            max_sum = curr_sum\n        \n    return max_sum \n    \n    \ndef max_sub_array_sum_opt_15(a, n): \n    curr_sum = 0\n    max_sum = 0\n    for i in range(0, n): \n        curr_sum = curr_sum + a[i] \n        \n        if curr_sum < 0: \n            curr_sum = 0\n        \n        elif curr_sum > max_sum: \n            max_sum = curr_sum\n        \n    return max_sum \n    \n    \ndef max_sub_array_sum_opt_1",
        "num_ids": 1993
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(k):\n        max_sum += max_sub_array_sum(a)\n    return max_sum % (10 ** 9 + 7)\n",
        "num_ids": 48
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    max_sum = 0\n    for i in range(0, n):\n        sum = 0\n        for j in range(i, i+k):\n            if j >= n:\n                break\n            sum += a[j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n",
        "num_ids": 103
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k > n:\n        return -1\n",
        "num_ids": 14
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_sum = sum(a[0:k])\n    sum_so_far = max_sum\n    for i in range(k, n):\n        # print(i, sum_so_far, sum(a[i-k:i]))\n        if sum_so_far < 0:\n            sum_so_far = sum(a[i-k:i])\n        else:\n            sum_so_far += sum(a[i-k:i])\n            \n        max_sum = max(max_sum, sum_so_far)\n        # print(i, sum_so_far, max_sum)\n        \n    return max_sum\n    \n    \ndef max_sub_array_sum_repeated_v2(a, n, k): \n    '''\n    More efficient solution.\n    '''\n    max_sum = 0\n    sum_so_far = 0\n    max_sum_so_far = 0\n    for i in range(k):\n        sum_so_far += a[i]\n        max_sum_so_far = max(max_sum_so_far, sum_so_far)\n        \n    max_sum = max_sum_so_far\n    \n    for i in range(k, n):\n        sum_so_far += a[i]\n        sum_so_far -= a[i - k]\n        max_sum = max(max_sum, sum_so_far)\n        max_sum_so_far = max(max_sum_so_far, sum_so_far)\n        \n    return max_sum\n    \n    \nif __name__ == '__main__':\n    print(max_sub_array_sum_repeated([1, 2, -5, -4, 1, 6, -1, 7, -8, 9, 3, -5, 6, 7, -1, -2, 4, -1], 16, 3))\n    print(max_sub_array_sum_repeated_v2([1, 2, -5, -4, 1, 6, -1, 7, -8, 9, 3, -5, 6, 7, -1, -2, 4, -1], 16, 3))\n    \n    ",
        "num_ids": 329
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the result and subarray sum\n    max_sum = 0\n    temp = 0\n",
        "num_ids": 25
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    curr_sum = 0\n    max_sum = 0\n    for i in range(0, n): \n        curr_sum += a[i] \n",
        "num_ids": 41
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -99999999999\n    for i in range(0, n + 1):\n        sum_array = sum(a[0:i])\n        sum_array += (k - 1) * sum(a[0:i])\n        if sum_array > max_sum:\n            max_sum = sum_array\n    return max_sum\n",
        "num_ids": 85
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod = 10**9 + 7\n    arr = [0]*k\n    mod = 10**9 + 7\n    for i in range(n):\n        arr[i%k] += a[i]\n    return max(arr) % mod\n",
        "num_ids": 60
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum = 0\n    for i in range(0, n): \n        sum += a[i] \n    max_sum = sum \n",
        "num_ids": 36
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i*i for i in range(2,n+1,2)])\n",
        "num_ids": 24
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += i*i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    squares = []\n    for i in range(n+1):\n        squares.append(i**2)\n    print(squares)\n    return sum(squares)\n",
        "num_ids": 45
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**2\n",
        "num_ids": 36
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        if i%2==0:\n            sum+=i*i\n    return sum\nn=int(input(\"Enter an Integer to calculate the sum of squares of first n natural numbers: \"))\nprint(\"The sum of squares of first n natural numbers is: \",square_Sum(n))",
        "num_ids": 80
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Code here\n    Sum = 0\n    for i in range(2,n+1):\n        Sum += i**2\n    return Sum\n",
        "num_ids": 36
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i**2 for i in range(0,n+1,2)])\n",
        "num_ids": 24
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n ** 2) + square_Sum(n - 2)\n",
        "num_ids": 34
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # The below code returns an error for n = 0,1 since the the below logic is not valid for n = 0,1\n    if n <= 1:\n        return None\n    else:\n        return (n * (n + 1)) ** 2 / 4\n",
        "num_ids": 61
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if(i%2 == 0):\n            sum += i**2\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = len(list1[0])\n    for item in list1:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n",
        "num_ids": 51
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return len(max(list1, key=len))\n",
        "num_ids": 16
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n",
        "num_ids": 56
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(list1, key=len)\n",
        "num_ids": 14
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_l = 0\n    for i in list1:\n        if max_l < len(i):\n            max_l = len(i)\n    return max_l\n    \nlist1 = [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"x\", \"y\", \"z\"]]\nprint(max_length(list1))\n",
        "num_ids": 89
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    len_list = []\n    for i in range(len(list1)):\n        len_list.append(len(list1[i]))\n    return len(list1[len_list.index(max(len_list))])\n",
        "num_ids": 61
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n",
        "num_ids": 33
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    len1=[]\n    for i in list1:\n        len1.append(len(i))\n    return len1\n",
        "num_ids": 32
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    count=0\n    maxi=0\n    for i in list1:\n        if len(i)>maxi:\n            maxi=len(i)\n        count+=1\n    return maxi\n",
        "num_ids": 51
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if(k==1):\n        return n\n    if(n<=k):\n        return 1\n    if(k<=1):\n        return 0\n    \n    ways = [0]*(n+1)\n    ways[0] = 0\n    ways[1] = 1\n    ways[2] = 1\n    \n    for i in range(3, n+1):\n        ways[i] = ways[i-1] + ways[i-2]\n    \n    return ways[n]\n",
        "num_ids": 123
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    mod = 1000000007\n    dp = [[0 for _ in range(k)] for _ in range(n)]\n",
        "num_ids": 29
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for x in range(k + 1)] for y in range(n)]\n",
        "num_ids": 24
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a table to store results of subproblems \n    count = [0 for i in range(n + 1)] \n    count[0] = 1\n    count[1] = 1\n    for i in range(2, n + 1): \n        count[i] = (count[i - 1] + count[i - 2]) % (10**9 + 7)\n    return count[n]\n",
        "num_ids": 98
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Same as counting of subsets of size 2\n",
        "num_ids": 14
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2 or k < 2:\n        return 0\n    if n == 2 and k == 2:\n        return 1\n    if n == 3:\n        return k\n    if n == 4:\n        return (k * k) + (k * (k - 1))\n    if n == 5:\n        return ((k * k) + (k * (k - 1))) * (k - 1) + (k * (k * (k - 1)))\n    return ((k * k) + (k * (k - 1))) * (k - 1) + (k * (k * (k - 1))) + count_no_of_ways(n - 4, k)\n",
        "num_ids": 159
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #creating dp table\n    dp = [[0 for _ in range(k)] for _ in range(n+1)]\n",
        "num_ids": 32
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (k == 1):\n        return 1 if (n == 0 or n == 1) else 0\n    \n    ways = [0] * (k + 1)\n    ways[0] = 1\n    ways[1] = 1\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            ways[j] = (ways[j] + ways[j - 1]) % (10 ** 9 + 7)\n",
        "num_ids": 110
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k)] for j in range(n+1)]\n    # Base cases \n    for i in range(k):\n        dp[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(k):\n            for m in range(k):\n                if j == m:\n                    dp[i][j] += dp[i-1][m]\n                else:\n                    dp[i][j] += dp[i-1][m]\n    # print(dp)\n    return dp[-1][-1]\n    \ndef count_no_of_ways2(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [0 for i in range(k+1)]\n    # Base cases \n    dp[0] = 1\n    dp[1] = k\n    for i in range(1, n+1):\n        # Repitition cases \n        for j in range(k, 0, -1):\n            dp[j] += dp[j-1]\n        for j in range(k):\n            dp[j] = dp[j] + dp[j]\n    print(dp)\n    return dp[-1]\n",
        "num_ids": 130
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n==1 or k==1):\n        return 1\n    \n    # (1) k-1 possible ways for the first fence. \n    # (2) k-1 possible ways for the second fence.\n    # (3) Sum of (1) and (2) \n    return count_no_of_ways(n-1,k-1) + count_no_of_ways(n-1,k) \n",
        "num_ids": 104
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q=n//m\n    return q\n",
        "num_ids": 13
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n//m\n    return q\n",
        "num_ids": 13
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<m:\n        quotient=0\n    else:\n        quotient=n//m\n    return quotient\n",
        "num_ids": 34
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # m=int(input('enter value of m:'))\n    # n=int(input('enter value of n:'))\n    if m>n:\n        print('Quotient of the two numbers cannot be found')\n    elif m==0:\n        print('Division by zero is not possible')\n    else:\n        return m//n\n",
        "num_ids": 84
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print(round(n/m))\n",
        "num_ids": 12
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    a=n//m\n    return a\n    \ndef main():\n    n = int(input(\"enter a number: \"))\n    m = int(input(\"enter another number: \"))\n    print(find(n,m))\n",
        "num_ids": 57
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    n1=n\n    n2=m\n    while n1>=n2:\n        if n2%n1==0:\n            return n1\n        else:\n            n2=n2+1\n    return n1\n    \ndef sum_of_proper_divisors(n):\n    '''\n    Write a python function to find sum of all proper divisors of a number.\n    '''\n    sum1=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum1=sum1+i\n    return sum1\n    \ndef nth_prime(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    count=0\n    num=0\n    while count<n:\n        if(sum_of_proper_divisors(num)==num):\n            count=count+1\n            num=num+1\n        else:\n            num=num+1\n    return num\n",
        "num_ids": 68
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n",
        "num_ids": 11
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        min,max=m,n\n    else:\n        min,max=n,m\n    return (min/max)\nprint(find(21,15))\n",
        "num_ids": 48
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1 = w * h / 2\n    side2 = math.sqrt(w * w + h * h)\n    side3 = side1 / side2\n    return side3\n",
        "num_ids": 45
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #return 2*(w**2+h**2)**0.5\n    return (w**2+h**2)**0.5\n",
        "num_ids": 37
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        return 'invalid input'\n    elif w**2 + h**2 == (w+h)**2:\n        return round((w+h-math.sqrt((w**2 + h**2) - (w+h)**2))/2,2)\n    else:\n        return 'no third side possible'\n",
        "num_ids": 86
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        print(\"Given side cannot be equal, no third side exists\")\n    else:\n        x=(math.sqrt(w**2+h**2))\n        print(x)\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        print(\"Given side cannot be equal, no third side exists\")\n    else:\n        a=math.sqrt(w**2+h**2)\n        print(a)\ndef otherside_rhombus(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2)\n    print(a)\ndef otherside_trapeze(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/2)\n    print(a)\ndef otherside_parallelogram(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        print(\"Given side cannot be equal, no third side exists\")\n    else:\n        a=math.sqrt(w**2+h**2)\n        print(a)\ndef otherside_trapeze_parallelogram(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        print(\"Given side cannot be equal, no third side exists\")\n    else:\n        a=math.sqrt(w**2+h**2)\n        print(a)\ndef otherside_trapeze_parallelogram_square(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if s==2:\n        print(\"Given side cannot be equal, no third side exists\")\n    else:\n        a=math.sqrt(s**2/2)\n        print(a)\ndef otherside_trapeze_triangle(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/3)\n    print(a)\ndef otherside_triangle_square(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/3)\n    print(a)\ndef otherside_triangle_parallelogram_square(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if s==2:\n        print(\"Given side cannot be equal, no third side exists\")\n    else:\n        a=math.sqrt(s**2/3)\n        print(a)\ndef otherside_triangle_parallelogram_square_rhombus(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if s==2:\n        print(\"Given side cannot be equal, no third side exists\")\n    else:\n        a=math.sqrt(s**2/2)\n        print(a)\ndef otherside_rhombus(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/2)\n    print(a)\ndef otherside_rhombus_square(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/2)\n    print(a)\ndef otherside_rhombus_square_trapeze(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/3)\n    print(a)\ndef otherside_trapeze_square(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/2)\n    print(a)\ndef otherside_trapeze_square_triangle(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/3)\n    print(a)\ndef otherside_triangle_square_trapeze(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/3)\n    print(a)\ndef otherside_triangle_square_triangle(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/2)\n    print(a)\ndef otherside_trapeze_square_rhombus(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/2)\n    print(a)\ndef otherside_trapeze_square_rhombus(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/3)\n    print(a)\ndef otherside_trapeze_square_parallelogram(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/3)\n    print(a)\ndef otherside_trapeze_rhombus(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/3)\n    print(a)\ndef otherside_triangle_rhombus(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/2)\n    print(a)\ndef otherside_triangle_square_rhombus(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/3)\n    print(a)\ndef otherside_rhombus_square_trapeze(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/2)\n    print(a)\ndef otherside_trapeze_square_square(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/2)\n    print(a)\ndef otherside_trapeze_square_square_rhombus(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/3)\n    print(a)\ndef otherside_rhombus_square_square(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/2)\n    print(a)\ndef otherside_trapeze_square_square_rhombus(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/3)\n    print(a)\ndef otherside_trapeze_square_square_triangle(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/2)\n    print(a)\ndef otherside_square_square(s):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(s**2/2)\n    prin",
        "num_ids": 20
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w**2)+(h**2))\n",
        "num_ids": 19
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=math.sqrt(h**2+w**2)\n    print(a)\n",
        "num_ids": 25
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w**2) + (h**2))\n",
        "num_ids": 20
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\ndef triangle_type(a,b,c):\n    '''\n    Write a function to determine the type of triangle.\n    '''\n    if a+b>c:\n        if a+c>b:\n            if b+c>a:\n                return 'Scalene'\n            else:\n                return 'Isosceles'\n        else:\n            return 'Invalid Triangle'\n    else:\n        return 'Invalid Triangle'\ndef get_triangle(a,b,c):\n    '''\n    Write a function that takes three lengths of a triangle and determines the type of triangle.\n    '''\n    if a+b>c:\n        if a+c>b:\n            if b+c>a:\n                return triangle_type(a,b,c)\n            else:\n                return 'Invalid Triangle'\n        else:\n            return 'Invalid Triangle'\n    else:\n        return 'Invalid Triangle'\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return.5*a*b\ndef length_of_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return a+b+c\ndef perimeter_of_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return a+b+c\ndef area_of_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return a*b\ndef perimeter_of_parallelogram(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    return 2*(a+b)\ndef area_of_trapezoid(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return ((a+b)/2)*h\ndef perimeter_of_trapezoid(a,b,h):\n    '''\n    Write a function to find the perimeter of a trapezoid.\n    '''\n    return a+b+h\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r*r\ndef radius_of_circle(a):\n    '''\n    Write a function to find the radius of a circle.\n    '''\n    return a/math.pi\ndef circumference_of_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\ndef circumference_of_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\ndef area_of_semi_circle(r):\n    '''\n    Write a function to find the area of a semi circle.\n    '''\n    return math.pi*r*r\ndef circumference_of_semi_circle(r):\n    '''\n    Write a function to find the circumference of a semi circle.\n    '''\n    return 2*math.pi*r\ndef area_of_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef perimeter_of_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef area_of_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return (a*b)/2\ndef perimeter_of_rhombus(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    return 2*(a+b)\ndef area_of_triangle_rightangle(a,b,c):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return.5*b*c\ndef perimeter_of_triangle_rightangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a right angled triangle.\n    '''\n    return a+b+c\ndef area_of_circle_sector(r,angle):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return r*r*angle/360\ndef area_of_circle_sector_rightangle(r,angle):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (r*r)*angle/360\ndef perimeter_of_circle_sector(r,angle):\n    '''\n    Write a function to find the perimeter of a circle sector.\n    '''\n    return r*angle\ndef area_of_rectangle_rightangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef perimeter_of_rectangle_rightangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef area_of_parallelogram_rightangle(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return a*b\ndef perimeter_of_parallelogram_rightangle(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    return 2*(a+b)\ndef area_of_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef perimeter_of_square(a):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return 4*a\ndef area_of_square_of_same_side(a,b):\n    '''\n    Write a function to find the area of a square with the same sides.\n    '''\n    return a*b\ndef area_of_square_of_same_side_equilateral(a):\n    '''\n    Write a function to find the area of a square with the same sides.\n    '''\n    return a*a\ndef area_of_square_of_same_side_isosceles(a,b):\n    '''\n    Write a function to find the area of a square with the same sides.\n    '''\n    return a*b\ndef area_of_square_of_same_side_scalene(a,b):\n    '''\n    Write a function to find the area of a square with the same sides.\n    '''\n    return a*b\ndef area_of_square_rightangle(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef perimeter_of_square_rightangle(a):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return 4*a\ndef area_of_rectangle_rightangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef perimeter_of_rectangle_rightangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef area_of_rectangle_isosceles(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef perimeter_of_rectangle_isosceles(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef area_of_rectangle_scalene(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef perimeter_of_rectangle_scalene(a,b):\n",
        "num_ids": 25
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside = math.sqrt(h**2 + w**2)\n    print(\"The third side of a right angled triangle is: \",thirdside)\n    \ndef rectangle(length, width):\n    '''\n    Write a function to find the perimeter and area of a rectangle\n    '''\n    area = length*width\n    perimeter = 2*length + 2*width\n    print(\"Area of the rectangle is: \",area)\n    print(\"Perimeter of the rectangle is: \",perimeter)\n    \ndef triangle(base,height):\n    '''\n    Write a function to find the perimeter and area of a triangle given its base and height.\n    '''\n    area = 0.5*base*height\n    perimeter = 3*base + 3*height\n    print(\"Area of the triangle is: \",area)\n    print(\"Perimeter of the triangle is: \",perimeter)\n    \ndef rightangledtriangle(side1,side2,side3):\n    '''\n    Write a function to determine if it is possible to make a triangle with the given side lengths\n    by checking if the sum of any two sides equals the third side, if so then print 'Yes'.\n    '''\n    if(side1+side2 == side3):\n        print('Yes')\n    elif(side2+side3 == side1):\n        print('Yes')\n    elif(side1+side3 == side2):\n        print('Yes')\n    else:\n        print('No')\n        \ndef in_or_out(radius,height):\n    '''\n    Write a function to determine if the ball will be in or out of the given cylinder.\n    '''\n    if(radius**2 < height):\n        print('Out')\n    else:\n        print('In')\n        \ndef circle_area(radius):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    area = math.pi*(radius**2)\n    print(\"Area of the circle is: \",area)\n    \ndef circle_circumference(radius):\n    '''\n    Write a function to calculate the circumference of a circle given its radius.\n    '''\n    circumference = 2*math.pi*radius\n    print(\"Circumference of the circle is: \",circumference)\n    \ndef sphere_area(radius):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    area = 4*math.pi*(radius**2)\n    print(\"Area of the sphere is: \",area)\n    \ndef sphere_circumference(radius):\n    '''\n    Write a function to calculate the circumference of a sphere given its radius.\n    '''\n    circumference = 2*math.pi*radius\n    print(\"Circumference of the sphere is: \",circumference)\n    \ndef cone_volume(radius,height):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height.\n    '''\n    volume = math.pi*(radius**2)*height/3\n    print(\"Volume of the cone is: \",volume)\n    \ndef cone_surface_area(radius,height):\n    '''\n    Write a function to calculate the surface area of a cone given its radius and height.\n    '''\n    surface_area = math.pi*(radius**2) + math.pi*radius*height\n    print(\"Surface area of the cone is: \",surface_area)\n    \ndef cylinder_volume(radius,height):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height.\n    '''\n    volume = math.pi*(radius**2)*height\n    print(\"Volume of the cylinder is: \",volume)\n    \ndef cylinder_surface_area(radius,height):\n    '''\n    Write a function to calculate the surface area of a cylinder given its radius and height.\n    '''\n    surface_area = 2*math.pi*radius*(radius+height)\n    print(\"Surface area of the cylinder is: \",surface_area)\n    \ndef cuboid_volume(length,width,height):\n    '''\n    Write a function to calculate the volume of a cuboid given its length, width and height.\n    '''\n    volume = length*width*height\n    print(\"Volume of the cuboid is: \",volume)\n    \ndef cuboid_surface_area(length,width,height):\n    '''\n    Write a function to calculate the surface area of a cuboid given its length, width and height.\n    '''\n    surface_area = 2*(length*width + length*height + width*height)\n    print(\"Surface area of the cuboid is: \",surface_area)\n    \ndef cuboid_lateral_surface_area(length,width,height):\n    '''\n    Write a function to calculate the lateral surface area of a cuboid given its length, width and height.\n    '''\n    lateral_surface_area = length*width + length*height + width*height\n    print(\"Lateral surface area of the cuboid is: \",lateral_surface_area)\n    \ndef cuboid_diagonal_surface_area(length,width,height):\n    '''\n    Write a function to calculate the diagonal surface area of a cuboid given its length, width and height.\n    '''\n    diagonal_surface_area = math.sqrt(length**2 + width**2 + height**2)\n    print(\"Diagonal surface area of the cuboid is: \",diagonal_surface_area)\n    \ndef cuboid_prism_volume(length,width,height,prism_type):\n    '''\n    Write a function to calculate the volume of a cuboid given its length, width, height and prism type.\n    '''\n    volume = length*width*height\n    if(prism_type == 'parallel_cuboid'):\n        volume = 2*volume\n    if(prism_type == 'orthogonal_cuboid'):\n        volume = 2*volume\n    print(\"Volume of the cuboid is: \",volume)\n    \ndef cuboid_prism_surface_area(length,width,height,prism_type):\n    '''\n    Write a function to calculate the surface area of a cuboid given its length, width, height and prism type.\n    '''\n    surface_area = 2*(length*width + length*height + width*height)\n    if(prism_type == 'parallel_cuboid'):\n        surface_area = 4*surface_area\n    if(prism_type == 'orthogonal_cuboid'):\n        surface_area = 2*surface_area\n    print(\"Surface area of the cuboid is: \",surface_area)\n    \ndef cuboid_prism_lateral_surface_area(length,width,height,prism_type):\n    '''\n    Write a function to calculate the lateral surface area of a cuboid given its length, width, height and prism type.\n    '''\n    lateral_surface_area = length*width + length*height + width*height\n    if(prism_type == 'parallel_cuboid'):\n        lateral_surface_area = 2*lateral_surface_area\n    if(prism_type == 'orthogonal_cuboid'):\n        lateral_surface_area = 4*lateral_surface_area\n    print(\"Lateral surface area of the cuboid is: \",lateral_surface_area)\n    \ndef cuboid_prism_diagonal_surface_area(length,width,height,prism_type):\n    '''\n    Write a function to calculate the diagonal surface area of a cuboid given its length, width, height and prism type.\n    '''\n    diagonal_surface_area = math.sqrt(length**2 + width**2 + height**2)\n    if(prism_type == 'parallel_cuboid'):\n        diagonal_surface_area = 2*diagonal_surface_area\n    if(prism_type == 'orthogonal_cuboid'):\n        diagonal_surface_area = 2*diagonal_surface_area\n    print(\"Diagonal surface area of the cuboid is: \",diagonal_surface_area)\n    \ndef cuboid_volume_and_surface_area(length,width,height):\n    '''\n    Write a function to calculate the volume and surface area of a cuboid given its length, width, height.\n    '''\n    volume = length*width*height\n    surface_area = 2",
        "num_ids": 17
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\n",
        "num_ids": 12
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    for i in range(0, len(listval)):\n        for j in range(i + 1, len(listval)):\n            if listval[i] > listval[j]:\n                listval[i], listval[j] = listval[j], listval[i]\n    return listval[0]\n",
        "num_ids": 79
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if isinstance(i, int):\n            if max_val == None:\n                max_val = i\n            elif i > max_val:\n                max_val = i\n    return max_val\n",
        "num_ids": 66
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val=listval[0]\n    for i in range(0,len(listval)):\n        if max_val < listval[i]:\n            max_val=listval[i]\n    return max_val\n",
        "num_ids": 57
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        return max(max_val(listval[1:]),listval[0])\n",
        "num_ids": 45
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1,len(listval)):\n        if max_val < listval[i]:\n            max_val = listval[i]\n    return max_val\n",
        "num_ids": 57
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # if not listval:\n    #     return 'The given list is empty'\n    # else:\n    #     return max(listval)\n    # return max(listval)\n    return max(listval, key=lambda k: k['speed'])\n",
        "num_ids": 64
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for n in listval:\n        if type(n) == type(1):\n            if n >= max:\n                max = n\n        elif type(n) == type(\"\"):\n            if len(n) > max:\n                max = len(n)\n        elif type(n) == type([]):\n            for x in n:\n                if type(x) == type(1):\n                    if x >= max:\n                        max = x\n                elif type(x) == type(\"\"):\n                    if len(x) > max:\n                        max = len(x)\n                elif type(x) == type([]):\n                    for y in x:\n                        if type(y) == type(1):\n                            if y >= max:\n                                max = y\n                        elif type(y) == type(\"\"):\n                            if len(y) > max:\n                                max = len(y)\n    return max\n",
        "num_ids": 224
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return\n    \n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n",
        "num_ids": 59
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n",
        "num_ids": 35
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = None\n    for i in range(len(listval)):\n        if maxval is None or maxval < listval[i]:\n            maxval = listval[i]\n    return maxval\n",
        "num_ids": 52
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sums = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sums += i\n    return sums\n",
        "num_ids": 40
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number <= 0:\n        return False\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    else:\n        sum = 1\n        for i in range(2, number):\n            if number % i == 0:\n                sum = sum + i\n        return sum\n",
        "num_ids": 77
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    num = number\n    lst = [1]\n    for x in range(2, int(math.sqrt(num))+1):\n        if num % x == 0:\n            lst.append(x)\n            if x!= number:\n                lst.append(int(num/x))\n    return sum(lst)\n",
        "num_ids": 83
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    print('---- divisor sum ----')\n    divisors = []\n    for divisor in range(2,number):\n        if number%divisor == 0:\n            divisors.append(divisor)\n    sum_of_divisors = 0\n    for divisor in divisors:\n        sum_of_divisors += divisor\n    print(f'{number} is divisible by {divisors}')\n    print(f'The sum of divisors of {number} is: {sum_of_divisors}')\n",
        "num_ids": 138
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisors = 1\n    for i in range(2, number):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisor = 0\n    for divisor in range(1, number):\n        if number % divisor == 0:\n            sum_divisor += divisor\n    return sum_divisor\n",
        "num_ids": 54
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    n = number\n    sum_div = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_div += i\n    return sum_div\n",
        "num_ids": 49
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for n in range(1, number+1):\n        if number % n == 0:\n            total += n\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    arr1 = sorted(arr)\n    arr2 = []\n    for i in range(n):\n        arr2.append(arr1[i]-arr[i])\n    print(arr2)\n    inv = 0\n    for i in range(len(arr2)):\n        for j in range(i):\n            if arr2[j]>arr2[i]:\n                inv+=1\n    print('Number of inversions are: ',inv)\n",
        "num_ids": 116
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return merge_sort(arr)\n",
        "num_ids": 11
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inversion_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] > arr[j]):\n                inversion_count += 1\n    return inversion_count\n",
        "num_ids": 69
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inversions = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return inversions\n",
        "num_ids": 63
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergeSort(arr,0,len(arr)) \n    \ndef mergeSort(arr,s,e): \n    if s==e:\n        return 0\n    mid = (s+e)//2\n    inv_count = mergeSort(arr,s,mid) + mergeSort(arr,mid+1,e) \n    \n    i=s\n    j=mid+1\n    k=s\n    while i<=mid and j<=e: \n        if arr[i]<=arr[j]:\n            i+=1\n        else:\n            inv_count += (mid-i+1) \n            j+=1\n    \n    while i<=mid: \n        arr[k] = arr[i]\n        i+=1\n        k+=1\n    while j<=e: \n        arr[k] = arr[j]\n        j+=1\n        k+=1\n    \n    return inv_count\n    \ndef main():\n    arr = [1, 20, 6, 4, 5] \n    print(get_Inv_Count(arr))\n    \n    arr = [2, 4, 1, 3, 5] \n    print(get_Inv_Count(arr))\n",
        "num_ids": 289
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) > 1: \n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        \n        i = 0\n        j = 0\n        k = 0\n        \n        left_count = get_Inv_Count(left)\n        right_count = get_Inv_Count(right)\n        \n        inversion_count = left_count + right_count\n        \n        while i < len(left) and j < len(right): \n            if left[i] <= right[j]: \n                arr[k] = left[i] \n                i += 1\n            else: \n                arr[k] = right[j] \n                j += 1\n                inversion_count += mid - i \n            k += 1\n            \n        while i < len(left): \n            arr[k] = left[i] \n            i += 1\n            k += 1\n            \n        while j < len(right): \n            arr[k] = right[j] \n            j += 1\n            k += 1\n            \n        return inversion_count\n    else: \n        return 0\n",
        "num_ids": 276
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]>arr[j]:\n                Inv_Count+=1\n    return Inv_Count\n",
        "num_ids": 62
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    return mergeSort(arr,0,n-1)\n",
        "num_ids": 24
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergeSort(arr)\n",
        "num_ids": 10
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr_size = len(arr)\n    arr_inv_count = 0\n    \n    # if we have one or zero elements, return 0\n    if (arr_size < 2): \n        return arr_inv_count\n    # Sort the input array in-place by counting\n    # inversions as we iterate\n    for i in range(arr_size):\n        \n        # Find the next element\n        for j in range(i + 1, arr_size):\n            \n            if (arr[i] > arr[j]):\n                arr_inv_count += 1\n    \n    return arr_inv_count\n",
        "num_ids": 146
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    l = []\n    for e in list1:\n        if type(e) == list:\n            l += flatten_list(e)\n        else:\n            l.append(e)\n    return l\n",
        "num_ids": 52
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            for item2 in item:\n                flat_list.append(item2)\n        else:\n            flat_list.append(item)\n",
        "num_ids": 60
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for element in list1:\n        if type(element) == type([]):\n            flat_list += flatten_list(element)\n        else:\n            flat_list.append(element)\n    return flat_list\n",
        "num_ids": 62
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for sublist in list1:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n",
        "num_ids": 42
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2=[]\n    for i in list1:\n        if type(i)==list:\n            list2.extend(flatten_list(i))\n        else:\n            list2.append(i)\n    return list2",
        "num_ids": 58
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item,list):\n            result += flatten_list(item)\n        else:\n            result.append(item)\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n",
        "num_ids": 69
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    return [elem for sublist in list1 for elem in sublist]\n",
        "num_ids": 33
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    # initialize variables\n    list2 = []\n    curr_list = []\n    # loop over the input list\n    for i in list1:\n        # if the element is a list\n        if type(i) is list:\n            # keep track of the inner lists\n            curr_list = i\n        # if the element is not a list\n        else:\n            # iterate over the current inner lists\n            for j in curr_list:\n                # add the element to the output list\n                list2.append(j)\n            # empty the current list\n            curr_list = []\n            # add the outer element to the output list\n            list2.append(i)\n    # return the output list\n    return list2",
        "num_ids": 174
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n",
        "num_ids": 19
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg = defaultdict(int)\n    for i,j in stdata:\n        agg[j] = max(agg[j],i)\n    return agg\n",
        "num_ids": 40
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = 0\n    for i in range(len(stdata)):\n        if stdata[i][1] > max_val:\n            max_val = stdata[i][1]\n",
        "num_ids": 50
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(int)\n    for k,v in stdata:\n        data[k] = max(data[k],v)\n    return data\n",
        "num_ids": 40
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for item in stdata:\n        max_aggregate += item[1]\n    return max_aggregate\n",
        "num_ids": 36
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxagg = (0,[])\n    for i in range(len(stdata)):\n        if(stdata[i][1]>maxagg[0]):\n            maxagg = stdata[i]\n    return maxagg\n",
        "num_ids": 57
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # stdata = [(0, 10), (0, 12), (0, 11), (0, 13), (1, 10), (1, 11), (1, 12), (1, 13)]\n    # stdata = [(1, 10), (1, 12), (1, 11), (1, 13)]\n    \n    # stdata = [(0, 10), (0, 12), (1, 10), (1, 11), (1, 12), (1, 13)]\n    # stdata = [(1, 10), (1, 12), (1, 11), (1, 13)]\n",
        "num_ids": 138
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    #create a dictionary of the counts of the totals\n    #use the total to access the count\n    #if total is not found create a key of zero\n    #each total will have a key of zero, this is because we want to keep track of the max\n    #defaultdict creates a key with value of zero\n    #data = defaultdict(int)\n    data = {}\n    \n    #creates a list of all the totals\n    totals = []\n    \n    #loop through the data\n    for d in stdata:\n        \n        #add each total to the list of totals\n        totals.append(d[0])\n        \n        #if a total is not already in the dictionary, set the count to zero\n        if d[0] not in data:\n            data[d[0]] = 0\n    \n    #loop through the total\n    for t in totals:\n        \n        #if total is not in the dictionary, add a key of zero\n        if t not in data:\n            data[t] = 0\n        \n        #increase the count by one for each item in the list that is equal to the total\n        #if there is an increase in the count then the total is the new max\n        for d in stdata:\n            if d[0] == t:\n                data[t] += 1\n                \n                #if the count is greater than the old max, then the new max is the current total\n                if data[t] > max(data.values()):\n                    max_val = t\n    \n    #return the max value\n    return max_val\n    \n    \ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    \n    #create a dictionary of the counts of the totals\n    #use the total to access the count\n    #if total is not found create a key of zero\n    #each total will have a key of zero, this is because we want to keep track of the max\n    #defaultdict creates a key with value of zero\n    #data = defaultdict(int)\n    data = {}\n    \n    #creates a list of all the totals\n    totals = []\n    \n    #loop through the data\n    for d in stdata:\n        \n        #add each total to the list of totals\n        totals.append(d[0])\n        \n        #if a total is not already in the dictionary, set the count to zero\n        if d[0] not in data:\n            data[d[0]] = 0\n    \n    #loop through the total\n    for t in totals:\n        \n        #if total is not in the dictionary, add a key of zero\n        if t not in data:\n            data[t] = 0\n        \n        #increase the count by one for each item in the list that is equal to the total\n        #if there is an increase in the count then the total is the new max\n        for d in stdata:\n            if d[0] == t:\n                data[t] += 1\n                \n                #if the count is greater than the old max, then the new max is the current total\n                if data[t] > min(data.values()):\n                    min_val = t\n    \n    #return the max value\n    return min_val\n    \n    \ndef avg_aggregate(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    \n    #create a dictionary of the counts of the totals\n    #use the total to access the count\n    #if total is not found create a key of zero\n    #each total will have a key of zero, this is because we want to keep track of the max\n    #defaultdict creates a key with value of zero\n    #data = defaultdict(int)\n    data = {}\n    \n    #creates a list of all the totals\n    totals = []\n    \n    #loop through the data\n    for d in stdata:\n        \n        #add each total to the list of totals\n        totals.append(d[0])\n        \n        #if a total is not already in the dictionary, set the count to zero\n        if d[0] not in data:\n            data[d[0]] = 0\n    \n    #loop through the total\n    for t in totals:\n        \n        #if total is not in the dictionary, add a key of zero\n        if t not in data:\n            data[t] = 0\n        \n        #increase the count by one for each item in the list that is equal to the total\n        #if there is an increase in the count then the total is the new max\n        for d in stdata:\n            if d[0] == t:\n                data[t] += 1\n    \n    #calculate the average\n    avg = sum(totals)/len(totals)\n    \n    #return the average\n    return avg\n    \n    \ndef total_aggregate(stdata):\n    '''\n    Write a function to calculate the total aggregate from the list of tuples.\n    '''\n    \n    #create a dictionary of the counts of the totals\n    #use the total to access the count\n    #if total is not found create a key of zero\n    #each total will have a key of zero, this is because we want to keep track of the max\n    #defaultdict creates a key with value of zero\n    #data = defaultdict(int)\n    data = {}\n    \n    #creates a list of all the totals\n    totals = []\n    \n    #loop through the data\n    for d in stdata:\n        \n        #add each total to the list of totals\n        totals.append(d[0])\n        \n        #if a total is not already in the dictionary, set the count to zero\n        if d[0] not in data:\n            data[d[0]] = 0\n    \n    #loop through the total\n    for t in totals:\n        \n        #if total is not in the dictionary, add a key of zero\n        if t not in data:\n            data[t] = 0\n        \n        #increase the count by one for each item in the list that is equal to the total\n        #if there is an increase in the count then the total is the new max\n        for d in stdata:\n            if d[0] == t:\n                data[t] += 1\n    \n    #calculate the average\n    total = sum(totals)\n    \n    #return the average\n    return total\n    \n    \ndef count_aggregate(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    \n    #create a dictionary of the counts of the totals\n    #use the total to access the count\n    #if total is not found create a key of zero\n    #each total will have a key of zero, this is because we want to keep track of the max\n    #defaultdict creates a key with value of zero\n    #data = defaultdict(int)\n    data = {}\n    \n    #creates a list of all the totals\n    totals = []\n    \n    #loop through the data\n    for d in stdata:\n        \n        #add each total to the list of totals\n        totals.append(d[0])\n        \n        #if a total is not already in the dictionary, set the count to zero\n        if d[0] not in data:\n            data[d[0]] = 0\n    \n    #loop through the total\n    for t in totals:\n        \n        #if total is not in the dictionary, add a key of zero\n        if t not in data:\n            data[t] = 0\n        \n        #increase the count by one for each item in the list that is equal to the total\n        #if there is an increase in the count then the total is the new max\n        for d in stdata:\n            if d[0] == t:\n                data[t] += 1\n    \n    #calculate the average\n    count = len(stdata)\n    \n    #return the average\n    return count\n    \n    \ndef variance_aggregate(stdata):\n    '''\n    Write a function to calculate the variance aggregate from the list of tuples.\n    '''\n    \n    #create a dictionary of the counts of the totals\n    #use the total to access the count\n    #if total is not found create a key of zero\n    #each total will have a key of zero, this is because we want to kee",
        "num_ids": 58
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary with key as index and value as the list of tuples\n    d = defaultdict(list)\n    for index, tuple in enumerate(stdata):\n        d[index].append(tuple)\n    # for each key in the dictionary, find the maximum sum of all the tuples\n    max_aggregate = []\n    for key, value in d.items():\n        max_aggregate.append(max(tuple[1] for tuple in value))\n    return max_aggregate\n",
        "num_ids": 119
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # YOUR CODE GOES HERE\n    return 0\n",
        "num_ids": 14
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # initialise a list of maximums\n    max_aggregate = []\n",
        "num_ids": 20
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def compute_sum(n,m): \n        '''\n        This function computes sum of first m bits of n, using function sumOfBits.\n        '''\n        return sumOfBits(n,m)\n    #storing count in a variable for further usage\n    count = 0\n    for i in range(2**(2*n)):\n        if compute_sum(i,n) == compute_sum(i,n):\n            count += 1\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return count_binary_seq(n-1) + 2**(n-1)\n",
        "num_ids": 38
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # array of size 2n to store the counts of first and last n bits respectively \n    # ans[i] is the total number of sequences of length 2n and beginning and ending with i-th bits are of same sum. \n    ans = [0] * (1 << n * 2) \n    ans[0] = 1\n    for mask in range(1 << n * 2): \n        # remove the first and last n bits from mask to make a sum \n        x = sum((mask & (1 << i)) >> i for i in range(n * 2)) \n        y = sum((mask & (1 << (n * 2 - i - 1))) >> (n * 2 - i - 1) for i in range(n * 2))\n        total = ans[mask]\n        if x == y: \n            ans[mask] = total + 1\n        else: \n            ans[mask] = total \n    return sum(ans) \n",
        "num_ids": 221
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #https://www.geeksforgeeks.org/count-binary-sequences-of-given-length-that-satisfy-a-condition/\n    # 2^(2n) \n    if n == 0:\n        return 1\n    # initialise a dp table\n    dp = [0 for i in range(2*n+1)]\n    dp[0] = 1\n",
        "num_ids": 94
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 4\n    if n == 2:\n        return 16\n    return 2**n * count_binary_seq(n-2) + 2**(n-1) * count_binary_seq(n-2)\n",
        "num_ids": 71
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    bin_str = bin(n)[2:]\n    bits_1 = bin_str[:n]\n    bits_2 = bin_str[-n:]\n    return sum([int(x) for x in bits_1]) == sum([int(x) for x in bits_2])\n",
        "num_ids": 70
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2*count_binary_seq(n-1) + count_binary_seq(n-2)\n",
        "num_ids": 55
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    return (2*n-1)*count_binary_seq(n-1) + count_binary_seq(n-1)\n",
        "num_ids": 44
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # For example, the sum of first 3 bits is same as the sum of last 3 bits in the binary representation of 4.\n    # Hence a binary sequence of length 2n such that \n    # (b1 + b2 + bn) = (bn + bn-1 + bn-2 +... + b2 + b1)\n    # In binary, if a number is x number of bits long, then only 2x bits are needed to represent it.\n    # So, the sum of first n bits equals sum of last n bits\n    # Following is recursive formula for the number of binary sequences:\n    # number_of_binary_sequences(n) = 2 * number_of_binary_sequences(n - 1)\n    # \n    # '''\n    # if n == 0:\n    #     return 1\n    # elif n == 1:\n    #     return 2\n    # else:\n    #     return 2 * count_binary_seq(n - 1)\n    # '''\n    # If n = 0, there is only one binary sequence of length 2.\n    # If n = 1, there are two binary sequences of length 2.\n    # If n = 2, there are four binary sequences of length 2.\n    # If n = 3, there are eight binary sequences of length 2.\n    # n = 4, there are 16 binary sequences of length 2.\n    # So, the base cases are n = 0, n = 1, n = 2\n    # And the recursive formula is given by formula.\n    # Base cases are handled using base case values.\n    # Recursive formula is written in the following.\n    # return 2 * count_binary_seq(n - 1)\n    # '''\n    # Memoization\n    # Memoization is used to store the value of the result computed for smaller value of n.\n    # If a value is computed and stored before, then it will not be computed and stored again.\n    # This helps to use the recursion stack to a lesser extent.\n    # In order to improve the performance, memoization is implemented using a dictionary\n    # key : value = n : result\n    # Memoization helps us to use the recursion stack.\n    # Complexity : O(2^n)\n    memo = {0 : 1, 1 : 2}\n    def count_binary_seq_helper(n, memo):\n        if n not in memo:\n            memo[n] = 2 * count_binary_seq_helper(n - 1, memo)\n        return memo[n]\n    return count_binary_seq_helper(n, memo)\n",
        "num_ids": 208
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # (n+1) is the number of bits in a number\n    s = [[0 for i in range(n + 1)] \n        for i in range(2)] \n    s[0][0] = 1\n    for i in range(1, n + 1): \n        for j in range(2): \n            s[j][i] = s[(j - 1) % 2][i - 1] \n",
        "num_ids": 102
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    elif isinstance(d,dict):\n        keys = d.keys()\n        max_depth = 1\n        for k in keys:\n            this_depth = 1 + dict_depth(d[k])\n            if this_depth > max_depth:\n                max_depth = this_depth\n        return max_depth\n    elif isinstance(d,list):\n        return 1\n    else:\n        return 0\n        \ndef max_depth_helper(d,depth,max_depth):\n    '''\n    A helper function for dict_depth.\n    '''\n    if depth == max_depth:\n        return d\n    elif isinstance(d,dict):\n        keys = d.keys()\n        for k in keys:\n            this_depth = 1 + dict_depth(d[k])\n            if this_depth > max_depth:\n                max_depth = this_depth\n        return max_depth\n    elif isinstance(d,list):\n        return 1\n    else:\n        return 0\n        \ndef dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max_depth_helper(d,1,1)\n    \ndef no_key(d):\n    '''\n    Write a function that returns a list of all the values in a dictionary, but ignores any values that are dictionaries themselves.\n    '''\n    if d == {}:\n        return []\n    elif isinstance(d,dict):\n        return_list = []\n        for k in d.keys():\n            v = d[k]\n            if isinstance(v,dict):\n                return_list += no_key(v)\n            else:\n                return_list += [v]\n        return return_list\n    elif isinstance(d,list):\n        return_list = []\n        for v in d:\n            if isinstance(v,dict):\n                return_list += no_key(v)\n            else:\n                return_list += [v]\n        return return_list\n",
        "num_ids": 155
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    dep = 0\n    for k in d.keys():\n        if isinstance(d[k], dict):\n            dep = max(dep, 1+dict_depth(d[k]))\n    return dep\n",
        "num_ids": 51
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if type(d[key]) == dict:\n            depth = max(depth, dict_depth(d[key]))\n        else:\n            depth += 1\n    return depth\n",
        "num_ids": 56
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return max(dict_depth(d[k]) for k in d) + 1\n",
        "num_ids": 41
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d,dict):\n        dic = {}\n        dic['depth'] = 1\n        for key in d:\n            if isinstance(d[key], dict):\n                dic[key] = dict_depth(d[key])\n            else:\n                return 1\n        return dic\n    else:\n        return 0\n",
        "num_ids": 83
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "num_ids": 40
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Write your code here\n    n = len(arr)\n    \n    for i in range(rotations) :\n        \n        element = arr[0]\n        for j in range(n-1) :\n            arr[j] = arr[j+1]\n        arr[n-1] = element\n    \n    print(arr[index])\n    \n    return arr[index]\n        \n    \ndef main():\n    arr = [3, 8, 9, 7, 6]\n    ranges = 5\n    rotations = 2\n    index = 0\n    find_Element(arr,ranges,rotations,index)\n",
        "num_ids": 152
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    size = len(arr)\n    for i in range(ranges) :\n        arr[index] = arr[size-1]\n        index = index - 1\n        if index < 0 :\n            index = index + size\n",
        "num_ids": 55
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index,len(arr)) :\n        for j in range(len(ranges)) :\n            if ranges[j][0] <= i <= ranges[j][1] :\n                rotations[j] = i\n                break\n    return rotations\n",
        "num_ids": 65
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[(index - (ranges * rotations))% len(arr)]\n",
        "num_ids": 22
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index < len(arr)):\n        return arr[index]\n    else:\n        return 0\n",
        "num_ids": 28
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #    Your code here\n    result = 0\n    for i in range(rotations) :\n        result += arr[index]\n        index += r - 1\n        if index == len(arr) :\n            index = 0\n    return result \n    \n",
        "num_ids": 62
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index,len(arr)) :\n        if i < len(arr) - 1 :\n            print(\"Value of i is\",i)\n            if arr[i] <= ranges[i+1][0] and arr[i] >= ranges[i+1][1] :\n                return arr[i]\n            elif arr[i] <= ranges[i+1][0] and arr[i] < ranges[i+1][1] :\n                rotations += 1\n                ranges[i+1][0] = ranges[i+1][1]\n                ranges[i+1][1] = ranges[i+1][1] + rotations\n                print(ranges)\n                return find_Element(arr,ranges,rotations,i)\n    return -1\n",
        "num_ids": 187
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # print('\\n\\n\\n')\n    # print('Index : ',index)\n    # print('Ranges : ',ranges)\n    # print('Rotation : ',rotations)\n    index = index%len(ranges)\n    if index == 0:\n        ranges = range(ranges[-1],ranges[0] - 1, -1)\n    else:\n        ranges = range(ranges[index-1],ranges[index] - 1, -1)\n    for i in ranges:\n        if arr[i] == rotations:\n            return i\n        \ndef find_All_Elements(arr,ranges,rotations):\n    '''\n    Write a python function to find all elements equal to a given number after number of rotations.\n    '''\n    return [find_Element(arr,ranges,rotations,i) for i in range(len(arr))]\n",
        "num_ids": 30
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = rotations % len(arr)\n    return arr[index % len(arr) + rotations]\n",
        "num_ids": 29
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,rotations) :\n        temp = arr[index]\n        for j in range(index+1,len(arr)) :\n            arr[j-1] = arr[j]\n        arr[len(arr)-1] = temp\n    return arr[index]\n    \n",
        "num_ids": 73
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p=[]\n    for i in words:\n        if(i.startswith(\"p\")):\n            p.append(i)\n    return(p)\n",
        "num_ids": 41
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [w for w in words if w[0]=='p']\n",
        "num_ids": 20
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    a = re.compile('^p', re.I)\n    b = [i for i in words if a.match(i)]\n    return b\n",
        "num_ids": 39
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    lis = words\n    regex = \"^p\"\n    for word in lis:\n        if re.search(regex, word):\n            return word\n",
        "num_ids": 40
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n",
        "num_ids": 43
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    ret = []\n    for word in words:\n        if re.match(r'^p\\w+', word):\n            ret.append(word)\n    return ret\nprint(start_withp([\"panda\", \"polar\", \"poker\", \"paw\"]))\n",
        "num_ids": 68
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = [word for word in words if word.startswith('p')]\n    return p\n",
        "num_ids": 26
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = ['python', 'copyright', 'pink', 'orange', 'white', 'pink', 'blue', 'orange', 'pink', 'white', 'blue', 'orange', 'pink', 'white', 'blue']\n    return words[0:2]\n",
        "num_ids": 65
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    a=0\n    b=0\n    for word in words:\n        if word[0]==\"p\":\n            a+=1\n        elif word[0]==\"P\":\n            b+=1\n    \n    if a==0:\n        return [False]\n    elif a>1:\n        return [True,words]\n    elif b>1:\n        return [True,words]\n    else:\n        return [False]\n",
        "num_ids": 111
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    new_list=[]\n    for i in range(len(words)):\n        if words[i][0]=='p':\n            new_list.append(words[i])\n    print(new_list)\n",
        "num_ids": 54
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    include = 0\n    if k > index:\n        include = max_sum_increasing_subseq(a, n, index+1, k)\n    exclude = max_sum_increasing_subseq(a, n, index+1, k-1) + a[index]\n    return max(include, exclude)\n",
        "num_ids": 88
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [[0 for i in range(n+1)] for i in range(k+1)]\n    for i in range(n+1):\n        for j in range(k+1):\n            if i == 0:\n                dp[i][j] = 0\n            elif j == 0:\n                dp[i][j] = 0\n            else:\n                if a[j-1] <= a[i-1]:\n                    dp[i][j] = max(dp[i][j-1], dp[i-1][j]+a[i-1])\n                else:\n                    dp[i][j] = dp[i][j-1]\n    print(dp)\n    return dp[-1][-1]\n",
        "num_ids": 177
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == k or k > n:\n        return 0\n    if k == n:\n        return max(a[0:k])\n    if index == n:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    if k < n:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), \\\n            max_sum_increasing_subseq(a, n, index + 1, k))\n",
        "num_ids": 122
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return float('-inf')\n    if k == n:\n        return sum(a[:k])\n    if k == 1:\n        return max(a[:k])\n    if index >= n:\n        return float('-inf')\n",
        "num_ids": 66
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max = 0\n    sum = 0\n    i = 0\n    j = 0\n    while j <= k :\n        while i < n and a[i] <= a[j]:\n            sum += a[i]\n            i += 1\n        max = max if max > sum else sum\n        sum = 0\n        j += 1\n    return max\n",
        "num_ids": 83
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # Initialized with the sum of first index as 0.\n    # This is the sum of subsequence formed until the first index.\n    sums = [0] * n\n    sums[0] = a[0]\n    \n    # DP table to store the maximum sum of subsequence that includes element from 1 to i as i varies.\n    dp = [0] * n\n    dp[0] = a[0]\n    \n    # Iterate through the prefix and check for every element,\n    # if its prefix sum is less than or equal to the element prefix sum,\n    # then it means that element can be included in the current increasing subsequence.\n    # So update the dp[i] accordingly.\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + a[i]:\n                dp[i] = dp[j] + a[i]\n                sums[i] = dp[i]\n        sums[i] = max(sums[i], dp[i])\n    print(sums)\n    # The last element in the dp array has the maximum sum of subsequence.\n    # Return that element and its sum.\n    return max(dp), max(sums)\n",
        "num_ids": 314
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # code here\n    incl = 0\n    excl = 0\n    for i in range(index, n):\n        if a[i] > k:\n            excl = max(excl, incl)\n            incl = 0\n        else:\n            incl += a[i]\n    excl = max(excl, incl)\n    return max(excl, incl)\n",
        "num_ids": 93
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] < a[j]:\n                cur_sum = max_sum_increasing_subseq(a, n, index, k)\n                if cur_sum < a[j] + k + 1:\n                    max_sum = max(cur_sum, a[j] + k + 1)\n    if max_sum < a[k]:\n        max_sum = a[k]\n    return max_sum\n",
        "num_ids": 134
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # print(\"\\n\\n\\n\\n\\n\")\n    # print(a)\n    # print(\"\\n\\n\\n\\n\\n\")\n    # for i in range(n):\n    #     print(i,a[i])\n    \n    # print(\"\\n\\n\\n\\n\\n\")\n    # print(\"k=\",k,\"\\n\")\n    # print(\"\\n\\n\\n\\n\\n\")\n    # print(max_sum_increasing_subseq_recursive(a, n, index, k))\n    print(max_sum_increasing_subseq_dp(a, n, index, k))\n",
        "num_ids": 158
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return float('-inf')\n    if k == 1:\n        return sum(a)\n    # if n == k:\n    #     return a[k-1]\n    if index == n:\n        return float('-inf')\n",
        "num_ids": 65
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_part = tuplex[m:m+n]\n    tuplex_part_1 = tuplex[0:m]\n    tuplex_part_2 = tuplex[m+n:len(tuplex)]\n    return tuple(tuplex_part_1 + tuplex_part + tuplex_part_2)\n",
        "num_ids": 89
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = deepcopy(tuplex)\n    if m > n:\n        l = [1 for i in range(m-n)]\n        tuplex = tuplex + tuple(l)\n    elif m < n:\n        l = [1 for i in range(n-m)]\n        tuplex = tuplex + tuple(l)\n    return tuple(tuplex)\n",
        "num_ids": 97
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[m*n],tuplex[m*n+1],tuplex[m*n+2],tuplex[m*n+3],tuplex[m*n+4],tuplex[m*n+5],tuplex[m*n+6],tuplex[m*n+7])\n",
        "num_ids": 84
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_cp = deepcopy(tuplex)\n    tuplex_cp.append(':')\n    tuplex_cp.append(':')\n    tuplex_cp.extend([':']*(m-1))\n    tuplex_cp.extend([':'])\n    tuplex_cp.extend([':']*(n-1))\n    return tuplex_cp\n",
        "num_ids": 101
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #tuplex is a tuple\n    #m is number of columns\n    #n is number of rows\n    return [tuplex[i:i+n] for i in range(0,len(tuplex),n)]\n",
        "num_ids": 56
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[0:m],tuplex[m:n])\n",
        "num_ids": 22
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    try:\n        return tuplex[:m], tuplex[m:n]\n    except:\n        raise Exception(\"No such element in the tuple\")\n",
        "num_ids": 40
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m*n:m*n+n]\ndef first_index_of(item,tuplex):\n    '''\n    Write a function to get the first index of an item.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == item:\n            return i\n    return -1\ndef my_append(lst, item):\n    '''\n    Write a function to append a item to a list.\n    '''\n    lst.append(item)\ndef replace_item(lst, olditem, newitem):\n    '''\n    Write a function to replace an item in a list.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == olditem:\n            lst[i] = newitem\ndef my_index(item, tuplex):\n    '''\n    Write a function to find the index of an item.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == item:\n            return i\n    return -1\ndef my_insert(lst, position, item):\n    '''\n    Write a function to insert an item into a list.\n    '''\n    lst.insert(position,item)\ndef my_pop(lst):\n    '''\n    Write a function to remove an item from a list.\n    '''\n    lst.pop()\ndef my_remove(lst, item):\n    '''\n    Write a function to remove an item from a list.\n    '''\n    lst.remove(item)\ndef my_reverse(lst):\n    '''\n    Write a function to reverse the order of items in a list.\n    '''\n    lst.reverse()\ndef my_sort(lst):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    lst.sort()\ndef rotate_lst(lst):\n    '''\n    Write a function to rotate a list.\n    '''\n    lst.append(lst.pop(0))\ndef rotate_tuplex(tuplex,n):\n    '''\n    Write a function to rotate a tuple.\n    '''\n    lst = []\n    lst.extend(colon_tuplex(tuplex,0,n))\n    lst.extend(colon_tuplex(tuplex,n,n))\n    lst.extend(colon_tuplex(tuplex,n*2,n))\n    lst.extend(colon_tuplex(tuplex,n*3,n))\n    return lst\ndef my_rotate(tuplex,n):\n    '''\n    Write a function to rotate a tuple.\n    '''\n    lst = []\n    lst.extend(tuplex)\n    lst.extend(tuplex)\n    lst.extend(tuplex)\n    lst.extend(tuplex)\n    return lst[:n] + lst[n:n*2] + lst[n*2:n*3] + lst[n*3:n*4]\ndef my_rotate_reverse(tuplex,n):\n    '''\n    Write a function to rotate a tuple in reverse order.\n    '''\n    lst = []\n    lst.extend(tuplex)\n    lst.extend(tuplex)\n    lst.extend(tuplex)\n    lst.extend(tuplex)\n    return lst[n*4:] + lst[:n] + lst[n:n*2] + lst[n*2:n*3] + lst[n*3:n*4]\ndef my_rotate_n(tuplex,n):\n    '''\n    Write a function to rotate a tuple n times.\n    '''\n    for i in range(n):\n        tuplex = my_rotate(tuplex,len(tuplex)//2)\n    return tuplex\ndef my_rotate_n_reverse(tuplex,n):\n    '''\n    Write a function to rotate a tuple n times in reverse order.\n    '''\n    for i in range(n):\n        tuplex = my_rotate_reverse(tuplex,len(tuplex)//2)\n    return tuplex\ndef my_rotate_by_factor(tuplex,factor):\n    '''\n    Write a function to rotate a tuple by a factor.\n    '''\n    tuplex = my_rotate(tuplex,len(tuplex)//factor)\n    return tuplex\ndef my_rotate_by_factor_reverse(tuplex,factor):\n    '''\n    Write a function to rotate a tuple in reverse order by a factor.\n    '''\n    tuplex = my_rotate_reverse(tuplex,len(tuplex)//factor)\n    return tuplex\ndef my_rotate_by_factor_n(tuplex,factor,n):\n    '''\n    Write a function to rotate a tuple n times by a factor.\n    '''\n    for i in range(n):\n        tuplex = my_rotate_by_factor(tuplex,factor)\n    return tuplex\ndef my_rotate_by_factor_n_reverse(tuplex,factor,n):\n    '''\n    Write a function to rotate a tuple n times in reverse order by a factor.\n    '''\n    for i in range(n):\n        tuplex = my_rotate_by_factor_reverse(tuplex,factor)\n    return tuplex\ndef my_clear(lst):\n    '''\n    Write a function to clear a list.\n    '''\n    lst.clear()\ndef my_copy(lst):\n    '''\n    Write a function to copy a list.\n    '''\n    return deepcopy(lst)\ndef my_count(item,tuplex):\n    '''\n    Write a function to count the number of times an item appears in a tuple.\n    '''\n    count = 0\n    for i in range(len(tuplex)):\n        if tuplex[i] == item:\n            count += 1\n    return count\ndef my_count_tuplex(tuplex,lst):\n    '''\n    Write a function to count the number of times a tuple appears in a list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i:i+len(tuplex)] == tuplex:\n            count += 1\n    return count\ndef my_count_tuplex_reverse(tuplex,lst):\n    '''\n    Write a function to count the number of times a tuple appears in a list in reverse order.\n    '''\n    count = 0\n    for i in range(len(lst)-len(tuplex)+1):\n        if lst[i:i+len(tuplex)] == tuplex:\n            count += 1\n    return count\ndef my_count_tuplex_n(tuplex,lst,n):\n    '''\n    Write a function to count the number of times a tuple appears in a list n times.\n    '''\n    count = 0\n    for i in range(n):\n        count += my_count_tuplex(tuplex,lst)\n        lst = my_rotate(lst,len(lst)//2)\n    return count\ndef my_count_tuplex_n_reverse(tuplex,lst,n):\n    '''\n    Write a function to count the number of times a tuple appears in a list n times in reverse order.\n    '''\n    count = 0\n    for i in range(n):\n        count += my_count_tuplex_reverse(tuplex,lst)\n        lst = my_rotate_reverse(lst,len(lst)//2)\n    return count\ndef my_count_tuplex_by_factor(tuplex,lst,factor):\n    '''\n    Write a function to count the number of times a tuple appears in a list by a factor.\n    '''\n    count = 0\n",
        "num_ids": 7
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_list = list(tuplex)\n    for i in range(m,n):\n        tuplex_list.append(':')\n    return tuple(tuplex_list)\n",
        "num_ids": 50
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[i:i + n] for i in range(0, len(tuplex), n))\n",
        "num_ids": 32
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    nums1 = nums1[::-1]\n    nums2 = nums2[::-1]\n    large_prod = 0\n    for i in range(N):\n        large_prod = max(large_prod, nums1[i] * nums2[i])\n    return large_prod\n",
        "num_ids": 97
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    count = 0\n    result = []\n    i1 = 0\n    i2 = 0\n    while count < N:\n        if i1 < len(nums1) and i2 < len(nums2):\n            p = nums1[i1] * nums2[i2]\n            result.append(p)\n            count += 1\n            if count == N:\n                break\n            i1 += 1\n            i2 += 1\n        elif i1 == len(nums1):\n            i2 += 1\n        elif i2 == len(nums2):\n            i1 += 1\n",
        "num_ids": 145
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    max_prod_val = 1\n    max_prod_idx = 0\n",
        "num_ids": 28
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # For simplicity, assume the two lists are sorted\n    # e.g. [1, 2, 3, 4] and [3, 4, 5, 6]\n    # Then the two products are 3 * 4 = 12 and 4 * 5 = 20\n    #\n    # Two factors (3 and 4) make the largest product 12,\n    # and two factors (4 and 5) make the largest product 20\n    \n    # Solution 1 - Brute Force\n    #\n    # This solution is brute force. Time complexity is O(N^2), where N is the size of the given lists.\n    \n    # We can do better by sorting the two lists, and then removing factors from the beginning of the lists until we have enough product.\n    #\n    # For example, if we sort the two lists, 3 * 4 and 4 * 5, we get the list [4, 3, 4, 5].\n    #\n    # Then we can remove 3 * 4 and 4 * 4 from the beginning of the two lists, and multiply the remaining factors to get the desired product.\n    #\n    # This solution is still O(N^2), but it runs much faster.\n    \n    # Solution 2 - Optimal\n    #\n    # We can do better by sorting the two lists, and then removing factors from the end of the lists until we have enough product.\n    #\n    # For example, if we sort the two lists, 3 * 4 and 4 * 5, we get the list [3, 4, 4, 5].\n    #\n    # Then we can remove 4 * 4 and 3 * 5 from the end of the two lists, and multiply the remaining factors to get the desired product.\n    #\n    # This solution is O(N * log N), where N is the size of the given lists.\n    \n    # Solution 3 - Optimal\n    #\n    # This solution is optimized. We can use a priority queue, which is a kind of data structure where we can quickly get the smallest or largest values.\n    #\n    # The time complexity is O(N * log N) where N is the size of the given lists. The space complexity is O(N) where N is the size of the given lists.\n    \n    # Solution 3 - Optimal\n    #\n    # This solution is optimized. We can use a priority queue, which is a kind of data structure where we can quickly get the smallest or largest values.\n    #\n    # The time complexity is O(N * log N) where N is the size of the given lists. The space complexity is O(N) where N is the size of the given lists.\n    \n    import heapq\n    \n    products = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    \n    return heapq.nlargest(N, products)\n    \n",
        "num_ids": 652
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    '''\n    Input:\n    nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10], N = 5\n    Output:\n    [6, 36, 30, 24, 15]\n    '''\n    \n    if len(nums1) * len(nums2) < N:\n        return -1\n    \n    i, j, nums1_product, nums2_product, n = 0, 0, 1, 1, N\n    result = [1] * n\n    while n:\n        if i == len(nums1):\n            nums1_product *= nums2[j]\n            j += 1\n        elif j == len(nums2):\n            nums2_product *= nums1[i]\n            i += 1\n        else:\n            if nums1_product > nums2_product:\n                nums2_product *= nums2[j]\n                j += 1\n            elif nums2_product > nums1_product:\n                nums1_product *= nums1[i]\n                i += 1\n            else:\n                nums1_product *= nums1[i]\n                nums2_product *= nums2[j]\n                i += 1\n                j += 1\n        n -= 1\n        result[n] = nums1_product if nums1_product > nums2_product else nums2_product\n    return result\n",
        "num_ids": 294
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    prod = []\n    for i in range(N):\n        prod.append(nums1[i]*nums2[i])\n    prod.sort(reverse=True)\n    return prod[:N]\n",
        "num_ids": 56
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # create dictionary to store the products\n    # each item will have product of two factors\n    product_dict = {}\n    \n    # iterate through nums1 and nums2\n    # keep track of the current largest product\n    for i in range(N):\n        # generate product of current nums1 and nums2\n        product = nums1[i] * nums2[i]\n        \n        # check if product exists in dictionary\n        # if it does, update the largest product\n        if product in product_dict:\n            product_dict[product] = max(product_dict[product], nums1[i] * nums2[i])\n        \n        # if product does not exist in dictionary, add it\n        else:\n            product_dict[product] = nums1[i] * nums2[i]\n    \n    # iterate through product_dict to print the largest product\n    for key, value in product_dict.items():\n        return key\n",
        "num_ids": 231
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #Solution 1:\n    #Brute force\n    # res = []\n    # for i in range(N):\n    #     for j in range(N):\n    #         res.append(nums1[i]*nums2[j])\n    # res.sort()\n    # return res[-N:]\n    #This solution exceeds time limit\n    #Solution 2:\n    res = []\n    for i in range(N):\n        for j in range(N):\n            res.append(nums1[i]*nums2[j])\n    res.sort()\n    return res[-N:]\n",
        "num_ids": 148
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return max(\n        max(\n            [reduce(\n                mul,\n                map(\n                    lambda x: nums1[i] * nums2[j],\n                    range(N)\n                )\n            ) for i in range(N) for j in range(N)],\n            0\n        ) for N in range(1, max(len(nums1), len(nums2)) + 1)\n    )\n",
        "num_ids": 104
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    '''\n    0. The runtime for this solution is O(N), where N is the length of the\n    larger list.\n    '''\n    if N > len(nums1) + len(nums2):\n        raise ValueError(\"Invalid input.\")\n    if N == 0:\n        return 0\n    if N == 1:\n        return max(nums1[0] * nums2[0], nums1[0] * nums1[1], nums2[0] * nums2[1])\n",
        "num_ids": 91
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\n",
        "num_ids": 26
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a<b:\n        return b\n    else:\n        return a\na = int(input(\"Enter first number:\"))\nb = int(input(\"Enter second number:\"))\nmax=maximum(a,b)\nprint(\"Maximum of\", a, \"and\", b, \"is\", max)",
        "num_ids": 83
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\na=int(input(\"enter the value for a:\"))\nb=int(input(\"enter the value for b:\"))\nprint(maximum(a,b))\n",
        "num_ids": 59
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\ndef maximum(a,b,c):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\ndef maximum(a,b,c,d):\n    '''\n    Write a python function to find the maximum of four numbers.\n    '''\n    if a>b and a>c and a>d:\n        return a\n    if b>a and b>c and b>d:\n        return b\n    if c>a and c>b and c>d:\n        return c\n    if d>a and d>b and d>c:\n        return d\ndef maximum(a,b,c,d,e):\n    '''\n    Write a python function to find the maximum of five numbers.\n    '''\n    if a>b and a>c and a>d and a>e:\n        return a\n    if b>a and b>c and b>d and b>e:\n        return b\n    if c>a and c>b and c>d and c>e:\n        return c\n    if d>a and d>b and d>c and d>e:\n        return d\n    if e>a and e>b and e>c and e>d:\n        return e\ndef maximum(a,b,c,d,e,f):\n    '''\n    Write a python function to find the maximum of six numbers.\n    '''\n    if a>b and a>c and a>d and a>e and a>f:\n        return a\n    if b>a and b>c and b>d and b>e and b>f:\n        return b\n    if c>a and c>b and c>d and c>e and c>f:\n        return c\n    if d>a and d>b and d>c and d>e and d>f:\n        return d\n    if e>a and e>b and e>c and e>d and e>f:\n        return e\n    if f>a and f>b and f>c and f>d and f>e:\n        return f\ndef maximum(a,b,c,d,e,f,g):\n    '''\n    Write a python function to find the maximum of seven numbers.\n    '''\n    if a>b and a>c and a>d and a>e and a>f and a>g:\n        return a\n    if b>a and b>c and b>d and b>e and b>f and b>g:\n        return b\n    if c>a and c>b and c>d and c>e and c>f and c>g:\n        return c\n    if d>a and d>b and d>c and d>e and d>f and d>g:\n        return d\n    if e>a and e>b and e>c and e>d and e>f and e>g:\n        return e\n    if f>a and f>b and f>c and f>d and f>e and f>g:\n        return f\n    if g>a and g>b and g>c and g>d and g>e and g>f:\n        return g\ndef maximum(a,b,c,d,e,f,g,h):\n    '''\n    Write a python function to find the maximum of eight numbers.\n    '''\n    if a>b and a>c and a>d and a>e and a>f and a>g and a>h:\n        return a\n    if b>a and b>c and b>d and b>e and b>f and b>g and b>h:\n        return b\n    if c>a and c>b and c>d and c>e and c>f and c>g and c>h:\n        return c\n    if d>a and d>b and d>c and d>e and d>f and d>g and d>h:\n        return d\n    if e>a and e>b and e>c and e>d and e>f and e>g and e>h:\n        return e\n    if f>a and f>b and f>c and f>d and f>e and f>g and f>h:\n        return f\n    if g>a and g>b and g>c and g>d and g>e and g>f and g>h:\n        return g\n    if h>a and h>b and h>c and h>d and h>e and h>f and h>g:\n        return h\ndef maximum(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a python function to find the maximum of nine numbers.\n    '''\n    if a>b and a>c and a>d and a>e and a>f and a>g and a>h and a>i:\n        return a\n    if b>a and b>c and b>d and b>e and b>f and b>g and b>h and b>i:\n        return b\n    if c>a and c>b and c>d and c>e and c>f and c>g and c>h and c>i:\n        return c\n    if d>a and d>b and d>c and d>e and d>f and d>g and d>h and d>i:\n        return d\n    if e>a and e>b and e>c and e>d and e>f and e>g and e>h and e>i:\n        return e\n    if f>a and f>b and f>c and f>d and f>e and f>g and f>h and f>i:\n        return f\n    if g>a and g>b and g>c and g>d and g>e and g>f and g>h and g>i:\n        return g\n    if h>a and h>b and h>c and h>d and h>e and h>f and h>g and h>i:\n        return h\n    if i>a and i>b and i>c and i>d and i>e and i>f and i>g and i>h:\n        return i\ndef maximum(a,b,c,d,e,f,g,h,i,j):\n    '''\n    Write a python function to find the maximum of ten numbers.\n    '''\n    if a>b and a>c and a>d and a>e and a>f and a>g and a>h and a>i and a>j:\n        return a\n    if b>a and b>c and b>d and b>e and b>f and b>g and b>h and b>i and b>j:\n        return b\n    if c>a and c>b and c>d and c>e and c>f and c>g and c>h and c>i and c>j:\n        return c\n    if d>a and d>b and d>c and d>e and d>f and d>g and d>h and d>i and d>j:\n        return d\n    if e>a and e>b and e>c and e>d and e>f and e>g and e>h and e>i and e>j:\n        return e\n    if f>a and f>b and f>c and f>d and f>e and f>g and f>h and f>i and f>j:\n        return f\n    if g>a and g>b and g>c and g>d and g>e and g>f and g>h and g>i and g>j:\n        return g\n    if h>a and h>b and h>c and h>d and h>e and h>f and h>g and h>i and h>j:\n        return h\n    if i>a and i>b and i>c and i>d and i>e and i>f and i>g and i>h and i>j:\n        return i\n    if j>a and j>b and j>c and j>d and j>e and j>f and j>g and j>h and j>i:\n        return j\ndef maximum(a,b,c,d,e,",
        "num_ids": 445
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max = a if a>b else b\n    return max\n    \ndef maximum(a,b,c):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    max = a if a>b and a>c else b if b>c else c\n    return max\n    \ndef maximum(a,b,c,d,e):\n    '''\n    Write a python function to find the maximum of five numbers.\n    '''\n    max = a if a>b and a>c and a>d and a>e else b if b>a and b>c and b>d and b>e else c if c>a and c>b and c>d and c>e else d if d>a and d>b and d>c and d>e else e\n    return max\n    \ndef maximum(a,b,c,d,e,f):\n    '''\n    Write a python function to find the maximum of six numbers.\n    '''\n    max = a if a>b and a>c and a>d and a>e and a>f else b if b>a and b>c and b>d and b>e and b>f else c if c>a and c>b and c>d and c>e and c>f else d if d>a and d>b and d>c and d>e and d>f else e if e>a and e>b and e>c and e>d and e>f else f\n    return max\n    \ndef maximum(a,b,c,d,e,f,g):\n    '''\n    Write a python function to find the maximum of seven numbers.\n    '''\n    max = a if a>b and a>c and a>d and a>e and a>f and a>g else b if b>a and b>c and b>d and b>e and b>f and b>g else c if c>a and c>b and c>d and c>e and c>f and c>g else d if d>a and d>b and d>c and d>e and d>f and d>g else e if e>a and e>b and e>c and e>d and e>f and e>g else f if f>a and f>b and f>c and f>d and f>e and f>g else g\n    return max\n    \ndef maximum(a,b,c,d,e,f,g,h):\n    '''\n    Write a python function to find the maximum of eight numbers.\n    '''\n    max = a if a>b and a>c and a>d and a>e and a>f and a>g and a>h else b if b>a and b>c and b>d and b>e and b>f and b>g and b>h else c if c>a and c>b and c>d and c>e and c>f and c>g and c>h else d if d>a and d>b and d>c and d>e and d>f and d>g and d>h else e if e>a and e>b and e>c and e>d and e>f and e>g and e>h else f if f>a and f>b and f>c and f>d and f>e and f>g and f>h else g if g>a and g>b and g>c and g>d and g>e and g>f and g>h else h\n    return max\n    \ndef maximum(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a python function to find the maximum of nine numbers.\n    '''\n    max = a if a>b and a>c and a>d and a>e and a>f and a>g and a>h and a>i else b if b>a and b>c and b>d and b>e and b>f and b>g and b>h and b>i else c if c>a and c>b and c>d and c>e and c>f and c>g and c>h and c>i else d if d>a and d>b and d>c and d>e and d>f and d>g and d>h and d>i else e if e>a and e>b and e>c and e>d and e>f and e>g and e>h and e>i else f if f>a and f>b and f>c and f>d and f>e and f>g and f>h and f>i else g if g>a and g>b and g>c and g>d and g>e and g>f and g>h and g>i else h if h>a and h>b and h>c and h>d and h>e and h>f and h>g and h>i else i\n    return max\n    \ndef maximum(a,b,c,d,e,f,g,h,i,j):\n    '''\n    Write a python function to find the maximum of ten numbers.\n    '''\n    max = a if a>b and a>c and a>d and a>e and a>f and a>g and a>h and a>i and a>j else b if b>a and b>c and b>d and b>e and b>f and b>g and b>h and b>i and b>j else c if c>a and c>b and c>d and c>e and c>f and c>g and c>h and c>i and c>j else d if d>a and d>b and d>c and d>e and d>f and d>g and d>h and d>i and d>j else e if e>a and e>b and e>c and e>d and e>f and e>g and e>h and e>i and e>j else f if f>a and f>b and f>c and f>d and f>e and f>g and f>h and f>i and f>j else g if g>a and g>b and g>c and g>d and g>e and g>f and g>h and g>i and g>j else h if h>a and h>b and h>c and h>d and h>e and h>f and h>g and h>i and h>j else i if i>a and i>b and i>c and i>d and i>e and i>f and i>g and i>h and i>j else j\n    return max\n    \ndef maximum(a,b,c,d,e,f,g,h,i,j,k):\n    '''\n    Write a python function to find the maximum of eleven numbers.\n    '''\n    max = a if a>b and a>c and a>d and a>e and a>f and a>g and a>h and a>i and a>j and a>k else b if b>a and b>c and b>d and b>e and b>f and b>g and b>h and b>i and b>j and b>k else c if c>a and c>b and c>d and c>e and c>f and c>g and c>h and c>i and c>j and c>k else d if d>a and d>b and d>c and d>e and d>f and d>g and d>h and d>i and d>j and d>k else e if e>a and e>b and e>c and e>d and e>f and e>g and e>h and e>i and e>j and e>k else f if f>a and f>b and f>c and f>d and f>e and f>g and f>h and f>i and f>j and f>k else g if g>a and g>b and g>c and g>d and g>e and g>f and g>h and g>i and g>j and g>k else h if h>a and h>b and h>c and h>d and h>e and h>f and h>g and h>i and h>j and h>k else i if i>a and i>b and i>c and i>d and i>e and i>f and i>g and i>h and i>j and i>k else j if j>a and j>b and j>c and j>d and j>e and j>f and j>g and j>h and j>i an",
        "num_ids": 421
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a, \"is maximum\")\n    else:\n        print(b, \"is maximum\")\n",
        "num_ids": 33
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = []\n    for i in str1:\n        tuple1.append(i)\n    return tuple(tuple1)\n",
        "num_ids": 36
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \n",
        "num_ids": 12
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    return tuple(str1)\n",
        "num_ids": 12
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = ()\n    tup = tuple(str1)\n    return tup\n",
        "num_ids": 23
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return int(bin(n)[2:].zfill(8)[7])\n",
        "num_ids": 21
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 0b1111111111111111111111111111111111111111111111111111111111111111\n    while mask:\n        if (n & mask) == 0:\n            return mask\n        else:\n            mask = mask >> 1\n",
        "num_ids": 55
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(1,n):\n        if (1 & ~n) == 1:\n            return 1\n        else:\n            n += n\n    return n\n",
        "num_ids": 42
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print (bin(n))\n    print(n & (~(n-1)))\n    return\n",
        "num_ids": 25
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ (n - 1)\n",
        "num_ids": 12
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ (n - 1) \n",
        "num_ids": 13
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    import math\n    b = int(math.log(n, 2)) + 1\n    return (1 << b)\n",
        "num_ids": 30
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & ~(n-1)!= 0: \n        n &= (n-1) \n    return n \n",
        "num_ids": 33
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x = n\n    while (x & 1) == 0:\n        x = x >> 1\n    return x\n",
        "num_ids": 29
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Check if the number is power of 2\n    i = 0\n    while (2**i <= n): \n        i += 1\n    if (n == 0): \n        return 1\n    if (i == 1): \n        return 2\n    else: \n        return 2**(i - 1) \n",
        "num_ids": 76
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*(r**2)*h/3\n    return volume\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area=math.pi*(r**2)+math.pi*r*h\n    return area\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume=math.pi*(r**2)*h\n    return volume\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area=2*math.pi*r*(r+h)\n    return area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=4/3*math.pi*(r**3)\n    return volume\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area=4*math.pi*(r**2)\n    return area\ndef area_prism(base,height,top_face=True):\n    '''\n    Write a function to find the surface area of a prism.\n    If the top_face parameter is set to True, the surface area\n    will be that of the top face. If it is set to False, then\n    it will be the surface area of the base.\n    '''\n    if top_face==True:\n        return base*height\n    elif top_face==False:\n        return 2*base*height\n    else:\n        return 'Invalid parameter value.'\ndef volume_prism(base,height,top_face=True):\n    '''\n    Write a function to find the volume of a prism.\n    If the top_face parameter is set to True, the volume\n    will be that of the top face. If it is set to False, then\n    it will be the volume of the base.\n    '''\n    if top_face==True:\n        return base*height\n    elif top_face==False:\n        return base*height\n    else:\n        return 'Invalid parameter value.'\ndef area_rectangle(length,width,top_face=True):\n    '''\n    Write a function to find the surface area of a rectangle.\n    If the top_face parameter is set to True, the surface area\n    will be that of the top face. If it is set to False, then\n    it will be the surface area of the base.\n    '''\n    if top_face==True:\n        return 2*length*width\n    elif top_face==False:\n        return 2*length*width\n    else:\n        return 'Invalid parameter value.'\ndef volume_rectangle(length,width,top_face=True):\n    '''\n    Write a function to find the volume of a rectangle.\n    If the top_face parameter is set to True, the volume\n    will be that of the top face. If it is set to False, then\n    it will be the volume of the base.\n    '''\n    if top_face==True:\n        return length*width\n    elif top_face==False:\n        return length*width\n    else:\n        return 'Invalid parameter value.'\ndef volume_cube(side):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return side**3\ndef area_cube(side):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*side**2\ndef volume_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    return 1/3*math.pi*(r**3)\ndef area_hemisphere(r):\n    '''\n    Write a function to find the surface area of a hemisphere.\n    '''\n    return 2*math.pi*r\ndef area_triangle(base,height):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return base*height/2\ndef volume_triangle(base,height):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return base*height/3\ndef volume_parallelepiped(length,width,height):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    return length*width*height\ndef area_parallelepiped(length,width,height):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    return 2*length*width+2*length*height+2*width*height\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return 4/3*math.pi*(a*b*c)\ndef area_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    return 4*math.pi*(a*b+a*c+b*c)\ndef volume_bivolume(r1,r2,h):\n    '''\n    Write a function to find the volume of a bivolume.\n    '''\n    return math.pi*(r1**2+r2**2)*h/3\ndef area_bivolume(r1,r2,h):\n    '''\n    Write a function to find the surface area of a bivolume.\n    '''\n    return 2*math.pi*(r1+r2)*h\ndef area_kite(side1,side2):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    return 2*side1*side2\ndef volume_kite(side1,side2):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    return 1/2*side1*side2\ndef area_dodecagon(side):\n    '''\n    Write a function to find the surface area of a dodecagon.\n    '''\n    return 12*side**2\ndef volume_dodecagon(side):\n    '''\n    Write a function to find the volume of a dodecagon.\n    '''\n    return 1/3*math.sqrt(5)*side**3\ndef area_france(radius,height):\n    '''\n    Write a function to find the surface area of a france.\n    '''\n    return math.pi*radius**2+math.pi*radius*height\ndef volume_france(radius,height):\n    '''\n    Write a function to find the volume of a france.\n    '''\n    return radius**2*height\ndef volume_pyramid(side,top_face=True):\n    '''\n    Write a function to find the volume of a pyramid.\n    If the top_face parameter is set to True, the volume\n    will be that of the top face. If it is set to False, then\n    it will be the volume of the base.\n    '''\n    if top_face==True:\n        return 1/3*math.sqrt(2)*side**3\n    elif top_face==False:\n        return 1/3*side**3\n    else:\n        return 'Invalid parameter value.'\ndef area_pyramid(side,top_face=True):\n    '''\n    Write a function to find the surface area of a pyramid.\n    If the top_face parameter is set to True, the surface area\n    will be that of the top face. If it is set to False, then\n    it will be the surface area of the base.\n    '''\n    if top_face==True:\n        return 3*side**2+math.sqrt(2)*side**2\n    elif top_face==False:\n        return 3*side**2\n    else:\n        return 'Invalid parameter value.'\ndef volume_scaled_cube(side):\n    '''\n    Write a function to find the volume of a scaled cube.\n    '''\n    return side**3\ndef area_scaled_cube(side):\n    '''\n    Write a function to find the surface area of a scaled cube.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*(r**2)*(h/3)\n    return volume\n",
        "num_ids": 24
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*h/3\n",
        "num_ids": 17
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi * (r ** 2) * (h ** 2)) / 3\n    return volume\n",
        "num_ids": 28
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r < 0 or h < 0:\n        print(\"Invalid Input\")\n        return\n    else:\n        volume = (1/3)*math.pi*r*r*h\n        return volume\n",
        "num_ids": 49
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r * r * h / 3\n",
        "num_ids": 16
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h / 3\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    def volume_cone(r,h):\n        '''\n        Write a function to find the volume of a cone.\n        '''\n        volume = 1/3 * math.pi * r**2 * h\n        return volume\n    return volume_cone(r,h)\n",
        "num_ids": 34
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*(math.pi*r**2*h)\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r <= 0 or h <= 0:\n        raise ValueError(\"r and h cannot be less than 0\")\n    return math.pi*(r**2) * h/3\n    ",
        "num_ids": 45
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(n,1,-1):\n        if i & i == n:\n            return i\n        \nprint(highest_Power_of_2(5))\n",
        "num_ids": 43
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n==0): \n        return 0\n    if (n==1): \n        return 1\n    if (n==2): \n        return 2\n    return highest_Power_of_2(n//2) if (n%2==0) else highest_Power_of_2((n//2)+1)\n",
        "num_ids": 79
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2**int(math.log(n,2))\n",
        "num_ids": 17
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n = 16\n    i = 0\n    power_2 = 0\n    while (power_2 <= n):\n        power_2 = 2**i\n        i += 1\n    return power_2\n",
        "num_ids": 49
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 1:\n        return highest_Power_of_2(n + 1)\n    if n % 2 == 0:\n        return highest_Power_of_2(n // 2) * 2\n",
        "num_ids": 74
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while(i < n): \n        i = i << 1\n    return i >> 1\n",
        "num_ids": 29
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n&(n-1) == 0:\n        n = n >> 1\n    return n\n",
        "num_ids": 26
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while (2 ** i) <= n: \n        i = i + 1\n    return (2 ** (i - 1))\n",
        "num_ids": 37
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    while (n & 1 == 0): \n        n = n / 2\n        count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(log(n,2))\n",
        "num_ids": 13
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 41
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # base case is 0\n    if n == 0: \n        return 2\n    # base case is 1\n    if n == 1: \n        return 1\n    return lucas(n-1) + lucas(n-2)\n    \ndef factorial(n): \n    '''\n    Write a function to compute the factorial of a number.\n    '''\n    if n == 0: \n        return 1\n    return n * factorial(n-1)\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return sum_series(n-1, n0, n1) + sum_series(n-2, n0, n1)\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n numbers, where the\n    first two numbers are n0 and n1.\n    '''\n    if n == 0: \n        return n0\n    if n == 1: \n        return n1\n    return n0 + n1\n    \ndef sum_series(n, n0=0, n1=1): \n    '''\n    Write a function that returns the sum of the first n number",
        "num_ids": 15
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n",
        "num_ids": 25
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n        \n",
        "num_ids": 57
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return lucas(n)\n",
        "num_ids": 10
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    l = [1]\n    while len(l) < n:\n        l.append(sum(l[-2:]))\n    return l[-1]\n",
        "num_ids": 41
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1: \n        return 2\n    if n == 0: \n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n    \nprint(find_lucas(5))\n",
        "num_ids": 63
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    print(f'\\nadd_string:\\nlist_: {list_}\\nstring: {string}')\n    \n    # This method is O(n) and O(n^2) because the operation to add\n    # a string to each element of a list has a quadratic complexity\n    # because the operation to concatenate a string to another string\n    # has a quadratic complexity.\n    # (n + n^2) => O(n^2)\n    for item in list_:\n        list_.append(string + str(item))\n    return list_\n",
        "num_ids": 137
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Do something here\n    return None\n",
        "num_ids": 12
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string % item for item in list_]\n    return list_\n",
        "num_ids": 22
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for word in string.split():\n        list_.append(word)\n",
        "num_ids": 19
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_[:] = [string.format(i) for i in list_]\n    return list_\n",
        "num_ids": 27
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        print(string.format(list_[i]))\n    return\n",
        "num_ids": 32
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n",
        "num_ids": 32
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = ''\n    for i in range(len(list_)):\n        result += f'{list_[i]} {string}'\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = []\n    for i in range(1, len(string) + 1):\n        list_.append(string[:i])\n    return list_\n",
        "num_ids": 40
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    i = 0\n    while i < len(list_):\n        list_[i] = string.format(list_[i])\n        i += 1\n    return list_\n",
        "num_ids": 44
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{key: val for key, val in zip(l1, l2)} for l2 in zip(*l3)]\n",
        "num_ids": 32
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1_as_key = l1[0]\n    l2_as_key = l2[0]\n    l3_as_key = l3[0]\n",
        "num_ids": 44
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic = {l1[i]:{l2[i]:l3[i]} for i in range(len(l1))}\n    return dic\n",
        "num_ids": 40
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict(zip(l1,l2))\n    d2 = dict(zip(l3,l2))\n    d1.update(d2)\n    return d1\n",
        "num_ids": 47
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    for i in range(len(l1)):\n        temp_dict = dict(zip(l2, l3))\n        d1[l1[i]] = temp_dict\n    return d1\n",
        "num_ids": 50
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    l2.pop(0)\n    l3.pop(0)\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i], l3[i]\n    return d\n",
        "num_ids": 62
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [dict(zip(l1,i)) for i in zip(*l2)]\n    return [dict(zip(l1,i)) for i in zip(*l2)]\n    return [dict(zip(l1,i)) for i in zip(*l2)]\n",
        "num_ids": 65
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict(zip(l1, l2))\n    d2 = dict(zip(l1, l3))\n    d3 = {key : {'A':d1[key], 'B':d2[key]} for key in d1.keys()}\n    return d3\n",
        "num_ids": 71
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic = {l1[i]: {l2[i]: l3[i]} for i in range(len(l1))}\n    return dic",
        "num_ids": 39
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    nested_dict[l1[0]] = [{l2[0]:l3[0]}, {l2[1]:l3[1]}, {l2[2]:l3[2]}]\n    nested_dict[l1[1]] = [{l2[0]:l3[3]}, {l2[1]:l3[4]}, {l2[2]:l3[5]}]\n    nested_dict[l1[2]] = [{l2[0]:l3[6]}, {l2[1]:l3[7]}, {l2[2]:l3[8]}]\n    return nested_dict\n",
        "num_ids": 166
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(2, n + 1):\n        max_sum = max(max_sum, max(get_max_sum(i / 2), get_max_sum(i / 3), get_max_sum(i / 4), get_max_sum(i / 5)))\n    return max_sum\n    \nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number n: \"))\n    print(get_max_sum(n))",
        "num_ids": 121
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    for i in range(n, 1, -1):\n        nums = [int(n) for n in str(i)]\n        if (i % 2 == 0):\n            nums = [int(n) for n in str(i/2)]\n        elif (i % 3 == 0):\n            nums = [int(n) for n in str(i/3)]\n        elif (i % 4 == 0):\n            nums = [int(n) for n in str(i/4)]\n        elif (i % 5 == 0):\n            nums = [int(n) for n in str(i/5)]\n        if (sum(nums) > i):\n            return i\n    return 1\n",
        "num_ids": 172
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max( (get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n",
        "num_ids": 68
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    global f\n    if n==1:\n        f = 1\n        return f\n    elif n%2==0:\n        f = 2*f(n/2)\n        return f\n    elif n%3==0:\n        f = 3*f(n/3)\n        return f\n    elif n%4==0:\n        f = 4*f(n/4)\n        return f\n    elif n%5==0:\n        f = 5*f(n/5)\n        return f\n    else:\n        f = (f(n/2) + f(n/3) + f(n/4) + f(n/5))\n        return f\n    \ndef get_max_sum2 (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    global f\n    if n == 1:\n        f = 1\n        return f\n    elif n%2==0:\n        f = 2 * f(n/2)\n        return f\n    elif n%3==0:\n        f = 3 * f(n/3)\n        return f\n    elif n%4==0:\n        f = 4 * f(n/4)\n        return f\n    elif n%5==0:\n        f = 5 * f(n/5)\n        return f\n    else:\n        f = max((f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n        return f\n",
        "num_ids": 169
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    try:\n        n = int(n)\n    except:\n        raise ValueError(\"No\")\n    if n == 0:\n        return 0\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n",
        "num_ids": 91
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (n // 5) + get_max_sum((n // 5) + (n // 3) + (n // 2))\n",
        "num_ids": 33
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    import math\n    def f(n):\n        # return math.floor(n/3) + math.floor(n/5) + math.floor(n/15)\n        if n % 5 == 0:\n            return f(math.floor(n/5)) + math.floor(n/5)\n        elif n % 3 == 0:\n            return f(math.floor(n/3)) + math.floor(n/3)\n        elif n % 2 == 0:\n            return f(math.floor(n/2)) + math.floor(n/2)\n        else:\n            return n\n    return f(n)\n",
        "num_ids": 153
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    global_max = n\n    global_max_no = 0\n    global_max_yes = 0\n",
        "num_ids": 27
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n",
        "num_ids": 68
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n",
        "num_ids": 67
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if not input_list:\n        return []\n    return [x for x in input_list if len(x) == max(map(len, input_list))]\n",
        "num_ids": 42
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    \n    max = 0\n    for i in input_list:\n        if len(i) > max:\n            max = len(i)\n    return max\n",
        "num_ids": 40
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    len_list = [len(i) for i in input_list]\n    return input_list[len_list.index(max(len_list))]\n",
        "num_ids": 40
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for l in input_list:\n        if len(l) > max_length:\n            max_length = len(l)\n    return max_length\n",
        "num_ids": 46
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return len(max(input_list, key = len))\n",
        "num_ids": 17
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for x in input_list:\n        length_list.append(len(x))\n    max_length = max(length_list)\n    return max_length\n",
        "num_ids": 48
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    l = [len(x) for x in input_list]\n    return input_list[l.index(max(l))]\n",
        "num_ids": 34
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i)>max_length:\n            max_length = len(i)\n    for i in input_list:\n        if len(i)==max_length:\n            return i\n",
        "num_ids": 65
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for each_list in input_list:\n        if len(each_list) > max_length:\n            max_length = len(each_list)\n    return max_length\n",
        "num_ids": 52
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        max_length = max(max_length, len(input_list[i]))\n    return max_length\n",
        "num_ids": 50
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # take in a tuple\n    # iterate over the tuple, and append each element to a set\n    # compare the length of the tuple with the length of the set\n    # if not equal, return False\n    # if equal, return True\n",
        "num_ids": 57
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_tup = []\n    for i in test_tup:\n        if i in unique_tup:\n            return False\n        else:\n            unique_tup.append(i)\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = tuple(test_tup)\n    if len(set(tup)) == len(tup):\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique = True\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                unique = False\n    return unique\n",
        "num_ids": 68
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    for i in str1:\n        if dict1[i] == 1:\n            return i\n    return '_'\n",
        "num_ids": 75
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = set()\n    str1_char_dict = {}\n    for char in str1:\n        if char not in chars:\n            chars.add(char)\n            str1_char_dict[char] = 0\n        str1_char_dict[char] += 1\n",
        "num_ids": 70
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    fnl_dict={}\n    for i in str1:\n        if i in fnl_dict.keys():\n            fnl_dict[i]+=1\n        else:\n            fnl_dict[i]=1\n    for i in str1:\n        if fnl_dict[i]==1:\n            return i\n    return '_'\n",
        "num_ids": 86
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    list1=[]\n    for i in str1:\n        if i not in list1:\n            list1.append(i)\n        else:\n            pass\n    for i in list1:\n        if list1.count(i)==1:\n            return i\n    return 'There is no non-repeated character in the given string.'\nprint('First non-repeated character in the given string is:',first_non_repeating_character('GEEKSFORGEEKS'))\nprint('First non-repeated character in the given string is:',first_non_repeating_character('ABBBBCD'))\nprint('First non-repeated character in the given string is:',first_non_repeating_character('ABBBBCD'))\n",
        "num_ids": 179
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # str1 = input(\"Enter the string: \")\n    str1 = \"abcdee\"\n    char_frequency = {}\n    for i in range(len(str1)):\n        if str1[i] in char_frequency:\n            char_frequency[str1[i]] += 1\n        else:\n            char_frequency[str1[i]] = 1\n",
        "num_ids": 89
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_dict = {}\n    for c in str1:\n        if c in str_dict:\n            str_dict[c] += 1\n        else:\n            str_dict[c] = 1\n    for c in str1:\n        if str_dict[c] == 1:\n            return c\n    return \"No non-repeating characters\"\n",
        "num_ids": 85
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count={}\n    for i in str1:\n        if i in count:\n            count[i]+=1\n        else:\n            count[i]=1\n",
        "num_ids": 41
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    my_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in my_dict:\n            my_dict[str1[i]] += 1\n        else:\n            my_dict[str1[i]] = 1\n    for key in my_dict:\n        if my_dict[key] == 1:\n            return key\n    return None\n",
        "num_ids": 94
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n",
        "num_ids": 31
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    non_repeated_letters = []\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            non_repeated_letters.append(str1[i])\n    if len(non_repeated_letters) == 0:\n        return \"All characters are repeated\"\n    return non_repeated_letters[0]\n",
        "num_ids": 93
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string)>1 and string[0] == string[-1]:\n        return True\n    else:\n        return False\ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.strip()[0] == string.strip()[-1]:\n        return True\n    else:\n        return False\ndef start_and_end(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) > 1 and string[0] == string[-1]:\n        return True\n    else:\n        return False\ndef starts_and_ends(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) > 1 and string.strip()[0] == string.strip()[-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string.strip()\n    if (string[0] == string[-1]) and (re.search(regex, string)):\n        return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return \"The given String starts and ends with same character\"\n    else:\n        return \"The given String doesn't have the same character at the starting and end\"\n",
        "num_ids": 51
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))\n",
        "num_ids": 16
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) > 0:\n        return re.match(regex,string) is not None\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (string[0] == string[-1]):\n        print(\"String starts and ends with the same character.\")\n    else:\n        print(\"String doesn't starts and ends with the same character.\")\n",
        "num_ids": 49
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) >= 1:\n        return bool(re.match(regex, string))\n    else:\n        return False\n    \n    \ndef check_char_method_1(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) >= 1:\n        if string[0] == string[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Write your code here\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) > 1:\n        if string[0] == string[-1]:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = str(string)\n    if string[0] == string[len(string) - 1]:\n        return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    elif a > c:\n        return a\n    elif b > c:\n        return c\n    else:\n        return b\n",
        "num_ids": 72
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c=sorted((a,b,c))\n    if a+b>c:\n        return b\n    elif b+c>a:\n        return c\n    else:\n        return a\nprint(median_numbers(1,2,3))\nprint(median_numbers(9,5,3))\nprint(median_numbers(3,2,1))\nprint(median_numbers(1,2,3))\nprint(median_numbers(9,5,3))\nprint(median_numbers(5,5,5))\n",
        "num_ids": 144
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return sorted((a,b,c))[1]\n",
        "num_ids": 16
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b:\n        if b >= c:\n            return b\n        elif a <= c:\n            return a\n        else:\n            return c\n    elif a > c:\n        return a\n    elif a <= b:\n        if b >= c:\n            return b\n        elif a <= c:\n            return a\n        else:\n            return c\n",
        "num_ids": 91
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x = a\n    y = b\n    z = c\n    if a > b:\n        x = b\n        y = a\n    if a > c:\n        x = c\n        y = a\n    if b > c:\n        x = c\n        y = b\n    if b > a:\n        z = a\n    if c > a:\n        z = a\n    if c > b:\n        z = b\n    if x == b:\n        if y > z:\n            return y\n        else:\n            return z\n    if y == a:\n        if x > z:\n            return x\n        else:\n            return z\n    return x\n",
        "num_ids": 160
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        elif a < c:\n            return c\n        else:\n            return a\n    else:\n        if a < c:\n            return a\n        elif b < c:\n            return c\n        else:\n            return b\nprint(median_numbers(1,2,3))\nprint(median_numbers(3,1,2))\nprint(median_numbers(6,4,5))\nprint(median_numbers(6,5,4))\nprint(median_numbers(6,5,6))\nprint(median_numbers(6,6,6))\n",
        "num_ids": 165
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b:\n        if b >= c:\n            median = b\n        elif c >= b:\n            median = c\n        else:\n            median = b\n    elif b >= c:\n        median = a\n    else:\n        median = c\n    return median\n",
        "num_ids": 74
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a<c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    else:\n        if b>a:\n            if b<c:\n                return b\n            elif c>a:\n                return a\n            else:\n                return c\n        else:\n            if c>b:\n                if c>a:\n                    return c\n                else:\n                    return a\nprint(median_numbers(1,2,3))\nprint(median_numbers(3,1,2))\nprint(median_numbers(2,3,1))\nprint(median_numbers(3,2,1))\nprint(median_numbers(1,3,2))\nprint(median_numbers(3,1,2))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3))\nprint(median_numbers(2,1,3)",
        "num_ids": 2016
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif c > a:\n            return a\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        elif b > a:\n            return b\n        else:\n            return c\n",
        "num_ids": 75
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list_of_numbers=[a,b,c]\n    list_of_numbers.sort()\n    print(list_of_numbers)\n    if len(list_of_numbers)%2==0:\n        print(\"The median is\",(list_of_numbers[len(list_of_numbers)//2-1]+list_of_numbers[len(list_of_numbers)//2])/2)\n    else:\n        print(\"The median is\",list_of_numbers[len(list_of_numbers)//2])\n",
        "num_ids": 139
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(s) for s in str(nums)])\n",
        "num_ids": 20
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def add_sum(sum):\n        total_sum = 0\n        for digit in sum:\n            total_sum += digit\n        return total_sum\n",
        "num_ids": 38
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n",
        "num_ids": 20
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum = sum + sum_of_digits_in_num(num)\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(int(digit) for digit in str(num))\n    return sum_of_digits\n",
        "num_ids": 51
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in str(nums)])\n",
        "num_ids": 20
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [int(i) for i in str(nums)]\n",
        "num_ids": 18
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += int(num)\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(n) for n in str(nums)])\n",
        "num_ids": 20
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(num) for num in nums])\n",
        "num_ids": 17
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    \n    \nif __name__ == '__main__':\n    print(bitwise_xor((1, 0, 1, 1), (1, 1, 0, 1)))\n    print(bitwise_xor((0, 0, 0, 1), (1, 1, 0, 1)))\n    ",
        "num_ids": 99
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(res)\n",
        "num_ids": 53
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_bitwise = list(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return test_bitwise\n",
        "num_ids": 41
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(i^j for i,j in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a,b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #start writing your code here\n    result_tup=()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]^test_tup2[i],)\n    return result_tup\n",
        "num_ids": 67
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # return int(''.join(str(bin(x | y))[2:].zfill(8) for x, y in zip(test_tup1, test_tup2)), 2)\n    # return reduce(operator.xor, test_tup1, test_tup2)\n    # return reduce(operator.xor, test_tup1, test_tup2, initial = 0)\n    return 0\n",
        "num_ids": 103
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a,b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (1, 2, 3), (4, 5, 6)]\n    #return 3\n    print('The list is :'+ str(test_list))\n    print('The number of unique tuples is :'+ str(len(set(test_list))))\n    return len(set(test_list))\n    #return len(set(test_list))\n",
        "num_ids": 112
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = [1,1,1,2,3,4,5,5,5,5,5]\n    unique_tuples = set()\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            tup = (test_list[i],test_list[j])\n            unique_tuples.add(tup)\n    return len(unique_tuples)\n    ",
        "num_ids": 113
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tuple in test_list:\n        for element in tuple:\n            if element not in freq:\n                freq[element] = 0\n            freq[element] += 1\n    return freq\n",
        "num_ids": 56
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for key in test_list:\n        if test_list.count(key) > 1:\n            freq_list.append(key)\n    return freq_list\n",
        "num_ids": 51
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # return list(set(tuple(sorted(sublist)) for sublist in test_list))\n    return test_list\n",
        "num_ids": 33
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "num_ids": 62
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return [x[0] + x[1] for x in zip(test_tup1, test_tup2)]\n",
        "num_ids": 32
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([test_tup1[i] + test_tup2[i] for i in range(len(test_tup1))])\n",
        "num_ids": 38
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    if len(test_tup1) > len(test_tup2):\n        for i in range(len(test_tup1)):\n            if i < len(test_tup2):\n                result.append(test_tup1[i] + test_tup2[i])\n            else:\n                result.append(test_tup1[i])\n    else:\n        for i in range(len(test_tup2)):\n            if i < len(test_tup1):\n                result.append(test_tup1[i] + test_tup2[i])\n            else:\n                result.append(test_tup2[i])\n",
        "num_ids": 171
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n",
        "num_ids": 22
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    result = ()\n    for i,j in zip(test_tup1, test_tup2):\n        result += (i[0]+j[0], i[1]+j[1])\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + ((test_tup1[i] + test_tup2[i]),)\n    return result_tup\n",
        "num_ids": 64
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_list = []\n    for x, y in zip(test_tup1, test_tup2):\n        test_list.append((x, y))\n    return tuple(test_list)\n",
        "num_ids": 51
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # test_tup1 = (3, 2, 1, 0)\n    # test_tup2 = (1, 2, 4)\n    # return_tup = (3, 2, 5, 6)\n    return_tup = ()\n    for i,j in zip(test_tup1,test_tup2):\n        return_tup = return_tup + (i+j,)\n    return return_tup\n",
        "num_ids": 106
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple([i[0]+i[1] for i in zip(test_tup1, test_tup2)])\n    else:\n        return None\n",
        "num_ids": 61
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([i + j for i, j in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = a if a<b else b\n    return min\n",
        "num_ids": 17
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    return a\n    #return -1\n",
        "num_ids": 23
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 23
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    elif b < a:\n        return b\n    else:\n        return \"The numbers are equal.\"\n",
        "num_ids": 38
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        print(b)\n    else:\n        print(a)\nminimum(3,5)",
        "num_ids": 31
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n        \ndef minimum(a,b,c):   \n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    x=minimum(a,b)\n    return minimum(x,c)\n    \ndef maximum(a,b,c):   \n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    x=maximum(a,b)\n    return maximum(x,c)\n    \ndef minimum(a,b,c):   \n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    if a<b:\n        return a\n    elif a==b:\n        return c\n    else:\n        return b\n",
        "num_ids": 33
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a)\n    else:\n        print(b)\n    return\nminimum(5,7)\n",
        "num_ids": 35
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\ndef nam(a):\n    '''\n    Write a python function to concatinate two strings.\n    '''\n    return a\ndef sum(a,b):\n    '''\n    Write a python function to add two numbers.\n    '''\n    return a+b\ndef mul(a,b):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a*b\ndef sub(a,b):\n    '''\n    Write a python function to subtract two numbers.\n    '''\n    return a-b\ndef div(a,b):\n    '''\n    Write a python function to divide two numbers.\n    '''\n    return a/b\ndef pow(a,b):\n    '''\n    Write a python function to take the power of two numbers.\n    '''\n    return a**b\ndef sqrt(a):\n    '''\n    Write a python function to find the square root of the number.\n    '''\n    return a**(1/2)\ndef fact(a):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    return math.factorial(a)\ndef sin(a):\n    '''\n    Write a python function to find the sinus value of the number.\n    '''\n    return math.sin(a)\ndef cos(a):\n    '''\n    Write a python function to find the cosinus value of the number.\n    '''\n    return math.cos(a)\ndef tan(a):\n    '''\n    Write a python function to find the tangent value of the number.\n    '''\n    return math.tan(a)\ndef log(a):\n    '''\n    Write a python function to find the logarithmic value of the number.\n    '''\n    return math.log(a)\ndef exp(a):\n    '''\n    Write a python function to find the exponential value of the number.\n    '''\n    return math.exp(a)\ndef acos(a):\n    '''\n    Write a python function to find the arccosine value of the number.\n    '''\n    return math.acos(a)\ndef asin(a):\n    '''\n    Write a python function to find the arcsine value of the number.\n    '''\n    return math.asin(a)\ndef atan(a):\n    '''\n    Write a python function to find the arctangent value of the number.\n    '''\n    return math.atan(a)\ndef radians(a):\n    '''\n    Write a python function to convert the degress to radians.\n    '''\n    return math.radians(a)\ndef degrees(a):\n    '''\n    Write a python function to convert the radians to degrees.\n    '''\n    return math.degrees(a)\ndef lcm(a,b):\n    '''\n    Write a python function to find the least common multiple.\n    '''\n    return a*b/math.gcd(a,b)\ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor.\n    '''\n    return math.gcd(a,b)\ndef ceil(a):\n    '''\n    Write a python function to find the ceiling value of the number.\n    '''\n    return math.ceil(a)\ndef floor(a):\n    '''\n    Write a python function to find the floor value of the number.\n    '''\n    return math.floor(a)\ndef round(a):\n    '''\n    Write a python function to round the number.\n    '''\n    return round(a)\ndef isfloat(a):\n    '''\n    Write a python function to check if the value is a float.\n    '''\n    try:\n        float(a)\n        return True\n    except ValueError:\n        return False\ndef isnum(a):\n    '''\n    Write a python function to check if the value is a integer.\n    '''\n    try:\n        int(a)\n        return True\n    except ValueError:\n        return False\ndef iscomplex(a):\n    '''\n    Write a python function to check if the value is a complex number.\n    '''\n    if(isfloat(a) and isnum(a)):\n        return False\n    else:\n        return True\ndef isint(a):\n    '''\n    Write a python function to check if the value is a integer.\n    '''\n    if(iscomplex(a)):\n        if(a.real == int(a.real) and a.imag == 0):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef isstr(a):\n    '''\n    Write a python function to check if the value is a string.\n    '''\n    try:\n        str(a)\n        return True\n    except ValueError:\n        return False\ndef isbool(a):\n    '''\n    Write a python function to check if the value is a boolean.\n    '''\n    try:\n        bool(a)\n        return True\n    except ValueError:\n        return False\ndef islist(a):\n    '''\n    Write a python function to check if the value is a list.\n    '''\n    if(type(a)==list):\n        return True\n    else:\n        return False\ndef istuple(a):\n    '''\n    Write a python function to check if the value is a tuple.\n    '''\n    if(type(a)==tuple):\n        return True\n    else:\n        return False\ndef isdictionary(a):\n    '''\n    Write a python function to check if the value is a dictionary.\n    '''\n    if(type(a)==dict):\n        return True\n    else:\n        return False\ndef isset(a):\n    '''\n    Write a python function to check if the value is a set.\n    '''\n    if(type(a)==set):\n        return True\n    else:\n        return False\ndef isdict(a):\n    '''\n    Write a python function to check if the value is a dictionary.\n    '''\n    if(type(a)==dict):\n        return True\n    else:\n        return False\ndef isrange(a):\n    '''\n    Write a python function to check if the value is a range.\n    '''\n    if(type(a)==range):\n        return True\n    else:\n        return False\ndef isbytes(a):\n    '''\n    Write a python function to check if the value is a bytes object.\n    '''\n    if(type(a)==bytes):\n        return True\n    else:\n        return False\ndef isbytearray(a):\n    '''\n    Write a python function to check if the value is a bytearray object.\n    '''\n    if(type(a)==bytearray):\n        return True\n    else:\n        return False\ndef isfrozenset(a):\n    '''\n    Write a python function to check if the value is a frozenset object.\n    '''\n    if(type(a)==frozenset):\n        return True\n    else:\n        return False\ndef isfunction(a):\n    '''\n    Write a python function to check if the value is a function.\n    '''\n    if(type(a)==function):\n        return True\n    else:\n        return False\ndef isiterable(a):\n    '''\n    Write a python function to check if the value is iterable.\n    '''\n    try:\n        iter(a)\n        return True\n    except ValueError:\n        return False\ndef isgenerator(a):\n    '''\n    Write a python function to check if the value is a generator.\n    '''\n    return type(a)==generator\ndef ismodule(a):\n    '''\n    Write a python function to check if the value is a module.\n    '''\n    return type(a)==module\ndef isfloatrange(a):\n    '''\n    Write a python function to check if the value is a floa",
        "num_ids": 16
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n",
        "num_ids": 12
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex==tuple1: \n        return True \n    else: \n        return False \n",
        "num_ids": 29
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1) > 0:\n        return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        print('Yes')\n    else:\n        print('No')\n        \n        \ntuplex = (2, 4, 6)\ntuple1 = (2, 4, 6)\ncheck_tuplex(tuplex,tuple1)\n",
        "num_ids": 71
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuple1)):\n        if (tuple1[i] in tuplex):\n            print(tuple1[i])\n",
        "num_ids": 41
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    count = 0\n    for item in tuple1:\n        if item in tuplex:\n            count += 1\n    if count >= 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if any(i in tuplex for i in tuple1):\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] in tuple1:\n            return True\n        else:\n            return False\n    \n    \ntuplex = (123, 'xyz', 'zara', 'abc'); tuple1 = ('123', 'abc')\nprint(check_tuplex(tuplex,tuple1))\n",
        "num_ids": 90
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2!= 0): \n        return 1\n    else: \n        return 0\n",
        "num_ids": 27
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 27
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n",
        "num_ids": 27
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = str(x)\n    total = 0\n    for i in x:\n        total += int(i)\n    if total % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return 'odd' if x % 2 == 1 else 'even'\n",
        "num_ids": 18
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n    \ndef find_Parity_using_bitwise_Operator(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x & 0x1:\n        return \"odd\"\n    else:\n        return \"even\"\n    \ndef find_Parity_using_comparison_Operator(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n    \ndef main():\n    x = int(input(\"Enter a number: \"))\n    print(find_Parity(x))\n    print(find_Parity_using_bitwise_Operator(x))\n    print(find_Parity_using_comparison_Operator(x))\n    \nif __name__==\"__main__\":\n    main()\n    \n'''\nEnter a number: 10\nodd\nodd\neven\n",
        "num_ids": 14
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2 == 0):\n        print(\"{} is even\".format(x))\n    else:\n        print(\"{} is odd\".format(x))\n",
        "num_ids": 42
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = str(x)\n    return y[-1]\n",
        "num_ids": 18
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    result = 0\n    while x: \n        result ^= x & 1\n        x >>= 1\n    return result \n",
        "num_ids": 32
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n",
        "num_ids": 27
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if len(n) == 1:\n        return n\n    i = 0\n    while i < len(n)-1:\n        if n[i] < n[i+1]:\n            break\n        i += 1\n    if i == len(n)-1:\n        return n\n    for j in range(len(n)-1,i,-1):\n        if n[i] < n[j]:\n            n[i],n[j] = n[j],n[i]\n            break\n    return n[:i+1] + sorted(n[i+1:])\n",
        "num_ids": 140
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    next_bigger = ''\n    stack = []\n    # find the last big number\n    for i in range(len(n)-1, -1, -1):\n        cur = n[i]\n        while len(stack) > 0 and stack[-1] < cur:\n            next_bigger += stack.pop()\n        stack.append(cur)\n    # add the rest\n    next_bigger += ''.join(stack[::-1])\n    return next_bigger\n",
        "num_ids": 117
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = [int(x) for x in str(n)]\n    i = len(arr) - 1\n    while i > 0 and arr[i - 1] >= arr[i]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(arr) - 1\n    while arr[j] <= arr[i - 1]:\n        j -= 1\n    arr[j], arr[i - 1] = arr[i - 1], arr[j]\n    arr[i:] = arr[len(arr) - 1:i - 1: -1]\n    return int(''.join(str(x) for x in arr))\n",
        "num_ids": 155
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    n_list = []\n    # print('n is:',n)\n    for i in range(len(n)-1,-1,-1):\n        n_list.append(n[i])\n    # print('n_list is:',n_list)\n    for i in range(len(n)):\n        if int(n[i])<int(n[i+1]):\n            break\n    # print('break is:',i)\n    if i==len(n)-1:\n        return -1\n    temp = n[i]\n    n[i] = n[i+1]\n    n[i+1] = temp\n    new_n = ''.join(n)\n    return int(new_n)\n",
        "num_ids": 187
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = n\n    lst = []\n    num_str = str(num)\n    for i in range(len(num_str)):\n        lst.append(int(num_str[i]))\n    #print(lst)\n    #print(len(lst))\n    max_i = len(lst) - 1\n    for i in range(len(lst)):\n        if (lst[i] < lst[max_i]):\n            max_i = i\n    #print(max_i)\n    for i in range(max_i+1,len(lst)):\n        if lst[i] > lst[max_i]:\n            lst[max_i], lst[i] = lst[i], lst[max_i]\n            break\n    #print(lst)\n    new_num = 0\n    for i in range(len(lst)):\n        new_num = new_num * 10 + lst[i]\n    #print(new_num)\n    return new_num\n",
        "num_ids": 256
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    num = []\n    while n > 0:\n        num.append(n%10)\n        n //= 10\n    num.reverse()\n    res = 0\n    for i, num in enumerate(num):\n        res += (10 ** i) * num\n    return res\n",
        "num_ids": 79
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    import itertools\n    def solution(n):\n        num = [i for i in str(n)]\n        if num == sorted(num):\n            return -1\n        num = sorted(num)\n        num.reverse()\n        for i in itertools.combinations(num, len(num)):\n            temp = int(''.join(i))\n            if temp > n:\n                return int(''.join(i))\n    return solution(n)\n",
        "num_ids": 110
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    i = len(n) - 1\n    while i > 0 and n[i] <= n[i-1]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(n) - 1\n    while n[j] <= n[i-1]:\n        j -= 1\n    n[j], n[i-1] = n[i-1], n[j]\n    n[i:] = reversed(n[i:])\n    result = int(''.join(n))\n    if result < 2**31 - 1:\n        return result\n    else:\n        return -1\n",
        "num_ids": 158
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = [int(i) for i in str(n)]\n    if n == sorted(n, reverse=True):\n        return -1\n    else:\n        i = n.index(min(n))\n        n[i], n[i+1] = n[i+1], n[i]\n        return int(''.join([str(i) for i in n]))\n",
        "num_ids": 93
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def has_digit(n, i):\n        return i < len(n) and n[i]!= '0'\n",
        "num_ids": 32
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    if len(nums1) == 0 or len(nums2) == 0:\n        return result\n    if len(nums1) == 1 and len(nums2) == 1:\n        return [min(nums1, nums2)]\n    \n    heap = []\n    for i in nums1:\n        for j in nums2:\n            heapq.heappush(heap, (-(i+j), [i, j]))\n",
        "num_ids": 118
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def sort(arr):\n        l = len(arr)\n        for i in range(l):\n            for j in range(0, l-i-1):\n                if arr[j] > arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n        return arr\n    \n    if nums1 == [] or nums2 == []:\n        return []\n",
        "num_ids": 103
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1, nums2 = sorted(nums1), sorted(nums2)\n    output = []\n    heap = [(nums1[i] + nums2[0], i, 0) for i in range(len(nums1))]\n    heapq.heapify(heap)\n    while k > 0 and heap:\n        _, i, j = heapq.heappop(heap)\n        output.append([nums1[i], nums2[j]])\n        if j < len(nums2) - 1:\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n        k -= 1\n    return output\n",
        "num_ids": 181
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0 or k == 0:\n        return []\n    \n    result = []\n    i, j = 0, 0\n    min_heap = []\n    count = 0\n    \n    while i < len(nums1) and j < len(nums2):\n        if count < k:\n            if nums1[i] < nums2[j]:\n                result.append([nums1[i], nums2[j]])\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n                i += 1\n            else:\n                result.append([nums2[j], nums1[i]])\n                heapq.heappush(min_heap, (nums2[j] + nums1[i], nums2[j], nums1[i]))\n                j += 1\n        else:\n            if nums1[i] < nums2[j]:\n                while min_heap and min_heap[0][1] < nums1[i]:\n                    heapq.heappop(min_heap)\n                if min_heap:\n                    heapq.heappop(min_heap)\n                    result.append([nums1[i], nums2[j]])\n                i += 1\n            else:\n                while min_heap and min_heap[0][2] < nums2[j]:\n                    heapq.heappop(min_heap)\n                if min_heap:\n                    heapq.heappop(min_heap)\n                    result.append([nums2[j], nums1[i]])\n                j += 1\n        count += 1\n    \n    while min_heap:\n        heapq.heappop(min_heap)\n    return result\n",
        "num_ids": 471
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    visited = set()\n    smallest_pairs = []\n    heap = []\n    heapq.heapify(heap)\n    for num1 in nums1:\n        for num2 in nums2:\n            if num1 + num2 not in visited:\n                heapq.heappush(heap, (num1+num2, num1, num2))\n    for i in range(k):\n        smallest_pairs.append(heapq.heappop(heap)[1:])\n        visited.add(smallest_pairs[-1][0])\n    return smallest_pairs\n",
        "num_ids": 178
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    minheap = []\n    def push_to_minheap(p1, p2):\n        if len(minheap) < k:\n            heapq.heappush(minheap, (p1+p2, p1, p2))\n        else:\n            if minheap[0][0] > p1 + p2:\n                heapq.heappop(minheap)\n                heapq.heappush(minheap, (p1+p2, p1, p2))\n",
        "num_ids": 128
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 == [] or nums2 == []:\n        return []\n    if k == 0:\n        return []\n    if nums1 == nums2:\n        heapq.heapify(nums1)\n        return heapq.nsmallest(k, nums1)\n    result = []\n    nums1_heap = []\n    nums2_heap = []\n    nums1_hash = {}\n    nums2_hash = {}\n    for i in nums1:\n        heapq.heappush(nums1_heap, i)\n        nums1_hash[i] = nums1_hash.get(i, 0) + 1\n    for j in nums2:\n        heapq.heappush(nums2_heap, j)\n        nums2_hash[j] = nums2_hash.get(j, 0) + 1\n    for i in range(k):\n        if nums1_hash[heapq.heappop(nums1_heap)] > 1 and nums2_hash[heapq.heappop(nums2_heap)] > 1:\n            a = heapq.heappop(nums1_heap)\n            b = heapq.heappop(nums2_heap)\n            result.append((a, b))\n        elif nums1_hash[heapq.heappop(nums1_heap)] > 1:\n            a = heapq.heappop(nums1_heap)\n            result.append((a, -1))\n        elif nums2_hash[heapq.heappop(nums2_heap)] > 1:\n            b = heapq.heappop(nums2_heap)\n            result.append((-1, b))\n        else:\n            break\n    return result\n",
        "num_ids": 453
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    l1 = len(nums1)\n    l2 = len(nums2)\n    if l1 == 0 or l2 == 0:\n        return []\n    heap = []\n    count = 0\n    if l1 < l2:\n        for i in range(l1):\n            heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n            count += 1\n            if count > k:\n                heapq.heappop(heap)\n    else:\n        for i in range(l2):\n            heapq.heappush(heap, (nums1[0] + nums2[i], 0, i))\n            count += 1\n            if count > k:\n                heapq.heappop(heap)\n    ans = []\n    while len(heap) > 0:\n        _, i1, i2 = heapq.heappop(heap)\n        ans.append((nums1[i1], nums2[i2]))\n    return ans\n",
        "num_ids": 258
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    pq = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(pq) < k:\n                heapq.heappush(pq, (-(nums1[i] + nums2[j]), (nums1[i], nums2[j])))\n            else:\n                heapq.heappushpop(pq, (-(nums1[i] + nums2[j]), (nums1[i], nums2[j])))\n    return [pair for pair in pq]",
        "num_ids": 171
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2: return []\n    h = []\n    for i in nums1:\n        for j in nums2:\n            heapq.heappush(h,(-abs(i-j),i,j))\n            if len(h) > k:\n                heapq.heappop(h)\n    return [(i,j) for _,i,j in h]\n",
        "num_ids": 102
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append(min(list1[i][0]*list1[i][1],list1[j][0]*list1[j][1]))\n    return min(result)\n",
        "num_ids": 83
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize variables\n    min_product = 1\n    \n    # iterate through list\n    for i in range(len(list1)):\n        # get the min product from the current tuple\n        min_product = min(min_product, (list1[i][0]*list1[i][1]))\n",
        "num_ids": 76
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = None\n    for i in list1:\n        for j in list1:\n            if i!= j and min_prod == None:\n                min_prod = i[0] * j[0] * i[1] * j[1]\n            elif i!= j and min_prod!= None:\n                min_prod = min(min_prod,i[0] * j[0] * i[1] * j[1])\n    return min_prod\n",
        "num_ids": 124
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #We set the min value to the first tuple in the list.\n    min = list1[0]\n    #We set the max value to the first tuple in the list.\n    max = list1[0]\n    #We loop through the list.\n    for i in range(len(list1)):\n        #We compare the first element of each tuple in the list to the min value.\n        if list1[i][0] < min[0]:\n            #We reassign the min value to the first element of each tuple.\n            min = list1[i]\n        #We compare the first element of each tuple in the list to the max value.\n        if list1[i][0] > max[0]:\n            #We reassign the max value to the first element of each tuple.\n            max = list1[i]\n        #We compare the second element of each tuple in the list to the min value.\n        if list1[i][1] < min[1]:\n            #We reassign the min value to the second element of each tuple.\n            min = list1[i]\n        #We compare the second element of each tuple in the list to the max value.\n        if list1[i][1] > max[1]:\n            #We reassign the max value to the second element of each tuple.\n            max = list1[i]\n    #We print the min value and the max value.\n    print(f'The minimum product is {min}, and the maximum product is {max}')\n",
        "num_ids": 349
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min([l[0]*l[1] for l in list1])\n",
        "num_ids": 22
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            if list1[i][0] < list1[j][0] and list1[i][1] < list1[j][1]:\n                list2.append(list1[i])\n            elif list1[i][0] > list1[j][0] and list1[i][1] > list1[j][1]:\n                list2.append(list1[j])\n    return (min(list2, key=lambda item: item[0] * item[1]))[0] * (min(list2, key=lambda item: item[0] * item[1]))[1]\n",
        "num_ids": 183
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    print('\\n\\nGiven list is: {}'.format(list1))\n    min_prod = min(list1)\n    print('Minimum product tuple is: {}'.format(min_prod))\n",
        "num_ids": 51
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # print('list1: ', list1)\n    if len(list1) == 0:\n        return None\n    if len(list1) == 1:\n        return list1[0]\n    product = list1[0][0] * list1[0][1]\n    for x in range(len(list1)):\n        if list1[x][0] * list1[x][1] < product:\n            product = list1[x][0] * list1[x][1]\n    return product\n",
        "num_ids": 124
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # TODO: complete the function to return the minimum product\n    return min(min(list1[i][0]*list1[i][1] for i in range(len(list1))), min(list1[i][0]*list1[i][1] for i in range(len(list1))))\n    \n",
        "num_ids": 78
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    mini = 1\n    for i in list1:\n        mini = min(mini,i[0]*i[1])\n    return mini\n",
        "num_ids": 36
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 'empty list'\n    minimum = listval[0]\n    for i in range(1, len(listval)):\n        if minimum > listval[i]:\n            minimum = listval[i]\n    return minimum\n",
        "num_ids": 67
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    res = listval[0]\n    for i in listval:\n        if i < res:\n            res = i\n    return res\n",
        "num_ids": 35
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Your code here\n    minval = listval[0]\n    for i in listval[1:]:\n        if i < minval:\n            minval = i\n    return minval\n",
        "num_ids": 48
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # checking the type of the list to find the appropriate function\n    if(type(listval)==list):\n        return min_val_list(listval)\n    if(type(listval)==dict):\n        return min_val_dict(listval)\n    if(type(listval)==str):\n        return min_val_str(listval)\n    if(type(listval)==int):\n        return min_val_int(listval)\n    if(type(listval)==float):\n        return min_val_float(listval)\n    if(type(listval)==bool):\n        return min_val_bool(listval)\n    if(type(listval)==set):\n        return min_val_set(listval)\n    if(type(listval)==tuple):\n        return min_val_tuple(listval)\n",
        "num_ids": 210
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    mval=listval[0]\n    for i in range(len(listval)):\n        if listval[i]<mval:\n            mval=listval[i]\n    return mval\n",
        "num_ids": 52
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(0, len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n",
        "num_ids": 53
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n",
        "num_ids": 42
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 'Empty list!'\n    else:\n        return min(listval)\n",
        "num_ids": 32
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    mini = 0\n    for x in listval:\n        if isinstance(x, int) or isinstance(x, float):\n            if x < listval[mini]:\n                mini = listval.index(x)\n    return mini\n",
        "num_ids": 58
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    smallest = listval[0]\n    for value in listval:\n        if value < smallest:\n            smallest = value\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n",
        "num_ids": 28
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(x.capitalize() for x in word.split('_'))\n",
        "num_ids": 24
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == \"\":\n        return word\n    else:\n        return word[0] + word.title().translate(None, \"-_\")[1:]\n",
        "num_ids": 40
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # myReg = re.compile(r'(?<=[a-z])_([a-z])')\n    # camel = myReg.sub(lambda x: x.group(1).upper(), word)\n    # return camel\n    # ---------------------------#\n    # return ''.join(x.capitalize() for x in word.split('_'))\n    # ---------------------------#\n    return ''.join(i.capitalize() for i in word.split('_'))\n",
        "num_ids": 117
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(word.title().split('_'))\n",
        "num_ids": 18
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert Snake Case to Camel Case\n    # Convert the word to lowercase.\n    word = word.lower()\n    # Split the lowercased string to words\n    split_words = word.split('_')\n    # Create a new string by appending the string in the split_words\n    # with the first letter of each word in uppercase.\n    return split_words[0] + ''.join(w.title() for w in split_words[1:])\n",
        "num_ids": 112
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # first remove all white spaces\n    new_str = word.replace('_','').split()\n",
        "num_ids": 26
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = ''\n    flag = 0\n    for i in word:\n        if i.isupper():\n            result += i.lower()\n            flag = 1\n        else:\n            if flag == 1:\n                result += i.upper()\n                flag = 0\n            else:\n                result += i\n    return result\n",
        "num_ids": 77
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n",
        "num_ids": 26
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join([i.title() for i in word.split('_')])\n",
        "num_ids": 23
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = []\n    for i in l:\n        if i % 2 == 0:\n            new_l.append(i)\n    return new_l\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for i in l:\n        if i%2 == 0:\n            result.append(i)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i%2 == 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l == []:\n        return []\n    else:\n        return list(filter(lambda x:x%2==0,l))\n",
        "num_ids": 35
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = []\n    for n in l:\n        if n%2 == 0:\n            new_l.append(n)\n    return new_l\nprint(remove_odd([5,7,9,1,8,3]))\n",
        "num_ids": 61
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for i in l:\n        if i % 2 == 0:\n            result.append(i)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n",
        "num_ids": 42
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = []\n    for num in l:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    for i in range(len(odd_numbers)):\n        l.remove(odd_numbers[i])\n    return l\n",
        "num_ids": 69
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = []\n    for i in l:\n        if i % 2 == 0:\n            new_l.append(i)\n    return new_l\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return 'Invalid index'\n",
        "num_ids": 19
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # your code here\n    return list1[n]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item[n] for item in list1]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [list(element) for element in zip(*list1)]\n",
        "num_ids": 18
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1_set = set(list1)\n    list2_set = set(list2)\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n        else:\n            return False\n",
        "num_ids": 30
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #list1 = [1,2,3,4]\n    #list2 = [3,4,5,6]\n    #list1 = [1,2,3,4]\n    #list2 = [3,4,5,6]\n    #list1 = [1,2,3,4]\n    #list2 = [4,5,6,7]\n    #list1 = [4,5,6,7]\n    #list2 = [1,2,3,4]\n    flag = False\n    list1.sort()\n    list2.sort()\n    #print(list1,list2)\n    if list1[0] < list2[0] and list1[-1] > list2[-1]:\n        for i in list1:\n            if i in list2:\n                flag = True\n    #print(flag)\n    return flag\n",
        "num_ids": 212
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return len(list1) == len([value for value in list1 if value in list2])\n",
        "num_ids": 25
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1= list(set(list1))\n    list2= list(set(list2))\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = [1,2,3,4,5,6]\n    list2 = [1,2,3,4,5]\n    list3 = [1,2,3,4,5,6]\n",
        "num_ids": 54
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if any(value in list1 for value in list2):\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    set1=set(list1)\n    set2=set(list2)\n    return(set1 & set2)\n",
        "num_ids": 32
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1=set(list1)\n    list2=set(list2)\n    if len(list1.intersection(list2))!=0:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maxProduct = -2147483648\n    maxIdx = -1\n    minIdx = -1\n    for i in range(0,len(arr)-1):\n        if arr[i] > 0:\n            if arr[i] * arr[i+1] > maxProduct:\n                maxProduct = arr[i] * arr[i+1]\n                maxIdx = i\n                minIdx = i+1\n        elif arr[i] < 0:\n            if arr[i] * arr[i+1] < maxProduct:\n                maxProduct = arr[i] * arr[i+1]\n                maxIdx = i\n                minIdx = i+1\n",
        "num_ids": 165
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_prod:\n                max_prod = arr[i]*arr[j]\n    return max_prod\n",
        "num_ids": 87
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    print(arr)\n    return arr[-1] * arr[-2]\n",
        "num_ids": 28
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = 0\n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] * arr[j] > max): \n                max = arr[i] * arr[j] \n    return max \n    ",
        "num_ids": 76
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    '''\n    SOLUTION: If we know the size of the array, then we can do it in O(n) time using a two-pass approach. \n    In the first pass, we can compute the product of each element. \n    Then, we can find the maximum product.\n    '''\n    \n    # Get the size of the array\n    n = len(arr)\n    \n    # Initialize the product array\n    prod = [0]*n\n    \n    # Compute the product of each element of the array\n    prod[0] = arr[0]\n    for i in range(1, n):\n        prod[i] = prod[i-1]*arr[i]\n    \n    # Initialize maximum product\n    max_prod = 0\n    \n    # Initialize maximum pair\n    max_pair = [0, 0]\n    \n    # Compute the maximum product\n    # We use a two-pass approach, where in the first pass, we find the maximum product\n    # in the array, and in the second pass, we find the pair which has the maximum product.\n    for i in range(n):\n        # Check if the current element is greater than the maximum product\n        if prod[i] > max_prod:\n            max_prod = prod[i]\n            max_pair = [i, i]\n        elif prod[i] == max_prod:\n            # Increment the index of the element with maximum product\n            max_pair[1] += 1\n    \n    # Return the maximum pair\n    return max_pair\n",
        "num_ids": 300
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            product = arr[i] * arr[j] \n            if product > max_product: \n                max_product = product \n    return max_product \n",
        "num_ids": 82
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pro = arr[0]\n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] * arr[j]) > (arr[i] * max_pro): \n                max_pro = arr[i] * arr[j] \n",
        "num_ids": 85
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n=len(arr)\n    arr.sort()\n    max=0\n    for i in range(n):\n        if (arr[i]*arr[n-1-i])>max:\n            max=arr[i]*arr[n-1-i]\n    return max\nif __name__ == \"__main__\": \n    arr = [-10, -3, 5, 6, -2] \n    print (max_Product(arr)) ",
        "num_ids": 111
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<2:\n        return\n    max_prod = arr[0] * arr[1]\n    max_pair = (arr[0],arr[1])\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j] > max_prod:\n                max_prod = arr[i]*arr[j]\n                max_pair = (arr[i],arr[j])\n    return max_pair\n",
        "num_ids": 129
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    arr.sort()\n    max_product = arr[n-1] * arr[n-2] \n    return max_product \n",
        "num_ids": 43
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if Input[i][0] == Input[j][0]:\n                print(Input[i][0])\n",
        "num_ids": 52
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if Input==[]:\n        return []\n    if len(Input)==1:\n        return Input\n    else:\n        List=[]\n        List.append(Input[0])\n        for i in Input:\n            if i[0] in List:\n                continue\n            else:\n                List.append(i[0])\n        return List\n",
        "num_ids": 84
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)-1):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n",
        "num_ids": 68
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    ans = []\n    for i in Input:\n        if i[0] in ans:\n            ans.append(i[0])\n        else:\n            ans = [i[0]]\n    return ans\n",
        "num_ids": 51
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_elem = {}\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j:\n                if Input[i][0] == Input[j][0] and Input[i][0] not in Common_elem:\n                    Common_elem[Input[i][0]] = [Input[i], Input[j]]\n    return Common_elem\n",
        "num_ids": 102
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_tuples = list(map(lambda x: x[0], Input))\n    list_tuples = list(set(list_tuples))\n    return list_tuples\n    \ndef common_element(Input): \n    '''\n    Write a function to find common elements in list of tuples.\n    '''\n    list_tuple = group_tuples(Input)\n    common = []\n    for i in list_tuple:\n        for j in Input:\n            if i == j[0]:\n                common.append(j)\n    return common\n",
        "num_ids": 59
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    temp_list = []\n    temp_list.append(Input[0])\n    for i in range(1,len(Input)):\n        if Input[i][0] not in temp_list:\n            temp_list.append(Input[i][0])\n        else:\n            print(Input[i][0])\n        \n        \n",
        "num_ids": 82
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # your code here\n    temp=[]\n    for i in Input:\n        temp.append(i[0])\n    #print (temp)\n    return(max(set(temp), key = temp.count))\n",
        "num_ids": 53
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input = [('Anuj', '1'), ('Anuj', '2'), ('Anuj', '3'), ('Anuj', '4'), ('Anuj', '5')]\n    # Output = 'Anuj'\n",
        "num_ids": 53
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    x = []\n    for i in range(0,len(Input)):\n        tup = tuple(Input[i])\n        x.append(tup[0])\n    #print(x)\n    return max(set(x), key = x.count)\n",
        "num_ids": 65
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for item in lst:\n        if max < len(item):\n            max = len(item)\n    return max\n",
        "num_ids": 36
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)\n",
        "num_ids": 14
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m = 0\n    for i in lst: \n        if len(i) > m:\n            m = len(i)\n            max_element = i\n    return max_element\n",
        "num_ids": 47
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    result = 0\n    for i in lst:\n        if len(i) > result:\n            result = len(i)\n    for i in lst:\n        if len(i) == result:\n            return i\n",
        "num_ids": 55
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)\n",
        "num_ids": 14
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    for i in lst:\n        if max_len < len(i):\n            max_len = len(i)\n    for i in range(len(lst)):\n        if max_len == len(lst[i]):\n            return lst[i]\n    \n    \n",
        "num_ids": 84
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    l=len(lst)\n    i=0\n    m=0\n    while(i<l):\n        if(len(lst[i])>m):\n            m=len(lst[i])\n        i+=1\n    i=0\n    while(i<l):\n        if(len(lst[i])==m):\n            print lst[i]\n        i+=1\n    return\n",
        "num_ids": 102
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in range(0,len(lst)):\n        if len(lst[i])>max:\n            max=len(lst[i])\n    return max",
        "num_ids": 49
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0] \n    for ele in lst: \n        if len(ele) > len(max): \n            max = ele \n    return max\n",
        "num_ids": 44
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len=0\n    for i in range(len(lst)):\n        if max_len<len(lst[i]):\n            max_len=len(lst[i])\n            max_substr=lst[i]\n    return max_substr\n",
        "num_ids": 69
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for x in list1:\n        sum += round(x)\n    print(len(list1) * sum)\n",
        "num_ids": 35
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list_sum = 0\n    for x in list1:\n        x = round(x)\n        list_sum = list_sum + x\n    print(list_sum * len(list1))\n",
        "num_ids": 49
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #TODO\n    total = 0\n    for x in list1:\n        x = x + 0.5\n        x = round(x)\n        total += x\n    print(total * len(list1))\n",
        "num_ids": 54
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += round(i)\n    return sum * len(list1)\n",
        "num_ids": 33
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        if i < 0:\n            i *= -1\n            i = round(i)\n            i *= -1\n        else:\n            i = round(i)\n        sum += i\n    print(sum*len(list1))\n    return sum\n",
        "num_ids": 76
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for x in list1:\n        x = round(x)\n        sum1 = sum1 + x\n    print(\"Sum is\",sum1)\n    return sum1*len(list1)\n",
        "num_ids": 54
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for item in list1:\n        sum += math.floor(item)\n    return sum * len(list1)\n",
        "num_ids": 35
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    s = 0\n    for i in list1:\n        i = round(i)\n        s += i\n    print(s * len(list1))\n",
        "num_ids": 39
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total += round(x)\n    return total * len(list1)\n",
        "num_ids": 33
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(list(map(round, list1))) * len(list1)\n",
        "num_ids": 22
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(2,n+1,2)])\n",
        "num_ids": 24
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if i%2==0:\n            s=s+i**3\n    return s\n",
        "num_ids": 42
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1,2)])\n",
        "num_ids": 24
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubesum=0\n    for i in range(1,n+1):\n        cubesum=cubesum+i**3\n    print(cubesum)\n",
        "num_ids": 43
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum+=i**3\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum+=i**3\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return (n*(n+1)*(2*n+1))/6\n    \n    \ndef list_gen(n):\n    '''\n    Write a python function which takes a number n and returns list of first n even numbers in range of 0 to n.\n    '''\n    return [x for x in range(0,n+1) if x%2==0]\n",
        "num_ids": 25
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n**3\n",
        "num_ids": 8
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # return sum(range(1,n+1))**3\n    return sum([i**3 for i in range(1,n+1) if i%2==0])\n",
        "num_ids": 44
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize the summation variable \n    summation = 0\n    \n    # Iterate over the range 0 to n and perform the summation \n    for i in range(0, n+1):\n        if (i%2 == 0):\n            summation = summation + i*i*i\n        \n    return summation\n    \n    ",
        "num_ids": 85
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + '-'\n    return result[:-1]\n    ",
        "num_ids": 37
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for i in test_tup:\n        res += str(i) + ','\n    return res[0:-1]\n",
        "num_ids": 37
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '#'\n    return delimiter.join(test_tup)\n",
        "num_ids": 24
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result_string = \"\"\n    for i in test_tup:\n        result_string += i\n    return result_string\n",
        "num_ids": 32
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # my_string = ''\n    # for i in test_tup:\n    #     my_string += str(i) + '-'\n    # return my_string.rstrip('-')\n",
        "num_ids": 49
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return str(test_tup[0]) + '_' + str(test_tup[1]) + '_' + str(test_tup[2])\n",
        "num_ids": 42
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result_str = ''\n    for item in test_tup:\n        result_str += str(item) + ','\n    return result_str\n",
        "num_ids": 38
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \"-\"\n    return delimiter.join(test_tup)\n",
        "num_ids": 23
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delim.join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total+=i**3\n    return total/n\n",
        "num_ids": 33
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([x**3 for x in range(1,n+1)])/n\n",
        "num_ids": 24
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1,n+1):\n        total_sum = total_sum + i**3\n    average = total_sum/n\n    return average\n",
        "num_ids": 48
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = n * (n + 1) * (n + 2) * (n + 3) / 24\n    average = total / n\n    return average\n    \n    ",
        "num_ids": 41
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    def Average_Of_Cube(n):\n        return round(((n*(n+1)*(n+2))/6),2)\n    return Average_Of_Cube(n)\n",
        "num_ids": 47
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n>0:\n        i = 1\n        count = 0\n        while i<=n:\n            count += i**3\n            i += 1\n        return count/n\n    else:\n        return 0",
        "num_ids": 52
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i*i*i\n    return (sum/n)\n",
        "num_ids": 37
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int(n * (n+1) / 2 * (n+2) / 3)  \n",
        "num_ids": 26
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    x=n\n    sum=0\n    while(n>0):\n        sum=sum+(n**3)\n        n=n-1\n    return (sum/x)\n",
        "num_ids": 45
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return n**3\n",
        "num_ids": 8
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1][::-1]\n",
        "num_ids": 16
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n",
        "num_ids": 12
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n",
        "num_ids": 12
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n",
        "num_ids": 12
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print(test_tuple)\n    print(test_tuple[-1])\n",
        "num_ids": 23
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_tuple = ('C', 'A', 'B')\n    rear_tuple = []\n    for i in test_tuple:\n        rear_tuple.append(i[-1])\n    print(rear_tuple)\n    return rear_tuple\n",
        "num_ids": 69
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    #First, we need to do a lot of data type conversions to make sure we have the right data types.\n    #This is not something that we need to worry about for test functions, but you will want to do this as you work\n    #with your code.\n    try:\n        #This means we can't handle the data type passed to the function, so let's throw an error.\n        #This should always be the first line in the function\n        if (type(test_tuple)!= tuple) and (type(test_tuple)!= list):\n            raise TypeError\n        \n        #Now we can assume the passed in type is a list or tuple. We want to make sure it's not an empty list or tuple.\n        if len(test_tuple) == 0:\n            #If it's an empty tuple or list, we're done here, but we want to throw an error here instead.\n            raise ValueError\n        \n        #As it's a tuple or list, we want to convert it to a list.\n        test_list = list(test_tuple)\n        \n        #We want to make sure we have a list of strings. If not, we want to throw an error.\n        if type(test_list[0])!= str:\n            raise ValueError\n        \n        #Now, it's clear that the data type is good. We want to create a new list that will hold only the last element of each string.\n        #We're doing this by iterating through the list we made earlier, and adding the last element of each string to a new list.\n        rear_list = []\n        for i in range(0, len(test_list)):\n            rear_list.append(test_list[i][len(test_list[i]) - 1])\n        \n        #Finally, we want to make sure we converted the list we made earlier to a tuple. If it's not a tuple, it's not a list.\n        return tuple(rear_list)\n    \n    except TypeError:\n        #This is an error for passing the wrong data type.\n        return \"TypeError\"\n    except ValueError:\n        #This is an error for an empty list or tuple.\n        return \"ValueError\"\n",
        "num_ids": 510
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)): \n        if list1[i] == x: \n            count += 1\n        if count == len(list1):\n            return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count = count + 1\n    return count\n    \ndef sum_of_elements_in_list(list1):\n    '''\n    Write a function that computes the sum of the elements in a list.\n    '''\n    sum_of_list = 0\n    for element in list1:\n        sum_of_list = sum_of_list + element\n    return sum_of_list\n    \ndef calculate_midpoint(list1):\n    '''\n    Write a function that calculates the midpoint of a list.\n    '''\n    midpoint = len(list1) / 2\n    midpoint = int(midpoint)\n    return midpoint\n    \ndef calculate_min(list1):\n    '''\n    Write a function that calculates the minimum value in a list.\n    '''\n    return min(list1)\n",
        "num_ids": 10
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in list1:\n        if x in i:\n            count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        sublist = list1[i]\n        if x in sublist: \n            count += 1\n    return count \n",
        "num_ids": 50
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)): \n        if(x in list1[i]): \n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \ndef count_element_in_list2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular elemen",
        "num_ids": 18
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))\n",
        "num_ids": 22
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # first method\n    # nums = [1, 2, 3, 4, 5, 6]\n    # odd_nums = []\n    # for n in nums:\n    #     if n % 2 == 1:\n    #         odd_nums.append(n)\n    # print(odd_nums)\n",
        "num_ids": 78
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    print(list(filter(lambda x: x%2!= 0,nums)))\nfilter_oddnumbers([1,2,3,4,5,6,7,8,9,10])",
        "num_ids": 49
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for x in nums:\n        if x % 2!= 0:\n            odds.append(x)\n    return odds\n",
        "num_ids": 39
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if i % 2!= 0]\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))\n",
        "num_ids": 22
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2 == 1, nums))\n",
        "num_ids": 21
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for i in nums:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #return list(filter(lambda x: (x%2==0) or x==0, nums))\n",
        "num_ids": 28
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    return [num for num in nums if num % 2 == 1]\n",
        "num_ids": 21
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    split_string = dt.split(\"-\")\n    dd = split_string[2]\n    mm = split_string[1]\n    yyyy = split_string[0]\n    dd = str(dd).zfill(2)\n    mm = str(mm).zfill(2)\n    yyyy = str(yyyy)\n    new_date = \"-\".join([dd,mm,yyyy])\n    return new_date\n    \ndef test_change_date_format():\n    print(\"\\nTESTING CHANGE DATE FORMAT...\")\n    date = \"2019-03-19\"\n    new_date = change_date_format(date)\n    if new_date == \"19-03-2019\":\n        print(\"PASSED\")\n    else:\n        print(\"FAILED\")\n        \ntest_change_date_format()\n",
        "num_ids": 203
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # import re\n    # from datetime import datetime\n",
        "num_ids": 16
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt[0], dt[1], dt[2] = int(dt[2]), int(dt[1]), int(dt[0])\n    dt = [str(elem) for elem in dt]\n    dt = '-'.join(dt)\n    return dt\n    \ndef change_date_format_1(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n",
        "num_ids": 20
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n",
        "num_ids": 20
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n",
        "num_ids": 20
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dd=dt.split('-')\n    dd[0],dd[1],dd[2]=dd[2],dd[1],dd[0]\n    return '-'.join(dd)\n",
        "num_ids": 48
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt\n    regex = r'(\\d+)-(\\d+)-(\\d+)'\n    match = re.search(regex, date)\n    if match is not None:\n        day = match.group(1)\n        month = match.group(2)\n        year = match.group(3)\n        day_month = day+'-'+month\n        return day_month+'-'+year\n",
        "num_ids": 101
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = re.sub('-',' ',dt)\n    dt = re.split(' ',dt)\n    dt[0],dt[2],dt[1] = dt[2],dt[0],dt[1]\n    dt = '-'.join(dt)\n    return dt\n",
        "num_ids": 70
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:8] + \"-\" + dt[3:5] + \"-\" + dt[:2]\n",
        "num_ids": 33
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    # split date into year, month and day\n    # day = dt.split('-')[2]\n    # month = dt.split('-')[1]\n    # year = dt.split('-')[0]\n",
        "num_ids": 60
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Your code here\n    \n    #we first start from the first element and ignore the second last element as the previous insertion sort can already\n    #ensure that the elements are in sorted order before starting to sort the last element\n    n = len(my_list)\n    #we assume we know that the length of the list is at least 2\n    gap = n // 2\n    #to ensure we don't go out of bounds for the loop\n    gap = 1 if gap < 1 else gap\n    #we then start to increase the gap between each of the elements to allow for the insertion sort to sort\n    #larger elements faster\n    while gap > 0:\n        #for every element we're going to shift right, we start to shift left by the gap and do the same\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            #we move left until we hit a number that is greater than the current element\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            #once we hit the correct index, we place the element\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n    \n",
        "num_ids": 296
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Initialize a variable to count the number of times that the array was changed.\n    total_comparisons = 0\n    # Start the insertion sort with a shell size of 3.\n    shell_size = 3\n    # Keep looping while the shell size is greater than 1.\n    while shell_size > 1:\n        # Initialize a variable that keeps track of the number of times the array was changed.\n        comparisons = 0\n        # Start the insertion sort with a shell size of 3.\n        shell_size = 3\n        # Start the insertion sort with a shell size of 3.\n        while shell_size > 0:\n            # Store the shell size for printing.\n            comparisons += 1\n            # Start the insertion sort with a shell size of 3.\n            for i in range(shell_size, len(my_list)):\n                # The first value of the list is value of the previous shell, so skip it.\n                if i == 0:\n                    continue\n                # Store the value of the list element.\n                item = my_list[i]\n                # Initialize a variable to store the index of the value of the list element.\n                index = i\n                # Check if the index is at the correct position.\n                while index > 0:\n                    # Check if the list element is less than the value of the previous item.\n                    if my_list[index-1] > item:\n                        # Change the position of the list element.\n                        my_list[index] = my_list[index-1]\n                        # Change the position of the list element.\n                        index -= 1\n                        # Increase the number of comparisons.\n                        total_comparisons += 1\n                    else:\n                        break\n                # Change the position of the list element.\n                my_list[index] = item\n                # Increase the number of comparisons.\n                total_comparisons += 1\n            # Decrease the shell size.\n            shell_size -= 2\n        # Print the shell size.\n        print(f\"Shell size: {shell_size}, comparisons: {comparisons}\")\n    # Return the number of comparisons.\n    return total_comparisons\n",
        "num_ids": 493
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # calculate the gap\n    gap = len(my_list) // 2\n    # do the shell sort\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            # for every index\n            current_item = my_list[i]\n            # get the index of the next item to compare\n            j = i\n            # compare the current item with the next item\n            while j >= gap and current_item < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        # reduce the gap\n        gap = gap // 2\n    return my_list\n",
        "num_ids": 168
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    N = len(my_list)\n    gap = 1\n",
        "num_ids": 17
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            # Sort the sub list for this gap.\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n    \n",
        "num_ids": 129
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n",
        "num_ids": 108
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Compute the number of passes\n    n = len(my_list)\n    gap = n // 2\n",
        "num_ids": 28
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n",
        "num_ids": 108
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup3 = ()\n    for i, j in zip(test_tup1, test_tup2):\n        tup3 = tup3 + (i & j,)\n    return tup3\n",
        "num_ids": 51
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup = ()\n    for ele1, ele2 in zip(test_tup1, test_tup2):\n        new_tup = new_tup + (ele1 & ele2,)\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # I will use the Tuple class created to represent tuples\n    # We have discussed that its default output is in list format\n    # Hence, no need to specify the type of the output\n    return tuple([a & b for a, b in zip(test_tup1, test_tup2)])\n",
        "num_ids": 73
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Write your code here.\n    return tuple(i and j for i, j in zip(test_tup1, test_tup2))\n",
        "num_ids": 37
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (min(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]))\n",
        "num_ids": 43
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup3 = tuple(map(lambda x,y: x and y, test_tup1, test_tup2))\n    return test_tup3\n",
        "num_ids": 43
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    return (tuple(map(lambda x, y: x and y, test_tup1, test_tup2)))\n",
        "num_ids": 34
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def line_intersection(line1, line2): \n        xdiff = (line1[0][0] - line1[1][0], line2[0][0] - line2[1][0])\n        ydiff = (line1[0][1] - line1[1][1], line2[0][1] - line2[1][1]) #Typo was here\n",
        "num_ids": 94
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # formula: ax^2 + bx + c = 0 \n    # a = -b / 2a \n    # c = -b^2 / 4a \n    # solve quadratic equation\n    # ax^2 + bx + c = 0 \n    # d = b^2 - 4ac \n    # x = (-b +/- sqrt(d)) / 2a \n    # print('parabola_directrix function:')\n    if isinstance(a, (int, float)) == False: \n        raise ValueError('a must be a number')\n    elif isinstance(b, (int, float)) == False:\n        raise ValueError('b must be a number')\n    elif isinstance(c, (int, float)) == False:\n        raise ValueError('c must be a number')\n    else: \n        # print('OK')\n        d = b**2 - 4*a*c \n        x1 = (-b + np.sqrt(d)) / 2*a \n        x2 = (-b - np.sqrt(d)) / 2*a \n    return x1, x2 \n",
        "num_ids": 269
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*(c/b)**(1/2)\n",
        "num_ids": 18
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c \n    if disc == 0: \n        directrix = -b / 2*a\n        print(\"The directrix is\", directrix)\n        return directrix\n    else:\n        directrix = (-b - (disc ** 0.5)) / 2*a\n        print(\"The directrix is\", directrix)\n        return directrix\n",
        "num_ids": 92
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = Symbol('x')\n    y = Symbol('y')\n    F = x**2 - 2*x*y + y**2 + a*x + b*y + c\n    g = x**2 + y**2\n    directrix = solve(Eq(F, g), y)[0]\n    return directrix\n",
        "num_ids": 79
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import numpy as np\n    import sympy as sp\n    from sympy.geometry import Line, Point, intersection\n    x, y, z = sp.symbols('x, y, z')\n",
        "num_ids": 50
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # https://www.calculatorsoup.com/calculators/math/parabola-formulas.php\n    # y = a(x-h)^2 + k \n    # where y is the directrix, x is the x coordinate, and h is the vertex of the parabola\n",
        "num_ids": 72
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return 0\n    return ((-b + math.sqrt(b**2 - 4*a*c))/(2*a))\n",
        "num_ids": 40
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # y = ax^2 + bx + c\n    # directrix = -b / (2*a)\n    # discriminant = b^2 - 4ac\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        return (-b + math.sqrt(discriminant)) / (2 * a), (-b - math.sqrt(discriminant)) / (2 * a)\n    else:\n        return None\n    \ndef parabola_vertical_intercept(a, b, c):\n    '''\n    Write a function to find the vertical intercept of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        return -b / (2*a)\n    else:\n        return None\n",
        "num_ids": 44
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    # compute the discriminant\n    disc = b * b - 4 * a * c\n    if disc < 0:\n        return \"No real roots\"\n    else:\n        # compute the two roots\n        root_disc = math.sqrt(disc)\n        root1 = (-b + root_disc) / (2 * a)\n        root2 = (-b - root_disc) / (2 * a)\n        # return the roots\n        return root1, root2\n",
        "num_ids": 115
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list2, list1 = list1, list2\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1.count(list1[0]) == len(list1) and list2.count(list2[0]) == len(list2):\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    else:\n        for num1 in list1:\n            for num2 in list2:\n                if num1 == num2:\n                    return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return any(list1.__contains__(x) for x in list2)\n    \n",
        "num_ids": 25
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #return any(elem in list1 for elem in list2)\n    return any(elem in list2 for elem in list1)\n",
        "num_ids": 37
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 and list2:\n        for element in list1:\n            if element in list2:\n                return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set_list1 = set(list1)\n    set_list2 = set(list2)\n    intersection = set_list1 & set_list2\n    if intersection:\n        return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (((base1+base2)/2)*height)\n",
        "num_ids": 17
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n",
        "num_ids": 16
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print(\"The median is:\",(base1 + base2)/2*height)\n",
        "num_ids": 22
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base_sum=base1+base2\n    height_sum=base1+height+base2\n    return (base_sum*height_sum)/2\n",
        "num_ids": 39
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return base1+base2/2\n",
        "num_ids": 12
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # base1 = 5\n    # base2 = 7\n    # height = 8\n",
        "num_ids": 22
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number < i:\n            return False\n    return True\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr > number\n",
        "num_ids": 8
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr[len(arr)-1]\n",
        "num_ids": 15
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr > number\n",
        "num_ids": 8
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr_len = len(arr)\n    for i in range(arr_len):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr is not None:\n        print(\"You have entered: \", arr)\n        try:\n            assert(number > max(arr))\n        except AssertionError:\n            print(number, \" is not greater than elements of the array. The array elements are: \", max(arr))\n        else:\n            print(\"The number you have entered is greater than the elements of the array.\")\n",
        "num_ids": 91
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    print('\\n# check_greater #')\n    if len(arr) == 0:\n        print('Nothing to compare with')\n    elif len(arr) == 1:\n        if arr[0] > number:\n            print('{} > {}'.format(arr[0], number))\n        else:\n            print('{} <= {}'.format(arr[0], number))\n    else:\n        greater = True\n        for num in arr:\n            if num <= number:\n                greater = False\n                break\n        if greater:\n            print('all elements of the array are greater than {}'.format(number))\n        else:\n            print('Not all elements of the array are greater than {}'.format(number))\n",
        "num_ids": 172
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 27
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return False\n    return True\n",
        "num_ids": 24
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    exp = '.*[a]{1}[b]{1}.*'\n    found = re.match(exp, text)\n    if found:\n        return True\n    else:\n        return False\n    \ndef text_match_any(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    exp = '.*[a]{1}[b]{0,}.*'\n    found = re.match(exp, text)\n    if found:\n        return True\n    else:\n        return False\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by zero or one c's.\n    '''\n    exp = '.*[a]{1}[b]{1}[c]{0,1}.*'\n    found = re.match(exp, text)\n    if found:\n        return True\n    else:\n        return False\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by zero or one c's followed by one d.\n    '''\n    exp = '.*[a]{1}[b]{1}[c]{0,1}[d]{1}.*'\n    found = re.match(exp, text)\n    if found:\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab*?\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab+?\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab?\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{3}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{2,3}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{2,4}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{3,5}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{3,6}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,5}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,7}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,8}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,9}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,10}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,11}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,12}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,13}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,14}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,15}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,16}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,17}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,18}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_forty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,19}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_fifty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,20}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_sixty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,21}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_seventy(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    expression = r\"ab{4,22}\"\n    if re.search(expression, text):\n        return \"Found match!\"\n    else:\n        return \"Not matched!\"\ndef text_match_eighty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''",
        "num_ids": 1
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # Use re.findall(<regex>, <string>) to find all matches.\n    # Use re.search() to find the first match.\n    matches = re.search(\"ab*?\", text)\n    # if matches:\n    #     print(matches)\n    #     print(matches.group())\n    return matches\n",
        "num_ids": 81
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'a(bb+)')\n    pattern = re.compile(r'a(b.+)')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    return None\n    \n    \nassert text_match_one(\"ac\") == None\nassert text_match_one(\"ab\") == \"ab\"\nassert text_match_one(\"abb\") == \"abb\"\nassert text_match_one(\"abbb\") == \"abbb\"\nassert text_match_one(\"abc\") == None\n",
        "num_ids": 134
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match(r'[Aa][Bb]*(?=[Aa])', text)\n",
        "num_ids": 28
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'\\ba+\\b')\n    result = pattern.search(text)\n    if result:\n        return \"Found a match!\"\n    else:\n        return(\"Not matched!\")\n",
        "num_ids": 54
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'ab+'\n    result = re.findall(pattern, text)\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('ab*')\n    result = pattern.search(text)\n    return result!= None\n",
        "num_ids": 31
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.search(r\"a.*?b{1,}\", text))\n",
        "num_ids": 24
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('ab*?', text)\n",
        "num_ids": 15
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while(n > 9):\n        n = n/10\n    return n\n",
        "num_ids": 21
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n<10 :\n        return n\n    else:\n        return last_Digit(n//10)\n",
        "num_ids": 29
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    return int(n[-1])\n",
        "num_ids": 20
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return (n%10)\n",
        "num_ids": 10
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    print('The last digit of {} is {}'.format(n,n%10))\n",
        "num_ids": 22
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = int(n)\n    while n >= 10 :\n        n /= 10\n    return int(n)\n",
        "num_ids": 30
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit\n",
        "num_ids": 17
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    numbers = list1\n    return -numbers\n",
        "num_ids": 15
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    return list2\n",
        "num_ids": 51
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = [2, 3, -4, -8, 9]\n    print(list1)\n    newlist = []\n    for i in list1:\n        if i < 0:\n            newlist.append(i)\n    return newlist\nprint(neg_nos(list1))\n",
        "num_ids": 72
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for i in list1:\n        if i < 0:\n            negative_list.append(i)\n    return negative_list\n",
        "num_ids": 40
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Write your code here\n    result = []\n    for x in list1:\n        if x < 0:\n            result.append(x)\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_1=list1\n    list_2=[]\n    for i in list_1:\n        if i < 0:\n            list_2.append(i)\n    return list_2\n",
        "num_ids": 49
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([i for i in str1 if ord(i) % 2!= 1])\n    \nprint(remove_odd('home')",
        "num_ids": 36
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    return new_str\n",
        "num_ids": 48
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = \"Hello, World!\"\n    str1 = ''.join(i for i in str1 if not i in \"oox\")\n    print(str1)\n",
        "num_ids": 42
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([i for i in str1 if i%2==0])\n",
        "num_ids": 22
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = [char for char in str1 if char % 2 == 0]\n    return \"\".join(str1)\n",
        "num_ids": 31
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in str1:\n        if i in \"abcdefghijklmnopqrstuvwxyz\":\n            result += i\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for char in str1:\n        if char.isnumeric() == True or char.isalpha() == True:\n            str2 += char\n    return str2\n",
        "num_ids": 47
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    s=''\n    for i in str1:\n        if i not in s:\n            s+=i\n    print(s)\n",
        "num_ids": 34
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odds = [ch for ch in str1 if ch in \"13579\"]\n    return ''.join([ch for ch in str1 if ch not in odds])\n",
        "num_ids": 40
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([i for i in str1 if i.isalpha()])\n",
        "num_ids": 22
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "num_ids": 88
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            #for k in range(j+1,len(test_list)):\n            if(test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]):\n                counter += 1\n    return counter\n",
        "num_ids": 107
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) < 2:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    b_count = 0\n    #Return false if test_list is empty\n    if test_list == []:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if i < len(test_list) - 1:\n            count += test_list[i][0] == test_list[i + 1][1]\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i][0] == test_list[i + 1][1] and test_list[i][1] == test_list[i + 1][0]:\n            count += 1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "num_ids": 82
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    tuple_count = 0\n    for i in range(len(test_list) - 1):\n        j = i + 1\n        while j < len(test_list):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                tuple_count += 1\n                break\n            j += 1\n    return tuple_count\n",
        "num_ids": 104
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if len(test_list[i]) == 3:\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(set([(tuple(sorted(t)), tuple(sorted(t[::-1]))) for t in test_list]))\n",
        "num_ids": 38
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L_string = ''\n    for number in L:\n        L_string = L_string + str(number)\n    return int(L_string)\n",
        "num_ids": 39
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n",
        "num_ids": 20
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = str(L)\n    L = L.replace('[','')\n    L = L.replace(']','')\n    return int(L)\n",
        "num_ids": 41
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(list(map(str,L))),2)\n",
        "num_ids": 21
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # use of loop and string methods\n    # convert the list into string \n    L1 = [str(i) for i in L]\n    # join the string elements \n    L2 = \"\".join(L1)\n    # convert back to integer \n    L3 = int(L2)\n    return(L3)\n",
        "num_ids": 80
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in L))\n",
        "num_ids": 19
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    if len(L) == 1:\n        return L[0]\n    last_digit = L[0]\n    for i in range(1, len(L)):\n        last_digit *= 10\n        last_digit += L[i]\n    return last_digit\n",
        "num_ids": 81
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # a = \"\".join([str(i) for i in L])\n    # return int(a)\n",
        "num_ids": 28
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = [str(x) for x in L]\n    new = \"\".join(L)\n    return int(new)\n",
        "num_ids": 33
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def join_list(x):\n        sum=0\n        for elem in x:\n            sum = sum *10 + elem\n        return sum\n",
        "num_ids": 38
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = re.compile('ADV\\s*(.*)')\n    matches = regex.findall(text)\n    if matches:\n        for match in matches:\n            print(match, text.find(match))\n    else:\n        print('No match')\n",
        "num_ids": 68
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # For example, in the sentence \"I was happy to see you\". There are four adverbs, namely:\n    # happy, to, see, and you. The function should return a list of tuples, each tuple containing\n    # the position and the adverb. For example, the first tuple in the list should contain\n    # (1, \"happy\"), the second should contain (4, \"to\"), and so on.\n    result = []\n    adverb_pattern = r'(?:[^\\w\\s]|\\b)[a-zA-Z]{2,}ly(?:[^\\w\\s]|\\b)'\n    adverb_tuple = re.finditer(adverb_pattern, text)\n    for adverb in adverb_tuple:\n        result.append((adverb.span()[0], adverb.group(0)))\n    return result\n",
        "num_ids": 205
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    pattern = '(\\w+)\\W+(?:\\w+\\W+){1,}(adverb)'\n    for match in re.finditer(pattern, text):\n        result.append(match.group(0))\n    return result\nprint(find_adverb_position('I hope that you will have a great time in the game. I hope that you will have fun in the game. I hope you will have a great time in the game.'))\nprint(find_adverb_position('I hope that you will have a great time in the game. I hope that you will have fun in the game.'))\nprint(find_adverb_position('I hope you will have a great time in the game. I hope that you will have fun in the game.'))\nprint(find_adverb_position('I hope you will have a great time in the game. I hope that you will have fun in the game.'))\nprint(find_adverb_position('I hope that you will have a great time in the game. I hope that you will have fun in the game.'))\nprint(find_adverb_position('I hope that you will have a great time in the game. I hope that you will have fun in the game.'))\nprint(find_adverb_position('I hope that you will have a great time in the game. I hope that you will have fun in the game.'))\nprint(find_adverb_position('I hope that you will have a great time in the game. I hope that you will have fun in the game.'))\nprint(find_adverb_position('I hope that you will have a great time in the game. I hope that you will have fun in the game.'))\n",
        "num_ids": 388
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position = []\n    \n    # replace all special symbols and digits with spaces\n    text = re.sub(r'[^a-zA-Z0-9 ]','', text.lower())\n    # print(text)\n    \n    # split the sentence into words\n    words = text.split()\n    # print(words)\n    \n    # loop through each word\n    for i in range(len(words)):\n        # check if the word is an adverb\n        if words[i] in ['am', 'is', 'are', 'was', 'were', 'be', 'being', 'been', 'have', 'has', 'had', 'having']:\n            # print(words[i])\n            adverb_position.append(i+1)\n            \n    return adverb_position\n",
        "num_ids": 191
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position = []\n    adverb = re.findall('[a-zA-Z][a-zA-Z0-9]*[a-zA-Z]\\.', text)\n    if len(adverb) >= 1:\n        for i in range(0,len(adverb)):\n            position = text.find(adverb[i])\n            if position!= -1:\n                adverb_position.append([adverb[i], position])\n    return adverb_position\n",
        "num_ids": 123
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return [m.start() for m in re.finditer('a|an|the', text.lower())]\n",
        "num_ids": 29
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #find the position of adverb\n    #split the text into a list of words\n    words = text.split()\n    #iterate through the words\n    for index, word in enumerate(words):\n        if re.match(r'.*(?=\\ba\\w*\\b)', word):\n            print('The first adverb is', word)\n            print('It is at position', index)\n    return None\ndef common_words(text):\n    '''\n    Write a function to find the most common words in a text. The function should accept a text and print the most common words in the text along with their count.\n    '''\n    #first, split the text into words\n    words = text.split()\n    #create a dictionary to hold the words and their counts\n    word_counts = {}\n    #iterate through the words\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    #sort the dictionary based on the values\n    word_counts = dict(sorted(word_counts.items(), key=lambda item: item[1], reverse=True))\n    #iterate through the dictionary and print the words and their counts\n    for key, value in word_counts.items():\n        print(key, value)\n    return None\ndef odd_count(text):\n    '''\n    Write a function to count how many of the words in a text have odd number of letters.\n    '''\n    #first, split the text into words\n    words = text.split()\n    #create a dictionary to hold the words and their counts\n    word_counts = {}\n    #iterate through the words\n    for word in words:\n        #convert the word to all lowercase letters\n        word = word.lower()\n        #count the number of characters in the word\n        word_len = len(word)\n        #if the word length is odd, add it to the dictionary\n        if word_len % 2!= 0:\n            word_counts[word] = word_counts.get(word, 0) + 1\n    #sort the dictionary based on the values\n    word_counts = dict(sorted(word_counts.items(), key=lambda item: item[1], reverse=True))\n    #iterate through the dictionary and print the words and their counts\n    for key, value in word_counts.items():\n        print(key, value)\n    return None\ndef text_analysis(text):\n    '''\n    Write a function to count the number of lines, words and characters in a given text.\n    '''\n    #first, split the text into words\n    words = text.split()\n    #create a dictionary to hold the words and their counts\n    word_counts = {}\n    #iterate through the words\n    for word in words:\n        #convert the word to all lowercase letters\n        word = word.lower()\n        #count the number of characters in the word\n        word_len = len(word)\n        #if the word length is odd, add it to the dictionary\n        if word_len % 2!= 0:\n            word_counts[word] = word_counts.get(word, 0) + 1\n    #iterate through the dictionary and print the words and their counts\n    for key, value in word_counts.items():\n        print(key, value)\n    #count the number of characters in the text\n    text_len = len(text)\n    #count the number of lines in the text\n    text_lines = text.count('\\n') + 1\n    #print the results\n    print('The text has', text_lines, 'lines,', word_counts.get('line', 0), 'words, and', text_len, 'characters.')\n    return None\ndef most_common_characters(text):\n    '''\n    Write a function to find the most common characters in a text. The function should accept a text and print the most common character along with their count.\n    '''\n    #first, split the text into words\n    words = text.split()\n    #create a dictionary to hold the words and their counts\n    word_counts = {}\n    #iterate through the words\n    for word in words:\n        #convert the word to all lowercase letters\n        word = word.lower()\n        #count the number of characters in the word\n        word_len = len(word)\n        #if the word length is odd, add it to the dictionary\n        if word_len % 2!= 0:\n            for i in range(word_len):\n                char = word[i]\n                word_counts[char] = word_counts.get(char, 0) + 1\n    #iterate through the dictionary and print the words and their counts\n    for key, value in word_counts.items():\n        print(key, value)\n    return None\ndef acronym(text):\n    '''\n    Write a function to find the acronym for a text. The function should accept a text and print the acronym along with the full forms of the words. If a word has a prefix, the prefix should be used as the acronym.\n    '''\n    #first, split the text into words\n    words = text.split()\n    #create a dictionary to hold the words and their counts\n    word_counts = {}\n    #iterate through the words\n    for word in words:\n        #convert the word to all lowercase letters\n        word = word.lower()\n        #count the number of characters in the word\n        word_len = len(word)\n        #if the word length is odd, add it to the dictionary\n        if word_len % 2!= 0:\n            for i in range(word_len):\n                char = word[i]\n                word_counts[char] = word_counts.get(char, 0) + 1\n    #iterate through the dictionary and print the words and their counts\n    for key, value in word_counts.items():\n        print(key, value)\n    #iterate through the words and print their acronyms\n    for word in words:\n        #convert the word to all lowercase letters\n        word = word.lower()\n        #count the number of characters in the word\n        word_len = len(word)\n        #if the word length is odd, add it to the dictionary\n        if word_len % 2!= 0:\n            acronym = ''\n            for i in range(word_len):\n                acronym += word[i]\n            print(acronym, word)\n    return None\ndef count_words(text):\n    '''\n    Write a function to count the number of occurrences of each word in a text. The function should accept a text and print the number of occurrences of each word.\n    '''\n    #first, split the text into words\n    words = text.split()\n    #create a dictionary to hold the words and their counts\n    word_counts = {}\n    #iterate through the words\n    for word in words:\n        #convert the word to all lowercase letters\n        word = word.lower()\n        #count the number of characters in the word\n        word_len = len(word)\n        #if the word length is odd, add it to the dictionary\n        if word_len % 2!= 0:\n            word_counts[word] = word_counts.get(word, 0) + 1\n    #iterate through the dictionary and print the words and their counts\n    for key, value in word_counts.items():\n        print(key, value)\n    return None\ndef longest_word(text):\n    '''\n    Write a function to find the longest word in a text. The function should accept a text and print the longest word along with its length.\n    '''\n    #first, split the text into words\n    words = text.split()\n    #create a dictionary to hold the words and their counts\n    word_counts = {}\n    #iterate through the words\n    for word in words:\n        #convert the word to all lowercase letters\n        word = word.lower()\n        #count the number of characters in the word\n        word_len = len(word)\n        #if the word length is odd, add it to the dictionary\n        if word_len % 2!= 0:\n            word_counts[word] = word_counts.get(word, 0) + 1\n    #iterate through the dictionary and print the words and their counts\n    for key, value in word_counts.items():\n        print(ke",
        "num_ids": 180
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # list_adverb = re.findall(r'\\b\\w+ly', text)\n    list_adverb = re.findall(r'\\w*ly', text)\n    if list_adverb:\n        return [(word, i) for i, word in enumerate(list_adverb)]\n    else:\n        return 'No adverb found'\n",
        "num_ids": 89
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text == '':\n        return None\n    text = text.strip()\n    adverb_regex = re.compile(r'\\s[a-zA-Z]*ly')\n    match_iter = adverb_regex.finditer(text)\n    for match in match_iter:\n        start_pos = match.start()\n        end_pos = match.end()\n        if start_pos > 0:\n            previous_char = text[start_pos - 1]\n            if previous_char =='':\n                start_pos -= 1\n        return (start_pos, end_pos)\n    return None\n",
        "num_ids": 151
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #sentence = \"I was eating them all and there was nothing wrong with them, until I ate one that was too big, and his teeth came through it, and it was gone. My mother told me that it was the big one, but I was wrong. They were all good, except for the one that was too big. The biggest is gone now and I want to know where it was. They say it went down my throat, but I was off by one, and I'm not sure how to even count those. The others went away and I'm sad and you're sad because I'm mad. I guess it was on the other side of the mouth. I was being extra careful, but my mom told me to go away, so I'm just leaving them now. I'm just not having the same meal, but I'll be okay. I'm going to go now, and then I can eat them all again. I'm not going to have a fight with them because I don't know what's wrong with them. They're all good, and I'm eating them all again. It's good, so I'm eating them again. I just didn't know. I'm happy that I'm having the big one again. I don't know if I'm happy, because I'm not sure what's wrong with them. I just think they're all good. It's good, so I'm eating them again. I just don't know what's wrong with them. I just don't know.\"\n",
        "num_ids": 315
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    return 6 * (l ** 2)\n",
        "num_ids": 16
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    area = 6 * (l ** 2)\n    \n    return area\n    \ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder of a given radius and height.\n    '''\n    \n    area = 2 * math.pi * (r ** 2) + 2 * math.pi * r * h\n    \n    return area\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    \n    area = 4 * math.pi * (r ** 2)\n    \n    return area\n    \ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone with given radius and height.\n    '''\n    \n    area = math.pi * (r ** 2) + math.pi * r * h / 3\n    \n    return area\n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    \n    area = 2 * math.pi * r\n    \n    return area\n    \ndef surfacearea_triangle(b, h):\n    '''\n    Write a function to find the surface area of a triangle with a given base and height.\n    '''\n    \n    area = b * h / 2\n    \n    return area\n",
        "num_ids": 19
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6 * l)**2\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    print(\"The surface area of a cube of size %d is %d\" % (l, 6*l**2))\n",
        "num_ids": 30
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfarea = 6 * (l ** 2)\n    print(\"Surface Area of Cube of Size: \", l, \"is:\", surfarea)\n    return surfarea\n",
        "num_ids": 42
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = int(input(\"enter side:\"))\n    s = 6*a*a\n    print(\"surfacearea is:\",s)\n",
        "num_ids": 34
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6*(l**2)\n    return s\n",
        "num_ids": 17
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l * l)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area=6*(l*l)\n    return surface_area\n",
        "num_ids": 21
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6*l*l\n    return area\n",
        "num_ids": 15
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    #pass\n    return len([num for num in nums if num >= 0])/len(nums)\n    ",
        "num_ids": 31
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    #num of positive in array\n    positive_count = 0\n    for i in nums:\n        if i > 0:\n            positive_count += 1\n",
        "num_ids": 39
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = [num for num in nums if num > 0]\n    count = len(pos_nums)\n    return count / len(nums)\n",
        "num_ids": 42
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    print('\\n\\t\\t\\tPositive Count')\n    size = len(nums)\n    positive_count = 0\n    for i in range(0, size):\n        if nums[i] >= 0:\n            positive_count += 1\n    print(\"\\nPositive count is: \", positive_count)\n    print(\"Ratio of positive numbers is: \", positive_count/size)\n",
        "num_ids": 97
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    #check if length of list is 0\n    if len(nums) == 0:\n        return None\n    #assign initial counters\n    pos_count = 0\n    neg_count = 0\n    #for each value in list\n    for num in nums:\n        #check if value is positive\n        if num > 0:\n            pos_count += 1\n        #check if value is negative\n        elif num < 0:\n            neg_count += 1\n    #return ratio of positive to negative values\n    return pos_count / neg_count\n",
        "num_ids": 129
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n_positive = 0\n    for n in nums:\n        if n > 0:\n            n_positive += 1\n    return n_positive/len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n",
        "num_ids": 49
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # count = 0\n    # for num in nums:\n    #     if num > 0:\n    #         count += 1\n    # return count / len(nums)\n",
        "num_ids": 44
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_zeros = 0\n    num_positives = 0\n    for i in nums:\n        if i == 0:\n            num_zeros += 1\n        else:\n            num_positives += 1\n    return num_positives / num_zeros\ndef is_pow_2(x):\n    '''\n    Write a function that returns whether or not an integer is a power of 2.\n    '''\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    return (x & (x - 1) == 0)\ndef is_pow_2_sol(n):\n    '''\n    Write a function that returns whether or not an integer is a power of 2.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    return (n & (n - 1)) == 0\ndef is_pow_2_sol2(n):\n    '''\n    Write a function that returns whether or not an integer is a power of 2.\n    '''\n    if n < 0:\n        return False\n    return n & (n - 1) == 0\ndef is_pow_2_sol3(n):\n    '''\n    Write a function that returns whether or not an integer is a power of 2.\n    '''\n    return n > 0 and n & (n - 1) == 0\ndef is_pow_2_sol4(n):\n    '''\n    Write a function that returns whether or not an integer is a power of 2.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    return n % 2 == 0\ndef has_duplicate(nums):\n    '''\n    Write a function that, given an array of integers, returns whether or not there is a duplicate number in the array.\n    '''\n    for i in nums:\n        if nums.count(i) > 1:\n            return True\n    return False\ndef has_duplicate_sol(nums):\n    '''\n    Write a function that, given an array of integers, returns whether or not there is a duplicate number in the array.\n    '''\n    seen = set()\n    for i in nums:\n        if i in seen:\n            return True\n        seen.add(i)\n    return False\ndef has_duplicate_sol2(nums):\n    '''\n    Write a function that, given an array of integers, returns whether or not there is a duplicate number in the array.\n    '''\n    seen = set()\n    for i in nums:\n        if i in seen:\n            return True\n        seen.add(i)\n    return False\ndef has_duplicate_sol3(nums):\n    '''\n    Write a function that, given an array of integers, returns whether or not there is a duplicate number in the array.\n    '''\n    seen = set()\n    for i in nums:\n        if i in seen:\n            return True\n        seen.add(i)\n    return False\ndef has_duplicate_sol4(nums):\n    '''\n    Write a function that, given an array of integers, returns whether or not there is a duplicate number in the array.\n    '''\n    seen = set()\n    for i in nums:\n        if i not in seen:\n            seen.add(i)\n        else:\n            return True\n    return False\ndef has_duplicate_sol5(nums):\n    '''\n    Write a function that, given an array of integers, returns whether or not there is a duplicate number in the array.\n    '''\n    return len(nums)!= len(set(nums))\ndef has_duplicate_sol6(nums):\n    '''\n    Write a function that, given an array of integers, returns whether or not there is a duplicate number in the array.\n    '''\n    return len(nums)!= len(set(nums))\ndef has_duplicate_sol7(nums):\n    '''\n    Write a function that, given an array of integers, returns whether or not there is a duplicate number in the array.\n    '''\n    nums = set(nums)\n    return (len(nums)!= len(nums))\ndef is_substring(string, sub_string):\n    '''\n    Write a function that, given two strings, returns whether or not one string is a substring of the other string.\n    '''\n    return sub_string in string\ndef is_substring_sol(string, sub_string):\n    '''\n    Write a function that, given two strings, returns whether or not one string is a substring of the other string.\n    '''\n    return string.find(sub_string)!= -1\ndef is_substring_sol2(string, sub_string):\n    '''\n    Write a function that, given two strings, returns whether or not one string is a substring of the other string.\n    '''\n    if len(string) < len(sub_string):\n        return False\n    for i in range(0, len(string)):\n        if string[i:i + len(sub_string)] == sub_string:\n            return True\n    return False\ndef is_substring_sol3(string, sub_string):\n    '''\n    Write a function that, given two strings, returns whether or not one string is a substring of the other string.\n    '''\n    if len(string) < len(sub_string):\n        return False\n    return sub_string in string\ndef is_substring_sol4(string, sub_string):\n    '''\n    Write a function that, given two strings, returns whether or not one string is a substring of the other string.\n    '''\n    return sub_string in string\ndef is_substring_sol5(string, sub_string):\n    '''\n    Write a function that, given two strings, returns whether or not one string is a substring of the other string.\n    '''\n    return sub_string in string\ndef is_substring_sol6(string, sub_string):\n    '''\n    Write a function that, given two strings, returns whether or not one string is a substring of the other string.\n    '''\n    if len(string) < len(sub_string):\n        return False\n    return any(sub_string == string[i:i + len(sub_string)] for i in range(len(string) - len(sub_string) + 1))\ndef find_index(string, sub_string):\n    '''\n    Write a function that, given two strings, returns the index of the first location where the second string is a substring of the first string.\n    '''\n    if len(string) < len(sub_string):\n        return -1\n    for i in range(0, len(string)):\n        if string[i:i + len(sub_string)] == sub_string:\n            return i\n    return -1\ndef find_index_sol(string, sub_string):\n    '''\n    Write a function that, given two strings, returns the index of the first location where the second string is a substring of the first string.\n    '''\n    if len(string) < len(sub_string):\n        return -1\n    for i in range(0, len(string)):\n        if string[i:i + len(sub_string)] == sub_string:\n            return i\n    return -1\ndef find_index_sol2(string, sub_string):\n    '''\n    Write a function that, given two strings, returns the index of the first location where the second string is a substring of the first string.\n    '''\n    if len(string) < len(sub_string):\n        return -1\n    return string.find(sub_string)\ndef find_index_sol3(string, sub_string):\n    '''\n    Write a function that, given two strings, returns the index of the first location where the second string is a substring of the first string.\n    '''\n    if len(string) < len(sub_string):\n        return -1\n    return string.find(sub_string)\ndef find_index_sol4(string, sub_string):\n    '''\n    Write a function that, given two strings, returns the index of the first location where the second string is a substring of the first string.\n    '''\n    return string.find(sub_string)\nde",
        "num_ids": 14
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list_num = []\n    for i in list1:\n        if i < 0:\n            list_num.append(i)\n    return max(list_num)\n",
        "num_ids": 43
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    result = 0\n    for x in list1:\n        if x < 0 and x > result:\n            result = x\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    large = []\n    for num in list1:\n        if num < 0:\n            large.append(num)\n    if not large:\n        return(\"no negative number found\")\n    large.sort()\n    return(large[-1])\n",
        "num_ids": 60
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list_max = 0\n    for i in list1: \n        if i < 0: \n            list_max = i\n    return list_max\ndef common_elements(list1,list2): \n    '''\n    Write a python function to find the common elements between two lists\n    '''\n    set1 = set(list1) \n    set2 = set(list2) \n    set3 = set1.intersection(set2) \n    return set3\ndef common_elements_list(list1,list2): \n    '''\n    Write a python function to find the common elements between two lists\n    '''\n    list_output = []\n    for element in list1:\n        if element in list2:\n            list_output.append(element)\n    return list_output\ndef smallest_element(list1): \n    '''\n    Write a python function to find the smallest element of the list\n    '''\n    list_min = list1[0]\n    for i in list1: \n        if i < list_min: \n            list_min = i\n    return list_min\ndef smallest_element_index(list1): \n    '''\n    Write a python function to find the smallest element of the list\n    '''\n    list_min = list1[0]\n    list_min_index = 0\n    for i in range(len(list1)): \n        if list1[i] < list_min: \n            list_min = list1[i]\n            list_min_index = i\n    return list_min_index\ndef list_manipulation(list1,list2): \n    '''\n    Write a python function to perform list manipulations\n    '''\n    list3 = list1 + list2\n    list4 = list1 * 2\n    return list3, list4\ndef arithmetic_operations(list1): \n    '''\n    Write a python function to perform arithmetic operations on list elements\n    '''\n    list_add = 0\n    for i in list1:\n        list_add = list_add + i\n    list_mul = 1\n    for i in list1:\n        list_mul = list_mul * i\n    return list_add, list_mul\ndef factorial(number): \n    '''\n    Write a python function to calculate the factorial of a number\n    '''\n    fact = 1\n    if number == 0: \n        return fact\n    else: \n        for i in range(1,number+1): \n            fact = fact * i\n        return fact\ndef triangular_number(number): \n    '''\n    Write a python function to calculate the triangular number\n    '''\n    tri = 0\n    for i in range(1,number+1): \n        tri = tri + i\n    return tri\ndef binary_search(sorted_list,item): \n    '''\n    Write a python function to search an element in a sorted list using binary search\n    '''\n    first = 0\n    last = len(sorted_list)-1\n    index = -1\n    while ( first <= last) and (index == -1): \n        mid = (first+last)//2\n        if sorted_list[mid] == item : \n            index = mid \n        else: \n            if item < sorted_list[mid]: \n                last = mid - 1\n            else: \n                first = mid + 1\n    return index \ndef odd_even(number): \n    '''\n    Write a python function to find if a number is odd or even\n    '''\n    if number % 2 == 0: \n        return \"Number is Even\"\n    else: \n        return \"Number is Odd\"\ndef string_slicing(str1): \n    '''\n    Write a python function to slice a string using string slicing\n    '''\n    str2 = str1[0:6]\n    return str2\ndef find_max(list1): \n    '''\n    Write a python function to find the maximum number from the given list\n    '''\n    list_max = list1[0]\n    for i in list1: \n        if i > list_max: \n            list_max = i\n    return list_max\ndef find_min(list1): \n    '''\n    Write a python function to find the minimum number from the given list\n    '''\n    list_min = list1[0]\n    for i in list1: \n        if i < list_min: \n            list_min = i\n    return list_min\ndef binary_search_recursion(sorted_list,item,first,last): \n    '''\n    Write a python function to search an element in a sorted list using binary search recursion\n    '''\n    if last >= first: \n        mid = (first + last)//2\n        if sorted_list[mid] == item : \n            return mid \n        elif sorted_list[mid] > item: \n            return binary_search_recursion(sorted_list,item,first,mid-1)\n        else: \n            return binary_search_recursion(sorted_list,item,mid+1,last)\n    else: \n        return -1\ndef bubble_sort(list1): \n    '''\n    Write a python function to sort a list using bubble sort\n    '''\n    for i in range(len(list1)-1,0,-1): \n        for j in range(i): \n            if list1[j] > list1[j+1]: \n                temp = list1[j]\n                list1[j] = list1[j+1]\n                list1[j+1] = temp\n    return list1\ndef selection_sort(list1): \n    '''\n    Write a python function to sort a list using selection sort\n    '''\n    for i in range(len(list1)): \n        min_idx = i \n        for j in range(i+1,len(list1)): \n            if list1[min_idx] > list1[j]: \n                min_idx = j \n        list1[i],list1[min_idx] = list1[min_idx],list1[i]\n    return list1\ndef insertion_sort(list1): \n    '''\n    Write a python function to sort a list using insertion sort\n    '''\n    for i in range(1,len(list1)): \n        j = i \n        while j > 0 and list1[j-1] > list1[j]: \n            list1[j],list1[j-1] = list1[j-1],list1[j] \n            j -= 1\n    return list1\ndef merge(list1,list2): \n    '''\n    Write a python function to sort two lists using merge sort\n    '''\n    new_list = []\n    i,j = 0,0\n    while i < len(list1) and j < len(list2): \n        if list1[i] < list2[j]: \n            new_list.append(list1[i])\n            i += 1\n        else: \n            new_list.append(list2[j])\n            j += 1\n    if i < len(list1): \n        for k in range(i,len(list1)): \n            new_list.append(list1[k])\n    if j < len(list2): \n        for k in range(j,len(list2)): \n            new_list.append(list2[k])\n    return new_list\ndef merge_sort(list1): \n    '''\n    Write a python function to sort a list using merge sort\n    '''\n    if len(list1) <= 1: \n        return list1\n    else: \n        mid = len(list1)//2\n        left_list = list1[:mid]\n        right_list = list1[mid:]\n        left_list = merge_sort(left_list)\n        right_list = merge_sort(right_list)\n        return merge(left_list,right_list)\ndef counting_sort(list1): \n    '''\n    Write a python function to sort a list using counting sort\n    '''\n    max_val = int(max(list1))\n    min_val = int(min(list1))\n    arr = [0]*(max_val ",
        "num_ids": 40
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) < 1:\n        return \"empty list\"\n    max = 0\n    for i in list1:\n        if i < max:\n            max = i\n    return max\n",
        "num_ids": 49
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0\n    for i in list1:\n        if i<0 and i>max:\n            max=i\n    return max\nlist1 = [10, -21, -34, -67, -12]\nprint(\"the largest negative number in the list is:\",largest_neg(list1))\n",
        "num_ids": 74
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # base case:\n    if len(list1) == 0:\n        return -1\n    \n    # assume the first item in the list is the largest negatie number,\n    # and we'll check the rest of the items in the list\n    largest_neg_num = list1[0]\n",
        "num_ids": 72
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg_num = None\n    for x in list1:\n        if x < 0 and (not max_neg_num):\n            max_neg_num = x\n        elif x < 0 and x > max_neg_num:\n            max_neg_num = x\n    return max_neg_num\n",
        "num_ids": 76
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    try:\n        largest_neg_num=min(list1)\n        return largest_neg_num\n    except ValueError:\n        print('No Negative Number Found!')\ndef smallest_neg(list1):\n    '''\n    Write a python function to find the smallest negative number from the given list.\n    '''\n    try:\n        smallest_neg_num=max(list1)\n        return smallest_neg_num\n    except ValueError:\n        print('No Negative Number Found!')\ndef smallest_num(list1):\n    '''\n    Write a python function to find the smallest number from the given list.\n    '''\n    try:\n        smallest_num=min(list1)\n        return smallest_num\n    except ValueError:\n        print('No Negative Number Found!')\ndef sum_num(list1):\n    '''\n    Write a python function to find the sum of all the numbers from the given list.\n    '''\n    try:\n        sum_num=sum(list1)\n        return sum_num\n    except ValueError:\n        print('No Negative Number Found!')\ndef average_num(list1):\n    '''\n    Write a python function to find the average of all the numbers from the given list.\n    '''\n    try:\n        average_num=sum(list1)/len(list1)\n        return average_num\n    except ValueError:\n        print('No Negative Number Found!')\ndef odd_even(list1):\n    '''\n    Write a python function to find the sum of all the even numbers from the given list.\n    '''\n    try:\n        odd_even=[]\n        for i in list1:\n            if i%2==0:\n                odd_even.append(i)\n        return odd_even\n    except ValueError:\n        print('No Negative Number Found!')\ndef even_odd(list1):\n    '''\n    Write a python function to find the sum of all the odd numbers from the given list.\n    '''\n    try:\n        even_odd=[]\n        for i in list1:\n            if i%2!=0:\n                even_odd.append(i)\n        return even_odd\n    except ValueError:\n        print('No Negative Number Found!')\ndef num_divide_5(list1):\n    '''\n    Write a python function to find the sum of all the numbers from the given list that is divisible by 5.\n    '''\n    try:\n        num_divide_5=[]\n        for i in list1:\n            if i%5==0:\n                num_divide_5.append(i)\n        return num_divide_5\n    except ValueError:\n        print('No Negative Number Found!')\ndef list_of_num(list1):\n    '''\n    Write a python function to find the list of numbers which are divisible by 5 and 7,\n    from the given list.\n    '''\n    try:\n        list_of_num=[]\n        for i in list1:\n            if i%5==0 and i%7==0:\n                list_of_num.append(i)\n        return list_of_num\n    except ValueError:\n        print('No Negative Number Found!')\ndef list_of_num_with_sum(list1,sum_num):\n    '''\n    Write a python function to find the list of numbers which are divisible by 5 and 7,\n    from the given list, with the sum of the numbers from the list equaling to the given sum.\n    '''\n    try:\n        list_of_num_with_sum=[]\n        for i in list1:\n            if i%5==0 and i%7==0 and i==sum_num:\n                list_of_num_with_sum.append(i)\n        return list_of_num_with_sum\n    except ValueError:\n        print('No Negative Number Found!')\ndef list_of_num_with_sum_greater_than(list1,sum_num):\n    '''\n    Write a python function to find the list of numbers which are divisible by 5 and 7,\n    from the given list, with the sum of the numbers from the list greater than the given sum.\n    '''\n    try:\n        list_of_num_with_sum_greater_than=[]\n        for i in list1:\n            if i%5==0 and i%7==0 and i>sum_num:\n                list_of_num_with_sum_greater_than.append(i)\n        return list_of_num_with_sum_greater_than\n    except ValueError:\n        print('No Negative Number Found!')\ndef list_of_num_with_sum_less_than(list1,sum_num):\n    '''\n    Write a python function to find the list of numbers which are divisible by 5 and 7,\n    from the given list, with the sum of the numbers from the list less than the given sum.\n    '''\n    try:\n        list_of_num_with_sum_less_than=[]\n        for i in list1:\n            if i%5==0 and i%7==0 and i<sum_num:\n                list_of_num_with_sum_less_than.append(i)\n        return list_of_num_with_sum_less_than\n    except ValueError:\n        print('No Negative Number Found!')\ndef main():\n    list1=[]\n    list1=list(map(int,input().split()))\n    largest_neg_num=largest_neg(list1)\n    smallest_neg_num=smallest_neg(list1)\n    smallest_num=smallest_num(list1)\n    sum_num=sum_num(list1)\n    average_num=average_num(list1)\n    odd_even=odd_even(list1)\n    even_odd=even_odd(list1)\n    num_divide_5=num_divide_5(list1)\n    list_of_num=list_of_num(list1)\n    list_of_num_with_sum=list_of_num_with_sum(list1,sum_num)\n    list_of_num_with_sum_greater_than=list_of_num_with_sum_greater_than(list1,sum_num)\n    list_of_num_with_sum_less_than=list_of_num_with_sum_less_than(list1,sum_num)\n    print('The Largest Negative Number from the given list is {}'.format(largest_neg_num))\n    print('The Smallest Negative Number from the given list is {}'.format(smallest_neg_num))\n    print('The Smallest Number from the given list is {}'.format(smallest_num))\n    print('The Sum of all the Numbers from the given list is {}'.format(sum_num))\n    print('The Average of all the Numbers from the given list is {}'.format(average_num))\n    print('The Sum of all the Odd Numbers from the given list is {}'.format(sum(odd_even)))\n    print('The Sum of all the Even Numbers from the given list is {}'.format(sum(even_odd)))\n    print('The Sum of all the Numbers from the given list divisible by 5 is {}'.format(sum(num_divide_5)))\n    print('The List of Numbers from the given list divisible by 5 and 7 is {}'.format(num_divide_5))\n    print('The List of Numbers from the given list with the Sum of the Numbers from the list equaling to the given sum {}'.format(list_of_num_with_sum))\n    print('The List of Numbers from the given list with the Sum of the Numbers from the list greater than the given sum {}'.format(list_of_num_with_sum_greater_than))\n    print('The List of Numbers from the given list with the Sum of the Numbers from the list less than the given sum {}'.format(list_of_num_with_sum_less_than))\nmain()",
        "num_ids": 734
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return None\n    elif len(list1) == 1:\n        return None if list1[0] < 0 else list1[0]\n    else:\n        max_neg = list1[0]\n        for num in list1:\n            if num < 0:\n                max_neg = max(max_neg, num)\n        return None if max_neg < 0 else max_neg\n",
        "num_ids": 105
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [i[K:] for i in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for element in test_list:\n        while len(element) > K:\n            element = element[:K]\n    return test_list\n",
        "num_ids": 36
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tuple in test_list:\n        new_tuple = tuple[0:K]\n        new_list.append(new_tuple)\n    return new_list\n",
        "num_ids": 50
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tuple_list in test_list:\n        if len(tuple_list) < K:\n            continue\n        else:\n            tuple_list = tuple_list[:K]\n    return test_list\n",
        "num_ids": 53
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple([x[i] for i in range(K)]) for x in test_list]\n",
        "num_ids": 28
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if K == 0:\n        return [tuple(l) for l in test_list]\n    return [tuple(l[:K]) for l in test_list]\n",
        "num_ids": 44
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: tuple(x[:K]), test_list))\n",
        "num_ids": 23
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        trim_t = tuple(t[:K])\n        result.append(trim_t)\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple[K:] for tuple in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # new_list = []\n    # for tu in test_list:\n    #     if len(tu) <= K:\n    #         new_list.append(tu)\n    # return new_list\n",
        "num_ids": 51
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(tup1[i] * tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 33
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup3 = ()\n    for i in range(len(test_tup1)):\n        test_tup3 += ((test_tup1[i] * test_tup2[i]),)\n    return test_tup3\n",
        "num_ids": 62
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] * test_tup2[i], )\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([i * j for i, j in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([i*j for i, j in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [test_tup1[index]*test_tup2[index] for index in range(len(test_tup1))]\n",
        "num_ids": 37
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])\n",
        "num_ids": 38
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([(test_tup1[i] * test_tup2[i]) for i in range(len(test_tup1))])\n",
        "num_ids": 39
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup= ()\n    for i in range(len(test_tup1)):\n        result_tup+= (test_tup1[i]*test_tup2[i],)\n",
        "num_ids": 52
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #type(test_tup1)\n    #type(test_tup2)\n    \n    if len(test_tup1) == len(test_tup2):\n        #print('length of tuple 1 is ',len(test_tup1))\n        #print('length of tuple 2 is ',len(test_tup2))\n        #print('tuple 1 : ',test_tup1)\n        #print('tuple 2 : ',test_tup2)\n        \n        tup = ()\n        for i in range(len(test_tup1)):\n            tup = tup + (test_tup1[i] * test_tup2[i])\n        #print('tuple 1 * tuple 2 : ',tup)\n        return tup\n    else:\n        print('length of tuple 1 is ',len(test_tup1))\n        print('length of tuple 2 is ',len(test_tup2))\n        print('Tuple 1 : ',test_tup1)\n        print('Tuple 2 : ',test_tup2)\n        print('Multiplication of tuples is not possible!')\n        print('Length of tuple 1 is not equal to length of tuple 2!')\n",
        "num_ids": 290
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if type(lst)==list and type(tup)==tuple:\n        print(\"Tupla: {}\".format(tup))\n        for i in lst:\n            count=0\n            for j in range(len(tup)):\n                if i == tup[j]:\n                    count+=1\n            print(\"{} occurs {} time(s).\".format(i, count))\n    else:\n        print(\"Invalid Input\")\n",
        "num_ids": 108
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst) \n",
        "num_ids": 11
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for ele in lst:\n        if (ele in tup):\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occur_d = {}\n    for x in tup: \n        if x in occur_d: \n            occur_d[x]+=1\n        else: \n            occur_d[x]=1\n    for x in lst: \n        if x in occur_d: \n            print(x,\"=\",occur_d[x])\n        else: \n            print(\"No\",x,\"in tuple\") \n",
        "num_ids": 106
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    return count \n",
        "num_ids": 17
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = Counter(lst) \n    for i in tup: \n        if i in count_lst: \n            print (str(i) + \": \" + str(count_lst[i])) \n        else: \n            print (\"0: 0\") \n",
        "num_ids": 73
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    result = [0]*len(lst) \n    for t in tup: \n        for i in range(len(lst)): \n            if lst[i] == t: \n                result[i] = result[i] + 1\n    return result \n",
        "num_ids": 69
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dct = Counter(lst)\n    print(dct)\n    return dct[tup]\n",
        "num_ids": 28
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for elem in tup: \n        if elem in lst: \n            return lst.count(elem) \n        else:\n            return 0\n    return -1\n",
        "num_ids": 47
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # tup
        "num_ids": 2000
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Create a list to store the cubed elements.\n    cubed_nums = []\n",
        "num_ids": 25
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for n in nums:\n        cubes.append(n**3)\n    return cubes\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print(list(map(lambda x: x**3, nums)))\n",
        "num_ids": 20
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for x in nums:\n        print(x**3)\n    return nums\n",
        "num_ids": 23
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        new_list.append(num ** 3)\n    return new_list\n",
        "num_ids": 35
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for x in nums:\n        print(x**3)\n    return\ncube_nums([1,2,3,4,5])\n",
        "num_ids": 37
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = []\n    for num in nums:\n        cube.append(num ** 3)\n    return cube\n",
        "num_ids": 29
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [number ** 3 for number in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print(nums)\n    print([num**3 for num in nums])\n",
        "num_ids": 22
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    while n!=0:\n        sum=sum+(n%10)*n\n        n=n//10\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n * (3 * n - 1) / 2\n",
        "num_ids": 16
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    n=int(n)\n    perrin_sum=0\n    for i in range(1, n+1):\n        if i==1 or i==2:\n            perrin_sum+=i\n            continue\n        else:\n            perrin_sum+=i+(i-1)\n    return perrin_sum\n",
        "num_ids": 77
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    return cal_sum(n-1)+cal_sum(n-2)\nprint(cal_sum(5))\n",
        "num_ids": 64
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    l = []\n    for i in range(1,n+1):\n        l.append(perrin(i))\n    return sum(l)\n",
        "num_ids": 38
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    ans=0\n    for i in range(n):\n        ans+=i**2\n    return ans\n",
        "num_ids": 27
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    # if n is even\n    if n%2 == 0:\n        return (cal_sum(n/2)**2 + 2*cal_sum(n/2))\n    \n    # if n is odd\n    else:\n        return (cal_sum(n-1)*3 + cal_sum(n-1) + 1)\n",
        "num_ids": 83
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = 1\n    s = 0\n",
        "num_ids": 13
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return n + cal_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return cal_sum(n-1) + (2*cal_sum(n-2))\n    \ndef print_perrin():\n    n = input(\"Enter the number of Perrin numbers you want: \")\n    print('Perrin numbers in the range of [0, n]:')\n    for i in range(0, n+1):\n        print(cal_sum(i))\n",
        "num_ids": 119
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = []\n    for i in range(len(l)):\n        if len(l[i]) == l:\n            s.append(l[i])\n    return s\n",
        "num_ids": 45
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) < l:\n        return str\n    return str[:l]\n",
        "num_ids": 24
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    len_str = len(str)\n    if l == len_str:\n        return [str]\n    if l == 1:\n        return [str[len_str-1]]\n    split_str = str.split(sep=str[len_str-l:len_str], maxsplit=1)\n    return [split_str[0]] + extract_string(split_str[1], l-1)\n",
        "num_ids": 101
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # return ''.join([x[0] for x in l[:l.index('\\n')]])\n    # return ''.join(x[0] for x in l if x[0]!= '\\n')\n    return ''.join([x[0] for x in l[l.index('\\n')+1:]])\n",
        "num_ids": 84
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) < l:\n        return False\n    else:\n        return str[0:l]\n",
        "num_ids": 29
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[l:] for x in str]\n",
        "num_ids": 15
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    for i in range(len(str)):\n        if len(str[i]) == l:\n            output.append(str[i])\n    return output\n",
        "num_ids": 45
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    n = 0\n    while n < l:\n        n = n + 1\n        str = str.strip()\n        string = str[:l]\n        str = str[l:]\n        return string\n",
        "num_ids": 50
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in l:\n        extracted_strings.append(i[:l])\n    return extracted_strings\n",
        "num_ids": 37
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \",\"\")\n    return text1\n",
        "num_ids": 20
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=text1.replace(\" \",\"\")\n    return text2\n",
        "num_ids": 20
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #return re.sub(r'\\s+', '', text)\n    return re.sub(r'\\s+', '', text1)\n",
        "num_ids": 38
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'[\\s]+','',text1)\n    return text1\n",
        "num_ids": 27
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n",
        "num_ids": 13
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = \"\".join(text1.split())\n    print(text1)\n",
        "num_ids": 23
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #remove leading and trailing spaces\n    text1 = text1.strip()\n",
        "num_ids": 20
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.replace(' ','')\n    return text\n",
        "num_ids": 18
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\n",
        "num_ids": 17
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 =''.join(text1.split())\n    return text1\n",
        "num_ids": 20
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    #return actual_cost - sale_amount\n    \n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n    \n    \n    \ndef loss_amount2(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    #return actual_cost - sale_amount\n    \n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n        \n    \n    ",
        "num_ids": 51
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0\n",
        "num_ids": 40
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    if loss_amount < 0:\n        return 0\n    else:\n        return loss_amount\n",
        "num_ids": 38
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    return loss if loss < 0 else 0\n",
        "num_ids": 23
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return actual_cost-sale_amount\n    return 0\n",
        "num_ids": 27
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount :\n        return actual_cost - sale_amount\n    else :\n        return 0",
        "num_ids": 30
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    #factors = []\n    #sum = 0\n    #sqrt = math.sqrt(n)\n    #for i in range(1, int(sqrt) + 1) :\n    #    if n % i == 0 :\n    #        factors.append(i)\n    #        factors.append(n / i)\n    #for factor in factors :\n    #    if factor % 2 == 0 :\n    #        sum += factor\n    #return sum\n",
        "num_ids": 115
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if (n%i == 0) :\n            if (i%2 == 0):\n                sum += i\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,(int)(math.sqrt(n))+1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                sum = sum + i \n            else : \n                sum = sum + (i + n/i) \n    return sum\n",
        "num_ids": 86
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2, n) :\n        if n % i == 0 and i % 2 == 0 :\n            s += i\n    return s\n",
        "num_ids": 43
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum = sum + i + n//i\n            else:\n                sum = sum + n//i\n    return sum\n",
        "num_ids": 74
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1,n//2+1):\n        if n % i == 0 :\n            s += i\n    return s\n",
        "num_ids": 40
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    # Return the sum of all factors of n \n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            \n            # If factor is a perfect square \n            if (i * i == n) : \n                sum += i \n            else : # Otherwise sum both \n                sum += i \n                sum += n / i \n    return sum \n",
        "num_ids": 113
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n) : \n        if (n%i == 0 and i%2 == 0) : \n            sum = sum + i\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = [] \n    i = 2\n    while (i <= int(math.sqrt(n))): \n        if (n % i == 0): \n            if (i == (n / i)): \n                factors.append(i) \n            else: \n                factors.append(i) \n                factors.append(int(n / i)) \n        i = i + 1 \n    return factors \ndef isPerfect(n) : \n    '''\n    Write a python function to check if a number is perfect or not. \n    '''\n    sum = 0\n    for i in range(1, n): \n        if (n % i == 0): \n            sum = sum + i \n    return (sum == n) \ndef noofdivisors(n) : \n    '''\n    Write a python function to find the number of divisors of a number. \n    '''\n    cnt = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if (n % i == 0): \n            if (n / i == i): \n                cnt = cnt + 1\n            else: \n                cnt = cnt + 2\n    return cnt \ndef sumofDivisors(n) : \n    '''\n    Write a python function to find the sum of divisors of a number. \n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if (n % i == 0): \n            if (n / i == i): \n                sum = sum + i \n            else: \n                sum = sum + i \n                sum = sum + (n / i) \n    return sum \ndef isPrime(n) : \n    '''\n    Write a python function to check if a number is prime or not. \n    '''\n    return (sumofFactors(n) == [1, n]) \ndef isPalindrome(n) : \n    '''\n    Write a python function to check if a number is palindrome or not. \n    '''\n    return str(n) == str(n)[::-1] \ndef noofdigits(n) : \n    '''\n    Write a python function to check the number of digits of a number. \n    '''\n    return int(math.log10(n) + 1) \ndef isArmstrong(n) : \n    '''\n    Write a python function to check if a number is armstrong or not. \n    '''\n    sum = 0\n    temp = n \n    i = noofdigits(n)\n    while (temp > 0): \n        rem = temp % 10\n        sum = sum + (rem ** i)\n        temp = temp // 10\n    return sum == n \ndef sumofpowers(n) : \n    '''\n    Write a python function to check the sum of power of each digit of a number. \n    '''\n    sum = 0\n    temp = n \n    while (temp > 0): \n        rem = temp % 10\n        sum = sum + (rem ** noofdigits(n))\n        temp = temp // 10\n    return sum \ndef isPower(n) : \n    '''\n    Write a python function to check if a number is power of another number. \n    '''\n    m = 2\n    while (m < int(math.sqrt(n))): \n        if (n % m == 0): \n            return (n / m == m) \n        m = m + 1\n    return n == 1 \ndef isPalindrome(n) : \n    '''\n    Write a python function to check if a number is palindrome or not. \n    '''\n    return str(n) == str(n)[::-1] \ndef nextpalindrome(n) : \n    '''\n    Write a python function to generate the next palindrome number. \n    '''\n    if (n > 10): \n        n = n + 1\n        while (not isPalindrome(n)): \n            n = n + 1\n    else: \n        n = n + 1\n        while (not isPalindrome(n)): \n            n = n + 1\n    return n \ndef fibonacci(n) : \n    '''\n    Write a python function to print the nth term of the fibonacci series. \n    '''\n    if (n == 0) : \n        return 0\n    elif (n == 1 or n == 2) : \n        return 1\n    else : \n        return fibonacci(n - 1) + fibonacci(n - 2) \ndef fibonacci2(n) : \n    '''\n    Write a python function to print the nth term of the fibonacci series. \n    '''\n    a = 0\n    b = 1\n    if (n == 0) : \n        return a \n    elif (n == 1 or n == 2) : \n        return b\n    else : \n        for i in range(2, n) : \n            c = a + b \n            a = b \n            b = c \n        return b \ndef series(n) : \n    '''\n    Write a python function to print the series upto nth term. \n    '''\n    a = 0\n    b = 1\n    if (n == 0) : \n        return 0 \n    elif (n == 1 or n == 2) : \n        return b \n    else : \n        for i in range(2, n) : \n            c = a + b \n            a = b \n            b = c \n        return b \ndef numofsums(n) : \n    '''\n    Write a python function to print the number of ways to sum n numbers. \n    '''\n    return (numofsums(n - 1) + numofsums(n - 2)) \ndef numofsums2(n) : \n    '''\n    Write a python function to print the number of ways to sum n numbers. \n    '''\n    if (n == 0 or n == 1) : \n        return 1\n    elif (n == 2) : \n        return 2\n    else : \n        return numofsums2(n - 1) + numofsums2(n - 2) \ndef numofsums3(n) : \n    '''\n    Write a python function to print the number of ways to sum n numbers. \n    '''\n    a = [1] * n \n    for i in range(2, n) : \n        a[i] = a[i - 1] + a[i - 2] \n    return a[-1] \ndef primefactors(n) : \n    '''\n    Write a python function to print the prime factors of a number. \n    '''\n    factors = [] \n    i = 2\n    while (i < int(math.sqrt(n)) + 1): \n        if (n % i == 0): \n            if (n / i == i): \n                factors.append(i) \n            else: \n                factors.append(i) \n                factors.append(int(n / i)) \n        i = i + 1 \n    return factors \ndef primefactors2(n) : \n    '''\n    Write a python function to print the prime factors of a number. \n    '''\n    factors = [] \n    i = 2\n    while (i < int(math.sqrt(n)) + 1): \n        if (n % i == 0): \n            if (n / i == i): \n                factors.append(i) \n            else: \n                factors.append(i) \n                factors.append(int(n / i)) \n        i = i + 1 \n    return factors \ndef numofsums4(n) : \n    '''\n    Write a python function to print the number of ways to sum n numbers. \n    '''\n    fact = primefactors(n) \n    nofFactors = [1] * len(fact) \n    for i in range(1, len(fact)) : \n        nofFactors[i] = nofFactors[",
        "num_ids": 58
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 1\n    while i < n :\n        if n % i == 0 and n / i == i :\n            sum += i\n        i += 1\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # result = re.findall(r'\\s[aeiou]{2,}', text)\n    # print(result)\n    # print(len(result))\n    # print(result[0])\n    print(re.findall(r'\\b[aeiou]{2,}\\b', text))\n",
        "num_ids": 79
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #Pass #Write code here\n    my_list = ['cat', 'dog', 'bee']\n    my_string = \"I like the cat but I like dogs too\"\n    for i in my_list:\n        if re.search(i,my_string):\n            print (i)\n",
        "num_ids": 70
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if 'z' in text:\n        return 'z is in {}'.format(text)\n    return 'z not in {}'.format(text)\n",
        "num_ids": 37
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # r = re.compile(r'[0-9]')\n    # r = re.compile(r'\\w*z\\w*')\n    r = re.compile(r'\\w*z\\w*', re.IGNORECASE)\n    res = re.findall(r, text)\n    if res == []:\n        return \"No match found\"\n    else:\n        return \"The word is {}\".format(res)\n",
        "num_ids": 111
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search(r'\\w*z\\w*',text):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\w*z\\w*')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z', text)\ndef text_match_wordz2(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('.*z.*', text)\n",
        "num_ids": 16
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('z', text):\n        return True\n",
        "num_ids": 17
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'\\b[A-Za-z]*[A-Za-z]z\\b'\n    if re.search(regex, text, re.I):\n        return \"Match Found\"\n    else:\n        return \"Match Not Found\"\n",
        "num_ids": 67
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_number = int(input(\"Enter month number: \"))\n    if month_number > 12 or month_number < 1:\n        print(\"Number of days are not defined for this month.\")\n        print(\"We have only 12 months.\")\n        print(\"Try again with number between 1 and 12.\")\n    elif monthnum2[month_number] > 31 or monthnum2[month_number] <= 0:\n        print(\"Number of days are not defined for this month.\")\n        print(\"We have only 31 days for every month.\")\n        print(\"Try again with number between 1 and 31.\")\n    else:\n        return month_number\n        \nmonthnum1 = ['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december']\nmonthnum2 = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\ndef leap_year(year):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    year = int(input(\"Enter year: \"))\n    if year % 4 == 0:\n        print(\"The year is a leap year.\")\n    else:\n        print(\"The year is not a leap year.\")\n        \ndef check_last_date(month_number):\n    '''\n    Write a function to check whether the given month is month with 31 days or not.\n    '''\n    if monthnum2[month_number - 1] == 31:\n        print(\"The month has 31 days.\")\n    else:\n        print(\"The month has 30 days.\")\n        \ndef check_last_date_leap_year(month_number):\n    '''\n    Write a function to check whether the given month is month with 31 days or not.\n    '''\n    if monthnum2[month_number - 1] == 29:\n        print(\"The month has 29 days.\")\n    else:\n        print(\"The month has 30 days.\")\n",
        "num_ids": 42
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 31\n    if monthnum2 == 2:\n        return 29 if leap_year(year) else 28\n    return 30\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 in (1, 3, 5, 7, 8, 10, 12):\n        return '31 days'\n    elif monthnum2 in (4, 6, 9, 11):\n        return '30 days'\n    elif monthnum2 == 2:\n        return '28 or 29 days'\n",
        "num_ids": 76
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 == 1 or 3 or 5 or 7 or 8 or 10 or 12):\n        return 31\n    elif (monthnum2 == 4 or 6 or 9 or 11):\n        return 30\n    else:\n        return 28\n",
        "num_ids": 57
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return 0\n",
        "num_ids": 91
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return 1\n    elif monthnum2 == 3:\n        return 3\n    elif monthnum2 == 4:\n        return 4\n    elif monthnum2 == 5:\n        return 5\n    elif monthnum2 == 6:\n        return 6\n    elif monthnum2 == 7:\n        return 7\n    elif monthnum2 == 8:\n        return 8\n    elif monthnum2 == 9:\n        return 9\n    elif monthnum2 == 10:\n        return 10\n    elif monthnum2 == 11:\n        return 11\n    elif monthnum2 == 12:\n        return 12\n    else:\n        return None\n",
        "num_ids": 163
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return False\n",
        "num_ids": 91
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return 31\n    elif monthnum2 == 3:\n        return 31\n    elif monthnum2 == 4:\n        return 30\n    elif monthnum2 == 5:\n        return 31\n    elif monthnum2 == 6:\n        return 30\n    elif monthnum2 == 7:\n        return 31\n    elif monthnum2 == 8:\n        return 31\n    elif monthnum2 == 9:\n        return 30\n    elif monthnum2 == 10:\n        return 31\n    elif monthnum2 == 11:\n        return 30\n    elif monthnum2 == 12:\n        return 31\n",
        "num_ids": 155
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return 31\n    elif monthnum2 in [4,6,9,11]:\n        return 30\n    elif monthnum2 == 2:\n        return 29\n    else:\n        return None\n",
        "num_ids": 71
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        print(monthnum2,'has 31 days')\n    elif monthnum2 == 2:\n        print(monthnum2,'has 28 days')\n    elif monthnum2 == 3:\n        print(monthnum2,'has 31 days')\n    elif monthnum2 == 4:\n        print(monthnum2,'has 30 days')\n    elif monthnum2 == 5:\n        print(monthnum2,'has 31 days')\n    elif monthnum2 == 6:\n        print(monthnum2,'has 30 days')\n    elif monthnum2 == 7:\n        print(monthnum2,'has 31 days')\n    elif monthnum2 == 8:\n        print(monthnum2,'has 31 days')\n    elif monthnum2 == 9:\n        print(monthnum2,'has 30 days')\n    elif monthnum2 == 10:\n        print(monthnum2,'has 31 days')\n    elif monthnum2 == 11:\n        print(monthnum2,'has 30 days')\n    elif monthnum2 == 12:\n        print(monthnum2,'has 31 days')\n    else:\n        print('You entered an invalid month number')\n",
        "num_ids": 280
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    list_length = len(stringlist)\n    for i in range(list_length):\n        stringlist[i] = stringlist[i][::-1]\n        print(stringlist[i])\n",
        "num_ids": 50
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for i in stringlist:\n        newlist.append(i[::-1])\n    return newlist\n",
        "num_ids": 34
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n",
        "num_ids": 18
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for string in stringlist:\n        reverse_list.append(string[::-1])\n    return reverse_list\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedstringlist = []\n    for i in range(len(stringlist)):\n        reversedstringlist.append(stringlist[i][::-1])\n    return reversedstringlist\n    \ndef reverse_string_list_with_generator(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in reversed(range(len(stringlist))):\n        yield stringlist[i][::-1]\n        \ndef reverse_string_list_without_generator(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedstringlist = []\n    for i in range(len(stringlist)):\n        reversedstringlist.append(stringlist[i][::-1])\n    return reversedstringlist\n    \ndef reverse_string_list_with_loop(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n        \ndef reverse_string_list_with_while_loop(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    i = len(stringlist) - 1\n    while i >= 0:\n        stringlist[i] = stringlist[i][::-1]\n        i -= 1\n    \ndef reverse_string_list_with_recursion(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) <= 1:\n        return stringlist\n    else:\n        return [stringlist[-1][::-1]] + reverse_string_list_with_recursion(stringlist[:-1])\n        \ndef test_reverse_string_list():\n    test1 = ['cat', 'dog', 'lion']\n    test2 = ['cat', 'dog', 'lion','snake']\n    expected1 = ['tac', 'god', 'lonion']\n    expected2 = ['tac', 'god', 'lonion','snaek']\n    \n    assert reverse_string_list(test1) == expected1\n    assert reverse_string_list(test2) == expected2\n    \ndef test_reverse_string_list_with_generator():\n    test1 = ['cat', 'dog', 'lion']\n    test2 = ['cat', 'dog', 'lion','snake']\n    expected1 = ['tac', 'god', 'lonion']\n    expected2 = ['tac', 'god', 'lonion','snaek']\n    \n    assert list(reverse_string_list_with_generator(test1)) == expected1\n    assert list(reverse_string_list_with_generator(test2)) == expected2\n    \ndef test_reverse_string_list_without_generator():\n    test1 = ['cat', 'dog', 'lion']\n    test2 = ['cat', 'dog', 'lion','snake']\n    expected1 = ['tac', 'god', 'lonion']\n    expected2 = ['tac', 'god', 'lonion','snaek']\n    \n    assert reverse_string_list_without_generator(test1) == expected1\n    assert reverse_string_list_without_generator(test2) == expected2\n    \ndef test_reverse_string_list_with_loop():\n    test1 = ['cat', 'dog', 'lion']\n    test2 = ['cat', 'dog', 'lion','snake']\n    expected1 = ['tac', 'god', 'lonion']\n    expected2 = ['tac', 'god', 'lonion','snaek']\n    \n    reverse_string_list_with_loop(test1)\n    reverse_string_list_with_loop(test2)\n    \n    assert test1 == expected1\n    assert test2 == expected2\n    \ndef test_reverse_string_list_with_while_loop():\n    test1 = ['cat', 'dog', 'lion']\n    test2 = ['cat', 'dog', 'lion','snake']\n    expected1 = ['tac', 'god', 'lonion']\n    expected2 = ['tac', 'god', 'lonion','snaek']\n    \n    reverse_string_list_with_while_loop(test1)\n    reverse_string_list_with_while_loop(test2)\n    \n    assert test1 == expected1\n    assert test2 == expected2\n    \ndef test_reverse_string_list_with_recursion():\n    test1 = ['cat', 'dog', 'lion']\n    test2 = ['cat', 'dog', 'lion','snake']\n    expected1 = ['tac', 'god', 'lonion']\n    expected2 = ['tac', 'god', 'lonion','snaek']\n    \n    assert reverse_string_list_with_recursion(test1) == expected1\n    assert reverse_string_list_with_recursion(test2) == expected2\n",
        "num_ids": 831
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for s in stringlist:\n        newlist.append(s[::-1])\n    return newlist\n",
        "num_ids": 34
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Iterate through string list\n    for index, string in enumerate(stringlist):\n        # Grab index of current item in string list\n        current_index = index\n        # Iterate backwards through string list\n        for i in range(current_index):\n            # Swap current index with the previous index\n            stringlist[index], stringlist[index - 1] = stringlist[index - 1], stringlist[index]\n            # Set current index to previous index\n            index -= 1\n    # Return list with strings reversed\n    return stringlist\n",
        "num_ids": 125
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for i in stringlist:\n        newlist.append(i[::-1])\n    return newlist\n",
        "num_ids": 34
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_string_list = []\n    for string in stringlist:\n        reversed_string_list.append(string[::-1])\n",
        "num_ids": 39
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return(stringlist)\n",
        "num_ids": 16
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minlen=len(lst[0])\n    for x in lst:\n        if(len(x)<minlen):\n            minlen=len(x)\n    for x in lst:\n        if(len(x)==minlen):\n            return x\n",
        "num_ids": 67
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return [min(lst,key=len)] \n",
        "num_ids": 16
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #print(\"lst is: \", lst)\n    if len(lst) == 0:\n        return lst\n    l_min = lst[0]\n    l_min_lst = []\n    for i in lst:\n        if len(i) < len(l_min):\n            l_min = i\n    for i in lst:\n        if i == l_min:\n            l_min_lst.append(i)\n    print(l_min_lst)\n    return l_min_lst\n",
        "num_ids": 131
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if(len(lst[i]) < min_len):\n            min_len = len(lst[i])\n            idx = i\n    return lst[idx]\n",
        "num_ids": 72
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort() \n    return lst[0] \n    \nlst = [1, 4, 3, 4, 5, 7, 3, 6, 8, 4] \nprint(Find_Min(lst)) \n",
        "num_ids": 58
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minsub = lst[0]\n    for i in lst:\n        if len(i) < len(minsub):\n            minsub = i\n    return minsub\n",
        "num_ids": 44
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n",
        "num_ids": 27
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if not lst: \n        return 0\n    if len(lst) == 1: \n        return 1\n    min_length = len(lst[0])\n    min_list = lst[0]\n    for x in lst: \n        if len(x) < min_length: \n            min_length = len(x)\n            min_list = x\n    return min_list\n",
        "num_ids": 99
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    min_len = len(lst[0])\n    min_list = lst[0]\n    \n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_list = i\n            \n    return min_list\n",
        "num_ids": 75
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = min([len(i) for i in lst])\n    min_lst = [i for i in lst if len(i) == min_len]\n    return min_lst\n",
        "num_ids": 51
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \ndef find_highest_price(list_of_tuples):\n    '''\n    Given a list of tuples representing the price of a stock throughout a day,\n    return the highest price of the stock throughout the day.\n    '''\n    return max([i[1] for i in list_of_tuples])\n    \ndef find_length_of_longest_word(list_of_words):\n    '''\n    Given a list of strings, return the length of the longest word.\n    '''\n    return len(max(list_of_words, key=len))\n    \ndef check_pangram(sentence):\n    '''\n    Given a sentence, return whether it is a pangram.\n    '''\n    return len(set(sentence.replace(' ',''))) == 26\n    \ndef find_prime_factors(n):\n    '''\n    Given a number, return the product of it's prime factors.\n    '''\n    if n == 1:\n        return 1\n    else:\n        for i in range(2,int(n**0.5)+1):\n            if n%i == 0:\n                if i == n**0.5:\n                    return i\n                else:\n                    return i*find_prime_factors(n//i)\n                \ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points (x1,y1) and (x2,y2)\n    '''\n    return ((x2-x1)**2+(y2-y1)**2)**0.5\n    \ndef flip_case(string, to_upper):\n    '''\n    Write a function to change the case of all the letters in a string.\n    '''\n    if to_upper:\n        return string.upper()\n    else:\n        return string.lower()\n        \ndef remove_punctuation(s):\n    '''\n    Write a function to remove all the punctuation in a string.\n    '''\n    return ''.join(s.split())\n    \ndef find_smallest_missing_positive(list_of_nums):\n    '''\n    Given a list of numbers, return the smallest positive number that is not in the list.\n    '''\n    return [i for i in range(1, len(list_of_nums)+1) if i not in list_of_nums][0]\n    \ndef find_missing_number(list_of_nums):\n    '''\n    Given a list of numbers, return the smallest positive number that is not in the list.\n    '''\n    return [i for i in range(1, len(list_of_nums)+1) if i not in list_of_nums][0]\n    \ndef find_duplicate_number(list_of_nums):\n    '''\n    Given a list of numbers, return the largest number that is not twice in the list.\n    '''\n    return [i for i in list_of_nums if list_of_nums.count(i) == 2][0]\n    \ndef min_max_keys(d):\n    '''\n    Given a dictionary, return the key corresponding to the minimum and maximum value.\n    '''\n    return [k for k,v in d.items() if min(d.values()) == v][0], [k for k,v in d.items() if max(d.values()) == v][0]\n    \ndef fibonacci(n):\n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n        \ndef fibonacci_even(n):\n    '''\n    Write a function to calculate the nth Fibonacci number that is even.\n    '''\n    return fibonacci(n) if fibonacci(n)%2 == 0 else 0\n    \ndef fibonacci_odd(n):\n    '''\n    Write a function to calculate the nth Fibonacci number that is odd.\n    '''\n    return fibonacci(n) if fibonacci(n)%2!= 0 else 0\n    \ndef reverse_words(text):\n    '''\n    Write a function to reverse all the words in a given text.\n    '''\n    return''.join([i[::-1] for i in text.split()])\n    \ndef get_first_letters_of_words(sentence):\n    '''\n    Write a function to return the first letters of each word in a sentence.\n    '''\n    return''.join([i[0] for i in sentence.split()])\n    \ndef get_number_of_characters_in_file(filename):\n    '''\n    Write a function to return the number of characters in a file.\n    '''\n    with open(filename, 'r') as f:\n        return len(f.read())\n    \ndef get_number_of_lines_in_file(filename):\n    '''\n    Write a function to return the number of lines in a file.\n    '''\n    with open(filename, 'r') as f:\n        return len(f.readlines())\n    \ndef get_number_of_words_in_file(filename):\n    '''\n    Write a function to return the number of words in a file.\n    '''\n    with open(filename, 'r') as f:\n        return len(f.read().split())\n        \ndef get_number_of_vowels_in_file(filename):\n    '''\n    Write a function to return the number of vowels in a file.\n    '''\n    vowels = ['a','e','i','o','u']\n    num_vowels = 0\n    with open(filename, 'r') as f:\n        for line in f:\n            for word in line.split():\n                for letter in word:\n                    if letter.lower() in vowels:\n                        num_vowels += 1\n    return num_vowels\n    \ndef get_number_of_consonants_in_file(filename):\n    '''\n    Write a function to return the number of consonants in a file.\n    '''\n    consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n    num_consonants = 0\n    with open(filename, 'r') as f:\n        for line in f:\n            for word in line.split():\n                for letter in word:\n                    if letter.lower() not in vowels:\n                        num_consonants += 1\n    return num_consonants\n    \ndef get_number_of_words_of_length_in_file(filename, length):\n    '''\n    Write a function to return the number of words of a given length in a file.\n    '''\n    num_words = 0\n    with open(filename, 'r') as f:\n        for line in f:\n            for word in line.split():\n                if len(word) == length:\n                    num_words += 1\n    return num_words\n    \ndef get_number_of_words_that_begin_with(filename, letter):\n    '''\n    Write a function to return the number of words that begin with a given letter in a file.\n    '''\n    num_words = 0\n    with open(filename, 'r') as f:\n        for line in f:\n            for word in line.split():\n                if word[0] == letter:\n                    num_words += 1\n    return num_words\n    \ndef get_number_of_lines_that_begin_with(filename, letter):\n    '''\n    Write a function to return the number of lines that begin with a given letter in a file.\n    '''\n    num_lines = 0\n    with open(filename, 'r') as f:\n        for line in f:\n            if line[0] == letter:\n                num_lines += 1\n    return num_lines\n    \ndef get_number_of_words_that_do_not_begin_with(filename, letter):\n    '''\n    Write a function to return the number of words that do not begin with a given letter in a file.\n    '''\n    nu",
        "num_ids": 4
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14*r**2\ndef triangle_area(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*b*h\n",
        "num_ids": 12
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str(str1)\n    s1 = []\n    s2 = []\n    for i in str1:\n        if i not in s1:\n            s1.append(i)\n    for i in s1:\n        if i.isupper() == False:\n            s2.append(i)\n    return s2\n",
        "num_ids": 83
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_string = \"\"\n    for i in range(len(str1)):\n        if not str1[i].isupper():\n            new_string += str1[i]\n    return new_string\nprint(remove_uppercase(\"HaReGAiO\"))\nprint(remove_uppercase(\"HAlO\"))\nprint(remove_uppercase(\"HELLO\"))\nprint(remove_uppercase(\"H\"))\nprint(remove_uppercase(\"HALE\"))\nprint(remove_uppercase(\"HALLE\"))\nprint(remove_uppercase(\"HALEI\"))\nprint(remove_uppercase(\"HALE\"))\nprint(remove_uppercase(\"HALEI\"))\nprint(remove_uppercase(\"HALEI\"))\nprint(remove_uppercase(\"HALI\"))\nprint(remove_uppercase(\"HALI\"))\n",
        "num_ids": 205
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n    # return str1.translate(None, string.ascii_uppercase)\n",
        "num_ids": 42
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=str1.lower()\n    pattern = '[A-Z]'\n    result = re.sub(pattern, '', str1)\n    print(result)\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = ''\n    for char in str1:\n        if not char.isupper():\n            result += char\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    string = str1\n    string = re.sub('[A-Z]', '', string)\n    return string\n    # code goes here\n",
        "num_ids": 36
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #replace all the capital letters with empty space\n    #then split the string based on the spaces\n    #count the lenght of the list\n    #return the length of the list\n    str1=str1.lower()\n    str1=str1.replace(\" \",\"\")\n    lst=str1.split(\" \")\n    len=len(lst)\n    return len\n",
        "num_ids": 92
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    print(re.sub('[A-Z]+', \"\", str1))\n",
        "num_ids": 21
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    print(str1.lower())\n    \nremove_uppercase('Hello world')\n",
        "num_ids": 23
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[i][0] for i in range(len(lst))] \n",
        "num_ids": 25
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return list(map(lambda x: x[0], lst)) \n",
        "num_ids": 20
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [[sublst[0] for sublst in lst]]\n",
        "num_ids": 20
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\nprint(\"The first element of each sublist is : \", end=\"\") \nprint(Extract([[1], [2], [3, 4]]))\n",
        "num_ids": 51
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    num = 0\n    for i in str:\n        if i.isupper():\n            num += 1\n    return num\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isupper():\n            count=count+1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(map(str.isupper, str))\n",
        "num_ids": 16
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n",
        "num_ids": 18
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for char in str:\n        if char.isupper():\n            count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    return(sum(1 for c in str if c.isupper()))\n",
        "num_ids": 22
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum([1 for x in str if x.isupper()])\n",
        "num_ids": 19
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n    combinations = []\n    for i in range(len(list1)):\n        current = list1[i]\n        remaining_elements = list1[i+1:]\n        for element in combinations_list(remaining_elements):\n            combinations.append([current] + element)\n    return combinations\n",
        "num_ids": 92
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) > 1:\n        previous = combinations_list(list1[:-1])\n        current = [item+list1[-1] for item in previous]\n        return current + previous\n    else:\n        return list1\n",
        "num_ids": 61
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    temp = []\n    new_list = []\n    for i in range(len(list1)):\n        temp.append(list1[i])\n    print(temp)\n    print(list1)\n    print(list1[0])\n    if len(list1) == 1:\n        return list1\n    elif len(list1) == 2:\n        new_list.append(list1)\n        return new_list\n    else:\n        new_list = list1[0]\n        temp.pop(0)\n        while len(temp)!= 0:\n            if len(temp) == 1:\n                new_list.append(temp[0])\n                break\n            new_list = new_list + [temp[0]]\n            temp.pop(0)\n            print(temp)\n            print(new_list)\n            new_list = new_list + list1[len(new_list)]\n        print(new_list)\n        return new_list\n",
        "num_ids": 233
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    combinations = [ [list1[x] for x in range(len(list1)) if not selected[x]] for selected in itertools.combinations(range(len(list1)), len(list1)) ]\n    return combinations\n",
        "num_ids": 63
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    list1.sort()\n    list_combinations = []\n    for i in range(len(list1)):\n        curr_val = list1[i]\n        list_combinations.extend([[curr_val] + combination for combination in combinations_list(list1[:i] + list1[i+1:])])\n    return list_combinations\n",
        "num_ids": 123
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combination_list=[]\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            combination_list.append([list1[i],list1[j]])\n    return combination_list\n",
        "num_ids": 68
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1,2))\n",
        "num_ids": 19
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combos = []\n    for i in range(1, len(list1) + 1):\n        combos += list(combinations(list1, i))\n    return combos\n",
        "num_ids": 44
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return itertools.combinations(list1,2)\n",
        "num_ids": 17
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1)+1):\n        combinations += list(itertools.combinations(list1, i))\n    return combinations\n",
        "num_ids": 47
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # This solution has a O(n^2) time complexity.\n    \n    max_product = arr[0]\n    curr_max_prod = arr[0]\n    curr_min_prod = arr[0]\n    \n    for elem in arr[1:]:\n        curr_max_prod = max(elem, elem * curr_max_prod, elem * curr_min_prod)\n        curr_min_prod = min(elem, elem * curr_max_prod, elem * curr_min_prod)\n        max_product = max(max_product, curr_max_prod)\n    \n    return max_product\n    \n    \ndef max_subarray_product_recursive(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    This function should use the Divide and Conquer strategy.\n    '''\n    # This solution has a O(n) time complexity.\n    \n    # If there is only one element, the maximum subarray product is its value.\n    if len(arr) == 1:\n        return arr[0]\n        \n    # If there is only two elements, the maximum subarray product is the maximum of the two elements.\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n        \n    # Otherwise, find the maximum subarray product of the left half.\n    left_half_max_prod = max_subarray_product_recursive(arr[:(len(arr) // 2)])\n    \n    # Find the maximum subarray product of the right half.\n    right_half_max_prod = max_subarray_product_recursive(arr[(len(arr) // 2):])\n    \n    # Find the maximum subarray product of the two halves.\n    left_half_max_prod_right_half_max_prod = max(left_half_max_prod, right_half_max_prod)\n    \n    # Find the maximum subarray product of the entire array.\n    max_product_of_all_elements = max(arr[0], max_subarray_product_recursive(arr[1:]))\n    \n    return max(left_half_max_prod_right_half_max_prod, max_product_of_all_elements)\n    \n    \ndef main():\n    arr = [6, -3, -10, 0, 2]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-3, -2, 1]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [6, -3, 0, 2]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-3, -10, 0, 2]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-3, -2, -1]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-3, 0, 1, 2]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-3, 0, 2, 4]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-3, 0, -2, 4]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-3, -4, 0, 2]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-3, 0, -2, -4]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [0, -1, -2, 0]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-2, 0, -1]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-1, -2, -3, 0]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [0, -1, -2, 0]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [0, 0, -1, -2]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-2, -3, -4, -5, 0, -2]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [1, -2, 0, -3]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-1, -2, -3, 0, -5, -4, 1]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-1, -3, -5, -7, 1, 3, 5, 7]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-1, -3, -5, -7, 1, 3, 5, 7, 0, 3, 1, 2]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-1, -3, -5, -7, 1, 3, 5, 7, 0, 3, 1, 2, -3, 1, 2, 5]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-1, -3, -5, -7, 1, 3, 5, 7, 0, 3, 1, 2, -3, 1, 2, 5, 1]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-1, -3, -5, -7, 1, 3, 5, 7, 0, 3, 1, 2, -3, 1, 2, 5, 1, -1]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-1, -3, -5, -7, 1, 3, 5, 7, 0, 3, 1, 2, -3, 1, 2, 5, 1, -1, -1]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-1, -3, -5, -7, 1, 3, 5, 7, 0, 3, 1, 2, -3, 1, 2, 5, 1, -1, -1, 0]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-1, -3, -5, -7, 1, 3, 5, 7, 0, 3, 1, 2, -3, 1, 2, 5, 1, -1, -1, 0, -3, 1, 2, 5, 1, -1, -1, 0]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-1, -3, -5, -7, 1, 3, 5, 7, 0, 3, 1, 2, -3, 1, 2, 5, 1, -1, -1, 0, -3, 1, 2, 5, 1, -1, -1, 0, -1]\n    print(f\"Maximum product subarray is {max_subarray_product(arr)}\")\n    \n    arr = [-1, -3, -5, -7, 1, 3, 5, 7, 0, 3, 1, 2, -3, 1, 2, 5, 1, -1, -1, 0, -3, 1, 2, 5, 1, -1, -1, 0, -1, 0]\n    print(f\"Maximum product subarray is {max_subarra",
        "num_ids": 1789
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    arr_len = len(arr)\n    max_prod = arr[0]\n    for i in range(arr_len):\n        left = 0\n        right = i\n        prod = arr[i]\n        while left < right:\n            prod *= arr[right]\n            if prod > max_prod:\n                max_prod = prod\n            right -= 1\n        \n        right = i\n        prod = arr[i]\n        while left < right:\n            prod *= arr[left]\n            if prod > max_prod:\n                max_prod = prod\n            left += 1\n",
        "num_ids": 149
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def max_crossing_product(left_array, right_array):\n        left_product = 1\n        right_product = 1\n        crossing_product = 1\n",
        "num_ids": 42
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    local_max_ending_here = 1\n    global_max_ending_here = 1\n    local_min_ending_here = 1\n    global_min_ending_here = 1\n    for elem in arr:\n        local_max_ending_here = max(elem, local_max_ending_here * elem)\n        global_max_ending_here = max(local_max_ending_here, global_max_ending_here)\n        local_min_ending_here = min(elem, local_min_ending_here * elem)\n        global_min_ending_here = min(local_min_ending_here, global_min_ending_here)\n    return global_max_ending_here\n",
        "num_ids": 172
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    # to store the cumulative maximum product subarray\n    max_product = 1\n",
        "num_ids": 28
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_sum = 1\n    max_prod = 1\n    curr_sum = 1\n    curr_prod = 1\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            curr_sum = curr_sum * arr[i]\n            curr_prod = curr_prod * arr[i]\n        elif arr[i] < 0:\n            curr_sum = 1 - (abs(arr[i]) // curr_sum)\n            curr_prod = 1 - (abs(arr[i]) // curr_prod)\n        if curr_prod > max_prod:\n            max_prod = curr_prod\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    print(max_sum)\n    print(max_prod)\n",
        "num_ids": 212
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # O(N) time, O(1) space\n    # Iterate through the array\n    # Build a subarray that contains the maximum value of each product subarray.\n    # Find the maximum of those subarrays.\n    max_prod = 1\n    max_start = 0\n    max_end = 0\n    for i in range(len(arr)):\n        start = i\n        end = i\n        prod = 1\n        for j in range(i, len(arr)):\n            prod *= arr[j]\n            if prod > max_prod:\n                max_start = start\n                max_end = end\n                max_prod = prod\n            if prod < 0:\n                start += 1\n                end += 1\n                break\n    return max_prod, max_start, max_end\n",
        "num_ids": 195
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    max_so_far = 1\n    max_ending_here = 1\n    min_so_far = 1\n    min_ending_here = 1\n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    for i in range(len(arr)):\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n        min_so_far = min(min_so_far, min_ending_here)\n    return max(max_so_far, min_so_far)\n",
        "num_ids": 188
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Kadane's algorithm\n",
        "num_ids": 9
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = 1\n    max_start = 0\n    max_end = 0\n",
        "num_ids": 24
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    #your code here\n    \n    return True\n",
        "num_ids": 16
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        for j in range(i+1, n):\n            if dict[i] == dict[j]:\n                return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    l = len(set(dict.values()))\n    if n == 1:\n        if l > 1:\n            print(\"Values are not same\")\n            return 0\n        else:\n            print(\"Values are same\")\n            return 1\n    else:\n        temp = set()\n        for i in dict.values():\n            temp.add(i)\n        if len(temp) == 1:\n            print(\"Values are same\")\n            return 1\n        else:\n            print(\"Values are not same\")\n            return 0\n",
        "num_ids": 124
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    keys = dict.keys()\n    for key in keys:\n        value = dict[key]\n        if len(value)!= n:\n            return False\n        else:\n            continue\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    check = False\n    if len(set(dict.values())) == 1:\n        check = True\n    if check:\n        print('All values are same')\n    else:\n        print('Not all values are same')\n",
        "num_ids": 55
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if not i == dict.get(n):\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    vals = []\n    for k,v in dict.items():\n        if v not in vals:\n            vals.append(v)\n    if len(vals) == 1 and vals[0] == n:\n        return True\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict[n]\n    for key in dict:\n        if dict[key] == value:\n            return True\n        else:\n            return False\n",
        "num_ids": 39
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    check = {}\n    for key in dict.keys():\n        if check.get(dict[key]) is None:\n            check[dict[key]] = 1\n        else:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in list(dict1.keys()):\n        if not dict1[key]:\n            dict1.pop(key)\n    return dict1\n",
        "num_ids": 38
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty_dict = {}\n    for k, v in dict1.items():\n        if v:\n            empty_dict[k] = v\n    return empty_dict\n",
        "num_ids": 42
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return { key: val for key, val in dict1.items() if val }\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value!=''}\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in list(dict1.items()):\n        if not value:\n            del dict1[key]\n    return dict1\n",
        "num_ids": 36
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if not value:\n            dict1.pop(key)\n    return dict1\n",
        "num_ids": 34
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:val for key, val in dict1.items() if val}\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    temp = []\n    for key, value in dict1.items():\n        if value!= '':\n            temp.append([key, value])\n    return dict(temp)\n",
        "num_ids": 44
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Your code here\n    dic={}\n    for key in dict1:\n        if dict1[key]!=[]:\n            dic[key]=dict1[key]\n    return dic\n    \ndef count_missing(list1,list2):\n    '''\n    Write a function to count the number of missing values in the\n    numerical list.\n    '''\n    # Your code here\n    missing=0\n    for x in range(len(list1)):\n        if list1[x]!=list2[x]:\n            missing+=1\n    return missing\n",
        "num_ids": 50
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty=[]\n    for i in dict1:\n        if dict1[i]==0:\n            empty.append(i)\n    for i in empty:\n        dict1.pop(i)\n    return dict1\n",
        "num_ids": 55
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    max_product_so_far = arr[0]\n    for num in arr[1:]:\n        max_product_so_far = max(max_product_so_far * num, max_product_so_far * num, num)\n        max_product = max(max_product, max_product_so_far)\n    return max_product",
        "num_ids": 126
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    len_arr = len(arr)\n    dp = [[0 for i in range(len_arr+1)] for j in range(len_arr+1)]\n    for i in range(1, len_arr+1):\n        for j in range(1, len_arr+1):\n            if arr[j-1] < arr[i-1]:\n                dp[i][j] = max(dp[i][j-1], arr[j-1] * (i-1))\n            else:\n                dp[i][j] = max(dp[i-1][j], arr[i-1] * (i-1))\n    return dp[len_arr][len_arr]\n",
        "num_ids": 166
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    s = []\n    result = 1\n    for i in arr:\n        s.append(i)\n        if len(s) > 1:\n            result = max(result, s[-1] * s[-2])\n    for i in range(len(arr) - 2, -1, -1):\n        result = max(result, s[i] * s[i + 1])\n    return result\n    \nprint(max_product([3, 6, -2, -5, 7, 3]))",
        "num_ids": 122
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # F(i) = A[i]*...*A[j] - max product of A[i]...A[k] with k < j\n    # F(i) = max(A[i]*...*A[j]) - max product of A[i]...A[k] with k < j\n    # F(i) = max(A[i]*...*A[j] - max product of A[i]...A[k] with k < j)\n    # F(i) = max(A[i]*...*A[j]) - max product of A[i]...A[k] with k < j\n    # F(i) = max(A[i]*...*A[j]) - max product of A[i]...A[k] with k < j\n",
        "num_ids": 191
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    import copy\n    global_max_product = float(\"-inf\")\n    local_max_product = 1\n    local_arr = copy.deepcopy(arr)\n    for i in range(len(local_arr)):\n        for j in range(i+1, len(local_arr)):\n            local_max_product *= local_arr[j]\n            if local_max_product > global_max_product:\n                global_max_product = local_max_product\n            local_max_product = 1\n    return global_max_product\n",
        "num_ids": 133
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [1] * n\n    max_product = 1\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[j] * arr[i], dp[i])\n        max_product = max(max_product, dp[i])\n    return max_product\n",
        "num_ids": 106
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    arr = list(set(arr))\n    if n <= 3:\n        return max(arr)\n    dp = [0]*n\n    dp[0] = arr[0]\n    dp[1] = arr[0]*arr[1]\n    dp[2] = arr[0]*arr[1]*arr[2]\n    \n    for i in range(3, n):\n        max1 = max(arr[i], arr[i]*dp[i-2], arr[i]*arr[i-1]*dp[i-3])\n        dp[i] = max1\n    print(dp)\n    return dp[n-1]\n",
        "num_ids": 169
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 0\n    \n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[j] > arr[i]:\n                prod = arr[i] * arr[j]\n                if prod > max_prod:\n                    max_prod = prod\n",
        "num_ids": 87
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    max_product = 1\n    prev_value = 0\n    for element in arr:\n        if element > prev_value:\n            max_product = max_product * element\n        prev_value = element\n    return max_product\n",
        "num_ids": 58
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] >= arr[i]:\n                max_product = max(max_product, arr[j]*arr[i])\n    return max_product\n    ",
        "num_ids": 79
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    sum = 0\n    i = 0\n    while i < len(test_tup) - 1:\n        sum += test_tup[i] + test_tup[i + 1]\n        i += 2\n    if len(test_tup) % 2 == 1:\n        sum += test_tup[-1]\n    return sum\n    \nprint(add_pairwise((1, 1, 1, 1, 1, 1, 1, 1))) # 6\nprint(add_pairwise((1, 2, 3, 4, 5, 6))) # 3\nprint(add_pairwise((1, 2, 3))) # 6",
        "num_ids": 151
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[2], test_tup[2] + test_tup[0])\n",
        "num_ids": 51
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(x + y for x, y in zip(test_tup, test_tup[1:]))\n",
        "num_ids": 30
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_tup = ()\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            sum_tup = sum_tup + (test_tup[i] + test_tup[i + 1],)\n        elif i == len(test_tup) - 1:\n            sum_tup = sum_tup + (test_tup[i] + test_tup[0],)\n    return sum_tup\n",
        "num_ids": 123
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_tup = tuple(n + m for n, m in zip(test_tup, test_tup[1:])) + (test_tup[-1] + test_tup[0], )\n    return new_tup\n",
        "num_ids": 60
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\n",
        "num_ids": 39
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res_tup = ()\n    for i in range(len(test_tup) - 1):\n        res_tup += (test_tup[i] + test_tup[i + 1],)\n    return res_tup\n",
        "num_ids": 60
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_tup = ()\n    for i in range(len(test_tup)):\n        if i == 0:\n            sum_tup = test_tup[i] + test_tup[i + 1]\n        elif i == len(test_tup) - 1:\n            sum_tup = sum_tup + test_tup[i - 1] + test_tup[i]\n        else:\n            sum_tup = sum_tup + test_tup[i - 1] + test_tup[i] + test_tup[i + 1]\n    print(sum_tup)\n    return sum_tup\n",
        "num_ids": 160
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    # function to find pairwise addition\n    def add_tup(tup):\n        result = 0\n        for i in range(len(tup)-1):\n            result += tup[i]\n            tup[i] = result\n        return tup\n    \n    return add_tup(test_tup)\n",
        "num_ids": 81
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = tuple(test_tup)\n    \n    if len(a) == 1:\n        return 0\n    else:\n        b = a[:len(a)-1]\n        print(b)\n        b = b + (a[-1] + a[0],)\n        print(b)\n        return b\n    ",
        "num_ids": 81
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # arr = [1, 2, 3, 4, 5] \n    # n = 6\n    # We need to find the product of the integers in the array modulo n.\n    # A naive approach is to multiply all the numbers in the array and then modulo them.\n    # In the worst case, all the values in the array will be 1 and the product will be 1 too.\n    # The product is the smallest positive number which is greater than or equal to the product of the array modulo n.\n",
        "num_ids": 116
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod * i % n\n    return prod\n",
        "num_ids": 29
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Complete the code below to find the remainder when all the \n    # array elements are multiplied \n    # n is the product of all the array elements\n    product = 1\n",
        "num_ids": 42
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(0, n): \n        prod *= arr[i] \n    return prod % n \n",
        "num_ids": 38
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n\n",
        "num_ids": 26
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 1\n    for num in arr:\n        total *= num\n    return total % n\n",
        "num_ids": 26
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    sum = 1\n    for i in arr: \n        sum = (sum * i) % n \n    return sum % n\n",
        "num_ids": 33
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in arr:\n        res = (res * i) % n\n    return res \n",
        "num_ids": 30
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    sum = 0\n    prod = 1\n    for i in arr:\n        prod *= i\n        prod %= n\n    return prod\n",
        "num_ids": 38
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (max(l) - min(l) == len(l)-1)\n",
        "num_ids": 22
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    flag=0\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]-1:\n            flag=1\n        elif l[i]==l[i+1]:\n            flag=2\n    if flag==0:\n        return False\n    else:\n        return True\nl1=[1,2,3,4,5,6,7]\nprint(check_Consecutive(l1))\nl2=[1,2,3,6,5,4,7]\nprint(check_Consecutive(l2))\nl3=[1,2,3,5,6,7]\nprint(check_Consecutive(l3))\nl4=[1,2,3,5,4,6,7]\nprint(check_Consecutive(l4))\nl5=[1,2,3,5,6,7,8]\nprint(check_Consecutive(l5))\nl6=[1,2,3,5,6,7,8,9,10]\nprint(check_Consecutive(l6))\n",
        "num_ids": 268
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1]-l[i] == 1):\n            return True\n        else:\n            return False\n",
        "num_ids": 44
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    s = sorted(l)\n    diff = s[1] - s[0]\n    for i in range(len(s)-1):\n        if s[i+1] - s[i] == diff:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    prev = l[0]\n    for i in range(1, len(l)):\n        if l[i] - prev!= 1:\n            return False\n        prev = l[i]\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return all(l[i] == l[i + 1] + 1 for i in range(len(l) - 1)) \n",
        "num_ids": 33
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!=1:\n            return False\n    return True\n    \n",
        "num_ids": 42
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    prev = l[0]\n    for i in range(1,len(l)):\n        if l[i]==prev+1 or l[i]==prev:\n            prev = l[i]\n        else:\n            return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # The following list contains the consecutive numbers \n    consecutive_list = [1, 2, 3, 4, 5, 6, 7, 8, 9] \n    l_sorted = sorted(l)\n    if l_sorted == consecutive_list: \n        return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l==None:\n        return\n    return sorted(l)==list(range(min(l),max(l)+1))\n",
        "num_ids": 34
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    l1 = []\n    for i in test_list1:\n        l1.append(tuple(i))\n",
        "num_ids": 30
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    unique = []\n    for element in test_list1:\n        if element in test_list2:\n            unique.append(element)\n    return unique\n",
        "num_ids": 39
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1.sort()\n    test_list2.sort()\n    i = 0\n    j = 0\n    tuple_intersection = []\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            tuple_intersection.append(test_list1[i])\n            i += 1\n            j += 1\n        elif test_list1[i] > test_list2[j]:\n            j += 1\n        else:\n            i += 1\n    return tuple_intersection\n",
        "num_ids": 146
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = [2,3,4,5,6,7,8]\n    test_list2 = [1,2,3,4,5,7,9]\n    result = []\n",
        "num_ids": 51
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize a set to store the set intersection.\n    intersection = set()\n    # Check for each element in the first list if it is present in the second list.\n    for i in test_list1:\n        if i in test_list2:\n            intersection.add(i)\n    # Return the set of the intersection.\n    return intersection\n",
        "num_ids": 85
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1).intersection(*[set(element) for element in test_list2])\n",
        "num_ids": 28
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if type(test_list1) is not tuple or type(test_list2) is not tuple:\n        raise Exception(\"Input data should be of type tuple!\")\n    return list(set(test_list1) & set(test_list2))\n",
        "num_ids": 61
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n",
        "num_ids": 22
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return_list = []\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                return_list.append(i)\n                break\n    return return_list\n",
        "num_ids": 55
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=str1[:ch]+newch+str1[(ch+1):]\n    return str2\n",
        "num_ids": 30
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i,chr in enumerate(str1):\n        if chr == ch:\n            str1[i] = newch\n    str1 = ''.join(str1)\n    return str1\n",
        "num_ids": 61
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str=str1.replace(ch,newch)\n    return new_str\n",
        "num_ids": 24
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    \n    # write your code here\n    return str1.replace(ch,newch)\n",
        "num_ids": 24
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1.replace(ch,newch)\n    return str2\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_string = str1.replace(ch,newch)\n    return new_string\n",
        "num_ids": 24
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    \n    newstr = ''\n    for i in str1:\n        if i == ch:\n            newstr += newch\n        else:\n            newstr += i\n    print(newstr)\n",
        "num_ids": 49
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1\n    for i in range(len(str1)):\n        if(str1[i] == ch):\n            str2 = str2[:i] + newch + str2[i+1:]\n    return str2\n",
        "num_ids": 61
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = str1.replace(ch,newch)\n    return new_str\n",
        "num_ids": 24
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    list_string = list(str1)\n    for i in range(len(list_string)):\n        if list_string[i] == ch:\n            list_string[i] = newch\n    print(''.join(list_string))\n    ",
        "num_ids": 62
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x: x[1],reverse=True)\ndef most_common_words(text, n):\n    '''\n    Find the top n words in a text.\n    '''\n    text = text.split()\n    wordcount = Counter(text)\n    wordcount = sort_counter(wordcount)\n    return wordcount[:n]\ndef most_frequent_letter(text):\n    '''\n    Find the most frequent letter in a text.\n    '''\n    text = text.lower()\n    letters = {}\n    for i in text:\n        if i in letters:\n            letters[i] += 1\n        else:\n            letters[i] = 1\n    return sort_counter(letters)[0][0]\ndef check_pangram(text):\n    '''\n    Write a function to check whether a text is a pangram or not.\n    '''\n    return set(most_common_words(text,26)) == set(string.ascii_lowercase)\ndef is_isogram(text):\n    '''\n    Write a function to check whether a word is an \"isogram\" or not.\n    '''\n    return len(Counter(text.lower())) == len(set(text.lower()))\ndef remove_duplicates(text):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(text))\ndef sherlock_and_anagrams(text):\n    '''\n    Write a function to count the number of \"isograms\" that can be made from a given string.\n    '''\n    return sum(1 for i in range(1,len(text)+1) if len(text)%i == 0)\ndef frequency_sort(items):\n    '''\n    Write a function that takes a list of items and returns a list of the \n    items in sorted order. \n    '''\n    return sorted(items,key=lambda x: -items.count(x))\ndef create_matrix(n):\n    '''\n    Write a function that creates and returns a two-dimensional list of numbers. \n    The number of rows and columns should be equal and should be able to fit all the \n    numbers that will be added to the list. The function should take a number n as \n    a parameter and return a two-dimensional list with n rows and columns.\n    '''\n    l = []\n    for i in range(n):\n        l.append([0]*n)\n    return l\ndef matrix_constant(matrix):\n    '''\n    Write a function that returns a list of the elements at the very center of \n    the matrix. The center should be when the numbers in the first row are equal \n    to the numbers in the first column, and the numbers in the last row are \n    equal to the numbers in the last column.\n    '''\n    return [matrix[len(matrix)//2][i] for i in range(len(matrix[0]))]\ndef print_stars(n):\n    '''\n    Write a function that takes a number n and prints out a n by n square of \n    stars.\n    '''\n    for i in range(n):\n        print(\"*\"*n)\ndef print_triangle(n):\n    '''\n    Write a function that prints a right triangle.\n    '''\n    for i in range(1,n+1):\n        print(\" \"*(n-i),end=\"\")\n        print(\"*\"*i)\ndef encrypt(plaintext,shift):\n    '''\n    Write a function to encrypt a plain text. It should shift each letter in the \n    text by shift letters.\n    '''\n    encoded = \"\"\n    for i in plaintext:\n        if ord(i) > 96 and ord(i) < 123:\n            if ord(i) + shift > 122:\n                encoded += chr(ord(i) + shift - 26)\n            else:\n                encoded += chr(ord(i) + shift)\n        else:\n            encoded += i\n    return encoded\ndef find_intersection(lst1,lst2):\n    '''\n    Write a function that takes two lists and returns the intersection between them.\n    '''\n    return set(lst1).intersection(set(lst2))\ndef generate_hashtag(s):\n    '''\n    Write a function to generate hashtag given a string s. The hashtag must use \n    all the words in the string s but not words in a specific order.\n    '''\n    words = s.split()\n    hashtag = \"#\"\n    for i in words:\n        hashtag += i[0]\n    return hashtag.lower()\ndef find_max_min(num1, num2):\n    '''\n    Write a function to find the maximum and minimum numbers from two given \n    numbers.\n    '''\n    return min(num1,num2),max(num1,num2)\ndef upper_bound(A, key):\n    '''\n    Write a function that takes a sorted list A and a number key and returns the \n    index of the value in A that is just greater than key. If there is no such \n    value, return the index of the last element in the list.\n    '''\n    return len(A) - bisect_right(A,key)\ndef find_integers(lst):\n    '''\n    Write a function that takes a list of strings and removes all of the strings \n    in the list that are empty strings. It should return a list with only the \n    non-empty strings in the same order that they were in the list.\n    '''\n    return [i for i in lst if len(i) > 0]\ndef swap_columns(m, i, j):\n    '''\n    Write a function to swap two columns in a 2D array.\n    '''\n    for k in range(len(m)):\n        m[k][i],m[k][j] = m[k][j],m[k][i]\n    return m\ndef check_group(lst):\n    '''\n    Write a function that takes a list of integers and returns True if the list \n    is a set of consecutive numbers. For example, [1,2,3,4,5] and [2,3,4,5] are \n    sets of consecutive numbers, while [1,2,4,5] and [2,3,4] are not.\n    '''\n    lst = list(set(lst))\n    lst.sort()\n    for i in range(1,len(lst)):\n        if lst[i] - lst[i-1]!= 1:\n            return False\n    return True\ndef sum_matrix(m):\n    '''\n    Write a function to return the sum of all the elements in a two-dimensional \n    list.\n    '''\n    return sum([sum(i) for i in m])\ndef cipher_text(s,shift):\n    '''\n    Write a function to encrypt a plain text using the Caesar cipher algorithm. \n    The function should return the cipher text. \n    '''\n    return \"\".join([chr(ord(i) + shift) if ord(i) + shift <=122 else chr(ord(i) + shift - 26) for i in s])\ndef get_midpoint(lst):\n    '''\n    Write a function to find the midpoint of a list of numbers.\n    '''\n    lst = list(set(lst))\n    return (lst[len(lst)//2] + lst[len(lst)//2 - 1]) / 2\ndef sum_of_two_integers(a, b):\n    '''\n    Write a function to return the sum of two integers a and b. The function \n    should return the sum in the form of a tuple, for example: \n    (5, 3) would return 8.\n    '''\n    return (a[0] + b[0], a[1] + b[1])\ndef sum_of_digits(n):\n    '''\n    Write a function that returns the sum of the digits of a nonnegative integer.\n    '''\n    return sum(int(i) for i in str(n))\ndef recursion(lst):\n    '''\n    Write a function that takes a list of numbers and returns True if all the \n    numbers in the list are the same.\n    '''\n    if le",
        "num_ids": 5
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\ndef sort_counter_1(dict1):\n    '''\n    Write a function to sort a dictionary by key.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=False)\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_list = sorted(dict1, key=dict1.get, reverse=True)\n    return sorted_list\n",
        "num_ids": 31
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x:x[1])\n    return sorted_dict\n",
        "num_ids": 31
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = dict1.items()\n    dict2 = dict()\n    for i in range(len(dict1)):\n        for j in range(len(dict1)):\n            if dict1[i][1] < dict1[j][1]:\n                dict2[i] = dict1[j]\n                dict1[j] = dict1[i]\n                dict1[i] = dict2[i]\n    for i in dict1:\n        print (i[0],i[1])\n",
        "num_ids": 122
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums, reverse=True)[:2])\n",
        "num_ids": 20
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return sum(nums[:1])+sum(nums[-1:])\n    # sum(nums[-1:]) return the sum of the last element of array nums.\n",
        "num_ids": 54
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if nums is None:\n        return None\n    return sum(nums)-max(nums)-min(nums)\n",
        "num_ids": 32
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[0] + nums[-1]\n",
        "num_ids": 24
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([min(nums), max(nums)])\n",
        "num_ids": 18
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums, reverse = True)[:2])\n",
        "num_ids": 20
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n",
        "num_ids": 24
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    num = nums\n    sum_of_list = sum(num)\n    return sum_of_list\n",
        "num_ids": 28
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) >= 0:\n        return sum(nums)\n    else:\n        return 'The array is empty.'\n",
        "num_ids": 34
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    def sum_2_nums(n1, n2):\n        return n1 + n2\n    return sum_2_nums(max(nums), min(nums))\n",
        "num_ids": 46
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if isinstance(string, str):\n        return string.lower()\n    else:\n        raise TypeError('please enter a string')\n",
        "num_ids": 34
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    print(string.lower())\n",
        "num_ids": 10
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = str(string)\n    return string.lower()\n",
        "num_ids": 17
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    return string.lower()\n    \n    \ndef is_upper(string):\n    '''\n    Write a python function to check whether the given string is in upper case or not.\n    '''\n    \n    return string.isupper()\n    \n    \ndef is_title(string):\n    '''\n    Write a python function to check whether the given string is in title case or not.\n    '''\n    \n    return string.istitle()\n    \n    \ndef is_digit(string):\n    '''\n    Write a python function to check whether the given string is in digits or not.\n    '''\n    \n    return string.isdigit()\n    \n    \ndef is_space(string):\n    '''\n    Write a python function to check whether the given string is in space or not.\n    '''\n    \n    return string.isspace()\n    \n    \ndef is_printable(string):\n    '''\n    Write a python function to check whether the given string is in printable or not.\n    '''\n    \n    return string.isprintable()\n    \n    \ndef is_multispace(string):\n    '''\n    Write a python function to check whether the given string is in multiple spaces or not.\n    '''\n    \n    return string.isspace() and string.count(' ') > 1\n    \n    \ndef is_multispace_empty(string):\n    '''\n    Write a python function to check whether the given string is in multiple spaces or not.\n    '''\n    \n    return string.isspace() and string.count(' ') > 0\n    \n    \ndef is_multispace_in_string(string):\n    '''\n    Write a python function to check whether the given string is in multiple spaces or not.\n    '''\n    \n    return string.count(' ') > 0\n    \n    \ndef is_alphabet(string):\n    '''\n    Write a python function to check whether the given string is in alphabet or not.\n    '''\n    \n    return string.isalpha()\n    \n    \ndef is_alphabet_lower(string):\n    '''\n    Write a python function to check whether the given string is in lower case or not.\n    '''\n    \n    return string.islower()\n    \n    \ndef is_alphabet_upper(string):\n    '''\n    Write a python function to check whether the given string is in upper case or not.\n    '''\n    \n    return string.isupper()\n    \n    \ndef is_alphabet_title(string):\n    '''\n    Write a python function to check whether the given string is in title case or not.\n    '''\n    \n    return string.istitle()\n    \n    \ndef is_alphabet_digit(string):\n    '''\n    Write a python function to check whether the given string is in digits or not.\n    '''\n    \n    return string.isdigit()\n    \n    \ndef is_alphabet_space(string):\n    '''\n    Write a python function to check whether the given string is in space or not.\n    '''\n    \n    return string.isspace()\n    \n    \ndef is_alphabet_printable(string):\n    '''\n    Write a python function to check whether the given string is in printable or not.\n    '''\n    \n    return string.isprintable()\n    \n    \ndef is_alphabet_lower_upper_title(string):\n    '''\n    Write a python function to check whether the given string is in lower case, upper case and title case or not.\n    '''\n    \n    return string.islower() and string.isupper() and string.istitle()\n    \n    \ndef is_alphabet_lower_upper(string):\n    '''\n    Write a python function to check whether the given string is in lower case, upper case and not title case or not.\n    '''\n    \n    return string.islower() and string.isupper() and not string.istitle()\n    \n    \ndef is_alphabet_lower_title(string):\n    '''\n    Write a python function to check whether the given string is in lower case, title case and not upper case or not.\n    '''\n    \n    return string.islower() and string.istitle() and not string.isupper()\n    \n    \ndef is_alphabet_lower(string):\n    '''\n    Write a python function to check whether the given string is in lower case and not upper case and not title case or not.\n    '''\n    \n    return string.islower() and not string.isupper() and not string.istitle()\n    \n    \ndef is_alphabet_upper_title(string):\n    '''\n    Write a python function to check whether the given string is in upper case, title case and not lower case or not.\n    '''\n    \n    return string.isupper() and string.istitle() and not string.islower()\n    \n    \ndef is_alphabet_upper(string):\n    '''\n    Write a python function to check whether the given string is in upper case and not lower case and not title case or not.\n    '''\n    \n    return string.isupper() and not string.islower() and not string.istitle()\n    \n    \ndef is_alphabet_title(string):\n    '''\n    Write a python function to check whether the given string is in title case and not lower case and not upper case or not.\n    '''\n    \n    return string.istitle() and not string.islower() and not string.isupper()\n    \n    \ndef is_alphabet_title_digit(string):\n    '''\n    Write a python function to check whether the given string is in title case, digits and not lower case and not upper case or not.\n    '''\n    \n    return string.istitle() and string.isdigit() and not string.islower() and not string.isupper()\n    \n    \ndef is_alphabet_title_space(string):\n    '''\n    Write a python function to check whether the given string is in title case, space and not lower case and not upper case or not.\n    '''\n    \n    return string.istitle() and string.isspace() and not string.islower() and not string.isupper()\n    \n    \ndef is_alphabet_title_printable(string):\n    '''\n    Write a python function to check whether the given string is in title case, printable and not lower case and not upper case or not.\n    '''\n    \n    return string.istitle() and string.isprintable() and not string.islower() and not string.isupper()\n    \n    \ndef is_alphabet_title_lower(string):\n    '''\n    Write a python function to check whether the given string is in title case, lower case and not upper case or not.\n    '''\n    \n    return string.istitle() and string.islower() and not string.isupper()\n    \n    \ndef is_alphabet_title_upper(string):\n    '''\n    Write a python function to check whether the given string is in title case, upper case and not lower case or not.\n    '''\n    \n    return string.istitle() and string.isupper() and not string.islower()\n    \n    \ndef is_alphabet_title_digit_space(string):\n    '''\n    Write a python function to check whether the given string is in title case, digits and not lower case and not upper case or not.\n    '''\n    \n    return string.istitle() and string.isdigit() and not string.islower() and not string.isupper()\n    \n    \ndef is_alphabet_title_digit_printable(string):\n    '''\n    Write a python function to check whether the given string is in title case, digits and printable and not lower case and not upper case or not.\n    '''\n    \n    return string.istitle() and string.isdigit() and string.isprintable() and not string.islower() and not string.isupper()\n    \n    \ndef is_alphabet_title_digit_lower(string):\n    '''\n    Write a python function to check whether the given string is in title case, digits and lower case and not upper case or not.\n    '''\n    \n    return string.istitle() and string.isdigit() and string.islower() and not string.isupper()\n    \n    \ndef is_alphabet_title_digit_upper(string):\n    '''\n    Write a python functio",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1.split()\n    str3 = []\n    for i in range(len(str2)):\n        if str2[i].isupper():\n            str3.append(str2[i])\n    return \" \".join(str3)\n",
        "num_ids": 64
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str_lst = list(str1)\n    i = 0\n    for i in range(len(str_lst)):\n        if str_lst[i].islower():\n            str_lst.pop(i)\n        elif str_lst[i].isupper():\n            str_lst.pop(i)\n            i -= 1\n        i += 1\n    return ''.join(str_lst)\n    \n    \ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str_lst = list(str1)\n    i = 0\n    for i in range(len(str_lst)):\n        if str_lst[i].isupper():\n            str_lst.pop(i)\n            i -= 1\n        i += 1\n    return ''.join(str_lst)\n",
        "num_ids": 80
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(\"[a-z]\", \"\", str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if not str1:\n        return str1\n    result = \"\"\n    for i in range(len(str1)):\n        if not str1[i].islower():\n            result += str1[i]\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str(str1)\n    # str1 = str1.replace(\" \",\"\")\n    # str1 = str1.replace(\",\",\"\")\n    # str1 = str1.replace(\".\",\"\")\n    # str1 = str1.replace(\"!\",\"\")\n    # str1 = str1.replace(\"?\",\"\")\n    # str1 = str1.replace(\"@\",\"\")\n    # str1 = str1.replace(\"#\",\"\")\n    # str1 = str1.replace(\"%\",\"\")\n    # str1 = str1.replace(\"^\",\"\")\n    # str1 = str1.replace(\"&\",\"\")\n    # str1 = str1.replace(\"*\",\"\")\n    # str1 = str1.replace(\"-\",\"\")\n    # str1 = str1.replace(\"_\",\"\")\n    # str1 = str1.replace(\"+\",\"\")\n    # str1 = str1.replace(\"=\",\"\")\n    # str1 = str1.replace(\"(\",\"\")\n    # str1 = str1.replace(\")\",\"\")\n    # str1 = str1.replace(\";\",\"\")\n    # str1 = str1.replace(\":\",\"\")\n    # str1 = str1.replace(\"[\",\"\")\n    # str1 = str1.replace(\"]\",\"\")\n    # str1 = str1.replace(\"{\",\"\")\n    # str1 = str1.replace(\"}\",\"\")\n    # str1 = str1.replace(\"|\",\"\")\n    # str1 = str1.replace(\"\\\\\",\"\")\n    # str1 = str1.replace(\"/\",\"\")\n    # str1 = str1.replace(\"\\\"\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"<\",\"\")\n    # str1 = str1.replace(\">\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")\n    # str1 = str1.replace(\"'\",\"\")",
        "num_ids": 2012
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = []\n    str2.extend(str1)\n    str2 = [i.lower() for i in str2]\n    str2 = [i for i in str2 if len(i)>1]\n    str2 = \"\".join(str2)\n    return str2\n",
        "num_ids": 72
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    output = str1\n    lowercase_char = [chr(i) for i in range(97,123)]\n    for i in lowercase_char:\n        #print i,output\n        if i in output:\n            output = output.replace(i, \"\")\n    #print output\n    return output\n",
        "num_ids": 75
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(\"[a-z]*\", \"\", str1)\n",
        "num_ids": 21
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "num_ids": 13
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    return int(n[0])\n",
        "num_ids": 19
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n    \ndef sum_Digits(n) : \n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return sum([int(i) for i in str(n)])\n",
        "num_ids": 19
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = int(n)\n    print(\"The first digit of\", n, \"is\", n%10)\n",
        "num_ids": 28
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    for i in range(len(n)) :\n        if n[i]!= '.' :\n            return int(n[i])\n",
        "num_ids": 43
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    while n > 0 :\n        return n % 10\n        break\n    return n\n",
        "num_ids": 24
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10 :\n        n = n // 10\n    return n\n",
        "num_ids": 20
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    for i in str(n):\n        return i\n        \n        \ndef number_of_digits(n) :\n    '''\n    Write a python function to find the number of digits in a number.\n    '''\n    return len(str(n))\n    \n    \ndef sum_of_digits(n) :\n    '''\n    Write a python function to find the sum of digits in a number.\n    '''\n    return sum([int(i) for i in str(n)])\n    \n    \ndef sum_of_digits_in_string(string) :\n    '''\n    Write a python function to find the sum of digits in a string.\n    '''\n    return sum([int(i) for i in string])\n    \n    \ndef remove_first_and_last(s) :\n    '''\n    Write a python function to remove the first and last characters of a string.\n    '''\n    return s[1:-1]\n    \n    \ndef convert_to_upper_case(s) :\n    '''\n    Write a python function to convert a string to upper case.\n    '''\n    return s.upper()\n    \n    \ndef reverse(s) :\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \n    \ndef convert_to_lower_case(s) :\n    '''\n    Write a python function to convert a string to lower case.\n    '''\n    return s.lower()\n    \n    \ndef is_palindrome(s) :\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    return s == s[::-1]\n    \n    \ndef sort_a_string(s) :\n    '''\n    Write a python function to sort a string in ascending order.\n    '''\n    return \"\".join(sorted(s))\n    \n    \ndef get_length_of_string(s) :\n    '''\n    Write a python function to find the length of a string.\n    '''\n    return len(s)\n    \n    \ndef max_of_list(l) :\n    '''\n    Write a python function to find the maximum value in a list.\n    '''\n    return max(l)\n    \n    \ndef is_anagram(s1, s2) :\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \n    \ndef concat_strings(s1, s2) :\n    '''\n    Write a python function to concatenate two strings.\n    '''\n    return s1+s2\n    \n    \ndef get_difference_of_strings(s1, s2) :\n    '''\n    Write a python function to get the difference of two strings.\n    '''\n    return \"\".join(list(set(s1)-set(s2)))\n    \n    \ndef count_occurences_of_character(s, c) :\n    '''\n    Write a python function to count the number of occurences of a character in a string.\n    '''\n    return s.count(c)\n    \n    \ndef replace_first_and_last(s, f, l) :\n    '''\n    Write a python function to replace the first and last characters of a string.\n    '''\n    return s[:1] + l + s[-1:]\n    \n    \ndef is_unique_list(l) :\n    '''\n    Write a python function to check whether a list contains unique values or not.\n    '''\n    return len(set(l)) == len(l)\n    \n    \ndef is_unique_string(s) :\n    '''\n    Write a python function to check whether a string contains unique characters or not.\n    '''\n    return len(set(s)) == len(s)\n    \n    \ndef concatenate_strings(s1, s2) :\n    '''\n    Write a python function to concatenate two strings without using the + operator.\n    '''\n    x = 0\n    y = 0\n    while x < len(s1) :\n        y += ord(s1[x])\n        x += 1\n    while y < len(s2) :\n        y += ord(s2[x])\n        x += 1\n    return y\n    \n    \ndef append_string(s1, s2) :\n    '''\n    Write a python function to append a string to the end of another string.\n    '''\n    return s1 + s2\n    \n    \ndef get_even_index_characters(s) :\n    '''\n    Write a python function to get a list of characters from a string at even index positions.\n    '''\n    return s[::2]\n    \n    \ndef get_odd_index_characters(s) :\n    '''\n    Write a python function to get a list of characters from a string at odd index positions.\n    '''\n    return s[1::2]\n    \n    \ndef get_characters_from_non_standard_indexes(s, c, d) :\n    '''\n    Write a python function to get a list of characters from a string after skipping a\n    given number of characters.\n    '''\n    return s[c:d]\n    \n    \ndef get_string_from_non_standard_indexes(s, c, d) :\n    '''\n    Write a python function to get a string from a string after skipping a given number of characters.\n    '''\n    return s[c:d]\n    \n    \ndef get_integer_from_string(s) :\n    '''\n    Write a python function to get the integer value of a string.\n    '''\n    return int(s)\n    \n    \ndef get_integer_from_list(l) :\n    '''\n    Write a python function to get the integer value of a list.\n    '''\n    return int(\"\".join(map(str, l)))\n    \n    \ndef find_common_characters(s1, s2) :\n    '''\n    Write a python function to find the common characters between two strings.\n    '''\n    return set(s1) & set(s2)\n    \n    \ndef find_common_characters_in_list(l1, l2) :\n    '''\n    Write a python function to find the common characters between two lists.\n    '''\n    return set(l1) & set(l2)\n    \n    \ndef remove_common_characters(s1, s2) :\n    '''\n    Write a python function to remove the common characters between two strings.\n    '''\n    return \"\".join(set(s1) - set(s2))\n    \n    \ndef remove_common_characters_from_list(l1, l2) :\n    '''\n    Write a python function to remove the common characters between two lists.\n    '''\n    return list(set(l1) - set(l2))\n    \n    \ndef find_common_prefix_suffix(s1, s2) :\n    '''\n    Write a python function to find the longest common prefix and suffix between two strings.\n    '''\n    return s1.startswith(s2) and s2.startswith(s1)\n    \n    \ndef is_substring(s1, s2) :\n    '''\n    Write a python function to check whether one string is a substring of another.\n    '''\n    return s2 in s1\n    \n    \ndef count_occurences_of_substring(s, sub) :\n    '''\n    Write a python function to count the number of occurences of a substring in a string.\n    '''\n    return s.count(sub)\n    \n    \ndef string_rotation(s1, s2) :\n    '''\n    Write a python function to check whether one string is a rotation of another string.\n    '''\n    return s2 in s1*2\n    \n    \ndef find_missing_number(l) :\n    '''\n    Write a python function to find the missing number in a list of consecutive integers.\n    '''\n    return [i for i in range(l[0], l[-1]+1) if i not in l][0]\n    \n    \ndef find",
        "num_ids": 37
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return(n//10**0)\n",
        "num_ids": 12
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n//10\n    return first_digit\n",
        "num_ids": 17
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2!=0:\n            odd.append(i)\n    return odd\n",
        "num_ids": 36
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    # Split the list into two parts. \n    odd = [] \n    even = [] \n    for i in list: \n        if i % 2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    \n    # Combines both parts into a list. \n    # Combines the odd list with the even list. \n    odd.extend(even) \n    \n    return odd \n    \nprint(Split([1,2,3,4,5,6,7,8,9]))\n",
        "num_ids": 139
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for number in list:\n        if number % 2 == 1:\n            odd_list.append(number)\n    return odd_list\n",
        "num_ids": 41
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if len(list) % 2 == 1:\n        return list[1::2]\n    else:\n        return list[::2]\n",
        "num_ids": 35
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # x is a list with every value as an integer\n    x = []\n    for i in list:\n        x.append(int(i))\n    # for i in x:\n    #     if i % 2 == 0:\n    #         x.remove(i)\n",
        "num_ids": 66
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for x in list:\n        if x % 2 == 0:\n            list.remove(x)\n    return list\n",
        "num_ids": 30
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!=0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    i=[]\n    for k in list:\n        if k%2==1:\n            i.append(k)\n    return i\n",
        "num_ids": 35
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2!= 0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    odd = []\n    for i in list:\n        if i%2!= 0:\n            odd.append(i)\n    return odd\n",
        "num_ids": 38
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_n = sum(i for i in range(1, n+1))\n    return abs(sum_of_n**2 - sum_of_cubes)\n    \ndef is_a_perfect_square(n) :\n    '''\n    Write a Python function which checks whether a number is a perfect square or not.\n    '''\n    x = n**0.5\n    return x == int(x)\n    \ndef is_perfect_square(n) :\n    '''\n    Write a Python function to check whether a number is a perfect square or not.\n    '''\n    x = n**0.5\n    return x*x == n\n    \ndef simple_interest(principle, rate, time) :\n    '''\n    Write a Python function to calculate the simple interest.\n    '''\n    return principle*rate*time/100\n    \ndef area_of_triangle(base, height) :\n    '''\n    Write a Python function to calculate the area of a triangle\n    '''\n    return 0.5*base*height\n    \ndef is_it_even(n) :\n    '''\n    Write a Python function to check whether a number is even or not.\n    '''\n    return n%2 == 0\n    \ndef find_in_list(lst, value):\n    '''\n    Write a Python function to check whether a given value is in a list or not.\n    '''\n    return value in lst\n",
        "num_ids": 9
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_squares = 0\n    square_of_sum = 0\n    for x in range(n+1) :\n        sum_of_squares += x**2\n        square_of_sum += x\n    square_of_sum = square_of_sum ** 2\n    return square_of_sum - sum_of_squares\n",
        "num_ids": 84
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_nums = 0\n    for i in range(1,n+1) :\n        sum_of_nums = sum_of_nums + i\n        sum_of_cubes = sum_of_cubes + i**3\n    return sum_of_nums**2 - sum_of_cubes\n",
        "num_ids": 90
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(list(range(1,n+1)))**3-sum(list(range(1,n+1)))\n",
        "num_ids": 32
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # your code here\n    def cube(x):\n        return x * x * x\n    n1 = range(1, n+1)\n    sum1 = sum(list(map(cube, n1)))\n    n2 = range(1, n+1)\n    sum2 = sum(list(map(cube, n2)))\n    return sum2 - sum1\n",
        "num_ids": 89
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_num = 0\n    for i in range(1,n+1) :\n        sum_of_cubes += i*i*i\n        sum_of_num += i\n    return sum_of_num**3 - sum_of_cubes\n",
        "num_ids": 75
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 1 :\n        return 0\n    else :\n        sum_of_numbers = (n * (n + 1) * (2 * n + 1)) / 6\n        sum_of_cubes = (n * (n + 1) * (2 * n + 1) * (3 * n + 1)) / 6\n        return sum_of_cubes - sum_of_numbers",
        "num_ids": 94
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = 0\n    for i in range(n) :\n        cubes += (i*i*i)\n    first_sum = sum(range(n))\n    second_sum = first_sum*first_sum*first_sum\n    return (second_sum - cubes)\n",
        "num_ids": 69
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (sum(i**3 for i in range(1,n+1)) - sum(i for i in range(1,n+1)))\n",
        "num_ids": 37
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n) :\n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        sum_cubes = 0\n        for i in range(1, n + 1) :\n            sum_cubes += i ** 3\n        return sum_cubes\n",
        "num_ids": 41
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_pairs = 0\n    for i in range(N) : \n        for j in range(i+1, N) : \n            if((A[i]^A[j]) & 1) : \n                xor_pairs+=1\n    return xor_pairs\n",
        "num_ids": 72
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            xor = A[i]^A[j]\n            if xor % 2 == 1 : \n                count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if (A[i] ^ A[j]) % 2!= 0 : \n                count += 1\n    return count \n",
        "num_ids": 65
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i]^A[j]&1) == 1 : \n                count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if((A[i] ^ A[j]) & 1):\n                count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    total = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            total += A[i] ^ A[j]\n    return total\n    \n",
        "num_ids": 48
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 1) : \n                count += 1\n    return count \n    \ndef find_Pair_Count(A, N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 1) == 0 : \n                count += 1\n    return count \n    \ndef find_Non_decreasing_Sequence(A, N) : \n    '''\n    Write a python function to count the number of non-decreasing subsequences.\n    '''\n    \n    if N == 1 : \n        return 1\n    \n    count = 0\n    for i in range(N) : \n        count += find_Non_decreasing_Sequence(A, i+1)\n        \n        if i+1 < N : \n            if A[i] >= A[i+1] : \n                continue\n            else : \n                count += 1\n    return count \n    \ndef find_Even_Pair(A, N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 1) == 0 : \n                count += 1\n    return count \n    \ndef find_Binary_Sequence(A, N) : \n    '''\n    Write a python function to count the number of binary sequences having equal number of 0s and 1s. \n    '''\n    \n    count = 0\n    for i in range(2**N) : \n        ones_count = 0\n        for j in range(N) : \n            if ((i >> j) & 1) == 1 : \n                ones_count += 1\n        if ones_count % 2 == 0 : \n            count += 1\n    return count \n    \ndef find_Rotated_Sequence(A, N) : \n    '''\n    Write a python function to count the number of rotated sequence. \n    '''\n    \n    count = 0\n    for i in range(N) : \n        for j in range(i+1, N) : \n            for k in range(j+1, N) : \n                if A[i] < A[j] and A[j] < A[k] : \n                    count += 1\n    return count \n",
        "num_ids": 84
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N) : \n        for j in range(i + 1, N): \n            if(A[i] ^ A[j] & 1): \n                count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # code here\n    ans = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if ((A[i]^A[j]) & 1) : \n                ans += 1\n    return ans \n",
        "num_ids": 66
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if len(string) == 0:\n        return string\n    else:\n        if string[0].isupper():\n            string = string.lower()\n        else:\n            string = string.upper()\n        return toggle_string(string[1:]) + string[0]\n",
        "num_ids": 67
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if len(string) == 0:\n        return string\n    else:\n        char = string[0]\n        lower_flag = char.islower()\n        toggle_flag = (not lower_flag)\n        string = string.replace(char, char.upper() if toggle_flag else char.lower())\n        return toggle_string(string[1:])\n",
        "num_ids": 86
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(map(lambda x: x.lower() if x.isupper() else x.upper(), list(string)))\n",
        "num_ids": 33
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # If the input string is empty, return it as it is.\n    if len(string) == 0:\n        return string\n    # If the input string contains one character, then\n    # if the character is uppercase, then return the string \n    # with lowercase character.\n    # Else, if the character is lowercase, then return the string \n    # with uppercase character.\n    elif len(string) == 1:\n        if string.isupper():\n            return string.lower()\n        else:\n            return string.upper()\n    # Else if the string contains more than one character, then\n    # split the string into two parts and call toggle_string() \n    # on both parts.\n    else:\n        return toggle_string(string[0].swapcase() + string[1:])\n",
        "num_ids": 193
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    # create a variable to store the string with all lowercase characters\n    lower_string = string.lower()\n    # create a variable to store the string with all uppercase characters\n    upper_string = string.upper()\n    # return the toggled string\n    return lower_string + upper_string\n",
        "num_ids": 74
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    for i in range(len(string)):\n        if string[i].isalpha():\n            string = string[:i] + string[i].swapcase() + string[i+1:]\n",
        "num_ids": 49
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        else:\n            result.append(char.lower())\n    return \"\".join(result)\n",
        "num_ids": 55
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.swapcase() for char in string)\n",
        "num_ids": 20
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggle_list = [i.swapcase() for i in string]\n    return ''.join(toggle_list)\n",
        "num_ids": 31
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if (n1 == n2):\n        return 0\n    elif (n1 > n2):\n        n = str(n1)\n        l = list(n)\n        i = 0\n        sum = 0\n        while (i < len(l)):\n            sum += abs(int(l[i]) - int(l[i + 1]))\n            i += 1\n        return sum\n    elif (n1 < n2):\n        n = str(n2)\n        l = list(n)\n        i = 0\n        sum = 0\n        while (i < len(l)):\n            sum += abs(int(l[i]) - int(l[i + 1]))\n            i += 1\n        return sum\n    else:\n        return None\n",
        "num_ids": 184
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < 10 and n2 < 10:\n        return abs(n1 - n2)\n    elif n1 < 100 and n2 < 100:\n        n1_digit_1 = n1 % 10\n        n1_digit_2 = (n1 % 100) // 10\n        n2_digit_1 = n2 % 10\n        n2_digit_2 = (n2 % 100) // 10\n        return abs(n1_digit_1 - n2_digit_1) + abs(n1_digit_2 - n2_digit_2)\n    elif n1 < 1000 and n2 < 1000:\n        n1_digit_1 = n1 % 10\n        n1_digit_2 = (n1 % 100) // 10\n        n1_digit_3 = (n1 % 1000) // 100\n        n2_digit_1 = n2 % 10\n        n2_digit_2 = (n2 % 100) // 10\n        n2_digit_3 = (n2 % 1000) // 100\n        return abs(n1_digit_1 - n2_digit_1) + abs(n1_digit_2 - n2_digit_2) + abs(n1_digit_3 - n2_digit_3)\n    else:\n        print('The numbers cannot be more than 3 digits long.')\n",
        "num_ids": 316
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(a)-int(b)) for a,b in zip(str(n1),str(n2))])\n",
        "num_ids": 35
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == 0 and n2 == 0:\n        return 0\n    else:\n        return abs(n1 - n2)\n",
        "num_ids": 34
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    diff = 0\n    while n1!= 0 or n2!= 0:\n        diff += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    \n    return diff\n",
        "num_ids": 60
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if not isinstance(n1, int) or not isinstance(n2, int):\n        raise Exception('Input should be of type int')\n    if n1 == n2:\n        return 0\n    sum_of_n1 = sum([int(x) for x in str(n1)])\n    sum_of_n2 = sum([int(x) for x in str(n2)])\n    return abs(sum_of_n1 - sum_of_n2)\n",
        "num_ids": 116
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    while n1:\n        diff += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return diff\n",
        "num_ids": 47
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    str1 = str(n1)\n    str2 = str(n2)\n    len1 = len(str1)\n    len2 = len(str2)\n    \n    if len1 > len2:\n        str2 = str2.zfill(len1)\n    elif len1 < len2:\n        str1 = str1.zfill(len2)\n",
        "num_ids": 91
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n    digit_diff = 0\n    for i in range(len(n1_str)):\n        digit_diff += abs(int(n1_str[i]) - int(n2_str[i]))\n    return digit_diff\n",
        "num_ids": 82
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    print(f\"The sum of the per-digit difference between {n1} and {n2} is: {digit_distance_nums(n1, n2)}\")\n",
        "num_ids": 43
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    sub_array_sum = a[0]\n",
        "num_ids": 24
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    curr_sum = max_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
        "num_ids": 73
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = 0\n",
        "num_ids": 19
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max = a[0]\n    start = 0\n    end = 0\n    for i in range(0, size):\n        sum = 0\n        for j in range(i, size):\n            sum += a[j]\n            if sum > max:\n                max = sum\n                start = i\n                end = j\n    print(\"The maximum sum sublist is {} from index {} to index {}\".format(max, start, end))\n",
        "num_ids": 103
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = sum(a[:size])\n    current_sum = max_sum\n    for i in range(1, len(a)-size+1):\n        current_sum = current_sum - a[i-1] + a[i+size-1]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n",
        "num_ids": 92
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    start = 0\n",
        "num_ids": 21
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    global_max_sum = a[0]\n    global_max_sum_start = 0\n    global_max_sum_end = 0\n    start = 0\n    end = 0\n    local_sum = 0\n    for i in range(0, size):\n        local_sum += a[i]\n        if local_sum > global_max_sum:\n            global_max_sum = local_sum\n            global_max_sum_start = start\n            global_max_sum_end = end\n        if local_sum < 0:\n            local_sum = 0\n            start = i+1\n        end = i+1\n    return [global_max_sum, global_max_sum_start, global_max_sum_end]\n",
        "num_ids": 176
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_sum = -1\n    start_index = 0\n    end_index = 0\n    current_sum = 0\n    \n    for i in range(0, size):\n        current_sum = current_sum + a[i]\n        \n        if current_sum < 0:\n            current_sum = 0\n            start_index = i + 1\n            \n        if current_sum > max_sum:\n            max_sum = current_sum\n            end_index = i\n    \n    print(\"Max contiguous sublist sum: \" + str(max_sum))\n    print(\"Start index: \" + str(start_index))\n    print(\"End index: \" + str(end_index))\n    \n    return max_sum\n    \n",
        "num_ids": 176
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if(size==0):\n        return 0\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    start=0\n    end=0\n    s = 0\n",
        "num_ids": 51
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        max_sum += a[i]\n        for j in range(i+1, size):\n            max_sum += a[j]\n            if max_sum > max_sum:\n                max_sum = max_sum\n    return max_sum\n",
        "num_ids": 77
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
        "num_ids": 24
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in result:\n            result += (test_tup1[i],)\n    for i in range(len(test_tup2)):\n        if test_tup2[i] not in result:\n            result += (test_tup2[i],)\n    return sorted(result)\n",
        "num_ids": 104
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    list_union = list1 + list2\n    list_union.sort()\n    test_tup_union = tuple(list_union)\n    return test_tup_union\n",
        "num_ids": 71
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    union_list = []\n    for i in list1:\n        if i not in union_list:\n            union_list.append(i)\n    for i in list2:\n        if i not in union_list:\n            union_list.append(i)\n    union_list.sort()\n    tup = tuple(union_list)\n    return tup\n",
        "num_ids": 115
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1_set = set(test_tup1)\n    test_tup2_set = set(test_tup2)\n    union_set = test_tup1_set.union(test_tup2_set)\n    union_list = sorted(list(union_set))\n    return tuple(union_list)\n",
        "num_ids": 85
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    print(\"union_elements: \", union(test_tup1, test_tup2))\n",
        "num_ids": 26
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1\n    for i in test_tup2:\n        if i not in union:\n            union.append(i)\n    union = sorted(union)\n    return union\n",
        "num_ids": 50
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
        "num_ids": 24
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0:\n        return test_tup2\n    if len(test_tup2) == 0:\n        return test_tup1\n    if test_tup1 > test_tup2:\n        return union_elements(test_tup1[:-1], test_tup2) + [test_tup1[-1]]\n    return union_elements(test_tup1, test_tup2[:-1]) + [test_tup2[-1]]\n    \n",
        "num_ids": 131
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError('The input values should be tuples.')\n    if test_tup1 is None or test_tup2 is None:\n        raise ValueError('The input tuples should not be empty.')\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n    \ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError('The input values should be tuples.')\n    if test_tup1 is None or test_tup2 is None:\n        raise ValueError('The input tuples should not be empty.')\n    return tuple(sorted(set(test_tup1) & set(test_tup2)))\n    \ndef difference_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the difference of the elements of two given tuples and output them in sorted order.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError('The input values should be tuples.')\n    if test_tup1 is None or test_tup2 is None:\n        raise ValueError('The input tuples should not be empty.')\n    return tuple(sorted(set(test_tup1) - set(test_tup2)))\n    \ndef symmetric_difference_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the symmetric difference of the elements of two given tuples and output them in sorted order.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError('The input values should be tuples.')\n    if test_tup1 is None or test_tup2 is None:\n        raise ValueError('The input tuples should not be empty.')\n    return tuple(sorted(set(test_tup1 + test_tup2) - set(test_tup1) - set(test_tup2)))\n    ",
        "num_ids": 121
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    len_lst = []\n    for i in lst:\n        len_lst.append(len(i))\n    return max(len_lst)\n",
        "num_ids": 43
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # return max([len(lst) for lst in lst])\n    return max([len(lst) for lst in lst])\n",
        "num_ids": 37
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l = []\n    for i in range(len(lst)):\n        l.append(len(lst[i]))\n    return max(l)\n",
        "num_ids": 41
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = []\n    for i in range(len(lst)):\n        sublst = lst[i]\n        count = 1\n        for j in range(i+1,len(lst)):\n            if sublst == lst[j]:\n                count+=1\n                sublst = lst[j]\n        max_len.append(count)\n    return max(max_len)\n",
        "num_ids": 102
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0 \n    for i in lst: \n        if type(i) is list: \n            if len(i) > max_len: \n                max_len = len(i) \n    return max_len \n",
        "num_ids": 61
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst.sort()\n    if len(lst) == 0:\n        return 0\n    max_len = 0\n    for i in range(len(lst)):\n        if i == len(lst) - 1:\n            max_len = max_len\n        elif lst[i+1] - lst[i] == 1:\n            max_len += 1\n        else:\n            max_len = 0\n    return max_len\n",
        "num_ids": 110
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0 \n    for i in range(len(lst)):\n        sub = []\n        for j in range(len(lst)):\n            sub.append(lst[j][i])\n        if len(sub) > max_length:\n            max_length = len(sub)\n    return max_length \n",
        "num_ids": 83
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l = len(lst)\n    maxi = 0\n    for i in range(0, l):\n        for j in range(i+1, l):\n            #print(i,j, lst[i:j+1])\n            if len(lst[i:j+1]) > maxi:\n                maxi = len(lst[i:j+1])\n    return maxi\n",
        "num_ids": 98
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxlength = 0\n    for x in lst:\n        if type(x) is list:\n            if len(x) > maxlength:\n                maxlength = len(x)\n    return maxlength\n",
        "num_ids": 51
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    m = 0\n    for i in lst:\n        if type(i)==list:\n            if len(i)>m:\n                m=len(i)\n    return m\n",
        "num_ids": 47
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"6\":7\"7\":9\"8\":9\"9\":10'\n    #text = '\"3\":5\"4\":6\"5\":6\"",
        "num_ids": 2015
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = r\"\\\"([^\\\"]+)\\\"\"\n    return re.findall(regex, text)\n",
        "num_ids": 30
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    output = []\n    p = re.compile(r'\\\"(.*)\\\"')\n    for m in p.finditer(text):\n        output.append(m.group(1))\n    return output\n",
        "num_ids": 52
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    f = open(\"test_text.txt\", \"r\")\n    list_of_lines = f.readlines()\n    line = \" \".join(list_of_lines)\n    #print(line)\n    #line = line.replace('\"', '')\n    #print(line)\n",
        "num_ids": 71
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pat = re.compile('\"(.*?)\"')\n    pat2 = re.compile('\\'(.*?)\\'')\n    matches = pat.findall(text)\n    matches2 = pat2.findall(text)\n    return matches + matches2\n",
        "num_ids": 66
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # The return value should be a list of all the values from a string.\n    # The values should be stored in the order they are in the input string.\n    #\n    # If there are no values between quotation marks, return an empty list.\n    #\n    # You may assume that there are only one pair of parentheses in the string.\n    #\n    # You may assume that the string consists of letters, numbers, punctuation marks, and whitespace characters only.\n",
        "num_ids": 107
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Assume text is str object\n    text = re.findall(r'\"[^\"]*\"', text)\n    text = text[0]\n    text = text.split('\"')\n    return text\n",
        "num_ids": 52
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\"[^\"]+\"|\\'[^\\']+\\'|\\S+', text)\n",
        "num_ids": 32
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # text = \"You can get really high scores in {'a': 1, 'b': 2} without breaking any rules!\"\n    result = re.findall(r'\\\"(.+?)\\\"',text)\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # first approach\n    # \"he is a good guy\" --> ['good', 'guy']\n    # return re.findall(r'\"(.*?)\"', text)\n    \n    # second approach\n    # \"he is a good guy\" --> ['good', 'guy']\n    # return re.findall(r'\"[^\"]*\"', text)\n",
        "num_ids": 85
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    ans = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                ans += 1\n    return ans\n",
        "num_ids": 51
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if(arr[i]!=arr[j] and i<j):\n                count = count + 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    sum = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if(arr[i]!= arr[j]):\n                sum = sum + 1\n    return sum\n",
        "num_ids": 59
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # function to count pairs\n    def countPairs(arr,n):\n        # create an empty dictionary\n        dict = {}\n        # iterate over list of numbers\n        for i in range(0, n):\n            # if number is not in dictionary\n            if arr[i] not in dict:\n                # create a key of the number\n                dict[arr[i]] = 1\n            else:\n                # increment the count of the number by 1\n                dict[arr[i]] += 1\n        # initialise variable to track no. of pairs\n        count = 0\n        # iterate over the dictionary\n        for i in dict:\n            # iterate over dictionary again to check if value is a pair\n            for j in dict:\n                # if the pair is found, increment the pair count\n                if dict[i] == dict[j]:\n                    count += 1\n        return count\n        \n    # driver code\n    arr = [1,2,3,4,5,6,7]\n    n = len(arr)\n    print(countPairs(arr,n))\n    \n    \n    # code to find the count of pairs for given array\n    # function to count pairs\n    def countPairs(arr,n):\n        # create an empty dictionary\n        dict = {}\n        # iterate over list of numbers\n        for i in range(0, n):\n            # if number is not in dictionary\n            if arr[i] not in dict:\n                # create a key of the number\n                dict[arr[i]] = 1\n            else:\n                # increment the count of the number by 1\n                dict[arr[i]] += 1\n        # initialise variable to track no. of pairs\n        count = 0\n        # iterate over the dictionary\n        for i in dict:\n            # iterate over dictionary again to check if value is a pair\n            for j in dict:\n                # if the pair is found, increment the pair count\n                if dict[i] == dict[j]:\n                    count += 1\n        return count\n        \n    # driver code\n    arr = [1,2,3,4,5,6,7]\n    n = len(arr)\n    print(countPairs(arr,n))\n    \n    \n    \n    # code to find the count of pairs for given array\n    # function to count pairs\n    def countPairs(arr,n):\n        # create an empty dictionary\n        dict = {}\n        # iterate over list of numbers\n        for i in range(0, n):\n            # if number is not in dictionary\n            if arr[i] not in dict:\n                # create a key of the number\n                dict[arr[i]] = 1\n            else:\n                # increment the count of the number by 1\n                dict[arr[i]] += 1\n        # initialise variable to track no. of pairs\n        count = 0\n        # iterate over the dictionary\n        for i in dict:\n            # iterate over dictionary again to check if value is a pair\n            for j in dict:\n                # if the pair is found, increment the pair count\n                if dict[i] == dict[j]:\n                    count += 1\n        return count\n        \n    # driver code\n    arr = [1,2,3,4,5,6,7]\n    n = len(arr)\n    print(countPairs(arr,n))\n    \n    \n    \n    # code to find the count of pairs for given array\n    # function to count pairs\n    def countPairs(arr,n):\n        # create an empty dictionary\n        dict = {}\n        # iterate over list of numbers\n        for i in range(0, n):\n            # if number is not in dictionary\n            if arr[i] not in dict:\n                # create a key of the number\n                dict[arr[i]] = 1\n            else:\n                # increment the count of the number by 1\n                dict[arr[i]] += 1\n        # initialise variable to track no. of pairs\n        count = 0\n        # iterate over the dictionary\n        for i in dict:\n            # iterate over dictionary again to check if value is a pair\n            for j in dict:\n                # if the pair is found, increment the pair count\n                if dict[i] == dict[j]:\n                    count += 1\n        return count\n        \n    # driver code\n    arr = [1,2,3,4,5,6,7]\n    n = len(arr)\n    print(countPairs(arr,n))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1914
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count +=1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    s = set()\n    for i in arr:\n        s.add(i)\n    count = 0\n    for i in arr:\n        for j in arr:\n            if i!= j and (j,i) not in s:\n                count += 1\n    return count",
        "num_ids": 67
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n): \n        for j in range(0,n): \n            if ((arr[i]!= arr[j]) and (i < j)): \n                count += 1\n    return count \narr = [1, 2, 1, 5] \nn = len(arr) \nprint(count_Pairs(arr,n))\n",
        "num_ids": 96
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr = sorted(arr)\n    i = 0\n    count = 0\n    while i < n-1:\n        if arr[i] == arr[i+1]:\n            count +=1\n            i+=2\n        else:\n            i+=1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if (arr[i]!= arr[j]):\n                count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return (n % 10) + sum_digits(int(n / 10))\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_digit = 0\n    while n > 0:\n        sum_digit = n % 10 + sum_digit\n        n //= 10\n    return sum_digit\n",
        "num_ids": 41
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\n",
        "num_ids": 29
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(int(n / 10))\n",
        "num_ids": 31
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 29
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\n",
        "num_ids": 29
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    if n == 0:\n        return 0\n    while n!= 0:\n        sum = sum + (n % 10)\n        n = int(n / 10)\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(d) for d in str(n))\n",
        "num_ids": 18
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = str(n)\n    result = 0\n    for i in s:\n        result += int(i)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(n//10)\n",
        "num_ids": 29
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(issort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\n",
        "num_ids": 71
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # for i in range(len(list1) - 1):\n    #     if list1[i] > list1[i+1]:\n    #         return False\n    # return True\n",
        "num_ids": 47
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # if list1[0] <= list1[1]:\n    #     for i in range(1,len(list1)):\n    #         if list1[i] < list1[i-1]:\n    #             return False\n    #     return True\n    # else:\n    #     return False\n    for i in range(0,len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 115
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not list1:\n        return None\n    else:\n        if len(list1) < 2:\n            return True\n        else:\n            if list1[0] <= list1[1]:\n                return issort_list(list1[1:])\n            else:\n                return False\n",
        "num_ids": 72
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    for index in range(0,len(list1)-1):\n        if list1[index] > list1[index+1]:\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n",
        "num_ids": 13
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n",
        "num_ids": 13
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    else:\n        return list1[0] <= list1[1] and issort_list(list1[1:])\n",
        "num_ids": 47
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    is_sorted = True\n    for i in range(0,len(list1)-1):\n        if list1[i] > list1[i+1]:\n            is_sorted = False\n    return is_sorted\n",
        "num_ids": 57
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}]*length\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(0,length):\n        l.append({})\n    return l\n",
        "num_ids": 29
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n    # def empty_dict():\n    #     return {}\n",
        "num_ids": 29
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list = [{} for i in range(length)]\n    return list\n",
        "num_ids": 20
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(0, length):\n        my_list.append({})\n    return my_list\n",
        "num_ids": 35
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dicts = []\n    for i in range(length):\n        list_of_dicts.append({})\n",
        "num_ids": 33
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for each_list in list1:\n        each_list.sort()\n",
        "num_ids": 20
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Use the sorted() function to sort the lists\n    return sorted([sorted(sublist) for sublist in list1])\n",
        "num_ids": 32
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublist(list1, list2):\n        if len(list1) == 0:\n            return list2\n        elif len(list1) == 1:\n            return list1\n        else:\n            for i in range(len(list1)):\n                for j in range(len(list1)):\n                    if len(list1[i]) > len(list1[j]):\n                        list1[i], list1[j] = list1[j], list1[i]\n                    elif len(list1[i]) == len(list1[j]):\n                        if list1[i] > list1[j]:\n                            list1[i], list1[j] = list1[j], list1[i]\n                    else:\n                        continue\n            return list1\n    if type(list1[0]) == list:\n        for i in range(len(list1)):\n            list1[i] = sort_sublist(list1[i], [])\n        return sort_sublist(list1, [])\n    else:\n        return list1\n",
        "num_ids": 258
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "num_ids": 29
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if type(list1[0]) == str:\n        return list1\n    else:\n        return [sorted(i) for i in list1]\n",
        "num_ids": 39
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "num_ids": 23
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "num_ids": 29
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for lst in list1:\n        lst.sort()\n",
        "num_ids": 18
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    # iterate over the sublists\n    for sublist in list1:\n        # sort each sublist\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n",
        "num_ids": 56
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n    return list1\n",
        "num_ids": 21
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_unique = set(nums)\n    print(nums_unique)\n    return list(nums_unique)\n",
        "num_ids": 33
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set(nums)\n    return nums_set\n",
        "num_ids": 21
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    try:\n        nums = list(set(nums))\n        nums.sort()\n        return nums\n    except:\n        raise Exception(\"Error while trying to remove duplicate numbers\")\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return sorted(set([i for i in nums if nums.count(i) == 1]))\n",
        "num_ids": 27
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = list(set(nums))\n    return nums\n",
        "num_ids": 19
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = [list(set(x)) for x in nums]\n    return nums\n",
        "num_ids": 25
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    def unique_nums(nums):\n        return set(nums)\n",
        "num_ids": 21
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for x in nums:\n        if x not in new_list:\n            new_list.append(x)\n    return new_list\n",
        "num_ids": 43
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return set(nums)\n",
        "num_ids": 10
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set([i for lst in nums for i in lst]))\n",
        "num_ids": 23
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [12,23,34,12,23,34,12,23,34,45,56,67,78,89,90]\n    prod_list = 1\n    for i in list_data:\n        if i not in prod_list:\n            prod_list *= i\n    print(prod_list)\n    return prod_list\n",
        "num_ids": 90
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for item in set(list_data):\n        result *= item\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = list(set(list_data))\n    #print(list_data)\n    prod = 1\n    for num in list_data:\n        prod = prod * num\n    return prod\n",
        "num_ids": 52
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(operator.mul, list(set(list_data)), 1)\n",
        "num_ids": 22
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    s = set(list_data)\n    product = 1\n    for i in s:\n        product = product*i\n    return product\n    \ndef unique_product_in_list_of_list(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list of list.\n    '''\n    result = []\n    for i in list_data:\n        s = set(i)\n        product = 1\n        for j in s:\n            product = product*j\n        result.append(product)\n    return result\n    \ndef least_common_multiple_two_list(list_data1, list_data2):\n    '''\n    Write a python function to find the least common multiple of two numbers in two lists.\n    '''\n    return (list_data1[0]*list_data2[0])/math.gcd(list_data1[0],list_data2[0])\n    \ndef least_common_multiple_n_list(list_data, n):\n    '''\n    Write a python function to find the least common multiple of a number in a list of lists.\n    '''\n    result = []\n    for i in range(0,len(list_data)):\n        result.append(least_common_multiple_two_list(list_data[i], list_data[(i+1)%len(list_data)]))\n    return result\n    \ndef least_common_multiple_multiple_n_list(list_data, n):\n    '''\n    Write a python function to find the least common multiple of a number in a list of lists.\n    '''\n    result = []\n    for i in range(0,len(list_data)):\n        list_temp = []\n        for j in range(0, len(list_data)):\n            list_temp.append(list_data[i][j])\n        result.append(least_common_multiple_two_list(list_temp, list_data[(i+1)%len(list_data)]))\n    return result\n    \ndef least_common_multiple_multiple_n_list_multiple_list(list_data, n):\n    '''\n    Write a python function to find the least common multiple of a number in a list of lists.\n    '''\n    result = []\n    for i in range(0,len(list_data)):\n        list_temp = []\n        for j in range(0, len(list_data)):\n            list_temp.append(list_data[i][j])\n        result.append(least_common_multiple_multiple_n_list(list_temp, n))\n    return result\n    \ndef greatest_common_divisor_multiple_n_list(list_data):\n    '''\n    Write a python function to find the greatest common divisor of a number in a list of lists.\n    '''\n    return max(list_data)\n    \ndef least_common_multiple_multiple_n_list_multiple_list(list_data):\n    '''\n    Write a python function to find the least common multiple of a number in a list of lists.\n    '''\n    result = []\n    for i in range(0,len(list_data)):\n        list_temp = []\n        for j in range(0, len(list_data)):\n            list_temp.append(list_data[i][j])\n        result.append(greatest_common_divisor_multiple_n_list(list_temp))\n    return result\n    \ndef least_common_multiple_multiple_n_list_multiple_list_multiple_list(list_data):\n    '''\n    Write a python function to find the least common multiple of a number in a list of lists.\n    '''\n    result = []\n    for i in range(0,len(list_data)):\n        list_temp = []\n        for j in range(0, len(list_data)):\n            list_temp.append(list_data[i][j])\n        result.append(least_common_multiple_multiple_n_list(list_temp, len(list_data)))\n    return result\n    \ndef create_matrix(row, column):\n    '''\n    Write a python function to create a matrix of given rows and columns with values from 1 to n*n.\n    '''\n    result = []\n    for i in range(1,row+1):\n        list_temp = []\n        for j in range(1,column+1):\n            list_temp.append(i*j)\n        result.append(list_temp)\n    return result\n    \ndef transpose_matrix(list_data):\n    '''\n    Write a python function to transpose a matrix.\n    '''\n    row = len(list_data)\n    column = len(list_data[0])\n    result = [[0 for i in range(row)] for j in range(column)]\n    for i in range(row):\n        for j in range(column):\n            result[j][i] = list_data[i][j]\n    return result\n    \ndef mirror_matrix(list_data):\n    '''\n    Write a python function to mirror a matrix.\n    '''\n    result = [[0 for i in range(len(list_data))] for j in range(len(list_data[0]))]\n    for i in range(len(list_data)):\n        for j in range(len(list_data[0])):\n            result[j][i] = list_data[i][j]\n    return result\n    \ndef rotate_matrix(list_data):\n    '''\n    Write a python function to rotate a matrix in 90 degree clockwise.\n    '''\n    row = len(list_data)\n    column = len(list_data[0])\n    result = [[0 for i in range(column)] for j in range(row)]\n    for i in range(row):\n        for j in range(column):\n            result[j][i] = list_data[i][j]\n    result = transpose_matrix(result)\n    result = mirror_matrix(result)\n    return result\n    \ndef flip_matrix_horizontal(list_data):\n    '''\n    Write a python function to flip a matrix horizontally.\n    '''\n    result = []\n    for i in range(len(list_data)):\n        list_temp = []\n        for j in range(len(list_data)-1,-1, -1):\n            list_temp.append(list_data[i][j])\n        result.append(list_temp)\n    return result\n    \ndef flip_matrix_vertical(list_data):\n    '''\n    Write a python function to flip a matrix vertically.\n    '''\n    result = []\n    for i in range(len(list_data)-1,-1,-1):\n        list_temp = []\n        for j in range(len(list_data)):\n            list_temp.append(list_data[j][i])\n        result.append(list_temp)\n    return result\n    \ndef get_diagonal_left_right(list_data, n):\n    '''\n    Write a python function to get diagonal values of a matrix from left to right.\n    '''\n    result = []\n    row = len(list_data)\n    column = len(list_data[0])\n    for i in range(row):\n        list_temp = []\n        j = i\n        k = 0\n        while j < row and k < column:\n            list_temp.append(list_data[j][k])\n            j = j+1\n            k = k+1\n        result.append(list_temp)\n    return result\n    \ndef get_diagonal_right_left(list_data, n):\n    '''\n    Write a python function to get diagonal values of a matrix from right to left.\n    '''\n    result = []\n    row = len(list_data)\n    column = len(list_data[0])\n    for i in range(row):\n        list_temp = []\n        j = i\n        k = len(list_data[0])-1\n        while j < row and k >= 0:\n            list_temp.append(list_data[j][k])\n            j = j+1\n            k = k-1\n        result.append(list_temp)\n    return result\n    ",
        "num_ids": 120
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product = product * i\n    return product\n",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Your code here\n    #list_data = [1,1,1,2,2,3,3,4,4]\n    print(f\"Unique number: {len(set(list_data))}\")\n    print(f\"Product: {np.prod(set(list_data))}\")\n",
        "num_ids": 76
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list=set(list_data)\n    product=1\n    for i in unique_list:\n        product*=i\n    print(product)\n",
        "num_ids": 40
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1, 2, 3, 4, 1, 1, 2]\n    unique_list = set(list_data)\n    product_of_unique_list = 1\n    for i in unique_list:\n        product_of_unique_list *= i\n    print(product_of_unique_list)\n    return product_of_unique_list\n",
        "num_ids": 89
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_number = []\n    for data in list_data:\n        if data not in unique_number:\n            unique_number.append(data)\n",
        "num_ids": 38
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    \n",
        "num_ids": 30
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    S = 2*math.pi*r*(r+h)\n    print(S)\n",
        "num_ids": 29
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*3.14*r*h + 2*3.14*r**2\n    return surface_area\n",
        "num_ids": 33
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2*3.14*r*h + 2*3.14*r**2\n    return sa\n",
        "num_ids": 29
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h + 2 * pi * r**2\n",
        "num_ids": 20
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2 * 3.14 * r * (r + h)\n    print(\"The surface area of the cylinder is:\",surfacearea)\n    return surfacearea\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surfacearea = (1/3) * 3.14 * r * (r + h)\n    print(\"The surface area of the cone is:\",surfacearea)\n    return surfacearea\ndef surfacearea_cone_hexagon(r,h):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    surfacearea = 3 * 3.14 * r * h\n    print(\"The surface area of the hexagon is:\",surfacearea)\n    return surfacearea\ndef surfacearea_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfacearea = 6 * 3.14 * r * r\n    print(\"The surface area of the cube is:\",surfacearea)\n    return surfacearea\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 3.14 * r * r * h\n    print(\"The volume of the cylinder is:\",volume)\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * 3.14 * r * r * h\n    print(\"The volume of the cone is:\",volume)\n    return volume\ndef volume_hexagon(r,h):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    volume = 3 * 3.14 * r * r * h\n    print(\"The volume of the hexagon is:\",volume)\n    return volume\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = 6 * 3.14 * r * r\n    print(\"The volume of the cube is:\",volume)\n    return volume\n",
        "num_ids": 33
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2*math.pi*r*(r+h)\n    print('The surface area of a cylinder with radius of ',r,' and height of ',h,' is: ',sa)\n    return\n",
        "num_ids": 49
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (22/7) * r**2 * h\n    return area\n",
        "num_ids": 21
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    area = 2*math.pi*r*(r+h)\n    return(area)\n",
        "num_ids": 29
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2 * pi * r**2) + (2 * pi * r * h)\n",
        "num_ids": 24
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A: \n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    a = len(A)\n    b = len(B)\n    flag = 0\n    for i in range(0,b):\n        if flag == 0 and A[0] == B[i]:\n            flag = 1\n        elif flag == 0 and A[0]!= B[i]:\n            flag = 0\n        elif flag == 1 and A[a-1]!= B[i-1]:\n            flag = 0\n        elif flag == 1 and A[a-1] == B[i-1]:\n            flag = 1\n    if flag == 1:\n        return True\n    else:\n        return False",
        "num_ids": 149
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A = [1, 2, 3, 4, 5, 6, 7, 8]\n    B = [3, 4, 5]\n    if len(B) > len(A):\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag=0\n    for i in range(0,len(B)):\n        if A[i]==B[i]:\n            flag=1\n    if flag==1:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 57
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    while (i < len(A)):\n        j = 0\n        while (j < len(B)):\n            if A[i] == B[j]:\n                i = i + 1\n                j = j + 1\n                break\n            else:\n                j = j + 1\n        if (j == len(B)):\n            return False\n    return True\n",
        "num_ids": 93
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not len(A) or not len(B):\n        return False\n    a = len(A)\n    b = len(B)\n    if a>b:\n        return False\n    if b == 1:\n        return A[0] == B[0]\n    if A[0] == B[0] and a==1 and b==1:\n        return True\n    if A[0] == B[0] and a>1 and b==1:\n        return True\n    return is_Sub_Array(A[1:],B[1:])",
        "num_ids": 134
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #check whether list is sublist of another\n    #A=[1,2,3,4,5]\n    #B=[1,2,3]\n    if len(A)<len(B):\n        return False\n    #found=[]\n    #for i in range(len(B)-len(A)+1):\n    #    if B[i:len(A)+i]==A:\n    #        found.append(B[i:len(A)+i])\n    #return found\n    for i in range(len(B)-len(A)+1):\n        if B[i:len(A)+i]==A:\n            return True\n    return False\n",
        "num_ids": 161
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    x=0\n    for i in range(0,len(A)):\n        if(A[i]==B[x]):\n            if(x==len(B)-1):\n                return True\n            x=x+1\n        else:\n            return False\n    return False\n",
        "num_ids": 70
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    sub = 0\n    flag = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if B[j] == A[i]:\n                flag = 1\n            else:\n                continue\n        if flag == 1:\n            sub += 1\n            flag = 0\n        else:\n            break\n    if sub == len(A):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "num_ids": 109
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # A = [1,3,4,5,6,9,10,12,13]\n    # B = [1,3,5,9]\n    l1 = len(A)\n    l2 = len(B)\n    c = 0\n    i = 0\n    j = 0\n    while i < l1 and j < l2:\n        if A[i] == B[j]:\n            j = j+1\n            c = c+1\n        else:\n            i = i+1\n            j = 0\n    if c == l2:\n        return True\n    else:\n        return False\nA = [1,3,4,5,6,9,10,12,13]\nB = [1,3,5,9]\nprint(\"A is sublist of B -\",is_Sub_Array(A,B)",
        "num_ids": 202
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    return fact % 10\n    \ndef is_BST(root, left = None, right = None):\n    if root:\n        return is_BST(root.left, left, root) and is_BST(root.right, root, right)\n        if left and right:\n            return left.data < root.data < right.data\n        else:\n            return left.data < root.data < right.data\n",
        "num_ids": 126
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Declaring a variable f and assign the value of n to it.\n    f = n\n    # Declaring a variable l and assign the value of n to it.\n    l = n\n",
        "num_ids": 46
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the variable sum\n    sum = 1\n    # Print the first number of the factorial series\n    print(sum)\n    # Iterate through each number of the factorial series\n    for i in range(1, n):\n        # Find the factorial of every number in the sequence\n        sum = sum*i\n    # Print the last number of the factorial series\n    print(sum)\n",
        "num_ids": 95
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 1: \n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n",
        "num_ids": 35
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while(n>1):\n        factorial = factorial*n\n        n = n-1\n    return factorial\n",
        "num_ids": 37
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        return -1\n    else:\n        return len(str(factorial(n)))\n",
        "num_ids": 30
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    try:\n        if n < 1:\n            return \"Factorial of a Negative Number is Not Defined!\"\n        elif n == 1:\n            return 1\n        else:\n            return n*last_Digit_Factorial(n-1)\n    except Exception as ex:\n        return ex\n",
        "num_ids": 72
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    return str(fact)[-1]\n",
        "num_ids": 37
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    res = 1\n    for i in range(1, n + 1): \n        res = res * i \n    return res % 10\n",
        "num_ids": 35
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0:\n        return 1\n    if n == 1:\n        return 1\n    factorial = 1\n    while(n>1):\n        factorial = factorial*n\n        n-=1\n    return factorial\n",
        "num_ids": 58
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for t in zip(list1,list2,list3) for item in t]\n",
        "num_ids": 26
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_result = []\n    for i in range(0,len(list1)):\n        list_result.append(list1[i])\n        list_result.append(list2[i])\n        list_result.append(list3[i])\n    return list_result\n",
        "num_ids": 69
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #Approach 1: Using zip\n    # zip(list1, list2, list3)\n    #interleaved = [element for t in zip(list1, list2, list3) for element in t]\n",
        "num_ids": 53
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    result += list1\n    result += list2\n    result += list3\n    return result\n    \n    \ndef interleave_lists2(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result\n    \n    \ndef interleave_lists3(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result += [list1[i]]\n        result += [list2[i]]\n        result += [list3[i]]\n        \n    return result\n    \n    \ndef interleave_lists4(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result\n    \n    \ndef interleave_lists5(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result\n    \n    \ndef interleave_lists6(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result\n    \n    \ndef interleave_lists7(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result += [list1[i]]\n        result += [list2[i]]\n        result += [list3[i]]\n        \n    return result\n    \n    \ndef interleave_lists8(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result\n    \n    \ndef interleave_lists9(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result\n    \n    \ndef interleave_lists10(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result\n    \n    \ndef interleave_lists11(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result\n    \n    \ndef interleave_lists12(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result += [list1[i]]\n        result += [list2[i]]\n        result += [list3[i]]\n    \n    return result\n    \n    \ndef interleave_lists13(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result += [list1[i]]\n        result += [list2[i]]\n        result += [list3[i]]\n    \n    return result\n    \n    \ndef interleave_lists14(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result += [list1[i]]\n        result += [list2[i]]\n        result += [list3[i]]\n    \n    return result\n    \n    \ndef interleave_lists15(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result += [list1[i]]\n        result += [list2[i]]\n        result += [list3[i]]\n    \n    return result\n    \n    \ndef interleave_lists16(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result += [list1[i]]\n        result += [list2[i]]\n        result += [list3[i]]\n    \n    return result\n    \n    \ndef interleave_lists17(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result += [list1[i]]\n        result += [list2[i]]\n        result += [list3[i]]\n    \n    return result\n    \n    \ndef interleave_lists18(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result += [list1[i]]\n        result += [list2[i]]\n        result += [list3[i]]\n    \n    return result\n    \n    \ndef interleave_lists19(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    result = []\n    \n    for i in range(len(list1)):\n        result += [list1[i]]\n        result += [list2[i]]\n        result += [list3[i]]\n    \n    return result\n    \n    \ndef interleave_lists20(list1,list2,list3):\n    '''",
        "num_ids": 1
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [elem for elem_list in zip(list1,list2,list3) for elem in elem_list]\n",
        "num_ids": 34
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = [None]*len(list1)\n    i,j,k = 0,0,0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        new_list[i] = list1[i]\n        new_list[i+1] = list2[j]\n        new_list[i+2] = list3[k]\n        i +=3\n        j +=1\n        k +=1\n    return new_list\n",
        "num_ids": 123
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1 = list(list1)\n    list2 = list(list2)\n    list3 = list(list3)\n    assert len(list1) == len(list2) == len(list3), 'All 3 lists should be the same length'\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n",
        "num_ids": 127
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #we will iterate through each of the three lists, and take the number of items \n    #the length of the smallest list. Then we will put the items of the list in the\n    #smallest list in order.\n    #after iterating through all 3 lists, we will have all of the items in a single list.\n    \n    if len(list1)==len(list2) and len(list1)==len(list3):\n        out_list=[]\n        for x in range(len(list1)):\n            out_list.append(list1[x])\n            out_list.append(list2[x])\n            out_list.append(list3[x])\n        return out_list\n    else:\n        return 'ERROR, lists are not all of the same length'\n    ",
        "num_ids": 189
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    newlist = []\n    i = 0\n    while i < len(list1):\n        newlist.append(list1[i])\n        newlist.append(list2[i])\n        newlist.append(list3[i])\n        i += 1\n    return newlist\n",
        "num_ids": 69
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [e1 for pair in zip(list1,list2,list3) for e1 in pair]\n",
        "num_ids": 28
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # If both are empty, then return empty list\n    if len(test_tup1) == 0 and len(test_tup2) == 0:\n        return []\n    # If one of the tuples is empty, then return the second tuple\n    elif len(test_tup1) == 0:\n        return test_tup2\n    elif len(test_tup2) == 0:\n        return test_tup1\n    else:\n        # If none of the tuples are empty\n        # If the tuples are of different length, then return empty list\n        if len(test_tup1)!= len(test_tup2):\n            return []\n        # Else, if the tuples are of same length\n        else:\n            # Initialize a list to store the dissimilar elements\n            dissimilar_elems = []\n            # Loop through all the tuples to find the dissimilar elements\n            for i in range(len(test_tup1)):\n                # If the tuples are equal, then continue\n                if test_tup1[i] == test_tup2[i]:\n                    continue\n                else:\n                    dissimilar_elems.append(test_tup1[i])\n                    dissimilar_elems.append(test_tup2[i])\n            # Return the dissimilar elements list\n            return dissimilar_elems\n",
        "num_ids": 326
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Hint: Use all(), any() built-in functions\n",
        "num_ids": 17
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    return [i for i in lst1 if i not in lst2]\n",
        "num_ids": 49
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result_list = []\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result_list.append(test_tup1[i])\n    return result_list\n",
        "num_ids": 70
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # First check if the two tuples have different length\n    if len(test_tup1)!= len(test_tup2):\n        return 'Tuples have different length'\n    else:\n        # Create a list of lists containing the elements in each of the tuples\n        list_of_tuples = [test_tup1, test_tup2]\n        list_of_elements = []\n        for each_tuple in list_of_tuples:\n            list_of_elements.append(list(each_tuple))\n        # Create a list of list containing the possible pairs\n        list_of_possible_pairs = []\n        for i in range(0, len(list_of_elements)):\n            for j in range(0, len(list_of_elements)):\n                if list_of_elements[i]!= list_of_elements[j] and i < j:\n                    pair = [list_of_elements[i], list_of_elements[j]]\n                    list_of_possible_pairs.append(pair)\n        # Check if the pair of tuples has different elements\n        set1 = set(list_of_tup1)\n        set2 = set(list_of_tup2)\n        list_of_possible_pairs = [x for x in list_of_possible_pairs if set(x).issubset(set1) and set(x).issubset(set2)]\n        if list_of_possible_pairs:\n            return list_of_possible_pairs\n        else:\n            return 'No dissimilar elements'\n",
        "num_ids": 392
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(set(test_tup1) ^ set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # your code here\n    result = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            result.append(i)\n    for j in test_tup2:\n        if j not in test_tup1:\n            result.append(j)\n    return tuple(result)\n",
        "num_ids": 82
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return (set(test_tup1) & set(test_tup2))\n",
        "num_ids": 23
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [tup for tup in test_tup1 if tup not in test_tup2]\n",
        "num_ids": 28
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    similar = []\n    dissimilar = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            similar.append(item)\n    for item in test_tup2:\n        if item not in test_tup1:\n            dissimilar.append(item)\n    print('Similar:', similar)\n    print('Dissimilar:', dissimilar)\n",
        "num_ids": 99
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = [(1,2),(3,5,6,8),(3,4),(2,9,1,2,3),(3,5,6,8,9,10)]\n    print(\"Original Tuple: \",test_tuple)\n    new_tuple = []\n    for i in range(len(test_tuple)):\n        if len(test_tuple[i]) == even_fnc:\n            new_tuple.append(test_tuple[i])\n    return new_tuple\n",
        "num_ids": 130
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if (even_fnc(i)):\n            new_tuple.append(i)\n    return tuple(new_tuple)\n    \n    ",
        "num_ids": 56
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    print('\\n# Even elements in tuple')\n    print('test_tuple:', test_tuple)\n    new_tuple = tuple(even_fnc(test_tuple, lambda x: x%2 == 0))\n    print('new_tuple:', new_tuple)\n",
        "num_ids": 72
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [i for i in test_tuple if even_fnc(i)]\n",
        "num_ids": 22
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for ele in test_tuple:\n        if even_fnc(ele):\n            result.append(ele)\n    return tuple(result)\n",
        "num_ids": 42
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    #test_tuple = ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199))\n    # Write a function to remove uneven elements in the nested mixed tuple.\n    # even_fnc = lambda x: x % 2 == 0\n    # test_tuple = tuple(filter(even_fnc, test_tuple))\n    test_tuple = tuple(filter(even_fnc, test_tuple))\n    return test_tuple\n",
        "num_ids": 686
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    lst=[]\n    for i in test_tuple:\n        for j in i:\n            if even_fnc(j):\n                lst.append(j)\n    return tuple(lst)\n",
        "num_ids": 52
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    def even_ele(x): \n        if x%2 == 0:\n            return x \n    \n    return tuple(map(even_ele, test_tuple))\n    \n    \ndef even_ele(test_tuple): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    def even_ele(x): \n        if x%2 == 0:\n            return x \n    \n    return tuple(map(even_ele, test_tuple))\n    \ndef test_even_ele():\n    test_tuple = (2, 1, 3, 4, 5, 6, 7) \n    expected = (2, 4, 6) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (3, 6, 1, 4, 5, 6, 7) \n    expected = (6, 4, 6) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (2, 3, 4, 5, 6, 7) \n    expected = (2, 4, 6) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (3, 4, 5, 6, 7) \n    expected = (4, 6) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (2, 3, 4, 5, 6) \n    expected = (2, 4, 6) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (3, 6, 1, 4, 5) \n    expected = (6, 4, 6) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (2, 3, 4, 5) \n    expected = (2, 4, 6) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (3, 4, 5) \n    expected = (4, 6) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (2, 3, 4) \n    expected = (2, 4, 6) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (3, 6) \n    expected = (6, 6) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (2, 3) \n    expected = (2, 6) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (3,) \n    expected = (6,) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = () \n    expected = () \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1) \n    expected = () \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2) \n    expected = (1) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3) \n    expected = (1, 2) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4) \n    expected = (1, 2, 3) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4, 5) \n    expected = (1, 2, 3, 4) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4, 5, 6) \n    expected = (1, 2, 3, 4, 5) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7) \n    expected = (1, 2, 3, 4, 5, 6) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8) \n    expected = (1, 2, 3, 4, 5, 6, 7, 8) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9) \n    expected = (1, 2, 3, 4, 5, 6, 7, 8, 9) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) \n    expected = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) \n    expected = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) \n    expected = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) \n    expected = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) \n    expected = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) \n    expected = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) \n    expected = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) \n    expected = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) \n    expected = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) \n    assert even_ele(test_tuple) == expected \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) \n    expecte",
        "num_ids": 1929
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [x for x in test_tuple if even_fnc(x)]\n",
        "num_ids": 22
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_list = [i if even_fnc(i) else None for i in test_tuple]\n    return tuple(i for i in test_list if i)\n",
        "num_ids": 43
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)\n",
        "num_ids": 10
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b * b) + (b * b * s)\n    \ndef volume_of_a_sphere(r):\n    '''\n    Write a python function to find the volume of a sphere with a given radius.\n    '''\n    return (4/3) * 3.14 * (r ** 3)\n    \ndef volume_of_a_cube(a):\n    '''\n    Write a python function to find the volume of a cube with a given side.\n    '''\n    return a ** 3\n",
        "num_ids": 8
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n",
        "num_ids": 6
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 3*b*s\n    return area\n",
        "num_ids": 15
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sa = b*s\n    return sa\n",
        "num_ids": 13
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * (b * s) + (((b * s) * (b * s + 1)) / 2)\n",
        "num_ids": 30
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    from math import sqrt\n    def area_square_pyramid(b,h):\n        '''\n        Given base and height of a square pyramid, find its surface area.\n        '''\n        surface_area = (1/4)*b**2*h\n        return surface_area\n",
        "num_ids": 24
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return(b*b*s)\n",
        "num_ids": 12
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    l = s\n    s = (b*b) * (l*3) / 3\n    print(\"Surface Area of the square pyramid : \",s)\n",
        "num_ids": 39
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    p = b*s\n    a = (b*s)*2\n    print('The surface area of a square pyramid with a given base edge and height is {} square units.'.format(a))\n    return a\n",
        "num_ids": 51
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return bool(dict1)\n",
        "num_ids": 10
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    return True\n",
        "num_ids": 16
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True\n",
        "num_ids": 20
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('Empty dictionary')\n    else:\n        print('Dictionary is not empty')\n",
        "num_ids": 34
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('The dictionary is empty')\n        return\n    else:\n        print('The dictionary is not empty')\n        return\n    \n    \nmy_dict({'n': 1,'m': 2, 'o': 3, 'p': 4})",
        "num_ids": 69
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False\n",
        "num_ids": 20
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 29
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num<0:\n        return 0\n    elif num==0:\n        return 1\n    else:\n        return int(factorial(2*num)/(factorial(num)*factorial(num+1)))\n        \ndef generate_all_catalan_numbers(num):\n    '''\n    Write a function which generates all catalan numbers from 1 to num.\n    '''\n    if num<0:\n        return []\n    elif num==0:\n        return [0]\n    else:\n        ans=[]\n        for i in range(1,num+1):\n            ans.append(catalan_number(i))\n        return ans\n",
        "num_ids": 66
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (catalan_number(num-1)*((4*num-2)*(num)+1))//(num+2)\n",
        "num_ids": 60
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # num = input(\"Give me the number\")\n    # num = int(num)\n    # temp = num\n    # t = 0\n    # while temp > 0:\n    #     t = t + (temp % 10)\n    #     temp = int(temp/10)\n    # ct = int((4*num) / (t+1) / (t+2))\n    # print(\"The number of catalan numbers till\", num, \"are\", ct)\n",
        "num_ids": 113
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    result = [0]*(num+1)\n    result[0], result[1] = 1, 1\n    for i in range(2, num+1):\n        result[i] = 0\n        for j in range(i):\n            result[i] += result[j] * result[i-j-1]\n    return result[num]\n",
        "num_ids": 101
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return (num * catalan_number(num -1))/2\n",
        "num_ids": 38
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1)*(4*(num-1)+2)/(num+1)\n",
        "num_ids": 56
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise ValueError(\"Input must be greater than 0!\")\n",
        "num_ids": 23
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return num * catalan_number(num - 1)\n    \ndef main():\n    print(\"The Catalan number for n = 1 is 1:\", catalan_number(1))\n    print(\"The Catalan number for n = 2 is 2:\", catalan_number(2))\n    print(\"The Catalan number for n = 3 is 5:\", catalan_number(3))\n    \nmain()",
        "num_ids": 107
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    catalan = [0 for _ in range(num+1)]\n    catalan[0] = 1\n    for i in range(1, num+1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-1-j]\n    return catalan[num]\n",
        "num_ids": 91
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'(\\w+)ly')\n    match = pattern.finditer(text)\n    adverbs = [m.group() for m in match]\n    return adverbs\n",
        "num_ids": 49
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'ly\\b')\n    matches = pattern.findall(text)\n    if matches:\n        return matches\n    else:\n        return None\n    \ndef find_and_replace(text):\n    '''\n    Write a function to find and replace all the words with length greater than 2 in the given string with their length + 2.\n    '''\n    pattern = re.compile(r'\\b\\w{2,}')\n    matches = pattern.findall(text)\n    if matches:\n        for match in matches:\n            length = len(match)\n            text = text.replace(match, match + str(length+2))\n    return text\n",
        "num_ids": 76
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result=[]\n    pattern=r'(?<=\\s)[A-Za-z]+(?=ly)'\n    match=re.finditer(pattern,text)\n    for i in match:\n        result.append(i.span())\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    text = text.lower()\n    for i in range(len(text)):\n        if text[i] == 'ly' and text[i-1] =='' and text[i+1] =='':\n            adverbs.append(i)\n    return adverbs\n",
        "num_ids": 72
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r'ly'\n    result = re.findall(regex, text)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # get all adverbs ending with ly\n    result = re.findall(r'\\b\\w+ly\\b', text)\n",
        "num_ids": 34
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    split_text = re.split('\\W',text)\n    text_len = len(split_text)\n    i = 0\n    flag = 0\n    found_text = ''\n    while i < text_len:\n        if split_text[i] == 'ly':\n            flag = 1\n            found_text = split_text[i]\n            if text[text.index(split_text[i])+1] =='':\n                start = text.index(split_text[i]) + 1\n            else:\n                start = text.index(split_text[i])\n            end = start + len(split_text[i])\n            return text[start:end],start,end,found_text\n        i += 1\n    return None\n",
        "num_ids": 179
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'(ly)+', text)\n    result_list = []\n    for r in result:\n        result_list.append(r)\n    return result_list\n",
        "num_ids": 49
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    def is_adverb(word):\n        return re.search(r'ly$', word)\n    \n    words = text.split()\n    adverbs = [word for word in words if is_adverb(word)]\n    return (adverbs[0], words.index(adverbs[0])) if len(adverbs) > 0 else ('', -1)\n",
        "num_ids": 88
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #assign the beginning position of the string\n    start_pos = 0\n    #store all the adverb ending with ly\n    adverbs = []\n    #for loop to search for every adverb ending with ly\n    for m in re.finditer(r'[\\w]+ly$',text):\n        #add the index of the adverb ending with ly\n        adverbs.append(m.start())\n    #print the first adverb ending with ly\n    print(text[adverbs[0]:])",
        "num_ids": 118
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    for item in items:\n        heapq.heappush(item)\n    return [heapq.heappop(item) for i in range(n)]\n",
        "num_ids": 42
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for item,cost in items:\n        if len(heap)>=n:\n            if heap[0][0]<cost:\n                heapq.heappop(heap)\n                heapq.heappush(heap,(cost,item))\n        else:\n            heapq.heappush(heap,(cost,item))\n    \n    heap.sort(reverse=True)\n    return [item for cost,item in heap]\n",
        "num_ids": 132
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_sorted = sorted(items,key=lambda x: x[1],reverse = True)\n    print(items_sorted[:n])\n",
        "num_ids": 38
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap,(-item[1],item[0]))\n        elif item[1] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(-item[1],item[0]))\n    return [item[1] for item in heap]\n",
        "num_ids": 113
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Initializing a dictionary to store the items with their prices\n    items_price = {}\n",
        "num_ids": 23
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda i:i[1])\ndef top_three_cheapest(items):\n    '''\n    Write a function that returns the 3 most cost effective items for a given shopping list.\n    '''\n    items_copy=items.copy()\n    items_copy.sort(key=lambda i:i[1])\n    return items_copy[-3:][::-1]\n",
        "num_ids": 44
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n, items, key=lambda x: x[1])\n",
        "num_ids": 24
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(item[1],item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    heap.sort(reverse=True)\n    return heap\n",
        "num_ids": 77
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Your code here\n    heap = []\n    for i in range(len(items)):\n        if i < n:\n            heapq.heappush(heap,(-items[i][1],items[i][0]))\n        else:\n            heapq.heappush(heap,(-items[i][1],items[i][0]))\n            heapq.heappop(heap)\n    return [heapq.heappop(heap)[1] for i in range(n)]\n",
        "num_ids": 128
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n < 0:\n        raise ValueError('n must be > 0')\n    elif n > len(items):\n        raise ValueError('n cannot be greater than the number of items')\n    heap = []\n    for price,item in items:\n        heapq.heappush(heap,(-price,item))\n    return [heapq.heappop(heap)[1] for _ in range(n)]\n",
        "num_ids": 104
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:]\n",
        "num_ids": 14
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    return l[:n] + l[n:]\n",
        "num_ids": 26
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    n_list = l[:n]\n    list_2 = l[n:]\n    n_list.extend(list_2)\n    print(n_list)\n",
        "num_ids": 44
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # l=[]\n    # for i in range(1, len(arr)+1):\n    #     if i % n == 0:\n    #         l.append(arr[:i])\n    #         arr = arr[i:]\n    # l.append(arr)\n    # print(l)\n    # return l\n    return [arr[:n], arr[n:]]\n    \ndef split_String(string, n):\n    l = []\n    for i in range(1, len(string)+1):\n        if i % n == 0:\n            l.append(string[:i])\n            string = string[i:]\n    l.append(string)\n    return l\n",
        "num_ids": 165
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    x = []\n    count = 0\n    while count < len(l):\n        if count == n-1:\n            x.append(l[:n])\n        elif count < n:\n            count += 1\n        elif count >= n:\n            count += 1\n            x.append(l[count:n])\n    x.append(l[n:])\n    return x\n",
        "num_ids": 94
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    def split_list(list, n):\n        \n        return list[:n] + list[n+1:]\n    return split_list(l, n)\nprint(split_Arr([1, 2, 3, 4], 2))\n",
        "num_ids": 59
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    r = []\n    for i in range(0, len(l), n):\n        r.append(l[i:i+n])\n    print(r)\n",
        "num_ids": 42
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print('listx: ', listx)\n    x = tuple(listx)\n    print('x: ', x)\n    return x\n",
        "num_ids": 35
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if type(listx) == list:\n        return tuple(listx)\n",
        "num_ids": 21
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "num_ids": 19
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    new_tuple = ()\n    for i in listx:\n        new_tuple += (i,)\n    return new_tuple\n",
        "num_ids": 35
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # return tuple(listx)\n    return tuple(listx)\n",
        "num_ids": 19
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    return t\n",
        "num_ids": 15
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    big = nums[len(nums)-1]\n    small = nums[0]\n    diff = big - small\n    return diff\n    \ndef fizzbuzz(n):\n    '''\n    Write a python function to print fizz buzz if a number is divisible by 3 or 5 or both.\n    '''\n    if n % 3 == 0 and n % 5 == 0:\n        return 'fizzbuzz'\n    elif n % 3 == 0:\n        return 'fizz'\n    elif n % 5 == 0:\n        return 'buzz'\n    else:\n        return n\n    \ndef find_maximum(nums):\n    '''\n    Write a python function to return the maximum element of a given list of numbers.\n    '''\n    max = nums[0]\n    for i in nums:\n        if i > max:\n            max = i\n    return max\n    \ndef find_minimum(nums):\n    '''\n    Write a python function to return the minimum element of a given list of numbers.\n    '''\n    min = nums[0]\n    for i in nums:\n        if i < min:\n            min = i\n    return min\n    \ndef find_range(nums):\n    '''\n    Write a python function to return range of elements in a given list of numbers.\n    '''\n    return max(nums) - min(nums)\n    \ndef generate_random_num():\n    '''\n    Write a python function to generate and return a random number from the range 1 to 10.\n    '''\n    import random\n    return random.randint(1,10)\n    \ndef reverse_string(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return s[::-1]\n    \ndef palindrome(s):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if s == reverse_string(s):\n        return True\n    else:\n        return False\n        \ndef check_double_letters(s):\n    '''\n    Write a python function to check whether a given string contains double letters or not.\n    '''\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            count += 1\n    if count >= 2:\n        return True\n    else:\n        return False\n    \ndef sum_even_numbers(nums):\n    '''\n    Write a python function to sum all the even numbers in a given list of numbers.\n    '''\n    even_sum = 0\n    for i in nums:\n        if i % 2 == 0:\n            even_sum += i\n    return even_sum\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if n < 0:\n        return 'Factorial does not exist for negative numbers'\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
        "num_ids": 50
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # return max(nums) - min(nums)\n    return max(nums) - min(nums)\n",
        "num_ids": 31
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # list_len = len(nums)\n    # max_value = max(nums)\n    # min_value = min(nums)\n    # print(max_value - min_value)\n    print(max(nums) - min(nums))\n",
        "num_ids": 66
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    print('Difference between Max and Min is: ', max_num-min_num)\n",
        "num_ids": 45
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n",
        "num_ids": 24
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    print(max_num - min_num)\n",
        "num_ids": 36
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a<b:\n        a,b=b,a\n    list_p=[]\n    for i in range(a,b):\n        for j in range(a,b):\n            if i*i==j*j:\n                list_p.append(i)\n    return list_p\ndef palindrome(s):\n    '''\n    Write a Python function that checks whether a passed string is palindrome or not.\n    Note: A palindrome is word, phrase, or sequence that reads the same backward as forward,\n    e.g., madam,kayak,racecar.\n    '''\n    s=s.replace(' ','')\n    s=s.replace('!','')\n    s=s.replace(',','')\n    s=s.replace('.','')\n    s=s.lower()\n    for i in s:\n        if i.isalpha():\n            s=s.replace(i,'')\n    rev=s[::-1]\n    if s==rev:\n        return True\n    else:\n        return False\ndef common_words(sentence1,sentence2):\n    '''\n    Write a Python function to find common words in two sentences and return the count of those words.\n    '''\n    set1=set(sentence1.split(' '))\n    set2=set(sentence2.split(' '))\n    if set1.intersection(set2):\n        return len(set1.intersection(set2))\n    else:\n        return 0\ndef olympics(l):\n    '''\n    Write a Python function to display a message as per the output shown in the below images.\n    Note: Use nested for loop.\n    '''\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            print(l[i][j],end=' ')\n        print()\ndef next_palindrome(n):\n    '''\n    Write a Python function to find the next palindrome number.\n    '''\n    n=n+1\n    while not is_palindrome(n):\n        n+=1\n    return n\ndef is_prime(n):\n    '''\n    Write a Python function to check whether the given input is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef next_prime(n):\n    '''\n    Write a Python function to find the next prime number after the given input.\n    '''\n    n+=1\n    while not is_prime(n):\n        n+=1\n    return n\ndef armstrong_number(n):\n    '''\n    Write a Python function to check whether the given input number is an Armstrong number or not.\n    '''\n    l=list(map(int,str(n)))\n    sum=0\n    for i in l:\n        sum+=i**len(l)\n    return sum==n\ndef bubble_sort(l):\n    '''\n    Write a Python function to sort a list using the bubble sort algorithm.\n    '''\n    for i in range(len(l)):\n        for j in range(len(l)-1-i):\n            if l[j]>l[j+1]:\n                l[j],l[j+1]=l[j+1],l[j]\n    return l\ndef selection_sort(l):\n    '''\n    Write a Python function to sort a list using the selection sort algorithm.\n    '''\n    for i in range(len(l)):\n        min_indx=i\n        for j in range(i,len(l)):\n            if l[min_indx]>l[j]:\n                min_indx=j\n        l[i],l[min_indx]=l[min_indx],l[i]\n    return l\ndef insertion_sort(l):\n    '''\n    Write a Python function to sort a list using the insertion sort algorithm.\n    '''\n    for i in range(1,len(l)):\n        key=l[i]\n        j=i-1\n        while j>=0 and key<l[j]:\n            l[j+1]=l[j]\n            j-=1\n        l[j+1]=key\n    return l\ndef merge_sort(l):\n    '''\n    Write a Python function to sort a list using the merge sort algorithm.\n    '''\n    if len(l)==1:\n        return l\n    mid=len(l)//2\n    left=l[:mid]\n    right=l[mid:]\n    left=merge_sort(left)\n    right=merge_sort(right)\n    i,j,k=0,0,0\n    while i<len(left) and j<len(right):\n        if left[i]<right[j]:\n            l[k]=left[i]\n            i+=1\n        else:\n            l[k]=right[j]\n            j+=1\n        k+=1\n    while i<len(left):\n        l[k]=left[i]\n        i+=1\n        k+=1\n    while j<len(right):\n        l[k]=right[j]\n        j+=1\n        k+=1\n    return l\ndef quick_sort(l):\n    '''\n    Write a Python function to sort a list using the quick sort algorithm.\n    '''\n    if len(l)<=1:\n        return l\n    pivot=l[0]\n    left=[]\n    right=[]\n    for i in range(1,len(l)):\n        if l[i]<pivot:\n            left.append(l[i])\n        else:\n            right.append(l[i])\n    return quick_sort(left)+[pivot]+quick_sort(right)\ndef anagram(s1,s2):\n    '''\n    Write a Python function to check whether the given two strings are anagrams or not.\n    Note: An anagram is a word, phrase, or sequence that can be formed by rearranging the letters of another, such as cinema, formed from iceman.\n    '''\n    s1,s2=sorted(s1),sorted(s2)\n    return s1==s2\ndef find_symmetric_difference(l1,l2):\n    '''\n    Write a Python function to find symmetric difference of two lists.\n    '''\n    s1=set(l1)\n    s2=set(l2)\n    return s1^s2\ndef pattern_match(string,pattern):\n    '''\n    Write a Python function to check whether a string is present as a substring of another string or not.\n    '''\n    return pattern in string\ndef find_index(s,c):\n    '''\n    Write a Python function to find the first index of a character in a string.\n    Note: Use the find() function to get the index of the first occurrence.\n    '''\n    return s.find(c)\ndef main():\n    '''\n    Write a Python function to find the longest palindrome.\n    Note: Palindrome is a word, phrase, or sequence that reads the same backward as forward,\n    e.g., madam,kayak,racecar.\n    '''\n    l=['madam','palindrome','abcd','amaama','kayak','aabcd']\n    for i in l:\n        print(i+':',end=' ')\n        print(palindrome(i))\n    print()\n    '''\n    Write a Python function to find common words in two sentences and return the count of those words.\n    '''\n    s1='i am khan'\n    s2='i like to code'\n    print('common words:',common_words(s1,s2))\n    print()\n    '''\n    Write a Python function to display a message as per the output shown in the below images.\n    '''\n    olympics([['India','China','USA','UK','Germany','Japan'],['Beijing','Tokyo','London','Brasil','Russia','Kenya']])\n    print()\n    '''\n    Write a Python function to find the next palindrome number.\n    '''\n    print('Next palindrome:',next_palindrome(123))\n    print()\n    '''\n    Write a Python function to check whether a given input number is an Armstrong number or not",
        "num_ids": 20
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x**2 for x in range(a, b+1) if x**2 % a == 0 or x**2 % b == 0]\n",
        "num_ids": 37
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    import math\n    # use binary search to find a range of numbers which can be square roots of the perfect squares\n    # if the range is smaller than a, it's impossible to find a perfect square with the range of numbers\n    sqrt_a = math.floor(math.sqrt(a))\n    sqrt_b = math.ceil(math.sqrt(b))\n    if sqrt_a <= sqrt_b:\n        print('Square root of',a,'can be found in the range of',sqrt_a,'and',sqrt_b)\n    else:\n        print('No perfect square can be found between',a,'and',b)\n",
        "num_ids": 153
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    # generate a list of squares between a and b\n    # sort in ascending order\n    # return all squares in a list of tuples in the format (square, square root)\n    # example return value [(1,1), (4,2), (9,3), (16,4)]\n    \n    sq_lst = []\n    for num in range(a, b+1):\n        sq = num**2\n        sq_lst.append(sq)\n    sq_lst.sort()\n    return list(zip(sq_lst, [int(sq**0.5) for sq in sq_lst]))\n    \n    \ndef count_digits(n):\n    '''\n    Write a Python function that returns the number of digits in a number.\n    '''\n    \n    # if the number is 0 or negative return 0\n    if n < 0:\n        return 0\n    # otherwise count the number of digits by taking the integer part of the log function\n    return int(math.log10(n)) + 1\n    \n    \ndef count_words(text):\n    '''\n    Write a Python function that returns the number of words in a text, a space is a word\n    '''\n    \n    # split the text into a list of words\n    # remove all punctuation\n    # return the length of the list\n    \n    text = re.sub(r'[^\\w\\s]','',text)\n    lst = text.split()\n    return len(lst)\n    \n    \ndef common_words(text1, text2):\n    '''\n    Write a Python function to create a dictionary of the 20 most frequently used words in a text.\n    Note: ignore all punctuation and assume only ASCII characters will appear in the text.\n    '''\n    \n    # create a dictionary to store the counts of words in the text\n    # iterate through the text, removing all punctuation and splitting into a list of words\n    # if the word is not already a key in the dictionary, add it and set it's value to 1\n    # if the word is already a key, increment its value by 1\n    \n    text1 = re.sub(r'[^\\w\\s]','',text1)\n    text2 = re.sub(r'[^\\w\\s]','',text2)\n    dct = {}\n    lst1 = text1.split()\n    lst2 = text2.split()\n    for word in lst1:\n        if word not in dct:\n            dct[word] = 1\n        else:\n            dct[word] += 1\n    for word in lst2:\n        if word not in dct:\n            dct[word] = 1\n        else:\n            dct[word] += 1\n    return dict(list(dct.items())[:20])\n    \n    \ndef ransom_note(magazine, ransom):\n    '''\n    Write a Python function to check if a given string can be constructed from a given \n    string by deleting some (possibly none) of the characters.\n    '''\n    \n    # create a set of the magazine characters\n    # create a set of the ransom characters\n    # if the set of magazine characters is a subset of the set of ransom characters, return True\n    # otherwise return False\n    \n    mag_set = set(magazine)\n    ransom_set = set(ransom)\n    if mag_set.issubset(ransom_set):\n        return True\n    else:\n        return False\n    \n    \ndef generate_hashtag(s):\n    '''\n    Write a Python function to create a hashtag from a string.\n    '''\n    \n    # if the string is empty return None\n    # strip the string to remove all leading or trailing whitespace\n    # split the string into a list of words\n    # join the list with a # symbol between each word\n    # return the new string\n    \n    if not s:\n        return None\n    s = s.strip()\n    lst = s.split()\n    hashtag = '#' + ''.join(lst)\n    return hashtag\n    \n    \ndef factorial(n):\n    '''\n    Write a Python function to return the factorial of a number.\n    '''\n    \n    # if the number is negative or zero return None\n    # if the number is 1 return 1\n    # otherwise call the function recursively with n-1\n    \n    if n <= 0:\n        return None\n    if n == 1:\n        return 1\n    return n*factorial(n-1)\n    \n    \ndef count_sentences(text):\n    '''\n    Write a Python function to count the number of sentences in a text.\n    Note: A sentence is defined as any string of non-white space characters \n    separated by one or more periods, semicolons, question marks, or exclamation \n    marks.\n    '''\n    \n    # split the text into a list of sentences using the following regular expressions:\n    # r'\\.', r'\\!', r'\\?', r'\\;'\n    # return the length of the list\n    \n    lst = re.split(r'\\.', text)\n    lst += re.split(r'\\!', text)\n    lst += re.split(r'\\?', text)\n    lst += re.split(r'\\;', text)\n    return len(lst)\n    \n    \ndef even_numbers(n):\n    '''\n    Write a Python function to return all even numbers between 0 and n (inclusive).\n    '''\n    \n    # generate a list of even numbers between 0 and n\n    # return the list\n    \n    lst = []\n    for num in range(n+1):\n        if num % 2 == 0:\n            lst.append(num)\n    return lst\n    \n    \ndef is_prime(n):\n    '''\n    Write a Python function to check if a number is prime.\n    '''\n    \n    # if the number is less than or equal to 1 return False\n    # if the number is greater than 2 and evenly divisible by 2, 3, or 5 return False\n    # if the number is not evenly divisible by 2, 3, or 5 return True\n    \n    if n <= 1:\n        return False\n    if n > 2 and n % 2 == 0 and n % 3 == 0 and n % 5 == 0:\n        return False\n    if n > 2 and n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return False\n    else:\n        return True\n    \n    \ndef fibonacci(n):\n    '''\n    Write a Python function to calculate the nth Fibonacci number.\n    Note: the Fibonacci sequence is defined as follows:\n    The first number of the sequence is 0, the second is 1, and the nth number is the sum of the (n-1)th and (n-2)th number.\n    '''\n    \n    # if the number is negative or zero return None\n    # if the number is less than or equal to 2 return 0\n    # if the number is greater than 2 and divisible by 2, call the function with n-1\n    # if the number is greater than 2 and not divisible by 2, return the sum of the previous two Fibonacci numbers\n    \n    if n < 0 or n == 0:\n        return None\n    if n <= 2:\n        return 0\n    if n % 2 == 0:\n        return fibonacci(n-1)\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \n    \ndef find_factors(n):\n    '''\n    Write a Python function to find all the prime factors of a number.\n    '''\n    \n    # if the number is negative, return None\n    # if the number is divisible by 2, return 2 as a factor\n    # if the number is greater than 2 and evenly divisible by 2, call the function again with n/2\n    # if the number is greater than 2 and not evenly divisible by 2, call the function with n-1\n    \n    if n < 0:\n        return None\n    if n == 2:\n        return 2\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2 + find_factors(n//2)\n    if n > 2 and n % 2!= 0:\n        return find_factors(n-1)\n    \n    \ndef is_palindrome(s):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sqrt = lambda n: n**(1/2)\n    a_sqrt = sqrt(a)\n    b_sqrt = sqrt(b)\n    return a_sqrt + b_sqrt - a_sqrt*b_sqrt\n",
        "num_ids": 63
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n, m = min(a, b), max(a, b)\n    if n >= m:\n        return []\n    return list(range(n, m+1))\n",
        "num_ids": 44
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x for x in range(a,b+1) if x**0.5 == int(x**0.5)]\n",
        "num_ids": 33
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n = int(math.sqrt(b))\n    m = int(math.sqrt(a))\n    if (n**2) < a and (n**2) < b:\n        if n <= m:\n            return n**2\n        else:\n            return m**2\n    else:\n        return \"No perfect square between the given numbers.\"\n",
        "num_ids": 86
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # first, find all perfect squares\n    # if x is a square, then n^2 = x and n > 1\n    # so, we only need to iterate through all numbers,\n    # if n is a perfect square, it is a possible solution\n    # otherwise, we can return []\n    # so, we can reduce search space by using sqrt()\n    \n    # range is [a, b], so only need to check i <= b\n    # square root of b will be between a and sqrt(b)\n    \n    # if a or b is a perfect square, we'll get a result\n    # if a or b is not a perfect square, we'll get an empty list\n    \n    # this is O(b-a+1)\n    # O(b) for the check\n    # O(b-a+1) to append to result\n    \n    import math\n    \n    # if a == b, then there is only one solution\n    # i = 1, a^2 == b\n    # if a > b, then there is no solution\n    # i = b, a^2 > b\n    # if a < b, then there is only one solution\n    # i = 1, a^2 < b\n    if a == b:\n        return [a]\n    if a > b:\n        return []\n    if a < b:\n        return [b]\n    \n    # square root of b will be between a and sqrt(b)\n    sqrt_b = math.floor(math.sqrt(b))\n    \n    # i is the largest possible perfect square\n    i = sqrt_b\n    \n    # i^2 will be at most b\n    # i^2 will be at least b-i^2\n    # so, if i^2 is a perfect square, b must be i^2 + k\n    # k is the difference between b and i^2\n    # if i^2 + k is a perfect square, b must be i^2 + k\n    # because n^2 = x and n > 1\n    # so, we can continue with i^2 + k\n    # if i^2 + k is not a perfect square, b must be i^2 + k + i\n    # because n^2 = x and n > 1\n    # so, we can continue with i^2 + k + i\n    # if i^2 + k + i is not a perfect square, b must be i^2 + k + i + 1\n    # because n^2 = x and n > 1\n    # so, we can continue with i^2 + k + i + 1\n    \n    # i = sqrt_b will be the last i checked\n    # i is the largest possible perfect square\n    \n    result = []\n    \n    while i <= sqrt_b:\n        # i^2 is at most b\n        # if i^2 is a perfect square, b must be i^2\n        if i*i <= b:\n            # i^2 + k is at most b\n            # if i^2 + k is a perfect square, b must be i^2 + k\n            if i*i + i <= b:\n                # i^2 + k + i is at most b\n                # if i^2 + k + i is a perfect square, b must be i^2 + k + i\n                if i*i + i + 1 <= b:\n                    # i^2 + k + i + 1 is at most b\n                    # if i^2 + k + i + 1 is a perfect square, b must be i^2 + k + i + 1\n                    if i*i + i + 1 == b:\n                        result.append(i*i)\n                    # else, i^2 + k + i + 1 is not a perfect square, b must be i^2 + k + i + 1 + i\n                    # i^2 + k + i + 1 + i is at most b\n                    # if i^2 + k + i + 1 + i is a perfect square, b must be i^2 + k + i + 1 + i\n                    elif i*i + i + 1 + i <= b:\n                        result.append(i*i + i + 1)\n                    # else, i^2 + k + i + 1 + i is not a perfect square, b must be i^2 + k + i + 1 + i + 1\n                    # i^2 + k + i + 1 + i + 1 + i is at most b\n                    # if i^2 + k + i + 1 + i + 1 + i is a perfect square, b must be i^2 + k + i + 1 + i + 1 + i\n                    elif i*i + i + 1 + i + 1 + i <= b:\n                        result.append(i*i + i + 1 + i + 1)\n                    # else, i^2 + k + i + 1 + i + 1 + i is not a perfect square, b must be i^2 + k + i + 1 + i + 1 + i + 1\n                    # i^2 + k + i + 1 + i + 1 + i + 1 + i is at most b\n                    # if i^2 + k + i + 1 + i + 1 + i + 1 + i is a perfect square, b must be i^2 + k + i + 1 + i + 1 + i + 1 + i\n                    elif i*i + i + 1 + i + 1 + i + 1 + i <= b:\n                        result.append(i*i + i + 1 + i + 1 + i + 1)\n                    # else, i^2 + k + i + 1 + i + 1 + i + 1 + i is not a perfect square, b must be i^2 + k + i + 1 + i + 1 + i + 1 + i + 1\n                    # i^2 + k + i + 1 + i + 1 + i + 1 + i + 1 + i is at most b\n                    # if i^2 + k + i + 1 + i + 1 + i + 1 + i + 1 + i is a perfect square, b must be i^2 + k + i + 1 + i + 1 + i + 1 + i + 1 + i\n                    elif i*i + i + 1 + i + 1 + i + 1 + i + 1 + i <= b:\n                        result.append(i*i + i + 1 + i + 1 + i + 1 + i + 1)\n                    # else, i^2 + k + i + 1 + i + 1 + i + 1 + i + 1 + i is not a perfect square, b must be i^2 + k + i + 1 + i + 1 + i + 1 + i + 1 + i + 1\n                    # i^2 + k + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i is at most b\n                    # if i^2 + k + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i is a perfect square, b must be i^2 + k + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i\n                    elif i*i + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i <= b:\n                        result.append(i*i + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i)\n                    # else, i^2 + k + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 is not a perfect square, b must be i^2 + k + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i + 1\n                    # i^2 + k + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i is at most b\n                    # if i^2 + k + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i is a perfect square, b must be i^2 + k + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i\n                    elif i*i + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i <= b:\n                        result.append(i*i + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i)\n                    # else, i^2 + k + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 + i + 1 is not a perfect square, b must be i^2 + k + i + 1 + i + 1 + ",
        "num_ids": 2017
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (cmath.rect(x,y), cmath.polar(complex(x,y)))\n",
        "num_ids": 27
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.sqrt(x**2+y**2)\n    theta=cmath.atan(y/x)\n    return(r,theta)\ndef polar_rect1(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=r*cmath.cos(theta)\n    y=r*cmath.sin(theta)\n    return(x,y)\ndef test_polar_rect():\n    '''\n    Test function for the polar_rect function.\n    '''\n    assert (polar_rect(1,0)==(1,0))\n    assert (polar_rect(1,90)==(1,90))\n    assert (polar_rect(1,180)==(1,180))\n    assert (polar_rect(1,270)==(1,270))\n    assert (polar_rect(1,-90)==(1,-90))\n    assert (polar_rect(1,360)==(1,360))\n    assert (polar_rect(0.5,0)==(0.5,0))\n    assert (polar_rect(0.5,90)==(0.5,90))\n    assert (polar_rect(0.5,180)==(0.5,180))\n    assert (polar_rect(0.5,270)==(0.5,270))\n    assert (polar_rect(0.5,-90)==(0.5,-90))\n    assert (polar_rect(0.5,360)==(0.5,360))\ndef test_polar_rect1():\n    '''\n    Test function for the polar_rect1 function.\n    '''\n    assert (polar_rect1(1,0)==(1,0))\n    assert (polar_rect1(1,90)==(1,90))\n    assert (polar_rect1(1,180)==(1,180))\n    assert (polar_rect1(1,270)==(1,270))\n    assert (polar_rect1(1,-90)==(1,-90))\n    assert (polar_rect1(1,360)==(1,360))\n    assert (polar_rect1(0.5,0)==(0.5,0))\n    assert (polar_rect1(0.5,90)==(0.5,90))\n    assert (polar_rect1(0.5,180)==(0.5,180))\n    assert (polar_rect1(0.5,270)==(0.5,270))\n    assert (polar_rect1(0.5,-90)==(0.5,-90))\n    assert (polar_rect1(0.5,360)==(0.5,360))\ndef test_theta():\n    '''\n    Test function for theta function.\n    '''\n    assert (theta(1,0)==0)\n    assert (theta(1,90)==90)\n    assert (theta(1,180)==180)\n    assert (theta(1,270)==270)\n    assert (theta(1,-90)==270)\n    assert (theta(1,360)==0)\n    assert (theta(0.5,0)==0)\n    assert (theta(0.5,90)==90)\n    assert (theta(0.5,180)==180)\n    assert (theta(0.5,270)==270)\n    assert (theta(0.5,-90)==270)\n    assert (theta(0.5,360)==0)\ndef test_r():\n    '''\n    Test function for r function.\n    '''\n    assert (r(1,0)==1)\n    assert (r(1,90)==1)\n    assert (r(1,180)==1)\n    assert (r(1,270)==1)\n    assert (r(1,-90)==1)\n    assert (r(1,360)==1)\n    assert (r(0.5,0)==0.5)\n    assert (r(0.5,90)==0.5)\n    assert (r(0.5,180)==0.5)\n    assert (r(0.5,270)==0.5)\n    assert (r(0.5,-90)==0.5)\n    assert (r(0.5,360)==0.5)\ndef test_rect_to_polar():\n    '''\n    Test function for rect_to_polar function.\n    '''\n    assert (rect_to_polar(1,0)==(1,0))\n    assert (rect_to_polar(1,90)==(1,90))\n    assert (rect_to_polar(1,180)==(1,180))\n    assert (rect_to_polar(1,270)==(1,270))\n    assert (rect_to_polar(1,-90)==(1,270))\n    assert (rect_to_polar(1,360)==(1,0))\n    assert (rect_to_polar(0.5,0)==(0.5,0))\n    assert (rect_to_polar(0.5,90)==(0.5,90))\n    assert (rect_to_polar(0.5,180)==(0.5,180))\n    assert (rect_to_polar(0.5,270)==(0.5,270))\n    assert (rect_to_polar(0.5,-90)==(0.5,270))\n    assert (rect_to_polar(0.5,360)==(0.5,0))\ndef test_rect_to_polar1():\n    '''\n    Test function for rect_to_polar1 function.\n    '''\n    assert (rect_to_polar1(1,0)==(1,0))\n    assert (rect_to_polar1(1,90)==(1,90))\n    assert (rect_to_polar1(1,180)==(1,180))\n    assert (rect_to_polar1(1,270)==(1,270))\n    assert (rect_to_polar1(1,-90)==(1,270))\n    assert (rect_to_polar1(1,360)==(1,0))\n    assert (rect_to_polar1(0.5,0)==(0.5,0))\n    assert (rect_to_polar1(0.5,90)==(0.5,90))\n    assert (rect_to_polar1(0.5,180)==(0.5,180))\n    assert (rect_to_polar1(0.5,270)==(0.5,270))\n    assert (rect_to_polar1(0.5,-90)==(0.5,270))\n    assert (rect_to_polar1(0.5,360)==(0.5,0))\ndef test_polar_to_rect():\n    '''\n    Test function for polar_to_rect function.\n    '''\n    assert (polar_to_rect(1,0)==(1,0))\n    assert (polar_to_rect(1,90)==(1,0))\n    assert (polar_to_rect(1,180)==(1,0))\n    assert (polar_to_rect(1,270)==(1,0))\n    assert (polar_to_rect(1,-90)==(1,0))\n    assert (polar_to_rect(1,360)==(1,0))\n    assert (polar_to_rect(0.5,0)==(0.5,0))\n    assert (polar_to_rect(0.5,90)==(0.5,0))\n    assert (polar_to_rect(0.5,180)==(0.5,0))\n    assert (polar_to_rect(0.5,270)==(0.5,0))\n    assert (polar_to_rect(0.5,-90)==(0.5,0))\n    assert (polar_to_rect(",
        "num_ids": 263
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (x ** 2 + y ** 2) ** 0.5\n    t = cmath.phase(complex(x,y))\n    return (r,t)\ndef get_polar_coord(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = (x ** 2 + y ** 2) ** 0.5\n    t = cmath.phase(complex(x,y))\n    return (r,t)\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\ndef distance2(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\ndef midpoint(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the midpoint between two points.\n    '''\n    x = (x1 + x2) / 2\n    y = (y1 + y2) / 2\n    return (x,y)\ndef area_of_triangle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\ndef area_of_triangle2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\ndef height(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the height of a triangle.\n    '''\n    return ((y1 - y2) ** 2 + (x1 - x2) ** 2) ** 0.5\ndef area_of_parallelogram(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * (x4 * (y3 - y4) + x3 * (y4 - y3) + x4 * (y2 - y3)))\ndef area_of_parallelogram2(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * (x4 * (y3 - y4) + x3 * (y4 - y3) + x4 * (y2 - y3)))\ndef area_of_rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return abs(x1 * (y2 - y1))\ndef area_of_rectangle2(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return abs(x1 * (y2 - y1))\ndef area_of_circle(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return abs(3.14 * (x2 - x1) ** 2)\ndef area_of_circle2(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return abs(3.14 * (x2 - x1) ** 2)\ndef area_of_sector(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector3(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector4(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector5(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector6(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector7(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector8(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector9(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector10(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector11(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector12(x1,y1,x2,y2,x3",
        "num_ids": 61
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    angle=int(input(\"Enter angle in degrees\"))\n    angle=cmath.rect(x,angle)\n    radian=cmath.rect(y,angle)\n    print(\"angle is\",angle)\n    print(\"polar coordinates are\",x,y)\n    print(\"rectangular coordinates are\",angle,radian)\n    \n    \ndef main():\n    print(\"Polar to rectangular coordinates\")\n    x=int(input(\"Enter x: \"))\n    y=int(input(\"Enter y: \"))\n    polar_rect(x,y)\n    \nif __name__==\"__main__\":\n    main()\n'''\nOUTPUT:\n",
        "num_ids": 7
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=math.sqrt(x**2+y**2)\n    theta=math.atan(y/x)\n    theta=(theta*180/math.pi)\n    return(theta,r)\n",
        "num_ids": 55
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x<0:\n        c=complex(-x,-y)\n        c=cmath.polar(c)\n        print(f'{c[1]:.5f}+i{c[0]:.5f}')\n    else:\n        c=complex(x,y)\n        c=cmath.polar(c)\n        print(f'{c[1]:.5f}+i{c[0]:.5f}')\n",
        "num_ids": 111
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (x**2 + y**2)**0.5\n    if x < 0 and y < 0:\n        phi = (cmath.acos(x/r))*180/3.14\n        theta = (cmath.acos(y/r))*180/3.14\n    elif x > 0 and y < 0:\n        phi = 360-cmath.acos(x/r)*180/3.14\n        theta = (cmath.acos(y/r))*180/3.14\n    elif x < 0 and y > 0:\n        phi = 360-cmath.acos(x/r)*180/3.14\n        theta = 360-cmath.acos(y/r)*180/3.14\n    elif x > 0 and y > 0:\n        phi = cmath.acos(x/r)*180/3.14\n        theta = 360-cmath.acos(y/r)*180/3.14\n    return r,phi,theta\ndef rotate_rect(x,y,r,phi,theta):\n    '''\n    Write a function to rotate coordinates.\n    '''\n    return r*cmath.cos(phi/180*3.14)-y*cmath.sin(phi/180*3.14),r*cmath.sin(phi/180*3.14)+x*cmath.cos(phi/180*3.14)\ndef polar_conversion():\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = int(input(\"Enter x: \"))\n    y = int(input(\"Enter y: \"))\n    print(\"Polar coordinates: (r,phi,theta)\")\n    print(polar_rect(x,y))\ndef rotate_conversion():\n    '''\n    Write a function to convert rectangular coordinates to rotated coordinates.\n    '''\n    x = int(input(\"Enter x: \"))\n    y = int(input(\"Enter y: \"))\n    r = int(input(\"Enter r: \"))\n    phi = int(input(\"Enter phi: \"))\n    theta = int(input(\"Enter theta: \"))\n    print(\"Polar coordinates: (r,phi,theta)\")\n    print(polar_rect(x,y))\n    print(\"Rotated coordinates: (x,y)\")\n    print(rotate_rect(x,y,r,phi,theta))\ndef menu():\n    print(\"\")\n    print(\"1. Convert to polar coordinates\")\n    print(\"2. Rotate a point\")\n    print(\"3. Exit\")\ndef choose():\n    choice = int(input(\"Enter choice: \"))\n    if choice == 1:\n        polar_conversion()\n    elif choice == 2:\n        rotate_conversion()\n    elif choice == 3:\n        print(\"Exiting...\")\n        exit()\n    else:\n        print(\"Invalid choice. Enter 1, 2 or 3.\")\n        menu()\n    choose()\nmenu()\nchoose()",
        "num_ids": 274
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(x,y)\n    return r\n",
        "num_ids": 19
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta=math.atan(x/y)\n    r=math.sqrt(x**2+y**2)\n    return theta,r\n",
        "num_ids": 39
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (x**2+y**2)**0.5\n    theta = cmath.phase(complex(x,y))\n    #r=complex(x,y).rect()\n    #print(r,theta)\n    return (r,theta)\n    \ndef polar_rect_demo():\n    x = 3\n    y = 4\n    print(polar_rect(x,y))\n    \n",
        "num_ids": 103
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return newList\n    if len(newList) == 1:\n        return newList\n",
        "num_ids": 34
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <= 1:\n        return newList\n    return [newList[-1]] + newList[1:-1] + [newList[0]]\n",
        "num_ids": 43
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    first_ele = newList[0]\n    last_ele = newList[-1]\n    newList[0] = last_ele\n    newList[size - 1] = first_ele\n    return newList\n",
        "num_ids": 63
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <= 1: \n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0] \n        return newList \n",
        "num_ids": 55
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_item = newList[0]\n    last_item = newList[-1]\n    newList[-1] = first_item\n    newList[0] = last_item\n    return newList\n",
        "num_ids": 53
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList\n",
        "num_ids": 55
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList\n",
        "num_ids": 55
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result=[]\n    for i in range(n+1):\n        result.append([])\n        for j in range(i+1):\n            if(i==0 or j==0):\n                result[i].append(1)\n            elif(j==i):\n                result[i].append(1)\n            else:\n                result[i].append(result[i-1][j-1]+result[i-1][j])\n    return result\n",
        "num_ids": 111
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # An efficient iterative function to compute binomial coefficients in O(n). \n    # For n >= 0, computes the binomial coefficient nCk in O(k) time.\n    def binomialCoeff(n,k): \n        if k > n: \n            return 0\n        if k == 0 or k == n: \n            return 1\n        elif n >= 1 and k >= 1: \n            return binomialCoeff(n-1,k-1) + binomialCoeff(n-1,k) \n    return binomialCoeff(n,k) \n  \nn = 10\nk = 5\nprint(binomial_Coeff(n,k)",
        "num_ids": 168
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    summ = 0\n    if k==0:\n        summ = 1\n    elif k==n:\n        summ = n\n    elif k<n:\n        summ = (n * (binomial_Coeff(n,k-1))) + (binomial_Coeff(n,k))\n    return summ\ndef binomial_coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    summ = 0\n    if k==0:\n        summ = 1\n    elif k==n:\n        summ = n\n    elif k<n:\n        summ = (n * (binomial_coeff(n,k-1))) + (binomial_coeff(n,k))\n    return summ\n",
        "num_ids": 80
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for i in range(k+1)] for j in range(n+1)]\n    C[1][0] = 1\n    for i in range(1,n+1):\n        C[i][0] = 1\n        C[i][i] = 1\n    for i in range(2,n+1):\n        for j in range(1,k+1):\n            C[i][j] = C[i-1][j-1] + C[i-1][j]\n    return C\n",
        "num_ids": 127
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = [1]\n    for i in range(1,n):\n        result.append(result[-1] * (n-i)/i)\n    result.pop()\n    return sum([result[k] * (n-k)/k for k in range(k+1)])\n",
        "num_ids": 71
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    '''\n    Sample input: n = 12, k = 3\n    Sample output: 18\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for i in range(k+1)] for j in range(n+1)] \n",
        "num_ids": 27
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #Coefficient = nCk * (n-k)Ck\n    binomial_coeff = [1]*n\n    for i in range(1,n):\n        binomial_coeff[i] = binomial_coeff[i-1]*(n-i)//i\n    return sum(binomial_coeff[k:]*binomial_coeff[:n-k])\n",
        "num_ids": 98
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # n! / k!(n-k)!\n    return factorial(n) // (factorial(k) * factorial(n - k)) \n",
        "num_ids": 39
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return (binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k))\n",
        "num_ids": 54
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    a = ip.split('.')\n    for i in range(len(a)):\n        if a[i] == '0':\n            a[i] = ''\n        else:\n            a[i] = a[i]\n    return \".\".join(a)\ndef is_v4_ip(ip):\n    '''\n    Write a function to check if the ip address is a valid v4 address or not.\n    '''\n    if len(ip) == 0:\n        return False\n    if ip[0] == '.':\n        return False\n    if len(ip.split('.'))!= 4:\n        return False\n    for x in ip.split('.'):\n        if not x.isdigit():\n            return False\n        if x[0] == '0' and len(x)!= 1:\n            return False\n        if int(x) > 255:\n            return False\n    return True\ndef is_v6_ip(ip):\n    '''\n    Write a function to check if the ip address is a valid v6 address or not.\n    '''\n    if len(ip) == 0:\n        return False\n    if ip[0] == ':':\n        return False\n    if len(ip.split(':'))!= 8:\n        return False\n    for x in ip.split(':'):\n        if not x.isdigit():\n            return False\n        if x[0] == '0' and len(x)!= 1:\n            return False\n        if int(x) > 65535:\n            return False\n    return True\ndef ip_class(ip):\n    '''\n    Write a function to return the class of an ip address.\n    '''\n    if is_v4_ip(ip):\n        return 'A'\n    if is_v6_ip(ip):\n        return 'AF'\n    return 'Others'\ndef is_private_ip(ip):\n    '''\n    Write a function to check if the ip address is a private address or not.\n    '''\n    if is_v4_ip(ip) and ip.split('.')[0] in ['10', '127']:\n        return True\n    if is_v6_ip(ip) and ip.split(':')[0] in ['fc00', 'fd00']:\n        return True\n    return False\ndef is_loopback_ip(ip):\n    '''\n    Write a function to check if the ip address is a loopback address or not.\n    '''\n    if is_v4_ip(ip) and ip.split('.')[0] in ['0', '127']:\n        return True\n    if is_v6_ip(ip) and ip.split(':')[0] in ['::1', 'fe80']:\n        return True\n    return False\ndef is_link_local_ip(ip):\n    '''\n    Write a function to check if the ip address is a link-local address or not.\n    '''\n    if is_v4_ip(ip) and ip.split('.')[0] == '169':\n        return True\n    if is_v6_ip(ip) and ip.split(':')[0] in ['fe80', 'fe84', 'fe88', 'fe8a']:\n        return True\n    return False\ndef is_multicast_ip(ip):\n    '''\n    Write a function to check if the ip address is a multicast address or not.\n    '''\n    if is_v4_ip(ip) and ip.split('.')[0] == '224':\n        return True\n    if is_v6_ip(ip) and ip.split(':')[0] == 'ff00':\n        return True\n    return False\ndef is_reserved_ip(ip):\n    '''\n    Write a function to check if the ip address is a reserved address or not.\n    '''\n    if is_private_ip(ip):\n        return True\n    if is_link_local_ip(ip):\n        return True\n    if is_loopback_ip(ip):\n        return True\n    if is_multicast_ip(ip):\n        return True\n    return False\ndef is_ip(ip):\n    '''\n    Write a function to check if the ip address is a ip address or not.\n    '''\n    if is_v4_ip(ip) or is_v6_ip(ip):\n        return True\n    return False\ndef domain_type(domain):\n    '''\n    Write a function to return the type of domain name.\n    '''\n    if domain[-1] == '.':\n        domain = domain[:-1]\n    if domain.find('.') == -1:\n        return 'Unknow'\n    dots = domain.split('.')\n    if len(dots) == 1:\n        return 'Unknow'\n    if dots[-1] == '':\n        return 'Unknow'\n    if dots[-1] in ['com', 'cn', 'net', 'gov', 'org', 'info', 'xyz', 'edu','mil', 'int', 'biz','mobi', 'baiz', 'tv', 'fun', 'asia', 'pro','museum', 'aero', 'name', 'jobs','mobi', 'travel', 'im', 'jobs', 'post', 'bid', 'xn--80ao21a', 'xn--80asehdb', 'xn--80aswg', 'xn--90a3ac', 'xn--90ais', 'xn--b4w605ferd', 'xn--fiq228c5hs', 'xn--fiq64b', 'xn--fiqs8s', 'xn--fiqz9s', 'xn--flw351e', 'xn--fpcrj9c3d', 'xn--fzc2c9e2c', 'xn--gecrj9c', 'xn--h2brj9c', 'xn--hgbk6aj7f53bba', 'xn--hlcj6aya9esc7a', 'xn--j1amh', 'xn--j6w193g', 'xn--kprw13d', 'xn--kpry57d', 'xn--l1acc', 'xn--lgbbat1ad8j', 'xn--mgb9awbf', 'xn--mgba3a4f16a', 'xn--mgbaam7a8h', 'xn--mgbab2bd', 'xn--mgbayh7gpa', 'xn--mgbbh1a71e', 'xn--mgbc0a9azcg', 'xn--mgberp4a5d4ar', 'xn--mgbx4cd0ab', 'xn--ngbc5azd', 'xn--node', 'xn--nqv7f', 'xn--nqv7fs00ema', 'xn--o3cw4h', 'xn--ogbpf8fl', 'xn--p1acf', 'xn--p1ai', 'xn--pgbs0dh', 'xn--q9jyb4c', 'xn--qcka1pmc', 'xn--rhqv96g', 'xn--s9brj9c', 'xn--wgbh1c', 'xn--wgbl6a', 'xn--xkc2al3hye2a', 'xn--xkc2dl3a5ee0h', 'xn--yfro4i67o', 'xn--ygbi2ammx', 'xn--zfr164b', 'xxx', 'xyz', 'yachts', 'yandex', 'ye', 'yoga', 'yokohama', 'youtube', 'yun', 'zappos', 'zero']:\n        return 'Unknow'\n    if dots[-1] == 'co':\n        return 'Unknow'\n    if dots[-1] == 'com.br':\n        return 'Unknow'\n    if dots[-1] == 'nl':\n        return 'Unknow'\n    if dots[-1] == 'tk':\n        return 'Unknow'\n    if dots[-1] == 'top':\n        return 'Unknow'\n    if dots[-1] == 'tel':\n        return 'Unknow'\n    if dots[-1] == 'tj':\n        return 'Unknow'\n    if dots",
        "num_ids": 924
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #print(ip)\n    if ip[0]==\"0\":\n        ip = ip[1:]\n    if ip[-1]==\"0\":\n        ip = ip[:-1]\n    #print(ip)\n    return ip\n",
        "num_ids": 60
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return '.'.join([str(int(i)) for i in ip.split('.')])\n",
        "num_ids": 26
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'0+','',ip)\n    return ip\n",
        "num_ids": 22
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return '.'.join([str(int(i)) for i in ip.split('.')])\ndef match_ip(s):\n    '''\n    Write a regular expression to match an ip address.\n    '''\n    return re.match('^((25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)\\.){3}(25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)$',s)\ndef convert_ip(ip):\n    '''\n    Write a function to convert an ip address to its binary.\n    '''\n    ip = removezero_ip(ip)\n    return '.'.join([bin(int(i))[2:].zfill(8) for i in ip.split('.')])\ndef convert_ip_from_binary(s):\n    '''\n    Write a function to convert a binary ip address to its decimal.\n    '''\n    return '.'.join([str(int(s[i:i+8],2)) for i in range(0,len(s),8)])\ndef count_ip(ip):\n    '''\n    Write a function to count the number of 1s in an ip address.\n    '''\n    ip = removezero_ip(ip)\n    return sum([int(i) for i in ip.split('.')])\ndef check_ip(s):\n    '''\n    Write a function to check if an ip is valid.\n    '''\n    return match_ip(s)\ndef is_network(ip,mask):\n    '''\n    Write a function to check if an ip is in the network.\n    '''\n    net = re.match('^((25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)\\.){3}(25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)\\/(3[0-2]|[1-2]\\d|[1-9]|0)$',mask)\n    if net:\n        net = net.groups()\n        if len(net[0])!= len(ip):\n            return False\n        else:\n            ip = removezero_ip(ip)\n            return all([(int(ip[i])&int(net[0][i]))==int(net[0][i]) for i in range(0,len(ip))])\n    else:\n        return False\ndef is_subnet(ip,mask):\n    '''\n    Write a function to check if an ip is in the subnet.\n    '''\n    return is_network(ip,mask)\ndef is_supernet(ip,mask):\n    '''\n    Write a function to check if an ip is in the supernet.\n    '''\n    return is_network(ip,mask)\ndef is_ip_valid(ip):\n    '''\n    Write a function to check if an ip is valid.\n    '''\n    ip = check_ip(ip)\n    if ip:\n        return True\n    else:\n        return False\ndef is_mask_valid(mask):\n    '''\n    Write a function to check if an ip mask is valid.\n    '''\n    mask = re.match('^((25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)\\.){3}(25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)/(3[0-2]|[1-2]\\d|[1-9]|0)$',mask)\n    if mask:\n        mask = mask.groups()\n        if len(mask[0])!= len(mask[1]):\n            return False\n        else:\n            return True\n    else:\n        return False\ndef is_network_valid(ip,mask):\n    '''\n    Write a function to check if an ip mask is valid.\n    '''\n    if is_ip_valid(ip) and is_mask_valid(mask):\n        net = re.match('^((25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)\\.){3}(25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)\\/(3[0-2]|[1-2]\\d|[1-9]|0)$',mask)\n        if net:\n            net = net.groups()\n            if len(net[0])!= len(ip):\n                return False\n            else:\n                return True\n        else:\n            return False\n    else:\n        return False\ndef is_mask_full(mask):\n    '''\n    Write a function to check if an ip mask is full.\n    '''\n    mask = re.match('^((25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)\\.){3}(25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)/(3[0-2]|[1-2]\\d|[1-9]|0)$',mask)\n    if mask:\n        mask = mask.groups()\n        return mask[1] == '255.255.255.255'\n    else:\n        return False\ndef is_mask_int(mask):\n    '''\n    Write a function to check if an ip mask is full.\n    '''\n    mask = re.match('^((25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)\\.){3}(25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)/(3[0-2]|[1-2]\\d|[1-9]|0)$',mask)\n    if mask:\n        mask = mask.groups()\n        return all([(int(i)&1)==1 for i in mask[1].split('.')])\n    else:\n        return False\ndef is_subnet_valid(ip,mask):\n    '''\n    Write a function to check if an ip mask is valid.\n    '''\n    if is_ip_valid(ip) and is_mask_valid(mask):\n        subnet = re.match('^((25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)\\.){3}(25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)/(3[0-2]|[1-2]\\d|[1-9]|0)$',mask)\n        if subnet:\n            subnet = subnet.groups()\n            if is_network_valid(ip,mask):\n                return is_network(ip,mask)\n        else:\n            return False\n    else:\n        return False\ndef is_supernet_valid(ip,mask):\n    '''\n    Write a function to check if an ip mask is valid.\n    '''\n    if is_ip_valid(ip) and is_mask_valid(mask):\n        subnet = re.match('^((25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)\\.){3}(25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)/(3[0-2]|[1-2]\\d|[1-9]|0)$',mask)\n        if subnet:\n            subnet = subnet.groups()\n            if is_subnet_valid(ip,mask):\n                return is_subnet(ip,mask)\n        else:\n            return False\n    else:\n        return False\ndef is_ip_in_subnet(ip,subnet):\n    '''\n    Write a function to check if an ip is in the subnet.\n    '''\n    subnet = re.match('^((25[0-5]|2[0-4]\\d|1\\d\\d|\\d?\\d)\\.){3}(25[0-5]|2[0-4]\\",
        "num_ids": 59
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=re.sub(\"0+\",\"\",ip)\n    return ip\n",
        "num_ids": 20
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(?<=.)0(?=.)', '', ip)\n",
        "num_ids": 26
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.replace('.', '')\n    return ip\n",
        "num_ids": 18
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_regex = \"^(?:\\d{1,3}\\.){3}\\d{1,3}$\"\n    if re.match(ip_regex, ip):\n        ip_nozero = re.sub(r\"\\.0+(\\d*)\", r\".\", ip)\n        return ip_nozero\n",
        "num_ids": 78
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if '.' in ip:\n        ip_list = ip.split('.')\n        for num in range(len(ip_list)):\n            if ip_list[num] == '0':\n                ip_list[num] = ''\n            else:\n                break\n        return '.'.join(ip_list)\n    else:\n        return '.'.join(ip.split('/'))\n",
        "num_ids": 97
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for item in list1:\n        if item % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count - odd_count\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2008
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = 0\n    odd_index = 1\n    \n    while even_index < len(list1) and odd_index < len(list1):\n        if list1[even_index] % 2 == 0:\n            if list1[odd_index] % 2!= 0:\n                break\n        elif list1[even_index] % 2!= 0:\n            if list1[odd_index] % 2 == 0:\n                break\n        even_index += 2\n        odd_index += 2\n    print(even_index - odd_index)\n",
        "num_ids": 135
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_num = []\n    even_num = []\n    for i in list1:\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    return even_num[0] - odd_num[0]\n",
        "num_ids": 73
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Use the following line to generate a random list \n    # list1 = random.sample(range(1,100), 15)\n    i = 0\n    while i < len(list1):\n        if i % 2 == 0:\n            first_even = list1[i]\n            break\n        i += 1\n",
        "num_ids": 76
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return(even_list[0] - odd_list[0])\n",
        "num_ids": 74
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    sum_even=0\n    sum_odd=0\n    for i in range(len(list1)):\n        if i%2==0:\n            sum_even+=list1[i]\n        else:\n            sum_odd+=list1[i]\n    return sum_even-sum_odd\n",
        "num_ids": 74
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    if len(odd)>=len(even):\n        return abs(odd[0]-even[0])\n    else:\n        return abs(odd[0]-even[0])\n",
        "num_ids": 107
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i%2 == 0:\n            count = count + i\n        else:\n            count = count - i\n    return count\n    \n    \ndef sum_of_evens_and_odds(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count1 = 0\n    count2 = 0\n    for i in list1:\n        if i%2 == 0:\n            count1 = count1 + i\n        else:\n            count2 = count2 + i\n    return count1, count2\n",
        "num_ids": 61
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    i=0\n    j=0\n    while i<len(list1):\n        if i%2==0:\n            j=list1[i]\n            break\n        i+=1\n    while j<len(list1):\n        if j%2!=0:\n            break\n        j+=1\n    if j<len(list1):\n        print(\"The difference of first even and first odd number of given list is : \",j-i)\n    else:\n        print(\"There are only odd number in the given list\")\n",
        "num_ids": 127
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = 0\n    for i, num in enumerate(list1):\n        if i % 2 == 0 and i == 0:\n            diff = num\n        elif i % 2!= 0 and i == 0:\n            diff = num - diff\n        elif i % 2!= 0 and i!= 0:\n            diff = num - diff\n        elif i % 2 == 0 and i!= 0:\n            diff = num - diff\n            return diff\n    return diff\n",
        "num_ids": 113
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    if (n1 < n2) :\n        temp = str1\n        str1 = str2\n        str2 = temp\n        n1,n2 = n2,n1\n    count = 0\n    i,j = 0,0\n    while (i < n1 and j < n2) :\n        if (str1[i]!= str2[j]) :\n            count += 1\n            i += 1\n            j += 1\n            while (i < n1 and str1[i]!= str2[j]) :\n                count += 1\n                i += 1\n        else :\n            i += 1\n            j += 1\n    return count\n",
        "num_ids": 176
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1=list(str1)\n    str2=list(str2)\n    swaps=0\n    for i in range(len(str1)):\n        if str1[i]!=str2[i]:\n            str1[i],str2[i]=str2[i],str1[i]\n            swaps+=1\n    return swaps\n",
        "num_ids": 88
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            if str1[i]!= '0' : \n                str1 = str1[:i] + '0' + str1[i+1:]\n                count += 1\n            else : \n                str1 = str1[:i] + '1' + str1[i+1:]\n                count += 1\n    print(count)\n",
        "num_ids": 120
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    if (n1 == n2) : \n        return str1,str2\n    #Calculate the minimum number of swaps required to convert a string to another.\n    m = min(n1,n2)\n    mcs = [[0 for x in range(m+1)] for x in range(m+1)]\n    i = 1\n    while(i <= m) : \n        j = 1\n        while(j <= i) : \n            if (str1[j-1] == str2[i-1]) : \n                mcs[i][j] = mcs[i-1][j-1]\n            else : \n                mcs[i][j] = 1 + min(mcs[i][j-1], mcs[i-1][j])\n            j = j + 1\n        i = i + 1\n    return mcs[m][m]\n",
        "num_ids": 231
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m = len(str1) \n    n = len(str2) \n    count = 0\n    if m!= n: \n        return -1\n    str1 = '0b'+str1 \n    str2 = '0b'+str2 \n    for i in range(1,m+1): \n        if str1[i]!= str2[i]: \n            count += 1\n    return count ",
        "num_ids": 106
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(0,len(str1)):\n        if(str1[i]!= str2[i]):\n            count = count+1\n    return count",
        "num_ids": 49
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = int(str1,2)\n    n2 = int(str2,2)\n    cnt = 0\n    while(n1!=n2) :\n        if n1>n2 :\n            cnt += n1-n2\n            n1 -= n1-n2\n        else :\n            cnt += n2-n1\n            n2 -= n2-n1\n    return cnt\n",
        "num_ids": 102
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    count = 0\n    for i in range(0,len(str1)) :\n        if str1[i]!= str2[i] :\n            str1[i],str2[i] = str2[i],str1[i]\n            count += 1\n    return count\n",
        "num_ids": 90
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m,n = len(str1),len(str2)\n    if m!= n : \n        return -1\n    swap_count = 0\n    for i in range(m) : \n        if str1[i]!= str2[i] : \n            if str1[i] == '1' : \n                str2 = str2[:i] + '0' + str2[i+1:]\n            else : \n                str2 = str2[:i] + '1' + str2[i+1:]\n            swap_count += 1\n    return swap_count\n",
        "num_ids": 147
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    temp_str1 = list(str1)\n    temp_str2 = list(str2)\n    swaps = 0\n    for i in range(0, len(temp_str1)) : \n        if (temp_str1[i]!= temp_str2[i]) : \n            for j in range(0,len(temp_str2)) : \n                if (temp_str1[i] == temp_str2[j] ) : \n                    temp_str1[i],temp_str2[j] = temp_str2[j],temp_str1[i] \n                    swaps += 1\n                    break\n    return swaps \n",
        "num_ids": 158
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    result = 0\n    for i in range(0,len(tuple_list)):\n        result += sys.getsizeof(tuple_list[i])\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if not isinstance(tuple_list, tuple):\n        raise TypeError('Expected a tuple')\n    return sum([sys.getsizeof(i) for i in tuple_list])\n",
        "num_ids": 47
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(sys.getsizeof(tuple_list))\n",
        "num_ids": 17
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # tuple_size = sys.getsizeof(tuple_list)\n    # print(\"Size in bytes of the given tuple : \", tuple_size)\n    # return tuple_size\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 59
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n",
        "num_ids": 32
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def find_kth_element(arr1, arr2, k):\n        while len(arr1)!= 0 and len(arr2)!= 0:\n            if arr1[0] < arr2[0]:\n                arr1.pop(0)\n            else:\n                arr2.pop(0)\n",
        "num_ids": 75
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    if n == 0 or m == 0:\n        return None\n    i, j = 0, 0\n    \n    while True:\n        if i == n:\n            return arr2[j + k - 1]\n        elif j == m:\n            return arr1[i + k - 1]\n        elif k == 1:\n            return min(arr1[i], arr2[j])\n        \n        if arr1[i + k // 2 - 1] < arr2[j + k // 2 - 1]:\n            i = i + k // 2\n        else:\n            j = j + k // 2\n        k = k // 2\n    \ndef find_kth_optimized(arr1, arr2, k):\n    '''\n    Optimized version of the above function.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    if n == 0 or m == 0:\n        return None\n    \n    i, j = 0, 0\n    while True:\n        if i == n:\n            return arr2[j + k - 1]\n        elif j == m:\n            return arr1[i + k - 1]\n        elif k == 1:\n            return min(arr1[i], arr2[j])\n        \n        if (n + m) % 2 == 0:\n            if arr1[i + k // 2 - 1] < arr2[j + k // 2 - 1]:\n                i = i + k // 2\n            else:\n                j = j + k // 2\n            k = k // 2\n        else:\n            if i + k // 2 < n and j + k // 2 < m:\n                if arr1[i + k // 2] < arr2[j + k // 2]:\n                    i = i + k // 2\n                else:\n                    j = j + k // 2\n                k = k // 2\n            elif j + k // 2 >= m:\n                i = i + k // 2\n            elif i + k // 2 >= n:\n                j = j + k // 2\n",
        "num_ids": 299
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while(i<len(arr1) and j<len(arr2)):\n        if arr1[i] > arr2[j]:\n            j+=1\n        elif arr1[i] < arr2[j]:\n            i+=1\n        else:\n            i+=1\n            j+=1\n    \n    return arr1[k-1]\n",
        "num_ids": 97
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    if arr1[0] < arr2[0]:\n        return arr1[k-1]\n    elif arr1[0] > arr2[0]:\n        return arr2[k-1]\n    elif k > len(arr1) + len(arr2):\n        return None\n    else:\n        if k <= len(arr1):\n            return arr1[k-1]\n        else:\n            return arr2[k-len(arr1)-1]\n",
        "num_ids": 117
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    index1, index2 = 0, 0\n    while index1 < len(arr1) and index2 < len(arr2):\n        if arr1[index1] < arr2[index2]:\n            index1 += 1\n        elif arr1[index1] > arr2[index2]:\n            index2 += 1\n        else:\n            if index1 + index2 == k - 1:\n                return arr1[index1]\n            else:\n                index1 += 1\n                index2 += 1\n    return -1\n",
        "num_ids": 125
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 == [] or arr2 == []:\n        raise Exception(\"Array is empty\")\n",
        "num_ids": 24
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 and not arr2:\n        return\n    if not arr2:\n        return arr1[k]\n    if not arr1:\n        return arr2[k]\n    \n    l1, l2 = len(arr1), len(arr2)\n    if k < l1:\n        return arr1[k]\n    if k > l1 + l2 - 1:\n        return arr2[k - l1 - l2]\n    \n    index1 = 0\n    index2 = 0\n    while True:\n        if index1 == l1:\n            return arr2[k - l1 - l2 + index2]\n        if index2 == l2:\n            return arr1[k - index2]\n        if arr1[index1] < arr2[index2]:\n            return arr1[index1]\n        else:\n            return arr2[index2]\n",
        "num_ids": 212
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n        if j == len(arr2) and i < len(arr1):\n            j = 0\n    return arr1[i - 1] if i < len(arr1) else arr2[j - 1]\n",
        "num_ids": 104
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Make a combined array of the two arrays.\n    combined = arr1 + arr2\n    # Sort the combined array.\n    combined.sort()\n    # Return the kth element from the combined array.\n    return combined[k - 1]\n",
        "num_ids": 61
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def partition(start, end, arr):\n        pivot_index = start\n        pivot = arr[pivot_index]\n        while start <= end:\n            while start <= end and arr[start] <= pivot:\n                start += 1\n            while start <= end and arr[end] > pivot:\n                end -= 1\n            if start <= end:\n                arr[start], arr[end] = arr[end], arr[start]\n                start += 1\n                end -= 1\n        return start\n",
        "num_ids": 118
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    for i in str(number):\n        sum += pow(int(i), len(str(number)))\n    return sum == number\n",
        "num_ids": 38
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # get number digits in string\n    number_of_digits = len(str(number))\n    # convert number to a string to iterate\n    number = str(number)\n    # sum of the cube of each digit\n    sum = 0\n    for digit in number:\n        sum += int(digit)**number_of_digits\n    return sum == number\n",
        "num_ids": 87
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    sum = 0\n    length = len(str(number))\n    while number:\n        remainder = number % 10\n        number = number // 10\n        sum += remainder ** length\n    if num == sum:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 71
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        print(number, 'is an armstrong number')\n    else:\n        print(number, 'is not an armstrong number')\n",
        "num_ids": 77
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    length = len(str(number))\n    copy_number = number\n",
        "num_ids": 24
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    list_of_digits = [int(d) for d in str(number)]\n    sum_of_digits = sum(list_of_digits)\n    return sum_of_digits == number\n",
        "num_ids": 52
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    power = len(str(number))\n    total = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** power\n        temp //= 10\n    return total == number\n",
        "num_ids": 55
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = str(number)\n    num_len = len(num)\n    sum_num = 0\n    for digit in num:\n        sum_num += int(digit) ** num_len\n    if sum_num == int(number):\n        return True\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    length = len(num_str)\n    temp = number\n    sum = 0\n    while temp:\n        rem = temp % 10\n        sum += rem ** length\n        temp = temp // 10\n    if number == sum:\n        print(f'{number} is an armstrong number')\n    else:\n        print(f'{number} is not an armstrong number')\n",
        "num_ids": 100
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    length = len(str(number))\n    copy = number\n    while copy > 0:\n        digit = copy % 10\n        sum += digit ** length\n        copy //= 10\n    return sum == number\n",
        "num_ids": 55
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #importing the time module\n    import time\n    \n    #time at the start of program execution\n    start = time.time()\n    \n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n",
        "num_ids": 66
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number+1):\n        sum = sum+i\n    return(sum)\n",
        "num_ids": 31
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    avg = sum / number\n    return sum, avg\n",
        "num_ids": 39
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    average=0\n    for x in range(1,number+1):\n        sum+=x\n        average=sum/number\n    return sum,average\n",
        "num_ids": 43
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    print(f\"Sum = {sum}\")\n    print(f\"Average = {average}\")\n",
        "num_ids": 56
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum = sum + i\n    avg = sum/number\n    return (sum, avg)\n",
        "num_ids": 43
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum += i\n        average += 1\n    return [sum,average]\n",
        "num_ids": 43
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n = 0\n    count = 1\n",
        "num_ids": 14
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n",
        "num_ids": 12
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    avg = sum / count\n    return sum, avg\n",
        "num_ids": 55
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True\n    return False\nprint(is_Even(4))\n",
        "num_ids": 29
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else :\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n    \ndef reverse(s) : \n    '''\n    Write a function that takes in a string as input and returns the string in reverse\n    '''\n    return s[::-1]\n",
        "num_ids": 11
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) :\n        return \"Even\"\n    else :\n        return \"Odd\"\n",
        "num_ids": 30
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else :\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        return True\n    else : \n        return False\n",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0: \n        print (\"{0} is Even\".format(n)) \n    else: \n        print (\"{0} is Odd\".format(n)) \n        \nis_Even(8)\n",
        "num_ids": 58
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        return True\n    else : \n        return False\n",
        "num_ids": 27
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    # my code here\n    str1 = str(str1).lower()\n    d = {}\n    for i in str1:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n            break\n    for key, val in d.items():\n        if val > 1:\n            return key\n",
        "num_ids": 90
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    charset = set()\n    for char in str1:\n        if char in charset:\n            return char\n        else:\n            charset.add(char)\n    return None\n    \ndef sum_integers(a,b):\n    '''\n    Write a python function to add two numbers.\n    '''\n    return a+b\n",
        "num_ids": 8
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = \"Welcome to pythons World\"\n    def first_repeated_char1(str1):\n        if len(str1) > 0:\n            str1 = \"Welcome to pythons World\"\n            d = {}\n            for i in str1:\n                if i in d:\n                    d[i] += 1\n                else:\n                    d[i] = 1\n            print(d)\n            for i in d:\n                if d[i] > 1:\n                    print(i)\n                    break\n            else:\n                print('-1')\n        else:\n            print('String is empty')\n    first_repeated_char1(str1)\nfirst_repeated_char(\"Welcome to pythons World\")\n",
        "num_ids": 176
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return \"No repeating character\"\n",
        "num_ids": 35
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    list1=[]\n    for i in str1:\n        if i not in list1:\n            list1.append(i)\n        else:\n            return i\n    return 'No repeated characters'\n",
        "num_ids": 50
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 2:\n            return i\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # declaring the dictionary to store the counts\n    dict1 = {}\n    # iterating the string\n    for char in str1:\n        # if the character is in the dictionary, then increase the count\n        if char in dict1:\n            dict1[char] = dict1[char] + 1\n        # else add the character and the count of 1\n        else:\n            dict1[char] = 1\n    # iterating the dictionary\n    for key,value in dict1.items():\n        # checking the count is more than one\n        if value > 1:\n            print(\"The first repeated character is\",key)\n            # returning the character\n            return key\n    # return none if not found\n    return None\nprint(first_repeated_char('test string'))\n",
        "num_ids": 180
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(0, len(str1)):\n        temp = str1[i:] + str1[0:i]\n        if temp.count(str1[i]) > 1:\n            return str1[i]\n    return -1\n",
        "num_ids": 62
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen_chars = {}\n    for char in str1:\n        if char in seen_chars:\n            return char\n        else:\n            seen_chars[char] = 1\n    return \"No repeating characters.\"\n",
        "num_ids": 55
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Implement your solution here\n    print(set(str1))\n    l = []\n    for i in str1:\n        if i not in l:\n            l.append(i)\n        else:\n            return i\n",
        "num_ids": 55
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    for i in range(n):\n        if i**i <= n:\n            print(i**i, end=' ')\n    print()\n",
        "num_ids": 36
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Check if n is a valid number\n    if isinstance(n, int) == False:\n        raise TypeError\n    # Check if n is a 1 or a 4\n    if n == 1 or n == 4:\n        return [n]\n    # Check if n is a 3 or a 6\n    if n == 3 or n == 6:\n        return [3, 6]\n    # Check if n is a 2, 5, or 7\n    if n == 2 or n == 5 or n == 7:\n        return [n, n+1]\n    # Check if n is a 5 or a 10\n    if n == 5 or n == 10:\n        return [5, 10]\n    # Check if n is a 10 or a 20\n    if n == 10 or n == 20:\n        return [10, 20]\n    # Check if n is a 20 or a 40\n    if n == 20 or n == 40:\n        return [20, 40]\n    # Check if n is a 40 or a 60\n    if n == 40 or n == 60:\n        return [40, 60]\n    # Check if n is a 60 or a 80\n    if n == 60 or n == 80:\n        return [60, 80]\n    # Check if n is a 80 or a 100\n    if n == 80 or n == 100:\n        return [80, 100]\n    # Check if n is a 100 or a 120\n    if n == 100 or n == 120:\n        return [100, 120]\n    # Check if n is a 120 or a 140\n    if n == 120 or n == 140:\n        return [120, 140]\n    # Check if n is a 140 or a 160\n    if n == 140 or n == 160:\n        return [140, 160]\n    # Check if n is a 160 or a 180\n    if n == 160 or n == 180:\n        return [160, 180]\n    # Check if n is a 180 or a 200\n    if n == 180 or n == 200:\n        return [180, 200]\n    # Check if n is a 200 or a 220\n    if n == 200 or n == 220:\n        return [200, 220]\n    # Check if n is a 220 or a 240\n    if n == 220 or n == 240:\n        return [220, 240]\n    # Check if n is a 240 or a 260\n    if n == 240 or n == 260:\n        return [240, 260]\n    # Check if n is a 260 or a 280\n    if n == 260 or n == 280:\n        return [260, 280]\n    # Check if n is a 280 or a 300\n    if n == 280 or n == 300:\n        return [280, 300]\n    # Check if n is a 300 or a 320\n    if n == 300 or n == 320:\n        return [300, 320]\n    # Check if n is a 320 or a 340\n    if n == 320 or n == 340:\n        return [320, 340]\n    # Check if n is a 340 or a 360\n    if n == 340 or n == 360:\n        return [340, 360]\n    # Check if n is a 360 or a 380\n    if n == 360 or n == 380:\n        return [360, 380]\n    # Check if n is a 380 or a 400\n    if n == 380 or n == 400:\n        return [380, 400]\n    # Check if n is a 400 or a 420\n    if n == 400 or n == 420:\n        return [400, 420]\n    # Check if n is a 420 or a 440\n    if n == 420 or n == 440:\n        return [420, 440]\n    # Check if n is a 440 or a 460\n    if n == 440 or n == 460:\n        return [440, 460]\n    # Check if n is a 460 or a 480\n    if n == 460 or n == 480:\n        return [460, 480]\n    # Check if n is a 480 or a 500\n    if n == 480 or n == 500:\n        return [480, 500]\n    # Check if n is a 500 or a 520\n    if n == 500 or n == 520:\n        return [500, 520]\n    # Check if n is a 520 or a 540\n    if n == 520 or n == 540:\n        return [520, 540]\n    # Check if n is a 540 or a 560\n    if n == 540 or n == 560:\n        return [540, 560]\n    # Check if n is a 560 or a 580\n    if n == 560 or n == 580:\n        return [560, 580]\n    # Check if n is a 580 or a 600\n    if n == 580 or n == 600:\n        return [580, 600]\n    # Check if n is a 600 or a 620\n    if n == 600 or n == 620:\n        return [600, 620]\n    # Check if n is a 620 or a 640\n    if n == 620 or n == 640:\n        return [620, 640]\n    # Check if n is a 640 or a 660\n    if n == 640 or n == 660:\n        return [640, 660]\n    # Check if n is a 660 or a 680\n    if n == 660 or n == 680:\n        return [660, 680]\n    # Check if n is a 680 or a 700\n    if n == 680 or n == 700:\n        return [680, 700]\n    # Check if n is a 700 or a 720\n    if n == 700 or n == 720:\n        return [700, 720]\n    # Check if n is a 720 or a 740\n    if n == 720 or n == 740:\n        return [720, 740]\n    # Check if n is a 740 or a 760\n    if n == 740 or n == 760:\n        return [740, 760]\n    # Check if n is a 760 or a 780\n    if n == 760 or n == 780:\n        return [760, 780]\n    # Check if n is a 780 or a 800\n    if n == 780 or n == 800:\n        return [780, 800]\n    # Check if n is a 800 or a 820\n    if n == 800 or n == 820:\n        return [800, 820]\n    # Check if n is a 820 or a 840\n    if n == 820 or n == 840:\n        return [820, 840]\n    # Check if n is a 840 or a 860\n    if n == 840 or n == 860:\n        return [840, 860]\n    # Check if n is a 860 or a 880\n    if n == 860 or n == 880:\n        return [860, 880]\n    # Check if n is a 880 or a 900\n    if n == 880 or n == 900:\n        return [880, 900]\n    # Check if n is a 900 or a 920\n    if n == 900 or n == 920:\n        return [900, 920]\n    # Check if n is a 920 or a 940\n    if n == 920 or n == 940:\n        return [920, 940]\n    # Check if n is a 940 or a 960\n    if n == 940 or n == 960:\n        return [940, 960]\n    # Check if n is a 960 or a 980\n    if n == 960 or n == 980:\n        return [960, 980]\n    # Check if n is a 980 or a 1000\n    if n == 980 or n == 1000:\n        return [980, 1000]\n    # Check if n is a 1000 or a 1020\n    if n == 1000 or n == 1020:\n        return [1000, 1020]\n    # Check if n is a 1020 or a 1040\n    if n == 1020 or n == 1040:\n        return [1020, 1040]\n    # Check if n is a 1040 or a 1060\n    if n == 1040 or n == 1060:\n        return [1040, 1060]\n    # Check if n is a 1060 or a 1080\n    if n == 1060 or n == 1080:\n        return [1060, 1080]\n    # Check if n is a 1080 or a 1100\n    if n == 1080 or n == 1100:\n        return [1080, 1100]\n    # Check if n is a 1100 or a 1120\n    if n == 1100 or n == 1120:\n        return [1100, 1120]\n    # Check if n is a 1120 or a 1140\n    if n == 1120 or n == 1140:\n        return [1120, 1140]\n    # Check if n is a 1140 or a 1160\n    if n == 1140 or n == 1160:\n        return [1140, 1160]\n    # Chec",
        "num_ids": 2015
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 43
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    for i in range(n-1,1,-1):\n        if (i%3==0 and i%2!=0) or (i%3!=0 and i%2==0):\n            ludic.append(i)\n    print(ludic)\n",
        "num_ids": 65
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i == sum(int(d)**2 for d in str(i)):\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 56
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # input: n (int), the upper limit of the lucids\n    # output: ludic (list) of all lucids\n    # note: in this case, lucids are all the odd numbers starting from 3\n    ludic = []\n    for i in range(3, n, 2):\n        ludic.append(i)\n    return ludic\n",
        "num_ids": 84
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    res = []\n    for i in range(1, n+1):\n        if i == sum([int(j) for j in list(str(i))]):\n            res.append(i)\n    return res\n",
        "num_ids": 54
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def get_ludic_helper(n, number_list):\n        # Base case: if n is 0, return the list containing 0\n        if n == 0:\n            return number_list\n        else:\n            # If n is less than the last number in the list,\n            # then the new number would be the last element in the list.\n            if n <= number_list[-1]:\n                number_list.append(n)\n                return get_ludic_helper(n - n % 5, number_list)\n            else:\n                # Else if n is greater than the last number in the list, then the new number would be\n                # 5 times the last number in the list and then n.\n                # This is to get numbers from the sequence [1, 5, 10, 20,...].\n                number_list.append(number_list[-1] * 5)\n                return get_ludic_helper(n - number_list[-1], number_list)\n",
        "num_ids": 230
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    \n    for i in range(2,n+1):\n        if is_ludic(i):\n            ludic.append(i)\n            \n    return ludic\n",
        "num_ids": 49
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 45
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split(' ')))\n",
        "num_ids": 18
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    s =''.join(s)\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    def reverse_words_recursive(s, start, end):\n        if start >= end:\n            return\n        \n        # find the end of first word\n        word_end = start\n        while word_end < len(s) and s[word_end]!='':\n            word_end += 1\n        \n        # reverse the word\n        s[start:word_end] = reversed(s[start:word_end])\n        \n        # go to next word and reverse it\n        reverse_words_recursive(s, word_end+1, end)\n        \n    reverse_words_recursive(list(s), 0, len(s))\n    return ''.join(s)\n    \n    \n    \ndef reverse_words(s):\n    return''.join(s.split()[::-1])\n    \n    \n    \nprint(reverse_words('  hello there  '))\nprint(reverse_words('hello there')",
        "num_ids": 224
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Time O(n), space O(n)\n    return''.join([i[::-1] for i in s.split(' ')])\n",
        "num_ids": 37
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = []\n    cur_word = []\n    for char in s:\n        if char =='':\n            words.append(''.join(cur_word[::-1]))\n            cur_word = []\n        else:\n            cur_word.append(char)\n    if cur_word!= []:\n        words.append(''.join(cur_word[::-1]))\n    return''.join(words)",
        "num_ids": 102
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n",
        "num_ids": 18
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_word(s, w):\n        l = len(w)\n        for i in range(l // 2):\n            s = s[:w[i]] + s[w[l - 1 - i]] + s[w[i] + 1:w[l - 1 - i]] + s[w[l - 1 - i] + 1:]\n        return s\n    def reverse_sentence(s, w, n):\n        for i in range(n // 2):\n            s = s[:w[i]] + s[w[n - 1 - i]] + s[w[i] + 1:w[n - 1 - i]] + s[w[n - 1 - i] + 1:]\n        return s\n    l = len(s)\n    w = []\n    i = 0\n    while i < l:\n        if s[i] =='':\n            w.append(i)\n            i += 1\n        else:\n            i += 1\n    w.append(l)\n    n = len(w)\n    s = reverse_word(s, w[0:n // 2])\n    s = reverse_word(s, w[n // 2:n])\n    return s\n",
        "num_ids": 286
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    return''.join(reversed(words))\n",
        "num_ids": 24
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    else:\n        return True\n",
        "num_ids": 45
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n       for i in range(2,num):\n           if (num % i) == 0:\n               print(\"{} is not a prime number\".format(num))\n               break\n       else:\n           print(\"{} is a prime number\".format(num))\n    else:\n       print(\"{} is not a prime number\".format(num))",
        "num_ids": 88
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number.\")\n                print(i, \"times\", num//i, \"is\", num)\n                break\n        else:\n            print(num, \"is a prime number.\")\n    else:\n        print(num, \"is not a prime number.\")\n",
        "num_ids": 98
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 0 or num == 1:\n        return False\n    for i in range(2, int(num**(1/2))+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        # Iterate from 2 to n / 2\n        for i in range(2, num//2):\n            # If num is divisible by any number between\n            # 2 and n / 2, it is not prime\n            if (num % i) == 0:\n                return False\n            else:\n                return True\n    else:\n        return False\n",
        "num_ids": 89
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, num, 2):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 73
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num % 2 == 0 and num > 2:\n        return False\n    else:\n        for i in range(3, num, 2):\n            if num % i == 0:\n                return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n",
        "num_ids": 21
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degrees(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * 180 / math.pi\ndef degrees_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    ''",
        "num_ids": 16
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    #return math.pi*degree/180\n",
        "num_ids": 13
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n    \ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi/180*degree\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = float(degree)\n    radian = degree * (math.pi/180)\n    return radian\n",
        "num_ids": 29
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    print(f'{math.pi/180*degree:.8f}')\n",
        "num_ids": 22
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi / 180 * degree\n",
        "num_ids": 12
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text).span()\n",
        "num_ids": 15
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result is None:\n        return None\n    else:\n        return result\n",
        "num_ids": 33
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    list1 = re.findall(pattern, text)\n    if list1:\n        return list1\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matched = re.search(pattern, text)\n    if matched:\n        return matched.group()\n    return None, None, None\n",
        "num_ids": 34
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    text = re.search(pattern, text)\n    if text:\n        text = text.group(0)\n        start = text.index(pattern)\n        end = start + len(pattern)\n    else:\n        text = 'no match'\n        start = -1\n        end = -1\n    return text, start, end\n",
        "num_ids": 81
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Convert the pattern to a list of literals for use in regular expressions.\n    lit_pattern = re.findall(r'[^\\\\]\\[[^\\\\]\\]|[^\\\\]\\[.\\]|[^\\\\]\\(|[^\\\\]\\)', pattern)\n    \n    for idx, literal in enumerate(lit_pattern):\n        if re.match(r'^\\[', literal):\n            # If it is an opening bracket, add one to the previous index to make the bracket start at the index of the first character.\n            lit_pattern[idx] = re.sub(r'^\\[', '', literal)\n            lit_pattern[idx-1] = re.sub(r'^', '', lit_pattern[idx-1])\n            lit_pattern[idx-1] = str(int(lit_pattern[idx-1])+1)\n        if re.match(r'\\]', literal):\n            # If it is an closing bracket, add one to the previous index to make the bracket end at the index of the first character.\n            lit_pattern[idx] = re.sub(r'\\]', '', literal)\n            lit_pattern[idx-1] = re.sub(r'^', '', lit_pattern[idx-1])\n            lit_pattern[idx-1] = str(int(lit_pattern[idx-1])+1)\n    \n    # Use regular expressions to split the text at the start and end of the pattern.\n    text_split = re.split(r'^[^\\\\]\\[([^\\\\]\\[.*\\[\\]\\[\\\\])\\]', text)\n    if len(text_split) > 1:\n        text_split = re.split(r'^[^\\\\]\\[\\]$', text_split[1])\n    \n    # Rebuild the text string using the split characters and the found literals.\n    text = ''\n    for text_item in text_split:\n        text += text_item\n        if len(text_split) > 1:\n            text += re.sub(r'^[^\\\\]\\[\\]$', '', text_split[1])\n    \n    for idx, literal in enumerate(lit_pattern):\n        # Check if the literal is the start of the text. If so, remove it from the list of literals.\n        if text[:len(literal)] == literal:\n            lit_pattern.pop(idx)\n        # Check if the literal is the end of the text. If so, remove it from the list of literals.\n        if text[-len(literal):] == literal:\n            lit_pattern.pop(idx)\n    \n    # Check if the literal pattern is the empty string. If so, return an empty substring.\n    if not lit_pattern:\n        return ''\n    \n    # Rebuild the regex pattern from the literals.\n    literal_pattern = ''\n    for idx, literal in enumerate(lit_pattern):\n        literal_pattern += literal\n        if idx < len(lit_pattern)-1:\n            literal_pattern += '|'\n    \n    # Use the regex module to search the text for the regex pattern.\n    text_match = re.search(literal_pattern, text)\n    if text_match:\n        return text_match.group()\n    else:\n        return ''\n",
        "num_ids": 809
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #put your code here\n    match=re.search(pattern,text)\n    if match is None:\n        return None,None,None\n    start=match.start()\n    end=match.end()\n    return match.group(),start,end\n",
        "num_ids": 62
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Remove all non-alphabetic characters from text and pattern.\n    text = re.sub('[^a-zA-Z]', '', text)\n    pattern = re.sub('[^a-zA-Z]', '', pattern)\n    \n    # Split text into words.\n    words = text.split()\n    \n    # Create a dictionary to store the count of every character in pattern.\n    char_count = {}\n    \n    # Update the count of every character in pattern.\n    for character in pattern:\n        if character not in char_count:\n            char_count[character] = 0\n        char_count[character] += 1\n    \n    # Create an array to store the indices of all the characters in pattern.\n    indices = []\n    \n    # Find the indices of every character in pattern in words.\n    for i in range(len(words)):\n        for j in range(len(words[i])):\n            if words[i][j] in char_count and words[i][j] == pattern[0]:\n                # If the current character in pattern is the same as the first character of pattern, then we can check if the following characters match.\n                if words[i][j:j+len(pattern)] == pattern:\n                    # If so, add the index to indices.\n                    indices.append(i)\n    \n    # Check if there are no indices of matching characters.\n    if indices == []:\n        return None\n    \n    # Return the indices of the first and last characters of the matching substring.\n    return [indices[0], indices[-1]]\n",
        "num_ids": 375
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    print(\"Matched Text:\", matches)\n    for match in matches:\n        print(\"match.start()\", match.start(), \"match.end()\", match.end(), \"match.group()\", match.group())\n",
        "num_ids": 67
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # create a regular expression object for pattern\n    regex = re.compile(pattern)\n    # find all matching patterns in text\n    match = regex.findall(text)\n    # print the matching text\n    print(match)\n    # return the matching text\n    return match\n",
        "num_ids": 68
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1] \n    for i in range(1,n+1):\n        bell_number = bell[-1]*i\n        bell.append(bell_number)\n    return bell[n]\n",
        "num_ids": 53
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1, n + 1):\n        bell.append(bell[i - 1] * i)\n    return bell[n]\n",
        "num_ids": 44
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return bell(n) \n",
        "num_ids": 10
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1, 1] \n    for i in range(2, n+1): \n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n] ",
        "num_ids": 52
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell=1\n    for i in range(n):\n        bell*=(n-i)/float(i+1)\n    return bell\n",
        "num_ids": 35
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n",
        "num_ids": 49
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0 for i in range(n + 1)] \n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n + 1): \n        bell[i] = bell[i - 1] + bell[i - 2] \n    return bell[n] \n    \ndef time_taken(f, args):\n    import time\n    t0 = time.clock()\n    f(*args)\n    print(\"\\n\\n\\nTime taken =\", time.clock() - t0, \"seconds\")\n    \ndef fact(n): \n    if n == 1: \n        return n \n    else: \n        return n * fact(n - 1) \n        \ndef combinations(n, k): \n    '''\n    Write a python function to find the number of combinations nCr.\n    '''\n    return int(fact(n) / (fact(k) * fact(n - k))) \n",
        "num_ids": 25
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[1], [1, 1]]\n    for i in range(2, n):\n        bell.append([bell[i - 1][0] + bell[i - 1][1]])\n        bell[i].append(bell[i - 1][0] + bell[i - 1][1])\n    return bell[n - 1][0]\nprint(bell_Number(10))\n",
        "num_ids": 94
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]\n    bell.append(1)\n    for i in range(2, n + 1):\n        bell.append(i * bell[i-1])\n    return bell[n]\n",
        "num_ids": 51
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for item in list1:\n        if item!= L:\n            new_list.append(item)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(k):\n        L.remove(L[k])\n    return L\n",
        "num_ids": 25
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = list1\n    print(\"Original List: \" + str(list1))\n    print(\"Original Length: \" + str(len(list1)))\n    k = 0\n    while k < L:\n        k += 1\n        list1.pop(k)\n    print(\"New List: \" + str(list1))\n    print(\"New Length: \" + str(len(list1)))\n",
        "num_ids": 96
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list(list1)\n",
        "num_ids": 10
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(0, len(list1)):\n        if i!= L:\n            list2.append(list1[i])\n    return list2\n",
        "num_ids": 48
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(L,len(list1)):\n        list2.append(list1[i])\n    for i in range(L):\n        list2.append(list1[i])\n    return list2\n    \ndef print_list(list1):\n    '''\n    Write a Python function to print a given list element by element.\n    '''\n    for i in range(len(list1)):\n        print(list1[i])\n    \ndef list_divide_by_2(list1):\n    '''\n    Write a Python function to divide all elements of a list by 2.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i]/2\n    \ndef swap_list_values(list1):\n    '''\n    Write a Python function to swap the values of two elements in a list.\n    '''\n    list1[0], list1[1] = list1[1], list1[0]\n",
        "num_ids": 25
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = 0\n    while k < len(list1):\n        if k == L:\n            del list1[k]\n        else:\n            k += 1\n",
        "num_ids": 41
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = list1[:]\n    for i in range(L):\n        new_list.pop(0)\n    return new_list\n",
        "num_ids": 37
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # list1.remove(L)\n",
        "num_ids": 12
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if not list1:\n        return []\n    if L == 0:\n        return list1[0:-1]\n    else:\n        return list1[0:L-1] + list1[L:]\n",
        "num_ids": 52
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= N:\n                if max_val < test_list[i][j]:\n                    max_val = test_list[i][j]\n    return max_val\n",
        "num_ids": 81
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if not test_list:\n        return\n    result = []\n    for sublist in test_list:\n        result.append(max(sublist))\n    return max(result[N - 1])\n",
        "num_ids": 50
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    if len(test_list) == 0:\n        return max_list\n    else:\n        for num in test_list:\n            max_list.append(max(num))\n        return max_list\n",
        "num_ids": 58
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = 0\n    for i in range(len(test_list)):\n        if max < test_list[i][N-1]:\n            max = test_list[i][N-1]\n    return max\n",
        "num_ids": 54
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n",
        "num_ids": 18
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if not isinstance(test_list, list) or not isinstance(N, int):\n        return \"Invalid input\"\n",
        "num_ids": 31
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list)!= 0:\n        column_list = []\n        for i in range(0, len(test_list)):\n            column_list.append(test_list[i][N])\n        return max(column_list)\n    return -1\n",
        "num_ids": 67
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    l = len(test_list)\n    if l < N:\n        return 'N is out of range'\n    result = []\n    for i in range(0, l):\n        result.append(test_list[i][N-1])\n    return max(result)\n",
        "num_ids": 68
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[i][N] for i in range(len(test_list)))\n",
        "num_ids": 26
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0][0], lst[1][1]]\n",
        "num_ids": 20
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge_two_lists(lst):\n        return [list(x) for x in zip(*lst)]\n    return merge_two_lists(lst)\n",
        "num_ids": 42
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    lst_2 = []\n    for i in lst:\n        lst_2.append(i[0])\n    lst_1 = []\n    for i in lst:\n        lst_1.append(i[1])\n    return [lst_1,lst_2]\n",
        "num_ids": 76
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    return [item[0] for item in lst], [item[1] for item in lst]\n",
        "num_ids": 29
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    i = 0\n    while i < len(lst):\n        x = lst[i]\n        j = i+1\n        while j < len(lst):\n            y = lst[j]\n            if x[0] > y[0]:\n                lst[i] = y\n                lst[j] = x\n            elif x[0] == y[0]:\n                if x[1] > y[1]:\n                    lst[i] = y\n                    lst[j] = x\n                elif x[1] == y[1]:\n                    lst[i] = x\n                    lst[j] = y\n                else:\n                    lst[i] = x\n                    lst[j] = y\n            else:\n                lst[i] = x\n                lst[j] = y\n            j += 1\n        i += 1\n    return lst\n",
        "num_ids": 215
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first = []\n    second = []\n    for i in range(len(lst)):\n        first.append(lst[i][0])\n        second.append(lst[i][1])\n    return [first, second]\n",
        "num_ids": 59
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = list()\n    for i in lst:\n        result.append(i[0])\n        result.append(i[1])\n    return result\nprint(merge([[1,4],[2,3],[1,5]]))\n",
        "num_ids": 60
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = [[],[]]\n    for sublist in lst:\n        new_list[0].append(sublist[0])\n        new_list[1].append(sublist[1])\n    return new_list\n",
        "num_ids": 56
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    final = []\n    for x in lst:\n        final.append(x[0])\n        final.append(x[1])\n    return final\n",
        "num_ids": 39
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for i in lst:\n        res.append([i[0],i[1]])\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum_of_list = []\n    sum_of_list = 0\n    for i in test_list:\n        sum_of_list += i\n        cumulative_sum_of_list.append(sum_of_list)\n    return cumulative_sum_of_list\n",
        "num_ids": 70
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = [1, 2, 3, 4, 5]\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum\n",
        "num_ids": 58
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum = cum_sum + i\n    return cum_sum\n",
        "num_ids": 35
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = []\n    for index in range(0,len(test_list)):\n        cummulative_sum.append(sum(test_list[0:index+1]))\n    return cummulative_sum\n",
        "num_ids": 58
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return_list = []\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n        return_list.append(cum_sum)\n    return return_list\n",
        "num_ids": 50
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in test_list:\n        result.append(sum(i))\n    return result\n    \nprint(cummulative_sum([(1,2,3,4,5,6),(1,2,3,4,5,6)]))\n",
        "num_ids": 68
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    tuple_list = []\n    for i in range(0, len(test_list)):\n        tuple_list.append((test_list[i]))\n    for i in range(1, len(tuple_list)):\n        tuple_list[i] = tuple_list[i-1] + tuple_list[i]\n    return tuple_list\n",
        "num_ids": 90
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in test_list:\n        sum += i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if isinstance(test_list,tuple) and len(test_list) >= 1:\n        return tuple([sum(test_list[0:i+1]) for i in range(len(test_list))])\n    else:\n        print(\"please enter a tuple list with at least one element\")\n",
        "num_ids": 73
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    cum_list = []\n    for i in test_list:\n        cum_sum += i\n        cum_list.append(cum_sum)\n    return cum_list\n",
        "num_ids": 50
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for item in nums:\n        sum += item[0]\n    average = sum/len(nums)\n    return average\n",
        "num_ids": 38
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x) / len(x) for x in zip(*nums)]\n",
        "num_ids": 23
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(nums[i]) / len(nums[i]) for i in range(len(nums))]\n",
        "num_ids": 32
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(sum(i)/len(i))\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in nums]\n",
        "num_ids": 20
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    def avg(t):\n        return sum(t)/len(t)\n    return list(map(avg, nums))\n",
        "num_ids": 33
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    l = [0]*len(nums[0])\n    for tup in nums:\n        for i in range(len(tup)):\n            l[i] += tup[i]\n    return list(map(lambda x: x/len(nums), l))\n",
        "num_ids": 70
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_values = [value for value in nums[1]]\n    tuple_avg = [sum(value)/len(value) for value in nums[1]]\n    return tuple_avg\n",
        "num_ids": 51
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avgs = list()\n    for i in nums:\n        avg = sum(i) / len(i)\n        avgs.append(avg)\n    return avgs\n",
        "num_ids": 46
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(i)/len(i) for i in nums]\n",
        "num_ids": 20
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([modulo(a, b) for a, b in zip(test_tup1, test_tup2)])\n",
        "num_ids": 34
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    def modulo(test_tup1, test_tup2):\n        return tuple(map(lambda a,b: a % b, test_tup1, test_tup2))\n    return modulo(test_tup1, test_tup2)\n",
        "num_ids": 66
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] % test_tup2[i])\n    return tuple(new_tup)\n",
        "num_ids": 62
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([i % j for i, j in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([i % j for i, j in zip(test_tup1, test_tup2)])\n    \ndef tuple_modulo_n(test_tup1, test_tup2, n):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo n.\n    '''\n    return tuple([i % j for i, j in zip(test_tup1, test_tup2)])\n    \ndef tuple_divide(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise divide.\n    '''\n    return tuple([i / j for i, j in zip(test_tup1, test_tup2)])\n    \ndef tuple_divide_n(test_tup1, test_tup2, n):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise divide n.\n    '''\n    return tuple([i / j for i, j in zip(test_tup1, test_tup2)])\n    \ndef tuple_add(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise add.\n    '''\n    return tuple([i + j for i, j in zip(test_tup1, test_tup2)])\n    \ndef tuple_add_n(test_tup1, test_tup2, n):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise add n.\n    '''\n    return tuple([i + j for i, j in zip(test_tup1, test_tup2)])\n    \ndef tuple_subtract(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise subtract.\n    '''\n    return tuple([i - j for i, j in zip(test_tup1, test_tup2)])\n    \ndef tuple_subtract_n(test_tup1, test_tup2, n):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise subtract n.\n    '''\n    return tuple([i - j for i, j in zip(test_tup1, test_tup2)])\n    \ndef tuple_multiply(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise multiply.\n    '''\n    return tuple([i * j for i, j in zip(test_tup1, test_tup2)])\n    \ndef tuple_multiply_n(test_tup1, test_tup2, n):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise multiply n.\n    '''\n    return tuple([i * j for i, j in zip(test_tup1, test_tup2)])\n    ",
        "num_ids": 31
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # your code here\n    # your code here\n    tuple_modulo = ()\n    \n    return tuple_modulo\n",
        "num_ids": 32
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    m = 0\n    while d%2 == 0:\n        d = d // 2\n        m = m + 1\n",
        "num_ids": 30
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d == steps:\n        return 1\n",
        "num_ids": 24
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    max_distance = 0\n    min_distance = d\n    distance = 0\n    jumps = 0\n    for i in range(0, steps):\n        if (distance > max_distance):\n            max_distance = distance\n        if (distance < min_distance):\n            min_distance = distance\n        distance = distance + d\n        jumps += 1\n    \n    if (min_distance == 0):\n        print('The number of minimum jumps required to reach the point (', d, ', 0) is:', jumps)\n    else:\n        print('The number of minimum jumps required to reach the point (', d, ', 0) is:', jumps + 1)\n",
        "num_ids": 155
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    current_position = [0,0]\n    jumps = 0\n    for i in range(steps):\n        if (current_position[0] >= d):\n            return jumps\n        if current_position[1] >= d:\n            return jumps\n        if (current_position[0] == 0 and current_position[1] == 0):\n            return -1\n        if (current_position[0] < 0):\n            current_position[0] = current_position[0] + 1\n            jumps += 1\n        elif (current_position[0] > 0):\n            current_position[0] = current_position[0] - 1\n            jumps += 1\n        elif (current_position[1] < 0):\n            current_position[1] = current_position[1] + 1\n            jumps += 1\n        elif (current_position[1] > 0):\n            current_position[1] = current_position[1] - 1\n            jumps += 1\n    return jumps\n",
        "num_ids": 239
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d == steps:\n        return 1\n",
        "num_ids": 24
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d < 0:\n        return 0\n    if d == 0:\n        return 1\n    if steps == 0:\n        return 0\n    if steps < 0:\n        return 0\n    jump_count = 0\n    return jump_count + min_Jumps(steps - 1, d - 1) + min_Jumps(steps - 1, d)\n",
        "num_ids": 85
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0 or steps == 0:\n        return 0\n    else:\n        return min(1 + min_Jumps(steps - 1, d), min_Jumps(steps - d, d))\n",
        "num_ids": 50
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    if (d <= steps):\n        jumps = 1\n    else:\n        jumps = 2*min_Jumps(steps - 1, d - 1) + min_Jumps(steps - 1, d)\n    return jumps\n",
        "num_ids": 62
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Jump required is equivalent to the number of steps required from origin to (d,0).\n    # If we perform a step, in any direction, we can go to any point. So we just need to check for the number of steps required to go from (0, 0) to (d, 0).\n    # The following steps are required to find the number of steps required to go to (d,0)\n    # 1) Calculate the distance from (0, 0) to (d, 0) using the formula:\n    #      distance_to_d = (d**2 + d**2)**0.5\n    # 2) Now find the number of steps required to go to (d,0) by dividing distance_to_d by the number of steps allowed by d.\n    # 3) The number of steps required is the floor of the output.\n    if steps <= 0:\n        return 0\n    elif steps == 1:\n        return 1\n    else:\n        distance_to_d = (d**2 + d**2)**0.5\n        return math.floor(distance_to_d / steps)\n",
        "num_ids": 256
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    dp = [0 for i in range(d+1)]\n    for i in range(1, steps+1):\n        dp[i] = float('inf')\n        for j in range(1, d+1):\n            if j < i:\n                dp[i] = min(dp[i], dp[j] + 1)\n    return dp[steps]\n",
        "num_ids": 90
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div=[]\n    for i in range(len(nums1)):\n        div.append(nums1[i]/nums2[i])\n    return div\ndef mul_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    mul=[]\n    for i in range(len(nums1)):\n        mul.append(nums1[i]*nums2[i])\n    return mul\ndef dev_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    dev=[]\n    for i in range(len(nums1)):\n        dev.append(nums1[i]-nums2[i])\n    return dev\ndef sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    sub=[]\n    for i in range(len(nums1)):\n        sub.append(nums1[i]-nums2[i])\n    return sub\ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    add=[]\n    for i in range(len(nums1)):\n        add.append(nums1[i]+nums2[i])\n    return add\ndef exp_list(nums1,nums2):\n    '''\n    Write a function to exponentiate two lists element wise.\n    '''\n    exp=[]\n    for i in range(len(nums1)):\n        exp.append(nums1[i]**nums2[i])\n    return exp\ndef expm1_list(nums1,nums2):\n    '''\n    Write a function to calculate e^x - 1 for lists element wise.\n    '''\n    expm1=[]\n    for i in range(len(nums1)):\n        expm1.append(nums1[i]**nums2[i]-1)\n    return expm1\n",
        "num_ids": 52
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    list_1=[]\n    for i in range(len(nums1)):\n        list_1.append(nums1[i]/nums2[i])\n    return list_1\n",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert len(nums1) == len(nums2)\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n",
        "num_ids": 44
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]/nums2[i])\n    return div_list\n",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have equal length!\")\n",
        "num_ids": 32
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]/nums2[i])\n    return div_list\n",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1,n2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert len(nums1) == len(nums2), \"Can only divide two lists with same size.\"\n    nums3 = []\n    for i in range(len(nums1)):\n        nums3.append(nums1[i] / nums2[i])\n    return nums3\n",
        "num_ids": 76
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]/nums2[i])\n    return new_list\n",
        "num_ids": 50
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if i.isdigit()]) + ''.join([i for i in test_str if not i.isdigit()])\n",
        "num_ids": 45
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            new_str += i\n    return new_str + test_str.replace(\"123456789\",\"\")\n",
        "num_ids": 53
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    words = test_str.split()\n    num_list = []\n    for i in words:\n        if i.isdigit():\n            num_list.append(i)\n    for i in range(len(num_list)):\n        words.remove(num_list[i])\n    return words + num_list\n",
        "num_ids": 79
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # return re.sub(r'[^\\d]+', '', test_str)\n    \n    # return re.sub(r'[^\\d]+', '', test_str).rstrip()\n    \n    return ''.join([c for c in test_str if not c.isdigit()])\n",
        "num_ids": 76
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isdigit()]) + ''.join([i for i in test_str if i.isdigit()])\n",
        "num_ids": 45
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    number_list = []\n    char_list = []\n    for index, char in enumerate(test_str):\n        if char.isdigit():\n            number_list.append(char)\n        else:\n            char_list.append(char)\n",
        "num_ids": 63
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = ''\n    words = ''\n    for i in range(len(test_str)):\n        if test_str[i] not in ['0','1','2','3','4','5','6','7','8','9']:\n            words += test_str[i]\n        else:\n            numbers += test_str[i]\n    new_str = words + numbers\n    return new_str\n",
        "num_ids": 100
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    non_num_str = \"\"\n    num_str = \"\"\n    for letter in test_str:\n        if letter.isdigit():\n            num_str += letter\n        else:\n            non_num_str += letter\n    return non_num_str + num_str\n",
        "num_ids": 68
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join(list(filter(lambda x: not x.isdigit(), test_str))) + ''.join(list(filter(lambda x: x.isdigit(), test_str)))\n",
        "num_ids": 49
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = []\n    numbers = []\n    for letter in test_str:\n        if letter.isdigit():\n            numbers.append(letter)\n        else:\n            new_str.append(letter)\n    new_str.extend(numbers)\n    return ''.join(new_str)\n",
        "num_ids": 79
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0: return 0\n    if len(a) == 1: return 1\n    # recursive version\n    #print(\"\\n\", a, \"\\n\")\n    if len(a) % 2 == 0:\n        a1 = largest_subset(a[:len(a) // 2])\n        a2 = largest_subset(a[len(a) // 2:])\n    else:\n        a1 = largest_subset(a[:len(a) // 2])\n        a2 = largest_subset(a[len(a) // 2 + 1:])\n    #print(\"a1:\", a1, \"a2:\", a2)\n    return max([a1, a2])\n    #print(\"a1+a2:\", a1+a2, \"\\n\")\n",
        "num_ids": 194
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    return _largest_subset(a)\n",
        "num_ids": 19
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    sorted_list = sorted(a, reverse=True)\n    sorted_list = [x for x in sorted_list if x % 2 == 0]\n",
        "num_ids": 39
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    size = len(a)\n    if size < 2:\n        return size\n    a.sort()\n    divisor = a[0]\n    l = 1\n    for i in range(1, size):\n        if a[i] % divisor == 0:\n            l = i + 1\n        else:\n            break\n    return l\n",
        "num_ids": 85
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # print(a)\n    l = len(a)\n    # print(\"Length of the list = {}\".format(l))\n    if l <= 1:\n        return l\n    else:\n        return max(largest_subset(a[:l-1]), largest_subset(a[1:]))\n",
        "num_ids": 75
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) <= 1:\n        return len(a)\n    else:\n        p = len(a)//2\n        left = largest_subset(a[:p])\n        right = largest_subset(a[p:])\n        return max(left, right)\n",
        "num_ids": 70
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subsets = []\n    \n    def backtrack(a, subset, idx, n):\n        subsets.append(subset[:])\n        \n        for i in range(idx, n):\n            subset.append(a[i])\n            if is_pair_divisible(subset):\n                backtrack(a, subset, i+1, n)\n            subset.pop()\n    \n    backtrack(a, [], 0, len(a))\n    \n    return max(subsets, key=len)\n    \ndef is_pair_divisible(subset):\n    '''\n    Write a function that returns true if a pair of numbers in the list is divisible.\n    '''\n    if not subset:\n        return True\n    \n    if len(subset) == 1:\n        return True\n    \n    subset.sort()\n    \n    for i in range(len(subset)):\n        if subset[i] % subset[i+1] == 0:\n            return True\n    return False\n    \ndef longest_subset(a):\n    '''\n    Write a function to find the longest subset of a list of numbers so that every pair is divisible.\n    '''\n    subsets = []\n    \n    def backtrack(a, subset, idx, n):\n        subsets.append(subset[:])\n        \n        for i in range(idx, n):\n            subset.append(a[i])\n            if is_pair_divisible(subset):\n                backtrack(a, subset, i+1, n)\n            subset.pop()\n    \n    backtrack(a, [], 0, len(a))\n    \n    return max(subsets, key=len)\n    \ndef is_pair_divisible(subset):\n    '''\n    Write a function that returns true if a pair of numbers in the list is divisible.\n    '''\n    if not subset:\n        return True\n    \n    if len(subset) == 1:\n        return True\n    \n    subset.sort()\n    \n    for i in range(len(subset)):\n        if subset[i] % subset[i+1]!= 0:\n            return False\n    return True\n    \ndef next_greater_element(a):\n    '''\n    Write a function to find the next greater element to the right of each element in the list.\n    '''\n    greater_map = {}\n    stack = []\n    \n    for i in range(len(a)-1, -1, -1):\n        while stack and a[stack[-1]] <= a[i]:\n            stack.pop()\n        greater_map[i] = stack[-1] if stack else -1\n        stack.append(i)\n    \n    return greater_map\n    \ndef next_greater_element_recursive(a):\n    '''\n    Write a function to find the next greater element to the right of each element in the list.\n    '''\n    greater_map = {}\n    \n    def next_greater(greater_map, i, greater_val):\n        if i == len(a) - 1:\n            greater_map[i] = greater_val\n            return greater_map\n        \n        greater_val = greater_map.get(i, -1)\n        greater_map[i] = greater_val\n        \n        return next_greater(greater_map, i+1, greater_map[i])\n    \n    return next_greater(greater_map, 0, -1)\n    \ndef longest_subset(a):\n    '''\n    Write a function to find the longest subset of a list of numbers so that every pair is divisible.\n    '''\n    greater_map = next_greater_element(a)\n    greater_val = -1\n    \n    subsets = []\n    \n    def backtrack(a, subset, idx, n):\n        if len(subset) == len(a):\n            subsets.append(subset[:])\n            return\n        \n        for i in range(idx, n):\n            if greater_map[i] > greater_val:\n                greater_val = greater_map[i]\n                \n            if a[greater_val] % a[i]!= 0:\n                continue\n                \n            subset.append(a[i])\n            backtrack(a, subset, i+1, n)\n            subset.pop()\n    \n    backtrack(a, [], 0, len(a))\n    \n    return max(subsets, key=len)\n    \ndef largest_subset(a):\n    '''\n    Write a function to find the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    greater_map = next_greater_element(a)\n    greater_val = -1\n    \n    subsets = []\n    \n    def backtrack(a, subset, idx, n, curr_greater):\n        if len(subset) == len(a):\n            subsets.append(subset[:])\n            return\n        \n        for i in range(idx, n):\n            if greater_map[i] > greater_val:\n                greater_val = greater_map[i]\n                \n            if a[greater_val] % a[i]!= 0:\n                continue\n                \n            subset.append(a[i])\n            curr_greater = curr_greater | (1 << i)\n            backtrack(a, subset, i+1, n, curr_greater)\n            curr_greater = curr_greater & ~(1 << i)\n            subset.pop()\n    \n    backtrack(a, [], 0, len(a), 0)\n    \n    return max(subsets, key=len)\n",
        "num_ids": 264
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # return len(largest_subset_helper([4, 2, 5, 7], []))\n    # return len(largest_subset_helper([2, 5, 9, 13], []))\n    # return len(largest_subset_helper([1, 3, 5, 9], []))\n    # return len(largest_subset_helper([1, 3, 5, 9], []))\n    # return len(largest_subset_helper([1, 3, 5, 9], []))\n    return len(largest_subset_helper([1, 2, 3, 4, 5], []))\n",
        "num_ids": 147
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return\n",
        "num_ids": 5
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n",
        "num_ids": 50
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n < 1:\n        return None\n    i = n // 2\n    j = n // 2 + n % 2\n    return (arr1[i] + arr2[j]) / 2 if n % 2 == 0 else max(arr1[i], arr2[j])\n",
        "num_ids": 67
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return (arr1[0] + arr2[0]) // 2\n    \n    i = 0\n    j = n - 1\n    \n    # If arrays have even no. of elements, then median\n    # will be the average of middle two elements\n    if n % 2 == 0:\n        return (arr1[i] + arr2[j] + get_median(arr1, arr2, (n//2)-1)) // 2\n    else:\n        return get_median(arr1, arr2, (n//2)-1)\n        \nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [4, 5, 6, 7, 8]\n    print(get_median(arr1, arr2, len(arr1)))\n    \n",
        "num_ids": 215
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    for i in range(n):\n        arr1.append(i + 2)\n        arr2.append(i + 3)\n    arr1.sort()\n    arr2.sort()\n    return (arr1[n // 2] + arr2[n // 2]) / 2\n",
        "num_ids": 68
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    n = len(arr1)\n    if n % 2 == 0:\n        mid_1 = (arr1[n//2] + arr1[(n//2) - 1])/2\n        mid_2 = (arr2[n//2] + arr2[(n//2) - 1])/2\n        median = (mid_1 + mid_2)/2\n    else:\n        median = (arr1[n//2] + arr2[n//2])/2\n    return median\n",
        "num_ids": 122
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n < 1:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr1[0] if arr1[0] < arr2[0] else arr2[0]\n",
        "num_ids": 46
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m = n//2\n    if n % 2 == 0:\n        return (arr1[m-1] + arr2[m]) / 2\n    else:\n        return arr1[m]\n",
        "num_ids": 49
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    a = arr1\n    b = arr2\n    m = n//2\n    if n % 2 == 1:\n        return median_helper(a, b, m)\n    else:\n        return (median_helper(a, b, m) + median_helper(a, b, m-1))/2\n",
        "num_ids": 80
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = []\n    if n == 1:\n        median = [arr1[0]] + [arr2[0]]\n        return median\n    elif n == 2:\n        median = [arr1[0], arr2[0]]\n        return median\n    if len(arr1) == len(arr2):\n        for i in range(n):\n            median.append(arr1[i])\n            median.append(arr2[i])\n        return median\n    elif len(arr1) < len(arr2):\n        for i in range(n):\n            if i % 2 == 0:\n                median.append(arr1[i])\n            else:\n                median.append(arr2[i])\n        return median\n    elif len(arr1) > len(arr2):\n        for i in range(n):\n            if i % 2 == 0:\n                median.append(arr2[i])\n            else:\n                median.append(arr1[i])\n        return median\n",
        "num_ids": 246
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #return [x**n for x in nums]\n    print([x**n for x in nums])\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = [i**n for i in nums]\n    print(result)\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res=[]\n    for i in nums:\n        res.append(i**n)\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result=[]\n    for x in nums:\n        result.append(x**n)\n    return result\nprint(nth_nums([1,2,3,4],2))\n",
        "num_ids": 48
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(n):\n        nums = list(map(lambda x: x**n, nums))\n    return nums\n",
        "num_ids": 35
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num**n)\n    return res\nprint(nth_nums([1,2,3,4],2)",
        "num_ids": 47
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \n",
        "num_ids": 11
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    \n    return string.upper()\n",
        "num_ids": 11
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # use string.upper() to convert the input string to uppercase\n    # return True if the input string is uppercase, False otherwise\n    return string.upper() == string\n",
        "num_ids": 44
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.upper()\n    print(string)\nis_upper(\"ashley\")\n",
        "num_ids": 24
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n    \n    \ndef calc_KNN(df, classCol, k): \n    '''\n    Write a python function to calculate the K-Nearest Neighbors for the given dataset.\n    '''\n    \n    # use Counter from collections to calculate the count for each label\n    from collections import Counter\n    \n    # convert the labels to a set to remove duplicates\n    unique_labels = set(df[classCol].values.tolist())\n    \n    # create an empty dictionary to store the KNN\n    knn = dict()\n    \n    # loop through each label\n    for label in unique_labels:\n        \n        # create a subset of the dataframe for the current label\n        label_df = df[df[classCol] == label]\n        \n        # create a Counter for the labels\n        labels_counter = Counter(label_df['Label'].values.tolist())\n        \n        # loop through the labels, and store the KNNs\n        knn[label] = labels_counter.most_common(k)\n        \n    return knn\n    \n    \ndef calc_Accuracy(df, classCol, predictedCol): \n    '''\n    Write a python function to calculate the accuracy of the KNN.\n    '''\n    \n    # create a list of all the labels in the predicted column\n    unique_labels = set(df[classCol].values.tolist())\n    \n    # create a list of all the labels in the predicted column\n    predicted_labels = set(df[predictedCol].values.tolist())\n    \n    # use a counter to calculate how many times each label appears in the predicted column\n    label_counter = Counter(df[predictedCol].values.tolist())\n    \n    # create a dictionary to store the accuracy for each label\n    label_accuracy = dict()\n    \n    # loop through each label\n    for label in unique_labels:\n        \n        # create a counter for the total number of times that label appears in the predicted column\n        total = 0\n        \n        # loop through the labels in the predicted column\n        for pred_label in predicted_labels:\n            \n            # calculate the total number of times the label is the predicted label\n            total = total + label_counter[pred_label]\n        \n        # calculate the accuracy for the current label\n        accuracy = label_counter[label] / total\n        \n        # store the accuracy for the current label\n        label_accuracy[label] = accuracy\n        \n    return label_accuracy\n    \n    \ndef calc_Error(df, classCol, predictedCol): \n    '''\n    Write a python function to calculate the error rate of the KNN.\n    '''\n    \n    # create a list of all the labels in the predicted column\n    unique_labels = set(df[classCol].values.tolist())\n    \n    # create a list of all the labels in the predicted column\n    predicted_labels = set(df[predictedCol].values.tolist())\n    \n    # use a counter to calculate how many times each label appears in the predicted column\n    label_counter = Counter(df[predictedCol].values.tolist())\n    \n    # create a dictionary to store the error rate for each label\n    label_error = dict()\n    \n    # loop through each label\n    for label in unique_labels:\n        \n        # create a counter for the total number of times that label appears in the predicted column\n        total = 0\n        \n        # loop through the labels in the predicted column\n        for pred_label in predicted_labels:\n            \n            # calculate the total number of times the label is the predicted label\n            total = total + label_counter[pred_label]\n        \n        # calculate the error rate for the current label\n        error = label_counter[label] / total\n        \n        # store the error rate for the current label\n        label_error[label] = error\n        \n    return label_error\n    \n    \ndef calc_Stats(df, classCol, predictedCol): \n    '''\n    Write a python function to calculate the statistics for the KNN.\n    '''\n    \n    # create a list of all the labels in the predicted column\n    unique_labels = set(df[classCol].values.tolist())\n    \n    # create a list of all the labels in the predicted column\n    predicted_labels = set(df[predictedCol].values.tolist())\n    \n    # use a counter to calculate how many times each label appears in the predicted column\n    label_counter = Counter(df[predictedCol].values.tolist())\n    \n    # create a dictionary to store the stats for each label\n    label_stats = dict()\n    \n    # loop through each label\n    for label in unique_labels:\n        \n        # create a dictionary to store the stats for each label\n        stats_dict = dict()\n        \n        # create a list for the label\n        label_list = list()\n        \n        # loop through the labels in the predicted column\n        for pred_label in predicted_labels:\n            \n            # add the predicted label to the list\n            label_list.append(pred_label)\n            \n            # calculate the total number of times the label is the predicted label\n            total = label_counter[pred_label]\n            \n            # calculate the percentage of times the label is the predicted label\n            percent = label_counter[pred_label] / total\n            \n            # store the stats for the current label\n            stats_dict['Label'] = pred_label\n            stats_dict['Total'] = total\n            stats_dict['Percent'] = percent\n            \n        # store the stats for the current label\n        label_stats[label] = stats_dict\n        \n    return label_stats\n    \n    \ndef calc_Metrics(df, classCol, predictedCol): \n    '''\n    Write a python function to calculate the metrics for the KNN.\n    '''\n    \n    # create a list of all the labels in the predicted column\n    unique_labels = set(df[classCol].values.tolist())\n    \n    # create a list of all the labels in the predicted column\n    predicted_labels = set(df[predictedCol].values.tolist())\n    \n    # use a counter to calculate how many times each label appears in the predicted column\n    label_counter = Counter(df[predictedCol].values.tolist())\n    \n    # create a dictionary to store the metrics for each label\n    label_metrics = dict()\n    \n    # loop through each label\n    for label in unique_labels:\n        \n        # create a dictionary to store the metrics for each label\n        stats_dict = dict()\n        \n        # create a list for the label\n        label_list = list()\n        \n        # loop through the labels in the predicted column\n        for pred_label in predicted_labels:\n            \n            # add the predicted label to the list\n            label_list.append(pred_label)\n            \n            # calculate the total number of times the label is the predicted label\n            total = label_counter[pred_label]\n            \n            # calculate the percentage of times the label is the predicted label\n            percent = label_counter[pred_label] / total\n            \n            # calculate the accuracy of the label\n            accuracy = label_counter[pred_label] / total\n            \n            # calculate the error of the label\n            error = 1 - accuracy\n            \n            # store the metrics for the current label\n            stats_dict['Label'] = pred_label\n            stats_dict['Total'] = total\n            stats_dict['Percent'] = percent\n            stats_dict['Accuracy'] = accuracy\n            stats_dict['Error'] = error\n            \n        # store the metrics for the current label\n        label_metrics[label] = stats_dict\n        \n    return label_metrics\n    \n    \n    \ndef calc_MSE(df, classCol, predictedCol): \n    '''\n    Write a python function to calculate the Mean Square Error of the KNN.\n    '''\n    \n    # create a list of all the labels in the predicted column\n    unique_labels = set(df[classCol].values.tolist())\n    \n    # create a list of all the labels in the predicted column\n    predicted_labels = set(df[predictedCol].values.tolist())\n    \n    # use a counter to calculate how many times each label appears i",
        "num_ids": 92
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if newList:\n        temp=newList[0]\n        newList[0]=newList[-1]\n        newList[-1]=temp\n    return newList\n",
        "num_ids": 44
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList \n",
        "num_ids": 34
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[-1]\n    newList[-1] = newList[0]\n    newList[0] = temp\n    return newList\n    ",
        "num_ids": 41
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    listLen = len(newList)\n    temp = newList[0]\n    newList[0] = newList[listLen-1]\n    newList[listLen-1] = temp\n    return newList\n",
        "num_ids": 54
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    list = newList\n    temp = list[0]\n    list[0] = list[len(list)-1]\n    list[len(list)-1] = temp\n    return list\n",
        "num_ids": 47
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \ndef insert_element_in_List(newList,element):\n    '''\n    Write a python function to insert an element in a given list at a given position.\n    '''\n    newList.insert(3,element)\n    return newList\n    \ndef delete_element_from_List(newList,element):\n    '''\n    Write a python function to delete an element from a given list.\n    '''\n    newList.remove(element)\n    return newList\n    \ndef reverse_a_list(newList):\n    '''\n    Write a python function to reverse a list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef find_max_element_in_list(newList):\n    '''\n    Write a python function to find the maximum element from the list.\n    '''\n    maxElement = newList[0]\n    for i in newList:\n        if i > maxElement:\n            maxElement = i\n    return maxElement\n    \ndef find_min_element_in_list(newList):\n    '''\n    Write a python function to find the minimum element from the list.\n    '''\n    minElement = newList[0]\n    for i in newList:\n        if i < minElement:\n            minElement = i\n    return minElement\n    \ndef find_common_element(newList1,newList2):\n    '''\n    Write a python function to find common element from two list.\n    '''\n    common = []\n    for i in newList1:\n        if i in newList2:\n            common.append(i)\n    return common\n    \ndef remove_duplicate_from_list(newList):\n    '''\n    Write a python function to remove the duplicate element from the list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_element_from_list_at_index(newList,index):\n    '''\n    Write a python function to remove an element from the list at a given index.\n    '''\n    del newList[index]\n    return newList\n    \ndef remove_element_from_list_from_end(newList,element):\n    '''\n    Write a python function to remove an element from the list from the end.\n    '''\n    newList.pop()\n    return newList\n    \ndef add_element_in_list(newList,element):\n    '''\n    Write a python function to add an element in the list.\n    '''\n    newList.append(element)\n    return newList\n    \ndef merge_list_into_one(list1,list2):\n    '''\n    Write a python function to merge two list into one.\n    '''\n    list3 = list1 + list2\n    return list3\n    \ndef sort_list(newList):\n    '''\n    Write a python function to sort the list.\n    '''\n    newList.sort()\n    return newList\n    \ndef concatenate_list(newList):\n    '''\n    Write a python function to concatenate all the elements in a list into one string and then split the string into individual element in a new list.\n    '''\n    newList1 = \"\".join(newList)\n    newList2 = newList1.split(\" \")\n    return newList2\n    \ndef remove_element_from_list_and_return_index(newList,element):\n    '''\n    Write a python function to remove an element from the list and return the index of the element.\n    '''\n    index = newList.index(element)\n    del newList[index]\n    return index\n    \ndef remove_element_from_list_from_index(newList,index):\n    '''\n    Write a python function to remove an element from the list at a given index.\n    '''\n    del newList[index]\n    return newList\n    \ndef replace_element_from_list_with_another_element(newList,index,element):\n    '''\n    Write a python function to replace an element from the list at a given index with a new element.\n    '''\n    newList[index] = element\n    return newList\n    \ndef delete_list(newList):\n    '''\n    Write a python function to delete a list.\n    '''\n    del newList\n    \ndef copy_list(newList):\n    '''\n    Write a python function to copy a list.\n    '''\n    newList1 = newList.copy()\n    return newList1\n    \ndef slice_list_from_start_to_end(newList,index1,index2):\n    '''\n    Write a python function to slice a list from the given start index to the given end index.\n    '''\n    newList1 = newList[index1:index2]\n    return newList1\n    \ndef slice_list_from_start_to_end_with_step_size(newList,index1,index2,step_size):\n    '''\n    Write a python function to slice a list from the given start index to the given end index with step size.\n    '''\n    newList1 = newList[index1:index2:step_size]\n    return newList1\n    \ndef slice_list_from_end(newList,index1,index2):\n    '''\n    Write a python function to slice a list from the given start index to the given end index.\n    '''\n    newList1 = newList[index1:index2]\n    return newList1\n    \ndef slice_list_from_end_with_step_size(newList,index1,index2,step_size):\n    '''\n    Write a python function to slice a list from the given start index to the given end index with step size.\n    '''\n    newList1 = newList[index1:index2:step_size]\n    return newList1\n    \ndef slice_list_from_start_with_step_size(newList,index1,index2,step_size):\n    '''\n    Write a python function to slice a list from the given start index to the given end index with step size.\n    '''\n    newList1 = newList[index1::step_size]\n    return newList1\n    \ndef slice_list_with_list_element(newList,index1,index2):\n    '''\n    Write a python function to slice a list with the list element between index1 and index2.\n    '''\n    newList1 = newList[index1:index2]\n    return newList1\n    \ndef slice_list_with_list_element_from_start_to_end(newList,index1,index2):\n    '''\n    Write a python function to slice a list with the list element between index1 and index2.\n    '''\n    newList1 = newList[:index2]\n    return newList1\n    \ndef slice_list_with_list_element_from_start_to_end_with_step_size(newList,index1,index2,step_size):\n    '''\n    Write a python function to slice a list with the list element between index1 and index2 with step size.\n    '''\n    newList1 = newList[index1::step_size]\n    return newList1\n    \ndef slice_list_with_list_element_from_end_with_step_size(newList,index1,index2,step_size):\n    '''\n    Write a python function to slice a list with the list element between index1 and index2 with step size.\n    '''\n    newList1 = newList[index1:index2:step_size]\n    return newList1\n    \ndef slice_list_with_list_element_from_end(newList,index1,index2):\n    '''\n    Write a python function to slice a list with the list element between index1 and index2.\n    '''\n    newList1 = newList[index1:index2]\n    return newList1\n    \ndef count_number_of_occurrence_of_element(newList,element):\n    '''\n    Write a python function to count the number of occurrence of an element in a list.\n    '''\n    count = 0\n    for i in ne",
        "num_ids": 12
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "num_ids": 33
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14\n    return pi*(r**2)\n",
        "num_ids": 19
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3.14 * r * r) / 2\n",
        "num_ids": 16
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import sqrt, pi\n    import numpy as np\n    \n    # area of a triangle = 1/2 * base * height\n    area = 1/2 * (r**2) * sqrt(3)\n    \n    return area\n",
        "num_ids": 60
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r=float(r)\n    triangle_area= (3**0.5/4)*r**2\n    return triangle_area\n",
        "num_ids": 35
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * (r*r)\n    print(area)\n",
        "num_ids": 21
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14\n    area = pi * r * r\n    return area\n",
        "num_ids": 22
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3.141592653589793 * (r**2) / 4\nprint(triangle_area(0.25))\n",
        "num_ids": 33
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi, sin, cos\n    def find_area(r) :\n        return (pi*r**2)/2\n    def find_s(r) :\n        return (2*r*sin(pi/3))/3\n    def find_c(r) :\n        return (r*cos(pi/3))/3\n    def find_a(r) :\n        return ((3*r**2)/2)*sin(pi/3)\n    def find_s_approx(r) :\n        return (2*r*sin(pi/3))\n    def find_c_approx(r) :\n        return (r*cos(pi/3))\n    def find_a_approx(r) :\n        return ((3*r**2)/2)*sin(pi/3)\n    def find_max_approx(r) :\n        return ((2*r*sin(pi/3)) + ((r*cos(pi/3))/3))\n    return (find_area(r), find_s(r), find_c(r), find_a(r), find_s_approx(r), find_c_approx(r), find_a_approx(r), find_max_approx(r))\n",
        "num_ids": 298
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r = int(input())\n    pi = 3.14\n    area = pi*r*r/2\n    print('Area of the largest Triangle that can be inscribed in a Semicircle with radius',r,'is',area)\n",
        "num_ids": 56
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass # Write your code here \n    pass # Write your code here \n",
        "num_ids": 20
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # if end is None:\n    #     end = len(array)\n    # array_list = []\n    # for i in range(start,end):\n    #     array_list.append(i)\n    # print(array_list)\n    # for i in range(start,end):\n    #     if array_list[i]!=array[i]:\n    #         return array_list[i]\n    # return len(array)\n",
        "num_ids": 109
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start == end:\n        return end+1\n    if start > end:\n        return start\n    mid = (start+end)//2\n    if array[mid]!= mid:\n        if mid == 0 or array[mid-1] == mid-1:\n            return mid\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n",
        "num_ids": 124
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #edge cases:\n    if end==None:\n        end=len(array)\n    if start==end:\n        return array[start]\n    else:\n        mid=(start+end)//2\n        #print(start,end,mid)\n        if array[mid]==mid+1:\n            #print(\"mid is the missing number\")\n            return mid+1\n        elif array[mid]==mid:\n            #print(\"mid is not the missing number\")\n            return find_First_Missing(array,mid,end)\n        elif array[mid]>mid:\n            return find_First_Missing(array,start,mid)\n        else:\n            return find_First_Missing(array,mid,end)\n    #print(\"the array is {} and its missing number is {}\".format(array,missing_number))\n",
        "num_ids": 198
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    i = start\n    while i < end:\n        if array[i]!= i+1:\n            return i+1\n        i += 1\n    return i+1\n",
        "num_ids": 59
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n    if not end:\n        end = len(array)\n    if start >= end:\n        return start + 1\n    \n    mid = (start+end)//2\n",
        "num_ids": 52
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start==end:\n        return end+1\n    mid=(start+end)//2\n    if array[mid]==mid:\n        return find_First_Missing(array,start,mid)\n    return find_First_Missing(array,mid+1,end)\n",
        "num_ids": 83
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n",
        "num_ids": 17
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end=len(array)-1\n    \n    while start<=end:\n        mid=start+(end-start)//2\n        \n        if array[mid]==mid:\n            start=mid+1\n        else:\n            end=mid-1\n    return start\n    \n",
        "num_ids": 75
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!=i+1:\n            return i+1\n    return None\n",
        "num_ids": 51
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(array)\n    if array==None:\n        raise ValueError('Array cannot be empty')\n    if end==None:\n        end=len(array)\n    \n    if start<0:\n        raise ValueError('Start cannot be a negative number')\n    \n    if start>=end:\n        return -1\n    \n    while start<=end:\n        if start!=array[start]:\n            return start\n        start+=1\n    return -1\n        \ndef find_First_Missing_Two(array,start,end):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(array)\n    if array==None:\n        raise ValueError('Array cannot be empty')\n    \n    if start<0:\n        raise ValueError('Start cannot be a negative number')\n    \n    if start>=end:\n        return -1\n    \n    while start<=end:\n        if start!=array[start]:\n            return start\n        start+=1\n    return -1\n        \ndef find_First_Missing_One(array,start,end):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(array)\n    if array==None:\n        raise ValueError('Array cannot be empty')\n    \n    if start<0:\n        raise ValueError('Start cannot be a negative number')\n    \n    if start>=end:\n        return -1\n    \n    while start<=end:\n        if start!=array[start]:\n            return start\n        start+=1\n    return -1\n        \ndef find_First_Missing_zero(array,start,end):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(array)\n    if array==None:\n        raise ValueError('Array cannot be empty')\n    \n    if start<0:\n        raise ValueError('Start cannot be a negative number')\n    \n    if start>=end:\n        return -1\n    \n    while start<=end:\n        if start!=array[start]:\n            return start\n        start+=1\n    return -1\n        \ndef find_First_Missing_Three(array,start,end):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(array)\n    if array==None:\n        raise ValueError('Array cannot be empty')\n    \n    if start<0:\n        raise ValueError('Start cannot be a negative number')\n    \n    if start>=end:\n        return -1\n    \n    while start<=end:\n        if start!=array[start]:\n            return start\n        start+=1\n    return -1\n        \ndef find_First_Missing_Four(array,start,end):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(array)\n    if array==None:\n        raise ValueError('Array cannot be empty')\n    \n    if start<0:\n        raise ValueError('Start cannot be a negative number')\n    \n    if start>=end:\n        return -1\n    \n    while start<=end:\n        if start!=array[start]:\n            return start\n        start+=1\n    return -1\n        \ndef find_First_Missing_Five(array,start,end):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(array)\n    if array==None:\n        raise ValueError('Array cannot be empty')\n    \n    if start<0:\n        raise ValueError('Start cannot be a negative number')\n    \n    if start>=end:\n        return -1\n    \n    while start<=end:\n        if start!=array[start]:\n            return start\n        start+=1\n    return -1\n        \ndef find_First_Missing_Six(array,start,end):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(array)\n    if array==None:\n        raise ValueError('Array cannot be empty')\n    \n    if start<0:\n        raise ValueError('Start cannot be a negative number')\n    \n    if start>=end:\n        return -1\n    \n    while start<=end:\n        if start!=array[start]:\n            return start\n        start+=1\n    return -1\n        \ndef find_First_Missing_Seven(array,start,end):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(array)\n    if array==None:\n        raise ValueError('Array cannot be empty')\n    \n    if start<0:\n        raise ValueError('Start cannot be a negative number')\n    \n    if start>=end:\n        return -1\n    \n    while start<=end:\n        if start!=array[start]:\n            return start\n        start+=1\n    return -1\n        \ndef find_First_Missing_Eight(array,start,end):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(array)\n    if array==None:\n        raise ValueError('Array cannot be empty')\n    \n    if start<0:\n        raise ValueError('Start cannot be a negative number')\n    \n    if start>=end:\n        return -1\n    \n    while start<=end:\n        if start!=array[start]:\n            return start\n        start+=1\n    return -1\n        \ndef find_First_Missing_Nine(array,start,end):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(array)\n    if array==None:\n        raise ValueError('Array cannot be empty')\n    \n    if start<0:\n        raise ValueError('Start cannot be a negative number')\n    \n    if start>=end:\n        return -1\n    \n    while start<=end:\n        if start!=array[start]:\n            return start\n        start+=1\n    return -1\n    \ndef find_First_Missing_Ten(array,start,end):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(array)\n    if array==None:\n        raise ValueError('Array cannot be empty')\n    \n    if start<0:\n        raise ValueError('Start cannot be a negative number')\n    \n    if start>=end:\n        return -1\n    \n    while start<=end:\n        if start!=array[start]:\n            return start\n        start+=1\n    return -1\n    \ndef find_First_Missing_Eleven(array,start,end):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(array)\n    if array==None:\n        raise ValueError('Array cannot be empty')\n    \n    if start<0:\n        raise ValueError('Start cannot be a negative number')\n    \n    if start>=end:\n        return -1\n    \n    while start<=end:\n        if start!=array[start]:\n            return start\n        start+=1\n    return -1\n    \ndef find_First_Missing_Twelve(array,start,end):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #print(array)\n    if array==None:\n        raise ValueError('Array cannot be empty')\n    \n    if start<0:\n        raise ValueError('Start cannot be a negative number')\n    \n    if start>=end:\n        return -1\n    \n    while start<=end:\n        if start!=array[start]:\n            return start\n        start+=1\n    return -1\n    \ndef find_First_Missing_Thirteen(array,start,end):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.",
        "num_ids": 21
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split())\n    \ndef split_and_join(line):\n    '''\n    Write a function to split and join an input string into individual characters.\n    '''\n    return '-'.join(line.split(' '))\n",
        "num_ids": 16
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string\n",
        "num_ids": 23
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    print(string.replace(\" \",\"%20\"))\n",
        "num_ids": 15
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # new_string = []\n    # for i in string:\n    #     if i == \" \":\n    #         new_string.append(\"%20\")\n    #     else:\n    #         new_string.append(i)\n    # return \"\".join(new_string)\n",
        "num_ids": 71
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    # for i in range(0,len(list)):\n    #     if list[i] % 2 == 0:\n    #         print(list[i])\n    return [i for i in list if i % 2 == 0]\n",
        "num_ids": 59
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1=[]\n    list2=[]\n    for x in list:\n        if x%2==0:\n            list1.append(x)\n        else:\n            list2.append(x)\n    return list1, list2\n",
        "num_ids": 60
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_even = []\n    for x in list:\n        if x % 2 == 0:\n            list_even.append(x)\n    return list_even\n",
        "num_ids": 41
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    elements = []\n    for num in list:\n        if(num % 2 == 0):\n            elements.append(num)\n    return elements\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(Split(list1)) ",
        "num_ids": 70
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    print(even_numbers)\n    return even_numbers\n",
        "num_ids": 53
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = [] \n    for x in list: \n        if x % 2 == 0: \n            even_numbers.append(x) \n    return even_numbers \n",
        "num_ids": 49
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    print(\"Even numbers in the list are: \", even_list)\n    print(\"Odd numbers in the list are: \", odd_list)\n",
        "num_ids": 89
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    i=0\n    l = []\n    while(i<len(list)):\n        if (list[i] %2 == 0):\n            l.append(list[i])\n        i+=1\n    return l\nlist = [12, 34, 45, 56, 67, 78, 89, 90]\nprint(Split(list))\n",
        "num_ids": 82
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    for index in list:\n        if index % 2 == 0:\n            print (index)\n",
        "num_ids": 24
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i%2==0:\n            even_numbers.append(i)\n    return even_numbers\nprint(Split([12,56,78,90,45,33,24]))\n",
        "num_ids": 64
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # split the coordinate tuple into list of two ints\n    coor_list = list(ele)\n    \n    # create a list of adjacent coordinates\n    adj_coor = [coor_list[0] - 1, coor_list[1] - 1]\n    adj_coor.extend(coor_list)\n    adj_coor.extend([coor_list[0] + 1, coor_list[1] + 1])\n    \n    # remove coordinates outside of range of the array\n    adj_coor = [coor for coor in adj_coor if 0 <= coor[0] <= 9 and 0 <= coor[1] <= 9]\n    \n    # remove the coordinate itself\n    adj_coor = [coor for coor in adj_coor if coor not in sub]\n    \n    return adj_coor\n    \ndef get_adjacents(arr, coord, sub = []):\n    '''\n    Write a function to extract all the coordinates adjacent to the given coordinate tuple.\n    '''\n    # create a list of adjacent coordinates\n    adj_coor = [coord[0] - 1, coord[1] - 1]\n    adj_coor.extend(coord)\n    adj_coor.extend([coord[0] + 1, coord[1] + 1])\n    \n    # remove coordinates outside of range of the array\n    adj_coor = [coor for coor in adj_coor if 0 <= coor[0] <= 9 and 0 <= coor[1] <= 9]\n    \n    # remove the coordinate itself\n    adj_coor = [coor for coor in adj_coor if coor not in sub]\n    \n    return adj_coor\n",
        "num_ids": 164
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # adjac_list = []\n    # for n in range(-1, 2):\n    #     for m in range(-1, 2):\n    #         adjacent = (ele[0] + n, ele[1] + m)\n    #         if (adjacent[0] >= 0 and adjacent[1] >= 0) and (adjacent[0] < len(grid[0]) and adjacent[1] < len(grid)):\n    #             adjac_list.append(adjacent)\n    # return adjac_list\n",
        "num_ids": 126
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n    else:\n        for i in sub:\n            sub_adj = [ele[0], ele[1]+1, ele[2], ele[3]+1]\n            adj = adjac(sub_adj, sub.copy())\n        return adj\n            \n            \ndef neigh_count(grid, x, y, z):\n    '''\n    Given a coordinate tuple, return the count of all the neighbors of the given coordinate\n    '''\n    neigh = adjac([x, y, z])\n    neigh_count = 0\n    for i in neigh:\n        if i in grid:\n            neigh_count += 1\n    return neigh_count\n",
        "num_ids": 52
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    coord = set(ele)\n    s = ele[0]\n    e = ele[1]\n    cords = [\n        (s-1, e-1), (s-1, e), (s-1, e+1),\n        (s, e-1), (s, e+1),\n        (s+1, e-1), (s+1, e), (s+1, e+1)\n    ]\n    return [c for c in cords if c[0] >= 0 and c[0] < n and c[1] >= 0 and c[1] < n]\n",
        "num_ids": 143
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 2:\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if i == 0 and j == 0:\n                    continue\n                yield ele[0] + i, ele[1] + j\n    elif len(ele) == 3:\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                for k in range(-1, 2):\n                    if i == 0 and j == 0 and k == 0:\n                        continue\n                    yield ele[0] + i, ele[1] + j, ele[2] + k\n    elif len(ele) == 4:\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                for k in range(-1, 2):\n                    for m in range(-1, 2):\n                        if i == 0 and j == 0 and k == 0 and m == 0:\n                            continue\n                        yield ele[0] + i, ele[1] + j, ele[2] + k, ele[3] + m\n",
        "num_ids": 259
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #print(ele)\n    #print(sub)\n    #print('\\n')\n    #print('\\n')\n    \n    sub.append(ele)\n    for i in range(len(sub)):\n        x1, y1 = sub[i]\n        for j in range(len(sub)):\n            if i == j:\n                continue\n            x2, y2 = sub[j]\n            #print(x1, y1, x2, y2)\n            #print('\\n')\n            if abs(x1 - x2) == 1 and abs(y1 - y2) == 1:\n                #print(sub)\n                sub.append([x1, y2])\n                sub.append([x2, y1])\n                #print(sub)\n                #print('\\n')\n    return sub\n    ",
        "num_ids": 201
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Make a sublist of sub from the first element of ele to the last element of ele.\n    sub = sub + [ele[0]] + [ele[-1]]\n    # If ele has more than 2 elements, then recursively call adjac to calculate adjacency with the sublist of ele.\n    if len(ele) > 2:\n        sub = adjac(ele[1:-1], sub)\n    return sub\n    ",
        "num_ids": 102
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    coord = []\n    \n    if sub == []:\n        sub = list(ele)\n    \n    if sub[0] == ele[0]:\n        coord.append(sub[1])\n    elif sub[1] == ele[1]:\n        coord.append(sub[0])\n        \n    coord.append(sub[0] + sub[1])\n    coord.append(sub[1] + sub[0])\n    \n    if sub[0] == 0:\n        coord.append(sub[1] - 1)\n    elif sub[0] == 9:\n        coord.append(sub[1] + 1)\n    elif sub[1] == 0:\n        coord.append(sub[0] - 1)\n    elif sub[1] == 9:\n        coord.append(sub[0] + 1)\n        \n    if sub[0] == 0 and sub[1] == 0:\n        coord.append(sub[0] + 1)\n        coord.append(sub[1] + 1)\n    elif sub[0] == 0 and sub[1] == 9:\n        coord.append(sub[0] + 1)\n        coord.append(sub[1] - 1)\n    elif sub[0] == 9 and sub[1] == 0:\n        coord.append(sub[0] - 1)\n        coord.append(sub[1] + 1)\n    elif sub[0] == 9 and sub[1] == 9:\n        coord.append(sub[0] - 1)\n        coord.append(sub[1] - 1)\n        \n    return coord\n    \ndef check(lista, value):\n    '''\n    Write a function to check if a given coordinate tuple is in the list of coordinates.\n    '''\n    for ele in lista:\n        if ele[0] == value[0] and ele[1] == value[1]:\n            return True\n    return False\n    \ndef find(lista, value):\n    '''\n    Write a function to find the coordinate tuple of the given value in the list of coordinates.\n    '''\n    for ele in lista:\n        if ele[0] == value[0] and ele[1] == value[1]:\n            return ele\n            \n    return False\n    \ndef check_move(board, pos, letter):\n    '''\n    Write a function to check if a given coordinate tuple is occupied by the given letter.\n    '''\n    if board[pos[0]][pos[1]] == letter:\n        return True\n    return False\n    \ndef check_win(board, letter):\n    '''\n    Write a function to check if the given letter has won the game.\n    '''\n    pos = find(board, letter)\n    if pos == False:\n        return False\n    \n    for coord in adjac(pos):\n        if check(board, coord) == False or check(board, coord)[0]!= letter:\n            return False\n    return True\n    \ndef main():\n    board = [[' ','',''], [' ','',''], [' ','','']]\n    \n    print('Enter the name of the players')\n    name1 = input('Player 1: ')\n    name2 = input('Player 2: ')\n    \n    while True:\n        print('Enter a letter for {}'.format(name1))\n        letter1 = input()\n        if letter1!= 'X' and letter1!= 'O':\n            print('Please choose X or O')\n            continue\n            \n        if letter1 == 'X':\n            letter2 = 'O'\n        else:\n            letter2 = 'X'\n            \n        while True:\n            print_board(board)\n            print('Enter a position to place your {}'.format(letter1))\n            pos1 = input()\n            \n            if not (pos1[0] in '123' and pos1[1] in '123'):\n                print('Please enter valid position')\n                continue\n                \n            if check_move(board, (int(pos1[0]), int(pos1[1])), letter1):\n                print('Please choose another position')\n                continue\n                \n            board[int(pos1[0])][int(pos1[1])] = letter1\n            if check_win(board, letter1):\n                print('{} has won!'.format(name1))\n                return\n                \n            print('Enter a position to place your {}'.format(letter2))\n            pos2 = input()\n            \n            if not (pos2[0] in '123' and pos2[1] in '123'):\n                print('Please enter valid position')\n                continue\n                \n            if check_move(board, (int(pos2[0]), int(pos2[1])), letter2):\n                print('Please choose another position')\n                continue\n                \n            board[int(pos2[0])][int(pos2[1])] = letter2\n            if check_win(board, letter2):\n                print('{} has won!'.format(name2))\n                return\n            \n            print_board(board)\n            \nif __name__ == '__main__':\n    main()",
        "num_ids": 587
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    x_l = [x-1, x, x+1]\n    y_l = [y-1, y, y+1]\n    xy_l = [x-1, y-1, x+1, y+1]\n    xy_l2 = [x-1, x+1, y-1, y+1]\n    xy_l3 = [x-1, x, y+1, y-1]\n    xy_l4 = [x+1, x-1, x, y+1, y-1]\n    xy_l5 = [x+1, x, y-1, y+1, y-1]\n    xy_l6 = [x-1, x+1, y, y+1, y-1]\n    xy_l7 = [x-1, x+1, y+1, y-1, y-1]\n    xy_l8 = [x+1, x-1, y+1, y-1, y-1]\n    sub.extend(x_l)\n    sub.extend(y_l)\n    sub.extend(xy_l)\n    sub.extend(xy_l2)\n    sub.extend(xy_l3)\n    sub.extend(xy_l4)\n    sub.extend(xy_l5)\n    sub.extend(xy_l6)\n    sub.extend(xy_l7)\n    sub.extend(xy_l8)\n    return sub\n",
        "num_ids": 368
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    # adjacency_list is the list of adjacency indices\n    adjacency_list = []\n    \n    # prev_distance is the sum of all the distances to the previous points\n    prev_distance = 0\n    \n    # prev_coordinate is the coordinate tuple of the last point in the adjacency list\n    prev_coordinate = None\n    \n    # prev_direction is the direction of the last point in the adjacency list\n    prev_direction = None\n    \n    for i, elem in enumerate(sub):\n        if i == 0:\n            adjacency_list.append(elem)\n            prev_distance += distance(elem, ele)\n            prev_coordinate = elem\n            prev_direction = None\n            \n        else:\n            if prev_direction is None:\n                adjacency_list.append(elem)\n                prev_distance += distance(elem, ele)\n                prev_coordinate = elem\n                prev_direction = None\n            \n            elif prev_direction is not None:\n                direction = direction_calc(elem, prev_coordinate)\n                \n                if direction == 'forward':\n                    adjacency_list.append(elem)\n                    prev_distance += distance(elem, ele)\n                    prev_coordinate = elem\n                    \n                elif direction == 'backward':\n                    if distance(elem, prev_coordinate) > prev_distance:\n                        adjacency_list.append(elem)\n                        prev_distance += distance(elem, ele)\n                        prev_coordinate = elem\n                        \n                elif direction == 'left':\n                    adjacency_list.append(elem)\n                    prev_distance += distance(elem, ele)\n                    prev_coordinate = elem\n                    \n                    if prev_direction == 'forward':\n                        prev_direction = 'left'\n                    elif prev_direction == 'backward':\n                        prev_direction = 'right'\n                    \n                elif direction == 'right':\n                    adjacency_list.append(elem)\n                    prev_distance += distance(elem, ele)\n                    prev_coordinate = elem\n                    \n                    if prev_direction == 'forward':\n                        prev_direction = 'right'\n                    elif prev_direction == 'backward':\n                        prev_direction = 'left'\n                        \n    return adjacency_list\n",
        "num_ids": 561
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    #step one:\n    #make it lower case\n    text = text.lower()\n    #step two:\n    #replace spaces with underscores\n    return text.replace(' ', '_')\n    ",
        "num_ids": 48
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # return text.replace(\" \", \"_\").replace(\"_\", \" \")\n    return text.replace(\" \", \"_\")\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Your code here\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n    # for i in text:\n    #     if i == \" \":\n    #         return text.replace(\" \", \"_\")\n    #     if i == \"_\":\n    #         return text.replace(\"_\", \" \")\n",
        "num_ids": 78
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' not in text:\n        return text\n    elif '_' not in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')\n",
        "num_ids": 51
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n    return text.replace('_','')\n",
        "num_ids": 24
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_')\n",
        "num_ids": 13
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text.count(\" \") > 0:\n        return text.replace(\" \", \"_\")\n    else:\n        return text.replace(\"_\", \" \")\n",
        "num_ids": 40
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    temp = []\n    for i in num_list:\n        if i!=0:\n            temp.append(i)\n    temp.extend([0] * num_list.count(0))\n    return temp\n",
        "num_ids": 54
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(num_list.pop(num_list.index(0)))\n    return num_list\n",
        "num_ids": 56
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    print(\"\\nOriginal List: \", num_list)\n    for i in range(num_list.count(0)):\n        num_list.remove(0)\n        num_list.append(0)\n    print(\"New List: \", num_list)\n",
        "num_ids": 64
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    l = []\n    for i in num_list:\n        if i!= 0:\n            l.append(i)\n        else:\n            l.append(0)\n    return l\n",
        "num_ids": 48
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for num in num_list:\n        if num == 0:\n            num_list.remove(num)\n            num_list.append(0)\n    return num_list\n",
        "num_ids": 44
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in num_list:\n        if i == 0:\n            zero_count += 1\n    for i in range(zero_count):\n        num_list.remove(0)\n    num_list.extend([0] * zero_count)\n    return num_list\n",
        "num_ids": 75
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    count = 0\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n        else:\n            count += 1\n    for i in range(count):\n        new_list.append(0)\n    return new_list\n",
        "num_ids": 75
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in num_list:\n        if i == 0:\n            count += 1\n    for i in range(count):\n        num_list.remove(0)\n    for i in range(count):\n        num_list.append(0)\n    return num_list\n",
        "num_ids": 72
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n",
        "num_ids": 54
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # for i in num_list:\n    #     if i == 0:\n    #         num_list.remove(i)\n    #         num_list.append(0)\n    # return num_list\n",
        "num_ids": 52
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    sum = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            sum += arr[i] ^ arr[j]\n    return sum\n",
        "num_ids": 54
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum([arr[i]^arr[j] for i in range(n) for j in range(i+1,n)])\n",
        "num_ids": 35
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0 \n    for i in range(n) : \n        for j in range(i+1,n) : \n            result = result ^ arr[i] ^ arr[j]\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor ^= arr[i]^arr[j]\n    return xor\n",
        "num_ids": 50
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # arr = list(map(int,input(\"Enter list of integers : \").split()))\n    sum = 0\n    for i in range(0,n): \n        for j in range(i+1,n): \n            sum += (arr[i] ^ arr[j])\n    return sum\n",
        "num_ids": 74
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    s = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            s += arr[i] ^ arr[j]\n    return s\n",
        "num_ids": 50
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            result = result ^ arr[i] ^ arr[j]\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n <= 1: \n        return 0\n    arr.sort() \n    sum = 0\n    for i in range(0,n-1,2): \n        sum += arr[i] ^ arr[i+1] \n    if n & 1: \n        sum += arr[n-1] \n    return sum \nif __name__ == '__main__': \n    arr = [10, 20, 30, 40, 10, 20] \n    print(pair_xor_Sum(arr, len(arr))) \n",
        "num_ids": 130
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # a^b = c^d\n    # a^c = b^d\n    \n    result = 0\n    \n    # xor of every number \n    for i in range(0,n) : \n        result = result ^ arr[i] \n        \n    # xor of every pair\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            result = result ^ arr[i] ^ arr[j] \n",
        "num_ids": 118
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(n) :\n        for j in range(i+1, n) :\n            ans += arr[i] ^ arr[j]\n    return ans\n",
        "num_ids": 48
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    h = []\n    for i in range(n):\n        hq.heappush(h, iterable[i])\n    for i in range(n):\n        iterable[i] = hq.heappop(h)\n",
        "num_ids": 67
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for element in iterable:\n        hq.heappush(h, element)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n",
        "num_ids": 28
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    l = len(iterable)\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        iterable[i] = hq.heappop(iterable)\n    return iterable\n",
        "num_ids": 69
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        iterable[i] = hq.heappop(iterable)\n",
        "num_ids": 45
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create an empty list\n    list_len = len(iterable)\n    arr = []\n    # Take each element of list in iterable,\n    # append to list and call heapify\n    for i in range(list_len):\n        arr.append(iterable[i])\n        hq.heapify(arr)\n    # Start popping from the bottom\n    for j in range(list_len):\n        iterable[j] = arr[0]\n        hq.heappop(arr)\n    return iterable\n",
        "num_ids": 127
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for _ in range(len(heap))]\nprint(heap_sort([3,2,1,5,6,4]))\n",
        "num_ids": 76
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create an empty list\n    h = []\n    # create a loop to iterate over the elements of the list\n    for x in iterable:\n        # using heappush function to push the elements into heap\n        hq.heappush(h,x)\n    # create a loop to iterate over the elements of the list\n    for x in range(0,len(h)):\n        # using heappop function to pop the elements from heap\n        print(hq.heappop(h))\n        \nif __name__ == '__main__':\n    iterable = [5, 7, 2, 9, 4, 1, 3]\n    heap_sort(iterable)\n",
        "num_ids": 163
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_amount = actual_cost + sale_amount\n    if total_amount > actual_cost:\n        return True\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount < actual_cost:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "num_ids": 29
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == actual_cost: \n        return True\n    else: \n        return False\n",
        "num_ids": 27
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print(\"Sorry. Your total sale amount is less than the actual cost of the item. \\\n        Try again!\")\n    elif actual_cost < sale_amount:\n        print(\"Congratulation! Your total sale amount is higher than the actual cost of the item. \\\n        Try again!\")\n    else:\n        print(\"Your total sale amount is equal to the actual cost of the item. \\\n        You are a winner!\")\n",
        "num_ids": 112
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount>actual_cost:\n        return(True)\n    else:\n        return(False)\n",
        "num_ids": 29
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == actual_cost:\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"loss and no profit\")\n    elif actual_cost > sale_amount:\n        print(\"loss\")\n    else:\n        print(\"no profit\")\n",
        "num_ids": 51
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount < actual_cost:\n        return False\n    else:\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    WCI=13.12 + 0.6215*t - 11.37 * math.pow(v,0.16) + 0.3965 * t * math.pow(v,0.16)\n    return round(WCI)\nprint(wind_chill(10,15))\n",
        "num_ids": 72
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # 1.5 * (v**0.16) * (t**0.16)\n    return round(1.5 * (v**0.16) * (t**0.16),0)\n",
        "num_ids": 52
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = 13.12 + 0.6215*t - 11.37*pow(v,0.16) + 0.3965*t*pow(v,0.16)\n    return int(round(chill))\n",
        "num_ids": 58
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    v = (v * 1000)/3600\n    wci = 13.12 + (0.6215 * t) - (11.37 * v ** 0.16) + (0.3965 * t * v ** 0.16)\n    return round(wci)\n",
        "num_ids": 81
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    windchill = 35.74 + 0.6215*v - 35.75*(t**0.16) + 0.4275*v*(t**0.16)\n    return round(windchill)\nprint(wind_chill(10,12))\nprint(wind_chill(20,12))\nprint(wind_chill(30,12))\nprint(wind_chill(40,12))\nprint(wind_chill(50,12))\nprint(wind_chill(60,12))\n",
        "num_ids": 126
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    WCI = 13.12 + 0.6215*t - 11.37*(v**0.16) + 0.3965*t*(v**0.16)\n    return round(WCI)\n",
        "num_ids": 52
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if type(v)!= float and type(v)!= int:\n        raise TypeError(\"v must be a float\")\n    if type(t)!= float and type(t)!= int:\n        raise TypeError(\"t must be a float\")\n    if t <= 0:\n        raise ValueError(\"t must be greater than 0\")\n    if v <= 0:\n        raise ValueError(\"v must be greater than 0\")\n    if v < 3.0 or t < 11.0:\n        return t\n    wci = 13.12 + 0.6215*t - 11.37*(v**0.16) + 0.3965*t*(v**0.16)\n    return round(wci)\n    raise NotImplementedError()\n",
        "num_ids": 178
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + (0.6215*v) - (11.37 * math.pow(t,0.16)) + (0.3965 * math.pow(t, 0.16)) * (v ** 0.16)\n    return int(wci)\nprint(wind_chill(120,38))\n",
        "num_ids": 82
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    print('\\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.')\n    print('\\nExamples:')\n    print('wind_chill(15,10) \u279e 18')\n    print('wind_chill(25,15) \u279e 22')\n    print('wind_chill(15,30) \u279e 16')\n    print('wind_chill(25,20) \u279e 14')\n    print('wind_chill(15,40) \u279e 21')\n    print('wind_chill(25,40) \u279e 27')\n    print('\\nNotes:')\n    print('If the temperature is equal to 0, it is considered to be -58.67\u00b0C.')\n    print('The wind chill index is only valid for temperatures between -15\u00b0C and +45\u00b0C.')\n",
        "num_ids": 214
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    return round(wci)\n    \n    \ndef new_wind_chill(v,t):\n    '''\n    Write a function to calculate the new wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    nwci = 13.12 + 0.6215 * t - 11.37 * math.sqrt(v) + 0.3965 * t * math.sqrt(v)\n    return round(nwci)\n    \n    \ndef theta(w,t):\n    '''\n    Write a function to calculate the potential temperature in Kelvin rounded to the next integer given the wind speed in km/h and the air temperature in Celsius.\n    '''\n    t_k = t + 273.15\n    theta = t_k * (w / (1.8 * 10 ** 6)) ** 0.16\n    return round(theta)\n    \n    \ndef theta_2(w,t):\n    '''\n    Write a function to calculate the potential temperature in Kelvin rounded to the next integer given the wind speed in km/h and the air temperature in Celsius.\n    '''\n    t_k = t + 273.15\n    theta = t_k * (w / (1.8 * 10 ** 6)) ** 0.16\n    return theta\n    \n    \ndef rho(t):\n    '''\n    Write a function to calculate the air density in kg/m3 rounded to the next integer given the air temperature in Celsius.\n    '''\n    rho = (850.079 * (t + 273.15) ** -11.388) * 100\n    return round(rho)\n    \n    \ndef rho_2(t):\n    '''\n    Write a function to calculate the air density in kg/m3 rounded to the next integer given the air temperature in Celsius.\n    '''\n    rho = (850.079 * (t + 273.15) ** -11.388) * 100\n    return rho\n    \n    \ndef rho_w(t,w):\n    '''\n    Write a function to calculate the air density in kg/m3 rounded to the next integer given the air temperature in Celsius and the wind speed in km/h.\n    '''\n    rho_w = (1.29 * (t + 273.15) ** -11.388) * 100 * (w ** 0.16)\n    return round(rho_w)\n    \n    \ndef rho_w_2(t,w):\n    '''\n    Write a function to calculate the air density in kg/m3 rounded to the next integer given the air temperature in Celsius and the wind speed in km/h.\n    '''\n    rho_w = (1.29 * (t + 273.15) ** -11.388) * 100 * (w ** 0.16)\n    return rho_w\n    \n    \ndef rho_t(t):\n    '''\n    Write a function to calculate the air density in kg/m3 rounded to the next integer given the air temperature in Celsius.\n    '''\n    rho_t = (1.29 * (t + 273.15) ** -11.388) * 100\n    return round(rho_t)\n    \n    \ndef rho_t_2(t):\n    '''\n    Write a function to calculate the air density in kg/m3 rounded to the next integer given the air temperature in Celsius.\n    '''\n    rho_t = (1.29 * (t + 273.15) ** -11.388) * 100\n    return rho_t\n    \n    \ndef rho_t_w(t,w):\n    '''\n    Write a function to calculate the air density in kg/m3 rounded to the next integer given the air temperature in Celsius and the wind speed in km/h.\n    '''\n    rho_t_w = (1.29 * (t + 273.15) ** -11.388) * 100 * (w ** 0.16)\n    return round(rho_t_w)\n    \n    \ndef rho_t_w_2(t,w):\n    '''\n    Write a function to calculate the air density in kg/m3 rounded to the next integer given the air temperature in Celsius and the wind speed in km/h.\n    '''\n    rho_t_w = (1.29 * (t + 273.15) ** -11.388) * 100 * (w ** 0.16)\n    return rho_t_w\n    \n    \ndef theta_w(t,w):\n    '''\n    Write a function to calculate the potential temperature in Kelvin given the air temperature in Celsius and the wind speed in km/h.\n    '''\n    theta_w = t * (w / (1.8 * 10 ** 6)) ** 0.16\n    return theta_w\n    \n    \ndef theta_w_2(t,w):\n    '''\n    Write a function to calculate the potential temperature in Kelvin given the air temperature in Celsius and the wind speed in km/h.\n    '''\n    theta_w = t * (w / (1.8 * 10 ** 6)) ** 0.16\n    return theta_w\n    \n    \ndef theta_w_t(t,w):\n    '''\n    Write a function to calculate the potential temperature in Kelvin given the air temperature in Celsius and the wind speed in km/h.\n    '''\n    theta_w = t * (w / (1.8 * 10 ** 6)) ** 0.16\n    return theta_w\n    \n    \ndef theta_w_t_2(t,w):\n    '''\n    Write a function to calculate the potential temperature in Kelvin given the air temperature in Celsius and the wind speed in km/h.\n    '''\n    theta_w = t * (w / (1.8 * 10 ** 6)) ** 0.16\n    return theta_w\n    \n    \ndef theta_w_t_3(t,w):\n    '''\n    Write a function to calculate the potential temperature in Kelvin given the air temperature in Celsius and the wind speed in km/h.\n    '''\n    theta_w = t * (w / (1.8 * 10 ** 6)) ** 0.16\n    return theta_w\n    \n    \ndef theta_w_t_w(t,w):\n    '''\n    Write a function to calculate the potential temperature in Kelvin given the air temperature in Celsius and the wind speed in km/h.\n    '''\n    theta_w = t * (w / (1.8 * 10 ** 6)) ** 0.16\n    return theta_w\n    \n    \ndef theta_w_t_w_2(t,w):\n    '''\n    Write a function to calculate the potential temperature in Kelvin given the air temperature in Celsius and the wind speed in km/h.\n    '''\n    theta_w = t * (w / (1.8 * 10 ** 6)) ** 0.16\n    return theta_w\n    \n    \ndef theta_w_t_w_3(t,w):\n    '''\n    Write a function to calculate the potential temperature in Kelvin given the air temperature in Celsius and the wind speed in km/h.\n    '''\n    theta_w = t * (w / (1.8 * 10 ** 6)) ** 0.16\n    return theta_w\n    \n    \ndef theta_w_t_w_4(t,w):\n    '''\n    Write a function to calculate the potential temperature in Kelvin given the air temperature in Celsius and the wind speed in km/h.\n    '''\n    theta_w = t * (w / (1.8 * 10 ** 6)) ** 0.16\n    return theta_w\n    \n    \ndef rho_w_t(t,w):\n    '''\n    Write a function to calculate the air density in kg/m3 given the air temperature in Celsius and the wind speed in km/h.\n    '''\n    rho_w_t = (1.29 * (t + 273.15) ** -11.388) * 100 * (w ** 0.16)\n    return rho_w_t\n    \n    \ndef rho_w_t_2(t,w):\n",
        "num_ids": 67
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = sample_names\n    print(\"Original list:\")\n    print(names)\n    new_list = [name for name in names if name[0].isupper()]\n    print(\"New list:\")\n    print(new_list)\n    # print(f\"Sum of the lengths of the names: {sum(len(name) for name in new_list)}\")\n    print(f\"Sum of the lengths of the names: {len(new_list)}\")\n",
        "num_ids": 112
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for sample_name in sample_names:\n        if sample_name.islower():\n            sample_names.remove(sample_name)\n    return sum(sample_names)\n",
        "num_ids": 44
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    print(f'Sample names: {sample_names}')\n",
        "num_ids": 17
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Write your code here\n    return sum([len(name)-1 for name in sample_names if name[0].isupper()])\n",
        "num_ids": 34
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    def sum_nam(names):\n        return sum(len(name)-1 for name in names if name[0].isupper())\n",
        "num_ids": 35
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(i) for i in sample_names if not i[0].islower()])\n",
        "num_ids": 27
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].islower():\n            count += len(name)\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names.sort()\n    sample_names.reverse()\n    list_len=[]\n    for sample in sample_names:\n        if sample[0]>='a' and sample[0]<='z':\n            continue\n        list_len.append(len(sample))\n    sum_len=sum(list_len)\n    return sum_len\n",
        "num_ids": 87
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = list(filter(lambda x: x[0].islower(), sample_names))\n    return sum([len(i) for i in sample_names])\n",
        "num_ids": 42
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [x for x in sample_names if not x[0].islower()]\n    return sum(len(x) for x in sample_names)\n",
        "num_ids": 42
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    temp = \"\"\n    for i in items:\n        if i == \"(\":\n            continue\n        if i == \")\":\n            break\n        else:\n            temp += i\n    return temp\n",
        "num_ids": 48
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    def clean_item(item):\n        new_item = item.group()\n        if new_item == '(':\n            return''\n        else:\n            return new_item\n",
        "num_ids": 44
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = r'[\\(\\)]'\n    for index, item in enumerate(items):\n        items[index] = re.sub(regex, '', item)\n    return items\n",
        "num_ids": 48
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i, item in enumerate(items):\n        if item == '(' or item == ')':\n            items = items.replace(item, '', 1)\n    return items\n",
        "num_ids": 45
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    result = re.sub(r'\\(([^)]+)\\)', r'\\1', items)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex_parenthesis = re.compile(r'\\([^()]*\\)')\n    result = regex_parenthesis.sub('', items)\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    newList = []\n    for item in items:\n        newList.append(re.sub(\"[\\(\\)\\[\\]]\", \"\", item))\n    return newList\n",
        "num_ids": 43
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Get the first level of parenthesis\n    # Get the contents of the parenthesis\n    # Add the contents to the items list\n    # Return the items list\n",
        "num_ids": 39
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    return items\ndef get_short_url(long_url):\n    '''\n    Write a function to shorten a long url to a 6 letter abbrv. of the url\n    '''\n    return long_url[:6]\ndef is_palindrome(s):\n    '''\n    Write a function to check if the input string is a palindrome or not.\n    '''\n    s = s.lower()\n    s = remove_parenthesis(s)\n    for i in range(0,int(len(s)/2)):\n        if(s[i]!=s[len(s)-1-i]):\n            return False\n    return True\ndef create_phone_number(number):\n    '''\n    Write a function to create a phone number by concatenating the number in the given string.\n    '''\n    for i in range(0,len(number)):\n        if(number[i]==' '):\n            number = number.replace(number[i],'')\n    num_list = number.split('-')\n    s = ''\n    for i in range(0,len(num_list)):\n        s+=num_list[i][0]\n    return s\ndef is_phone_number(text):\n    '''\n    Write a function to check if the given text is a phone number or not.\n    '''\n    return bool(re.match(r'^[0-9]{3}-[0-9]{3}-[0-9]{4}$', text))\ndef sum_of_squares(x):\n    '''\n    Write a function to calculate the sum of squares of all integers from 1 to x.\n    '''\n    return sum(x**2 for x in range(1,x+1))\ndef to_camel_case(text):\n    '''\n    Write a function to convert text to camel case.\n    '''\n    return ''.join([''.join([x.capitalize() for x in text.split('_')])])\ndef print_formatted(number):\n    '''\n    Write a function to print n number in a 'SUMMMMARY' form.\n    '''\n    for i in range(1,number+1):\n        print('{0:>{1}d} {0:>{1}o} {0:>{1}X} {0:>{1}b}'.format(i,len(str(number))))\ndef find_substring(text,start_index,substring):\n    '''\n    Write a function to check if the given text has a given substring or not.\n    '''\n    for i in range(start_index,len(text)):\n        if(text[i]==substring[0]):\n            if(text[i:i+len(substring)]==substring):\n                return i\n    return -1\ndef is_unique(s):\n    '''\n    Write a function to check if the given string has all unique characters or not.\n    '''\n    return len(s)==len(set(s))\ndef remove_numbers(s):\n    '''\n    Write a function to remove all the numbers from the string.\n    '''\n    for i in range(0,len(s)):\n        if(s[i].isdigit()):\n            s = s.replace(s[i],'')\n    return s\ndef palindrome_sentence(sentence):\n    '''\n    Write a function to check if the input sentence is palindrome or not.\n    '''\n    sentence = sentence.lower()\n    sentence = remove_parenthesis(sentence)\n    sentence = remove_numbers(sentence)\n    for i in range(0,int(len(sentence)/2)):\n        if(sentence[i]!=sentence[len(sentence)-1-i]):\n            return False\n    return True\ndef word_conversion(word,conversion_map):\n    '''\n    Write a function to convert the word to the given conversion_map.\n    '''\n    for i in range(0,len(word)):\n        if(word[i] in conversion_map):\n            word = word.replace(word[i],conversion_map[word[i]])\n    return word\ndef dict_to_list(d):\n    '''\n    Write a function to convert a dictionary to a list of key value pairs.\n    '''\n    l = []\n    for key,value in d.items():\n        l.append([key,value])\n    return l\ndef count_words(text):\n    '''\n    Write a function to count the total number of words in the given text.\n    '''\n    return len(text.split(' '))\ndef caesar_shift(word,shift):\n    '''\n    Write a function to caesar shift the given word by the given shift.\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_word = ''\n    for i in range(0,len(word)):\n        shifted_word+=alphabet[(alphabet.index(word[i])+shift)%len(alphabet)]\n    return shifted_word\ndef is_capitalized(s):\n    '''\n    Write a function to check if all the characters of the given string is capitalized or not.\n    '''\n    for i in range(0,len(s)):\n        if(s[i]!=s[i].capitalize()):\n            return False\n    return True\ndef find_missing_word(sentence):\n    '''\n    Write a function to find the word that is missing in the given sentence.\n    '''\n    sentence = sentence.lower()\n    sentence = remove_parenthesis(sentence)\n    sentence = remove_numbers(sentence)\n    sentence = remove_numbers(sentence)\n    words = sentence.split(' ')\n    new_words = []\n    for i in range(0,len(words)):\n        word = words[i]\n        for j in range(0,len(word)):\n            if(word[j].isalpha()):\n                new_words.append(word[j])\n        new_words.append(' ')\n    new_words = new_words[:len(new_words)-1]\n    if(''in new_words):\n        new_words.remove(' ')\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(0,len(new_words)):\n        if(new_words[i] in alphabet):\n            alphabet = alphabet.replace(new_words[i],'')\n    for i in range(0,len(new_words)):\n        if(new_words[i] not in alphabet):\n            return new_words[i]\ndef sort_array_by_element_frequency(A):\n    '''\n    Write a function to sort the given array by the frequency of the elements.\n    '''\n    d = {}\n    for i in range(0,len(A)):\n        if(A[i] not in d):\n            d[A[i]] = 1\n        else:\n            d[A[i]]+=1\n    A_sorted = []\n    for key,value in sorted(d.items(),key=lambda x:x[1],reverse=True):\n        for i in range(0,value):\n            A_sorted.append(key)\n    return A_sorted\ndef reverse_string(word):\n    '''\n    Write a function to reverse the given string.\n    '''\n    return word[::-1]\ndef convert_decimal_to_binary(decimal_number):\n    '''\n    Write a function to convert a given decimal number to binary.\n    '''\n    binary_number = ''\n    while(decimal_number>1):\n        if(decimal_number%2==0):\n            binary_number+='0'\n            decimal_number=int(decimal_number/2)\n        else:\n            binary_number+='1'\n            decimal_number=int(decimal_number/2)\n    if(decimal_number==1):\n        binary_number+='1'\n    binary_number = binary_number[::-",
        "num_ids": 118
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Strip out the ( and )\n    items = items.replace('(','').replace(')','')\n    \n    # Remove the remaining parenthesis\n    items = re.sub('\\(.*?\\)','',items)\n    \n    return items\n    \ndef string_match(a, b):\n    '''\n    Write a function that will return true if the first string can be converted into the second string.\n    The only valid operations are to insert a character into one of the strings, or to remove one of the characters.\n    '''\n    if len(a)!= len(b):\n        return False\n    if a == b:\n        return True\n    \n    # Do a hash table for a and b\n    hash_table = {}\n    for letter in a:\n        hash_table[letter] = 1\n    \n    # Now iterate through b\n    for letter in b:\n        if letter in hash_table:\n            hash_table[letter] -= 1\n        else:\n            hash_table[letter] = 1\n        \n    # Check for any negative values\n    for letter in hash_table:\n        if hash_table[letter] < 0:\n            return False\n    return True\n",
        "num_ids": 155
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n ** 2 - (n % 6) ** 2) % 10\n",
        "num_ids": 20
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return sum([i**2 for i in range(n)])\n",
        "num_ids": 18
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (2 * n**3 - n) / 3\n",
        "num_ids": 16
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = int(input('Please input a nonagonal number: '))\n    if n < 0:\n        print('It is not a nonagonal number!')\n    elif n == 0:\n        print('The 0th nonagonal number is 0!')\n    else:\n        while n >= 0:\n            sum = 0\n            for i in range(1, n + 1):\n                if i % 2 == 1:\n                    sum += i\n                else:\n                    pass\n            print('The', n, 'th nonagonal number is', sum)\n            break\n",
        "num_ids": 131
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n + is_nonagonal(n - 1)\n",
        "num_ids": 43
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = 0\n    count = 1\n    while count < n:\n        nonagonal += count\n        count += 2\n    return nonagonal\n",
        "num_ids": 36
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = int(input(\"Enter a nonagonal number: \"))\n    if n % 6!= 1: \n        print(\"The nonagonal number is not an odd number!\")\n    elif n % 6 == 1: \n        print(\"The\",n,\"th nonagonal number is\", n*(n+1))\n    \nis_nonagonal(2)\nis_nonagonal(4)\nis_nonagonal(6)\nis_nonagonal(8)\n",
        "num_ids": 110
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) // 2\n",
        "num_ids": 14
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n+1)) / 2\n",
        "num_ids": 15
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z',text):\n        return re.sub('(^z|z$)','*',text)\n    else:\n        return text\ndef text_match_wordz_middle2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.sub('(z.+z)','*',text)\ndef text_match_wordz_middle3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.sub('z(.+z)','*',text)\ndef text_match_wordz_middle4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.sub('z[a-z]','*',text)\ndef text_match_wordz_middle5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.sub('z\\w','*',text)\ndef text_match_wordz_middle6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.sub('z.','*',text)\ndef text_match_wordz_middle7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.sub('z{1,}z','*',text)\ndef text_match_wordz_middle8(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.sub('z+','*',text)\ndef text_match_wordz_middle9(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.sub('z?','*',text)\ndef text_match_wordz_middle10(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.sub('(z.z.z)','*',text)\ndef text_match_wordz_middle11(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.sub('z.z.z','*',text)\ndef text_match_wordz_middle12(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.sub('(z[a-z]*z)','*',text)\ndef text_match_wordz_middle13(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.sub('z{1,}z{1,}','*',text)\ndef text_match_wordz_middle14(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.sub('z{1,}z{1,}z{1,}z{1,}','*',text)\ndef text_match_wordz_middle15(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.sub('z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.z.",
        "num_ids": 1078
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_regex = re.compile(r'[^\\s]z[^\\s]')\n    match = word_regex.findall(text)\n    print(match)\n",
        "num_ids": 48
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.startswith('z'):\n        return False\n    if text.endswith('z'):\n        return False\n    if 'z' in text:\n        return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'\\bz\\B', text):\n        return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # for text in text:\n    #     start_check = text.startswith('z')\n    #     end_check = text.endswith('z')\n    #     if not start_check and not end_check:\n    #         print(text)\n    #         break\n    # return True if not start_check and not end_check else False\n    # return not start_check and not end_check\n    return not re.search(r\"\\b[^z]z\\b\", text)\n",
        "num_ids": 122
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'z\\b', text):\n        return 'YES'\n    else:\n        return 'NO'\n",
        "num_ids": 33
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    test1 = \"not zz\"\n    test2 = \"zoo\"\n    test3 = \"zzz\"\n    test4 = \"zzxz\"\n    test5 = \"zyz\"\n    test6 = \"zoozoo\"\n    test7 = \"zoozzz\"\n    test8 = \"zoozzxz\"\n    test9 = \"zyzzz\"\n    test10 = \"zyzzxz\"\n    test11 = \"xzoozoo\"\n    test12 = \"xzzzoo\"\n    test13 = \"xzzzoo\"\n    test14 = \"xzoozoo\"\n    test15 = \"xoozoo\"\n    test16 = \"xoozzzzzzz\"\n    test17 = \"xoozzzzzzz\"\n    test18 = \"xoozzzzzzz\"\n    test19 = \"xoozzzzzzz\"\n    test20 = \"xoozzzzzzz\"\n    test21 = \"xoozzzzzzz\"\n    test22 = \"xoozzzzzzz\"\n    test23 = \"xoozzzzzzz\"\n    test24 = \"xoozzzzzzz\"\n    test25 = \"xoozzzzzzz\"\n    test26 = \"xoozzzzzzz\"\n    test27 = \"xoozzzzzzz\"\n    test28 = \"xoozzzzzzz\"\n    test29 = \"xoozzzzzzz\"\n    test30 = \"xoozzzzzzz\"\n    test31 = \"xoozzzzzzz\"\n    test32 = \"xoozzzzzzz\"\n    test33 = \"xoozzzzzzz\"\n    test34 = \"xoozzzzzzz\"\n    test35 = \"xoozzzzzzz\"\n    test36 = \"xoozzzzzzz\"\n    test37 = \"xoozzzzzzz\"\n    test38 = \"xoozzzzzzz\"\n    test39 = \"xoozzzzzzz\"\n    test40 = \"xoozzzzzzz\"\n    test41 = \"xoozzzzzzz\"\n    test42 = \"xoozzzzzzz\"\n    test43 = \"xoozzzzzzz\"\n    test44 = \"xoozzzzzzz\"\n    test45 = \"xoozzzzzzz\"\n    test46 = \"xoozzzzzzz\"\n    test47 = \"xoozzzzzzz\"\n    test48 = \"xoozzzzzzz\"\n    test49 = \"xoozzzzzzz\"\n    test50 = \"xoozzzzzzz\"\n    test51 = \"xoozzzzzzz\"\n    test52 = \"xoozzzzzzz\"\n    test53 = \"xoozzzzzzz\"\n    test54 = \"xoozzzzzzz\"\n    test55 = \"xoozzzzzzz\"\n    test56 = \"xoozzzzzzz\"\n    test57 = \"xoozzzzzzz\"\n    test58 = \"xoozzzzzzz\"\n    test59 = \"xoozzzzzzz\"\n    test60 = \"xoozzzzzzz\"\n    test61 = \"xoozzzzzzz\"\n    test62 = \"xoozzzzzzz\"\n    test63 = \"xoozzzzzzz\"\n    test64 = \"xoozzzzzzz\"\n    test65 = \"xoozzzzzzz\"\n    test66 = \"xoozzzzzzz\"\n    test67 = \"xoozzzzzzz\"\n    test68 = \"xoozzzzzzz\"\n    test69 = \"xoozzzzzzz\"\n    test70 = \"xoozzzzzzz\"\n    test71 = \"xoozzzzzzz\"\n    test72 = \"xoozzzzzzz\"\n    test73 = \"xoozzzzzzz\"\n    test74 = \"xoozzzzzzz\"\n    test75 = \"xoozzzzzzz\"\n    test76 = \"xoozzzzzzz\"\n    test77 = \"xoozzzzzzz\"\n    test78 = \"xoozzzzzzz\"\n    test79 = \"xoozzzzzzz\"\n    test80 = \"xoozzzzzzz\"\n    test81 = \"xoozzzzzzz\"\n    test82 = \"xoozzzzzzz\"\n    test83 = \"xoozzzzzzz\"\n    test84 = \"xoozzzzzzz\"\n    test85 = \"xoozzzzzzz\"\n    test86 = \"xoozzzzzzz\"\n    test87 = \"xoozzzzzzz\"\n    test88 = \"xoozzzzzzz\"\n    test89 = \"xoozzzzzzz\"\n    test90 = \"xoozzzzzzz\"\n    test91 = \"xoozzzzzzz\"\n    test92 = \"xoozzzzzzz\"\n    test93 = \"xoozzzzzzz\"\n    test94 = \"xoozzzzzzz\"\n    test95 = \"xoozzzzzzz\"\n    test96 = \"xoozzzzzzz\"\n    test97 = \"xoozzzzzzz\"\n    test98 = \"xoozzzzzzz\"\n    test99 = \"xoozzzzzzz\"\n    test100 = \"xoozzzzzzz\"\n    test101 = \"xoozzzzzzz\"\n    test102 = \"xoozzzzzzz\"\n    test103 = \"xoozzzzzzz\"\n    test104 = \"xoozzzzzzz\"\n    test105 = \"xoozzzzzzz\"\n    test106 = \"xoozzzzzzz\"\n    test107 = \"xoozzzzzzz\"\n    test108 = \"xoozzzzzzz\"\n    test109 = \"xoozzzzzzz\"\n    test110 = \"xoozzzzzzz\"\n    test111 = \"xoozzzzzzz\"\n    test112 = \"xoozzzzzzz\"\n    test113 = \"xoozzzzzzz\"\n    test114 = \"xoozzzzzzz\"\n    test115 = \"xoozzzzzzz\"\n    test116 = \"xoozzzzzzz\"\n    test117 = \"xoozzzzzzz\"\n    test118 = \"xoozzzzzzz\"\n    test119 = \"xoozzzzzzz\"\n    test120 = \"xoozzzzzzz\"\n    test121 = \"xoozzzzzzz\"\n    test122 = \"xoozzzzzzz\"\n    test123 = \"xoozzzzzzz\"\n    test124 = \"xoozzzzzzz\"\n    test125 = \"xoozzzzzzz\"\n    test126 = \"xoozzzzzzz\"\n    test127 = \"xoozzzzzzz\"\n    test128 = \"xoozzzzzzz\"\n    test129 = \"xoozzzzzzz\"\n    test130 = \"xoozzzzzzz\"\n    test131 = \"xoozzzzzzz\"\n    test132 = \"xoozzzzzzz\"\n    test133 = \"xoozzzzzzz\"\n    test134 = \"xoozzzzzzz\"\n    test135 = \"xoozzzzzzz\"\n    test136 = \"xoozzzzzzz\"\n    test137 = \"xoozzzzzzz\"\n    test138 = \"xoozzzzzzz\"\n    test139 = \"xoozzzzzzz\"\n    test140 = \"xoozzzzzzz\"\n    test141 = \"xoozzzzzzz\"\n    test142 = \"xoozzzzzzz\"\n    test143 = \"xoozzzzzzz\"\n    test144 = \"xoozzzzzzz\"\n    test145 = \"xoozzzzzzz\"\n    test146 = \"xoozzzzzzz\"\n    test147 = \"xoozzzzzzz\"\n    test148 = \"xoozzzzzzz\"\n    test149 = \"xoozzzzzzz\"\n    test150 = \"xoozzzzzzz\"\n    test151 = \"xoozzzzzzz\"\n    test152 = \"xoozzzzzzz\"\n    test153 = \"xoozzzzzzz\"\n    test154 = \"xoozzzzzzz\"\n    test155 = \"xoozzzzzzz\"\n    test156 = \"xoozzzzzzz\"\n    test157 = \"xooz",
        "num_ids": 2002
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word = text.split(\" \")\n    print(word)\n    print(text)\n    for i in range(len(word)):\n        if word[i] == \"z\" and (i == 0 or word[i-1] == \" \"):\n            return False\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    test_patterns = [\n    r'(^[a-zA-Z0-9]+z[a-zA-Z0-9]+)',\n    r'([a-zA-Z0-9]+(z[a-zA-Z0-9]+)|[a-zA-Z0-9]+(z[a-zA-Z0-9]+))+',\n    r'([a-zA-Z0-9]+(z[a-zA-Z0-9]+)?[a-zA-Z0-9]+(z[a-zA-Z0-9]+)?[a-zA-Z0-9]+)'\n    ]\n    \n    test_string = text\n    \n    for pattern in test_patterns:\n        if re.search(pattern, test_string):\n            return True\n    return False\n",
        "num_ids": 209
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_len = len(text)\n    if text_len < 3:\n        return False\n    \n    if text[1] == 'z':\n        if text_len == 2:\n            return False\n        else:\n            return text[0] == 'z' and text[text_len-1] == 'z'\n",
        "num_ids": 79
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reversed_list = list()\n    for index, val in enumerate(input):\n        if index < k:\n            reversed_list.append(input[index])\n        else:\n            reversed_list.append(input[index-k])\n    return reversed_list\n",
        "num_ids": 71
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_list = list(input)\n    input_list[:k] = reversed(input_list[:k])\n    return \"\".join(input_list)\n",
        "num_ids": 42
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input.reverse()\n    input.reverse()\n    return input[:k]\n",
        "num_ids": 22
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    result = input[0:k]\n    result.reverse()\n    print(result+input[k:])\n",
        "num_ids": 29
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input)\n    output = [None]*l\n    i = 0\n    j = k-1\n    while(i<=j):\n        output[i] = input[j]\n        output[j] = input[i]\n        i = i+1\n        j = j-1\n",
        "num_ids": 76
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input)\n    if k > l:\n        return False\n    for i in range(0, k):\n        input[i], input[l - i - 1] = input[l - i - 1], input[i]\n    return input\n",
        "num_ids": 63
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input[:k+1] = input[:k+1][::-1]\n    input[k+1:] = input[k+1:][::-1]\n    return input\n",
        "num_ids": 47
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    output = [0]*length\n    if k >= length:\n        k = length - 1\n    \n    for i in range(0, k+1):\n        output[i] = input[length - i - 1]\n    return output\n",
        "num_ids": 67
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = len(input)-1\n    while start < end:\n        temp = input[start]\n        input[start] = input[end]\n        input[end] = temp\n        start += 1\n        end -= 1\n    print(\"Reversed Array Upto {}:\".format(k))\n    print(input)\n",
        "num_ids": 84
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    temp = input[:k]\n    temp.reverse()\n    input[:k] = temp\n    input[k:] = input[k:][::-1]\n    return input\n",
        "num_ids": 46
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # test_tup = ('abc', 1, 2, 3, 4)\n    # test_dict = {'e': 4, 'a': 2, 'd': 1, 'b': 3}\n    return tuple(test_tup) + (test_dict,)\n",
        "num_ids": 65
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Code here\n    #print(test_tup + test_dict)\n    return test_tup + test_dict\n",
        "num_ids": 32
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #test_tup = (1, 2, 3)\n    #test_dict = {'a': 100, 'b': 200}\n    result_tup = test_tup + (test_dict,)\n    return result_tup\n",
        "num_ids": 59
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    \ndef concat_tuples(tup1, tup2):\n    '''\n    Write a function to concatenate 2 tuples\n    '''\n    \n    \n    \ndef dict_from_tuple(test_tup):\n    '''\n    Write a function that converts a tuple into a dictionary.\n    '''\n    \n    \n    \ndef list_to_tuple(*arg):\n    '''\n    Write a function to convert a list into a tuple.\n    '''\n    \n    \n    \ndef add_tuples(tup1, tup2):\n    '''\n    Write a function to add 2 tuples.\n    '''\n    \n    \n    \ndef tuple_to_list(test_tup):\n    '''\n    Write a function to convert a tuple into a list.\n    '''\n    \n    \n    \ndef list_to_set(test_lst):\n    '''\n    Write a function to convert a list into a set.\n    '''\n    \n    \n    \ndef set_to_tuple(test_set):\n    '''\n    Write a function to convert a set into a tuple.\n    '''\n    \n    \n    \ndef tuple_to_list(test_tup):\n    '''\n    Write a function to convert a tuple into a list.\n    '''\n    \n    \n    \ndef set_to_list(test_set):\n    '''\n    Write a function to convert a set into a list.\n    '''\n    \n    \n    \ndef list_to_set(test_lst):\n    '''\n    Write a function to convert a list into a set.\n    '''\n    \n    \n    \ndef remove_nested_tuples(test_tup):\n    '''\n    Write a function to remove the nested tuples from a tuple.\n    '''\n    \n    \n    \ndef remove_nested_tuples(test_tup):\n    '''\n    Write a function to remove the nested tuples from a tuple.\n    '''\n    \n    \n    \ndef nested_tuples_to_list(test_tup):\n    '''\n    Write a function to convert a nested tuples to a list.\n    '''\n    \n    \n    \ndef nested_tuples_to_list(test_tup):\n    '''\n    Write a function to convert a nested tuples to a list.\n    '''\n    \n    \n    \ndef list_to_nested_tuples(*arg):\n    '''\n    Write a function to convert a list to a nested tuples.\n    '''\n    \n    \n    \ndef list_to_nested_tuples(*arg):\n    '''\n    Write a function to convert a list to a nested tuples.\n    '''\n    \n    \n    \ndef remove_nested_lists(test_lst):\n    '''\n    Write a function to remove the nested lists from a list.\n    '''\n    \n    \n    \ndef remove_nested_lists(test_lst):\n    '''\n    Write a function to remove the nested lists from a list.\n    '''\n    \n    \n    \ndef nested_lists_to_list(test_lst):\n    '''\n    Write a function to convert a nested lists to a list.\n    '''\n    \n    \n    \ndef nested_lists_to_list(test_lst):\n    '''\n    Write a function to convert a nested lists to a list.\n    '''\n    \n    \n    \ndef list_to_nested_lists(*arg):\n    '''\n    Write a function to convert a list to a nested lists.\n    '''\n    \n    \n    \ndef list_to_nested_lists(*arg):\n    '''\n    Write a function to convert a list to a nested lists.\n    '''\n    \n    \n    \ndef remove_nested_dicts(test_dict):\n    '''\n    Write a function to remove the nested dictionaries from a dictionary.\n    '''\n    \n    \n    \ndef nested_dicts_to_list(test_dict):\n    '''\n    Write a function to convert a nested dictionaries to a list.\n    '''\n    \n    \n    \ndef nested_dicts_to_list(test_dict):\n    '''\n    Write a function to convert a nested dictionaries to a list.\n    '''\n    \n    \n    \ndef remove_nested_sets(test_set):\n    '''\n    Write a function to remove the nested sets from a set.\n    '''\n    \n    \n    \ndef nested_sets_to_list(test_set):\n    '''\n    Write a function to convert a nested sets to a list.\n    '''\n    \n    \n    \ndef nested_sets_to_list(test_set):\n    '''\n    Write a function to convert a nested sets to a list.\n    '''\n    \n    \n    \ndef remove_nested_lists(test_list):\n    '''\n    Write a function to remove the nested lists from a list.\n    '''\n    \n    \n    \ndef nested_lists_to_set(test_list):\n    '''\n    Write a function to convert a nested lists to a set.\n    '''\n    \n    \n    \ndef nested_sets_to_set(test_set):\n    '''\n    Write a function to convert a nested sets to a set.\n    '''\n    \n    \n    \ndef remove_nested_sets(test_set):\n    '''\n    Write a function to remove the nested sets from a set.\n    '''\n    \n    \n    \ndef list_to_nested_lists(*arg):\n    '''\n    Write a function to convert a list to a nested lists.\n    '''\n    \n    \n    \ndef list_to_nested_lists(*arg):\n    '''\n    Write a function to convert a list to a nested lists.\n    '''\n    \n    \n    \ndef set_to_nested_lists(test_set):\n    '''\n    Write a function to convert a set to a nested lists.\n    '''\n    \n    \n    \ndef set_to_nested_lists(test_set):\n    '''\n    Write a function to convert a set to a nested lists.\n    '''\n    \n    \n    \ndef remove_nested_dicts(test_dict):\n    '''\n    Write a function to remove the nested dictionaries from a dictionary.\n    '''\n    \n    \n    \ndef nested_dicts_to_set(test_dict):\n    '''\n    Write a function to convert a nested dictionaries to a set.\n    '''\n    \n    \n    \ndef nested_dicts_to_set(test_dict):\n    '''\n    Write a function to convert a nested dictionaries to a set.\n    '''\n    \n    \n    \ndef remove_nested_sets(test_set):\n    '''\n    Write a function to remove the nested sets from a set.\n    '''\n    \n    \n    \ndef nested_sets_to_dict(test_set):\n    '''\n    Write a function to convert a nested sets to a dictionary.\n    '''\n    \n    \n    \ndef nested_sets_to_dict(test_set):\n    '''\n    Write a function to convert a nested sets to a dictionary.\n    '''\n    \n    \n    \ndef nested_lists_to_set(test_list):\n    '''\n    Write a function to convert a nested lists to a set.\n    '''\n    \n    \n    \ndef nested_lists_to_set(test_list):\n    '''\n    Write a function to convert a nested lists to a set.\n    '''\n    \n    \n    \ndef set_to_nested_sets(test_set):\n    '''\n    Write a function to convert a set to a nested sets.\n    '''\n    \n    \n    \ndef set_to_nested_sets(test_set):\n    '''\n    Write a function to convert a set to a nested sets.\n    '''\n    \n    \n    \ndef remove_nested_dicts(test_dict):\n    '''\n    Write a function to remove the nested dictionaries from a dictionary.\n    '''\n    \n    \n    \ndef remove_nested_dicts(test_dict):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # if test_tup:\n    #     print(\"tup is not empty\")\n    # else:\n    #     print(\"tup is empty\")\n    # if type(test_tup) is not tuple:\n    #     print(\"tup is not a tuple\")\n    # if type(test_dict) is not dict:\n    #     print(\"dict is not a dictionary\")\n    # print(test_tup)\n    print(test_dict)\n    test_tup += (test_dict,)\n    print(test_tup)\n    return test_tup\n",
        "num_ids": 139
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    print(test_tup)\n    test_tup = test_tup + (test_dict,)\n    print(test_tup)\n    return test_tup\n",
        "num_ids": 44
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def dfs(x, y):\n        if x >= n or y >= n or x < 0 or y < 0:\n            return 0\n        if (x, y) in visited:\n            return 0\n        visited.add((x, y))\n        return max(dfs(x+1, y), dfs(x, y+1), dfs(x+1, y+1)) + cost[x][y]\n    n = len(cost)\n    visited = set()\n    max_avg = -float('inf')\n    for i in range(n):\n        for j in range(n):\n            if (i, j) not in visited:\n                max_avg = max(max_avg, dfs(i, j))\n    return max_avg\n",
        "num_ids": 187
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    num = len(cost)\n    dic = {}\n    max = -1\n    \n    for row in range(num):\n        for col in range(num):\n            dic[(row, col)] = cost[row][col]\n            \n    path = []\n    def findPath(i, j, total, count):\n        nonlocal max\n        if i >= 0 and i < num and j >= 0 and j < num:\n            if (i, j) not in path:\n                path.append((i, j))\n                total += dic[(i, j)]\n                count += 1\n                if i == j == num - 1:\n                    if total/count > max:\n                        max = total/count\n                    return\n                \n                findPath(i + 1, j, total, count)\n                findPath(i, j + 1, total, count)\n                \n                path.pop()\n                total -= dic[(i, j)]\n                count -= 1\n                \n    findPath(0, 0, 0, 0)\n    return max\n    \nprint(maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n",
        "num_ids": 281
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost[0])\n    opt = [[0] * n for _ in range(n)]\n    sum = [0] * n\n    print(opt)\n    for i in range(n):\n        for j in range(n):\n            sum[j] = sum[j] + cost[i][j]\n",
        "num_ids": 79
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if n == 0:\n        return 0\n    if n == 1:\n        return cost[0][0]\n    if n == 2:\n        return min(cost[0][0], cost[0][1]) + max(cost[1][0], cost[1][1])\n",
        "num_ids": 76
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def backtrack(cell,cost,m,n,path,visited,maxAvg):\n        if path not in visited:\n            visited[path] = True\n        else:\n            return\n        if cell[0] == n-1 and cell[1] == n-1:\n            temp = m - cell[0] + cell[1]\n            if temp > maxAvg[0]:\n                maxAvg[0] = temp\n            return\n        else:\n            if cell[0] + 1 < n and cell[1] < n:\n                backtrack([cell[0]+1,cell[1]],cost,m,n,path,visited,maxAvg)\n            if cell[0] < n and cell[1] + 1 < n:\n                backtrack([cell[0],cell[1]+1],cost,m,n,path,visited,maxAvg)\n    maxAvg = [0]\n    visited = {}\n    for i in range(n):\n        for j in range(n):\n            backtrack([i,j],cost,n,n,str([i,j]),visited,maxAvg)\n    return maxAvg[0]/n\n",
        "num_ids": 276
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def dfs(x, y, cost, visited, path, path_cost):\n        if x == len(cost) - 1 and y == len(cost[0]) - 1:\n            path.append([x,y])\n            path_cost.append(sum([cost[path[0][0]][path[0][1]],\n            cost[path[1][0]][path[1][1]],\n            cost[path[2][0]][path[2][1]]]) / len(path))\n            visited.remove([path[0][0], path[0][1]])\n            visited.remove([path[1][0], path[1][1]])\n            visited.remove([path[2][0], path[2][1]])\n            path.pop()\n            path_cost.pop()\n            return True\n        if x < 0 or x >= len(cost) or y < 0 or y >= len(cost[0]) or visited[x][y]:\n            return False\n        visited[x][y] = 1\n        if dfs(x+1, y, cost, visited, path, path_cost) or dfs(x, y+1, cost, visited, path, path_cost):\n            return True\n        path.append([x,y])\n        visited[x][y] = 0\n        if dfs(x-1, y, cost, visited, path, path_cost) or dfs(x, y-1, cost, visited, path, path_cost):\n            return True\n        path.pop()\n        return False\n    if len(cost) == 1:\n        return sum(cost[0]) / 1\n    path = []\n    path_cost = []\n    visited = [[0]*len(cost[0]) for i in range(len(cost))]\n    dfs(0,0,cost,visited,path,path_cost)\n    print(path_cost)\n    return max(path_cost)\n",
        "num_ids": 466
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #base cases\n    if len(cost) == 0:\n        return 0\n    if len(cost) == 1:\n        return min(cost[0])\n",
        "num_ids": 40
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    from heapq import heappop, heappush\n",
        "num_ids": 15
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def helper(cost, i, j, visited, path, totalCost):\n        \n        if i < 0 or i >= len(cost) or j < 0 or j >= len(cost[i]) or visited[i][j] == 1 or cost[i][j] == -1:\n            return totalCost\n        \n        # mark it visited\n        visited[i][j] = 1\n        \n        # add the cost to totalCost\n        totalCost += cost[i][j]\n        \n        # append the current cell to path\n        path.append((i, j))\n        \n        # iterate through right and down adjacent cells\n        helper(cost, i+1, j, visited, path, totalCost)\n        helper(cost, i, j+1, visited, path, totalCost)\n        \n        # remove current cell from path\n        path.pop()\n        totalCost -= cost[i][j]\n        \n        return totalCost\n    \n    # initialize visited\n    visited = [[0]*len(cost[0]) for i in range(len(cost))]\n    \n    # initialize maxAverage\n    maxAverage = float('-inf')\n    \n    # go through each cell\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # reset path and totalCost\n            path = []\n            totalCost = 0\n            \n            # call helper on the cell\n            totalCost = helper(cost, i, j, visited, path, totalCost)\n            \n            # update maxAverage if needed\n            if totalCost/len(path) > maxAverage:\n                maxAverage = totalCost/len(path)\n    \n    return maxAverage\n",
        "num_ids": 399
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 0:\n        return 0\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return max(dp[N-1]) / (N * N)\n",
        "num_ids": 191
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [student for student in students.keys() if students[student][0] > h and students[student][1] > w]\n",
        "num_ids": 33
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0]>=h and v[1]>=w}\n",
        "num_ids": 35
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_student = {}\n    for key in students:\n        if float(students[key][0])>=h and float(students[key][1])>=w:\n            new_student[key]=students[key]\n    print(new_student)\n",
        "num_ids": 66
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    min_height= h\n    min_weight = w\n    \n    new_dict={}\n    \n    for key in students:\n        if students[key][0]>min_height and students[key][1]>min_weight:\n            new_dict[key]=students[key]\n    \n    return new_dict\n    ",
        "num_ids": 83
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    height_students={}\n    for student in students:\n        if students[student][0]>h and students[student][1]>w:\n            height_students[student]=students[student]\n    print(height_students)\n",
        "num_ids": 61
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    list_of_filtered_students = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            list_of_filtered_students[student] = students[student]\n    return list_of_filtered_students\n",
        "num_ids": 74
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_d = {}\n    for name,h_w in students.items():\n        if h_w[0]>=h and h_w[1]>=w:\n            filter_d[name] = h_w\n    return filter_d\n",
        "num_ids": 63
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        if(students[student][0]>=h and students[student][1]>=w):\n            filtered_students[student] = students[student]\n    return filtered_students\n",
        "num_ids": 65
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_dic={}\n    for x,y in students.items():\n        if y[0]>h and y[1]>w:\n            new_dic[x]=y\n    return new_dic\nstudents={}\nn=int(input(\"Enter the number of students: \"))\nfor i in range(0,n):\n    name=input(\"Enter the name of the student: \")\n    height=float(input(\"Enter the height of the student: \"))\n    weight=float(input(\"Enter the weight of the student: \"))\n    students[name]=(height,weight)\nmin_height=float(input(\"Enter the minimum height: \"))\nmin_weight=float(input(\"Enter the minimum weight: \"))\nprint(filter_data(students,min_height,min_weight)",
        "num_ids": 195
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_dict = {}\n    for student_name in students:\n        if students[student_name][0]>=h and students[student_name][1]>=w:\n            new_dict[student_name] = students[student_name]\n    return new_dict\n",
        "num_ids": 68
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    else:\n        count = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                count += 1\n        return count\n",
        "num_ids": 70
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0, len(nums1)):\n        if(nums1[i] == nums2[i]):\n            count = count + 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Your code here\n    # num1=0\n    # num2=0\n    # num1=[]\n    # num2=[]\n    # if len(nums1)==len(nums2):\n    #     for i in range(len(nums1)):\n    #         if nums1[i]==nums2[i]:\n    #             num1=nums1[i]\n    #             num2=nums2[i]\n    #     print(num1,num2)\n    #     return num1,num2\n    # else:\n    #     print(\"the length of two lists are not equal\")\n",
        "num_ids": 155
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same = 0\n    for i in range(len(nums1)):\n        if(nums1[i] == nums2[i]):\n            same += 1\n    return same\n",
        "num_ids": 48
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    num_same_pair = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j] and i == j:\n                num_same_pair += 1\n    return num_same_pair\n",
        "num_ids": 77
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if nums1 == nums2:\n        print('Pass')\n    elif len(nums1)!= len(nums2):\n        print('Fail')\n    else:\n        same_pair = 0\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                same_pair += 1\n        print(same_pair)\n        \ncount_same_pair([1, 2, 3], [3, 2, 1])\ncount_same_pair([1, 2, 3], [3, 2, 1, 2, 3])\ncount_same_pair([1, 2, 3], [3, 2, 1, 4, 3])\ncount_same_pair([1, 2, 3], [1, 2, 3])\ncount_same_pair([1, 2, 3], [1, 2, 3, 3, 3])\n",
        "num_ids": 212
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    base = int(base)\n    power = int(power)\n    sum = 0\n    for i in str(base):\n        sum += int(i) ** power\n    return sum\n    \nprint(power_base_sum(3, 2))",
        "num_ids": 62
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_list = [int(i) for i in str(base)]\n    sum = 0\n    for i in base_list:\n        sum += i ** power\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s = 0\n    if base == 0:\n        return 0\n    while base >= 1:\n        s += base % 10\n        base = base // 10\n    return s ** power\n    # return sum([int(i)**power for i in str(base)])\n",
        "num_ids": 65
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    number = str(base**power)\n    return sum(map(int, number))\n",
        "num_ids": 23
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s = 0\n    while power > 0:\n        s += base**power\n        power -= 1\n    return s\n",
        "num_ids": 30
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    # Divide by 10 to get rid of the 0's in the output\n    power -= 1\n    # Calculate the sum of all digits of the base to the power\n    total = 0\n    for i in range(len(str(base))):\n        total += pow(base, power) // (10**i)\n    return total\n",
        "num_ids": 80
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = abs(power)\n    sum = 0\n    while power > 0:\n        sum += base\n        power -= 1\n        base = base * base\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        base_sum += int(base)\n        base = base * base\n        power -= 1\n    return base_sum\n",
        "num_ids": 44
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i)**power for i in str(base)])\n",
        "num_ids": 21
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s = 0\n    for i in str(base):\n        s += int(i)**power\n    return s\n    \n    \ndef factorial(n):\n    '''\n    Write a recursive function to calculate the factorial of a positive integer\n    '''\n    if n == 1:\n        return n\n    else:\n        return n*factorial(n-1)\n        \n    \ndef compute_hcf(x, y):\n    '''\n    Write a Python program to compute the highest common factor of two positive integers.\n    '''\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n        \n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i\n    return hcf\n",
        "num_ids": 70
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regx = re.compile('\"(.*?)\"')\n    match = regx.findall(text1)\n    return match\n",
        "num_ids": 34
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list_of_words = text1.split()\n    print(list_of_words)\n    for i in range(0, len(list_of_words)):\n        if list_of_words[i] == \"\\\"\":\n            first_index = i\n            break\n    for j in range(i+1, len(list_of_words)):\n        if list_of_words[j] == \"\\\"\":\n            last_index = j\n            break\n    final_string = \" \".join(list_of_words[first_index+1:last_index])\n    return final_string\n",
        "num_ids": 145
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text1 is None:\n        return None\n    else:\n        return re.findall(r'\\\"[\\w\\s\\S]*\\\"', text1)\n",
        "num_ids": 43
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if type(text1)==str:\n        text1=text1.split(' ')\n        flag=0\n        for i in text1:\n            if \"\\\"\" in i:\n                flag=flag+1\n        if flag==1:\n            text1=text1[0]\n            quotation=re.findall('\".*\"',text1)\n            quotation=quotation[0].replace(\"\\\"\",\"\")\n            return quotation\n        else:\n            quotation=\"null\"\n            return quotation\n    else:\n        return(\"Error\")\n        \n    \ndef extract_inner_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if type(text)==str:\n        text=text.split(' ')\n        flag=0\n        for i in text:\n            if \"\\\"\" in i:\n                flag=flag+1\n        if flag==1:\n            text=text[0]\n            quotation=re.findall('\\\".*\\\"',text)\n            quotation=quotation[0].replace(\"\\\"\",\"\")\n            return quotation\n        else:\n            quotation=\"null\"\n            return quotation\n    else:\n        return(\"Error\")\n",
        "num_ids": 126
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.split(\"\\n\")\n    text1 = \"\\n\".join(text1)\n    if text1.count(\"\\\"\") % 2 == 1:\n        raise Exception(\"Unmatched quotes\")\n    return text1\n",
        "num_ids": 57
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #text1 = \"James said, 'He's a very naughty boy!'\"\n    #text2 = \"The quote is: 'This is a quote!'\"\n    #text3 = \"The name is: 'James'\"\n    #text4 = \"The name is: James' \"\n    #text5 = \"\\\"James said, \\\"He's a very naughty boy!\\\"\\\"\"\n    #text6 = \"\\\"James said, \\\"He's a very naughty boy!\\\"\\\"\"\n",
        "num_ids": 109
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text1 == '':\n        return ''\n    regex = r'(\\\"[\\s\\S]*?\\\")'\n    text2 = re.findall(regex, text1)\n    return text2\n    #return text2\ndef remove_quotation(text1):\n    '''\n    Write a function to remove the quotation marks \" \" of the given string.\n    '''\n    if text1 == '':\n        return ''\n    regex = r'(\\\"[\\s\\S]*?\\\")'\n    text2 = re.findall(regex, text1)\n    #print(text2)\n    #return text2\n    #return text2\n    text3 = re.sub(r'(\\\"[\\s\\S]*?\\\")','', text1)\n    return text3\n    #return text3\ndef extract_quotation_without_blankspace(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text1 == '':\n        return ''\n    regex = r'(\\\"[\\s\\S]*?\\\")'\n    text2 = re.findall(regex, text1)\n    return text2\n    #return text2\ndef remove_quotation_without_blankspace(text1):\n    '''\n    Write a function to remove the quotation marks \" \" of the given string.\n    '''\n    if text1 == '':\n        return ''\n    regex = r'(\\\"[\\s\\S]*?\\\")'\n    text2 = re.findall(regex, text1)\n    #print(text2)\n    #return text2\n    #return text2\n    text3 = re.sub(r'(\\\"[\\s\\S]*?\\\")', '', text1)\n    return text3\n    #return text3\ndef text_preprocessing(text1):\n    '''\n    Write a function to preprocess the given string.\n    '''\n    text1 = text1.lower()\n    text2 = remove_quotation(text1)\n    text3 = remove_quotation_without_blankspace(text2)\n    return text3\n    #return text3\ndef sentiment_analysis(text1):\n    '''\n    Write a function to determine the sentiment of the given string.\n    '''\n    #sentiment_file = open('/Users/lidongchen/Documents/UW/ECE/Intro to AI/HW/HW2/HW2/sentiment.txt')\n    sentiment_file = open('/Users/lidongchen/Documents/UW/ECE/Intro to AI/HW/HW2/HW2/sentiment_2.txt')\n    sentiment_dict = dict()\n    for line in sentiment_file.readlines():\n        line = line.split('\\t')\n        sentiment_dict[line[1]] = int(line[0])\n    text1 = text_preprocessing(text1)\n    text1 = text1.split()\n    #print(text1)\n    \n    total_sum = 0\n    for word in text1:\n        if word in sentiment_dict:\n            total_sum += sentiment_dict[word]\n    if total_sum > 0:\n        return 1\n    elif total_sum == 0:\n        return 0\n    else:\n        return -1\n    #return total_sum\n    #return total_sum\ndef find_word(word_list):\n    '''\n    Write a function to find the given words in the given file.\n    '''\n    \n    for i in range(len(word_list)):\n        if word_list[i] in word_list:\n            #print(word_list[i])\n            #print(word_list[i] in word_list)\n            word_list.remove(word_list[i])\n            find_word(word_list)\n        else:\n            #print(word_list[i])\n            word_list.remove(word_list[i])\n            find_word(word_list)\n    return word_list\ndef find_word_no_loop(word_list):\n    '''\n    Write a function to find the given words in the given file.\n    '''\n    #word_list = text_preprocessing(word_list)\n    #print(word_list)\n    for i in range(len(word_list)):\n        if word_list[i] in word_list:\n            #print(word_list[i])\n            #print(word_list[i] in word_list)\n            word_list.remove(word_list[i])\n        else:\n            #print(word_list[i])\n            word_list.remove(word_list[i])\n    #print(word_list)\n    return word_list\ndef no_repeat_word(text1):\n    '''\n    Write a function to find the most frequent words in the given string.\n    '''\n    #text1 = text_preprocessing(text1)\n    #print(text1)\n    text1 = text1.split()\n    text1 = find_word(text1)\n    text1.sort()\n    #print(text1)\n    return text1\n    #return text1\n    #return text1\ndef no_repeat_word_without_loop(text1):\n    '''\n    Write a function to find the most frequent words in the given string.\n    '''\n    #text1 = text_preprocessing(text1)\n    #print(text1)\n    text1 = text1.split()\n    #print(text1)\n    #text1 = find_word(text1)\n    #text1.sort()\n    #print(text1)\n    return text1\n    #return text1\n    #return text1\ndef lemmatization(text1):\n    '''\n    Write a function to lemmatize the given string.\n    '''\n    from nltk.stem import WordNetLemmatizer\n    from nltk.tokenize import word_tokenize\n    lemma_list = []\n    wordnet_lemmatizer = WordNetLemmatizer()\n    for word in word_tokenize(text1):\n        lemma_list.append(wordnet_lemmatizer.lemmatize(word))\n    return lemma_list\n    #return lemma_list\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove punctuation in the given string.\n    '''\n    #text1 = text_preprocessing(text1)\n    punc_list = ['!', '\"', '#', '$', '%', '&', '\\\\', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '_', '`', '{', '|', '}', '~', '\\n']\n    for punc in punc_list:\n        text1 = text1.replace(punc, '')\n    return text1\n    #return text1\n    #return text1\ndef remove_punctuation_without_loop(text1):\n    '''\n    Write a function to remove punctuation in the given string.\n    '''\n    #text1 = text_preprocessing(text1)\n    punc_list = ['!', '\"', '#', '$', '%', '&', '\\\\', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '_', '`', '{', '|', '}', '~', '\\n']\n    for punc in punc_list:\n        text1 = text1.replace(punc, '')\n    return text1\n    #return text1\n    #return text1\ndef tokenization(text1):\n    '''\n    Write a function to tokenize the given string.\n    '''\n    #text1 = text_preprocessing(text1)\n    from nltk.tokenize import word_tokenize\n    word_tokenize(text1)\n    return text1\n    #return text1\n    #return text1\ndef tokenization_without_loop(text1):\n    '",
        "num_ids": 71
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # result = re.findall(r'\".+?\"',text1)\n    # result = re.findall(r'\".+?\"',text1)\n    # print(result)\n    result = re.findall(r'\"(.*?)\"',text1)\n    print(result)\n",
        "num_ids": 72
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\"(.*?)\"', text1)\n",
        "num_ids": 20
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #text1 = '\"Walt Disney established the company in 1894. Disney is a family of companies based in Los Angeles, California that focuses on animation and entertainment. The company was founded by Walt Disney in 1894.'\n",
        "num_ids": 50
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # t_1 * t_2 = (t_1 * t_{2+1}) * t_{2+2}\n    # t_1 * t_2 *... * t_{N+1} = t_1 * (t_2 * t_{3+1}) *... * t_{N+1}\n    \n    # t_2 * t_3 = (t_{1+1} * t_{2+1}) * t_{2+2}\n    # t_2 * t_3 *... * t_{N+1} = (t_1 * t_{2+1}) * t_2 *... * t_{N+1}\n    \n    # t_3 * t_4 = (t_{1+1} * t_{2+1}) * t_{2+2}\n    # t_3 * t_4 *... * t_{N+1} = (t_1 * t_{2+1}) * t_3 *... * t_{N+1}\n    \n    # t_4 * t_5 = (t_{1+1} * t_{2+1}) * t_{2+2}\n    # t_4 * t_5 *... * t_{N+1} = (t_1 * t_{2+1}) * t_4 *... * t_{N+1}\n    \n    # t_5 * t_6 = (t_{1+1} * t_{2+1}) * t_{2+2}\n    # t_5 * t_6 *... * t_{N+1} = (t_1 * t_{2+1}) * t_5 *... * t_{N+1}\n    \n    #...\n    # t_{N+1} = (t_{1+1} * t_{2+1}) * t_{2+2}\n    #...\n    \n    return (test_tup[0] * test_tup[1])\n",
        "num_ids": 449
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for index in range(0, len(test_tup) - 1):\n        new_tup = new_tup + (test_tup[index] * test_tup[index + 1],)\n    return new_tup\n",
        "num_ids": 67
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Your code here\n    result = ()\n    for index in range(0, len(test_tup)):\n        if index == len(test_tup)-1:\n            break\n        else:\n            result += (test_tup[index] * test_tup[index + 1],)\n    return result\n    \nprint(multiply_elements((1, 2, 3, 4, 5))) # (2, 4, 6, 8, 10)\nprint(multiply_elements((1, 2, 3))) # (2, 4, 6)\nprint(multiply_elements((1,))) # (1,)",
        "num_ids": 152
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup) - 1):\n        result_tup += (test_tup[i] * test_tup[i + 1],)\n    return result_tup\n",
        "num_ids": 60
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = ()\n    for i in range(len(test_tup)-1):\n        res += (test_tup[i] * test_tup[i+1],)\n    return res\n",
        "num_ids": 50
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)-1):\n        new_tup = new_tup + (test_tup[i]*test_tup[i+1],)\n    return new_tup\n",
        "num_ids": 64
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([i*j for i,j in zip(test_tup, test_tup[1:])])\n",
        "num_ids": 31
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t = []\n    for i in range(len(test_tup) - 1):\n        t.append(test_tup[i] * test_tup[i+1])\n    return t\n",
        "num_ids": 51
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x*y for x, y in zip(test_tup, test_tup[1:])])\n",
        "num_ids": 31
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return [test_tup[i] * test_tup[i+1] for i in range(0, len(test_tup)-1)]\n",
        "num_ids": 39
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if not isinstance(lst1,list) or not isinstance(lst2,list):\n        return None\n    for i in range(len(lst1)):\n        if not isinstance(lst1[i],(int,float)) or not isinstance(lst2[i],(int,float)):\n            return None\n    return [x+y for (x,y) in zip(lst1,lst2)]\n",
        "num_ids": 107
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if lst1 == [] or lst2 == []:\n        return []\n    return [lst1[0] + lst2[0]] + sum_list(lst1[1:], lst2[1:])\n",
        "num_ids": 57
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if not len(lst1) == len(lst2):\n        return None\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]\n",
        "num_ids": 52
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #sum_list([1,2,3,4],[2,3,4,5]) -> [3,5,7,9]\n    return [x+y for x,y in zip(lst1,lst2)]\n",
        "num_ids": 57
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result=[]\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if lst1 == [] and lst2 == []:\n        return []\n    if lst1 == []:\n        return lst2\n    if lst2 == []:\n        return lst1\n    else:\n        return [sum(x) for x in zip(lst1,lst2)]\n",
        "num_ids": 76
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError('input lists have different lengths!')\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #a_1+b_1,...,a_n+b_n\n    sum = [x + y for x, y in zip(lst1, lst2)]\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n",
        "num_ids": 30
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(list(set(nums)))\n    return list(groupby(nums))\n",
        "num_ids": 27
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Without using itertools or groupby\n    def remove_duplicates(nums):\n        result = []\n        last = None\n        for num in nums:\n            if num!= last:\n                result.append(num)\n                last = num\n        return result\n    # Or using itertools\n    def remove_duplicates_iter(nums):\n        result = []\n        for key, group in groupby(nums):\n            result.append(key)\n        return result\n    # Or using groupby\n    def remove_duplicates_groupby(nums):\n        return [key for key, group in groupby(nums)]\n    # Using set\n    def remove_duplicates_set(nums):\n        return list(set(nums))\n    # With sorted\n    def remove_duplicates_sorted(nums):\n        nums = sorted(nums)\n        result = [nums[0]]\n        last = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i]!= last:\n                result.append(nums[i])\n                last = nums[i]\n        return result\n    # Without using any builtin functions\n    def remove_duplicates_no_builtins(nums):\n        result = []\n        for num in nums:\n            if num not in result:\n                result.append(num)\n        return result\n    # Without using any builtin functions or set\n    def remove_duplicates_no_builtins_no_set(nums):\n        result = []\n        for num in nums:\n            if num not in result:\n                result.append(num)\n        return result\n    # Without using any builtin functions or set\n    def remove_duplicates_no_builtins_no_sorted(nums):\n        result = []\n        num_set = set()\n        for num in nums:\n            if num not in num_set:\n                result.append(num)\n                num_set.add(num)\n        return result\n    return remove_duplicates_no_builtins_no_sorted(nums)\n",
        "num_ids": 519
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    lst = list(groupby(nums))\n    return [item for item in lst if len(list(item[1])) > 1]\n",
        "num_ids": 38
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    s=list(groupby(nums))\n    for i in range(len(s)-1):\n        if len(s[i][1])==len(s[i+1][1]):\n            nums.remove(nums[s[i][1][0]])\n    return nums\n",
        "num_ids": 74
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    temp = [list(group) for key, group in groupby(nums)]\n    result = []\n    for group in temp:\n        if len(group) > 1:\n            result.append(group[0])\n        else:\n            result.append(group[0])\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums)<1:\n        return nums\n    if len(nums)==1:\n        return nums\n    return [key for key, group in groupby(nums)]\n",
        "num_ids": 50
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # My first approach using itertools.groupby()\n    # nums = [1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6]\n    # print([list(group) for key, group in groupby(nums)])\n    # print([x for x, _ in groupby(nums)])\n    # nums_duplicates = []\n    # for group in groupby(nums):\n    #     print(group)\n    #     nums_duplicates.append(group)\n    # print(nums_duplicates)\n    # return nums_duplicates\n",
        "num_ids": 152
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    dup = [len(list(g)) for _, g in groupby(nums)]\n    return dup\n",
        "num_ids": 29
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if nums == []:\n        return []\n    else:\n        nums.sort()\n        last_number = nums[0]\n        new_list = []\n        for x in nums:\n            if x == last_number:\n                last_number = x\n            else:\n                new_list.append(x)\n                last_number = x\n        return new_list\n        \n    \n",
        "num_ids": 98
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # When we have an empty list, there are no consecutive duplicates.\n    if not nums:\n        return nums\n    # We have one element, so there can't be duplicates.\n    if len(nums) == 1:\n        return nums\n    # We have two elements, so there can't be duplicates.\n    if len(nums) == 2:\n        return nums\n    # We have three or more elements.\n    else:\n        newlist = []\n        for i in range(len(nums)):\n            # If we get to the last element, we return the new list we've made.\n            if i == len(nums) - 1:\n                newlist.append(nums[i])\n                return newlist\n            # If the next element is different from the previous, we add it to the new list.\n            if nums[i]!= nums[i + 1]:\n                newlist.append(nums[i])\n        return newlist\n",
        "num_ids": 233
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if h == 0:\n        return None\n    else:\n        return math.pi*r**2 + 2*math.pi*r*h\n",
        "num_ids": 37
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surfacearea = 3.14159265358979 * (r * r) + 3.14159265358979 * (r * r) * math.atan(h/r)\n    return surfacearea\ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.14159265358979 * (r * r) + 3.14159265358979 * (r * r) * math.atan(h/r)\ndef lateral_surface_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given side a and side b.\n    '''\n    return 2 * a * b\ndef lateral_surface_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given base a, base b, and height h.\n    '''\n    return lateral_surface_rectangle(a,b) + h * b\ndef lateral_surface_trapezoid_one_side(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given one of its base a and the height h.\n    '''\n    return lateral_surface_rectangle(a,b) + h * b\ndef lateral_surface_trapezoid_two_sides(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the base a and the height h.\n    '''\n    return 2 * lateral_surface_rectangle(a,b) + h * b\ndef lateral_surface_triangle(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given side a, side b, and side c.\n    '''\n    return lateral_surface_rectangle(a,b) + lateral_surface_rectangle(b,c) + lateral_surface_rectangle(c,a)\ndef lateral_surface_triangle_one_side(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given one of its sides a, side b, and side c.\n    '''\n    return lateral_surface_rectangle(a,b) + lateral_surface_rectangle(b,c) + lateral_surface_rectangle(c,a)\ndef lateral_surface_triangle_two_sides(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given two of its sides a and c, and the height h.\n    '''\n    return lateral_surface_rectangle(a,b) + lateral_surface_rectangle(b,c) + lateral_surface_rectangle(c,a)\ndef lateral_surface_rectangle_one_side(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given one of its sides a and side b.\n    '''\n    return 2 * a * b\ndef lateral_surface_rectangle_two_sides(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given two of its sides a and b.\n    '''\n    return 2 * a * b\ndef lateral_surface_paralellogram(a,b):\n    '''\n    Write a function to find the lateral surface area of a paralellogram given two of its sides a and b.\n    '''\n    return lateral_surface_rectangle(a,b) + lateral_surface_rectangle(b,a)\ndef lateral_surface_parallelogram(a,b):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given two of its sides a and b.\n    '''\n    return lateral_surface_rectangle(a,b)\ndef lateral_surface_rhombus(a,b):\n    '''\n    Write a function to find the lateral surface area of a rhombus given one of its sides a and side b.\n    '''\n    return lateral_surface_rectangle(a,b)\ndef lateral_surface_square(a):\n    '''\n    Write a function to find the lateral surface area of a square given one of its sides a.\n    '''\n    return lateral_surface_rectangle(a,a)\ndef lateral_surface_kite(a,b):\n    '''\n    Write a function to find the lateral surface area of a kite given one of its sides a and side b.\n    '''\n    return lateral_surface_rectangle(a,b) * 2\ndef lateral_surface_kite_one_side(a):\n    '''\n    Write a function to find the lateral surface area of a kite given one of its side a.\n    '''\n    return lateral_surface_rectangle(a,a) * 2\ndef lateral_surface_kite_two_sides(a):\n    '''\n    Write a function to find the lateral surface area of a kite given two of its sides a.\n    '''\n    return lateral_surface_rectangle(a,a) * 4\ndef lateral_surface_dodecagon(a):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given one of its side a.\n    '''\n    return lateral_surface_rectangle(a,a) * 12\ndef lateral_surface_dodecagon_one_side(a):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given one of its side a.\n    '''\n    return lateral_surface_rectangle(a,a) * 12\ndef lateral_surface_dodecagon_two_sides(a):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given two of its sides a.\n    '''\n    return lateral_surface_rectangle(a,a) * 24\ndef lateral_surface_dodecagon_three_sides(a):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given three of its sides a.\n    '''\n    return lateral_surface_rectangle(a,a) * 36\ndef lateral_surface_dodecagon_four_sides(a):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given four of its sides a.\n    '''\n    return lateral_surface_rectangle(a,a) * 48\ndef lateral_surface_dodecagon_five_sides(a):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given five of its sides a.\n    '''\n    return lateral_surface_rectangle(a,a) * 60\ndef lateral_surface_dodecagon_six_sides(a):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given six of its sides a.\n    '''\n    return lateral_surface_rectangle(a,a) * 72\ndef lateral_surface_dodecagon_seven_sides(a):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given seven of its sides a.\n    '''\n    return lateral_surface_rectangle(a,a) * 84\ndef lateral_surface_dodecagon_eight_sides(a):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given eight of its sides a.\n    '''\n    return lateral_surface_rectangle(a,a) * 96\ndef lateral_surface_dodecagon_nine_sides(a):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given nine of its sides a.\n    '''\n    return lateral_surface_rectangle(a,a) * 108\ndef lateral_surface_dodecagon_ten_sides(a):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given ten of its sides a.\n    '''\n    return lateral_surface_rectangle(a,a) * 120\ndef lateral_surface_dodecagon_eleven_sides(a):\n    '''\n    Write a function to find the lateral surface area of a dodecagon given eleven of its sides a.\n    '''\n    return lateral_surface_rectangle(a,a) * 132\ndef lateral_surface_do",
        "num_ids": 24
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.1415926535*r**2 + 3.1415926535*r*h\ndef area_of_cube(a):\n    '''\n    Write a function to find the area of a cube given the side length a.\n    '''\n    return 6*a**2\ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given the radius r.\n    '''\n    return 4/3*3.1415926535*r**3\ndef area_of_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder given the radius r and the height h.\n    '''\n    return 3.1415926535*r**2 + 3.1415926535*r*h\ndef lateral_surface_area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius r and the height h.\n    '''\n    return 2*3.1415926535*r + 3.1415926535*r*h\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle given the side lengths a,b,c.\n    '''\n    return (a+b+c)/2\ndef lateral_surface_area_of_triangle(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the side lengths a,b,c.\n    '''\n    return a*b*math.sqrt(3)/2\ndef lateral_surface_area_of_triangle_simplified(a,b,c):\n    return 0.5*(a+b+c)*math.sqrt(3)\ndef height_of_triangle(a,b,c):\n    '''\n    Write a function to find the height of a triangle given the side lengths a,b,c.\n    '''\n    return 2*math.sqrt(3)/3*math.sqrt(a**2+b**2+c**2)\ndef volume_of_parallelogram(a,b):\n    '''\n    Write a function to find the volume of a parallelogram given the base length a and the height length b.\n    '''\n    return a*b\ndef lateral_surface_area_of_parallelogram(a,b):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given the base length a and the height length b.\n    '''\n    return 2*a + 2*b\ndef lateral_surface_area_of_parallelogram_simplified(a,b):\n    return 2*(a+b)\ndef area_of_trapezoid(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid given the base length a, the height length b, and the top length h.\n    '''\n    return (a+b)*h/2\ndef lateral_surface_area_of_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the base length a, the height length b, and the top length h.\n    '''\n    return 2*a + 2*b\ndef area_of_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle given the base length a and the height length b.\n    '''\n    return a*b\ndef lateral_surface_area_of_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the base length a and the height length b.\n    '''\n    return 2*a + 2*b\ndef area_of_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus given the base length a and the height length b.\n    '''\n    return 0.5*a*b\ndef lateral_surface_area_of_rhombus(a,b):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the base length a and the height length b.\n    '''\n    return a + b\ndef area_of_square(a):\n    '''\n    Write a function to find the area of a square given the side length a.\n    '''\n    return a*a\ndef lateral_surface_area_of_square(a):\n    '''\n    Write a function to find the lateral surface area of a square given the side length a.\n    '''\n    return 4*a\ndef area_of_parallelogram_with_slope(a,b,m):\n    '''\n    Write a function to find the area of a parallelogram with slope m given the base length a and the height length b.\n    '''\n    return a*b*(1 + m**2)**0.5\ndef lateral_surface_area_of_parallelogram_with_slope(a,b,m):\n    '''\n    Write a function to find the lateral surface area of a parallelogram with slope m given the base length a and the height length b.\n    '''\n    return 2*a*b*(1 + m**2)**0.5\ndef area_of_trapezoid_with_slope(a,b,h,m):\n    '''\n    Write a function to find the area of a trapezoid with slope m given the base length a, the height length b, and the top length h.\n    '''\n    return a*h*(1 + m**2)**0.5\ndef lateral_surface_area_of_trapezoid_with_slope(a,b,h,m):\n    '''\n    Write a function to find the lateral surface area of a trapezoid with slope m given the base length a, the height length b, and the top length h.\n    '''\n    return 2*a*h*(1 + m**2)**0.5\ndef area_of_rectangle_with_slope(a,b,m):\n    '''\n    Write a function to find the area of a rectangle with slope m given the base length a and the height length b.\n    '''\n    return a*b*(1 + m**2)**0.5\ndef lateral_surface_area_of_rectangle_with_slope(a,b,m):\n    '''\n    Write a function to find the lateral surface area of a rectangle with slope m given the base length a and the height length b.\n    '''\n    return 2*a*b*(1 + m**2)**0.5\ndef area_of_rhombus_with_slope(a,b,m):\n    '''\n    Write a function to find the area of a rhombus with slope m given the base length a and the height length b.\n    '''\n    return 0.5*a*b*(1 + m**2)**0.5\ndef lateral_surface_area_of_rhombus_with_slope(a,b,m):\n    '''\n    Write a function to find the lateral surface area of a rhombus with slope m given the base length a and the height length b.\n    '''\n    return a*b*(1 + m**2)**0.5\ndef area_of_square_with_slope(a,m):\n    '''\n    Write a function to find the area of a square with slope m given the side length a.\n    '''\n    return a*a*(1 + m**2)**0.5\ndef lateral_surface_area_of_square_with_slope(a,m):\n    '''\n    Write a function to find the lateral surface area of a square with slope m given the side length a.\n    '''\n    return 4*a*(1 + m**2)**0.5\ndef lateral_surface_area_of_square_with_slope_simplified(a,m):\n    return 4*a*(1 + m**2)\ndef lateral_surface_area_of_square_with_slope_simplified_one_line(a,m):\n    return a*4*(1 + m**2)\ndef area_of_parallelogram_with_slope(a,b,m):\n    '''\n    Write a function to find the area of a parallelogram with slope m give",
        "num_ids": 19
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = math.sqrt(r**2+h**2)\n    A = math.pi*r*(r+a)\n    return A\n",
        "num_ids": 38
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = (math.pi*r**2)*h\n    return(surface_area)\n",
        "num_ids": 26
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.141592653589793*r*r+(3.141592653589793*r*r)*(math.log((r+h),math.e))\ndef lateralsurface_tromboloid(R,h):\n    '''\n    Write a function to find the lateral surface area of a tromboloid given radius R and the height h.\n    '''\n    return 4*3.141592653589793*R*R+(4*3.141592653589793*R*R)*(math.log((R+h),math.e))\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return 3.141592653589793*r*r+(3.141592653589793*r*r)*2\ndef lateralsurface_cuboid(d1,d2,d3):\n    '''\n    Write a function to find the lateral surface area of a cuboid given the length of each dimension d1, d2, and d3.\n    '''\n    return d1*d2*d3\ndef volumetric_to_lateral_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return math.pi*r*r*h\ndef volumetric_to_lateral_tromboloid(R,h):\n    '''\n    Write a function to find the lateral surface area of a tromboloid given radius R and the height h.\n    '''\n    return math.pi*R*R*h\ndef volumetric_to_lateral_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.141592653589793*r*r+(3.141592653589793*r*r)*(math.log((r+h),math.e))\ndef volumetric_to_lateral_cuboid(d1,d2,d3):\n    '''\n    Write a function to find the lateral surface area of a cuboid given the length of each dimension d1, d2, and d3.\n    '''\n    return d1*d2*d3\ndef lateral_to_volumetric_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return r*r*h\ndef lateral_to_volumetric_tromboloid(R,h):\n    '''\n    Write a function to find the lateral surface area of a tromboloid given radius R and the height h.\n    '''\n    return R*R*h\ndef lateral_to_volumetric_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.141592653589793*r*r+(3.141592653589793*r*r)*(math.log((r+h),math.e))\ndef lateral_to_volumetric_cuboid(d1,d2,d3):\n    '''\n    Write a function to find the lateral surface area of a cuboid given the length of each dimension d1, d2, and d3.\n    '''\n    return d1*d2*d3\ndef lateral_to_volumetric_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.141592653589793*r*r+(3.141592653589793*r*r)*(math.log((r+h),math.e))\ndef lateral_to_volumetric_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.141592653589793*r*r+(3.141592653589793*r*r)*(math.log((r+h),math.e))\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.141592653589793*r*r+(3.141592653589793*r*r)*(math.log((r+h),math.e))\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return 3.141592653589793*r*r+(3.141592653589793*r*r)*2\ndef surface_area_tromboloid(R,h):\n    '''\n    Write a function to find the lateral surface area of a tromboloid given radius R and the height h.\n    '''\n    return 4*3.141592653589793*R*R+(4*3.141592653589793*R*R)*(math.log((R+h),math.e))\ndef surface_area_cuboid(d1,d2,d3):\n    '''\n    Write a function to find the lateral surface area of a cuboid given the length of each dimension d1, d2, and d3.\n    '''\n    return d1*d2*d3\ndef surface_area_tromboloid(R,h):\n    '''\n    Write a function to find the lateral surface area of a tromboloid given radius R and the height h.\n    '''\n    return 4*3.141592653589793*R*R+(4*3.141592653589793*R*R)*(math.log((R+h),math.e))\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.141592653589793*r*r+(3.141592653589793*r*r)*(math.log((r+h),math.e))\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return 3.141592653589793*r*r+(3.141592653589793*r*r)*2\ndef surface_area_cuboid(d1,d2,d3):\n    '''\n    Write a function to find the lateral surface area of a cuboid given the length of each dimension d1, d2, and d3.\n    '''\n    return d1*d2*d3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return math.pi*r*r*h\ndef volume_tromboloid(R,h):\n    '''\n    Write a function to find the lateral surface area of a tromboloid given radius R and the height h.\n    '''\n    return math.pi*R*R*h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.141592653589793*r*r+(3.141592653589793*r*r)*(math.log((r+h),math.e))\ndef volume_cuboid(d1,d2,d3):\n    '''\n    Write a function to find the lateral surface area of a cuboid given the length of each dimension d1, d2, and d3.\n    '''\n    return d1*d2*d3\ndef volume_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.141592653589793*r*r+(3.141592653589793*r*r)*(math.log((r+h),math.e))\ndef volume_cylinde",
        "num_ids": 50
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)*(1+(math.pi*r/h))\n",
        "num_ids": 25
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*math.pow(r,2) + math.pi*r*h\n",
        "num_ids": 26
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = (math.pi * r ** 2 * (3 * h - r)) / 3\n    return lateral_surface_area\n",
        "num_ids": 37
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>=0 and h>=0:\n        area = (1/3) * 3.14 * r * r * h\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>=0 and h>=0:\n        area = 3.14 * r * r * (h + r)\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given radius r.\n    '''\n    if r>=0:\n        area = 3.14 * r * r\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_parallelogram(b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given its base and height.\n    '''\n    if b>=0 and h>=0:\n        area = b * h\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_rectangle(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its length and width.\n    '''\n    if l>=0 and w>=0:\n        area = l * w\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given its base1, base2 and height.\n    '''\n    if b1>=0 and b2>=0 and h>=0:\n        area = ((b1+b2)/2) * h\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_triangle(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given its side lengths.\n    '''\n    if a>=0 and b>=0 and c>=0:\n        s = (a+b+c)/2\n        area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_kite(r1,r2):\n    '''\n    Write a function to find the lateral surface area of a kite given the radius of its two sides.\n    '''\n    if r1>=0 and r2>=0:\n        area = 3.14 * r1 * r2\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_ellipse(r1,r2):\n    '''\n    Write a function to find the lateral surface area of an ellipse given the radius of its two sides.\n    '''\n    if r1>=0 and r2>=0:\n        area = 3.14 * r1 * r2\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_rhombus(d1,d2):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the length of its two sides.\n    '''\n    if d1>=0 and d2>=0:\n        area = (d1*d2)/2\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius.\n    '''\n    if r>=0:\n        area = 4 * 3.14 * r * r\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_pyramid(s1,s2,s3):\n    '''\n    Write a function to find the lateral surface area of a pyramid given the length of its three sides.\n    '''\n    if s1>=0 and s2>=0 and s3>=0:\n        area = (s1+s2+s3)/2\n        area = math.sqrt(area*(area-s1)*(area-s2)*(area-s3))\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_hemisphere(r):\n    '''\n    Write a function to find the lateral surface area of a hemisphere given the radius.\n    '''\n    if r>=0:\n        area = 2 * 3.14 * r * r\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>=0 and h>=0:\n        area = (1/3) * 3.14 * r * r * h\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    if r>=0 and h>=0:\n        area = 2 * 3.14 * r * r * h\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>=0 and h>=0:\n        area = (1/3) * 3.14 * r * r * h\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    if r>=0 and h>=0:\n        area = 2 * 3.14 * r * r * h\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>=0 and h>=0:\n        area = (1/3) * 3.14 * r * r * h\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    if r>=0 and h>=0:\n        area = 2 * 3.14 * r * r * h\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>=0 and h>=0:\n        area = (1/3) * 3.14 * r * r * h\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and height.\n    '''\n    if r>=0 and h>=0:\n        area = 2 * 3.14 * r * r * h\n        print(round(area,2))\n    else:\n        print(\"Error\")\n        \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>=0 and h>=0:\n        area = (1/3) * 3",
        "num_ids": 25
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\n",
        "num_ids": 23
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(',', 'COMMA')\n    text=text.replace('.', 'DOT')\n    text=text.replace(' ', 'COLON')\n    return text\n",
        "num_ids": 47
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n",
        "num_ids": 26
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[ ]',':', text)\n    text = re.sub(r'[.]',':', text)\n    text = re.sub(r'[,]',':', text)\n    return text\n",
        "num_ids": 58
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\" \",\":\")\n    return text\n",
        "num_ids": 41
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s|\\.', ':', text)\n",
        "num_ids": 22
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ', ':').replace('.', ':').replace(',', ':')\n",
        "num_ids": 27
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # text = 'hello there, how are you. i am fine. good morning'\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace(',','::')\n",
        "num_ids": 58
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace(',',':')\n    return text\n",
        "num_ids": 42
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return(text.replace(\",\", \"\").replace(\".\", \"\").replace(\" \", \":\"))\n",
        "num_ids": 25
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        if x < A[mid]:\n            high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            if mid - 1 < 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n    ",
        "num_ids": 115
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x > A[mid]:\n            low = mid + 1\n        elif x < A[mid]:\n            high = mid - 1\n        else:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            high = mid - 1\n    return -1\n",
        "num_ids": 105
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    while l <= r:\n        m = (l + r) // 2\n        if A[m] == x:\n            if m == 0 or A[m-1]!= x:\n                return m\n            r = m - 1\n        elif A[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n    return -1\n",
        "num_ids": 107
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if x < A[mid]:\n            end = mid - 1\n        elif x > A[mid]:\n            start = mid + 1\n        else:\n            if mid - 1 < 0:\n                return mid\n            if A[mid - 1]!= x:\n                return mid\n            else:\n                end = mid - 1\n    return -1\n",
        "num_ids": 120
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n",
        "num_ids": 17
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A)-1\n    if A[high] < x:\n        return -1\n",
        "num_ids": 30
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            # we have a match\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n",
        "num_ids": 111
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if x == A[mid]:\n            if mid == 0 or x > A[mid - 1]:\n                return mid\n            else:\n                end = mid - 1\n        elif x < A[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n",
        "num_ids": 107
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] < x:\n            start = mid + 1\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            if mid == 0 or A[mid - 1]!= A[mid]:\n                return mid\n            else:\n                end = mid - 1\n    return -1\n",
        "num_ids": 113
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start, end = 0, len(A) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if x == A[mid]:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            end = mid - 1\n        elif x < A[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n",
        "num_ids": 100
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_products = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            print(arr[i:j+1])\n            print(np.prod(arr[i:j+1]))\n            sum_of_products += np.prod(arr[i:j+1])\n    print(sum_of_products)\n",
        "num_ids": 98
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    curr_sum = 1\n    sum = 0\n    for i in range(len(arr)):\n        sum += curr_sum * arr[i]\n        curr_sum *= arr[i]\n",
        "num_ids": 52
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0 for _ in range(n)]\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = arr[i - 1] * dp[i - 1]\n    print(dp)\n    for j in range(1, n):\n        for i in range(j):\n            dp[j] = dp[j] + arr[j] * dp[i]\n",
        "num_ids": 112
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    size=len(arr)\n    sum=0\n    for i in range(0,size+1):\n        for j in range(i+1,size+1):\n            product=1\n            for k in range(i,j):\n                product=product*arr[k]\n            sum=sum+product\n    return sum\n",
        "num_ids": 80
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        for j in range(i,n):\n            subarray_sum = 1\n            for k in range(i,j+1):\n                subarray_sum *= arr[k]\n            ans += subarray_sum\n    return ans\n",
        "num_ids": 80
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    import numpy as np\n    import pandas as pd\n",
        "num_ids": 17
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if arr == []:\n        return 0\n    soln = 0\n    n = len(arr)\n    for i in range(n):\n        prod = arr[i]\n        for j in range(i+1,n):\n            prod *= arr[j]\n            soln += prod\n    return soln\n",
        "num_ids": 79
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n=len(arr)\n    sum=0\n    for i in range(0,n+1):\n        for j in range(i,n):\n            prod=1\n            for k in range(i,j+1):\n                prod=prod*arr[k]\n            sum=sum+prod\n    print(sum)\n",
        "num_ids": 84
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        prod *= arr[i]\n",
        "num_ids": 40
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    arr.sort()\n    s=set()\n    for i in range(0, n):\n        for j in range(i, n):\n            s.add(arr[i:j + 1])\n",
        "num_ids": 58
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get all the bits of number except first and last\n    # Swap bits with and without the first and last bit\n    return ((n & 0xffff) << 1) | ((n & 0xfffe) >> 1)\n",
        "num_ids": 52
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 1 << (n-1)\n    return n^mask\n    \ndef increment_set_bits(n):  \n    '''\n    Write a python function to increment set bits of the number. https://www.geeksforgeeks.org/increment-set-bits-number/\n    '''\n    mask = -(n & (-n))\n    return n+mask\n    \ndef decrement_set_bits(n):  \n    '''\n    Write a python function to decrement set bits of the number. https://www.geeksforgeeks.org/decrement-set-bits-number/\n    '''\n    mask = -(n & (-n))\n    return n-mask\n    \n    \ndef get_even_indexes(numbers):  \n    '''\n    Write a python function to get even indexes in a list of numbers. https://www.geeksforgeeks.org/python-get-even-indexes-a-list/\n    '''\n    return [i for i in range(len(numbers)) if i % 2 == 0]\n    \n    \ndef append_and_join(list1, list2):  \n    '''\n    Write a python function to append list2 in list1 and join the appended list. https://www.geeksforgeeks.org/append-and-join-two-lists-python/\n    '''\n    list1.append(list2)\n    return ''.join(map(str, list1))\n    \n    \ndef first_index_where(array, value, start, end):  \n    '''\n    Write a python function to get the first index where the value is found in the array. https://www.geeksforgeeks.org/first-index-where-value-is-found-in-array/\n    '''\n    while start<=end:\n        mid = int((start+end)/2)\n        if array[mid] == value:\n            if mid == 0 or array[mid-1]!= value:\n                return mid\n            end = mid-1\n        elif array[mid] < value:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1\n    \n    \ndef is_all_palindrome(numbers):  \n    '''\n    Write a python function to check whether all the numbers in the array are palindromes. https://www.geeksforgeeks.org/python-check-all-numbers-in-a-list-are-palindrome/\n    '''\n    n = len(numbers)\n    i = n-1\n    while i >= 0:\n        if str(numbers[i])!= str(numbers[i])[::-1]:\n            return False\n        i -= 1\n    return True\n    \n    \ndef last_index_where(array, value, start, end):  \n    '''\n    Write a python function to get the last index where the value is found in the array. https://www.geeksforgeeks.org/last-index-where-value-is-found-in-array/\n    '''\n    while start<=end:\n        mid = int((start+end)/2)\n        if array[mid] == value:\n            if mid == n-1 or array[mid+1]!= value:\n                return mid\n            start = mid+1\n        elif array[mid] < value:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1\n    \n    \ndef sort_array(numbers):  \n    '''\n    Write a python function to sort the array in ascending order. https://www.geeksforgeeks.org/sort-array-using-quick-sort/\n    '''\n    n = len(numbers)\n    quicksort(numbers, 0, n-1)\n    \ndef quicksort(numbers, start, end): \n    '''\n    Write a python function to sort an array in ascending order. https://www.geeksforgeeks.org/python-sort-array-by-element-frequency/\n    '''\n    if end <= start:\n        return\n    pivot_index = start\n    pivot = numbers[pivot_index]\n    swap_index = pivot_index + 1\n    for i in range(swap_index, end+1):\n        if numbers[i] < pivot:\n            numbers[i], numbers[swap_index] = numbers[swap_index], numbers[i]\n            swap_index += 1\n    numbers[pivot_index], numbers[swap_index-1] = numbers[swap_index-1], numbers[pivot_index]\n    quicksort(numbers, start, swap_index-2)\n    quicksort(numbers, swap_index, end)\n    \ndef sort_array_two(numbers):  \n    '''\n    Write a python function to sort the array in ascending order. https://www.geeksforgeeks.org/python-sort-list-of-lists-by-second-item/\n    '''\n    numbers.sort(key=lambda x:x[1])\n    \ndef find_first_occurrence(array, value):  \n    '''\n    Write a python function to find first occurrence of value in array. https://www.geeksforgeeks.org/find-first-occurrence-of-element-in-sorted-array/\n    '''\n    n = len(array)\n    start = 0\n    end = n-1\n    while start <= end:\n        mid = int((start+end)/2)\n        if array[mid] == value:\n            if mid == 0 or array[mid-1]!= value:\n                return mid\n            end = mid-1\n        elif array[mid] < value:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1\n    \ndef binary_search(numbers, value):  \n    '''\n    Write a python function to find the index of a given value in a sorted array. https://www.geeksforgeeks.org/python-program-for-binary-search/\n    '''\n    n = len(numbers)\n    start = 0\n    end = n-1\n    while start <= end:\n        mid = int((start+end)/2)\n        if numbers[mid] == value:\n            return mid\n        elif numbers[mid] < value:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1\n    \ndef get_max_index(numbers):  \n    '''\n    Write a python function to find the index of maximum number in array. https://www.geeksforgeeks.org/python-program-to-find-maximum-number-in-list/\n    '''\n    max_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] > numbers[max_index]:\n            max_index = i\n    return max_index\n    \ndef get_min_index(numbers):  \n    '''\n    Write a python function to find the index of maximum number in array. https://www.geeksforgeeks.org/python-program-to-find-minimum-number-in-list/\n    '''\n    min_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] < numbers[min_index]:\n            min_index = i\n    return min_index\n    \ndef get_min_index_two(numbers):  \n    '''\n    Write a python function to find the index of maximum number in array. https://www.geeksforgeeks.org/python-program-to-find-minimum-number-in-list/\n    '''\n    return numbers.index(min(numbers))\n    \ndef swap_array_elements(numbers, index1, index2):  \n    '''\n    Write a python function to swap two array elements. https://www.geeksforgeeks.org/python-swap-two-elements-in-list/\n    '''\n    temp = numbers[index1]\n    numbers[index1] = numbers[index2]\n    numbers[index2] = temp\n    \ndef reverse_array_elements(numbers, start, end):  \n    '''\n    Write a python function to reverse an array of elements. https://www",
        "num_ids": 17
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    import math\n    def get_first_and_last_bits(n):\n        bit_length = int(math.log2(n))+1\n        first_bit = n - ((2 ** bit_length) - 1)\n        last_bit = n - 2 ** (bit_length - 2)\n        return first_bit, last_bit\n",
        "num_ids": 83
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Python program to toggle bits of a given number \n    # Function to toggle bits of a given number \n    def toggleBits(n): \n    \n        # Count the number of bits in 'n' \n        count = 0\n        while (n): \n            count += n & 1\n            n >>= 1\n        # Toggle the bits one by one \n        i = 0\n        while (count): \n            i += 1\n            count -= 1\n            n |= (1 << i) # set i-th bit of n \n            n = n & ((1 << i) - 1) # clear all bits to the right of i-th bit in n \n            n = n & ~((1 << (i-1)) - 1) # clear all bits to the left of i-th bit in n \n        return n \n    # Driver code to test above function \n    n = 10\n    print (\"The binary representation of\", n, \"is\", toggleBits(n)) \n  ",
        "num_ids": 232
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n ^ (2 ** (len(bin(n)) - 3)))\n",
        "num_ids": 21
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n &= 0x55555555  # 0x55555555 = 1111111111111110\n    n |= (n >> 1)  # 0x55555555 = 1111111111111110\n    n |= (n << 1)  # 0x55555555 = 1111111111111111\n    n &= 0x33333333  # 0x33333333 = 1111111100000000\n    n |= (n >> 1)  # 0x33333333 = 1111111100000000\n    n |= (n << 1)  # 0x33333333 = 111111110000000\n    n &= 0x0f0f0f0f  # 0x0f0f0f0f = 00001111110000\n    n |= (n >> 4)  # 0x0f0f0f0f = 00001111111000\n    n |= (n << 4)  # 0x0f0f0f0f = 111111110000000\n    return n  \nprint(set_middle_bits(0x44444444))\nprint(set_middle_bits(0x07ff))\nprint(set_middle_bits(0x8888))\nprint(set_middle_bits(0xcccc))\nprint(set_middle_bits(0x55555555))\n",
        "num_ids": 302
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n & ~(0b111111 << 1) & ~(0b111111 << 10) & ~(0b1111111111 << 11) & ~(0b1111111111 << 12)) | ((n & ~(0b1111111111111111 << 0) & ~(0b1111111111111111 << 1)) << 1))\n",
        "num_ids": 79
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n>>1)\n    n = n ^ (n>>2)\n    n = n ^ (n>>4)\n    n = n ^ (n>>8)\n    n = n ^ (n>>16)\n    return n\n",
        "num_ids": 61
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = n\n    print(\"The number before swapping is {}\".format(n))\n    x |= (x >> 1) # Takes all of the bits in a number,\n    x &= 0x55555555 # Clears the lowest set bit,\n    x |= (x << 1) # And then sets the lowest set bit,\n    x &= 0x33333333 # Clears the next lowest set bit,\n    x |= (x >> 2) # and so on.\n    return x\n    \n    \ndef main():\n    print(\"The number after swapping is {}\".format(set_middle_bits(int(input(\"Enter a number: \"), 16))))\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 172
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(\"Initial number is\",bin(n))\n    n = n & 0xFFFE\n    print(\"After applying mask the number becomes\",bin(n))\n    return n\n",
        "num_ids": 43
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    for i in range(n):\n        if a[i] > x:\n            break\n    return i\n",
        "num_ids": 36
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)-1\n    while lo <= hi:\n        mid = lo + ((hi-lo)>>1)\n        if a[mid] > x:\n            hi = mid - 1\n        elif a[mid] < x:\n            lo = mid + 1\n        else:\n            if mid == 0 or x < a[mid-1]:\n                return mid\n            else:\n                hi = mid - 1\n    return hi + 1\n",
        "num_ids": 112
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x < a[0]:\n        return 0\n    elif x > a[-1]:\n        return len(a)\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    if a[i] == x:\n        return i\n    if a[i] < x < a[i+1]:\n        return i+1\n    else:\n        return i\n",
        "num_ids": 106
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return None\n",
        "num_ids": 44
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = -1\n    n = len(a)\n    for i in range(n):\n        if(a[i]>x):\n            left = i\n            break\n    return left\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    right = -1\n    n = len(a)\n    for i in range(n):\n        if(a[i]>x):\n            break\n        if(i==n-1):\n            right = n\n    return right\ndef left_binary_search(a, x):\n    '''\n    Write a function to locate the left binary search point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-25.php\n    '''\n    left = -1\n    n = len(a)\n    left_index = bisect.bisect_left(a, x)\n    for i in range(left_index, n):\n        if(a[i]<x):\n            left = i\n            break\n    return left\ndef right_binary_search(a, x):\n    '''\n    Write a function to locate the right binary search point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-25.php\n    '''\n    right = -1\n    n = len(a)\n    right_index = bisect.bisect_right(a, x)\n    for i in range(right_index, n):\n        if(a[i]>x):\n            right = i\n            break\n    return right\ndef left_rotate(a, d, n):\n    '''\n    Write a function to rotate the elements of an array to the left by a specified number of steps. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-26.php\n    '''\n    for i in range(d):\n        left_ele = a.pop(0)\n        a.append(left_ele)\n    return a\ndef right_rotate(a, d, n):\n    '''\n    Write a function to rotate the elements of an array to the right by a specified number of steps. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-26.php\n    '''\n    for i in range(d):\n        right_ele = a.pop()\n        a.insert(0, right_ele)\n    return a\ndef find_median_of_three(a, left, right):\n    '''\n    Write a function to find the median of three values from a specified array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-27.php\n    '''\n    mid = (left+right)//2\n    a.sort()\n    if(a[mid]==a[left] and a[mid]==a[right]):\n        return -1\n    elif(a[mid]>a[left] and a[mid]>a[right]):\n        return a[left]\n    elif(a[mid]<a[left] and a[mid]<a[right]):\n        return a[right]\n    else:\n        return a[mid]\ndef find_median_of_five(a, left, right):\n    '''\n    Write a function to find the median of five values from a specified array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-27.php\n    '''\n    mid = (left+right)//2\n    a.sort()\n    if(a[mid]==a[left] and a[mid]==a[right]):\n        return -1\n    elif(a[mid]>a[left] and a[mid]>a[right]):\n        return find_median_of_three(a, left, mid)\n    elif(a[mid]<a[left] and a[mid]<a[right]):\n        return find_median_of_three(a, mid, right)\n    else:\n        return a[mid]\ndef find_median_of_seven(a, left, right):\n    '''\n    Write a function to find the median of seven values from a specified array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-27.php\n    '''\n    mid = (left+right)//2\n    a.sort()\n    if(a[mid]==a[left] and a[mid]==a[right]):\n        return -1\n    elif(a[mid]>a[left] and a[mid]>a[right]):\n        return find_median_of_five(a, left, mid)\n    elif(a[mid]<a[left] and a[mid]<a[right]):\n        return find_median_of_five(a, mid, right)\n    else:\n        return a[mid]\ndef get_median_of_array(a, n):\n    '''\n    Write a function to find the median of a specified array of numbers. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    if(n%2==0):\n        return ((a[n//2]+a[n//2-1])/2)\n    else:\n        return (a[n//2])\ndef get_median_of_array_v2(a, n):\n    '''\n    Write a function to find the median of a specified array of numbers. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    if(n%2==0):\n        return (a[(n//2)-1]+(a[n//2]))/2\n    else:\n        return a[(n-1)//2]\ndef get_median_of_array_v3(a, n):\n    '''\n    Write a function to find the median of a specified array of numbers. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    left = 0\n    right = n-1\n    while(left<=right):\n        mid = (left+right)//2\n        #print(left, right, mid)\n        if((mid==0 or a[mid-1]<=a[mid]) and (mid==n-1 or a[mid]>=a[mid+1])):\n            return a[mid]\n        elif(a[mid]>a[mid+1]):\n            right = mid-1\n        else:\n            left = mid+1\n    return -1\ndef get_median_of_array_v4(a, n):\n    '''\n    Write a function to find the median of a specified array of numbers. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    if(n%2==0):\n        left = 0\n        right = n-1\n        while(left<=right):\n            mid = (left+right)//2\n            #print(left, right",
        "num_ids": 51
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a)-1\n    while low <= high:\n        mid = (low+high)//2\n        if x > a[mid]:\n            low = mid+1\n        else:\n            high = mid-1\n    return low\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a)-1\n    while low <= high:\n        mid = (low+high)//2\n        if x < a[mid]:\n            high = mid-1\n        else:\n            low = mid+1\n    return high\n    \ndef binary_search(a, x):\n    '''\n    Write a function that implements the binary search algorithm (recursive and iterative), given a sorted array of integers. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a)-1\n    return _binary_search(a, low, high, x)\n    \ndef _binary_search(a, low, high, x):\n    if low > high:\n        return -1\n    mid = (low+high)//2\n    if x < a[mid]:\n        high = mid-1\n        return _binary_search(a, low, high, x)\n    elif x > a[mid]:\n        low = mid+1\n        return _binary_search(a, low, high, x)\n    else:\n        return mid\n    \ndef is_binary_search_tree(a):\n    '''\n    Write a function that determines whether or not a given array represents a valid binary search tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #a.sort()\n    return _is_binary_search_tree(a, 0, len(a)-1)\n    \ndef _is_binary_search_tree(a, low, high):\n    if low >= high:\n        return True\n    mid = (low+high)//2\n    left = _is_binary_search_tree(a, low, mid)\n    right = _is_binary_search_tree(a, mid+1, high)\n    return left and right and _is_valid_bst(a, low, high, mid)\n    \ndef _is_valid_bst(a, low, high, x):\n    #if a[x] > a[high]:\n    #    return False\n    #if a[x] < a[low]:\n    #    return False\n    if x < low or x > high:\n        return False\n    if low == high:\n        return True\n    return _is_valid_bst(a, low, (low+high)//2, x) and _is_valid_bst(a, (low+high)//2+1, high, x)\n    \ndef is_bst(a):\n    '''\n    Write a function that determines whether or not a given array represents a valid binary search tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.sort()\n    return _is_bst(a, 0, len(a)-1)\n    \ndef _is_bst(a, low, high):\n    if low >= high:\n        return True\n    mid = (low+high)//2\n    return _is_bst(a, low, mid) and _is_bst(a, mid+1, high) and _is_valid_bst(a, low, high, mid)\n    \ndef _is_valid_bst(a, low, high, x):\n    if x < low or x > high:\n        return False\n    if low == high:\n        return True\n    return _is_valid_bst(a, low, (low+high)//2, x) and _is_valid_bst(a, (low+high)//2+1, high, x)\n    \ndef is_symmetric(a):\n    '''\n    Write a function that determines whether or not a given array represents a symmetric binary tree. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #a.sort()\n    return _is_symmetric(a, 0, len(a)-1)\n    \ndef _is_symmetric(a, low, high):\n    if low >= high:\n        return True\n    mid = (low+high)//2\n    return _is_symmetric(a, low, mid) and _is_symmetric(a, mid+1, high) and _is_symmetric_bst(a, low, high, mid)\n    \ndef _is_symmetric_bst(a, low, high, x):\n    if high < low:\n        return True\n    if x < low or x > high:\n        return False\n    return _is_symmetric_bst(a, low, (low+high)//2, x) and _is_symmetric_bst(a, (low+high)//2+1, high, x)\n    \ndef _is_symmetric_bst(a, low, high, x):\n    if high < low:\n        return True\n    if x < low or x > high:\n        return False\n    return a[x] == a[high] and _is_symmetric_bst(a, low, (low+high)//2, x) and _is_symmetric_bst(a, (low+high)//2+1, high, x)\n    \ndef has_duplicates(a):\n    '''\n    Write a function that determines whether or not a given array contains duplicates. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return _has_duplicates(a, 0, len(a)-1)\n    \ndef _has_duplicates(a, low, high):\n    if low >= high:\n        return False\n    return _has_duplicates(a, low, high-1) or _has_duplicates(a, low+1, high)\n    \ndef missing_number(a):\n    '''\n    Write a function that determines what the missing number is in a given array of integers. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return _missing_number(a, 0, len(a)-1)\n    \ndef _missing_number(a, low, high):\n    if low >= high:\n        return -1\n    mid = (low+high)//2\n    if a[mid] == mid+1:\n        return _missing_number(a, low, mid)\n    elif a[mid] > mid+1:\n        return _missing_number(a, low, mid)\n    else:\n        return _missing_number(a, mid+1, high)\n    \ndef is_unique(a):\n    '''\n    Write a function that determines whether or not a given array of integers contains any duplicates. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return _is_unique(a, 0, len(a)-1)\n    \ndef _is_unique(a, low, high):\n    if low >= high:\n        return True",
        "num_ids": 45
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    i = 0\n    while(i < n and a[i] < x):\n        i = i + 1\n    return i\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    i = n-1\n    while(i >= 0 and a[i] > x):\n        i = i - 1\n    return i + 1\ndef median(a):\n    '''\n    Find median of a given array\n    '''\n    n = len(a)\n    if n % 2!= 0:\n        return a[n//2]\n    else:\n        return ((a[n//2] + a[n//2 -1])/2)\n",
        "num_ids": 55
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if x > a[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n",
        "num_ids": 68
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x < a[0]:\n        return 0\n    elif x > a[-1]:\n        return len(a)\n    else:\n        return bisect.bisect_left(a,x)\n",
        "num_ids": 52
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    a.append(x)\n    i = n\n    while i > 0 and a[i - 1] > x:\n        a[i] = a[i - 1]\n        i -= 1\n    a[i] = x\n    return a\n",
        "num_ids": 69
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\n",
        "num_ids": 16
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.fullmatch(regex,string) is not None\n",
        "num_ids": 18
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        print(\"String is starting with a vowel.\") \n    else: \n        print(\"String is not starting with a vowel.\") ",
        "num_ids": 44
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex,string))\n",
        "num_ids": 16
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string): \n        return True \n    return False\n",
        "num_ids": 24
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        print(\"Valid String\")\n    else:\n        print(\"Invalid String\")\n",
        "num_ids": 32
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string)) \n",
        "num_ids": 17
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        return True\n    else: \n        return False\n",
        "num_ids": 28
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        print(\"Given string is starting with a vowel\") \n    else: \n        print(\"Given string is not starting with a vowel\") \ncheck_str('aeiouaeiou') \ncheck_str('aeiouAEIOU') \ncheck_str('aeiouAEIOU_') \ncheck_str('_aeiouAEIOU') ",
        "num_ids": 100
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matcher = re.findall(regex, string) \n    return matcher \n",
        "num_ids": 24
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return geometric_sum(n-1)*(1/n)\n",
        "num_ids": 29
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (1 - (1/3)) + geometric_sum(n-1) if n > 0 else 0\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n == 1:\n        return 1\n    return n*(1 - n**(1/2))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1980
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 1:\n        return 0\n    else:\n        return 2*geometric_sum(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 0:\n        print(\"Invalid input\")\n    elif n == 0:\n        return 1\n    else:\n        return 2*geometric_sum(n-1)\n",
        "num_ids": 46
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (1 + geometric_sum(n-1)) if n > 1 else 1\n",
        "num_ids": 24
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # write your function here\n    if n == 0:\n        return 1\n    else:\n        return 2 * geometric_sum(n-1)\n",
        "num_ids": 37
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    #The base case is n=1. The sum of the geometric sequence of 1 is 1.\n    if n == 1:\n        return 1\n    #Otherwise the sum is the previous term times the ratio of n to n-1.\n    else:\n        return n * (1/n) + geometric_sum(n-1)\n",
        "num_ids": 78
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while (int(math.pow(i, 2)) <= n): \n        i += 1\n    return i - 1\ndef get_TriangularNumber(i):\n    '''\n    Write a python function to get the i-th triangular number\n    '''\n    return int(math.pow(i, 2))\ndef get_PrimeFactors(n):\n    '''\n    Write a python function to find the prime factors of n, e.g. given the number 18, the function returns [2, 3, 3]\n    '''\n    n = int(n)\n    # Print the number of two's that divide n \n    while n % 2 == 0: \n        print(2)\n        n = n / 2\n    # n must be odd at this point \n    # so a skip of 2 ( i = i + 2) can be used \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        \n        # while i divides n, print i ad divide n \n        while n % i == 0: \n            print(i)\n            n = n / i\n    # Condition if n is a prime \n    # number greater than 2 \n    if n > 2: \n        print(n)\ndef get_PythagoreanTriplets(n):\n    '''\n    Write a python function that returns a list of Pythagorean triples that sum to n. https://www.geeksforgeeks.org/get-all-the-pythagorean-triplets-in-a-given-sum/\n    '''\n    triplets = []\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if (i+j+k == n) and (i*i + j*j == k*k):\n                    triplets.append([i,j,k])\n    return triplets\ndef get_MersennePrimes(n):\n    '''\n    Write a python function that returns a list of Mersenne numbers with n digits. https://www.geeksforgeeks.org/mersenne-prime-numbers/\n    '''\n    mersenne = []\n    for i in range(2,n+1):\n        m = 2 ** i - 1\n        mersenne.append(m)\n    return mersenne\ndef is_Prime(n):\n    '''\n    Write a python function that returns true if n is prime, and false otherwise. https://www.geeksforgeeks.org/python-program-to-check-whether-a-number-is-prime-or-not/\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef fibonacci(n):\n    '''\n    Write a python function that returns the nth fibonacci number. https://www.geeksforgeeks.org/calculate-nth-fibonacci-number-efficiently/\n    '''\n    return int(((1 + math.sqrt(5)) ** n - (1 - math.sqrt(5)) ** n) / (2 ** n * math.sqrt(5)))\ndef get_Smallest_Divisor(n):\n    '''\n    Write a python function that returns the smallest divisor of an integer. https://www.geeksforgeeks.org/find-smallest-divisor-for-a-given-number/\n    '''\n    smallestDivisor = -1\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            smallestDivisor = i\n            break\n        i = i + 1\n    return smallestDivisor\ndef get_Smallest_Divisor_BruteForce(n):\n    '''\n    Write a python function that returns the smallest divisor of an integer, using brute force. https://www.geeksforgeeks.org/find-smallest-divisor-for-a-given-number/\n    '''\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            return i\n        i = i + 1\ndef is_Perfect(n):\n    '''\n    Write a python function that returns true if n is perfect, and false otherwise. https://www.geeksforgeeks.org/check-if-an-integer-is-perfect-number/\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum = sum + i\n    if sum == n:\n        return True\n    return False\ndef is_Prime_Sieve(n):\n    '''\n    Write a python function that returns true if n is prime, and false otherwise. https://www.geeksforgeeks.org/python-program-to-check-whether-a-number-is-prime-or-not/\n    '''\n    if n<2:\n        return False\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p*p <= n):\n        if (prime[p] == True):\n            for i in range(p*p,n+1,p):\n                prime[i] = False\n        p = p+1\n    return prime[n]\ndef get_Smallest_Divisor_Sieve(n):\n    '''\n    Write a python function that returns the smallest divisor of an integer, using Sieve of Eratosthenes. https://www.geeksforgeeks.org/find-smallest-divisor-for-a-given-number/\n    '''\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            return i\n        i = i + 1\ndef get_Factors(n):\n    '''\n    Write a python function that returns the factors of an integer. https://www.geeksforgeeks.org/find-factors-of-a-number-without-using-sqrt-function/\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n/i)\n    return factors\ndef get_Factors_BruteForce(n):\n    '''\n    Write a python function that returns the factors of an integer, using brute force. https://www.geeksforgeeks.org/find-factors-of-a-number-without-using-sqrt-function/\n    '''\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\ndef is_Power(n):\n    '''\n    Write a python function that returns true if n is a power of 2, and false otherwise. https://www.geeksforgeeks.org/is-number-power-2/\n    '''\n    if n == 0:\n        return False\n    while (n % 2 == 0):\n        n = n / 2\n    if n == 1:\n        return True\n    return False\ndef get_Power(n):\n    '''\n    Write a python function that returns true if n is a power of 2, and false otherwise. https://www.geeksforgeeks.org/is-number-power-2/\n    '''\n    if n == 0:\n        return False\n    while (n % 2 == 0):\n        n = n / 2\n    if n == 1:\n        return True\n    return False\ndef get_Fibonacci_Sequence(n):\n    '''\n    Write a python function that returns the first n terms in the fibonacci sequence. https://www.geeksforgeeks.org/get-n-th-fibonacci-number/\n    '''\n    a = 0\n    b = 1\n    if n < 1:\n        return -1\n    if n == 1:\n        print(a)\n        return a\n    if n == 2:\n        print(a,b)\n        return b\n    print(a,b, end = \" \"",
        "num_ids": 71
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    k = 0\n    while True: \n        if len(str(int(math.factorial(k))+1))==n: \n            return k \n        else: \n            k+=1\ndef is_Triangular(n): \n    '''\n    Write a python function to check whether an integer is a triangular number or not.\n    '''\n    k=1\n    while True: \n        if len(str(int(math.factorial(k))+1))==n: \n            return True\n        else: \n            k+=1\ndef Triangular_Index(n): \n    '''\n    Write a python function to print the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    k = find_Index(n)\n    return k \ndef Triangular(n): \n    '''\n    Write a python function to find the nth triangular number.\n    '''\n    k = Triangular_Index(n)\n    return int(math.factorial(k)+1)\ndef Pentagonal(n): \n    '''\n    Write a python function to find the nth pentagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*3+1))/math.factorial(k*2+1))\ndef Hexagonal(n): \n    '''\n    Write a python function to find the nth hexagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*2+1)*2))\ndef Heptagonal(n): \n    '''\n    Write a python function to find the nth heptagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*3+1)*3))\ndef Octagonal(n): \n    '''\n    Write a python function to find the nth octagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*4+1)*4))\ndef Sextagonal(n): \n    '''\n    Write a python function to find the nth sextagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*5+1)*5))\ndef Septagonal(n): \n    '''\n    Write a python function to find the nth septagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*6+1)*6))\ndef Octagonal(n): \n    '''\n    Write a python function to find the nth octagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*7+1)*7))\ndef Septagonal(n): \n    '''\n    Write a python function to find the nth septagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Octagonal(n): \n    '''\n    Write a python function to find the nth octagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Septagonal(n): \n    '''\n    Write a python function to find the nth septagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Octagonal(n): \n    '''\n    Write a python function to find the nth octagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Septagonal(n): \n    '''\n    Write a python function to find the nth septagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Octagonal(n): \n    '''\n    Write a python function to find the nth octagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Septagonal(n): \n    '''\n    Write a python function to find the nth septagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Octagonal(n): \n    '''\n    Write a python function to find the nth octagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Septagonal(n): \n    '''\n    Write a python function to find the nth septagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Octagonal(n): \n    '''\n    Write a python function to find the nth octagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Septagonal(n): \n    '''\n    Write a python function to find the nth septagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Octagonal(n): \n    '''\n    Write a python function to find the nth octagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Septagonal(n): \n    '''\n    Write a python function to find the nth septagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Octagonal(n): \n    '''\n    Write a python function to find the nth octagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Septagonal(n): \n    '''\n    Write a python function to find the nth septagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Octagonal(n): \n    '''\n    Write a python function to find the nth octagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Septagonal(n): \n    '''\n    Write a python function to find the nth septagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Octagonal(n): \n    '''\n    Write a python function to find the nth octagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Septagonal(n): \n    '''\n    Write a python function to find the nth septagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Octagonal(n): \n    '''\n    Write a python function to find the nth octagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Septagonal(n): \n    '''\n    Write a python function to find the nth septagonal number.\n    '''\n    k = find_Index(n)\n    return int((math.factorial(k*8+1)*8))\ndef Octagonal(n): \n    '''\n    Write a python function to find the nth octagonal number.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    k = 0\n    while (int(math.pow(10, k)) <= int(n)): \n        k += 1\n    k = k - 1\n    return int(math.pow(10, k)) \n",
        "num_ids": 56
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while (True): \n        i += 1\n        n -= 1\n        if (n == 0): \n            break\n    return i \ndef find_Next(n): \n    '''\n    Write a python function to find the next triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while (True): \n        i += 1\n        n -= 1\n        if (n == 0): \n            break\n    return i \ndef find_Next(n): \n    '''\n    Write a python function to find the next triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while (True): \n        i += 1\n        n -= 1\n        if (n == 0): \n            break\n    return i \ndef find_Prev(n): \n    '''\n    Write a python function to find the previous triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while (True): \n        i -= 1\n        n -= 1\n        if (n == 0): \n            break\n    return i \ndef find_Prev(n): \n    '''\n    Write a python function to find the previous triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while (True): \n        i -= 1\n        n -= 1\n        if (n == 0): \n            break\n    return i \ndef find_Num(n): \n    '''\n    Write a python function to find the nth triangular number. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while (True): \n        i += 1\n        n -= 1\n        if (n == 0): \n            break\n    return i \ndef find_Num(n): \n    '''\n    Write a python function to find the nth triangular number. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while (True): \n        i += 1\n        n -= 1\n        if (n == 0): \n            break\n    return i \ndef find_Num(n): \n    '''\n    Write a python function to find the nth triangular number. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while (True): \n        i += 1\n        n -= 1\n        if (n == 0): \n            break\n    return i \ndef is_Power_of_Two(n): \n    '''\n    Write a Python program to check whether a number is a power of two or not. https://www.geeksforgeeks.org/python-check-if-number-is-power-of-two/\n    '''\n    if (n & n-1)==0: \n        return True\n    return False \ndef is_Power_of_Two(n): \n    '''\n    Write a Python program to check whether a number is a power of two or not. https://www.geeksforgeeks.org/python-check-if-number-is-power-of-two/\n    '''\n    if n == 0: \n        return False \n    while (n % 2 == 0): \n        n = n / 2\n    if n == 1: \n        return True\n    return False \ndef is_Power_of_Two(n): \n    '''\n    Write a Python program to check whether a number is a power of two or not. https://www.geeksforgeeks.org/python-check-if-number-is-power-of-two/\n    '''\n    return (n and (not(n & (n - 1)))) \ndef is_Power_of_Two(n): \n    '''\n    Write a Python program to check whether a number is a power of two or not. https://www.geeksforgeeks.org/python-check-if-number-is-power-of-two/\n    '''\n    if n == 0: \n        return False \n    while (n % 2 == 0): \n        n = n / 2\n    if n == 1: \n        return True\n    return False \ndef is_Power_of_Two(n): \n    '''\n    Write a Python program to check whether a number is a power of two or not. https://www.geeksforgeeks.org/python-check-if-number-is-power-of-two/\n    '''\n    return (n > 0) and (n & (n - 1)) == 0 \ndef is_Power_of_Two(n): \n    '''\n    Write a Python program to check whether a number is a power of two or not. https://www.geeksforgeeks.org/python-check-if-number-is-power-of-two/\n    '''\n    return (n > 0) and (math.log(n, 2) % 1.0 == 0.0) \ndef is_Power_of_Two(n): \n    '''\n    Write a Python program to check whether a number is a power of two or not. https://www.geeksforgeeks.org/python-check-if-number-is-power-of-two/\n    '''\n    return n > 0 and (n & (n - 1)) == 0 \ndef is_Power_of_Two(n): \n    '''\n    Write a Python program to check whether a number is a power of two or not. https://www.geeksforgeeks.org/python-check-if-number-is-power-of-two/\n    '''\n    return n > 0 and math.log(n, 2).is_integer() \ndef is_Power_of_Two(n): \n    '''\n    Write a Python program to check whether a number is a power of two or not. https://www.geeksforgeeks.org/python-check-if-number-is-power-of-two/\n    '''\n    return n > 0 and (n & (n - 1)) == 0 \ndef is_Power_of_Two(n): \n    '''\n    Write a Python program to check whether a number is a power of two or not. https://www.geeksforgeeks.org/python-check-if-number-is-power-of-two/\n    '''\n    return n > 0 and (math.log(n, 2) % 1.0).is_integer() \ndef is_Power_of_Two(n): \n    '''\n    Write a Python program to check whether a number is a power of two or not. https://www.geeksforgeeks.org/python-check-if-number-is-power-of-two/\n    '''\n    return n > 0 and (n & (n - 1)) == 0 \ndef is_Power_of_Two(n): \n    '''\n    Write a Python program to check whether a number is a power of two or not. https://www.geeksforgeeks.org/python-check-if-number-is-power-of-two/\n    '''\n    return n > 0 and math.log(n, 2).is_integer() \ndef is_Power_of_Two(n): \n    '''\n    Write a Python program to check whether a number is a power of two or not. https://www.geeksforgeeks.org/python-check-if-number-is-power-of-two/\n    '''\n    return n > 0 and (n & (n - 1)) == 0 \ndef is_Power_of_Two(n): \n    '''\n    Write a Python program to check whether a number is a power of two or not. https://www",
        "num_ids": 23
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while(True): \n        num = (i * (i + 1)) / 2\n        if len(str(num)) == n: \n            return int(num)\n        i += 1\n",
        "num_ids": 53
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #variable to store the number \n    num = 0; \n    k = 1; \n    #count the total number of digits \n    while((10**k) - 1 < n): \n        num = num + k; \n        k += 1; \n    #loop to get the first number with n digits \n    while(10**(k-1) <= n): \n        num = num + 1; \n        k -= 1; \n    return(num); \ndef make_Triangular_No(n): \n    '''\n    Write a python function to create n digit triangular number. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #variable to store the number \n    num = 0; \n    k = 1; \n    #count the total number of digits \n    while((10**k) - 1 < n): \n        num = num + k; \n        k += 1; \n    #loop to get the first number with n digits \n    while(10**(k-1) <= n): \n        num = num + 1; \n        k -= 1; \n    return(num); \ndef sum_Digits(n): \n    '''\n    Write a python function to sum of the digits of n. https://www.geeksforgeeks.org/sum-of-digits-of-n/\n    '''\n    #if n is negative \n    if(n<0): \n        #convert to positive number \n        n = -n; \n    #variable to store the sum \n    sum = 0; \n    #loop to sum all the digits \n    while(n>0): \n        sum += n%10; \n        n //= 10; \n    return(sum); \ndef is_Triangular_Number(n): \n    '''\n    Write a python function to check whether the given number is a triangular number.\n    '''\n    #variable to store the number \n    num = 0; \n    k = 1; \n    #count the total number of digits \n    while((10**k) - 1 < n): \n        num = num + k; \n        k += 1; \n    #loop to get the first number with n digits \n    while(10**(k-1) <= n): \n        num = num + 1; \n        k -= 1; \n    #if num is the given number \n    if(num==n): \n        return(True); \n    #if num is not the given number \n    else: \n        return(False); \ndef find_Minimum_Divisor_for_N_Digits_Triangular_No(n): \n    '''\n    Write a python function to find the minimum divisor of a N digit triangular number.\n    '''\n    #variable to store the number \n    num = 0; \n    k = 1; \n    #count the total number of digits \n    while((10**k) - 1 < n): \n        num = num + k; \n        k += 1; \n    #loop to get the first number with n digits \n    while(10**(k-1) <= n): \n        num = num + 1; \n        k -= 1; \n    #variable to store the minimum divisor \n    min_div = 1; \n    #loop to find the minimum divisor \n    for i in range(1,int(math.sqrt(num))+1): \n        if(num%i==0): \n            min_div = i; \n            if(i!=1): \n                min_div = min_div*(num/i); \n    return(min_div); \ndef print_Divisors(n): \n    '''\n    Write a python function to print the divisors of the given number.\n    '''\n    #variable to store the number \n    num = 0; \n    k = 1; \n    #count the total number of digits \n    while((10**k) - 1 < n): \n        num = num + k; \n        k += 1; \n    #loop to get the first number with n digits \n    while(10**(k-1) <= n): \n        num = num + 1; \n        k -= 1; \n    #variable to store the divisors \n    divisors = []; \n    #loop to find the divisors \n    for i in range(1,num+1): \n        if(num%i==0): \n            divisors.append(i); \n    #print the divisors \n    for i in range(len(divisors)): \n        print(divisors[i],end=\" \"); \ndef smallest_Divisor_Given_Index(n): \n    '''\n    Write a python function to find the smallest divisor of a N digit triangular number given the index.\n    '''\n    #variable to store the number \n    num = 0; \n    k = 1; \n    #count the total number of digits \n    while((10**k) - 1 < n): \n        num = num + k; \n        k += 1; \n    #loop to get the first number with n digits \n    while(10**(k-1) <= n): \n        num = num + 1; \n        k -= 1; \n    #variable to store the minimum divisor \n    min_div = 1; \n    #loop to find the minimum divisor \n    for i in range(1,int(math.sqrt(num))+1): \n        if(num%i==0): \n            if(i!=1): \n                min_div = min_div*(num/i); \n            else: \n                min_div = i; \n    return(min_div); \ndef smallest_Divisor_Given_Triangular_No(n): \n    '''\n    Write a python function to find the smallest divisor of a N digit triangular number given the number.\n    '''\n    #variable to store the number \n    num = 0; \n    k = 1; \n    #count the total number of digits \n    while((10**k) - 1 < n): \n        num = num + k; \n        k += 1; \n    #loop to get the first number with n digits \n    while(10**(k-1) <= n): \n        num = num + 1; \n        k -= 1; \n    #variable to store the minimum divisor \n    min_div = 1; \n    #loop to find the minimum divisor \n    for i in range(1,int(math.sqrt(num))+1): \n        if(num%i==0): \n            if(i!=1): \n                min_div = min_div*(num/i); \n            else: \n                min_div = i; \n    return(min_div); \ndef Find_Divisor_Of_Triangular_No(n,m): \n    '''\n    Write a python function to find the mth smallest divisor of a N digit triangular number given the number.\n    '''\n    #variable to store the number \n    num = 0; \n    k = 1; \n    #count the total number of digits \n    while((10**k) - 1 < n): \n        num = num + k; \n        k += 1; \n    #loop to get the first number with n digits \n    while(10**(k-1) <= n): \n        num = num + 1; \n        k -= 1; \n    #variable to store the minimum divisor \n    min_div = 1; \n    #loop to find the minimum divisor \n    for i in range(1,int(math.sqrt(num))+1): \n        if(num%i==0): \n            if(i!=1): \n                min_div = min_div*(num/i); \n            else: \n                min_div = i; \n            if(min_div>=m): \n                return(i); \n    return(None);",
        "num_ids": 239
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    m = int(n)\n    r = n - 1\n    t = int(1)\n    if n == 1:\n        return 1\n    for i in range(n):\n        t = t + r\n        r = r - 1\n    return t\n",
        "num_ids": 63
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 1\n    min_ = 100\n    ans = 0\n    n_ = 0\n    for i in range(1, n + 1): \n        n_ = int(math.pow(i, 2))\n        if n_ < min_: \n            min_ = n_\n            ans = i \n    return ans\n",
        "num_ids": 88
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a=1\n    j=1\n    for i in range(1,n):\n        a=a+j\n        j+=1\n    print(a)\nfind_Index(10)\n",
        "num_ids": 48
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = n\n    start = 10 ** (n - 1)\n    end = 10 ** n\n    return n * (start + end) // 2\n    #return int(n * math.sqrt(n * (n + 1) / 2))\n",
        "num_ids": 60
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Method 1: Using loop\n    dict = {}\n    for i in range(0, len(test_tup)):\n        dict[i] = test_tup[i]\n    return dict\n",
        "num_ids": 50
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print(\"Input: \", test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0,len(test_tup),2)}\n",
        "num_ids": 38
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))\n",
        "num_ids": 28
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print(\"Given tuple is: \"+str(test_tup))\n    return dict(zip(test_tup,test_tup[1:]))\n",
        "num_ids": 38
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Take a tuple from user\n    # input_tup = (1,2,3,4,5,6)\n    input_tup = test_tup\n",
        "num_ids": 42
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
        "num_ids": 27
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_value_dict = {}\n    for i in range(len(test_tup)):\n        key_value_dict[test_tup[i]] = test_tup[i-1]\n",
        "num_ids": 51
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup)):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n",
        "num_ids": 55
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s :\n        if i == \" \" :\n            continue\n        if i!= s[0] :\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return True if len(set(s)) == 1 else False\n",
        "num_ids": 17
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #Code here\n    l = []\n    for x in s :\n        if x not in l :\n            l.append(x)\n    return l\n",
        "num_ids": 39
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    a = list(s)\n    if len(a) == 0 :\n        return False\n    else :\n        for i in a :\n            if a.count(i) == len(a) :\n                return True\n            else :\n                return False\n",
        "num_ids": 62
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = list(s)\n    if len(l) == 0 :\n        return True\n    return l.count(l[0]) == len(l)\n",
        "num_ids": 40
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return (set(s) == set('A'))\n",
        "num_ids": 16
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    chars = set(s)\n    if len(chars) <= 1 :\n        return True\n    else :\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s.isalpha() :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    return len(set(s)) == 1\n",
        "num_ids": 15
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4 * (math.sqrt(2) / 4) * (side ** 3)\n",
        "num_ids": 24
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*(side**2))/4\n",
        "num_ids": 15
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**3)*(math.sqrt(6)/12)\n",
        "num_ids": 20
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3/12\ndef area_cube(side):\n    '''\n    Write a function to calculate the surface area of a cube\n    '''\n    return 6*(side**2)\ndef area_parallelogram(base, height):\n    '''\n    Write a function to calculate the area of a parallelogram\n    '''\n    return base*height\ndef area_trapezoid(base1, base2, height):\n    '''\n    Write a function to calculate the area of a trapezoid\n    '''\n    return 1/2*(base1+base2)*height\ndef area_rhombus(diagonal_1, diagonal_2):\n    '''\n    Write a function to calculate the area of a rhombus\n    '''\n    return 1/2*diagonal_1*diagonal_2\ndef area_kite(side1, side2):\n    '''\n    Write a function to calculate the area of a kite\n    '''\n    return 1/2*side1*side2\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle\n    '''\n    return math.pi*(radius**2)\ndef area_regular_polygon(sides,length):\n    '''\n    Write a function to calculate the area of a regular polygon\n    '''\n    return (1/2*sides*length**2)/math.tan(math.pi/sides)\ndef area_square_pyramid(length,height):\n    '''\n    Write a function to calculate the area of a square pyramid\n    '''\n    return length*height\ndef area_regular_n_gon(number_of_sides,length):\n    '''\n    Write a function to calculate the area of a regular n-gon\n    '''\n    return (1/2)*number_of_sides*length**2/math.tan(math.pi/number_of_sides)\ndef area_triangular_prism(base,height):\n    '''\n    Write a function to calculate the area of a triangular prism\n    '''\n    return base*height\ndef area_hexagonal_prism(side1,side2):\n    '''\n    Write a function to calculate the area of a hexagonal prism\n    '''\n    return 1/2*side1*side2\ndef area_dodecagonal_prism(side1, side2, side3):\n    '''\n    Write a function to calculate the area of a dodecagonal prism\n    '''\n    return 1/2*(side1+side2)*side3\ndef area_pentagonal_prism(side1, side2):\n    '''\n    Write a function to calculate the area of a pentagonal prism\n    '''\n    return 1/2*side1*side2\ndef area_octagonal_prism(side1, side2):\n    '''\n    Write a function to calculate the area of a octagonal prism\n    '''\n    return 1/2*side1*side2\ndef area_heptagonal_prism(side1, side2):\n    '''\n    Write a function to calculate the area of a heptagonal prism\n    '''\n    return 1/2*side1*side2\ndef area_decagonal_prism(side1, side2):\n    '''\n    Write a function to calculate the area of a decagonal prism\n    '''\n    return 1/2*side1*side2\ndef area_icosagonal_prism(side1):\n    '''\n    Write a function to calculate the area of a icosagonal prism\n    '''\n    return 1/2*side1**2\ndef area_cuboctahedron(side):\n    '''\n    Write a function to calculate the area of a cuboctahedron\n    '''\n    return side**3*6\ndef volume_cuboctahedron(side):\n    '''\n    Write a function to calculate the volume of a cuboctahedron\n    '''\n    return side**3\ndef volume_prism(base,height):\n    '''\n    Write a function to calculate the volume of a prism\n    '''\n    return base*height\ndef volume_cylinder(radius,height):\n    '''\n    Write a function to calculate the volume of a cylinder\n    '''\n    return math.pi*(radius**2)*height\ndef volume_cone(radius,height):\n    '''\n    Write a function to calculate the volume of a cone\n    '''\n    return 1/3*math.pi*(radius**2)*height\ndef volume_cone_capped(radius,height,cap_height):\n    '''\n    Write a function to calculate the volume of a cone with a capped end\n    '''\n    return 1/3*math.pi*(radius**2)*(height+cap_height)\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere\n    '''\n    return 4/3*math.pi*(radius**3)\ndef volume_hemisphere(radius):\n    '''\n    Write a function to calculate the volume of a hemisphere\n    '''\n    return 1/3*math.pi*(radius**3)\ndef volume_ellipsoid(radius_x,radius_y,radius_z):\n    '''\n    Write a function to calculate the volume of an ellipsoid\n    '''\n    return 4/3*math.pi*(radius_x*radius_y*radius_z)\ndef volume_parallelepiped(length,breadth,height):\n    '''\n    Write a function to calculate the volume of a parallelepiped\n    '''\n    return length*breadth*height\ndef volume_pyramid(base,height):\n    '''\n    Write a function to calculate the volume of a pyramid\n    '''\n    return 1/3*base*height\ndef volume_prism_and_hexagonal_pyramid(side1,side2,height):\n    '''\n    Write a function to calculate the volume of a prism and a hexagonal pyramid\n    '''\n    return 1/3*side1*side2*height\ndef volume_prism_and_rectangular_pyramid(side1,side2,height):\n    '''\n    Write a function to calculate the volume of a prism and a rectangular pyramid\n    '''\n    return 1/3*side1*side2*height\ndef volume_rectangular_prism_and_triangular_pyramid(side1,side2,side3):\n    '''\n    Write a function to calculate the volume of a rectangular prism and a triangular pyramid\n    '''\n    return 1/3*side1*side2*side3\ndef volume_triangular_prism_and_rectangular_pyramid(side1,side2,side3):\n    '''\n    Write a function to calculate the volume of a triangular prism and a rectangular pyramid\n    '''\n    return 1/3*side1*side2*side3\ndef volume_rectangular_prism_and_rhombus_pyramid(side1,side2,height):\n    '''\n    Write a function to calculate the volume of a rectangular prism and a rhombus pyramid\n    '''\n    return 1/3*side1*side2*height\ndef volume_triangular_prism_and_rhombus_pyramid(side1,side2,height):\n    '''\n    Write a function to calculate the volume of a triangular prism and a rhombus pyramid\n    '''\n    return 1/3*side1*side2*height\ndef volume_rhombus_and_rectangular_prism_pyramid(side1,side2,height):\n    '''\n    Write a function to calculate the volume of a rhombus pyramid and a rectangular pyramid\n    '''\n    return 1/3*side1*side2*height\ndef volume_rhombus_and_triangular_prism_pyramid(side1,side2,height):\n    '''\n    Write a function to calculate the volume of a rhombus pyramid and a triangular pyramid\n    '''\n    return 1/3*side1*side2*height\ndef volume_rectangular_prism_and_rectangular_pyramid(side1,side2,height):\n    '''\n    Write a function to calculate the volume of a rectangular prism and a rectangular pyramid\n    '''\n    return 1/3*side1*side2*height\ndef volume_rectangular_prism_and_triangular_pyramid(side1,side2,height)",
        "num_ids": 41
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3/12\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side**3\ndef area_cuboid(length,breadth,height):\n    '''\n    Write a function to caluclate the area of a cuboid.\n    '''\n    return length*breadth*height\ndef volume_cuboid(length,breadth,height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    return length*breadth*height\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return 6*(side**2)\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side**3\ndef area_parallelogram(base,height):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    return base*height\ndef volume_parallelogram(base,height):\n    '''\n    Write a function to caluclate the volume of a parallelogram.\n    '''\n    return base*height\ndef area_rectangle(length,width):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return length*width\ndef volume_rectangle(length,width):\n    '''\n    Write a function to caluclate the volume of a rectangle.\n    '''\n    return length*width\ndef area_trapezium(base1,base2,height):\n    '''\n    Write a function to caluclate the area of a trapezium.\n    '''\n    return 1/2*(base1+base2)*height\ndef volume_trapezium(base1,base2,height):\n    '''\n    Write a function to caluclate the volume of a trapezium.\n    '''\n    return 1/3*(base1+base2)*height\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    return 3.14*(radius**2)\ndef volume_circle(radius):\n    '''\n    Write a function to caluclate the volume of a circle.\n    '''\n    return 3.14*(radius**3)\ndef area_sphere(radius):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    return 4*3.14*(radius**2)\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return 4/3*3.14*(radius**3)\ndef area_cylinder(radius,height):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    return 3.14*(radius**2)*height\ndef volume_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return 3.14*(radius**2)*height\ndef area_cone(radius,height):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return 3.14*(radius**2)*(height/3)\ndef volume_cone(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return 1/3*3.14*(radius**2)*(height/3)\ndef area_prism(base,height):\n    '''\n    Write a function to caluclate the area of a prism.\n    '''\n    return base*height\ndef volume_prism(base,height):\n    '''\n    Write a function to caluclate the volume of a prism.\n    '''\n    return base*height\ndef area_pyramid(base,height):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    return base*(base+height)\ndef volume_pyramid(base,height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return 1/3*base*(base+height)\ndef area_square_pyramid(base,height):\n    '''\n    Write a function to caluclate the area of a square pyramid.\n    '''\n    return base*(base+height)\ndef volume_square_pyramid(base,height):\n    '''\n    Write a function to caluclate the volume of a square pyramid.\n    '''\n    return 1/3*base*(base+height)\ndef area_triangle(base,height):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return base*height/2\ndef volume_triangle(base,height):\n    '''\n    Write a function to caluclate the volume of a triangle.\n    '''\n    return 1/2*base*height\ndef area_trapezium_prism(base1,base2,height):\n    '''\n    Write a function to caluclate the area of a trapezium prism.\n    '''\n    return 1/2*(base1+base2)*height\ndef volume_trapezium_prism(base1,base2,height):\n    '''\n    Write a function to caluclate the volume of a trapezium prism.\n    '''\n    return 1/3*(base1+base2)*height\ndef area_rectangle_prism(length,width,height):\n    '''\n    Write a function to caluclate the area of a rectangle prism.\n    '''\n    return 1/2*(length+width)*height\ndef volume_rectangle_prism(length,width,height):\n    '''\n    Write a function to caluclate the volume of a rectangle prism.\n    '''\n    return 1/3*(length+width)*height\ndef area_square_prism(side,height):\n    '''\n    Write a function to caluclate the area of a square prism.\n    '''\n    return side*side*height\ndef volume_square_prism(side,height):\n    '''\n    Write a function to caluclate the volume of a square prism.\n    '''\n    return side*side*height\ndef area_parallelogram_prism(length,width,height):\n    '''\n    Write a function to caluclate the area of a parallelogram prism.\n    '''\n    return length*width*height\ndef volume_parallelogram_prism(length,width,height):\n    '''\n    Write a function to caluclate the volume of a parallelogram prism.\n    '''\n    return length*width*height\ndef area_hexagon(radius):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    return 3*math.sqrt(3)*radius**2\ndef volume_hexagon(radius):\n    '''\n    Write a function to caluclate the volume of a hexagon.\n    '''\n    return (3**(1/2)/2)*3.14*(radius**2)\ndef area_heptagon(radius):\n    '''\n    Write a function to caluclate the area of a heptagon.\n    '''\n    return 5*math.sqrt(5)*radius**2\ndef volume_heptagon(radius):\n    '''\n    Write a function to caluclate the volume of a heptagon.\n    '''\n    return (5**(1/2)/2)*3.14*(radius**2)\ndef area_octagon(radius):\n    '''\n    Write a function to caluclate the area of a octagon.\n    '''\n    return 8*math.sqrt(2)*radius**2\ndef volume_octagon(radius):\n    '''\n    Write a function to caluclate the volume of a octagon.\n    '''\n    return (8**(1/2))*3.14*(radius**2)\ndef area_nonagon(radius):\n    '''\n    Write a function to caluclate the area of a nonagon.\n    '''\n    return (10*mat",
        "num_ids": 8
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side * side) * math.sqrt(2) / 4\n",
        "num_ids": 20
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4*(side**2)/(math.sqrt(3))\n",
        "num_ids": 20
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3 * math.sqrt(3) / 4\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side**3 / math.sqrt(3)\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side**3\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side**3\ndef area_rectangle(length, width):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return length*width\ndef volume_rectangle(length, width):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    return length*width\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return side**2\ndef volume_square(side):\n    '''\n    Write a function to caluclate the volume of a square.\n    '''\n    return side**2\ndef area_parallelogram(length, width):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return length*width\ndef volume_parallelogram(length, width):\n    '''\n    Write a function to calculate the volume of a parallelogram.\n    '''\n    return length*width\ndef area_trapezium(length, width, height):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return (length + width)*height/2\ndef volume_trapezium(length, width, height):\n    '''\n    Write a function to calculate the volume of a trapezium.\n    '''\n    return length*width*height/2\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi*radius**2\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    return math.pi*radius**3/3\ndef area_ellipse(radius_a, radius_b):\n    '''\n    Write a function to calculate the area of an ellipse.\n    '''\n    return math.pi*radius_a*radius_b\ndef volume_ellipse(radius_a, radius_b):\n    '''\n    Write a function to calculate the volume of an ellipse.\n    '''\n    return math.pi*radius_a*radius_b**2/3\ndef area_rhombus(dia_diag, dia_opposite):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    return dia_diag*dia_opposite/2\ndef volume_rhombus(dia_diag, dia_opposite):\n    '''\n    Write a function to calculate the volume of a rhombus.\n    '''\n    return dia_diag*dia_opposite/2\ndef area_kite(dia_diag, dia_opposite):\n    '''\n    Write a function to calculate the area of a kite.\n    '''\n    return dia_diag*dia_opposite\ndef volume_kite(dia_diag, dia_opposite):\n    '''\n    Write a function to calculate the volume of a kite.\n    '''\n    return dia_diag*dia_opposite\ndef area_pentagon(dia_side):\n    '''\n    Write a function to calculate the area of a pentagon.\n    '''\n    return (dia_side**2*math.sqrt(5)/4)*2\ndef volume_pentagon(dia_side):\n    '''\n    Write a function to calculate the volume of a pentagon.\n    '''\n    return (dia_side**2*math.sqrt(5)/4)\ndef area_hexagon(dia_side):\n    '''\n    Write a function to calculate the area of a hexagon.\n    '''\n    return dia_side**2*math.sqrt(3)\ndef volume_hexagon(dia_side):\n    '''\n    Write a function to calculate the volume of a hexagon.\n    '''\n    return (dia_side**2*math.sqrt(3))/2\ndef area_heptagon(dia_side):\n    '''\n    Write a function to calculate the area of a heptagon.\n    '''\n    return (dia_side**2/2*math.sqrt(5))*2\ndef volume_heptagon(dia_side):\n    '''\n    Write a function to calculate the volume of a heptagon.\n    '''\n    return (dia_side**2/2*math.sqrt(5))\ndef area_octagon(dia_side):\n    '''\n    Write a function to calculate the area of an octagon.\n    '''\n    return (dia_side**2*math.sqrt(8)/4)*2\ndef volume_octagon(dia_side):\n    '''\n    Write a function to calculate the volume of an octagon.\n    '''\n    return (dia_side**2*math.sqrt(8)/4)\ndef area_nonagon(dia_side):\n    '''\n    Write a function to calculate the area of a nonagon.\n    '''\n    return (dia_side**2/2)*math.sqrt(2*(math.sqrt(5)-1)/3)\ndef volume_nonagon(dia_side):\n    '''\n    Write a function to calculate the volume of a nonagon.\n    '''\n    return (dia_side**2/2)*math.sqrt(2*(math.sqrt(5)-1)/3)\ndef area_decagon(dia_side):\n    '''\n    Write a function to calculate the area of a decagon.\n    '''\n    return (dia_side**2*math.sqrt(10))*2\ndef volume_decagon(dia_side):\n    '''\n    Write a function to calculate the volume of a decagon.\n    '''\n    return (dia_side**2*math.sqrt(10))\ndef area_dodecagon(dia_side):\n    '''\n    Write a function to calculate the area of a dodecagon.\n    '''\n    return (dia_side**2*math.sqrt(12)/3)*2\ndef volume_dodecagon(dia_side):\n    '''\n    Write a function to calculate the volume of a dodecagon.\n    '''\n    return (dia_side**2*math.sqrt(12)/3)\ndef area_tridecagon(dia_side):\n    '''\n    Write a function to calculate the area of a tridecagon.\n    '''\n    return (dia_side**2*math.sqrt(14)/4)*2\ndef volume_tridecagon(dia_side):\n    '''\n    Write a function to calculate the volume of a tridecagon.\n    '''\n    return (dia_side**2*math.sqrt(14)/4)\ndef area_tetradecagon(dia_side):\n    '''\n    Write a function to calculate the area of a tetradecagon.\n    '''\n    return (dia_side**2*math.sqrt(15)/4)*2\ndef volume_tetradecagon(dia_side):\n    '''\n    Write a function to calculate the volume of a tetradecagon.\n    '''\n    return (dia_side**2*math.sqrt(15)/4)\ndef area_pentadecagon(dia_side):\n    '''\n    Write a function to calculate the area of a pentadecagon.\n    '''\n    return (dia_side**2*math.sqrt(16)/5)*2\ndef volume_pentadecagon(dia_side):\n    '''\n    Write a function to calculate the volume of a pentadecagon",
        "num_ids": 16
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((math.sqrt(3)*side**2)/4)\n",
        "num_ids": 19
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(3)*side**2)/4\n",
        "num_ids": 18
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    count = 0\n    for x in range(0,m):\n        temp = list[x]\n        list[x] = list[count]\n        list[count] = temp\n        count = count + 1\n",
        "num_ids": 52
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list = list[-m:] + list[:-m]\n    return list\n",
        "num_ids": 21
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # list = [1, 2, 3, 4, 5]\n    # m = 2\n    # n = len(list)\n    # list.append(0)\n    # for i in range(m):\n    #     list[n - 1 - i], list[n - i] = list[n - i], list[n - 1 - i]\n    # print(list[0:n])\n    # print(list[n:])\n",
        "num_ids": 106
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[:]\n    for i in range(m):\n        list[i] = temp[len(temp) -1]\n        temp.pop()\n    return list\n",
        "num_ids": 44
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list.copy()\n    n = len(list)\n    for i in range(m):\n        temp.append(list.pop(0))\n    return temp\n",
        "num_ids": 43
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = m%len(list)\n    print(list[m:])\n    print(list[:m])\n    list[:] = list[m:] + list[:]\n    return list\n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    m = m%len(list)\n    print(list[m:])\n    print(list[:m])\n    list[:] = list[:m] + list[:]\n    return list\n",
        "num_ids": 49
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[-m:]+list[:-m]\n",
        "num_ids": 16
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    #initialize the first part of the list with the last n-m elements\n    for i in range(n-m,n):\n        list[i] = list[i-n+m]\n    #initialize the second part of the list with the first n-m elements\n    for i in range(n-m):\n        list[i] = list[i+m]\n    return list\n",
        "num_ids": 102
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    x = list.pop()\n    list.insert(0, x)\n    return list\n",
        "num_ids": 24
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n",
        "num_ids": 23
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n        else:\n            return False\n",
        "num_ids": 31
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    assert test_tup!= None, \"Please enter a valid tuple!\"\n",
        "num_ids": 20
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(isinstance(i, type(None)) for i in test_tup)\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(i is None for i in test_tup)\n",
        "num_ids": 18
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup.count(None):\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(test_tup)\n",
        "num_ids": 12
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    assert test_tup, \"Tuple is empty\"\n    assert test_tup[0] is not None, \"Tuple has a None value\"\n    assert test_tup[0] is not False, \"Tuple has a False value\"\n",
        "num_ids": 60
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    result = False\n    for i in test_tup:\n        if i == None:\n            result = True\n            break\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = 123456\n    endnum = 7654321\n    total = 0\n    for number in range(startnum, endnum):\n        if (number % 2 == 0) and (number % 3 == 0) and (number % 4 == 0) and (number % 5 == 0) and (number % 6 == 0) and (number % 7 == 0) and (number % 8 == 0) and (number % 9 == 0):\n            total += 1\n    print(total)\n",
        "num_ids": 113
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resourc",
        "num_ids": 40
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(list(map(lambda y: x % int(y) == 0, str(x))))),range(startnum, endnum)))\n",
        "num_ids": 43
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum+1) if all([str(num).count(str(digit)) for digit in range(1,10)])]\n",
        "num_ids": 44
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(x % int(i) == 0 for i in str(x)), range(startnum, endnum + 1)))\n",
        "num_ids": 39
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    myList = []\n    for i in range(startnum, endnum + 1):\n        if (all([i % int(j) == 0 for j in str(i)])):\n            myList.append(i)\n    return myList\n",
        "num_ids": 60
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for x in range(startnum, endnum+1):\n        if x == 0:\n            continue\n        elif x % (int(x/10) * 10) == 0 and x % (int(x/100) * 100) == 0 and x % (int(x/1000) * 1000) == 0:\n            print(x, end = \" \")\n",
        "num_ids": 87
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum + 1) if list(str(i)) == [j for j in range(1, len(str(i)) + 1)]]\n",
        "num_ids": 47
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Solution\n    def dig(num):\n        d = [int(i) for i in str(num)]\n        return d\n",
        "num_ids": 33
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    startnum = 2345\n    endnum = 74321\n    digits = [1,2,3,4,5,6,7,8,9]\n    \n    print(\"Numbers divisible by all digits:\")\n    for i in range(startnum, endnum+1):\n        if all(i%digit==0 for digit in digits):\n            print(i)\n",
        "num_ids": 93
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Declare the variables\n    pi=3.14159\n    # Add the code here\n    if a>360:\n        return None\n    else:\n        return pi*(r**2)*(a/360)\n    \n",
        "num_ids": 56
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    print('\\n')\n    print('=========================SECTION 2===============================')\n    print('\\n')\n    r=float(input('Enter radius '))\n    a=float(input('Enter angle in degrees '))\n    if a>360:\n        print('The angle is greater than 360 degrees')\n        return None\n    a=math.radians(a)\n    area=float(((r**2)*a)/(2*math.sin(a)))\n    print('The area is',area)\n    return area\nsector_area(7,360)\nsector_area(7,120)\nsector_area(7,252)\nsector_area(7,70)\nsector_area(7,100)\nsector_area(7,200)\nsector_area(7,45)\nsector_area(7,280)\nsector_area(7,325)\nsector_area(7,5)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(7,135)\nsector_area(7,90)\nsector_area(",
        "num_ids": 1993
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<360:\n        return round(math.pi*(r**2)*(a/360),2)\n    else:\n        return None\n",
        "num_ids": 38
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = None\n    if a>360:\n        return None\n    else:\n        area = (r**2)*math.pi*a/360\n        return area\n",
        "num_ids": 42
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r*r*(1/360)*a\nprint(sector_area(3,30))\n",
        "num_ids": 45
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360:\n        return a/360 * r**2 * math.pi\n    else:\n        return None\n",
        "num_ids": 31
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None",
        "num_ids": 5
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # 0<= angle <90\n    if a>=0 and a < 90:\n        return math.pi*r*r*a/360\n    #90<=angle<=180\n    elif a>=90 and a<=180:\n        return math.pi*r*r*(a-90)/360\n    #180<angle<=360\n    elif a>=180 and a<=360:\n        return math.pi*r*r*(360-a)/360\n    else:\n        return None\n",
        "num_ids": 126
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    import math\n    angle=int(input(\"Enter angle in degrees\"))\n    radius=int(input(\"Enter radius\"))\n    if(angle>360):\n        return None\n    else:\n        area=(radius**2)*(angle/360)*math.pi\n        print(\"Area of the sector is %f\"%area)\n        return area\nsector_area(2,5)\nsector_area(4,2)\nsector_area(4,250)\nsector_area(4,300)\n",
        "num_ids": 117
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return a*r*r\n",
        "num_ids": 25
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    \n    # if one of the string is empty return an empty string \n    if (m == 0 or n == 0 or o == 0): \n        return \"\" \n    \n    # build the third matrix where third string is the column and first and second string are rows. \n    # here we are using a DP approach where we are filling the table from the bottom up. \n    T = [[0 for i in range(o + 1)] for j in range(m + 1)] \n    \n    for i in range(1, m + 1): \n        for j in range(1, o + 1): \n            if (X[i - 1] == Y[j - 1] and X[i - 1] == Z[j - 1]): \n                T[i][j] = T[i - 1][j - 1] + 1\n            elif (T[i - 1][j] > T[i][j - 1]): \n                T[i][j] = T[i - 1][j] \n            else: \n                T[i][j] = T[i][j - 1] \n                \n    # return the last element in the last row\n    return T[m][o] \n",
        "num_ids": 311
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create a table to store results of subproblems \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    \n    L = [[[None]*(n+1) for i in range(o+1)] for j in range(m+1)] \n",
        "num_ids": 78
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return lcs_of_two(X,Y)\n    return lcs_of_two(X,Z)\n",
        "num_ids": 30
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n",
        "num_ids": 26
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None for k in range(l+1)] for j in range(n+1)] for i in range(m+1)]\n",
        "num_ids": 60
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None] for k in range(l+1)] for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n",
        "num_ids": 218
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n",
        "num_ids": 39
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    l = len(Z)\n    L = [[[None for k in range(l+1)] for j in range(m+1)] for i in range(n+1)]\n    for i in range(0, n+1): \n        for j in range(0, m+1): \n            for k in range(0, l+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n    return L[n][m][l] \ndef lcs_of_two(X, Y): \n    '''\n    Write a function to find the longest common subsequence for the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    L = [[None for k in range(m+1)] for i in range(n+1)] \n    for i in range(n+1): \n        for j in range(m+1): \n            if (i == 0 or j == 0): \n                L[i][j] = 0\n            elif (X[i-1] == Y[j-1]): \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    return L[n][m] \ndef lcs_of_one(X): \n    '''\n    Write a function to find the longest common subsequence for the given one string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-one-string/\n    '''\n    n = len(X) \n    L = [None for i in range(n+1)] \n    for i in range(n+1): \n        if (i == 0): \n            L[i] = 0\n        else: \n            L[i] = 1\n    for i in range(1, n+1): \n        for j in range(i): \n            if (X[i-1] == X[j-1]): \n                L[i] = L[j] + 1\n            else: \n                L[i] = max(L[i], L[j]) \n    return L[n] \ndef lcs_of_n(X): \n    '''\n    Write a function to find the longest common subsequence for the given n string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-n-strings/\n    '''\n    n = len(X) \n    L = [[None for k in range(n+1)] for i in range(n+1)] \n    for i in range(n+1): \n        for j in range(n+1): \n            if (i == 0 or j == 0): \n                L[i][j] = 0\n            else: \n                if (X[i-1] == X[j-1]): \n                    L[i][j] = L[i-1][j-1] + 1\n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1]) \n    return L[n][n] \ndef lcs_of_all(X, Y, Z, a, b, c): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence with variable length. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    l = len(Z)\n    L = [[[None for k in range(l+1)] for j in range(m+1)] for i in range(n+1)]\n    for i in range(0, n+1): \n        for j in range(0, m+1): \n            for k in range(0, l+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n    return L[n][m][l] \ndef lcs_of_n_all(X, Y, Z, a, b, c): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence with variable length. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    l = len(Z)\n    L = [[[None for k in range(l+1)] for j in range(m+1)] for i in range(n+1)]\n    for i in range(0, n+1): \n        for j in range(0, m+1): \n            for k in range(0, l+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n    return L[n][m][l] \ndef lcs_of_n_all_aux(X, Y, Z, a, b, c): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence with variable length. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    l = len(Z)\n    L = [[[None for k in range(l+1)] for j in range(m+1)] for i in range(n+1)]\n    for i in range(0, n+1): \n        for j in range(0, m+1): \n            for k in range(0, l+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n    return L[n][m][l] \ndef lcs_of_n_all_aux_modified(X, Y, Z, a, b, c): \n    '''\n",
        "num_ids": 2
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n",
        "num_ids": 29
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n",
        "num_ids": 29
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    regex = re.compile('([A-Z])[A-Z]+')\n    result = regex.sub(r'\\1 ', str1)\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.title()\n    str1 = re.sub('([A-Z])',r' \\1',str1)\n    return str1\n    \ndef solution(s):\n    return''.join(capital_words_spaces(s).split())\n",
        "num_ids": 65
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    newstr=str1.split()\n    newlist=[]\n    for i in newstr:\n        if re.match(\"[A-Z][^A-Z]*\",i):\n            a=i[0].lower()\n            i=i.replace(i[0],a)\n        newlist.append(i)\n    newstr=\" \".join(newlist)\n    return newstr\n",
        "num_ids": 96
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r\"([A-Z][a-z])\", r\" \\1\", str1)\n",
        "num_ids": 29
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('(?<=\\w)([A-Z])', r' \\1', str1)\n",
        "num_ids": 30
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'[A-Z][^A-Z]*')\n    return pattern.sub(r' \\1', str1)\n",
        "num_ids": 40
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # str1 = \"capitalize this!\"\n    capital = re.findall(r\"[A-Z]\", str1)\n    if capital:\n        result = \" \".join(capital)\n        return result\n    else:\n        return str1\n",
        "num_ids": 60
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # for loop version\n    # lst1 = re.findall(r\"^\\w{1}[a-z]*\", str1)\n    # lst2 = re.split('(?<=\\w{1}[a-z]*)', str1)\n    # for word in lst1:\n    #     print(f\"{word} \", end=\"\")\n    # print(\"\")\n    # for word in lst2:\n    #     print(f\"{word} \", end=\"\")\n    # print(\"\")\n",
        "num_ids": 130
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    str1=str1.replace(\"\\n\", \"\")\n    str1=str1.replace(\"\\t\", \"\")\n    str1=str1.strip()\n    \n    str2=''\n    \n    for word in str1.split(\" \"):\n        if word[0].isupper():\n            str2+=\" \"+word\n        else:\n            str2+=word\n    \n    return str2.strip()\n",
        "num_ids": 104
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if(str1 == \"\"):\n        return \"Empty String\"\n    str_capitals = re.compile(r'[A-Z][a-z]')\n    res = re.findall(str_capitals, str1)\n    if(res!= []):\n        for word in res:\n            str1 = str1.replace(word, word.capitalize() + \" \")\n    return str1\n",
        "num_ids": 101
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n",
        "num_ids": 21
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # split all strings in a list\n    numbers = nums_str.split(\",\")\n    # sort numbers list numerically\n    numbers.sort(key=int)\n    # convert sorted list of numbers back to strings\n    numbers = [str(i) for i in numbers]\n    # join the list of strings\n    numbers = \",\".join(numbers)\n    # return list of sorted strings\n    return numbers\n",
        "num_ids": 103
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n",
        "num_ids": 6
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert the list of strings into integers and then sort them\n    nums_list = [int(i) for i in nums_str]\n    nums_list.sort()\n    nums_str = [str(i) for i in nums_list]\n    return nums_str\n",
        "num_ids": 72
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def extract_numbers(num_str):\n        return [int(x) for x in num_str.split() if x.isdigit()]\n",
        "num_ids": 39
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def sorted_num_string(num_str):\n        return int(num_str)\n    nums_str.sort(key=sorted_num_string)\n    print(nums_str)\n",
        "num_ids": 51
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = sorted(nums_str, key=lambda x: int(x))\n    return nums\n",
        "num_ids": 28
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # split the strings\n    nums_str.sort(key=lambda x: [int(t) if t.isdigit() else t.lower()\n                                          for t in re.split('(\\d+)', x)])\n    return nums_str\n",
        "num_ids": 63
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # First sort the numeric strings\n    nums = [float(num) for num in nums_str]\n    # return nums_str.sort(key = float)\n    # return sorted(nums_str, key = float)\n    return sorted(nums_str, key = lambda x: float(x))\n",
        "num_ids": 77
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted([int(n) if n.isdigit() else n for n in nums_str])\n",
        "num_ids": 28
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    list = test_list + test_tup\n    return list\n",
        "num_ids": 18
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return None\n",
        "num_ids": 19
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # TODO: Create a tuple with the last name, age, and average marks of the student.\n    # TODO: Call the `append` method to add the tuple to the list.\n    test_list.append(test_tup)\n",
        "num_ids": 58
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup\n",
        "num_ids": 13
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] >= arr[(i-1)//2]:\n        return False\n    else:\n        left = 2*i+1\n        right = 2*i+2\n        if left < len(arr) and arr[i] > arr[left]:\n            return False\n        if right < len(arr) and arr[i] > arr[right]:\n            return False\n        return True\n",
        "num_ids": 96
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if (2*i+1 < n) and (arr[2*i+1] < arr[i]):\n        return False\n    if (2*i+2 < n) and (arr[2*i+2] < arr[i]):\n        return False\n    return True\n",
        "num_ids": 78
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    for i in range(2, i):\n        if arr[i] < arr[i//2]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n",
        "num_ids": 21
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n",
        "num_ids": 10
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if node at index i has left child.\n    if 2 * i + 1 < len(arr):\n        if arr[2 * i + 1] < arr[i]:\n            return False\n        check_min_heap_helper(arr, 2 * i + 1)\n    # Check if node at index i has right child.\n    if 2 * i + 2 < len(arr):\n        if arr[2 * i + 2] < arr[i]:\n            return False\n        check_min_heap_helper(arr, 2 * i + 2)\n    return True\n",
        "num_ids": 138
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n",
        "num_ids": 10
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n",
        "num_ids": 21
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    left_child = arr[i]*2 + 1\n    right_child = arr[i]*2 + 2\n    if left_child < len(arr) and arr[i] < arr[left_child]:\n        return False\n    if right_child < len(arr) and arr[i] < arr[right_child]:\n        return False\n    if left_child >= len(arr) and right_child >= len(arr):\n        return True\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n",
        "num_ids": 146
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for i in range(1, i):\n        if arr[i] > arr[(i-1)//2]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return 2 * n * n + 1\n",
        "num_ids": 12
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if(n==0): return 0\n    else:\n        return 2*jacobsthal_num(n-1)+1\n",
        "num_ids": 33
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n",
        "num_ids": 60
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "num_ids": 57
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1: \n        return 1\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "num_ids": 42
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # the function to find nth jacobsthal number\n    def jacobsthal(n): \n        # initialize sum and counter\n        s, count = 0, 1\n        # outer loop for traversing number of elements\n        while count <= n: \n            # inner loop for calculating nCr \n            j, k = 1, 1\n            while j <= count: \n                s += k \n                j += 1\n                k += 1\n            count += 1\n        return s\n",
        "num_ids": 116
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal(n):\n        if n == 0: return 0\n        if n == 1: return 1\n        t = 1\n        for i in range(2, n+1):\n            t += (jacobsthal(n-1))**2\n        return t\n",
        "num_ids": 69
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # Your code here\n    i = 0\n    j = 1\n    while i < n:\n        j += 2\n        if j % 2 == 0:\n            j += 2\n        j += 1\n        i += 1\n    return j\n",
        "num_ids": 58
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return sum([int(x) for x in str(n)])\n",
        "num_ids": 19
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # if n==0: return 0\n    # if n==1: return 1\n    # if n==2: return 1\n    # if n==3: return 2\n    # if n==4: return 3\n",
        "num_ids": 52
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    from collections import defaultdict\n    tup_dict = defaultdict(list)\n    tuple_list = test_list\n    # Make dictionary to hold tuple as value and record number as key\n    for i in range(len(tuple_list)):\n        tup_dict[tuple_list[i][1]].append(tuple_list[i])\n    # Create a list for sorting by length\n    length_list = list(tup_dict.values())\n    length_list.sort(key = len)\n    # Sort the tuples by length\n    for i in range(len(length_list)):\n        length_list[i] = sorted(length_list[i], key = lambda x: x[0])\n    # Create an empty list to hold the result tuples\n    K_tup_list = []\n    # Loop through the list of sorted tuples\n    for i in range(len(length_list)):\n        if len(length_list[i]) >= K:\n            # If the number of elements in tuple is greater than or equal to K\n            for j in range(K):\n                # Append the first K elements to the list\n                K_tup_list.append(length_list[i][j])\n            # If there are more than K elements in the tuple\n            if len(length_list[i]) > K:\n                # Pop the first K elements from the list\n                for j in range(K):\n                    length_list[i].pop(0)\n    # Return the result list of tuples\n    return K_tup_list\n",
        "num_ids": 370
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #Store the first K number of records in a list\n    temp_list = []\n    for i in range(K):\n        temp_list.append(test_list[i])\n    \n    #Find the minimum value of the list\n    min_val = min(temp_list)\n    min_ind = temp_list.index(min_val)\n    \n    #Remove the minimum value from the list\n    temp_list.remove(min_val)\n    \n    #Return the minimum value\n    return(min_val, min_ind)\n",
        "num_ids": 130
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # test_list = [(1, 3), (6, 4), (2, 4), (0, 1), (8, 5), (0, 1), (3, 4), (9, 9), (7, 5)]\n    \n    # test_list = [(\"first\", 1), (\"second\", 3), (\"third\", 4)]\n",
        "num_ids": 79
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # determine if test_list is a list\n    if type(test_list) == list:\n        \n        # determine if K is a single value\n        if type(K) == int:\n            min_ele = None\n            min_index = None\n            \n            # iterate over the list and find the minimum element\n            for index, value in enumerate(test_list):\n                if min_ele is None:\n                    min_ele = value\n                    min_index = index\n                elif value < min_ele:\n                    min_ele = value\n                    min_index = index\n            \n            # return list of minimums\n            return [min_ele] * K, min_index\n        \n        # determine if K is a list\n        elif type(K) == list:\n            # initialize the list of lists\n            list_of_lists = []\n            \n            # iterate over the list and find the minimum element\n            for index, value in enumerate(test_list):\n                \n                # initialize list of minimums\n                list_of_min = []\n                \n                # iterate over the K list and find the minimum element\n                for ind, val in enumerate(K):\n                    # initialize the minimum element\n                    min_ele = None\n                    min_index = None\n                    \n                    # iterate over the list and find the minimum element\n                    for index_1, value_1 in enumerate(test_list):\n                        if min_ele is None:\n                            min_ele = value_1\n                            min_index = index_1\n                        elif value_1 < min_ele:\n                            min_ele = value_1\n                            min_index = index_1\n                    \n                    # add minimum element\n                    list_of_min.append(min_ele)\n                \n                # add list of minimums\n                list_of_lists.append(list_of_min)\n            \n            # return list of lists\n            return list_of_lists\n    \n    else:\n        raise TypeError('Not a list')\n",
        "num_ids": 468
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp = []\n    for tup in test_list:\n        temp.append(tup[1])\n    temp.sort()\n    return temp[:K]\n",
        "num_ids": 42
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    # Create a priority queue \n    min_heap = [] \n    for i in range(K): \n        heapq.heappush(min_heap, test_list[i]) \n    \n    # Add rest of the elements into the heap \n    for i in range(K, len(test_list)): \n        if test_list[i][1] < min_heap[0][1]: \n            heapq.heappop(min_heap) \n            heapq.heappush(min_heap, test_list[i]) \n    \n    # Print the contents of the heap \n    while min_heap: \n        print(heapq.heappop(min_heap)[0], end = \" \") \n",
        "num_ids": 190
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # global record_dict\n    record_dict = {}\n    for t in test_list:\n        for i in range(len(t)):\n            try:\n                record_dict[t[i]] += 1\n            except:\n                record_dict[t[i]] = 1\n    # print(record_dict)\n    k_min = []\n    for i in range(K):\n        k_min.append(min(record_dict.items(), key=lambda k: k[1]))\n        record_dict[k_min[i][0]] -= 1\n    return k_min\n",
        "num_ids": 142
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k_records = list()\n    if(K == 0):\n        min_k_records.append([])\n    elif(K == 1):\n        min_k_records = [list(t) for t in set(tuple(element) for element in test_list)]\n    else:\n        min_k_records = list(map(list, itertools.islice(itertools.combinations(test_list, K), min(len(test_list), K))))\n    return min_k_records\n",
        "num_ids": 131
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return min(test_list, key=lambda x: len(x))\n",
        "num_ids": 20
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # first sort based on second value of tuple\n    test_list.sort(key=lambda x: x[1])\n    #print(test_list)\n",
        "num_ids": 39
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            index_list.append(i)\n    return index_list\n",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i, j, k in zip(l1, l2, l3):\n        if i==j==k:\n            l.append(i)\n    return l\n",
        "num_ids": 48
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # return [item for item in l1 if item in l2 and item in l3]\n    # return list(set(l1).intersection(l2, l3))\n    return [i for i in l1 if i in l2 and i in l3]\n",
        "num_ids": 67
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            l.append(l1[i])\n    return l\n",
        "num_ids": 55
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    # result = [x for x in l1 if x in l2 and x in l3]\n    for x in l1:\n        if x in l2 and x in l3:\n            result.append(x)\n    return result\n",
        "num_ids": 63
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            l1_list.append(l1[i])\n    return l1_list\n",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common\n",
        "num_ids": 65
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #your code here\n    my_list = []\n    for idx in range(len(l1)):\n        if l1[idx] == l2[idx] and l1[idx] == l3[idx]:\n            my_list.append(l1[idx])\n    return my_list\n    \n    \ndef my_index(l1, l2, l3):\n    '''\n    Write a function that takes three lists of equal length and returns a new list containing all the indices that are common between the three lists.\n    '''\n    #your code here\n    my_list = []\n    for idx in range(len(l1)):\n        if l1[idx] == l2[idx] and l1[idx] == l3[idx]:\n            my_list.append(idx)\n    return my_list\n    \n    \ndef check_pallindrome(s1, s2):\n    '''\n    Write a function that returns True if s1 is a palindrome, and False otherwise. A palindrome is a string which, when reversed, is equal to itself. For example, \"abccba\" is a palindrome.\n    '''\n    #your code here\n    if len(s1) == 1 or len(s2) == 1:\n        return True\n    elif s1 == s2:\n        return True\n    else:\n        return False\n    \n    \ndef check_anagram(s1, s2):\n    '''\n    Write a function that returns True if s1 and s2 are anagrams, and False otherwise. An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase.\n    '''\n    #your code here\n    if len(s1)!= len(s2):\n        return False\n    else:\n        s1_list = list(s1)\n        s2_list = list(s2)\n        s1_list.sort()\n        s2_list.sort()\n        if s1_list == s2_list:\n            return True\n        else:\n            return False\n    \n    \ndef check_list_type(l1, l2):\n    '''\n    Write a function that takes two lists, and returns True if they are both of the same type, and False otherwise. The lists can be of any length. Hint: You can use type() to check the type of an object.\n    '''\n    #your code here\n    if type(l1) == type(l2):\n        return True\n    else:\n        return False\n    \n    \ndef get_all_numbers(n):\n    '''\n    Write a function that returns a list of all numbers between 1 and n, in ascending order, each on a separate line.\n    '''\n    #your code here\n    my_list = []\n    for idx in range(n):\n        my_list.append(idx+1)\n    return my_list\n    \n    \ndef get_all_primes(n):\n    '''\n    Write a function that returns a list of all prime numbers between 1 and n, in ascending order, each on a separate line.\n    '''\n    #your code here\n    my_list = []\n    for idx in range(n):\n        if is_prime(idx+1):\n            my_list.append(idx+1)\n    return my_list\n    \n    \ndef get_all_evens(n):\n    '''\n    Write a function that returns a list of all even numbers between 1 and n, in ascending order, each on a separate line.\n    '''\n    #your code here\n    my_list = []\n    for idx in range(n):\n        if idx%2 == 0:\n            my_list.append(idx+1)\n    return my_list\n    \n    \ndef get_all_squares(n):\n    '''\n    Write a function that returns a list of all numbers between 1 and n that are perfect squares, each on a separate line.\n    '''\n    #your code here\n    my_list = []\n    for idx in range(n):\n        if idx**2 < n:\n            my_list.append(idx**2)\n    return my_list\n    \n    \ndef get_common_elements(l1, l2):\n    '''\n    Write a function that takes two lists, and returns a list of all elements that appear in both lists.\n    '''\n    #your code here\n    my_list = []\n    for num in l1:\n        if num in l2:\n            my_list.append(num)\n    return my_list\n    \n    \ndef get_common_elements_v2(l1, l2):\n    '''\n    Write a function that takes two lists, and returns a list of all elements that appear in both lists.\n    '''\n    #your code here\n    l1_set = set(l1)\n    l2_set = set(l2)\n    my_list = []\n    for num in l1_set:\n        if num in l2_set:\n            my_list.append(num)\n    return my_list\n    \n    \ndef get_even_indexes(l1):\n    '''\n    Write a function that takes a list and returns a list of all the even indexes, each on a separate line.\n    '''\n    #your code here\n    my_list = []\n    for idx in range(len(l1)):\n        if idx % 2 == 0:\n            my_list.append(idx)\n    return my_list\n    \n    \ndef get_odd_indexes(l1):\n    '''\n    Write a function that takes a list and returns a list of all the odd indexes, each on a separate line.\n    '''\n    #your code here\n    my_list = []\n    for idx in range(len(l1)):\n        if idx % 2 == 1:\n            my_list.append(idx)\n    return my_list\n    \n    \ndef get_sorted_squared_list(l1):\n    '''\n    Write a function that takes a list of numbers and returns a list of the squares of those numbers, but sorted in ascending order.\n    '''\n    #your code here\n    l1.sort()\n    my_list = []\n    for num in l1:\n        my_list.append(num**2)\n    return my_list\n    \n    \ndef get_odd_index_list(l1):\n    '''\n    Write a function that takes a list and returns a list of elements from the original list, each at an odd index.\n    '''\n    #your code here\n    my_list = []\n    for idx in range(len(l1)):\n        if idx % 2 == 1:\n            my_list.append(l1[idx])\n    return my_list\n    \n    \ndef get_sorted_odd_index_list(l1):\n    '''\n    Write a function that takes a list and returns a list of elements from the original list, each at an odd index, but sorted in ascending order.\n    '''\n    #your code here\n    l1.sort()\n    my_list = []\n    for idx in range(len(l1)):\n        if idx % 2 == 1:\n            my_list.append(l1[idx])\n    return my_list\n    \n    \ndef get_sorted_common_elements(l1, l2):\n    '''\n    Write a function that takes two lists, and returns a list of elements that appear in both lists, but which are also sorted in ascending order.\n    '''\n    #your code here\n    l1.sort()\n    l2.sort()\n    my_list = []\n    for idx in range(len(l1)):\n        if l1[idx] == l2[idx]:\n            my_list.append(l1[idx])\n    return my_list\n    \n    \ndef get_list_of_numbers_between(l1, n1, n2):\n    '''\n    Write a function that takes a list, a start number, and an end number, and returns a list of all the numbers between the two numbers, inclusive of th",
        "num_ids": 36
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] == l1[i]:\n            result.append(l1[i])\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list to get the smallest and the second smallest number\n    numbers.sort()\n    return(numbers[1])\n",
        "num_ids": 33
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        # Initialize the min and sec variables to the first 2 numbers.\n        min = numbers[0]\n        sec = numbers[0]\n        # If the first number is the smallest, set min to the second number.\n        for i in numbers:\n            if i <= min:\n                sec = min\n                min = i\n            # If a number is smaller than min, set sec to be equal to min.\n            elif i < sec:\n                sec = i\n        return sec\n",
        "num_ids": 131
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers)<2:\n        return None\n    # sort the list\n    numbers.sort()\n    # return the second item\n    return numbers[1]\n",
        "num_ids": 44
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min_value = numbers[0]\n    for i in range(1,len(numbers)):\n        if min_value > numbers[i]:\n            min_value = numbers[i]\n    print(min_value)\n    \n    min_index = numbers.index(min_value)\n    for i in range(len(numbers)):\n        if i!= min_index:\n            if numbers[i] < min_value:\n                second_min = numbers[i]\n    print(second_min)\n    \n    \n    \nsecond_smallest([1, 2, 3, 4, 5, 6, 7])",
        "num_ids": 150
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #create a set of the numbers\n    #sort the set\n    #return the second element\n    #return an empty set if the set is empty\n    #return None if the list is empty\n    if numbers == None or len(numbers) == 0:\n        return None\n    s_numbers = set(numbers)\n    s_numbers = sorted(s_numbers)\n    if len(s_numbers) == 0:\n        return None\n    return s_numbers[1]\n",
        "num_ids": 118
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]\n",
        "num_ids": 25
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    # Setting the variables for the sorted list and the second smallest number\n    sorted_list = sorted(numbers)\n    second_smallest_number = sorted_list[1]\n",
        "num_ids": 46
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #variables\n    array = numbers\n    array.sort()\n    if len(array) >= 2:\n        print(array[1])\n    else:\n        print(\"Not enough elements in list\")\n    return array\n",
        "num_ids": 54
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # first sort the list\n    numbers.sort()\n    \n    # check to see if there are 2 or more items in the list\n    if len(numbers) > 1:\n        \n        # if there are two or more items in the list, return the second to last\n        return numbers[-2]\n    else:\n        return None\n        \nprint(second_smallest([5, 4, 3, 2, 1, 0]))\n",
        "num_ids": 105
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.match(\"a\\db+\", text)\n",
        "num_ids": 17
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    patterns = 'ab+'\n    if re.search(patterns, text):\n        return \"Found match\"\n    else:\n        return \"Not matched\"\n",
        "num_ids": 41
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return bool(re.search(r\"a.+b\",text))\n",
        "num_ids": 20
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'a.+b'\n    # write your code here\n",
        "num_ids": 19
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab*')\n    result = pattern.findall(text)\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b')\n    if pattern.search(text) is not None:\n        return 'YES'\n    else:\n        return 'NO'\n",
        "num_ids": 46
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    r = re.findall(r'a[ab]+?b', text)\n    if r:\n        return r\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"a\\s*(?=b)\", text)\n    if pattern:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"a\\s*(b+)?\", text)\n    if pattern:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_exactly_n(text, n):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"a\\s*b{%d}\" % n, text)\n    if pattern:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_exactly_n_or_more(text, n):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"a\\s*b{%d,}\" % n, text)\n    if pattern:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_exactly_n_or_more_v2(text, n):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"a\\s*(b{%d,}?)?\" % n, text)\n    if pattern:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_between_and(text, a, b):\n    '''\n    Write a function that matches a string that has an 'a' followed by a word that contains a 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"\\s*a\\s*(?=\\s*%s)\" % b, text)\n    if pattern:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_exactly_n_words(text, n):\n    '''\n    Write a function that matches a string that has exactly n words. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"(?<=\\s)\\w+\\s*(?=\\s)\", text)\n    if len(pattern) == n:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_sequence(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"a\\s*(?=b\\s*b)\", text)\n    if pattern:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_parenthesis(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by any one character, and then a 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"a\\s*(?=.[^a-zA-Z])b\", text)\n    if pattern:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_character_class(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by any one character, and then a 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"a\\s*(?=.[^a-zA-Z]b)\", text)\n    if pattern:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_expression(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by any one character, and then a 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"a\\s*(?=.[a-zA-Z]b)\", text)\n    if pattern:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_expression_v2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by any one character, and then a 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"a\\s*(?=.[a-zA-Z]*b)\", text)\n    if pattern:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_expression_v3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by any one character, and then a 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"a\\s*(?=.[a-zA-Z]*b)\", text)\n    if pattern:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_non_capture(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by any one character, and then a 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"(?<=a)\\w*\", text)\n    if pattern:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_non_capture_v2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by any one character, and then a 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"(?<=a)\\w*b\", text)\n    if pattern:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_non_capture_v3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by any one character, and then a 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.findall(r\"(?<=a)\\w*b\", text)\n    if pattern:\n        print(\"Yes\")\n    else:\n        print(\"No\")\ndef text_match_non_capture_v4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by any one character, and then a 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3",
        "num_ids": 54
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    # your code here\n    return re.search(r\"\\bab+\\b\",text)\n",
        "num_ids": 28
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"ab*\"\n    if re.search(pattern, text):\n        return \"Found match\"\n    else:\n        return \"Not matched\"\n",
        "num_ids": 39
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if len(test_list) == 0:\n        return 0\n    if len(test_list) == 1:\n        return 0\n    if len(test_list) == 2:\n        if test_list[0] == test_list[1][::-1]:\n            return 1\n        else:\n            return 0\n    pairs = 0\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                pairs += 1\n            \n    return pairs\n",
        "num_ids": 151
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for item in test_list:\n        count = 0\n        for item2 in test_list:\n            if item[::-1] == item2[::-1] and item!= item2 and count == 0:\n                count = count + 1\n                pairs = pairs + 1\n    return pairs\n",
        "num_ids": 79
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Solution\n    def reverse_string(string):\n        return ''.join(reversed(string))\n",
        "num_ids": 28
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = [int(i) for i in test_list]\n    n = len(test_list)\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(test_list[i]>test_list[j]):\n                count += 1\n    return count\n",
        "num_ids": 84
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list[i] == test_list[j][::-1]:\n                print(f\"{test_list[i]} and {test_list[j]} are reverse pair\")\n",
        "num_ids": 80
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = 0\n    for string in test_list:\n        if len(string) > 1:\n            for i in range(len(string)//2):\n                if string[i] == string[-1-i]:\n                    result += 1\n                else:\n                    break\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[j][::-1] == test_list[i]:\n                count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    print(\"The reverse pairs in the given list are:\")\n    count = 0\n    for item in test_list:\n        if item[::-1] in test_list:\n            print(item + \":\" + item[::-1])\n            count += 1\n    print(\"The number of reverse pairs in the given list is: {}\".format(count))\n",
        "num_ids": 85
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    '''\n    input:  ['abcd', 'acb', 'bca', 'abb', 'dcba']\n    output: 3\n    '''\n    \n    # Given: a list of strings\n    # Goal: count all the reverse pairs\n    # Assumption: strings are sorted in increasing order\n    # output: integer\n    \n    # Edge cases\n    # Base case\n    # Naive solution\n    # Time complexity: O(n^2)\n    # Space complexity: O(n)\n    \n    # Solution\n    # Linear scan through the list to count all the reversed pairs\n    \n    # So, a couple of ways to do this\n    # 1. Reversing strings, then checking to see if you get a reverse of that\n    # 2. Counting all the pairs, then seeing if there's a reverse pair in there\n    # 3. I don't understand how you're going to do this...\n    # 4. This is the one\n    \n    counter = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if i!= j and test_list[j] == test_list[j][::-1]:\n                counter += 1\n    \n    return counter\n",
        "num_ids": 258
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    print(\"\\n\\n\\n######################################################################################################################################################\")\n    print(\"=====================================   COUNTING REVERSE PAIRS   ======================================\\n\\n\\n\")\n    reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                reverse_pairs += 1\n    return reverse_pairs\n    \nprint(count_reverse_pairs([\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]))\n",
        "num_ids": 169
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for sublist in list1:\n        sub_tuple = tuple(sublist)\n        d[sub_tuple] = d.get(sub_tuple, 0) + 1\n    return d\n",
        "num_ids": 55
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # return list(set([tuple(x) for x in list1]))\n    return list(map(tuple,list1))\n",
        "num_ids": 35
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_dic = {}\n    for list in list1:\n        list_tuple = tuple(list)\n        if list_tuple in list_dic:\n            list_dic[list_tuple] += 1\n        else:\n            list_dic[list_tuple] = 1\n    return list_dic\n",
        "num_ids": 81
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = 0\n    \n    for i in list1:\n        if type(i) == list:\n            count += 1\n            \n    dict1 = {}\n    \n    for i in list1:\n        if type(i) == list:\n            dict1[tuple(i)] = list1.count(i)\n            \n    return dict1\n    \nprint(unique_sublists([[1, 2, 3, 4], ['a', 'b'], [1, 2, 3, 4], [1, 2, 3, 4]]))",
        "num_ids": 129
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    res = []\n    for i in list1:\n        if type(i) == list:\n            res.append(tuple(i))\n    return dict(Counter(res))\n",
        "num_ids": 45
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    new_list = []\n    for elem in list1:\n        if type(elem) == type([]):\n            for elem1 in elem:\n                new_list.append(elem1)\n        else:\n            new_list.append(elem)\n    return dict((x, new_list.count(x)) for x in set(new_list))\n",
        "num_ids": 92
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if not list1:\n        return []\n    else:\n        return {tuple(list1[0]): 1} + unique_sublists(list1[1:])\n",
        "num_ids": 44
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_counter = {}\n    for sublist in list1:\n        list_tuple = tuple(sublist)\n        if list_tuple in list_counter:\n            list_counter[list_tuple] += 1\n        else:\n            list_counter[list_tuple] = 1\n    return list_counter\n",
        "num_ids": 78
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_unq = []\n    for i in list1:\n        tuple1 = tuple(i)\n        if tuple1 not in list_unq:\n            list_unq.append(tuple1)\n    return list_unq\n",
        "num_ids": 60
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    list3 = []\n    for i in list1:\n        if type(i) == list:\n            list2.append(tuple(i))\n    for i in list2:\n        if i not in list3:\n            list3.append(i)\n    return dict(zip(list3, [list2.count(i) for i in list3]))\nprint(unique_sublists([[1,2],1,[1,2],1,[3,4]]))\n",
        "num_ids": 121
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    print(num)\n    if len(num) > 2:\n        return False\n    num = int(num)\n    if num == 0:\n        return True\n    else:\n        return False\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        return False\n    num = num.replace(' ', '')\n    if not num:\n        return False\n    if num[0] == '-' or num[0] == '+':\n        num = num[1:]\n    if 'e' in num:\n        if num.count('e') > 1:\n            return False\n        num, exp = num.split('e')\n        if not num.isdigit() or not exp.isdigit():\n            return False\n        if len(num) > 1:\n            return False\n        num = int(num)\n        exp = int(exp)\n        if exp > 2 or exp < 1:\n            return False\n        if num > 2**exp or num < -2**exp:\n            return False\n        return True\n    if '.' in num:\n        index = num.find('.')\n        pre = num[:index]\n        post = num[index+1:]\n        if not pre.isdigit() or not post.isdigit():\n            return False\n        if len(pre) > 1:\n            return False\n        if len(post) > 2:\n            return False\n        if post[0] == '0':\n            return False\n        if int(post) > 2:\n            return False\n        return True\n    else:\n        if len(num) > 1:\n            return False\n        if not num.isdigit():\n            return False\n        if int(num) > 2:\n            return False\n        return True\n    return False\n",
        "num_ids": 364
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        try:\n            float(num)\n            return True\n        except ValueError:\n            return False\n    else:\n        return False\n    \n    \ndef is_viable_password(password):\n    '''\n    Write a function to check whether a given string is a viable password according to the definition above.\n    '''\n    if isinstance(password, str):\n        if len(password) >= 6:\n            if password.isdigit() and is_decimal(password):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \n    \ndef digit_to_char(num):\n    '''\n    Write a function to get the character representation of a number.\n    '''\n    if isinstance(num, int):\n        return chr(num + ord('0'))\n    elif isinstance(num, str):\n        return chr(int(num) + ord('0'))\n    else:\n        raise ValueError('Value must be a digit or a character.')\n        \n        \ndef num_to_char(num):\n    '''\n    Write a function to get the character representation of a number.\n    '''\n    if isinstance(num, int):\n        return chr(num + ord('0'))\n    elif isinstance(num, str):\n        return chr(int(num) + ord('0'))\n    else:\n        raise ValueError('Value must be a digit or a character.')\n        \n        \ndef char_to_num(char):\n    '''\n    Write a function to get the number representation of a character.\n    '''\n    if isinstance(char, int):\n        return char - ord('0')\n    elif isinstance(char, str):\n        return char - ord('0')\n    else:\n        raise ValueError('Value must be a character or a digit.')\n        \n        \ndef num_to_digit(num):\n    '''\n    Write a function to get the digit representation of a number.\n    '''\n    if isinstance(num, int):\n        return num % 10\n    elif isinstance(num, str):\n        return num % 10\n    else:\n        raise ValueError('Value must be a digit or a character.')\n        \n        \ndef digit_to_num(digit):\n    '''\n    Write a function to get the number representation of a digit.\n    '''\n    if isinstance(digit, int):\n        return digit\n    elif isinstance(digit, str):\n        return digit\n    else:\n        raise ValueError('Value must be a digit or a character.')\n    \n    \ndef num_to_n(num, n):\n    '''\n    Write a function to get the nth digit of a number.\n    '''\n    if isinstance(num, int):\n        if isinstance(n, int):\n            return num // (10 ** n) % 10\n        else:\n            raise ValueError('n must be an integer.')\n    elif isinstance(num, str):\n        if isinstance(n, int):\n            return int(num) // (10 ** n) % 10\n        else:\n            raise ValueError('n must be an integer.')\n    else:\n        raise ValueError('Value must be a digit or a character.')\n        \n    \ndef nth_digit(num, n):\n    '''\n    Write a function to get the nth digit of a number.\n    '''\n    if isinstance(num, int):\n        if isinstance(n, int):\n            return num // (10 ** n) % 10\n        else:\n            raise ValueError('n must be an integer.')\n    elif isinstance(num, str):\n        if isinstance(n, int):\n            return int(num) // (10 ** n) % 10\n        else:\n            raise ValueError('n must be an integer.')\n    else:\n        raise ValueError('Value must be a digit or a character.')\n        \n        \ndef char_to_n(char, n):\n    '''\n    Write a function to get the nth digit of a character.\n    '''\n    if isinstance(char, int):\n        if isinstance(n, int):\n            return char // (10 ** n) % 10\n        else:\n            raise ValueError('n must be an integer.')\n    elif isinstance(char, str):\n        if isinstance(n, int):\n            return int(char) // (10 ** n) % 10\n        else:\n            raise ValueError('n must be an integer.')\n    else:\n        raise ValueError('Value must be a character or a digit.')\n        \n        \ndef n_to_char(num, n):\n    '''\n    Write a function to get the nth digit of a number.\n    '''\n    if isinstance(num, int):\n        if isinstance(n, int):\n            return chr(num // (10 ** n) % 10)\n        else:\n            raise ValueError('n must be an integer.')\n    elif isinstance(num, str):\n        if isinstance(n, int):\n            return chr(int(num)) // (10 ** n) % 10\n        else:\n            raise ValueError('n must be an integer.')\n    else:\n        raise ValueError('Value must be a digit or a character.')\n        \n        \ndef n_to_digit(num, n):\n    '''\n    Write a function to get the nth digit of a number.\n    '''\n    if isinstance(num, int):\n        if isinstance(n, int):\n            return num // (10 ** n) % 10\n        else:\n            raise ValueError('n must be an integer.')\n    elif isinstance(num, str):\n        if isinstance(n, int):\n            return int(num) // (10 ** n) % 10\n        else:\n            raise ValueError('n must be an integer.')\n    else:\n        raise ValueError('Value must be a digit or a character.')\n        \n        \ndef digit_to_n(num, n):\n    '''\n    Write a function to get the nth digit of a number.\n    '''\n    if isinstance(num, int):\n        if isinstance(n, int):\n            return num // (10 ** n) % 10\n        else:\n            raise ValueError('n must be an integer.')\n    elif isinstance(num, str):\n        if isinstance(n, int):\n            return int(num) // (10 ** n) % 10\n        else:\n            raise ValueError('n must be an integer.')\n    else:\n        raise ValueError('Value must be a digit or a character.')\n        \n        \ndef nth_char(char, n):\n    '''\n    Write a function to get the nth digit of a character.\n    '''\n    if isinstance(char, int):\n        if isinstance(n, int):\n            return char // (10 ** n) % 10\n        else:\n            raise ValueError('n must be an integer.')\n    elif isinstance(char, str):\n        if isinstance(n, int):\n            return chr(int(char)) // (10 ** n) % 10\n        else:\n            raise ValueError('n must be an integer.')\n    else:\n        raise ValueError('Value must be a character or a digit.')\n        \n        \ndef nth_digit(num, n):\n    '''\n    Write a function to get the nth digit of a number.\n    '''\n    if isinstance(num, int):\n        if isinstance(n, int):\n            return num // (10 ** n) % 10\n        else:\n            raise ValueError('n must be an integer.')\n    elif isinstance(num, str):\n        if isinstance(n, int):\n            return int(num) // (10 ** n) % 10\n        else:\n            raise ValueError('n must be an integer.')\n    else:\n        raise ValueError('Value must be a digit or a character.')\n        \n        \ndef n_to_n(num, n, m):\n    '''\n    Write a function to get the nth digit of a number.\n    '''\n    if isinstance(num, int):\n        if isinstance(n, int):\n            if isinstance(m, int):\n                return num // (10 ** n) % 10 /",
        "num_ids": 44
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        return bool(re.match(r'^\\-?[0-9]\\.[0-9]$', num))\n    else:\n        raise TypeError('parameter should be a string')\n",
        "num_ids": 58
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num[:len(num) - 2].isdigit() and num[-2:] == '.01'\n    \nis_decimal('3.1415')\n",
        "num_ids": 42
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' in num:\n        split_num = num.split('.')\n        if len(split_num) == 2:\n            if len(split_num[0]) == 1 and len(split_num[1]) == 1:\n                return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return '.' in num\n",
        "num_ids": 9
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    s = str(num)\n    if len(s)!= 3:\n        return False\n    elif s[0] == '0' and s[1] == '.' and s[2] == '0':\n        return True\n    elif s[0] == '0' and s[1] == '.' and s[2]!= '0':\n        return False\n    elif s[0] == '0' and s[1]!= '.' and s[2] == '0':\n        return False\n    elif s[0]!= '0' and s[1] == '.' and s[2] == '0':\n        return True\n    elif s[0]!= '0' and s[1] == '.' and s[2]!= '0':\n        return False\n    elif s[0]!= '0' and s[1]!= '.' and s[2] == '0':\n        return False\n    else:\n        return True\n",
        "num_ids": 237
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return '.' in num\n",
        "num_ids": 9
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return arr.count(arr[0]) == len(arr)\n",
        "num_ids": 18
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    print(arr)\n    for i in range(len(arr)-1):\n        if arr[i+1]==arr[i]:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    i=0\n    list=[]\n    while i<len(arr):\n        if arr[i] in list:\n            return False\n        list.append(arr[i])\n        i=i+1\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for num in arr:\n        if num in d:\n            return False\n        else:\n            d[num] = 1\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            count += 1\n    return count == 0\n",
        "num_ids": 52
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # set() function is used to get unique values in a list\n    unique_set = set(arr)\n    # loop through the set to check whether any element is not in the set\n    if len(unique_set) == len(arr):\n        return False\n    else:\n        return True\n",
        "num_ids": 70
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n    \ndef unique_Element_2(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_num = 1\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            unique_num = arr[i]\n    return unique_num\n",
        "num_ids": 51
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    print(set(arr))\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 39
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = []\n    for i in arr:\n        if i not in unique:\n            unique.append(i)\n        else:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    a = set(arr)\n    if len(a) == 1:\n        return \"true\"\n    else:\n        return \"false\"\n",
        "num_ids": 36
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnumber_number = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    return monthnumber_number[monthnum3]\n",
        "num_ids": 70
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        if monthnum3 == 2:\n            return 'February has 29 days and 31 days.'\n        elif monthnum3 in (4, 6, 9, 11):\n            return 'This month has 30 days.'\n        else:\n            return 'This month has 31 days.'\n    else:\n        return 'Enter a valid number'",
        "num_ids": 89
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"Yes\")\n    elif monthnum3 == 2:\n        print(\"No\")\n",
        "num_ids": 69
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    month_leap_days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n",
        "num_ids": 67
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month30 = ['04', '06', '09', '11']\n    month31 = ['01', '03', '05', '07', '08', '10', '12']\n    if monthnum3 in month30:\n        return False\n    elif monthnum3 in month31:\n        return True\n    else:\n        return \"It is not a month\"\n",
        "num_ids": 88
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return 30\n    elif monthnum3 == 2:\n        return 28\n    else:\n        return \"WRONG MONTH NUMBER\"\n",
        "num_ids": 80
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return 30\n    else:\n        return 28\n",
        "num_ids": 23
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    import datetime\n    monthnumber_number = [31,28,31,30,31,30,31,31,30,31,30,31]\n    monthnumber_month = [\"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"jun\",\"jul\",\"aug\",\"sep\",\"oct\",\"nov\",\"dec\"]\n    if int(monthnum3) == 1 or int(monthnum3) == 3 or int(monthnum3) == 5 or int(monthnum3) == 7 or int(monthnum3) == 8 or int(monthnum3) == 10 or int(monthnum3) == 12:\n        print(\"\\nThe number of days in this month is\",monthnumber_number[int(monthnum3)-1])\n    else:\n        if int(monthnum3) == 4 or int(monthnum3) == 6 or int(monthnum3) == 9 or int(monthnum3) == 11:\n            print(\"\\nThe number of days in this month is\",monthnumber_number[int(monthnum3)-1])\n        else:\n            print(\"\\nThe number of days in this month is\",monthnumber_number[int(monthnum3)-1], \"and this month does not have 30 days.\")\n            if datetime.datetime.today().month == 1:\n                print(\"There is only 1 month left in this year:\",monthnumber_month[int(monthnum3)-1])\n            elif datetime.datetime.today().month == 2:\n                print(\"There are only 2 months left in this year:\",monthnumber_month[int(monthnum3)-1])\n            elif datetime.datetime.today().month == 3:\n                print(\"There are only 3 months left in this year:\",monthnumber_month[int(monthnum3)-1])\n            elif datetime.datetime.today().month == 4:\n                print(\"There are only 4 months left in this year:\",monthnumber_month[int(monthnum3)-1])\n            elif datetime.datetime.today().month == 5:\n                print(\"There are only 5 months left in this year:\",monthnumber_month[int(monthnum3)-1])\n            elif datetime.datetime.today().month == 6:\n                print(\"There are only 6 months left in this year:\",monthnumber_month[int(monthnum3)-1])\n            elif datetime.datetime.today().month == 7:\n                print(\"There are only 7 months left in this year:\",monthnumber_month[int(monthnum3)-1])\n            elif datetime.datetime.today().month == 8:\n                print(\"There are only 8 months left in this year:\",monthnumber_month[int(monthnum3)-1])\n            elif datetime.datetime.today().month == 9:\n                print(\"There are only 9 months left in this year:\",monthnumber_month[int(monthnum3)-1])\n            elif datetime.datetime.today().month == 10:\n                print(\"There are only 10 months left in this year:\",monthnumber_month[int(monthnum3)-1])\n            elif datetime.datetime.today().month == 11:\n                print(\"There are only 11 months left in this year:\",monthnumber_month[int(monthnum3)-1])\n            elif datetime.datetime.today().month == 12:\n                print(\"There are only 12 months left in this year:\",monthnumber_month[int(monthnum3)-1])\n",
        "num_ids": 809
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # initialize the first element as minimum difference\n    min_diff = arr[1] - arr[0]\n    for i in range(n):\n        for j in range(i + 1, n):\n            # absolute difference between each element\n            diff = abs(arr[i] - arr[j])\n            if (diff < min_diff):\n                min_diff = diff\n",
        "num_ids": 89
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = sys.maxsize \n    for i in range(0, n): \n        for j in range(0, n): \n            diff = abs(arr[i] - arr[j]) \n            if diff < min_diff: \n                min_diff = diff \n    return min_diff \n",
        "num_ids": 78
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 1000000001\n    arr.sort()\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if (diff < min_diff):\n            min_diff = diff\n",
        "num_ids": 60
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = arr[1] - arr[0]\n    for i in range(len(arr)):\n        j = i + 1\n        if j == len(arr):\n            break\n        diff = min(diff, arr[j] - arr[i])\n    return diff\n",
        "num_ids": 73
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    mini = arr[1] - arr[0]\n    for i in range(n):\n        j = i + 1\n        while j < n:\n            mini = min(mini, arr[j] - arr[i])\n            j += 1\n    return mini\n",
        "num_ids": 70
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    return min(arr)-max(arr)\n",
        "num_ids": 13
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    return min(arr[i+1] - arr[i] for i in range(len(arr)-1))\n",
        "num_ids": 35
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff=arr[1]-arr[0]\n    for i in range(1,n-1):\n        diff=arr[i+1]-arr[i]\n        if diff<min_diff:\n            min_diff=diff\n    return min_diff\n",
        "num_ids": 71
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    mindiff = arr[1] - arr[0] \n    for i in range(0, n-1): \n        if (arr[i+1] - arr[i]) < mindiff: \n            mindiff = arr[i+1] - arr[i] \n    return mindiff \n    \ndef find_max_diff(arr,n): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-maximum-difference-pair/\n    '''\n    arr.sort() \n    maxdiff = arr[n-1] - arr[0] \n    for i in range(0, n-1): \n        if (arr[i+1] - arr[i]) > maxdiff: \n            maxdiff = arr[i+1] - arr[i] \n    return maxdiff \n",
        "num_ids": 83
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    return min(arr)-max(arr)\n",
        "num_ids": 13
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits = 0\n    for i in str:\n        if i.isdigit():\n            digits += 1\n    return digits\n",
        "num_ids": 34
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    counter = 0\n    for char in str:\n        if char.isdigit():\n            counter += 1\n    return counter\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = 0\n    for i in range(0,len(str)):\n        if str[i].isdigit():\n            n+=1\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if i.isdigit():\n            ctr=ctr+1\n    return ctr\n",
        "num_ids": 35
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if len(str) == 0:\n        return 0\n    else:\n        return 1 + number_ctr(str[1:])\n",
        "num_ids": 34
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digit_ctr = 0\n    for char in str:\n        if char.isdigit():\n            digit_ctr += 1\n    return digit_ctr\n",
        "num_ids": 38
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1 \n    number = 0 \n    while count!= n: \n        number += 2\n        count += 1\n    return number \ndef is_polite_list(n): \n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [1, 3, 5] \n    count = 0 \n    number = 1 \n    while count!= n: \n        number += 2 \n        if number not in numbers: \n            numbers.append(number) \n            count += 1 \n    return number \ndef is_polite_2(n): \n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [1, 3, 5] \n    count = 0 \n    number = 1 \n    while count!= n: \n        number += 2 \n        if number not in numbers: \n            numbers.append(number) \n            count += 1 \n        else: \n            count -= 1 \n    return number \ndef is_polite_3(n): \n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [1, 3, 5] \n    count = 0 \n    number = 1 \n    while count!= n: \n        number += 2 \n        if number not in numbers: \n            numbers.append(number) \n            count += 1 \n        elif number in numbers: \n            count -= 1 \n    return number \ndef is_polite_4(n): \n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [1, 3, 5] \n    count = 0 \n    number = 1 \n    while count!= n: \n        number += 2 \n        if number not in numbers: \n            numbers.append(number) \n            count += 1 \n        elif number in numbers: \n            count -= 1 \n        elif number > 10: \n            number -= 10 \n            numbers.append(number) \n            count += 1 \n    return number \ndef is_polite_5(n): \n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [1, 3, 5] \n    count = 0 \n    number = 1 \n    while count!= n: \n        number += 2 \n        if number not in numbers: \n            numbers.append(number) \n            count += 1 \n        elif number in numbers: \n            count -= 1 \n        elif number > 10: \n            number -= 10 \n            numbers.append(number) \n            count += 1 \n        elif number > 50: \n            number -= 50 \n            numbers.append(number) \n            count += 1 \n    return number \ndef is_polite_6(n): \n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [1, 3, 5] \n    count = 0 \n    number = 1 \n    while count!= n: \n        number += 2 \n        if number not in numbers: \n            numbers.append(number) \n            count += 1 \n        elif number in numbers: \n            count -= 1 \n        elif number > 10: \n            number -= 10 \n            numbers.append(number) \n            count += 1 \n        elif number > 50: \n            number -= 50 \n            numbers.append(number) \n            count += 1 \n        elif number > 100: \n            number -= 100 \n            numbers.append(number) \n            count += 1 \n    return number \ndef is_polite_7(n): \n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [1, 3, 5] \n    count = 0 \n    number = 1 \n    while count!= n: \n        number += 2 \n        if number not in numbers: \n            numbers.append(number) \n            count += 1 \n        elif number in numbers: \n            count -= 1 \n        elif number > 10: \n            number -= 10 \n            numbers.append(number) \n            count += 1 \n        elif number > 50: \n            number -= 50 \n            numbers.append(number) \n            count += 1 \n        elif number > 100: \n            number -= 100 \n            numbers.append(number) \n            count += 1 \n        elif number > 500: \n            number -= 500 \n            numbers.append(number) \n            count += 1 \n    return number \ndef is_polite_8(n): \n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [1, 3, 5] \n    count = 0 \n    number = 1 \n    while count!= n: \n        number += 2 \n        if number not in numbers: \n            numbers.append(number) \n            count += 1 \n        elif number in numbers: \n            count -= 1 \n        elif number > 10: \n            number -= 10 \n            numbers.append(number) \n            count += 1 \n        elif number > 50: \n            number -= 50 \n            numbers.append(number) \n            count += 1 \n        elif number > 100: \n            number -= 100 \n            numbers.append(number) \n            count += 1 \n        elif number > 500: \n            number -= 500 \n            numbers.append(number) \n            count += 1 \n        elif number > 1000: \n            number -= 1000 \n            numbers.append(number) \n            count += 1 \n    return number \ndef is_polite_9(n): \n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [1, 3, 5] \n    count = 0 \n    number = 1 \n    while count!= n: \n        number += 2 \n        if number not in numbers: \n            numbers.append(number) \n            count += 1 \n        elif number in numbers: \n            count -= 1 \n        elif number > 10: \n            number -= 10 \n            numbers.append(number) \n            count += 1 \n        elif number > 50: \n            number -= 50 \n            numbers.append(number) \n            count += 1 \n        elif number > 100: \n            number -= 100 \n            numbers.append(number) \n            count += 1 \n        elif number > 500: \n            number -= 500 \n            numbers.append(number) \n            count += 1 \n        elif number > 1000: \n            number -= 1000 \n            numbers.append(number) \n            count += 1 \n        elif number > 5000: \n            number -= 5000 \n            numbers.append(number) \n            count += 1 \n    return number \ndef is_polite_10(n): \n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [1, 3, 5] \n    count = 0 \n    number = 1 \n    while count!= n: \n        number += 2 \n        if number not in numbers: \n            numbers.append(number) \n            count += 1 \n        elif number in numbers: \n            count -= 1 \n        elif number > 1",
        "num_ids": 88
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #start with 1 and keep increasing by 1 till\n    #you reach the nth term\n    #always increment by 1 at each step\n    # if we encounter an even number then add 1 at the end \n    # because we need to increase the number by 1\n    #if you encounter an odd number then add 2 at the end\n    # because we need to increase the number by 2\n    count = 1\n    num = 1\n    polite_numbers = []\n    while count <= n:\n        num += 1\n        count += 1\n        if num%2 == 0:\n            polite_numbers.append(num+1)\n        else:\n            polite_numbers.append(num+2)\n    return polite_numbers[-1]\n",
        "num_ids": 176
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #nums=[]\n    #for i in range(1,n+1):\n    #    nums.append(i)\n    #print(nums)\n    #return int(nums[n-1])\n    return int((2*n-1)**0.5+1)\n",
        "num_ids": 73
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 1: \n        return False\n    if n == 2: \n        return True\n    if n == 3: \n        return False\n    if n % 2 == 0: \n        return False\n    if n % 3 == 0: \n        return False\n    \n    # All prime factors are 2, 3, 5, and 7\n    s = 5\n    while (n % s!= 0): \n        s += 8\n        \n    if (s >= 2 * n): \n        return False\n        \n    return True\n",
        "num_ids": 128
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return (math.factorial(2*n)//(math.factorial(n+1)*math.factorial(n)))\n",
        "num_ids": 33
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n==1):\n        return 2\n    elif(n==2):\n        return 4\n    elif(n==3):\n        return 6\n    elif(n==4):\n        return 8\n    elif(n==5):\n        return 10\n    elif(n==6):\n        return 12\n    elif(n==7):\n        return 14\n    elif(n==8):\n        return 16\n    elif(n==9):\n        return 18\n    elif(n==10):\n        return 20\n    else:\n        return (n*2) - 1\n        \ndef fact(n): \n    '''\n    Write a function that returns the factorial of a number.\n    '''\n    fact = 1\n    if(n == 0 or n == 1):\n        return fact\n    for i in range(1,n+1):\n        fact = fact * i\n    return fact \n",
        "num_ids": 48
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Base Case \n    if (n < 2): \n        return n \n    # Else\n    return (n * (n + 1)) / 2 \n",
        "num_ids": 40
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_polite_helper(n):\n        result = 1\n        while True:\n            result += 1\n            for i in range(2, int(math.sqrt(result)) + 1):\n                if result % i == 0:\n                    break\n            else:\n                yield result\n",
        "num_ids": 72
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n * (n - 1) \n",
        "num_ids": 13
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return 2\n    elif n==2:\n        return 3\n    elif n==3:\n        return 4\n    else:\n        return n*(n+1)//2\n",
        "num_ids": 53
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for idx in range(len(l1) - 1):\n        result.append([l1[idx], l1[idx+1]])\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # if not l1:\n    #     return None\n    # if len(l1) < 2:\n    #     return None\n    # if len(l1) == 2:\n    #     return [(l1[0],l1[1])]\n    # for i in range(len(l1)):\n    #     for j in range(i+1,len(l1)):\n    #         return [(l1[i],l1[j])]\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n",
        "num_ids": 141
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [tuple(l1[i:i+2]) for i in range(0, len(l1), 2)]\n",
        "num_ids": 32
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        pairs.append((l1[i], l1[i+1]))\n",
        "num_ids": 56
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)):\n        try:\n            pairs.append((l1[i], l1[i + 1]))\n        except:\n            pass\n    return pairs\n",
        "num_ids": 56
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n",
        "num_ids": 30
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2=[]\n    for i in range(0,len(l1)-1):\n        l2.append(l1[i])\n        l2.append(l1[i+1])\n    return l2\n",
        "num_ids": 55
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append([l1[i], l1[i+1]])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    l2 = []\n    for i in range(len(l1)-1):\n        pairs.append([l1[i], l1[i+1]])\n    return pairs\n",
        "num_ids": 52
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    lst = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                lst.append((arr[i], arr[j]))\n    return len(lst)\n",
        "num_ids": 75
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                pairs+=1\n    return pairs\n",
        "num_ids": 61
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                result += 1\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    left = 0\n    right = len(arr) - 1\n    pairs_count = 0\n    while left < right:\n        if arr[left] + arr[right] == sum:\n            pairs_count += 1\n            left += 1\n            right -= 1\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        else:\n            right -= 1\n    return pairs_count\n",
        "num_ids": 101
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n",
        "num_ids": 55
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    result = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                result += 1\n",
        "num_ids": 57
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr_len = len(arr)\n    for i in range(arr_len):\n        for j in range(i + 1, arr_len):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    print(len(list(filter(lambda x: x == sum, arr))))\n",
        "num_ids": 21
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n",
        "num_ids": 7
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n",
        "num_ids": 19
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1) - set(li2)))\n",
        "num_ids": 19
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n",
        "num_ids": 19
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n    \nprint(Diff(li1,li2))\n",
        "num_ids": 32
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(list(set(li1)-set(li2))+list(set(li2)-set(li1))))\n",
        "num_ids": 33
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n",
        "num_ids": 33
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n",
        "num_ids": 18
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num_list = []\n    for i in range(1,n+1):\n        if (i % 2!= 0) :\n            num_list.append(i*i*i*i)\n    return sum(num_list)\n",
        "num_ids": 59
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2) :\n        sum += i**4\n    return sum\n",
        "num_ids": 34
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1, 2) :\n        sum = sum + (i**4)\n    print(sum)\n",
        "num_ids": 40
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(n) :\n        if i % 2!= 0 :\n            total = total + (i**4)\n    return total\n",
        "num_ids": 42
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return (1 + n) * n * (n + 1) * (n + 2) * (n + 3) / 24\n",
        "num_ids": 32
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1, 2) :\n        s += i ** 4\n    return s\nprint(odd_num_sum(10))\nprint(odd_num_sum(100))\n",
        "num_ids": 56
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    summ = 0\n    for i in range(1, n+1, 2) : \n        summ += (i*i*i*i) \n    return summ\n    \nprint(odd_num_sum(100))\n",
        "num_ids": 57
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return(sum([i**4 for i in range(1,n+1,2)]))\n",
        "num_ids": 25
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i % 2 == 1):\n            sum += i ** 4\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1,2):\n        a += (i**4)\n    return a\n",
        "num_ids": 35
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_paren = set('({[')\n    close_paren = set(')}]')\n    open_par_deque = deque()\n    for char in exp:\n        if char in open_paren:\n            open_par_deque.append(char)\n        elif char in close_paren:\n            if not open_par_deque:\n                return False\n            if (char == ')' and open_par_deque.pop()!= '(') or (char == '}' and open_par_deque.pop()!= '{') or (char == ']' and open_par_deque.pop()!= '['):\n                return False\n    if not open_par_deque:\n        return True\n    else:\n        return False\n",
        "num_ids": 183
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack=deque()\n    for x in exp:\n        if x in ('(',')','{','}','[',']'):\n            stack.append(x)\n        else:\n            if len(stack)==0:\n                return False\n            t=stack.pop()\n            if x==')' and t!='(':\n                return False\n            elif x==']' and t!='[':\n                return False\n            elif x=='}' and t!='{':\n                return False\n    if len(stack)==0:\n        return True\n    return False\n",
        "num_ids": 141
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_chars = ['(', '{', '[']\n    close_chars = [')', '}', ']']\n    stack = deque()\n    for char in exp:\n        if char in open_chars:\n            stack.append(char)\n        if char in close_chars:\n            if len(stack) == 0:\n                return False\n            else:\n                last_element = stack.pop()\n                if last_element == '(' and char == ')':\n                    continue\n                elif last_element == '{' and char == '}':\n                    continue\n                elif last_element == '[' and char == ']':\n                    continue\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 191
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(','{','[']:\n            stack.append(i)\n        if i in [')','}',']']:\n            if not stack:\n                return False\n            else:\n                left_ch = stack.pop()\n                right_ch = i\n                if right_ch == ')' and left_ch == '(':\n                    continue\n                elif right_ch == '}' and left_ch == '{':\n                    continue\n                elif right_ch == ']' and left_ch == '[':\n                    continue\n                else:\n                    return False\n    if not stack:\n        return True\n    else:\n        return False\n",
        "num_ids": 167
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_brac = [\"(\", \"[\", \"{\"]\n    close_brac = [\")\", \"]\", \"}\"]\n",
        "num_ids": 33
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = deque()\n    for char in exp:\n        if char == '(':\n            s.append(char)\n        elif char == ')':\n            if len(s) == 0:\n                return False\n            s.pop()\n    if len(s) > 0:\n        return False\n    return True\n",
        "num_ids": 78
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = []\n    for i in exp:\n        if i in \"({[\":\n            s.append(i)\n        else:\n            if len(s) == 0:\n                return False\n            x = s.pop()\n            if i == \"}\" and x == \"{\" or i == \")\" and x == \"(\":\n                continue\n            elif i == \"]\" and x == \"[\" or i == \")\" and x == \"(\":\n                return False\n    if len(s) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 131
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == '(' or i == '[' or i == '{':\n            stack.append(i)\n        if i == ')':\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= '(':\n                return False\n        if i == ']':\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= '[':\n                return False\n        if i == '}':\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= '{':\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n",
        "num_ids": 170
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # A Deque (double ended queue) is used to store the operators. The Deque is initialized with all the operators.\n    # The deque is used to keep track of the opening and closing parentheses.\n",
        "num_ids": 48
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if(exp[i]=='('):\n            stack.append(exp[i])\n        elif(exp[i]==')'):\n            if(len(stack)!=0):\n                stack.pop()\n            else:\n                stack.append(exp[i])\n                break\n    if(len(stack)==0):\n        print('Balanced Expression')\n    else:\n        print('Unbalanced Expression')\n",
        "num_ids": 121
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    while K > 0:\n        test_str = test_str.replace(test_str[0:K], '')\n        K -= 1\n    return test_str\n",
        "num_ids": 42
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    sent = test_str.split(' ')\n    res = []\n    for word in sent:\n        if len(word)!= K:\n            res.append(word)\n",
        "num_ids": 44
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = \"I am an NLPer\"\n    K = 2\n",
        "num_ids": 20
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    print(test_str)\n    test_str = test_str.split()\n    print(test_str)\n    len_words = 0\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            len_words += 1\n    print(len_words)\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            test_str.pop(i)\n    print(test_str)\n    return \" \".join(test_str)\n",
        "num_ids": 137
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    while K!= 0:\n        for char in test_str.split(' '):\n            if len(char) == K:\n                test_str = test_str.replace(char, '')\n        K -= 1\n    return test_str\n",
        "num_ids": 60
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    l = []\n    for i in test_str:\n        if len(i)!= K:\n            l.append(i)\n    return \" \".join(l)\n",
        "num_ids": 55
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    length_list = []\n    for word in test_str:\n        if len(word) == K:\n            length_list.append(word)\n    print(length_list)\n    for element in length_list:\n        test_str.remove(element)\n    print(test_str)\n",
        "num_ids": 85
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split(' ')\n    i=0\n    while(i<len(test_str)):\n        if(len(test_str[i])==K):\n            test_str.remove(test_str[i])\n            i=0\n        else:\n            i+=1\n",
        "num_ids": 77
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # return''.join([elem for elem in test_str.split() if len(elem) < K])\n",
        "num_ids": 30
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split()\n    test_list = [len(item) for item in test_list]\n    result = [item for item in test_list if item!= K]\n    result = \" \".join(result)\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        return re.search(pattern,text).span()\n    except:\n        return None\n",
        "num_ids": 27
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    import re\n    matches = re.finditer(pattern, text)\n    positions = [match.start() for match in matches]\n    return positions\n",
        "num_ids": 39
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print(f'Occurance substring in \"{text}\" that matches \"{pattern}\" is \"{text.find(pattern)}\"')\n",
        "num_ids": 31
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    import re\n    pattern=re.compile(r'\\s{0,}[\\w]{3,}[\\s]{0,}')\n    matches=pattern.findall(text)\n    if matches:\n        return matches\n    return None\n",
        "num_ids": 65
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern,text)\n    for match in matches:\n        print(match)\ndef regex_match_word(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return True if there is a match, and False if there is no match.\n    '''\n    result = re.match(pattern,text)\n    if result == None:\n        print(\"pattern {} not found in the text {}\".format(pattern,text))\n    else:\n        print(\"pattern {} is found in the text {}\".format(pattern,text))\ndef search_for_single_word(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return the first match. Return None if there is no match.\n    '''\n    result = re.search(pattern,text)\n    if result == None:\n        print(\"pattern {} not found in the text {}\".format(pattern,text))\n    else:\n        print(\"pattern {} is found in the text {}\".format(pattern,text))\ndef find_all_occurances(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef search_for_multiple_words(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_all_matches(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_all_matches_from_beginning(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_all_matches_from_end(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_regex_quantifier(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_word_quantifier(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text)\n    print(result)\ndef find_matches_with_character_class(text,pattern):\n    '''\n    Write a regular expression to search for words within a string. Return all the matches.\n    '''\n    result = re.findall(pattern,text",
        "num_ids": 13
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.findall(pattern, text)\n    if match:\n        return match\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # # pattern=\"a\"\n    # # pattern=\"ab\"\n    # # pattern=\"aa\"\n    # # pattern=\"abcd\"\n    # # pattern=\"abc\"\n    # # pattern=\"abcabc\"\n    # # pattern=\"abcabcdef\"\n    # # pattern=\"babc\"\n    # # pattern=\"babcde\"\n    # # pattern=\"cbab\"\n    # # pattern=\"cbabc\"\n    # # pattern=\"cbabcde\"\n    # # pattern=\"cbabcdef\"\n    # # pattern=\"cbabcdefg\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabce\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabce\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"\n    # # pattern=\"cbabcd\"",
        "num_ids": 1999
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Note: can search for substring with wild card * but cannot search for substring starting with wild card\n    # Make use of regular expressions\n    # re.findall() method matches all the strings that matches the given regular expression pattern\n    # re.finditer() method returns an iterator over the matches\n    # re.split() method returns a list of string by breaking the given string by the occurrences of the pattern\n    # re.search() method searches the string for a match, and returns a match object if there is a match\n    # re.match() method searches the string for a match, and returns a match object if there is a match\n    # re.sub() method replace all occurrences of the pattern in the string with repl\n    # re.compile() method returns a regular expression object\n",
        "num_ids": 176
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # if re.search(pattern,text):\n    #     substring=re.search(pattern,text).group()\n    #     return f'{substring} occurs {text.count(substring)} times and position is {re.search(pattern,text).start()}'\n    # else:\n    #     return 'No occurance of substring'\n    return re.search(pattern,text).group(),re.search(pattern,text).start()\n",
        "num_ids": 109
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    list_of_words=[]\n    indices_list=[]\n    for word in text.split():\n        if pattern in word:\n            list_of_words.append(word)\n            indices_list.append(word.index(pattern))\n    if len(list_of_words)==0:\n        return None\n    else:\n        return list_of_words,indices_list\n    \nprint(occurance_substring('this is an apple','apple'))\n",
        "num_ids": 116
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) < 2:\n        return 'invalid list'\n    for i in range(1, len(nums)+1, 2):\n        if nums[i-1] % 2!= 0:\n            return 'Invalid'\n    return 'Valid'\n",
        "num_ids": 67
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if nums.count(2) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums)+1,2):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef perfect_number(nums):\n    '''\n    Write a python function to check whether every number of a given list is perfect number or not.\n    '''\n    sum = 0\n    for i in nums:\n        for j in range(1,i):\n            if i%j==0:\n                sum = sum+j\n        if sum==i:\n            print(i,\"is perfect number\")\n        else:\n            print(i,\"is not perfect number\")\n        sum = 0\n",
        "num_ids": 79
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # for i in range(len(nums)):\n    #     if i % 2!= 0 and nums[i] % 2 == 0:\n    #         return False\n    # return True\n",
        "num_ids": 49
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    def odd_index(index):\n        if index % 2!= 0:\n            return nums[index] % 2!= 0\n        return False\n    return all(map(odd_index, range(1, len(nums) + 1)))\n",
        "num_ids": 61
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    print(\"Input list: \", nums)\n    count = 0\n    for i in range(0, len(nums), 1):\n        if (i % 2) == 1:\n            if nums[i] % 2!= 0:\n                count = count + 1\n    if count == len(nums):\n        return True\n    else:\n        return False\n",
        "num_ids": 88
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(1, len(nums), 2):\n        if nums[index] % 2 == 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    i = 0\n    for i in range(len(nums)):\n        if (i % 2 == 0):\n            if (nums[i] % 2 == 0):\n                return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    if len(nums)<=0:\n        return False\n    odds=[]\n    for i in range(0,len(nums),2):\n        odds.append(nums[i])\n    print(odds)\n    if len(set(odds))==1 and len(nums)==len(odds):\n        return True\n    return False\n    \ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums)<=0:\n        return False\n    evens=[]\n    for i in range(1,len(nums),2):\n        evens.append(nums[i])\n    print(evens)\n    if len(set(evens))==1 and len(nums)==len(evens):\n        return True\n    return False\n",
        "num_ids": 91
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    num_vowels = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] == \"a\" or test_str[i] == \"A\" or test_str[i] == \"e\" or test_str[i] == \"E\" or test_str[i] == \"i\" or test_str[i] == \"I\" or test_str[i] == \"o\" or test_str[i] == \"O\" or test_str[i] == \"u\" or test_str[i] == \"U\":\n            if test_str[i+1] == \"a\" or test_str[i+1] == \"A\" or test_str[i+1] == \"e\" or test_str[i+1] == \"E\" or test_str[i+1] == \"i\" or test_str[i+1] == \"I\" or test_str[i+1] == \"o\" or test_str[i+1] == \"O\" or test_str[i+1] == \"u\" or test_str[i+1] == \"U\":\n                num_vowels += 1\n    return num_vowels\n",
        "num_ids": 287
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    test_str = test_str.lower()\n    neighbor_vowel = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels:\n            if test_str[i+1] in vowels:\n                neighbor_vowel += 1\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            neighbor_vowel += 1\n    return neighbor_vowel\n",
        "num_ids": 135
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    counter = 0\n    for index, char in enumerate(test_str):\n        if char in vowels:\n            if (char!= test_str[index-1]) and (char!= test_str[index+1]):\n                counter += 1\n    return counter\n",
        "num_ids": 81
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'))\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels:\n            if test_str[i+1] in vowels:\n                count += 1\n    return count\n",
        "num_ids": 98
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    cnt = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u']:\n            if test_str[i+1] in ['a', 'e', 'i', 'o', 'u']:\n                cnt += 1\n    return cnt\n",
        "num_ids": 88
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_counter = 0\n    \n    for char in test_str:\n        if char in vowels:\n            if test_str[test_str.index(char)-1] in vowels or test_str[test_str.index(char)+1] in vowels:\n                vowel_counter += 1\n    \n    return vowel_counter\n    \ndef count_vowels_v2(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_counter = 0\n    \n    for i, char in enumerate(test_str):\n        if char in vowels:\n            #print(i, char, test_str[i-1], test_str[i+1])\n            if test_str[i-1] in vowels or test_str[i+1] in vowels:\n                vowel_counter += 1\n    \n    return vowel_counter\n    \nif __name__ == '__main__':\n    #print(count_vowels('uuu'))\n    print(count_vowels_v2('uuu'))\n    ",
        "num_ids": 171
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u':\n            if i == 0 and test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u':\n                count += 1\n            elif i == len(test_str) -1 and test_str[i-1] == 'a' or test_str[i-1] == 'e' or test_str[i-1] == 'i' or test_str[i-1] == 'o' or test_str[i-1] == 'u':\n                count += 1\n            elif test_str[i-1] == 'a' or test_str[i-1] == 'e' or test_str[i-1] == 'i' or test_str[i-1] == 'o' or test_str[i-1] == 'u':\n                if test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u':\n                    count += 1\n        elif test_str[i] == 'A' or test_str[i] == 'E' or test_str[i] == 'I' or test_str[i] == 'O' or test_str[i] == 'U':\n            if i == 0 and test_str[i+1] == 'A' or test_str[i+1] == 'E' or test_str[i+1] == 'I' or test_str[i+1] == 'O' or test_str[i+1] == 'U':\n                count += 1\n            elif i == len(test_str) -1 and test_str[i-1] == 'A' or test_str[i-1] == 'E' or test_str[i-1] == 'I' or test_str[i-1] == 'O' or test_str[i-1] == 'U':\n                count += 1\n            elif test_str[i-1] == 'A' or test_str[i-1] == 'E' or test_str[i-1] == 'I' or test_str[i-1] == 'O' or test_str[i-1] == 'U':\n                if test_str[i+1] == 'A' or test_str[i+1] == 'E' or test_str[i+1] == 'I' or test_str[i+1] == 'O' or test_str[i+1] == 'U':\n                    count += 1\n    return count\n",
        "num_ids": 740
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    counter = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels:\n            if test_str[i + 1] in vowels:\n                counter += 1\n    \n    return counter\n",
        "num_ids": 87
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    counter = 0\n    if len(test_str) <= 1:\n        return 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiouAEIOU' and test_str[i+1] in 'aeiouAEIOU':\n            counter += 1\n    return counter\n",
        "num_ids": 83
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i-1] in \"aeiou\" or test_str[i+1] in \"aeiou\":\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 74
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x = set(arr)\n    return sum(x)\n    \n",
        "num_ids": 19
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)): \n        if arr[abs(arr[i])] >= 0: \n            arr[abs(arr[i])] = -arr[abs(arr[i])] \n        else: \n            sum += abs(arr[i]) \n    return sum \n  \n",
        "num_ids": 82
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # A dictionary which keeps a count of all the unique elements in the given array\n    d = dict() \n    for x in arr: \n        if x not in d: \n            d[x] = 1\n        else: \n            d[x] += 1\n",
        "num_ids": 65
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # variable to store the sum \n    sum = 0\n    # variable to store the count \n    count = 0\n    # store the current element as key \n    # and count as value in dictionary \n    dict = {} \n",
        "num_ids": 56
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    res = 0\n    for i in arr: \n        if i not in res: \n            res += i\n    return res \n",
        "num_ids": 34
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    print(\"Input array:\", arr)\n    # Check if the array contains only unique elements.\n    if len(arr) == len(set(arr)):\n        print(\"All unique elements\")\n    # If all the elements are unique, the sum of all the non-repeating elements is equal to the sum of all the elements.\n    else:\n        print(\"Non-repeating elements: \", list(set(arr)))\n        print(\"Sum of non-repeating elements: \", sum(set(arr)))\n    return\nfind_sum([1,2,3,4,3,4,4])\nfind_sum([1,2,3,4,5,6,7])\nfind_sum([1,1,2,3,4,5,5,6,7])\nfind_sum([1,1,2,3,4,5,5,6,7,8])\nfind_sum([1,1,1,1,1,1,1,1,1,1,1,1])\n",
        "num_ids": 235
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    print(sum([i for i in arr if arr.count(i)==1]))\n    \n    \nif __name__ == '__main__':\n    arr = [1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8]\n    find_sum(arr)\n",
        "num_ids": 84
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr) \n    sum = 0\n    for i in range(0, n): \n        if arr[i] not in arr[i + 1:]: \n            sum += arr[i] \n    return sum \n",
        "num_ids": 59
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # Initialize a variable to hold the sum\n    sum_elements = 0\n    \n    # Iterate through the list\n    for element in arr:\n        \n        # Check if the element is non-repeated\n        if element not in arr[:arr.index(element)]:\n            sum_elements += element\n            \n    return sum_elements\n",
        "num_ids": 87
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[:i] + arr[i+1:]:\n            sum += arr[i]\n    return sum\nprint(find_sum([1,2,3,4,1]))\n",
        "num_ids": 71
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new = []\n    for key,group in groupby(list1):\n        new.append(list(group))\n    return new\n",
        "num_ids": 34
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2=[]\n    for key, group in groupby(list1):\n        list2.append(list(group))\n    return list2\n",
        "num_ids": 37
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def counter(list1):\n        count = 0\n        for i in list1:\n            if i==count:\n                count = count+1\n            else:\n                count = 1\n        return count\n    packed_list = []\n    for key, value in groupby(list1,counter):\n        packed_list.append(list(value))\n    return packed_list\n",
        "num_ids": 90
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    \n    #list1 = [1,1,1,2,3,4,5,1]\n    #list1 = [1,1,1,1,1,1,1,1,1,1]\n    \n    \n    \n    x = []\n    for key,value in groupby(list1):\n        value = list(value)\n        x.append(value)\n        \n    x = [list(group) for key, group in groupby(list1)]\n    \n    return(x)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1999
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    duplicates = list1\n    duplicates.sort()\n    result = list()\n    for key, group in groupby(duplicates):\n        result.append(list(group))\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1_sorted=sorted(list1)\n    list1_group=[]\n    for key, group in groupby(list1_sorted,lambda x: x):\n        list1_group.append(list(group))\n    result=[]\n    for i in range(0,len(list1_group)):\n        result.append(list(list1_group[i][0]))\n    print(result)\n    return result\npack_consecutive_duplicates([1,2,3,4,4,5,5,6,7,7])\n",
        "num_ids": 139
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = [[item, sum(1 for _ in group)] for item, group in groupby(list1)]\n    list3 = []\n    for item in list2:\n        list3.append(item[0])\n        list3.append(item[1])\n    list4 = [list3[i:i+2] for i in range(0, len(list3), 2)]\n    return list4\n    \nprint(pack_consecutive_duplicates([1,2,3,4,4,4,5,6,7,8]))",
        "num_ids": 134
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    for key, group in groupby(list1, lambda x: x == x+1):\n        print(key, list(group))\n        \npack_consecutive_duplicates([1, 1, 1, 2, 3, 4, 4, 4, 5, 5, 6, 6])\n",
        "num_ids": 73
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    list_1 = []\n    for key, group in groupby(list1):\n        list_1.append(list(group))\n    return list_1\n",
        "num_ids": 47
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        if list1[i] in dict1:\n            dict1[list1[i]].append(i)\n        else:\n            dict1[list1[i]] = [i]\n    \n    list2 = []\n    for i in dict1:\n        list2.append(dict1[i])\n    \n    return list2\n    \ndef get_numbers_from_string(str1):\n    '''\n    Write a function to get all the numbers from a string.\n    '''\n    list1 = []\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            list1.append(str1[i])\n    return list1\n    \ndef reverse_a_string(str1):\n    '''\n    Write a function to get the reverse of a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_words(str1):\n    '''\n    Write a function to reverse each word in a string.\n    '''\n    str1 = str1.split(' ')\n    str1 = reversed(str1)\n    return''.join(str1)\n    \ndef get_factors_of_a_number(num1):\n    '''\n    Write a function to get the factors of a number.\n    '''\n    list1 = []\n    for i in range(1, num1+1):\n        if num1%i == 0:\n            list1.append(i)\n    return list1\n    \ndef check_if_number_is_perfect(num1):\n    '''\n    Write a function to check if a number is perfect.\n    '''\n    list1 = get_factors_of_a_number(num1)\n    sum1 = 0\n    for i in list1:\n        sum1 += i\n    if sum1 == num1:\n        return True\n    else:\n        return False\n    \ndef sum_of_all_odd_and_even_numbers(list1):\n    '''\n    Write a function to find the sum of all the even and odd numbers from a given list.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in list1:\n        if i%2 == 0:\n            sum1 += i\n        else:\n            sum2 += i\n    return [sum1, sum2]\n    \ndef print_a_number_in_words(num1):\n    '''\n    Write a function to print a number in words.\n    '''\n    if num1 == 0:\n        return 'zero'\n    elif num1 == 1:\n        return 'one'\n    elif num1 == 2:\n        return 'two'\n    elif num1 == 3:\n        return 'three'\n    elif num1 == 4:\n        return 'four'\n    elif num1 == 5:\n        return 'five'\n    elif num1 == 6:\n        return'six'\n    elif num1 == 7:\n        return'seven'\n    elif num1 == 8:\n        return 'eight'\n    elif num1 == 9:\n        return 'nine'\n    \ndef replace_char_in_string(str1, char1, char2):\n    '''\n    Write a function to replace all occurrences of a character in a string with another character.\n    '''\n    return str1.replace(char1, char2)\n    \ndef convert_a_string_into_a_list(str1):\n    '''\n    Write a function to convert a string to a list.\n    '''\n    return list(str1)\n    \ndef remove_duplicates_from_list(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(list1))\n    \ndef get_odd_numbers_from_list(list1):\n    '''\n    Write a function to get the odd numbers from a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i%2 == 1:\n            list2.append(i)\n    return list2\n    \ndef add_element_to_list_if_not_present(list1, element):\n    '''\n    Write a function to add an element to the list, if it is not already present.\n    '''\n    if element not in list1:\n        list1.append(element)\n    return list1\n    \ndef find_all_pairs_of_numbers_with_sum_k(list1, k):\n    '''\n    Write a function to get all the pairs from a list with sum k.\n    '''\n    dict1 = {}\n    list2 = []\n    for i in list1:\n        if i in dict1:\n            dict1[i].append(i)\n        else:\n            dict1[i] = [i]\n    for i in dict1:\n        if k-i in dict1:\n            list2.append([i, k-i])\n    return list2\n    \ndef get_number_of_unique_characters_from_a_string(str1):\n    '''\n    Write a function to get the number of unique characters from a string.\n    '''\n    return len(set(str1))\n    \ndef get_number_of_words_with_first_letter_capitalized_in_a_sentence(str1):\n    '''\n    Write a function to get the number of words with first letter capitalized in a sentence.\n    '''\n    str1 = str1.split(' ')\n    str1 = [i for i in str1 if i.istitle() == True]\n    return len(str1)\n    \ndef get_number_of_words_with_all_letters_capitalized_in_a_sentence(str1):\n    '''\n    Write a function to get the number of words with all letters capitalized in a sentence.\n    '''\n    str1 = str1.split(' ')\n    str1 = [i for i in str1 if i.isupper() == True]\n    return len(str1)\n    \ndef get_number_of_words_with_first_letter_capitalized_and_all_other_letters_lower_case_in_a_sentence(str1):\n    '''\n    Write a function to get the number of words with first letter capitalized and all other letters lower case in a sentence.\n    '''\n    str1 = str1.split(' ')\n    str1 = [i for i in str1 if i.istitle() == True]\n    str1 = [i for i in str1 if i.isupper() == False]\n    return len(str1)\n    \ndef get_number_of_capital_words_in_a_sentence(str1):\n    '''\n    Write a function to get the number of capital words in a sentence.\n    '''\n    str1 = str1.split(' ')\n    str1 = [i for i in str1 if i.istitle() == True]\n    return len(str1)\n    \ndef get_list_of_capitals_in_a_sentence(str1):\n    '''\n    Write a function to get the list of capitals in a sentence.\n    '''\n    str1 = str1.split(' ')\n    str1 = [i for i in str1 if i.istitle() == True]\n    return str1\n    \ndef get_number_of_words_in_a_sentence_with_first_letter_capitalized(str1):\n    '''\n    Write a function to get the number of words in a sentence with first letter capitalized.\n    '''\n    str1 = str1.split(' ')\n    str1 = [i for i in str1 if i.istitle() == True]\n    return len(str1)\n    \ndef get_number_of_words_in_a_sentence_with_all_letters_capitalized(str1):\n    '''\n    Write a function to get the number of words in a sentence with all letters capitalized.\n    '''\n    str1 = str1.split(' ')\n    str1 = [i for i in str1 if i.isupper() == True]\n    return len(str1)\n    \ndef get_number_of_words",
        "num_ids": 53
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    print(\"Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\")\n    list1 = ['a', 'a', 'b', 'b', 'b']\n    list_dict = {}\n    for item in list1:\n        if item in list_dict:\n            list_dict[item] += 1\n        else:\n            list_dict[item] = 1\n    for key,value in list_dict.items():\n        print(key, \":\", value)\n",
        "num_ids": 140
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_tuple = {}\n    if len(list1) > 0:\n        for l in list1:\n            list_tuple[tuple(l)] = list_tuple.get(tuple(l),0) + 1\n    return list_tuple\n",
        "num_ids": 65
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def tuplify(list1):\n        '''\n        Write a function to convert a list to a tuple.\n        '''\n        tuple1 = tuple(list1)\n        return tuple1\n",
        "num_ids": 18
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for i in list1:\n        if type(i) == list:\n            result[tuple(i)] = list1.count(i)\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    new_list = list(set(list1))\n    counter = dict.fromkeys(new_list, 0)\n    for item in list1:\n        counter[item] += 1\n    return counter\n",
        "num_ids": 50
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    for l in list1:\n        list2.append(tuple(l))\n    return dict(Counter(list2))\n",
        "num_ids": 38
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    tuple1 = [tuple(x) for x in list1]\n    #print(tuple1)\n    #print(type(tuple1))\n    #print(type(tuple1[0]))\n    tuple_list = []\n    for x in tuple1:\n        if x in tuple_list:\n            continue\n        else:\n            tuple_list.append(x)\n    #print(tuple_list)\n    return tuple_list\n    \n    \ndef get_sublist(list1):\n    '''\n    Write a function to return a dictionary of the sublists of a given list, where the sublists have a given length. The key of the dictionary should be the sublist and the value is the number of occurrences of the sublist. \n    '''\n    length = int(input('Enter length of sublists: '))\n    dict1 = {}\n    list_of_lists = []\n    for x in list1:\n        temp = []\n        i = 0\n        while i < len(x):\n            temp.append(x[i])\n            if len(temp) == length:\n                if tuple(temp) in list_of_lists:\n                    continue\n                else:\n                    list_of_lists.append(tuple(temp))\n                    dict1[tuple(temp)] = 1\n            i += 1\n    return dict1\n    \n",
        "num_ids": 140
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    import collections\n    list2 = []\n    for i in list1:\n        list2.append(i)\n    list3 = []\n    for j in list2:\n        list3.append(tuple(j))\n    counts = collections.Counter(list3)\n    dictionary = dict(counts)\n    print(dictionary)\n",
        "num_ids": 84
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = [1,2,3,4,5,4,3,2,1,1,2,3,4,5,4,3,2,1]\n    #list1 = [1,2,3,4,5,4,3,2,1,1,2,3,4,5,4,3,2,1,1,2,3,4,5,4,3,2,1,1,2,3,4,5,4,3,2,1]\n    \n    count_dict = {}\n    for i in list1:\n        if tuple(i) not in count_dict:\n            count_dict[tuple(i)] = 1\n        else:\n            count_dict[tuple(i)] += 1\n    return count_dict\n",
        "num_ids": 189
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dic = {}\n    for i in list1:\n        tup = tuple(i)\n        if tup in dic:\n            dic[tup] = dic[tup] + 1\n        else:\n            dic[tup] = 1\n    return dic\n",
        "num_ids": 70
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    combinations_list = []\n    for i in range(1,n+1):\n        combinations_list.extend(list(combinations(test_list,i)))\n    return combinations_list\n",
        "num_ids": 60
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list) + 1):\n        combinations_list = list(combinations(test_list, i))\n        #print (combinations_list)\n        for i in range(len(combinations_list)):\n            print (combinations_list[i])\n    return combinations_list\n",
        "num_ids": 80
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list = []\n    for i in test_list:\n        if sum(i) not in final_list:\n            final_list.append(sum(i))\n    print(final_list)\n    final_list.sort()\n    return final_list\n    \ndef t1(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4)]))\n    \ndef t2(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(5,7,8)]))\n    \ndef t3(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(1,2,3,4),(5,7,8)]))\n    \ndef t4(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(5,7,8),(8,9,9),(1,1,1,1),(5,5,5,5)]))\n    \ndef t5(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(1,2,3,4),(5,7,8)]))\n    \ndef t6(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(1,2,3,4),(5,7,8),(9,9,9,9),(1,1,1,1),(5,5,5,5),(1,2,3,4)]))\n    \ndef t7(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(5,7,8),(1,1,1,1),(5,5,5,5),(1,2,3,4)]))\n    \ndef t8(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(5,7,8),(9,9,9,9),(1,1,1,1),(5,5,5,5),(1,2,3,4)]))\n    \ndef t9(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(5,7,8),(9,9,9,9),(1,1,1,1),(5,5,5,5),(1,2,3,4)]))\n    \ndef t10(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(5,7,8),(9,9,9,9),(1,1,1,1),(5,5,5,5),(1,2,3,4)]))\n",
        "num_ids": 852
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list)+1):\n        combo = list(combinations(test_list,i))\n        for item in combo:\n            res.append(sum(item))\n    return res\n",
        "num_ids": 61
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            combinations.append(test_list[i] + test_list[j])\n    return combinations\n",
        "num_ids": 64
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = [(0,5), (2,1), (3,4), (5,8), (9,7)]\n    \n    # combinations return all subsets\n    # for 2 numbers \n    # subset = (0,1), (0,2), (0,3)\n    # c = [(0,1), (0,2), (0,3), (1,2), (1,3), (2,3)]\n    # for 3 numbers\n    # subset = (0,1,2), (0,1,3), (0,2,3), (1,2,3)\n    # c = [(0,1,2), (0,1,3), (0,2,3), (1,2,3)]\n    # for 4 numbers\n    # subset = (0,1,2,3), (0,1,2,4), (0,1,3,4), (0,2,3,4)\n    # c = [(0,1,2,3), (0,1,2,4), (0,1,3,4), (0,2,3,4)]\n    # for 5 numbers\n    # subset = (0,1,2,3,4), (0,1,2,3,5), (0,1,2,4,5), (0,1,3,4,5)\n    # c = [(0,1,2,3,4), (0,1,2,3,5), (0,1,2,4,5), (0,1,3,4,5)]\n    # for 6 numbers\n    # subset = (0,1,2,3,4,5), (0,1,2,3,5,6), (0,1,2,3,6,6), (0,1,2,4,5,6)\n    # c = [(0,1,2,3,4,5), (0,1,2,3,5,6), (0,1,2,3,6,6), (0,1,2,4,5,6)]\n    # for 7 numbers\n    # subset = (0,1,2,3,4,5,6,6), (0,1,2,3,4,5,7), (0,1,2,3,4,6,7), (0,1,2,3,5,6,7), (0,1,2,4,5,6,7), (0,1,3,4,5,6,7), (0,2,3,4,5,6,7)\n    # c = [(0,1,2,3,4,5,6,6), (0,1,2,3,4,5,7), (0,1,2,3,4,6,7), (0,1,2,3,5,6,7), (0,1,2,4,5,6,7), (0,1,3,4,5,6,7), (0,2,3,4,5,6,7)]\n    # for 8 numbers\n    # subset = (0,1,2,3,4,5,6,6,7), (0,1,2,3,4,5,6,7,8), (0,1,2,3,4,5,6,8,8), (0,1,2,3,4,5,7,8,8), (0,1,2,3,4,6,7,8,8), (0,1,2,3,5,6,7,8,8), (0,1,3,4,5,6,7,8,8), (0,2,3,4,5,6,7,8,8)\n    # c = [(0,1,2,3,4,5,6,6,7), (0,1,2,3,4,5,6,7,8), (0,1,2,3,4,5,6,8,8), (0,1,2,3,4,5,7,8,8), (0,1,2,3,4,6,7,8,8), (0,1,2,3,5,6,7,8,8), (0,1,3,4,5,6,7,8,8)]\n    # for 9 numbers\n    # subset = (0,1,2,3,4,5,6,6,7,8), (0,1,2,3,4,5,6,7,8,9), (0,1,2,3,4,5,6,8,9,9), (0,1,2,3,4,5,7,8,9,9), (0,1,2,3,5,6,7,8,9,9), (0,1,3,4,5,6,7,8,9,9), (0,2,3,4,5,6,7,8,9,9), (0,1,2,3,4,5,6,7,8,9)\n    # c = [(0,1,2,3,4,5,6,6,7,8), (0,1,2,3,4,5,6,7,8,9), (0,1,2,3,4,5,6,8,9,9), (0,1,2,3,4,5,7,8,9,9), (0,1,2,3,5,6,7,8,9,9), (0,1,3,4,5,6,7,8,9,9), (0,2,3,4,5,6,7,8,9,9)]\n    # for 10 numbers\n    # subset = (0,1,2,3,4,5,6,6,7,8,9), (0,1,2,3,4,5,6,7,8,9,10), (0,1,2,3,4,5,6,8,9,9,10), (0,1,2,3,4,5,7,8,9,9,10), (0,1,2,3,5,6,7,8,9,9,10), (0,1,3,4,5,6,7,8,9,9,10), (0,2,3,4,5,6,7,8,9,9,10), (0,1,2,3,4,5,6,7,8,9,10)\n    # c = [(0,1,2,3,4,5,6,6,7,8,9), (0,1,2,3,4,5,6,7,8,9,10), (0,1,2,3,4,5,6,8,9,9,10), (0,1,2,3,4,5,7,8,9,9,10), (0,1,2,3,5,6,7,8,9,9,10), (0,1,3,4,5,6,7,8,9,9,10), (0,2,3,4,5,6,7,8,9,9,10)]\n    # for 11 numbers\n    # subset = (0,1,2,3,4,5,6,6,7,8,9,10), (0,1,2,3,4,5,6,7,8,9,10,11), (0,1,2,3,4,5,6,8,9,9,10,11), (0,1,2,3,4,5,7,8,9,9,10,11), (0,1,2,3,5,6,7,8,9,9,10,11), (0,1,3,4,5,6,7,8,9,9,10,11), (0,2,3,4,5,6,7,8,9,9,10,11), (0,1,2,3,4,5,6,7,8,9,10,11)\n    # c = [(0,1,2,3,4,5,6,6,7,8,9,10), (0,1,2,3,4,5,6,7,8",
        "num_ids": 1970
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list.sort()\n    combination_list = []\n    for i in range(1, len(test_list)):\n        comb = combinations(test_list, i)\n        combination_list += list(comb)\n    return combination_list\n",
        "num_ids": 63
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # print(list(combinations([1, 2, 3, 4], 2))) \n    #[(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\n    # print(list(combinations([1, 2, 3, 4, 5], 2))) \n    #[(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]\n    # print(list(combinations([1, 2, 3, 4, 5], 3))) \n    #[(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]\n    # print(list(combinations([1, 2, 3, 4, 5], 4))) \n    #[(1, 2, 3, 4), (1, 2, 3, 5), (1, 2, 4, 5), (1, 3, 4, 5), (2, 3, 4, 5)]\n    # print(list(combinations([1, 2, 3, 4, 5], 5))) \n    #[(1, 2, 3, 4, 5)]\n",
        "num_ids": 341
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = []\n    for i in range(0,len(test_list)):\n        for j in range(0,len(test_list)):\n            if(i!= j):\n                sums.append(tuple(sorted((test_list[i],test_list[j]))))\n",
        "num_ids": 75
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [combination for combination in combinations(test_list, 2) if sum(combination) == 2020]\n",
        "num_ids": 28
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 1) : \n        return 1\n    if (n == 2) : \n        return 1\n    if (n % 2 == 0) : \n        return 2\n    if (n % 2!= 0) : \n        return (2*((n+1)//2) + 1)\n    return n\n",
        "num_ids": 80
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            count = count + 1\n    if count % 2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 70
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1) : \n        if n % i == 0 : \n            if n/i == i : \n                count += 1\n            else : \n                count += 2\n    return count \n",
        "num_ids": 68
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            count = count + 1\n    if count%2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # You need to write code here\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    if count%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    x = 1\n    count = 0\n    while x < n : \n        if n % x == 0 : \n            count = count + 1\n        x = x + 1\n    if count%2 == 0 : \n        return \"even\"\n    else : \n        return \"odd\"\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    #checking divisors \n    divisors = []\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n/i)\n    count = len(divisors)\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    cnt = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            if n/i == i : \n                cnt += 1\n            else : \n                cnt += 2\n    return cnt",
        "num_ids": 72
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    x=1\n    count=0\n    for i in range(1,math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            x=x+1\n            if x%2==0:\n                count=count+1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count += 1\n            else : \n                count += 2\n    return count \n",
        "num_ids": 74
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) < 2:\n        return 0\n    sum = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i + 1) % 2 == 1:\n                sum = sum + arr[j] - arr[i]\n    return sum\n",
        "num_ids": 83
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    length = len(arr)\n    \n    # Check if array has odd number of elements\n    if length % 2 == 0:\n        return -1\n    \n    start = 0\n    end = 2\n    \n    # While loop to iterate for all subarrays of odd length\n    while(end < length):\n        print(arr[start:end])\n        start = start + 2\n        end = end + 2\n        ",
        "num_ids": 100
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # def odd_length_sum(arr):\n    # arr = list(map(int, input().split()))\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if(len(arr[i:j+1]) % 2!= 0):\n                sum += sum(arr[i:j+1])\n    return sum\n",
        "num_ids": 99
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return \"Empty Array\"\n",
        "num_ids": 15
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        if len(arr[i:])%2!=0:\n            odd_sum += sum(arr[i:])\n    return odd_sum\n",
        "num_ids": 56
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([sum(arr[i:i+n]) for i in range(len(arr)) if len(arr[i:i+n]) % 2 == 1 for n in range(1,len(arr[i:i+n]))])\n",
        "num_ids": 60
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i) % 2!= 0:\n                s += sum(arr[i:j + 1])\n    return s\n",
        "num_ids": 65
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr = [1, 2, 3, 4, 5]\n    sum_odd = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i + 1) % 2!= 0:\n                sum_odd += sum(arr[i:j + 1])\n    return sum_odd\n    \nprint(odd_length_sum([1, 2, 3, 4, 5])) # --> 21\nprint(odd_length_sum([1, 2, 3, 4, 5, 6])) # --> 30\nprint(odd_length_sum([1, 2, 3, 4, 5, 6, 7])) # --> 28\nprint(odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8])) # --> 32\nprint(odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9])) # --> 32\nprint(odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # --> 36\nprint(odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) # --> 40\nprint(odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])) # --> 44\n",
        "num_ids": 330
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum=0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            sum+=arr[i:j+1]\n    return sum\ndef euqal_sum_subarray(arr):\n    '''\n    Write a python function to find the maximum length of subarray with equal sum. https://www.geeksforgeeks.org/maximum-length-subarray-with-equal-sum/\n    '''\n    sum=arr[0]\n    l=0\n    m=0\n    for i in range(len(arr)):\n        sum+=arr[i]\n        if sum==0:\n            m=i+1\n        elif sum==0:\n            m=i\n        if sum==0:\n            l=i\n    return m,l\ndef common_element_between_two_sorted_arrays(arr1,arr2):\n    '''\n    Write a python function to find the common elements in two sorted arrays. https://www.geeksforgeeks.org/common-elements-in-two-sorted-arrays/\n    '''\n    i=0\n    j=0\n    a=[]\n    while i<len(arr1) and j<len(arr2):\n        if arr1[i]==arr2[j]:\n            a.append(arr1[i])\n            i+=1\n            j+=1\n        elif arr1[i]>arr2[j]:\n            j+=1\n        elif arr1[i]<arr2[j]:\n            i+=1\n    return a\ndef find_substrings(str):\n    '''\n    Write a python function to find all the substrings of a string. https://www.geeksforgeeks.org/python-program-to-print-all-the-substrings-of-a-given-string/\n    '''\n    sub=[]\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            sub.append(str[i:j+1])\n    return sub\ndef rotate_string(str,d):\n    '''\n    Write a python function to rotate a string. https://www.geeksforgeeks.org/python-program-for-left-rotation-of-a-string/\n    '''\n    s=''\n    for i in range(d):\n        s=s+str[i]\n    return s+str[d:]\ndef remove_duplicates_from_sorted_array(arr):\n    '''\n    Write a python function to remove duplicates from sorted array. https://www.geeksforgeeks.org/python-program-to-remove-duplicates-from-sorted-array/\n    '''\n    i=0\n    j=1\n    while j<len(arr):\n        if arr[j]==arr[i]:\n            j+=1\n        else:\n            i+=1\n            arr[i]=arr[j]\n            j+=1\n    return i+1,arr[:i+1]\ndef create_linked_list(arr):\n    '''\n    Write a python function to create a linked list. https://www.geeksforgeeks.org/python-program-for-linked-list/\n    '''\n    head=None\n    for i in range(len(arr)):\n        if i==0:\n            head=Node(arr[i])\n            tmp=head\n        else:\n            tmp.next=Node(arr[i])\n            tmp=tmp.next\n    return head\ndef reverse_linked_list(head):\n    '''\n    Write a python function to reverse a linked list. https://www.geeksforgeeks.org/python-program-for-linked-list-in-reverse/\n    '''\n    head=None\n    while head.next:\n        head=head.next\n    i=head\n    j=i.next\n    while j:\n        i.next=j.next\n        j.next=head\n        head=j\n        j=i.next\n    return head\ndef delete_node(head,value):\n    '''\n    Write a python function to delete a node from linked list. https://www.geeksforgeeks.org/python-program-to-delete-a-node-from-linked-list/\n    '''\n    if head is None:\n        return head\n    if head.value==value:\n        return head.next\n    prev=head\n    curr=head.next\n    while curr:\n        if curr.value==value:\n            prev.next=curr.next\n            curr.next=None\n        prev=curr\n        curr=curr.next\n    return head\ndef sorted_merge(arr1,arr2):\n    '''\n    Write a python function to merge two sorted linked list. https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\n    '''\n    if len(arr1)==0 or len(arr2)==0:\n        return arr1+arr2\n    else:\n        if arr1[0]>arr2[0]:\n            return sorted_merge(arr2,arr1)\n        else:\n            head=arr1[0]\n            arr1=arr1[1:]\n            tmp=Node(arr2[0])\n            tmp.next=head\n            head=tmp\n            arr2=arr2[1:]\n            return sorted_merge(arr1,arr2)\ndef find_intersection_point_of_two_linked_lists(head1,head2):\n    '''\n    Write a python function to find intersection point of two sorted linked list. https://www.geeksforgeeks.org/find-intersection-point-of-two-sorted-linked-lists/\n    '''\n    i=head1\n    j=head2\n    l=0\n    while i or j:\n        if i==j:\n            l=i\n            break\n        if i.next or j.next:\n            if not i.next:\n                i=head2\n            if not j.next:\n                j=head1\n            i=i.next\n            j=j.next\n        else:\n            break\n    return l\ndef reverse_nodes_in_k_groups(head,k):\n    '''\n    Write a python function to reverse all nodes in k-groups. https://www.geeksforgeeks.org/reverse-nodes-in-k-groups/\n    '''\n    i=head\n    j=k\n    head1=head\n    head2=head\n    while j:\n        i=head1\n        j=j-1\n        k=k-1\n        while k:\n            next=i.next\n            i.next=None\n            i.next=next\n            i=i.next\n            k=k-1\n        head1=i\n    return head\ndef find_mid_element_in_linked_list(head):\n    '''\n    Write a python function to find mid element in linked list. https://www.geeksforgeeks.org/find-middle-element-in-a-linked-list/\n    '''\n    i=head\n    if not head or not head.next:\n        return head\n    while i.next.next:\n        i=i.next\n    return i\ndef reverse_linked_list_iterative(head):\n    '''\n    Write a python function to reverse a linked list iteratively. https://www.geeksforgeeks.org/reverse-a-linked-list/\n    '''\n    prev=None\n    curr=head\n    while curr:\n        next=curr.next\n        curr.next=prev\n        prev=curr\n        curr=next\n    return prev\ndef reverse_linked_list_recursive(head):\n    '''\n    Write a python function to reverse a linked list recursively. https://www.geeksforgeeks.org/reverse-a-linked-list-iteratively-and-recursively/\n    '''\n    if head==None or head.next==None:\n        return head\n    p=reverse_linked_list_recursive(head.next)\n    head.next.next=head\n    head.next=None\n    return p\ndef sum_of_linked_list(head):\n    '''\n    Write a python functio",
        "num_ids": 9
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # 1.3\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "num_ids": 202
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "num_ids": 196
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    min_col = min(r, g, b)\n    max_col = max(r, g, b)\n    v = max_col\n    delta = max_col - min_col\n    s = 0 if delta == 0 else (delta/max_col)\n    if delta == 0:\n        h = 0\n    elif max_col == r:\n        h = 60 * (((g-b)/delta) % 6)\n    elif max_col == g:\n        h = 60 * (((b-r)/delta) + 2)\n    else:\n        h = 60 * (((r-g)/delta) + 4)\n",
        "num_ids": 182
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "num_ids": 196
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import numpy as np\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 207
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    mul_even_odd = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            mul_even_odd.append(list1[i])\n        else:\n            pass\n    prod = 1\n    for j in range(len(mul_even_odd)):\n        prod *= mul_even_odd[j]\n    print(prod)\n",
        "num_ids": 101
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return list1[0]\n",
        "num_ids": 36
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_even = 1\n    product_odd = 1\n    for item in list1:\n        if item % 2 == 0:\n            product_even *= item\n        else:\n            product_odd *= item\n    return product_even, product_odd\nprint(mul_even_odd([1,2,3,4,5,6,7]))\n",
        "num_ids": 88
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_mul = 1\n    odd_mul = 1\n",
        "num_ids": 18
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_odd = 1\n    product_even = 1\n",
        "num_ids": 16
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for i in range(len(list1)):\n        if i%2==0 and i+1<len(list1):\n            prod *= list1[i]*list1[i+1]\n    return prod\n",
        "num_ids": 62
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i%2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    print(even_list)\n    print(odd_list)\n    print(len(even_list))\n    print(len(odd_list))\n",
        "num_ids": 93
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for i in list1:\n        if i%2 == 0:\n            prod *= i\n        else:\n            pass\n    print(prod)\n",
        "num_ids": 46
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product=1\n    odd_product=1\n    for i in list1:\n        if i % 2 == 0:\n            even_product=even_product*i\n        else:\n            odd_product=odd_product*i\n    return even_product*odd_product\n",
        "num_ids": 69
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd_list = []\n    even_list = []\n    for item in list1:\n        if item % 2 == 0:\n            even_list.append(item)\n        else:\n            odd_list.append(item)\n    product = 1\n    for item in odd_list:\n        product = product * item\n    for item in even_list:\n        product = product * item\n    return product\n",
        "num_ids": 98
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n",
        "num_ids": 22
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple([int(value) for value in test_str.split('.')])\n    return int_tuple\n",
        "num_ids": 34
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = tuple(test_str.split(','))\n    test_str = [int(x) for x in test_str]\n    return test_str\n",
        "num_ids": 42
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def convert(tup):\n        return tuple(int(i) for i in tup.split(','))\n    return tuple(convert(i) for i in test_str.split('/'))\n",
        "num_ids": 51
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # your code here\n    return int(test_str.replace('(','').replace(')','').replace(',',''))\n",
        "num_ids": 35
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str[1:-1].split(',')))\n",
        "num_ids": 23
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(map(int,test_str.split(',')))\n    except ValueError:\n        return 'String must contain only numbers'\n",
        "num_ids": 39
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split('-')))\n",
        "num_ids": 19
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_str = test_str[1:-1]\n    test_str = test_str.split(',')\n    for i in test_str:\n        l.append(int(i))\n    l = tuple(l)\n    return l\n    \n    \ndef reverse(s):\n    '''\n    Write a function to reverse a string\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    s = s[::-1]\n    l.append(s)\n    return l\n    \n    \ndef int_to_str(test_int):\n    '''\n    Write a function to convert integer tuple to string tuple.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_int = str(test_int)\n    l.append(test_int)\n    return l\n    \n    \ndef list_str_int(test_list):\n    '''\n    Write a function to convert list string to integer list.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_list = test_list[1:-1]\n    test_list = test_list.split(',')\n    for i in test_list:\n        l.append(int(i))\n    return l\n    \ndef list_int_str(test_list):\n    '''\n    Write a function to convert list integer to list string.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_list = str(test_list)\n    l.append(test_list)\n    return l\n    \ndef list_str_tuple(test_list):\n    '''\n    Write a function to convert list string to list tuple.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_list = test_list[1:-1]\n    test_list = test_list.split(',')\n    for i in test_list:\n        l.append(int(i))\n    l = tuple(l)\n    return l\n    \n    \ndef tuple_str_list(test_tuple):\n    '''\n    Write a function to convert tuple string to list string.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_tuple = test_tuple[1:-1]\n    test_tuple = test_tuple.split(',')\n    for i in test_tuple:\n        l.append(int(i))\n    l = tuple(l)\n    return l\n    \n    \ndef tuple_int_str(test_tuple):\n    '''\n    Write a function to convert tuple integer to list string.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_tuple = str(test_tuple)\n    l.append(test_tuple)\n    return l\n    \ndef list_int_tuple(test_list):\n    '''\n    Write a function to convert list integer to tuple string.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_list = str(test_list)\n    l.append(test_list)\n    return l\n    \ndef tuple_int_list(test_tuple):\n    '''\n    Write a function to convert tuple integer to list string.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_tuple = str(test_tuple)\n    l.append(test_tuple)\n    return l\n    \n    \ndef list_int_set(test_list):\n    '''\n    Write a function to convert list integer to set string.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_list = set(test_list)\n    l.append(test_list)\n    return l\n    \ndef set_int_list(test_set):\n    '''\n    Write a function to convert set integer to list string.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_set = list(test_set)\n    l.append(test_set)\n    return l\n    \n    \ndef set_str_tuple(test_set):\n    '''\n    Write a function to convert set string to tuple string.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_set = test_set[1:-1]\n    test_set = test_set.split(',')\n    for i in test_set:\n        l.append(int(i))\n    l = tuple(l)\n    return l\n    \ndef tuple_int_set(test_tuple):\n    '''\n    Write a function to convert tuple integer to set string.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_tuple = test_tuple[1:-1]\n    test_tuple = test_tuple.split(',')\n    for i in test_tuple:\n        l.append(int(i))\n    l = set(l)\n    return l\n    \n    \ndef set_int_str(test_set):\n    '''\n    Write a function to convert set integer to list string.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_set = str(test_set)\n    l.append(test_set)\n    return l\n    \n    \ndef set_str_list(test_set):\n    '''\n    Write a function to convert set string to list string.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_set = test_set[1:-1]\n    test_set = test_set.split(',')\n    for i in test_set:\n        l.append(int(i))\n    l = set(l)\n    return l\n    \ndef list_int_dict(test_list):\n    '''\n    Write a function to convert list integer to dictionary string.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_list = dict(test_list)\n    l.append(test_list)\n    return l\n    \ndef dict_int_list(test_dict):\n    '''\n    Write a function to convert list integer to dictionary string.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_dict = dict(test_dict)\n    l.append(test_dict)\n    return l\n    \ndef dict_str_tuple(test_dict):\n    '''\n    Write a function to convert dictionary string to tuple string.\n    '''\n    # Your code here\n    # Please take input from the user\n    # Please add the input to the list 'l'\n    l=[]\n    test_dict = test_dict[1:-1]\n    test_dict = test_dict.split(',')\n    for i in test_dict:\n        ",
        "num_ids": 73
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    s = test_str.split('(')[1].split(')')[0]\n    s_list = s.split(', ')\n    print(s_list)\n",
        "num_ids": 44
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n",
        "num_ids": 63
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    for i in range(len(a)):\n        if x <= a[i]:\n            return i\n    return len(a)\n",
        "num_ids": 48
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        index = bisect.bisect_left(a, x)\n        if index == len(a):\n            return -1\n        else:\n            return index\n",
        "num_ids": 59
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if x > a[mid]:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n",
        "num_ids": 62
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0 or x <= a[0]:\n        return 0\n    if x >= a[n-1]:\n        return n\n    low = 0\n    high = n-1\n    while low <= high:\n        mid = (low + high)//2\n        if a[mid] <= x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n",
        "num_ids": 104
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    right_idx = len(a)\n    for i in range(len(a)):\n        if x <= a[i]:\n            right_idx = i\n            break\n    return right_idx\n    \ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left_idx = 0\n    for i in range(len(a)):\n        if x < a[i]:\n            left_idx = i\n            break\n    return left_idx\n",
        "num_ids": 49
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i in range(len(a)):\n        if a[i] >= x:\n            return i\n    return len(a)\n",
        "num_ids": 35
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # a = [1, 2, 3, 4, 6]\n    # x = 5\n    # right_insertion(a, x) # 4\n",
        "num_ids": 38
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if x > a[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start\n",
        "num_ids": 82
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n",
        "num_ids": 46
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    x = re.findall(r'ab{3}',text)\n    return x\n",
        "num_ids": 24
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    patterns = '[ab]{3}'\n    if re.search(patterns, text):\n        return 'Matched'\n    else:\n        return 'Not matched'\n",
        "num_ids": 44
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.findall(r'ab{3}', text)\n    if match:\n        return match\n    else:\n        return None\n",
        "num_ids": 37
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"ab{3}\")\n    result = pattern.search(text)\n    return result!= None\n",
        "num_ids": 35
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"ab{3}\"\n    result = re.search(pattern,text)\n    if result == None:\n        print('-1')\n    else:\n        print('0')\ntext_match_three('accbbbacd')\ntext_match_three('abbbbbacd')\ntext_match_three('accbbbba')\ntext_match_three('abccc')\ntext_match_three('accbbbba')\ntext_match_three('abbbbbbb')\n",
        "num_ids": 121
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = '[ab]{3}'\n    result = re.search(pattern, text)\n    return result!= None\n",
        "num_ids": 32
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    x = re.findall('ab{3}', text)\n    return x\n",
        "num_ids": 22
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # return re.search(r'ab{3}', text)\n    return re.search(r'a.{3}b', text)\n",
        "num_ids": 37
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = '[a][b][b][a]'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n",
        "num_ids": 46
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple\n",
        "num_ids": 25
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Converts test_list to a string\n    list_string = \"\".join(test_list)\n    # Converts test_str to a tuple\n    test_str_tuple = tuple(test_str)\n    return test_str_tuple + (list_string,)\n",
        "num_ids": 68
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n",
        "num_ids": 17
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple_list = list()\n    for str in test_str.split(','):\n        new_tuple_list.append(str)\n    \n    return tuple(new_tuple_list)\n",
        "num_ids": 53
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_string = tuple(test_list)\n    tuple_string = tuple_string + tuple(test_str)\n    return tuple_string\n",
        "num_ids": 38
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple\n",
        "num_ids": 25
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return list(test_str), test_list\n",
        "num_ids": 14
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_name = ()\n    if type(test_list) == list and type(test_str) == str:\n        tuple_name = tuple(test_list)\n        tuple_name = tuple_name + (test_str,)\n    return tuple_name\n",
        "num_ids": 66
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if not nums:\n        return False\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # o(n)\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums:\n        if len(nums)%2==0:\n            if len(nums) == 2:\n                if nums[0]%2==0 and nums[1]%2==0:\n                    return True\n            else:\n                if nums[0]%2==0 and nums[1]%2==0 and nums[2]%2==0:\n                    return True\n                elif nums[1]%2==0 and nums[2]%2==0 and nums[3]%2==0:\n                    return True\n                else:\n                    return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 162
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = all(nums[i] % 2 == 0 for i in range(len(nums)) if i % 2 == 0)\n    return result\n    \n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    odd = []\n    for i in nums:\n        if nums[i] % 2 == 1:\n            odd.append(i)\n    return len(odd) == 0\n",
        "num_ids": 45
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums)==0:\n        return True\n    else:\n        if nums[0]%2==0:\n            if len(nums)==1:\n                return True\n            else:\n                return even_position(nums[1:])\n        else:\n            return False\n",
        "num_ids": 74
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    print(nums)\n    if len(nums) < 1:\n        return \"Invalid input, please enter at least one element.\"\n    else:\n        if (len(nums) % 2) == 0:\n            even_list = [nums[i] for i in range(0, len(nums), 2)]\n            return all([x % 2 == 0 for x in even_list])\n        else:\n            return False\n",
        "num_ids": 104
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_list.append(i)\n        else:\n            pass\n    return tuple(new_list)\n",
        "num_ids": 55
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    a=[]\n    for i in test_tup:\n        if type(i) == tuple:\n            a.append(tuple)\n        else:\n            a.append(i)\n    return tuple(a)\ntest_tup=([1,2,(2,3)],[2,3,4],[3,4,5])\nprint(remove_nested(test_tup))\n",
        "num_ids": 97
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if not test_tup:\n        return test_tup\n    if type(test_tup[0])==tuple:\n        return remove_nested(test_tup[0])\n    return (test_tup[0],)\n",
        "num_ids": 61
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # result_list = []\n    # for ele in test_tup:\n    #     if type(ele) == tuple:\n    #         pass\n    #     else:\n    #         result_list.append(ele)\n",
        "num_ids": 56
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # TODO: complete this function\n    # return ()\n    # pass\n",
        "num_ids": 20
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for tup in test_tup:\n        if type(tup) == tuple:\n            new_tup.append(tup[0])\n        else:\n            new_tup.append(tup)\n    return new_tup\n",
        "num_ids": 69
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # create a list of the tuple in test_tup\n    list_tuples = list(test_tup)\n",
        "num_ids": 30
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for tup in test_tup:\n        for item in tup:\n            if type(item) == tuple:\n                break\n        else:\n            result.append(tup)\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in test_tup:\n        if type(i) == tuple:\n            test_tup.remove(i)\n    return test_tup\n",
        "num_ids": 40
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0 \n    for i in input_list:\n        if type(i) == type([]):\n            counter += 1\n    return counter\n",
        "num_ids": 38
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for items in input_list:\n        if type(items) == list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) is list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    cnt = 0 \n    for item in input_list:\n        if isinstance(item, list):\n            cnt += 1\n",
        "num_ids": 34
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if type(input_list)!= list:\n        print(\"Enter a list of lists\")\n        return\n    elif len(input_list) == 0:\n        print(\"Enter a list of lists\")\n        return\n    else:\n        list_count = 0\n        for item in input_list:\n            if type(item) == list:\n                list_count += 1\n        print(list_count)\n        return list_count\n",
        "num_ids": 104
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in input_list:\n        if type(i) == list:\n            counter += 1\n    return counter\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list == []:\n        return 0\n    else:\n        return 1 + count_list(input_list[0])\n",
        "num_ids": 34
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list) \n",
        "num_ids": 12
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    \n    l, r = 0, len(arr) - 1\n    \n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == x:\n            if mid == len(arr) - 1 or x > arr[mid + 1]:\n                return mid\n            else:\n                r = mid - 1\n        elif x > arr[mid]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n",
        "num_ids": 131
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pos = -1\n    low = 0\n    high = len(arr)-1\n    while(low<=high):\n        mid = (low+high)//2\n        if arr[mid]<x:\n            low = mid+1\n        elif arr[mid]>x:\n            high = mid-1\n        else:\n            pos = mid\n    if pos == -1:\n        return False\n    else:\n        return pos\n",
        "num_ids": 106
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    if x not in arr:\n        return n\n    else:\n        return last(arr[:n-1],x)\n    \n",
        "num_ids": 42
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left<=right:\n        mid = (left+right)//2\n        if arr[mid]==x:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                left = mid+1\n        elif arr[mid]>x:\n            right = mid-1\n        else:\n            left = mid+1\n    return -1\n",
        "num_ids": 115
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    arr.sort()\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i]==x:\n            return i\n    return -1\n",
        "num_ids": 44
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not isinstance(arr,(list,tuple)):\n        raise TypeError(\"Invalid input!\")\n    if len(arr)==0:\n        raise ValueError(\"List is Empty!\")\n    \n    n=len(arr)\n    left=0\n    right=n-1\n    res=-1\n",
        "num_ids": 76
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    \n    while low <= high:\n        mid = low + high\n        if arr[mid] == x:\n            high = mid-1\n        elif arr[mid] > x:\n            high = mid-1\n        else:\n            low = mid + 1\n    return low\n    \nprint(last([1,2,3,4,5,6,7],6))",
        "num_ids": 104
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=len(arr)\n    if l==0:\n        return -1\n    if x>=arr[-1]:\n        return l-1\n    for i in range(0,l-1):\n        if x>=arr[i] and x<arr[i+1]:\n            return i\n    return -1\n",
        "num_ids": 80
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    a = len(arr)-1\n    l = 0\n    r = a\n    while(l<=r):\n        mid = (l+r)//2\n        if arr[mid]==x:\n            if(mid==a):\n                return a\n            if(arr[mid+1]==x):\n                return mid+1\n            r = mid-1\n        elif arr[mid]<x:\n            l = mid+1\n        elif arr[mid]>x:\n            r = mid-1\n    return -1\n    \n",
        "num_ids": 132
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr)\n    while start < end:\n        mid = start + (end-start)//2\n        if x < arr[mid]:\n            end = mid\n        elif x > arr[mid]:\n            start = mid + 1\n        else:\n            if mid == len(arr)-1 or x!= arr[mid+1]:\n                return mid\n            else:\n                start = mid + 1\n    return -1\n",
        "num_ids": 110
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    pattern = 'a.*b$'\n    result = re.match(pattern, text)\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    print(re.findall('a.*b', text))\n",
        "num_ids": 17
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches\n",
        "num_ids": 33
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = \"a.b$\"\n    if re.match(pattern, text):\n        return \"Match\"\n    else:\n        return \"No Match\"\n",
        "num_ids": 40
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    pattern = re.compile(r\"a.*?b$\")\n    if pattern.search(text):\n        print(\"Matched\")\n    else:\n        print(\"Not matched\")\n    \n",
        "num_ids": 50
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    m = re.match('a.*b', text)\n    if m:\n        return m.group(0)\n    return False\nprint(text_starta_endb('aacbbbbb'))\nprint(text_starta_endb('aacbabbbb'))\nprint(text_starta_endb('accbbbbb'))\nprint(text_starta_endb('acb'))\nprint(text_starta_endb('a'))\n",
        "num_ids": 116
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a_re = re.compile(r'(a.*?)(b)')\n    mo = a_re.search(text)\n    return mo.group(0)\n    \ntext = \"a asdfasd b\"\nprint(text_starta_endb(text))\n",
        "num_ids": 70
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    matcher = re.compile(r\"a.+b$\")\n    result = matcher.search(text)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_start_end_b = re.search(r'a.*b$', text)\n    return text_start_end_b.group(0)\n",
        "num_ids": 40
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return bool(re.search(r\"a.*?b\", text))\n",
        "num_ids": 20
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for x in dict:\n        sum += dict[x]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return dict\n",
        "num_ids": 6
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k, v in dict.items():\n        total += v\n    return total\n    \ndef subtract_sum(dict):\n    '''\n    Write a function to subtract the sum of all items in the given dictionary by the sum of its values.\n    '''\n    total = 0\n    for k, v in dict.items():\n        total += v\n    return total - return_sum(dict)\n",
        "num_ids": 34
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # sum = 0\n    # for i in dict:\n    #     sum += dict[i]\n    # return sum\n    return sum(dict.values())\n",
        "num_ids": 40
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if len(dict) > 0:\n        return sum(dict.values())\n    else:\n        return None\n",
        "num_ids": 29
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # your code here\n    result = sum(list(range(n)))\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower bound: \"))\n    r = int(input(\"Enter the upper bound: \"))\n    sum = 0\n    for x in range(l,r+1):\n        if x % 2!= 0:\n            sum += x\n    print(f\"The sum of odd numbers between {l} and {r} is {sum}\")\n",
        "num_ids": 89
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(l,r+1) if i%2==1])\n    \nprint(sum_odd(1,10)) # 15 (0 + 2 + 4 + 6 + 8 + 10)\nprint(sum_odd(0,100)) # 2550 (0 + 2 + 4 + 6 + 8 +... + 98 + 100)\nprint(sum_odd(50,60)) # 130 (50 + 52 + 54 + 56 + 58)\nprint(sum_odd(100,200)) # 2550 (100 + 102 + 104 + 106 + 108 + 110 +... + 198 + 200)\n",
        "num_ids": 142
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 1:\n            sum = sum + i\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(l,r) if i%2!=0])\n",
        "num_ids": 25
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # return sum([i for i in range(l, r+1) if i % 2!= 0])\n    return sum(filter(lambda x: x % 2!= 0, range(n)))\n",
        "num_ids": 49
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(l, r+1) if i % 2 == 1])\n",
        "num_ids": 26
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter lower range: \"))\n    r = int(input(\"Enter upper range: \"))\n    odd_sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            odd_sum += i\n    print(\"Odd sum: \",odd_sum)\n",
        "num_ids": 80
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input('Input the lower bound: '))\n    r = int(input('Input the upper bound: '))\n    if l < r and l > 0 and r > 0:\n        sum = 0\n        for i in range(l, r):\n            if i % 2!= 0:\n                sum += i\n        return sum\n    else:\n        print('Invalid input')\n        return -1\n",
        "num_ids": 98
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(filter(lambda x: x % 2 == 1,range(l,r+1)))\n",
        "num_ids": 26
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return reduce(lambda x,y:x+y,arr)\ndef _sum2(arr):\n    '''\n    Write a python function to find the sum of an array using a loop.\n    '''\n    ans=0\n    for i in arr:\n        ans+=i\n    return ans\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    arr_sum = 0\n    \n    for item in arr:\n        arr_sum += item\n        \n    return arr_sum\n",
        "num_ids": 35
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n",
        "num_ids": 36
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        sum = sum + arr[i]\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n",
        "num_ids": 36
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    arr_sum = 0\n    for i in range(0, len(arr)):\n        arr_sum += arr[i]\n    return arr_sum\n",
        "num_ids": 39
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_of_array = 0\n    for i in range(len(arr)):\n        sum_of_array += arr[i]\n    return sum_of_array\n",
        "num_ids": 43
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    '''\n    Input: an integer n and a positive integer d\n    Output: an integer denoting the result of rotating n left by d bits.\n",
        "num_ids": 32
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert type(n)==int and type(d)==int\n    assert n<2**32 and d<32 and d>=0\n",
        "num_ids": 35
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if (d == 0):\n        return n\n    n = n << d\n    n = n | (n >> 32-d)\n    return n\n",
        "num_ids": 38
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    binary = bin(n)[2:].zfill(32)\n    rotate = binary[d:] + binary[:d]\n    return int(rotate,2)\n",
        "num_ids": 43
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    n = n >> 32 - d\n    return n\n",
        "num_ids": 22
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    result = 0\n    for i in range(32):\n        result <<= 1\n        result += (n & 1)\n        n >>= 1\n    return result >> (32 - d)\n",
        "num_ids": 47
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n<<d | n>>(32-d)\n",
        "num_ids": 16
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    bitmask = (1 << d) - 1\n    bitmask = 0xFFFFFFFF - (2**32 - 1 - bitmask)\n    return (n << d) | (n >> (32 - d)) & bitmask\n",
        "num_ids": 65
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff<<(32-d)\n    #print(format(mask,'#010x'))\n    return ((n << d) | (n >> (32-d)))&mask\n",
        "num_ids": 49
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    mask = mask << (32 - d)\n    return (n << d) | (n >> (32 - d)) & mask\n",
        "num_ids": 43
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    regex = re.compile(r\"\\s+\")\n    return regex.sub(\" \", text)\n",
        "num_ids": 28
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','',text)\n",
        "num_ids": 16
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('[\\s]', '', text)\n",
        "num_ids": 18
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    new_text = re.sub(r'\\s+','', text)\n    return new_text\n",
        "num_ids": 27
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+',' ',text)\n",
        "num_ids": 18
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    clean_text = re.sub(' +','', text)\n    print(clean_text)\n    return clean_text\n    \n",
        "num_ids": 33
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text_without_spaces = re.sub('\\s+', '', text)\n    return text_without_spaces\n",
        "num_ids": 32
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n",
        "num_ids": 13
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    counter = 0\n    if x == y:\n        counter += 1\n    if x == z:\n        counter += 1\n    if y == z:\n        counter += 1\n    return counter\n",
        "num_ids": 47
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n",
        "num_ids": 10
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c=0\n    if(x==y==z):\n        print(\"{} is equal to {} and {}\".format(x,y,z))\n        c+=1\n    else:\n        print(\"All the numbers are not equal\")\n    print(c)\n",
        "num_ids": 64
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return sum(1 for i in range(3) if x == y == z)\n",
        "num_ids": 22
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and x == z:\n        print(\"The three numbers are all equal\")\n    elif x == y and x!= z:\n        print(f\"The numbers {x} and {y} are equal\")\n    elif x == z and x!= y:\n        print(f\"The numbers {x} and {z} are equal\")\n    elif y == z and y!= x:\n        print(f\"The numbers {y} and {z} are equal\")\n    else:\n        print(\"All three numbers are different\")\n",
        "num_ids": 131
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n",
        "num_ids": 10
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in x,y,z:\n        if i == x:\n            count += 1\n        elif i == y:\n            count += 1\n        elif i == z:\n            count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y==z\n",
        "num_ids": 10
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # You can modify the return value if necessary.\n    return x==y==z\n",
        "num_ids": 22
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    rotations = 0\n    for i in range(n):\n        for j in range(i,n):\n            if arr[i] > arr[j]:\n                rotations += 1\n    return rotations\n",
        "num_ids": 59
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def get_number_rotations(arr):\n        low, high = 0, len(arr)-1\n        while low <= high:\n            mid = (low + high)//2\n            if mid+1 < len(arr) and arr[mid] < arr[mid+1]:\n                return mid+1\n            elif mid > 0 and arr[mid] > arr[mid-1]:\n                return mid\n            elif arr[low] <= arr[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return 0\n",
        "num_ids": 132
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # code here\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0\n",
        "num_ids": 48
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    return 'rotations required:'+ str(rotations(arr))\n",
        "num_ids": 18
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    l = len(arr)\n    for i in range(l):\n        for j in range(l):\n            if arr[i] > arr[j] and i<j:\n                return j - i\n    return 0\n",
        "num_ids": 55
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    length = len(arr)\n    if length < 2:\n        return 0\n    count = 0\n    for i in range(0, length - 1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    i=0\n    while i<n-1:\n        if arr[i]>arr[i+1]:\n            break\n        i+=1\n    if i==n-1:\n        return 0\n    else:\n        return n-i-1\n",
        "num_ids": 71
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    l = len(arr)\n    count = 0\n    for i in range(l):\n        if (arr[i] > arr[i+1]):\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def binary_search(arr, low, high, element):\n        if high >= low:\n            mid = (high + low)//2\n            if arr[mid] == element:\n                return mid\n            elif arr[mid] > element:\n                return binary_search(arr, low, mid -1, element)\n            else:\n                return binary_search(arr, mid+1, high, element)\n        else:\n            return -1\n    \n    arr_length = len(arr)\n    rotation = 0\n    for index, element in enumerate(arr):\n        if binary_search(arr, index+1, arr_length-1, element) == -1:\n            return rotation\n        rotation += 1\n    return rotation\n",
        "num_ids": 176
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # # method 1: using sort function\n    # arr.sort()\n    # index = 0\n    # for i in range(1,len(arr)):\n    #     if arr[i] == arr[index]:\n    #         index += 1\n    #     else:\n    #         index = i\n    # print(\"Number of rotations: \", index)\n",
        "num_ids": 87
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    s = 0\n",
        "num_ids": 12
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == 0) :\n        return 0\n    if (n == 1) :\n        return 1\n    if (n == 4) :\n        return 1\n    else:\n        return is_perfect_square_util(n, [0, n])\n",
        "num_ids": 63
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = int(math.sqrt(n))\n    return s*s == n\n",
        "num_ids": 23
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False;\n    x = int(sqrt(n));\n    return (x * x == n);\n",
        "num_ids": 35
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Your code here\n    \n    if (n < 2):\n        return False;\n    \n    square_root = int(n ** 0.5);\n    \n    return (square_root * square_root == n);\n",
        "num_ids": 55
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Calculate the square root of the number\n    sr = n**0.5\n    \n    # Check if the value is a perfect square\n    return sr == int(sr)\n",
        "num_ids": 44
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n > 0 and ((int(n**0.5))**2 == n)\n",
        "num_ids": 23
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n >= 0 and (math.sqrt(n) - math.floor(math.sqrt(n)) == 0)\n",
        "num_ids": 32
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n ** 0.5) % 1 == 0\n",
        "num_ids": 16
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    # Check if x is square of y (where y * y = n)\n    if (int(x ** 0.5) ** 2 == n) :\n        return True\n",
        "num_ids": 47
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Your code here\n    prod = 1\n    for num in arr:\n        prod *= num\n    if prod % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return (reduce(lambda x, y: x*y, arr) % 2 == 0)\n",
        "num_ids": 25
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    total = 1\n    for i in arr:\n        total *= i\n",
        "num_ids": 20
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for x in arr:\n        if x%2!= 0:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)-1):\n        if (arr[i] * arr[i+1]) % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return all(map(lambda x: x % 2 == 0, arr))\n",
        "num_ids": 20
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # arr = [1,2,3,4]\n    prod = 1\n    for x in arr:\n        prod *= x\n    if(prod % 2 == 0):\n        return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for x in arr:\n        product *= x\n    if product % 2 == 0:\n        return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sum_list=[]\n    for i in lists:\n        sum_list.append(sum(i))\n    for x in range(0,len(sum_list)-1):\n        for y in range(x+1,len(sum_list)):\n            if(sum_list[x]>sum_list[y]):\n                sum_list[x],sum_list[y]=sum_list[y],sum_list[x]\n    return(lists[sum_list.index(max(sum_list))])\n",
        "num_ids": 126
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    for sub_list in lists:\n        for num in sub_list:\n            if num < 0:\n                return \"invalid input\"\n    # return lists[0] if len(lists[0]) > len(lists[1]) else lists[1]\n    # return lists[0] if lists[0] > lists[1] else lists[1]\n    highest = 0\n    highest_list = []\n    for sub_list in lists:\n        sum = 0\n        for num in sub_list:\n            sum += num\n        if sum > highest:\n            highest = sum\n            highest_list = sub_list\n    return highest_list\n",
        "num_ids": 152
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if lists == []:\n        return []\n    max_sum = lists[0][0]\n    max_sum_list = []\n    for x in lists:\n        if sum(x) > max_sum:\n            max_sum = sum(x)\n    for x in lists:\n        if sum(x) == max_sum:\n            max_sum_list.append(x)\n    return max_sum_list\n",
        "num_ids": 102
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest = 0\n    highest_list = []\n",
        "num_ids": 14
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key = lambda x : sum(x))\n",
        "num_ids": 18
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key=lambda x: sum(x))\n",
        "num_ids": 18
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_list = lst\n            max_sum = sum(lst)\n    return max_list\n",
        "num_ids": 62
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = []\n    for list in lists:\n        if sum(list) > max_sum:\n            max_sum = sum(list)\n            max_sum_list = list\n    return max_sum_list\n",
        "num_ids": 64
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    list_of_lists = []\n    for i in lists:\n        if sum(i) >= 0:\n            list_of_lists.append(i)\n    return list_of_lists\n",
        "num_ids": 48
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    #Initialize variables\n    list_sum = 0\n    list_with_highest_sum = []\n    \n    #Loops through the list of lists\n    for list in lists:\n        #Initialize variables\n        current_list_sum = 0\n        #Loops through the list of elements\n        for element in list:\n            #Add the element to the current list sum\n            current_list_sum = current_list_sum + element\n        #If the current list sum is higher than the highest sum, the list with the highest sum is set to the current list\n        if current_list_sum > list_sum:\n            list_sum = current_list_sum\n            list_with_highest_sum = list\n    #Returns the list with the highest sum\n    return list_with_highest_sum\n",
        "num_ids": 185
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    str_list = list(test_str)\n    max_len = 0\n    for i in str_list:\n        if i.isupper():\n            max_len += 1\n        else:\n            max_len = 0\n    return max_len\n",
        "num_ids": 62
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    max_run = 0\n    run = 0\n    for i in test_str:\n        if i.isupper():\n            run += 1\n        else:\n            run = 0\n        if run > max_run:\n            max_run = run\n    return max_run\n        \nif __name__ == '__main__':\n    test_str = 'azbAa'\n    print(test_str)\n    print(max_run_uppercase(test_str))\n    ",
        "num_ids": 119
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return len(max(test_str.split(' '), key = len))\n",
        "num_ids": 21
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = 0\n    current_result = 0\n    for char in test_str:\n        if char.isupper():\n            current_result += 1\n        else:\n            if current_result > result:\n                result = current_result\n                current_result = 0\n    if current_result > result:\n        result = current_result\n    return result\n",
        "num_ids": 85
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_uppercase = 0\n    current_run_uppercase = 0\n    previous_character = None\n    for character in test_str:\n        if not previous_character:\n            previous_character = character\n            continue\n        if character.isupper() and character == previous_character.upper():\n            current_run_uppercase += 1\n        else:\n            if current_run_uppercase > max_run_uppercase:\n                max_run_uppercase = current_run_uppercase\n            current_run_uppercase = 1\n        previous_character = character\n    if current_run_uppercase > max_run_uppercase:\n        max_run_uppercase = current_run_uppercase\n    return max_run_uppercase\n",
        "num_ids": 193
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    count = 0\n    for x in test_str:\n        if x.isupper():\n            count+=1\n        else:\n            count = 0\n        max_count = max(max_count, count)\n    return max_count\n",
        "num_ids": 65
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    \n    def uppercase_run(test_str):\n        '''\n        Write a function to find the maximum run of uppercase characters in the given string.\n        '''\n        c = 0\n        max = 0\n        for i in test_str:\n            if i.isupper():\n                c += 1\n            else:\n                c = 0\n            if c > max:\n                max = c\n        return max\n",
        "num_ids": 59
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        elif i.isupper() is False:\n            if count > max_count:\n                max_count = count\n            count = 0\n    if count > max_count:\n        max_count = count\n    return max_count\n",
        "num_ids": 91
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max(len(list(group)) for group in re.findall('[A-Z]{1,}', test_str))\n",
        "num_ids": 35
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # If there is no string to iterate over, the function should return 0\n    if not test_str:\n        return 0\n",
        "num_ids": 32
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_nums = []\n    for i in nums:\n        if i % 2!= 0:\n            odd_nums.append(i)\n            break\n    return odd_nums[0]\n",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return 0\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n    return 'There is no odd number in the list'\n",
        "num_ids": 37
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return 'No Odd Number'\nprint(first_odd([3,6,2,10,12]))\nprint(first_odd([4,8,10]))\nprint(first_odd([0]))\n",
        "num_ids": 74
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) > 0:\n        for num in nums:\n            if num % 2!= 0:\n                return num\n    else:\n        return 'This list is empty'\n",
        "num_ids": 48
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return -1\n",
        "num_ids": 29
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup)==K\n",
        "num_ids": 14
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] >= K:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in K:\n        if test_tup[i] == None:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    i = 0\n    while i < len(test_tup):\n        if test_tup[i] == K:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup\n",
        "num_ids": 11
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if len(tup) == K:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if(K in test_tup):\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Initialize a boolean flag to check that every element in tup2 is smaller than corresponding element in tup1\n    smaller_flag = True\n    # Iterate through each element in the second tuple, check if it is smaller than the corresponding element in the first tuple\n    for num1, num2 in zip(test_tup1, test_tup2):\n        if num2 > num1:\n            # If so, set the flag to False\n            smaller_flag = False\n            break\n    return smaller_flag\n",
        "num_ids": 122
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[1] < test_tup2[1] or (test_tup1[1] == test_tup2[1] and test_tup1[0] < test_tup2[0]):\n        return True\n    return False\n",
        "num_ids": 68
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if (test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1] and test_tup1[2] < test_tup2[2]):\n        return True\n    return False\n",
        "num_ids": 68
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] >= test_tup2[0]:\n        return False\n    if test_tup1[0] < test_tup2[0]:\n        return True\n",
        "num_ids": 50
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    pass\n    \ndef check_smaller_v2(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    pass\n    \ndef check_smaller_v3(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    pass\n    \ndef check_smaller_v4(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup2[i] < test_tup1[i]\n",
        "num_ids": 22
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(test_tup1[i] < test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 37
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]:\n        return True\n    elif test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1]:\n        return False\n",
        "num_ids": 87
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    if len(test_tup1) == len(test_tup2):\n        return True\n    elif len(test_tup1) > len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True\n",
        "num_ids": 101
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return tuple(map(lambda x, y: x > y, test_tup1, test_tup2))\n",
        "num_ids": 30
    }
]