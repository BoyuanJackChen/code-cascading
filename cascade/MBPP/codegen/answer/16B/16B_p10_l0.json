[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the test tuple to sets and compare\n    return list(set(test_tup1).intersection(set(test_tup2)))\n",
        "num_ids": 37
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # initialize an empty list\n    shared = []\n",
        "num_ids": 14
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [x for x in test_tup1 if x in test_tup2]\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared.append(i)\n    return shared\n",
        "num_ids": 41
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1).intersection(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            if tup1 == tup2:\n                print(tup1)\n                break\n",
        "num_ids": 50
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = list(set(test_tup1).intersection(test_tup2))\n    return shared_elements\n",
        "num_ids": 35
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    common = []\n    for i in test_tup1:\n        if i in test_tup2:\n            common.append(i)\n    return common\n",
        "num_ids": 43
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            similar_elements.append(item)\n    return similar_elements\n",
        "num_ids": 50
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n == 3:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n",
        "num_ids": 96
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    is_prime = True\n    if n==1:\n        return is_prime\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            is_prime=False\n            break\n    return is_prime\n",
        "num_ids": 70
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return True\n    else:\n        if n==2:\n            return False\n        else:\n            for i in range(2,math.ceil(math.sqrt(n))+1):\n                if n%i==0:\n                    return True\n            return False\n",
        "num_ids": 74
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return False\n    elif n % 2 == 0:\n        return True\n    elif n % 3 == 0:\n        return True\n    else:\n        i = 5\n        while i*i <= n:\n            if n % i == 0 or n % (i+2) == 0:\n                return True\n            i += 6\n        return False\n",
        "num_ids": 95
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return True\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return True\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 67
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    sqr = int(math.sqrt(n))\n    for i in range(2, sqr+1):\n        if n % i == 0:\n            return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)<n:\n        print(\"The list is too small.\")\n        return None\n    \n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,(-nums[i],i))\n    result=[]\n    for i in range(n):\n        result.append(nums[hq.heappop(heap)[1]])\n    return result\n",
        "num_ids": 104
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for i in range(n):\n        hq.heappush(max_heap, -nums[i])\n    for j in range(n,len(nums)):\n        max_heap.remove(-nums[j])\n        hq.heappush(max_heap, -nums[j])\n    return [-n for n in max_heap]\n",
        "num_ids": 101
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return None\n    hq.heapify(nums)\n    sorted_nums = []\n    for _ in range(n):\n        sorted_nums.append(hq.heappop(nums))\n    return sorted_nums[::-1]\n",
        "num_ids": 78
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap,(-num,num))\n    largest = []\n    while heap:\n        largest.append(hq.heappop(heap)[1])\n    return largest[::-1]\n",
        "num_ids": 70
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return []\n    \n    # Create a min heap\n    min_heap = []\n    for i in nums:\n        if len(min_heap) < n:\n            hq.heappush(min_heap,i)\n        else:\n            if i > min_heap[0]:\n                hq.heappop(min_heap)\n                hq.heappush(min_heap,i)\n    \n    # Return the heap\n    return min_heap\n",
        "num_ids": 131
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for j in range(n,len(nums)):\n        if heap[0]<nums[j]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[j])\n    return list(heap)\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for j in range(n,len(nums)):\n        if heap[0]>nums[j]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[j])\n    return list(heap)\n    \ndef heap_queue_nlargest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    return list(heap)\n    \ndef heap_queue_nsmallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    return list(heap)\n    \ndef heap_queue_maxheap(nums,n):\n    '''\n    Write a function that takes in an array of integers and returns a max-heap.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    return heap\n    \ndef heap_queue_minheap(nums,n):\n    '''\n    Write a function that takes in an array of integers and returns a min-heap.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    return heap\n    \ndef heap_queue_nlargest_maxheap(nums,n):\n    '''\n    Write a function that takes in an array of integers and returns a max-heap with the largest n integers.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    return heap\n    \ndef heap_queue_nsmallest_minheap(nums,n):\n    '''\n    Write a function that takes in an array of integers and returns a min-heap with the smallest n integers.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    return heap\n    \ndef heap_queue_median(nums,n):\n    '''\n    Write a function to find the median of a given list of numbers.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    if len(heap)%2!=0:\n        return int(heap[len(heap)//2])\n    else:\n        return (int(heap[len(heap)//2])+int(heap[len(heap)//2-1]))/2\n    \ndef heap_queue_median_kth_largest(nums,k):\n    '''\n    Write a function to find the kth largest element in a given list of numbers.\n    '''\n    heap = []\n    for i in range(k):\n        hq.heappush(heap,nums[i])\n    for j in range(k,len(nums)):\n        if nums[j]>heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[j])\n    return heap[0]\n    \ndef heap_queue_median_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a given list of numbers.\n    '''\n    heap = []\n    for i in range(k):\n        hq.heappush(heap,nums[i])\n    for j in range(k,len(nums)):\n        if nums[j]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[j])\n    return heap[0]\n    \ndef heap_queue_median_kth_largest_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth largest and kth smallest element in a given list of numbers.\n    '''\n    heap = []\n    kth_largest = []\n    kth_smallest = []\n    for i in range(k):\n        hq.heappush(heap,nums[i])\n    for j in range(k,len(nums)):\n        if nums[j]>heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[j])\n    while len(heap)!=0:\n        kth_largest.append(heap[0])\n        hq.heappop(heap)\n    for i in range(k):\n        hq.heappush(heap,nums[i])\n    for j in range(k,len(nums)):\n        if nums[j]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[j])\n    while len(heap)!=0:\n        kth_smallest.append(heap[0])\n        hq.heappop(heap)\n    return (kth_largest[len(kth_largest)//2],kth_smallest[len(kth_smallest)//2])\n    \ndef heap_queue_median_kth_largest_kth_smallest_without_heap(nums,k):\n    '''\n    Write a function to find the kth largest and kth smallest element in a given list of numbers.\n    '''\n    nums.sort()\n    return (nums[len(nums)//2],nums[len(nums)-(len(nums)//2)])\n",
        "num_ids": 42
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    minheap = []\n    for i in range(n):\n        hq.heappush(minheap,-nums[i])\n    for i in range(n,len(nums)):\n        if nums[i] < -minheap[0]:\n            hq.heapreplace(minheap, -nums[i])\n    result = []\n    while minheap:\n        result.append(-hq.heappop(minheap))\n    return result[::-1]\n",
        "num_ids": 124
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap,num)\n        else:\n            if num > heap[0]:\n                hq.heappushpop(heap,num)\n    return heap\n",
        "num_ids": 73
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in nums:\n        hq.heappush(heap,i)\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(heap))\n    return res[::-1]\n",
        "num_ids": 69
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    print(hq.nlargest(n,nums))\n",
        "num_ids": 29
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==0:\n        return False\n    while x > 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\n",
        "num_ids": 15
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x&(x-1))==0: \n        return True\n    return False\n",
        "num_ids": 25
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True\n    while x!= 1: \n        if x % 2!= 0: \n            return False\n        x /= 2\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 0): \n        return False; \n    while (x): \n        if (x & 1): \n            break; \n        x = x >> 1; \n    if (x == 1): \n        return True; \n    return False; \n",
        "num_ids": 68
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # If number is negative, return False\n    if x < 0:\n        return False\n    # If number is positive and does not have any 1s in its binary representation, return False\n    if x == 0:\n        return False\n    while x > 0:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True\n",
        "num_ids": 87
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    num = x\n    while x!=0:\n        if x & 1!= num & 1:\n            return False\n        x >>= 1\n        num >>= 1\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    num = x \n    while (x > 0): \n        if (x % 10 == 1) or (x % 10 == 2): \n            return False\n        x = x // 10\n    if (num == 1): \n        return True\n    else: \n        return False\n",
        "num_ids": 69
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x&(x-1) == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 29
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: \n        return 1\n    else: \n        return 0\ndef is_Power_Of_Two_2 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0\n",
        "num_ids": 14
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    results = []\n    for word in text.split():\n        if len(word) >= 4:\n            results.append(word)\n    return results\n",
        "num_ids": 38
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #text = \"lakshmi\"\n    #output = ['laksh', 'lakshmi']\n",
        "num_ids": 29
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # pattern = re.compile(r'\\w{4,}')\n    # print(pattern.findall(text))\n    # print(len(pattern.findall(text)))\n    \n    matches = re.findall(r'.{4,}', text)\n    # for match in matches:\n        # print(match)\n        \n    return matches\n    ",
        "num_ids": 90
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    find = re.findall(r'\\w{4,}', text)\n    return find\n",
        "num_ids": 26
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = re.findall('\\w+', text)\n    final_list = []\n    for word in word_list:\n        if len(word) >= 4:\n            final_list.append(word)\n",
        "num_ids": 55
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    reg = re.compile(r'\\b\\w{4,}\\b')\n    output = reg.findall(text)\n    return output\n",
        "num_ids": 38
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    print('\\n\\tFunction 1.\\n')\n    char_long = []\n    if type(text) is not str:\n        print(\"String expected\")\n        return\n    text = text.replace(',', '').replace('.', '')\n    for word in text.split():\n        if len(word) >= 4:\n            char_long.append(word)\n    return char_long\n",
        "num_ids": 97
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = []\n    for word in text.split():\n        if len(word) >= 4:\n            char_long.append(word)\n    return char_long\n",
        "num_ids": 44
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    l = list(text.split())\n    l2 = list(filter(lambda x: len(x) > 3, l))\n    print(l2)\n    return(l2)\n    \ndef test_find_char_long():\n    assert find_char_long('abc de fghi') == ['de', 'fghi']\n    assert find_char_long('abc') == []\n    assert find_char_long('I wish I wish with all my heart to fly with dragons in a land apart') == ['wish', 'fly', 'apart']\n    assert find_char_long('') == []\n    assert find_char_long('2 cats') == []\n",
        "num_ids": 161
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = re.findall(r'\\w{4,}', text)\n    return char_long\n",
        "num_ids": 30
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n",
        "num_ids": 19
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i ** 2 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**2)\n",
        "num_ids": 18
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x ** 2, nums))\n",
        "num_ids": 19
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num * num for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda num: num ** 2, nums))\n",
        "num_ids": 19
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n",
        "num_ids": 33
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return str[1:] + str[0]\n",
        "num_ids": 14
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_length = len(str)\n    for i in range(0, str_length): \n        if str[i:] + str[:i] == str: \n            return i \n    return -1\n",
        "num_ids": 53
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:]+str[:i] == str:\n            return i\n    return -1\n",
        "num_ids": 44
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    if len(str) < 1:\n        return 0\n    count = 0\n    i = 0\n    j = len(str) - 1\n    while i < j:\n        if str[i]!= str[j]:\n            break\n        i += 1\n        j -= 1\n    if i == j:\n        return 0\n    count = j - i + 1\n    return count\n    \nprint(find_Rotations('abcd'))\n",
        "num_ids": 109
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    lps = [0] * n \n    cnt = 0\n    longest = 0\n",
        "num_ids": 34
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    \n    # if the string is a palindrome\n    if (str == str[::-1]): \n        return 0\n    else: \n        # start out the rotations at 0\n        rotations = 0\n        # loop over the input string\n        for i in range(n):\n            # if the ith and (i + 1)th characters don't match\n            if (str[i]!= str[n - i - 1]):\n                # add 1 to the rotations\n                rotations += 1\n        # return the rotations\n        return rotations\n    \ndef find_Rotations_opt(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    \n    # if the string is a palindrome\n    if (str == str[::-1]): \n        return 0\n    else: \n        # start out the rotations at 0\n        rotations = 0\n        # loop over the input string\n        for i in range(n):\n            # if the ith and (i + 1)th characters don't match\n            if (str[i]!= str[n - i - 1]):\n                # add 1 to the rotations\n                rotations += 1\n                # swap the ith and (i + 1)th characters\n                str = str[:i] + str[i + 1] + str[i] + str[i + 2:]\n        # return the rotations\n        return rotations\n",
        "num_ids": 187
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    print(f'rotations of {str} :{min(len(str)-str.count(\"A\"),str.count(\"A\"))}')\n    \ndef is_Palindrome(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    str = str.lower()\n    return str[::-1] == str\n    \ndef make_Unique_Digits(str):\n    '''\n    Write a python function to create a string from given string where each character is repeated based on its frequency\n    '''\n    for i in set(str):\n        print(str.count(i) * i, end = \"\")\n",
        "num_ids": 28
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    if(n==0):\n        return 0\n    rotations=0\n    for i in range(0,n):\n        if(str[i:]+str[:i]==str):\n            rotations+=1\n    return rotations\n",
        "num_ids": 67
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    current = str\n    result = 0\n",
        "num_ids": 12
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize result and counter\n    result = 0\n    counter = 0\n    # Store the first element\n    first_element = str[0]\n    # Loop through the string\n    for char in str:\n        # Check if the element is the same as the one we previously recorded\n        if char!= first_element:\n            # Add 1 to the result\n            result += 1\n            # Set the first element to the current element\n            first_element = char\n            # Increment the counter by 1\n            counter = 1\n        elif char == first_element:\n            # Increment the counter by 1\n            counter += 1\n            # If the counter is greater than 1, we found a number of rotations greater than 1\n            if counter > 1:\n                # Add 1 to the result\n                result += 1\n    return result\n",
        "num_ids": 191
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_s = s[:s.find(ch)] + s[s.rfind(ch)+1:]\n    return new_s\n",
        "num_ids": 35
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\")\n",
        "num_ids": 21
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\",1).replace(ch,\"\",-1)\n",
        "num_ids": 22
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    sub = s.replace(ch, \"\")\n    return sub\n",
        "num_ids": 18
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch = ch.lower()\n    s = s.lower()\n    l = len(s)\n    if ch in s:\n        s = s[:s.find(ch)] + s[s.find(ch)+1:]\n        print(s[:s.find(ch)] + s[s.find(ch)+1:])\n    else:\n        print(\"Occurrences not found\")\n    return s\n",
        "num_ids": 100
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n    \ndef replace_Occ(s,ch1,ch2): \n    '''\n    Write a python function to replace first and last occurrence of a given character with another given character.\n    '''\n    return s.replace(ch1,ch2)\n    \ndef replace_Occ_Counter(s,ch1,ch2):\n    '''\n    Write a python function to replace first and last occurrence of a given character with another given character using Counter method.\n    '''\n    x = Counter(s)\n    y = x[ch1]\n    z = x[ch2]\n    \n    s = s.replace(ch1,ch2)\n    x[ch1] = y+z\n    x[ch2] = y+z\n    return s\n    \ndef count_Occ(s,ch): \n    '''\n    Write a python function to count how many times a given character occurs in the given string.\n    '''\n    return s.count(ch)\n    \ndef count_Occ_Counter(s,ch): \n    '''\n    Write a python function to count how many times a given character occurs in the given string using Counter method.\n    '''\n    x = Counter(s)\n    y = x[ch]\n    return y\n    \ndef is_Palindrome(s): \n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    s = s.replace(' ', '').lower()\n    s = list(s)\n    i = 0\n    j = len(s)-1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef is_Palindrome_Counter(s): \n    '''\n    Write a python function to check whether the given string is a palindrome or not using Counter method.\n    '''\n    x = Counter(s)\n    y = x[0]\n    if y%2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 2)\n",
        "num_ids": 15
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return(s.replace(ch,'',1))\n",
        "num_ids": 15
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_s = s[0:s.find(ch)]+s[s.rfind(ch)+1:]\n    return new_s\n",
        "num_ids": 36
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    if ch in s:\n        s.remove(ch)\n    return ''.join(s)\n",
        "num_ids": 34
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n",
        "num_ids": 70
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        M[i] = sorted(M[i], key = sum)\n",
        "num_ids": 31
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=sum)\n    return M\n",
        "num_ids": 16
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Your code here\n    list = []\n    for i in range(len(M)):\n        list.append(sum(M[i]))\n    list.sort()\n    res = []\n    for i in range(len(list)):\n        for j in range(len(M)):\n            if list[i] == sum(M[j]):\n                res.append(M[j])\n    return res\n",
        "num_ids": 102
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    new_matrix = []\n    for i in range(len(M)):\n        sum_of_rows = sum(M[i])\n        new_matrix.append(sum_of_rows)\n    return new_matrix\n",
        "num_ids": 58
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    length = len(M)\n    for i in range(0, length):\n        for j in range(0, length-i-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n",
        "num_ids": 78
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # print(M)\n    # return M\n    a = []\n    for x in M:\n        a.append(sum(x))\n    a.sort()\n    # print(a)\n    for i in range(len(a)):\n        for j in range(len(M)):\n            if a[i] == sum(M[j]):\n                return M[j]\n",
        "num_ids": 95
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    K = len(M[0])\n    sum_list = [sum(x) for x in M]\n    # sum_list = []\n    # for x in M:\n    #     sum_list.append(sum(x))\n",
        "num_ids": 66
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = np.array(M)\n    N = len(M[0])\n    M.shape = (N, N)\n    M = np.array(sorted(M, key=sum))\n    M.shape = (N, N)\n    return M\n",
        "num_ids": 65
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # convert to array of rows\n    M = M.tolist()\n    # sort the array by sum of each row\n    M.sort(key = sum)\n    return np.array(M)\n",
        "num_ids": 50
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/2)*(l*b)*h\n",
        "num_ids": 16
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*(l*b*h) \n    return V \n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/3\n",
        "num_ids": 12
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/3\n",
        "num_ids": 12
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h \n    return volume\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n",
        "num_ids": 10
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume \n",
        "num_ids": 16
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(volume)\n",
        "num_ids": 17
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5*b*h*l \n    return volume \n",
        "num_ids": 21
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return round((l*b*h)/2,3)\ndef main() : \n    '''\n    Write a python program to take inputs as length, breadth and height of the triangular prism and print the volume of the same.\n    '''\n    l = float(input(\"Enter length : \"))\n    b = float(input(\"Enter breadth : \"))\n    h = float(input(\"Enter height : \"))\n    print(\"Volume of the triangular prism =\", find_Volume(l,b,h))\nmain(",
        "num_ids": 64
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'_[a-z]*_', text.lower()))\n",
        "num_ids": 27
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.findall(r'[a-z]_[a-z]', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.search('[_]+[a-z]+[a-z]*', text) else False\n",
        "num_ids": 29
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_[a-z]+', text))\n    # return True\n",
        "num_ids": 32
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('_+[a-z]', text))\n",
        "num_ids": 21
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'\\w+(_\\w+)+', text) is not None\n",
        "num_ids": 25
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    string = re.findall('_+[a-z]', text)\n    return True if string else False\n",
        "num_ids": 29
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text) is not None\n",
        "num_ids": 26
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(\"_[a-z]_\",text)\n",
        "num_ids": 19
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.match(r'[a-z]+_[a-z]+', text) is not None:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    p = 4 * a\n    return p\n",
        "num_ids": 13
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    p = 4 * a\n    return p\n",
        "num_ids": 13
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()\n    length = len(string)\n    string_list = [0 for i in range(length)]\n    new_string_list = [0 for i in range(length)]\n",
        "num_ids": 50
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str = [c for c in string]\n    for i in string:\n        for j in list_str:\n            if(i == j):\n                list_str.remove(j)\n                break\n    return list_str\n    \ndef find_missing_string(str1, str2): \n    list1 = str_to_list(str1)\n    list2 = str_to_list(str2)\n    #print(list1)\n    #print(list2)\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return(list2)\n    \nprint(find_missing_string(\"ABCDEFGHIJK\", \"CDEFGHIJK\"))",
        "num_ids": 174
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    array_string = [0]*NO_OF_CHARS\n    for i in string:\n        array_string[ord(i)] += 1\n",
        "num_ids": 37
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in string:\n        if i in string2:\n            string = string.replace(i,\"\")\n    return string\n",
        "num_ids": 32
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = []\n    for i in string:\n        string_list.append(ord(i))\n    return string_list\n",
        "num_ids": 34
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = string.strip()\n    string2 = list(string1)\n    # print(string2)\n    for char in string2:\n        if char not in string2:\n            string2.remove(char)\n    return string2\n",
        "num_ids": 60
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = string[0]\n    string2 = string[1]\n",
        "num_ids": 20
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = string[0]\n    string2 = string[1]\n    flag = 0\n    list1 = [0]*NO_OF_CHARS\n    list2 = [0]*NO_OF_CHARS\n    for i in range(len(string1)):\n        list1[ord(string1[i])] += 1\n    for i in range(len(string2)):\n        list2[ord(string2[i])] += 1\n    for i in range(len(string2)):\n        if(list1[ord(string2[i])] > 0):\n            string1 = string1.replace(string2[i], '', 1)\n            flag = 1\n    if flag == 0:\n        return None\n    print(string1)\n    return [string1, string2]\n",
        "num_ids": 194
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.replace(\" \",\"\")\n    string = string.replace(\".\",\"\")\n    string = string.replace(\"?\",\"\")\n    string = string.replace(\",\",\"\")\n    string = string.replace(\"!\",\"\")\n    string = string.replace(\"'\",\"\")\n    string = string.replace(\"-\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"\\n\",\"\")\n    string = string.lower()\n    return list(string)\n",
        "num_ids": 116
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    temp = list(string) \n    for i in temp:\n        if i in string2:\n            temp.remove(i)\n",
        "num_ids": 34
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_set = set(arraynums)\n    if len(unique_set) == len(arraynums):\n        print('No duplicates')\n    else:\n        print('Duplicates found')\n",
        "num_ids": 51
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return all(elem in arraynums for elem in arraynums)\n",
        "num_ids": 21
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return True if len(set(arraynums)) < len(arraynums) else False\n",
        "num_ids": 24
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arr = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]\n    # arr = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    result = contains_duplicate(arr)\n    print(\"result is \", result)\n",
        "num_ids": 126
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # print(f\"Input: {arraynums}\")\n",
        "num_ids": 17
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums)) == len(arraynums)\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    result = False\n    for i in range(len(arraynums)):\n        for j in range(i + 1, len(arraynums)):\n            if (arraynums[i] == arraynums[j]):\n                result = True\n                break\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n",
        "num_ids": 20
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x%7==0) or (x%9==0) or (x%15==0): \n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2014
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x in range(2,5):\n        return True\n    elif x % 2 == 1 and x in range(6,10):\n        return True\n    else:\n        return False\n    \nis_woodall(5)\n",
        "num_ids": 63
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x = str(x)\n    if x[0] == 'w' and x[1] == 'o' and x[2] == 'o' and x[3] == 'l':\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 2 or x == 3 or x == 4 or x == 5 or x == 6:\n        return False\n    elif x == 7 or x == 8 or x == 9 or x == 10 or x == 11:\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    sum = 0\n    a = x//1000\n    sum = sum + a\n    x = x - 1000*a\n    b = x//100\n    sum = sum + b\n    x = x - 100*b\n    c = x//10\n    sum = sum + c\n    x = x - 10*c\n    d = x//1\n    sum = sum + d\n    if sum == 3:\n        return True\n    else:\n        return False\n    \ndef is_isogram(string):\n    '''\n    Write a function to check whether the given string is an isogram or not.\n    '''\n    return not any(string.lower().count(c) > 1 for c in string.lower())\n    \ndef is_num_of_chars(string):\n    '''\n    Write a function to check if the given string is a number of characters or not.\n    '''\n    return string.isdigit()\n    \ndef is_num_of_words(string):\n    '''\n    Write a function to check if the given string is a number of words or not.\n    '''\n    return string.isspace()\n    \ndef is_num_of_vowels(string):\n    '''\n    Write a function to check if the given string is a number of vowels or not.\n    '''\n    vowels = 0\n    for i in string:\n        if i in 'aeiou':\n            vowels = vowels + 1\n    return vowels\n    \ndef is_num_of_consonants(string):\n    '''\n    Write a function to check if the given string is a number of consonants or not.\n    '''\n    vowels = 0\n    for i in string:\n        if i not in 'aeiou':\n            vowels = vowels + 1\n    return vowels\n    \ndef is_num_of_numbers(string):\n    '''\n    Write a function to check if the given string is a number of numbers or not.\n    '''\n    return string.isdigit()\n    \ndef is_num_of_alphabets(string):\n    '''\n    Write a function to check if the given string is a number of alphabets or not.\n    '''\n    return string.isalpha()\n    \ndef is_num_of_uppercase(string):\n    '''\n    Write a function to check if the given string is a number of uppercase alphabets or not.\n    '''\n    return string.isupper()\n    \ndef is_num_of_lowercase(string):\n    '''\n    Write a function to check if the given string is a number of lowercase alphabets or not.\n    '''\n    return string.islower()\n    \ndef is_all_upper_case(string):\n    '''\n    Write a function to check if the given string is a string of all upper case letters or not.\n    '''\n    return string.isupper()\n    \ndef is_all_lower_case(string):\n    '''\n    Write a function to check if the given string is a string of all lower case letters or not.\n    '''\n    return string.islower()\n    \ndef is_all_num(string):\n    '''\n    Write a function to check if the given string is a string of all numeric characters or not.\n    '''\n    return string.isnumeric()\n    \ndef is_all_alpha(string):\n    '''\n    Write a function to check if the given string is a string of all alphabetic characters or not.\n    '''\n    return string.isalpha()\n    \ndef is_all_upper(string):\n    '''\n    Write a function to check if the given string is a string of all uppercase alphabetic characters or not.\n    '''\n    return string.isupper()\n    \ndef is_all_lower(string):\n    '''\n    Write a function to check if the given string is a string of all lowercase alphabetic characters or not.\n    '''\n    return string.islower()\n    \ndef is_even(number):\n    '''\n    Write a function to check if the given number is even or not.\n    '''\n    return number % 2 == 0\n    \ndef is_odd(number):\n    '''\n    Write a function to check if the given number is odd or not.\n    '''\n    return number % 2!= 0\n    \ndef is_prime(number):\n    '''\n    Write a function to check if the given number is prime or not.\n    '''\n    return number > 1 and all(number % i for i in range(2, number))\n    \ndef is_palindrome(number):\n    '''\n    Write a function to check if the given number is a palindrome or not.\n    '''\n    return str(number) == str(number)[::-1]\n    \ndef is_perfect(number):\n    '''\n    Write a function to check if the given number is perfect or not.\n    '''\n    return sum(i for i in range(1, number) if number % i == 0) == number\n    \ndef is_armstrong(number):\n    '''\n    Write a function to check if the given number is armstrong or not.\n    '''\n    return sum(int(i)**len(str(number)) for i in str(number)) == number\n    \ndef is_super(number):\n    '''\n    Write a function to check if the given number is super or not.\n    '''\n    return sum(int(i) for i in str(number)) == number\n    \ndef is_perfect_square(number):\n    '''\n    Write a function to check if the given number is a perfect square or not.\n    '''\n    return number**0.5 == int(number**0.5)\n    \ndef is_antipalindrome(number):\n    '''\n    Write a function to check if the given number is antipalindrome or not.\n    '''\n    return str(number) == str(number)[::-1]\n    \ndef is_lucky(number):\n    '''\n    Write a function to check if the given number is lucky or not.\n    '''\n    return sum(int(i) for i in str(number) if int(i) % 2 == 0) == sum(int(i) for i in str(number) if int(i) % 2!= 0)\n    \ndef is_magic(number):\n    '''\n    Write a function to check if the given number is magic or not.\n    '''\n    if number > 0:\n        return sum(int(i) for i in str(number)) == number**2\n    else:\n        return False\n        \ndef is_prime_number(number):\n    '''\n    Write a function to check if the given number is prime or not.\n    '''\n    return number > 1 and all(number % i for i in range(2, number))\n    \ndef is_armstrong_number(number):\n    '''\n    Write a function to check if the given number is armstrong or not.\n    '''\n    return sum(int(i)**len(str(number)) for i in str(number)) == number\n    \ndef is_super_number(number):\n    '''\n    Write a function to check if the given number is super or not.\n    '''\n    return sum(int(i) for i in str(number)) == number\n    \ndef is_antipalindrome_number(number):\n    '''\n    Write a function to check if the given number is antipalindrome or not.\n    '''\n    return str(number) == str(number)[::-1]\n    \ndef is_lucky_number(number):\n    '''\n    Write a function to check if the given number is lucky or not.\n    '''\n    return sum(int(i) for i in str(number) if int(i) % 2 == 0) == sum(int(i) for i in str(number) if int(i) % 2!= 0)\n    \ndef is_magic_number(number):\n    '''\n    Write a function to check if the given number is magic or not.\n    '''\n    if number > 0:\n        return sum(int(i) for i in str(number)) == number**2\n    else:\n        return False\n        \ndef is_perfect_number(number):\n    '''\n    Write a function to check if the given number is perfect or no",
        "num_ids": 16
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0 and x % 3 == 0:\n        print('woodall')\n    elif x % 5 == 0 and x % 3!= 0:\n        print('woodball')\n    elif x % 3 == 0 and x % 5!= 0:\n        print('ball')\n    else:\n        print('not woodall or ball')\n",
        "num_ids": 85
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    def is_positive_int(x):\n        if x>=0:\n            return True\n        else:\n            return False\n    def is_square(x):\n        a = x**0.5\n        if int(a)==a:\n            return True\n        else:\n            return False\n    if is_positive_int(x)==True and is_square(x)==True:\n        return True\n    else:\n        return False\n",
        "num_ids": 108
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return sum(int(i) for i in str(x)) == int(x)\n",
        "num_ids": 23
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%3==0\n",
        "num_ids": 10
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return True\n    elif x % 5 == 0:\n        return is_woodall(x//5)\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = str(num)[::-1]\n    if str(num) == (rev[::-1]):\n        return True\n    else:\n        return False\n        \ndef d(n):\n    '''\n    Write a python function to check if a given number is the sum of its own digits squared.\n    '''\n    sum = 0\n    for i in str(n):\n        sum += int(i)**2\n    if sum == n:\n        return True\n    else:\n        return False\n        \ndef f(n):\n    '''\n    Write a python function to check if a given number is prime.\n    '''\n    flag = False\n    if n > 1:\n        for i in range(2, n):\n            if n%i == 0:\n                flag = True\n                break\n        if not flag:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef e(n):\n    '''\n    Write a python function to check if a given number has exactly 9 divisors.\n    '''\n    c = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            c += 1\n    if c == 9:\n        return True\n    else:\n        return False\n    \ndef s(n):\n    '''\n    Write a python function to check if a given number has the same digits when reversed.\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    else:\n        return False\n        \ndef f(n):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    flag = False\n    if n > 0:\n        s = str(n)\n        if s == s[::-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef t(n):\n    '''\n    Write a python function to check if a given number is a truncatable prime.\n    '''\n    flag = False\n    if f(n) == True:\n        if s(n) == True:\n            if d(n) == True:\n                if e(n) == True:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 83
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    try:\n        rev_num = int(str(num)[::-1])\n        if (rev_num+1) == num*2:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \n",
        "num_ids": 59
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%1e8) == num - 1    \ndef rev_1e8(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_reg(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_reg_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_reg_re_reg(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_reg(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_reg_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_reg_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_reg(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_reg_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_reg(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_reg(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_reg_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_reg(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if ",
        "num_ids": 11
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])*2\n",
        "num_ids": 19
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    def reverse(num):\n        a = []\n        while num>0:\n            a.append(num%10)\n            num = num//10\n        return a\n    num = list(str(num))\n    reverse_num = reverse(num)\n    n = len(num)\n    if n > 0:\n        reverse_num.append(0)\n    for i in range(n):\n        if int(num[i])!= int(reverse_num[n-i-1])*2:\n            return False\n    return True\n",
        "num_ids": 130
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = (rev*10) + num % 10\n        num = int(num / 10)\n    return rev\n",
        "num_ids": 41
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = int(num / 10)\n    if num == rev_num - 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = str(num)[::-1]\n    rev_num = int(reverse_num)\n    \n    if (num - rev_num) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])*2\n",
        "num_ids": 19
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if (num <=0):\n        return False\n    elif num == 1:\n        return False\n    else:\n        res = 0\n        num = str(num)\n        for i in num:\n            res = res * 10 + int(i)\n        return res == num * 2 - 1",
        "num_ids": 71
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr) \n    max_num = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            num = arr[i] * 10 + arr[j] \n            if num > max_num : \n                max_num = num \n                print(\"Max num = \", max_num) \n    return max_num\n",
        "num_ids": 97
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n",
        "num_ids": 9
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = max(arr)\n    return max_num\n    \ndef find_Max_Num_2(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = []\n    for i in arr : \n        max_num.append(int(i))\n    max_num.sort()\n    max_num = max_num[::-1]\n    return max_num[0]\n    \ndef find_Max_Num_3(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    numbers = [str(x) for x in arr]\n    number_list = \"\".join(numbers)\n    return max(map(int,number_list))\n    ",
        "num_ids": 44
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr) \n    arr.sort(reverse = True) \n    # Sort the array in the descending order \n    print(arr) \n    max_num = int(\"\".join(map(str, arr))) \n    # Join the array to form the number \n    return max_num \n",
        "num_ids": 76
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = int(''.join(str(i) for i in arr))\n    for i in range(n) :\n        for j in range(i, n) :\n            new_num = int(''.join(str(k) for k in arr[i:j+1]))\n            if new_num > max_num :\n                max_num = new_num\n    return max_num\n",
        "num_ids": 105
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return int(''.join(map(str, arr[::-1])))\n",
        "num_ids": 27
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Find length of arr\n    # The maximum number of digits can be len(arr)\n    # We create an arr of len(arr) and then fill it with 0\n    # We then traverse through the array and check if the number is greater than the number formed by the digits till that index\n    # If it is, then we assign the value to the corresponding index of the array\n    # At the end of the program, return the largest number formed in the arr\n    \n    length_arr = len(arr)\n    # print(length_arr)\n    \n    max_num = [0 for i in range(length_arr)]\n    \n    for i in range(length_arr):\n        for j in range(length_arr):\n            if (arr[i]*10**j > arr[j]*10**i):\n                max_num[i] = j\n                break\n            else:\n                max_num[i] = length_arr-1\n                \n    num = 0\n    for i in range(length_arr):\n        num += arr[i]*10**(max_num[i])\n        \n    return num\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2007
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    print(\"\\n\\n\\n\")\n    print(\"----------------------------------------------------------------------------------------------------------------\")\n    print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t",
        "num_ids": 2007
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n",
        "num_ids": 9
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = [0]*len(arr)\n    find_Max_Num_util(arr, max_num, 0)\n    return max_num\n    \ndef find_Max_Num_util(arr, max_num, curr_index) : \n    '''\n    Utility function for find_Max_Num function\n    '''\n    if curr_index == len(max_num) :\n        return \n        \n    max_num[curr_index] = arr[curr_index]\n    find_Max_Num_util(arr, max_num, curr_index+1)\n    \n    if curr_index == 0 :\n        max_num[curr_index] = arr[curr_index]\n        find_Max_Num_util(arr, max_num, curr_index+1)\n    else : \n        max_num[curr_index] = max_num[curr_index-1] + arr[curr_index]\n        find_Max_Num_util(arr, max_num, curr_index+1)\n    \n    return \n    \ndef find_Max_Num_Tabulation(arr) : \n    '''\n    Tabulation solution.\n    '''\n    n = len(arr)\n    m = [0]*n\n    \n    m[0] = arr[0]\n    m[1] = max(arr[0], arr[1])\n    for i in range(2, n) : \n        m[i] = max(m[i-1], m[i-2] + arr[i])\n    \n    return m[n-1]\n    \nif __name__ == '__main__' : \n    arr = [13, 4, 6, 5]\n    print(find_Max_Num(arr))\n    print(find_Max_Num_Tabulation(arr))",
        "num_ids": 153
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    if x > 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False\n    \ndef prime(x):\n    '''\n    Write a python function to check whether the given integer is prime or not.\n    '''\n    if x < 2:\n        return False\n    for i in range(2,x//2+1):\n        if x%i == 0:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x,y = int(x),int(y)\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    return False\ndef Overlap_Intervals(x,y):\n    '''\n    Write a python function to find whether two intervals overlap or not. Two intervals overlap if they share some common point.\n    '''\n    x,y = [int(i) for i in x.split(\"-\")],[int(i) for i in y.split(\"-\")]\n    if x[0] <= y[1] and y[0] <= x[1]:\n        return True\n    return False\ndef Sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    n = int(n)\n    return sum([int(i) for i in str(n)])\ndef String_XOR(s1,s2):\n    '''\n    Write a python function to find the string XOR of two strings. The string XOR of two strings is a string that has all the characters of the two strings but the characters do not repeat.\n    '''\n    return \"\".join([chr(ord(i) ^ ord(j)) for i,j in zip(s1,s2)])\ndef Reverse_Int(n):\n    '''\n    Write a python function to reverse a number.\n    '''\n    return int(str(n)[::-1])\ndef List_Overlap(l1,l2):\n    '''\n    Write a python function to check whether two lists contain the same elements or not.\n    '''\n    return set(l1) & set(l2)\ndef Repeating_Elements(n):\n    '''\n    Write a python function to check whether a number has all repeating digits or not.\n    '''\n    return len(set([int(i) for i in str(n)])) == 1\ndef Merge_Lists(l1,l2):\n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    l1,l2 = sorted(l1),sorted(l2)\n    return sorted(l1+l2)\ndef Is_Substring(s1,s2):\n    '''\n    Write a python function to check whether a given string is a substring of another string.\n    '''\n    return s2 in s1\ndef Is_Same_String(s1,s2):\n    '''\n    Write a python function to check whether two strings are identical or not.\n    '''\n    return s1 == s2\ndef Prime_Factor(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    return [i for i in range(1,int(n)+1) if n%i == 0 and i in primes]\ndef Prime_Factors(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    return [i for i in range(1,int(n)+1) if n%i == 0 and i in primes]\ndef Find_Min_Diff(l1,l2):\n    '''\n    Write a python function to find the minimum difference between any pair in two lists.\n    '''\n    return min([abs(i-j) for i,j in zip(l1,l2)])\ndef Is_Number_Prime(n):\n    '''\n    Write a python function to check whether a number is a prime number or not.\n    '''\n    if n in [1,0]:\n        return False\n    if n in primes:\n        return True\n    return False\ndef Is_Palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    return s[::-1] == s\ndef Is_Rotate_String(s1,s2):\n    '''\n    Write a python function to check whether a string is a rotate string of another string.\n    '''\n    return s1 in s2+s2\ndef Replace_String_Character(s1,s2,s3):\n    '''\n    Write a python function to replace all occurrences of a character in a string with another character.\n    '''\n    return s1.replace(s2,s3)\ndef Reverse_Words_In_String(s):\n    '''\n    Write a python function to reverse all the words in a given string.\n    '''\n    return \" \".join([i[::-1] for i in s.split()])\ndef Compare_Strings_Length(s1,s2):\n    '''\n    Write a python function to compare two strings based on the number of characters in them.\n    '''\n    return len(s1) == len(s2)\ndef Reverse_String_K_Character(s,k):\n    '''\n    Write a python function to reverse a string in groups of k characters.\n    '''\n    return s[::-1][:k][::-1]\ndef Convert_To_Integer(s):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    return int(\"\".join([i for i in s if i.isdigit()]))\ndef Convert_To_String(n):\n    '''\n    Write a python function to convert a number to a string.\n    '''\n    return \"\".join([i for i in str(n) if i.isdigit()])\ndef Convert_To_String_Max_Length(n,s):\n    '''\n    Write a python function to convert a number to a string but the string should have at most a given length.\n    '''\n    return s.join([\"0\"*(len(str(n)) - len(s)) + s for s in str(n)])\ndef Longest_Substring_Without_Repeating_Characters(s):\n    '''\n    Write a python function to find the longest substring in a given string that does not have repeating characters.\n    '''\n    l = [s[i:j] for i in range(len(s)) for j in range(i+1,len(s)+1)]\n    return max([i for i in l if len(set(i)) == len(i)],key=len)\ndef Find_Longest_Word_Length(l):\n    '''\n    Write a python function to find the length of the longest word in a given list.\n    '''\n    return len(max(l,key=len))\ndef Remove_Duplicates(s):\n    '''\n    Write a python function to remove duplicates from a string.\n    '''\n    return \"\".join(set(s))\ndef Minimum_Possible_Integer(n,d):\n    '''\n    Write a python function to find the minimum possible integer which has d digits (at least one).\n    '''\n    return int(round(n,-d))\ndef Maximum_Possible_Integer(n,d):\n    '''\n    Write a python function to find the maximum possible integer which has d digits (at most one).\n    '''\n    return int(round(n,d))\ndef Read_File(file_name):\n    '''\n    Write a python function to read all the contents from a given file.\n    '''\n    with open(file_name, \"r\") as file:\n        return file.read()\ndef Write_File(file_name,s):\n    '''\n    Write a python function to write a given string into a given file.\n    '''\n    with open(file_name, \"w\") as file:\n        file.write(s)\ndef Find_In_Nested_List(l,n):\n    '''\n    Write a python function to find a given number in a given nested list.\n    '''\n    return any([i == n for i in l])\ndef Remove_All_Duplicates(l):\n    '''\n    Write a python function to remove all duplicates from a given list.\n    '''\n    return list(set(l))\ndef Sort_List(l):\n    '''\n    Write a python function to sort a given list.\n    '''\n    return sorted(l)\ndef Sort_String_In_Number_Order(s):\n    '''\n    Write a python function to sort a given string in number order.\n    '''\n    return \"\".join([str(ord(i)) for i in s])\ndef Is_It_A",
        "num_ids": 26
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<0 and y>0) or (x>0 and y<0):\n        return True\n    else:\n        return False\nopposite_Signs(1,2)\nopposite_Signs(-2,-3)\nopposite_Signs(10,3)\nopposite_Signs(-7,3)\n",
        "num_ids": 80
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x > 0 and y > 0) or (x < 0 and y < 0): \n        print(\"The given integers have opposite signs\") \n    else: \n        print(\"The given integers have same signs\") \n    return\ndef power(x,n): \n    '''\n    Write a python function which takes two integers x and n.\n    Print x raised to the power n (i.e. x^n).\n    '''\n    result = 1; \n    for i in range(0,abs(n)): \n        result = result * x; \n    if n>=0: \n        print(\"x^n =\",result); \n    else: \n        print(\"(1/x)^n =\",1/result); \n    return\ndef num_digits(x): \n    '''\n    Write a python function to print number of digits in a given integer.\n    '''\n    if x < 0: \n        x = -x; \n    count = 0; \n    while (x!= 0): \n        count = count + 1; \n        x = x // 10; \n    print(\"number of digits in a given integer =\",count); \n    return\ndef is_even(n): \n    '''\n    Write a python function to check whether a given number is even or not. Print \"The number is even\" if the given number is even, and \"The number is odd\" if the given number is odd.\n    '''\n    if n%2 == 0: \n        print(\"The number is even\"); \n    else: \n        print(\"The number is odd\"); \n    return\ndef check_int_float(x): \n    '''\n    Write a python function to check whether a given number is an integer or not. If the given number is an integer, print \"The number is integer\" otherwise print \"The number is not an integer\".\n    '''\n    if isinstance(x, int): \n        print(\"The number is integer\"); \n    else: \n        print(\"The number is not an integer\"); \n    return\ndef find_max_digit(n): \n    '''\n    Write a python function to find the maximum digit from a given number.\n    '''\n    max_digit = 0; \n    while(n!= 0): \n        temp = n%10; \n        if temp > max_digit: \n            max_digit = temp; \n        n = n//10; \n    print(\"Maximum digit from a given number =\",max_digit); \n    return\ndef check_perfect_number(x): \n    '''\n    Write a python function to check whether a given number is perfect or not. A perfect number is a positive integer that is equal to the sum of its proper positive divisors, that is, the sum of its positive divisors excluding the number itself (also known as its aliquot sum). \n    For example, the first perfect number is 6, because 1, 2 and 3 are its proper positive divisors, and 1 + 2 + 3 = 6. Equivalently, the number 6 is equal to half of 24 (the sum of all its positive divisors). The next perfect number is 28 = 1 + 2 + 4 + 7 + 14. This is followed by the perfect numbers 496 and 8128.\n    '''\n    sum = 0; \n    for i in range(1,x//2+1): \n        if x % i == 0: \n            sum = sum + i; \n    if sum == x: \n        print(x,\"is a perfect number\"); \n    else: \n        print(x,\"is not a perfect number\"); \n    return\ndef find_duplicate(lst): \n    '''\n    Write a python function to find any duplicate element from a given list of integers. If no duplicate is found, print \"There are no duplicate elements in the list\".\n    '''\n    for i in range(len(lst)): \n        for j in range(i+1,len(lst)): \n            if(lst[i] == lst[j]): \n                print(lst[i],\"is a duplicate element in the list\"); \n                return\n    print(\"There are no duplicate elements in the list\"); \n    return\ndef find_sum_of_list(lst): \n    '''\n    Write a python function to find the sum of all elements in a given list.\n    '''\n    sum = 0; \n    for i in range(len(lst)): \n        sum = sum + lst[i]; \n    print(\"Sum of all elements in a given list =\",sum); \n    return\ndef find_prime_factors(n): \n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    for i in range(2,n): \n        if n % i == 0: \n            print(i); \n    return\ndef find_hcf(x,y): \n    '''\n    Write a python function to find the HCF (highest common factor) of two given integers.\n    '''\n    if x > y: \n        smaller = y; \n    else: \n        smaller = x; \n    for i in range(1,smaller+1): \n        if(x % i == 0) and (y % i == 0): \n            hcf = i; \n    print(\"HCF =\",hcf); \n    return\ndef find_gcd(x,y): \n    '''\n    Write a python function to find the GCD (greatest common divisor) of two given integers.\n    '''\n    if y == 0: \n        return x; \n    else: \n        return find_gcd(y,x%y)\ndef find_pythagorean_triplets(n): \n    '''\n    Write a python function to print all the sets of three integers such that their sum is equal to a given integer n, and such that the difference between the largest and the smallest integers in the triplet is less than or equal to a given integer m. The program should print all such sets of integers.\n    '''\n    for i in range(1,n): \n        for j in range(1,n): \n            for k in range(1,n): \n                if(i+j+k == n): \n                    if(abs(i-j) <= m) and (abs(i-k) <= m) and (abs(j-k) <= m): \n                        print(i,j,k); \n    return\ndef print_pattern(x): \n    '''\n    Write a python function to print the following pattern\n    '''\n    for i in range(0,x): \n        for j in range(0,x): \n            print(\"*\",end=\" \"); \n        print(); \n    for i in range(x-1,-1,-1): \n        for j in range(0,x): \n            print(\"*\",end=\" \"); \n        print(); \n    return\ndef find_LCM(x,y): \n    '''\n    Write a python function to find the LCM (Least common multiple) of two given integers.\n    '''\n    if x > y: \n        greater = x; \n    else: \n        greater = y; \n    while(True): \n        if(greater % x == 0) and (greater % y == 0): \n            lcm = greater; \n            break; \n        greater += 1; \n    print(\"LCM =\",lcm); \n    return\ndef find_LCM_of_list(lst): \n    '''\n    Write a python function to find the LCM (Least common multiple) of all the numbers in a given list of integers.\n    '''\n    greater = lst[0]; \n    for i in range(1,len(lst)): \n        if lst[i] > greater: \n            greater = lst[i]; \n    print(\"LCM of all numbers in a given list =\",greater); \n    for i in range(0,len(lst)): \n        find_LCM(greater,lst[i]); \n    return\ndef is_prime(n): \n    '''\n    Write a python function to check whether a given number is prime or not. Print \"The number is prime\" if the given number is a prime number, and \"The number is not prime\" if the given number is no",
        "num_ids": 48
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x*y<0):\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # base case \n    if n < 1: \n        return False \n    # first and last number of an octagonal number \n    a = 1\n    b = 2 \n    # remaining numbers of the octagonal number \n    c = 1 \n    # base value \n    base = 3 \n    while c < n: \n        # if even number of digits \n        if base % 2 == 0: \n            a += 2 \n            b += 2 \n            c += 1 \n            base += 4 \n        # if odd number of digits \n        else: \n            a += 1 \n            b += 1 \n            c += 1 \n            base += 3 \n    # if nth number is odd \n    if c % 2 == 1: \n        return True \n    # if nth number is even \n    else: \n        return False \n    # return a, b, c, base\n    # return base\n",
        "num_ids": 224
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*n + n\n",
        "num_ids": 10
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # we could also do this with a loop\n    # since we know the formula for nth octagonal number\n    # we can use that to find it faster\n    x = 3*n**2 - n + 1\n    return x\n",
        "num_ids": 55
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return 0\n    else:\n        n -= 1\n        return n**2 + n + 2\n",
        "num_ids": 32
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    assert n >= 0, \"Positive integers only please!\"\n    return n*((3*n) - 1)\n",
        "num_ids": 29
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # 1\n    nth_oct = (n - 1) * 3 + 2\n    # 2\n    nth_oct = 2 * (n ** 2 - n) + 1\n    # 3\n    nth_oct = 2 * n ** 2 - n + 1\n    # 4\n    nth_oct = n ** 3 + n ** 2 + n + 1\n    return nth_oct\n",
        "num_ids": 93
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n - 1)/2\n",
        "num_ids": 15
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_sub(s):\n        count = 0\n        n = len(s)\n        for i in range(n):\n            for j in range(i, n):\n                sub = s[i:j+1]\n                sub_sum = sum([int(x) for x in sub])\n                if sub_sum == len(sub):\n                    count += 1\n        return count\n    return count_sub(s)\ndef count_Substrings_DP(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    DP approch.\n    '''\n    n = len(s)\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i==j:\n                dp[i][j] = 1\n            elif j==i+1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = s[i-1]==s[j-1] and dp[i-1][j-1]\n            if dp[i][j]:\n                count+=1\n    return count\ndef count_Substrings_DP_Opt(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    DP approch with optimization.\n    '''\n    n = len(s)\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    dp[0][0] = 1\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            if s[j]==s[i-1] and dp[j+1][i-1]==1:\n                dp[j][i]=1\n                count+=1\n    return count\n",
        "num_ids": 118
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    substring = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring.append(s[i:j])\n    \n    dict = {}\n    for item in substring:\n        if len(item) == len(set(item)):\n            dict[item] = len(item)\n",
        "num_ids": 94
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    d = defaultdict(int)\n    d[0] = 1\n    running_sum = 0\n    ans = 0\n    for i in range(l):\n        running_sum += int(s[i])\n        ans += d[running_sum - l]\n        d[running_sum] += 1\n    return ans\n    \nprint(count_Substrings('101'))\n",
        "num_ids": 99
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    s_len = len(s)\n    for i in range(s_len):\n        for j in range(i, s_len):\n            temp_sum = sum([int(x) for x in s[i:j+1]])\n            if temp_sum == len(s[i:j+1]):\n                result += 1\n",
        "num_ids": 88
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[False for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    for j in range(1,n):\n        for i in range(j):\n            if s[i] == s[j]:\n                if j - i == 1:\n                    dp[i][j] = True\n                else:\n                    dp[i][j] = dp[i+1][j-1]\n            else:\n                if j - i > 1 and dp[i+1][j-1]:\n                    dp[i][j] = True\n    return sum(map(sum, dp))\n",
        "num_ids": 170
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    str_len = len(s)\n    res = 0\n",
        "num_ids": 17
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(map(int, s[i:j+1])) == len(s[i:j+1]):\n                ans += 1\n    return ans\ndef count_Substrings_opt(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    Optimized version.\n    '''\n    substr_map = defaultdict(int)\n    cur_sum = 0\n    ans = 0\n    for i in range(len(s)):\n        cur_sum += int(s[i])\n        if cur_sum == len(s[i:]):\n            ans += 1\n        for substr_len in range(1, len(s[i:])):\n            if cur_sum - substr_len in substr_map:\n                ans += substr_map[cur_sum - substr_len]\n        substr_map[cur_sum] += 1\n    return ans\ndef print_Substrings(s):\n    '''\n    Write a python function to print all the substrings with the sum of digits equal to their length.\n    '''\n    ans = []\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(map(int, s[i:j+1])) == len(s[i:j+1]):\n                ans.append(s[i:j+1])\n    return ans\ndef print_Substrings_opt(s):\n    '''\n    Write a python function to print all the substrings with the sum of digits equal to their length.\n    Optimized version.\n    '''\n    substr_map = defaultdict(int)\n    cur_sum = 0\n    ans = []\n    for i in range(len(s)):\n        cur_sum += int(s[i])\n        if cur_sum == len(s[i:]):\n            ans.append(s[i:])\n        for substr_len in range(1, len(s[i:])):\n            if cur_sum - substr_len in substr_map:\n                ans.append(s[i:i+substr_len])\n        substr_map[cur_sum] += 1\n    return ans\ndef is_Power_of_Two(num):\n    '''\n    Write a python function to check whether an input number is a power of two.\n    '''\n    if num == 0:\n        return False\n    return num & num-1 == 0\ndef is_Power_of_Two_opt(num):\n    '''\n    Write a python function to check whether an input number is a power of two.\n    Optimized version.\n    '''\n    return num!= 0 and num & (num - 1) == 0\ndef count_Substrings_using_power_two(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    This function uses the number 1 to check whether a number is a power of two.\n    '''\n    ans = 0\n    for i in range(len(s)):\n        cur_power_of_two = 1\n        for j in range(i, len(s)):\n            if cur_power_of_two == 0:\n                break\n            if sum(map(int, s[i:j+1])) == len(s[i:j+1]):\n                ans += 1\n            cur_power_of_two = cur_power_of_two << 1\n    return ans\ndef count_Substrings_using_power_two_opt(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    This function uses the number 1 to check whether a number is a power of two.\n    Optimized version.\n    '''\n    ans = 0\n    cur_power_of_two = 1\n    for i in range(len(s)):\n        if cur_power_of_two == 0:\n            break\n        if sum(map(int, s[i:])) == len(s[i:]):\n            ans += 1\n        cur_power_of_two = cur_power_of_two << 1\n    return ans\ndef count_Substrings_using_power_two_approx(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    This function uses the number 1 to check whether a number is a power of two.\n    Approximation: This function counts each substrings twice: Once with +1 and once with -1.\n    '''\n    ans = 0\n    cur_power_of_two = 1\n    for i in range(len(s)):\n        if cur_power_of_two == 0:\n            break\n        if sum(map(int, s[i:])) == len(s[i:]):\n            ans += 1\n        if (cur_power_of_two + 1) & (cur_power_of_two + 1) == cur_power_of_two:\n            ans += 1\n        cur_power_of_two = cur_power_of_two << 1\n    return ans\ndef is_Subsequence(s, t):\n    '''\n    Write a python function to check whether the string t is a subsequence of s.\n    '''\n    i = 0\n    for j in range(len(s)):\n        if i == len(t):\n            return True\n        if s[j] == t[i]:\n            i += 1\n    return i == len(t)\ndef is_Subsequence_opt(s, t):\n    '''\n    Write a python function to check whether the string t is a subsequence of s.\n    Optimized version.\n    '''\n    i = j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n        j += 1\n    return i == len(s)\ndef get_Max_Diff(arr):\n    '''\n    Write a python function to get the maximum difference of the elements in a list.\n    '''\n    ans = None\n    min_val = min(arr)\n    max_val = max(arr)\n    if max_val - min_val == 0:\n        return 0\n    for i in range(len(arr)):\n        ans = max(ans, max_val - arr[i])\n    return ans\ndef get_Max_Diff_opt(arr):\n    '''\n    Write a python function to get the maximum difference of the elements in a list.\n    Optimized version.\n    '''\n    ans = 0\n    min_val = min(arr)\n    max_val = max(arr)\n    if max_val - min_val == 0:\n        return 0\n    for i in range(len(arr)):\n        ans = max(ans, max_val - arr[i])\n    return ans\ndef count_Substrings_using_prefix_sums(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    This function uses the prefix sums to check whether a number is a power of two.\n    '''\n    ans = 0\n    prefix_sums = []\n    for i in range(len(s)):\n        cur_sum = 0\n        for j in range(i, len(s)):\n            cur_sum += int(s[j])\n            prefix_sums.append(cur_sum)\n    prefix_sums.sort()\n    for i in range(len(prefix_sums) - 1):\n        if prefix_sums[i+1] - prefix_sums[i] == 1:\n            ans += 1\n    return ans\ndef count_Substrings_using_prefix_sums_opt(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    This function uses the prefix sums to check whether a number is a power of two.\n    Optimized version.\n    '''\n    ans = 0\n    prefix_sums = []\n    for i in range(len(s)):\n        cur_sum = 0\n        for j in range(i, len(s)):\n            cur_sum +",
        "num_ids": 53
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            substring = s[i:j+1]\n            substrings.append(substring)\n    return substrings\n",
        "num_ids": 62
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            temp = 0\n            for k in range(i, j+1):\n                temp += int(s[k])\n            if temp == j-i+1:\n                res += 1\n    return res\n",
        "num_ids": 81
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # left,right=0,len(s)-1\n    # sum=0\n    # while left<=right:\n    #     if s[left]==s[right]:\n    #         sum=sum+1\n    #         left=left+1\n    #         right=right-1\n    #     else:\n    #         left=left+1\n    #         right=right-1\n    # return sum\n    total=0\n    sum=0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            sum=0\n            for k in range(i,j+1):\n                sum=sum+int(s[k])\n            if sum==j-i+1:\n                total=total+1\n    return total\n",
        "num_ids": 189
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Compute min using sort\n    xs.sort()\n    return xs[0]\n",
        "num_ids": 24
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < min:\n            min = xs[i]\n    return min\n",
        "num_ids": 47
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #pass\n    s=sorted(xs)\n    return s[0]\n",
        "num_ids": 22
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    return min(xs)\n",
        "num_ids": 21
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # TODO:\n    # num1 = xs[0]\n    # for i in range(1, len(xs)):\n    #     if num1 > xs[i]:\n    #         num1 = xs[i]\n    # return num1\n    return min(xs)\n",
        "num_ids": 72
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs is None:\n        return None\n    \n    #Find the smallest value in the list\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for num in xs:\n            if num < smallest:\n                smallest = num\n        return smallest\n        \n",
        "num_ids": 81
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = 0\n    for x in xs:\n        if x < smallest_num:\n            smallest_num = x\n    return smallest_num\n",
        "num_ids": 41
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    l = []\n    for x in test_list:\n        for y in test_list:\n            if (y - x) not in l:\n                l.append(y - x)\n    return max(l)\n",
        "num_ids": 54
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n",
        "num_ids": 91
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    list_length = len(test_list)\n    if list_length < 2:\n        return 0\n    \n    temp_list = []\n    for i in range(list_length-1):\n        for j in range(i+1, list_length):\n            temp_list.append((test_list[i], test_list[j]))\n    \n    temp_list.sort(key=lambda x: abs(x[0]-x[1]))\n    return abs(temp_list[-1][0] - temp_list[-1][1])\n",
        "num_ids": 135
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    current_max = test_list[1] - test_list[0]\n    for index in range(len(test_list)):\n        current_max = max(current_max, test_list[index + 1] - test_list[index])\n    return current_max\n",
        "num_ids": 68
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        if len(i) > 1:\n            new_list.append(i)\n    if len(new_list) >= 2:\n        min_diff = abs(new_list[0][0] - new_list[0][1])\n        for i in range(0, len(new_list) - 1):\n            if abs(new_list[i][0] - new_list[i + 1][1]) < min_diff:\n                min_diff = abs(new_list[i][0] - new_list[i + 1][1])\n        return min_diff\n    else:\n        return \"Error\"\n",
        "num_ids": 165
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = None\n",
        "num_ids": 9
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] - test_list[j] > max_diff:\n                max_diff = test_list[i] - test_list[j]\n    return max_diff\n",
        "num_ids": 87
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 1:\n        return None\n",
        "num_ids": 18
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n",
        "num_ids": 91
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print('\\n'.join(sorted(subjectmarks, key=lambda x: x[1], reverse=True)))\n    return\n",
        "num_ids": 33
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1], reverse=True)\n    \ndef extract_marks(subject):\n    '''\n    Write a function to extract marks from a dictionary.\n    '''\n    return dict(subject)['marks']\n    \ndef extract_subjects(subjectmarks):\n    '''\n    Write a function to extract the subjects from a list of tuples.\n    '''\n    return list(map(lambda x: x[0], subjectmarks))\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print sorted(subjectmarks, key=lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    newlist=list()\n    for i in range(len(subjectmarks)):\n        minpos=i\n        for j in range(i,len(subjectmarks)):\n            if subjectmarks[j][1]<subjectmarks[minpos][1]:\n                minpos=j\n        temp=subjectmarks[i]\n        subjectmarks[i]=subjectmarks[minpos]\n        subjectmarks[minpos]=temp\n    return subjectmarks\nif __name__ == '__main__':\n    print(subject_marks([('phy', 70), ('che', 82), ('math', 75), ('bio', 65)])",
        "num_ids": 144
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key = lambda x: x[1])\n    return sorted_list\n",
        "num_ids": 29
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #return sorted(subjectmarks, key=lambda x: x[1])\n    return sorted(subjectmarks, key=operator.itemgetter(-1))\n",
        "num_ids": 38
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1], reverse=True)\n    return subjectmarks\n",
        "num_ids": 27
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    new_list = []\n    total = 0\n    if isinstance(data_list, list):\n        for sublist in data_list:\n            if isinstance(sublist, list):\n                new_list.extend(sublist)\n            else:\n                total += sublist\n    else:\n        return data_list\n",
        "num_ids": 79
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        if data_list == []:\n            return 0\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return data_list\n",
        "num_ids": 64
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            sum += recursive_list_sum(item)\n        else:\n            sum += item\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_total = 0\n    if data_list == []:\n        return 0\n    else:\n        for x in range(len(data_list)):\n            if type(data_list[x]) == list:\n                sum_total += recursive_list_sum(data_list[x])\n            else:\n                sum_total += data_list[x]\n        return sum_total\n",
        "num_ids": 94
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 50
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data_sum = 0\n    for item in data_list:\n        if type(item) == type([]):\n            data_sum += recursive_list_sum(item)\n        else:\n            data_sum += item\n    return data_sum\n",
        "num_ids": 61
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n",
        "num_ids": 48
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_data = 0\n    for item in data_list:\n        if type(item) is list:\n            sum_data = sum_data + recursive_list_sum(item)\n        else:\n            sum_data = sum_data + item\n    return sum_data\n",
        "num_ids": 67
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for data in data_list:\n        if isinstance(data, list):\n            result += recursive_list_sum(data)\n        else:\n            result += data\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for elem in data_list:\n        if type(elem) == list:\n            result = result + recursive_list_sum(elem)\n        else:\n            result = result + elem\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])\n",
        "num_ids": 17
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if(i > 0):\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print(\"Positive number count in the list:\", count)\n    \n",
        "num_ids": 43
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for x in list:\n        if x>0:\n            count+=1\n    return count\n    \n    \n",
        "num_ids": 34
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])\n",
        "num_ids": 17
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if(list[i] >= 0):\n            count+=1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1]\n    for i in range(1, n+1):\n        bells.append(0)\n        for j in range(i+1):\n            bells[i] += bell(j) * bell(i-j)\n    return bells[n]\n",
        "num_ids": 69
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    bell = {0:1, 1:1, 2:2, 3:5, 4:14, 5:42, 6:132, 7:429, 8:1430, 9:4368, 10:14600}\n    \n    if n in bell:\n        return bell[n]\n    else:\n        if n%2==0:\n            return bell_number(n//2)*bell_number(n//2+1)\n        else:\n            return bell_number(n//2)*bell_number(n//2+1)*3\n    \ndef non_trivial_partitions(n):\n    '''\n    Write a function to find the number of ways to partition a set of numbers.\n    '''\n    \n    def partition(n, k):\n        '''\n        Write a function to find the number of ways to partition a set of numbers.\n        '''\n        nonlocal n, k, memo\n        if k == 1:\n            return n\n        if n == 0:\n            return 0\n        if k == n:\n            return 1\n        if (n, k) in memo:\n            return memo[(n, k)]\n        result = partition(n-k, k)\n        result += partition(n, k-1)\n        memo[(n, k)] = result\n        return result\n    \n    if n<=0:\n        return 0\n    memo = {}\n    return partition(n, n)\n",
        "num_ids": 134
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Compute the Bell number (n,k)\n    bell = bell_number_helper(n)\n    # If the number of partition is even, the number of ways to partition is divisible by 2.\n    if n % 2 == 0:\n        return bell // 2\n    else:\n        # Else, the number of ways to partition is odd, so we can add 1 to the number of ways.\n        return bell // 2 + 1\n",
        "num_ids": 103
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    total = 0\n    for i in range(1, n):\n        total += bell_number(i) * bell_number(n-i)\n    return total\n",
        "num_ids": 56
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [0]*(n+1)\n    bells[0] = 1\n    for i in range(1,n+1):\n        bells[i] = bell(i)\n    print(bells)\n    print(sum([bells[i] for i in range(n+1)]))\n",
        "num_ids": 78
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2) * n\n",
        "num_ids": 39
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = []\n    for n in range(1, n + 1):\n        bell_numbers.append(bell(n))\n",
        "num_ids": 36
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3) + bell_number(n-4)\n",
        "num_ids": 67
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = bell_list(n)\n    return bell[0]\n",
        "num_ids": 19
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = []\n    for i in range(0, n):\n        bell_numbers.append(bell(i+1))\n    return bell_numbers\n",
        "num_ids": 43
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if(A[i]<=A[i+1]):\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    if(len(A) <= 2): \n        return True\n    else:\n        if(A[1] > A[0] and A[1] > A[2]): \n            for i in range(2, len(A)): \n                if(A[i] < A[i-1]): \n                    return False\n            return True\n        elif(A[1] < A[0] and A[1] < A[2]): \n            for i in range(2, len(A)): \n                if(A[i] > A[i-1]): \n                    return False\n            return True\n        else: \n            return False\n        \n",
        "num_ids": 166
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\nA = [6, 5, 4, 4] \nprint(is_Monotonic(A)) \n  \nA = [1, 1, 1] \nprint(is_Monotonic(A)) \n  \nA = [1, 3, 2] \nprint(is_Monotonic(A)) \n  \nA = [2, 3, 4, 5] \nprint(is_Monotonic(A)) \n  \nA = [1, 1, 2, 3, 4, 5] \nprint(is_Monotonic(A)) \n  \nA = [1, 1, 1, 1] \nprint(is_Monotonic(A)) ",
        "num_ids": 218
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if(A[i] >= A[i+1]):\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in xrange(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in xrange(len(A) - 1))) \n    \ndef test_is_Monotonic():\n    assert is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([1, -5, 10, 1100, 1101, 1102, 9001]) == True\n    assert is_Monotonic([1, -5, 10, -1100, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([1, 5, 10, -1100, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([1, 5, 10, 1100, 1101, 1102, 9001]) == True\n    assert is_Monotonic([-1, 5, 10, 1100, 1101, 1102, 9001]) == True\n    assert is_Monotonic([-1, -5, 10, 1100, 1101, 1102, 9001]) == True\n    assert is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, 5, 10, -1100, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, 5, 10, 1100, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, 5, 10, 1100, 1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, 5, 10, 1100, 1101, 1102, -9001]) == True\n    assert is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, 5, -10, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, 5, -10, 1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, 5, -10, 1100, 1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, -5, -10, 1100, 1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, -5, -10, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([1, 5, 10, 1101, 1102, 9001]) == False\n    assert is_Monotonic([1, -5, 10, 1101, 1102, 9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, 1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, 1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, 1100, 1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, 1100, 1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, 1101, 1102, 9001]) == False\n    assert is_Monotonic([1, 5, 10, 1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, -10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10",
        "num_ids": 2011
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n",
        "num_ids": 60
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n        \ndef main():\n    A = [6, 5, 4, 4]\n    print(is_Monotonic(A))\n    \n    A = [6, 5, 5]\n    print(is_Monotonic(A))\n    \n    A = [1, 2, 4, 5]\n    print(is_Monotonic(A))\n    \n    A = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]\n    print(is_Monotonic(A))\n    \n    A = [-6, -5, -5, -4]\n    print(is_Monotonic(A))\n    \n    A = [1, 3, 2]\n    print(is_Monotonic(A))\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 252
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0, len(A)-1):\n        if A[i] < A[i+1]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<2:\n        return True\n    direction = A[1] - A[0]\n    for i in range(2,len(A)):\n        if direction==0:\n            direction = A[i]-A[i-1]\n            continue\n        if direction*(A[i]-A[i-1])<0:\n            return False\n    return True\n",
        "num_ids": 94
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n==1:\n        return True\n    return all(A[i] <= A[i+1] for i in range(n-1)) or all(A[i] >= A[i+1] for i in range(n-1))\n",
        "num_ids": 69
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    def is_sublist_aux(l, s, ind, l_ind):\n        '''\n        Takes as input a list, a sublist, and a starting index for the sublist.\n        Returns whether the sublist is actually a sublist of the list.\n        '''\n        if l_ind == len(s):\n            return True\n        elif ind == len(l):\n            return False\n        elif s[l_ind] == l[ind]:\n            return is_sublist_aux(l, s, ind + 1, l_ind + 1)\n        else:\n            return is_sublist_aux(l, s, ind, l_ind)\n",
        "num_ids": 94
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    return is_sublist(l[1:], s) if s[0] == l[0] else is_sublist(l[1:], s[1:])\n",
        "num_ids": 65
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l or any(sublist == s for i, sublist in enumerate(l))\n",
        "num_ids": 26
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    print(\"-----------------------\")\n    print(\"\\n\".join(map(str, l)))\n    print(\"-----------------------\")\n    print(s)\n    print(\"-----------------------\")\n    for i in range(len(l)):\n        if s == l[i]:\n            return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if len(l) < len(s):\n        return False\n    if len(l) == len(s) and l!= s:\n        return False\n    i = 0\n    j = 0\n    while i < len(l) and j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    if j == len(s):\n        return True\n    else:\n        return False\n",
        "num_ids": 140
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    l1 = []\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            l1 = l[i:j]\n            if l1 == s:\n                return True\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l_len = len(l)\n    s_len = len(s)\n",
        "num_ids": 22
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n                \n                if n == len(s):\n                    sub_set = True\n",
        "num_ids": 123
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    #using set\n    if (set(l) <= set(s)):\n        return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i = 0\n    for j in range(len(l)):\n        # print (l[j],s[i])\n        if l[j] == s[i]:\n            i += 1\n            if i == len(s):\n                return True\n    return False\n",
        "num_ids": 66
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    len_all = [len(i) for i in Input]\n    if len(set(len_all)) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Tuple = []\n    for i in Input:\n        Tuple.append(len(i))\n    if(Tuple.count(Tuple[0]) == len(Tuple)):\n        print(\"All the given tuples are of same length.\")\n    else:\n        print(\"All the given tuples are not of same length.\")\n    return\n",
        "num_ids": 83
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Your code goes here\n    if(len(Input)==1):\n        return True\n    else:\n        if(len(Input[0])!=len(Input[1])):\n            return False\n        else:\n            for i in range(1,len(Input)):\n                if(len(Input[i])!=len(Input[0])):\n                    return False\n    return True\n",
        "num_ids": 96
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #return True if all tuples are equal in length else False\n",
        "num_ids": 17
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) < 2:\n        return False\n    else:\n        for i in range(1,len(Input)):\n            if len(Input[i])!= len(Input[0]):\n                return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = []\n    n = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i]) == n:\n            Output.append(Input[i])\n        else:\n            pass\n    return Output\n",
        "num_ids": 62
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    return all(len(Input[0]) == len(Input[j]) for j in range(n))\n",
        "num_ids": 35
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    len_nums = len(nums)\n    gap = len_nums\n    swapped = True\n",
        "num_ids": 28
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    def sort(nums, begin, end):\n        if end <= begin:\n            return\n        pivot = begin\n        for i in range(begin + 1, end + 1):\n            if nums[i] <= nums[pivot]:\n                pivot += 1\n                swap(nums, i, pivot)\n        sort(nums, begin, pivot - 1)\n        sort(nums, pivot + 1, end)\n",
        "num_ids": 139
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    gap = size\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        gap = max(1, gap)\n        swapped = False\n        i = 0\n        while i+gap < size:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n            i += 1\n",
        "num_ids": 140
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(len(nums) - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                swapped = True\n                nums[i], nums[j] = nums[j], nums[i]\n",
        "num_ids": 113
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums_len = len(nums)\n    gap = nums_len\n    swapped = True\n",
        "num_ids": 28
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n",
        "num_ids": 11
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap!=1 or swapped == True:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        gap = int(gap)\n        swapped = False\n        for i in range(len(nums)-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n",
        "num_ids": 135
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # make a copy of the list so that you can see the original list\n    nums_cp = nums.copy()\n    # initialize a list for tracking the swap positions\n    swap_list = []\n    # initialize the number of comparisons and swap positions\n    comparisons = 0\n    swaps = 0\n",
        "num_ids": 74
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # If the list is so small that sorting it is not needed, just return it\n    if len(nums) <= 1:\n        return nums\n    \n    # Call comb sort on the list (with a gap of 1)\n    return comb_sort(nums, 1)\n",
        "num_ids": 67
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n",
        "num_ids": 37
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0,n+1):\n        for j in range(0,n+1):\n            if i*i + j*j == n:\n                return 1\n    return 0\nprint dif_Square(15)\n",
        "num_ids": 58
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            x = i*i\n            y = j*j\n            if x + y == n:\n                return \"Yes! {} =/= {} + {}\".format(x,y,x)\n            elif x - y == n:\n                return \"Yes! {} =/= {} - {}\".format(x,y,x)\n    return \"No!\"\n",
        "num_ids": 103
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt = int(n**0.5)\n    if (n**0.5 == sqrt): \n        return (sqrt * sqrt == n)\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0, n):\n        for j in range(0, n):\n            if i*i + j*j == n:\n                return True\n    return False\n    \nif __name__ == \"__main__\":\n    print(dif_Square(121))",
        "num_ids": 68
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 4 == 1:\n        return False\n    elif n % 4 == 3:\n        return True\n    else:\n        return n % 4\n",
        "num_ids": 39
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n ** 0.5) + 1):\n        if n == i ** 2 + (i + 1) ** 2:\n            return True\n    return False",
        "num_ids": 46
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s = int(n ** 0.5)\n    for x in range(s, 0, -1):\n        for y in range(s, 0, -1):\n            if (x**2 + y**2) == n:\n                print(x, y)\n                break\n            if (x**2 + y**2) > n:\n                break\ndif_Square(22)\n",
        "num_ids": 94
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if ((n & (n - 1)) == 0) and ((n & 0x55555555) == 0): \n        return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_nums = [i**2 for i in range(n) if i**2 <= n]\n    # print(square_nums)\n    for i in square_nums:\n        if n - i in square_nums:\n            return 1\n    return 0\n",
        "num_ids": 67
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sq=0\n    i=1\n    while(i*i<=n):\n        sq=i*i\n        i+=1\n    print(sq)\n    if (sq*2)==n:\n        return True\n    else:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # O(len(colors))\n    count = [0]*len(patterns)\n    for color in colors:\n        for i, pattern in enumerate(patterns):\n            if color in pattern:\n                count[i] += 1\n    return count == [1]*len(patterns)\n",
        "num_ids": 74
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_pattern_map = {}\n    for idx,color in enumerate(colors):\n        if color in color_pattern_map:\n            if color_pattern_map[color]!= patterns[idx]:\n                return False\n        else:\n            color_pattern_map[color] = patterns[idx]\n    return True\n",
        "num_ids": 82
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        if color not in patterns:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for col in colors:\n        # if it is the first color, it must be white\n        if colors.index(col) == 0:\n            if col!= 'W':\n                return False\n        # if it is not the first color, it must be the color that follows the pattern\n        elif colors.index(col) % 2 == patterns[colors.index(col)//2]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 108
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return False\n    \n    if len(patterns) == 0:\n        return True\n    \n    if len(colors) < len(patterns):\n        return False\n    \n    dic = {}\n    for color in colors:\n        if color not in dic:\n            dic[color] = 1\n        else:\n            dic[color] += 1\n            \n    for pattern in patterns:\n        if pattern not in dic:\n            return False\n        elif dic[pattern] == 0:\n            return False\n        else:\n            dic[pattern] -= 1\n            \n    return True\n",
        "num_ids": 157
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    patterns = [\n        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "num_ids": 2009
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == len(patterns):\n        for i in range(len(colors)):\n            if patterns[i] == colors[i]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] in patterns[i]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) < 1 or len(patterns) < 1:\n        return False\n    for i in range(0, len(patterns) - 1):\n        if patterns[i] == patterns[i + 1]:\n            return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #find the indices of the tuples with all elements divisible by k\n    indices = [i for i in range(len(test_list)) if all([i%k==0 for i in test_list[i]])]\n    tuples = [test_list[i] for i in indices]\n    return tuples\n    \ndef find_tuples2(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [i for i in test_list if all([i%k==0 for i in i])]\n    ",
        "num_ids": 28
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [t for t in test_list if all(i%K==0 for i in t)]\n",
        "num_ids": 26
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if (i[0] % K == 0) and (i[1] % K == 0):\n            result.append(i)\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if (all(i % K == 0 for i in t)):\n            result.append(t)\n",
        "num_ids": 41
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for num in test_list:\n        if num[0] % K == 0 and num[1] % K == 0:\n            new_list.append(num)\n    return new_list\n",
        "num_ids": 55
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for tup in test_list:\n        if sum(list(map(lambda x: x % K, tup))) == 0:\n            result_list.append(tup)\n    return result_list\n",
        "num_ids": 58
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tuple(i for i in tup if i%K==0) for tup in test_list]\n",
        "num_ids": 30
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    a = []\n    for i in range(len(test_list)):\n        if all(map(lambda x: x % K == 0, test_list[i])):\n            a.append(test_list[i])\n    return a\n",
        "num_ids": 60
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [t for t in test_list if all(x % K == 0 for x in t)]\n",
        "num_ids": 26
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in test_list:\n        # print(i)\n        if i[0] % K == 0 and i[1] % K == 0:\n            res.append(i)\n    return res\n    # return [i for i in test_list if i[0] % K == 0 and i[1] % K == 0]\n",
        "num_ids": 87
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    return False\n",
        "num_ids": 19
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        print(\"Number is divisible by 11.\")\n    else:\n        print(\"Number is not divisible by 11.\") \n",
        "num_ids": 40
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\nn=int(input('Enter a number:'))\nprint(is_Diff(n))\n",
        "num_ids": 31
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n % 11 == 0:\n            return True\n        else:\n            return False\n    except ValueError:\n        print(\"Invalid Input\")\n        \ndef is_Diff_2(n):\n    '''\n    Write a python function to check whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    else: \n        return False",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    return False\nprint(is_Diff(int(input(\"Enter a number \"))))\n",
        "num_ids": 35
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n    \nis_Diff(56)\nis_Diff(11)\n",
        "num_ids": 39
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11 == 0): \n        return True\n    else: \n        return False\nn = int(input(\"Enter a number: \"))\nif(is_Diff(n) == True): \n    print(\"Number is divisible by 11\") \nelse: \n    print(\"Number is not divisible by 11\") \n",
        "num_ids": 81
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if(len(s)%2==0):\n        return \"False\"\n    else:\n        return \"True\"\n",
        "num_ids": 31
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2 == 0:\n        return \"The length of the word is even\"\n    else:\n        return \"The length of the word is odd\"\n",
        "num_ids": 47
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n",
        "num_ids": 11
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n",
        "num_ids": 13
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return \"N must be greater than 0\"\n    elif n == 1:\n        return 1\n    else:\n        return n * (n-1) // 2 + 1\n",
        "num_ids": 50
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)*(n+3)//24 \ndef pentagonal_number(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return n*(3*n-1)//2 \ndef hexagonal_number(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1) \ndef heptagonal_number(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    return n*(5*n-3)//2 \ndef octagonal_number(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-2) \ndef is_perfect_number(n): \n    '''\n    Write a function to check whether a number is a perfect number or not.\n    '''\n    sum_divisors = 1 \n    for i in range(2, int(sqrt(n))+1): \n        if n % i == 0: \n            if n//i == i: \n                sum_divisors += i \n            else: \n                sum_divisors += i \n                sum_divisors += n//i \n    return sum_divisors == n \ndef is_palindromic_number(n): \n    '''\n    Write a function to check whether a number is a palindromic number or not.\n    '''\n    str_n = str(n) \n    return str_n == str_n[::-1] \ndef is_prime_number(n): \n    '''\n    Write a function to check whether a number is a prime number or not.\n    '''\n    for i in range(2, int(sqrt(n))+1): \n        if n % i == 0: \n            return False \n    return True \ndef is_super_prime_number(n): \n    '''\n    Write a function to check whether a number is a super prime number or not.\n    '''\n    if is_prime_number(n): \n        if n == 2: \n            return True \n        return False \n    for i in range(2, int(sqrt(n))+1): \n        if n % i == 0: \n            if is_prime_number(n//i): \n                return True \n    return False \ndef is_powerful_number(n): \n    '''\n    Write a function to check whether a number is a powerful number or not.\n    '''\n    for i in range(2, int(sqrt(n))+1): \n        if n % i == 0: \n            if is_prime_number(i) and is_prime_number(n//i): \n                return True \n    return False \ndef is_mersenne_prime_number(n): \n    '''\n    Write a function to check whether a number is a Mersenne prime number or not.\n    '''\n    return is_prime_number(2**n - 1) \ndef is_amicable_number(n): \n    '''\n    Write a function to check whether a number is an amicable number or not.\n    '''\n    sum_divisors = 0 \n    for i in range(2, int(sqrt(n))+1): \n        if n % i == 0: \n            if n//i == i: \n                sum_divisors += i \n            else: \n                sum_divisors += i \n                sum_divisors += n//i \n    return sum_divisors == n and is_perfect_number(sum_divisors) \ndef print_triangle_numbers(n): \n    '''\n    Write a function to print the first n triangle numbers.\n    '''\n    for i in range(n): \n        print(tetrahedral_number(i)) \ndef print_pentagonal_numbers(n): \n    '''\n    Write a function to print the first n pentagonal numbers.\n    '''\n    for i in range(n): \n        print(pentagonal_number(i)) \ndef print_hexagonal_numbers(n): \n    '''\n    Write a function to print the first n hexagonal numbers.\n    '''\n    for i in range(n): \n        print(hexagonal_number(i)) \ndef print_heptagonal_numbers(n): \n    '''\n    Write a function to print the first n heptagonal numbers.\n    '''\n    for i in range(n): \n        print(heptagonal_number(i)) \ndef print_octagonal_numbers(n): \n    '''\n    Write a function to print the first n octagonal numbers.\n    '''\n    for i in range(n): \n        print(octagonal_number(i)) \ndef print_perfect_numbers(n): \n    '''\n    Write a function to print the first n perfect numbers.\n    '''\n    for i in range(n): \n        print(i) \n        if is_perfect_number(i): \n            print(i) \ndef print_super_prime_numbers(n): \n    '''\n    Write a function to print the first n super prime numbers.\n    '''\n    for i in range(n): \n        print(i) \n        if is_super_prime_number(i): \n            print(i) \ndef print_prime_numbers(n): \n    '''\n    Write a function to print the first n prime numbers.\n    '''\n    for i in range(n): \n        print(i) \n        if is_prime_number(i): \n            print(i) \ndef print_mersenne_prime_numbers(n): \n    '''\n    Write a function to print the first n Mersenne prime numbers.\n    '''\n    for i in range(n): \n        print(2**i - 1) \n        if is_mersenne_prime_number(i): \n            print(2**i - 1) \ndef print_amicable_numbers(n): \n    '''\n    Write a function to print the first n amicable numbers.\n    '''\n    for i in range(n): \n        print(i) \n        if is_amicable_number(i): \n            print(i) \ndef print_powerful_numbers(n): \n    '''\n    Write a function to print the first n powerful numbers.\n    '''\n    for i in range(n): \n        print(i) \n        if is_powerful_number(i): \n            print(i) \ndef print_triangle_divisors(n): \n    '''\n    Write a function to print the divisors of the first n triangle numbers.\n    '''\n    for i in range(n): \n        print(tetrahedral_number(i), end='\\t') \n        for j in range(1, int(sqrt(tetrahedral_number(i)))+1): \n            if tetrahedral_number(i) % j == 0: \n                print(j, end=' ') \n        print() \ndef print_pentagonal_divisors(n): \n    '''\n    Write a function to print the divisors of the first n pentagonal numbers.\n    '''\n    for i in range(n): \n        print(pentagonal_number(i), end='\\t') \n        for j in range(1, int(sqrt(pentagonal_number(i)))+1): \n            if pentagonal_number(i) % j == 0: \n                print(j, end=' ') \n        print() \ndef print_hexagonal_divisors(n): \n    '''\n    Write a function to print the divisors of the first n hexagonal numbers.\n    '''\n    for i in range(n): \n        print(hexagonal_number(i), end='\\t') \n        for j in range(1, int(sqrt(hexagonal_number(i)))+1): \n            if hexagonal_number(i) % j == 0: \n                print(j, en",
        "num_ids": 76
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += (-1) ** (i + 1) * (i ** 3) / (3 ** i)\n    return int(result)\n",
        "num_ids": 52
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(3*n - 1)/2\n",
        "num_ids": 15
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n*(n+1)*(n+2))/6)\n",
        "num_ids": 22
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n",
        "num_ids": 20
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==1:\n        return n\n    if n==2:\n        return 3\n    if n==3:\n        return 6\n    return n*(n+1)//2 + 1\n",
        "num_ids": 49
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n",
        "num_ids": 20
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # import numpy as np\n    # import matplotlib.pyplot as plt\n",
        "num_ids": 23
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n",
        "num_ids": 17
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n",
        "num_ids": 16
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r=float(input(\"Enter the radius of the sphere : \"))\n    \n    V=4/3*math.pi*r**3\n    \n    print(\"The volume of the sphere is : %.2f\" %V)\n    return None\n",
        "num_ids": 61
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n",
        "num_ids": 20
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n",
        "num_ids": 19
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*(r**3)\n    return volume",
        "num_ids": 22
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = int(r)\n    vol = (4/3)*math.pi*(r**3)\n    return vol\n",
        "num_ids": 32
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*(math.pi)*(r**3)\n    return v\n",
        "num_ids": 25
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * math.pi * (r**3)\n    \n",
        "num_ids": 26
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi) * (r**2) * h\ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return l * w * h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * (r**2) * h\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (l**3)\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (1/2) * b * h\ndef area_rectangle(b,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return b * h\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return (math.pi) * (r**2)\ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return b * h\ndef area_trapezium(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    return ((b1+b2)/2) * h\ndef area_ellipse(a,b):\n    '''\n    Write a function to find the area of an ellipse.\n    '''\n    return (math.pi) * (a * b)\ndef area_rhombus(b,h):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return (1/2) * b * h\ndef area_kite(b,h):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    return (1/2) * b * h\ndef area_hexagon(b):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return (3**(1/2)) * b**2\ndef area_octagon(b):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    return 2 * (1+(5**(1/2)) * b)\ndef area_isosceles_triangle(b,h):\n    '''\n    Write a function to find the area of an isosceles triangle.\n    '''\n    return (1/2) * b * h\ndef area_equilateral_triangle(b):\n    '''\n    Write a function to find the area of an equilateral triangle.\n    '''\n    return (1/4) * b**2\ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (1/2) * b * h\ndef area_trapezium(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    return ((b1+b2)/2) * h\ndef area_ellipse(a,b):\n    '''\n    Write a function to find the area of an ellipse.\n    '''\n    return (math.pi) * (a * b)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return (math.pi) * (r**2)\ndef area_sector(r,h):\n    '''\n    Write a function to find the area of a sector.\n    '''\n    return (1/2) * r * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function t",
        "num_ids": 7
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)\n    return sum%26\n    \n    ",
        "num_ids": 32
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    for i in strr:\n        print(i,end=\"\")\n    c=0\n    for i in strr:\n        c+=ord(i)\n    # print(c%26)\n    return c%26\n    \n    # def get_Char(strr):\n    #     import string\n    #     lst=[]\n    #     for i in strr:\n    #         lst.append(ord(i))\n    #     a=sum(lst)\n    #     return a%26\n    \nprint(get_Char('sdw'))\n    \n",
        "num_ids": 143
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)\n    return sum%26\n",
        "num_ids": 29
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    temp = 0\n    for i in strr:\n        temp += ord(i)\n    print(chr(temp%26))\n",
        "num_ids": 34
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 1:\n        return ord(strr[0])\n    else:\n        return ord(strr[0])+get_Char(strr[1:])%26\n",
        "num_ids": 50
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    sum1 = 0\n    for i in strr:\n        sum1 = sum1 + ord(i)\n    return sum1 % 26\n",
        "num_ids": 39
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    i = 0\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr(sum % 26)\n",
        "num_ids": 38
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def check_if_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2,num):\n            if num%i == 0:\n                return False\n        return True\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return check_if_prime(sum)\n    #sum = 0\n    #for i in strr:\n    #    sum += ord(i)\n    #if sum <= 26:\n    #    return False\n    #return check_if_prime(sum)\n    ",
        "num_ids": 136
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr(sum % 26)\n",
        "num_ids": 33
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return sum%26\n    \ndef main():\n    strr = input(\"Enter a string: \")\n    print(\"The char of the given string is: \", get_Char(strr))\n",
        "num_ids": 68
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return sequence(n-1) + sequence(n-2)\n        ",
        "num_ids": 46
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 45
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # base case:\n    if n == 0:\n        return 0\n    # recursive case:\n    else:\n        return n + sequence(n - 1)\n",
        "num_ids": 40
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    numbers = {1: [1]}\n    for i in range(2, n):\n        temp_list = [1]\n        for j in range(len(numbers[i - 1]) - 1):\n            temp_list.append(numbers[i - 1][j] + numbers[i - 1][j + 1])\n        temp_list.append(1)\n        numbers[i] = temp_list\n    return numbers[n - 1]\n",
        "num_ids": 110
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #initialize sequence array\n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    if n < len(sequence):\n        return sequence[n]\n    else:\n        for i in range(len(sequence), n):\n            sequence.append(sequence[i-1] + sequence[i-2])\n        return sequence[n-1]\n",
        "num_ids": 95
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def func(x):\n        return x*x - x*x*x + x*x*x*x + x*x*x*x*x + x*x*x*x*x*x\n    return newton(n,func)\n",
        "num_ids": 61
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: return 0\n    if n == 1: return 2\n    if n == 2: return 3\n",
        "num_ids": 29
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def number_finder(n, curr_index):\n        '''\n        Given a current index and an input number, return the next index in the sequence.\n        '''\n        if curr_index == 0:\n            return 1\n        if curr_index == 1:\n            return 2\n        return number_finder(n, curr_index-1) + number_finder(n, curr_index-2)\n",
        "num_ids": 60
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #Create a list\n    newman_conway_sequence = []\n",
        "num_ids": 19
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea=4*math.pi*r**2\n    print(\"The Surface area of a sphere is {}\".format(surfacearea))\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=4*math.pi*r**3/3\n    print(\"The volume of a sphere is {}\".format(volume))\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea=2*math.pi*r*h\n    print(\"The Surface area of a cylinder is {}\".format(surfacearea))\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume=math.pi*r**2*h\n    print(\"The volume of a cylinder is {}\".format(volume))\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surfacearea=math.pi*r*h\n    print(\"The Surface area of a cone is {}\".format(surfacearea))\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=1/3*math.pi*r**2*h\n    print(\"The volume of a cone is {}\".format(volume))\ndef surfacearea_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfacearea=6*s**2\n    print(\"The Surface area of a cube is {}\".format(surfacearea))\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume=s**3\n    print(\"The volume of a cube is {}\".format(volume))\ndef surfacearea_rectangle(l,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    surfacearea=l*b\n    print(\"The Surface area of a rectangle is {}\".format(surfacearea))\ndef volume_rectangle(l,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    volume=l*b\n    print(\"The volume of a rectangle is {}\".format(volume))\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    s=(a+b+c)/2\n    surfacearea=math.sqrt(s*(s-a)*(s-b)*(s-c))\n    print(\"The Surface area of a triangle is {}\".format(surfacearea))\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    s=(a+b+c)/2\n    volume=math.sqrt(s*(s-a)*(s-b)*(s-c))/3\n    print(\"The volume of a triangle is {}\".format(volume))\ndef surfacearea_parallelogram(l,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    surfacearea=l*b\n    print(\"The Surface area of a parallelogram is {}\".format(surfacearea))\ndef volume_parallelogram(l,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    volume=l*b\n    print(\"The volume of a parallelogram is {}\".format(volume))\ndef surfacearea_square(s):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    surfacearea=s**2\n    print(\"The Surface area of a square is {}\".format(surfacearea))\ndef volume_square(s):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    volume=s**2\n    print(\"The volume of a square is {}\".format(volume))\ndef surfacearea_rectangle_triangle_trapezoid(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangle, triangle, or trapezoid.\n    '''\n    print(\"The Surface area of a rectangle, triangle, or trapezoid is {}\".format(a+b+c))\ndef volume_rectangle_triangle_trapezoid(a,b,c):\n    '''\n    Write a function to find the volume of a rectangle, triangle, or trapezoid.\n    '''\n    print(\"The volume of a rectangle, triangle, or trapezoid is {}\".format((a*b*c)/2))\ndef surfacearea_parallelogram_square_trapezoid(l,b,h):\n    '''\n    Write a function to find the surface area of a parallelogram, square, or trapezoid.\n    '''\n    print(\"The Surface area of a parallelogram, square, or trapezoid is {}\".format(l*b+b*h))\ndef volume_parallelogram_square_trapezoid(l,b,h):\n    '''\n    Write a function to find the volume of a parallelogram, square, or trapezoid.\n    '''\n    print(\"The volume of a parallelogram, square, or trapezoid is {}\".format((l*b*h)/3))\ndef surfacearea_circle_square_trapezoid(r):\n    '''\n    Write a function to find the surface area of a circle, square, or trapezoid.\n    '''\n    print(\"The Surface area of a circle, square, or trapezoid is {}\".format(2*math.pi*r))\ndef volume_circle_square_trapezoid(r):\n    '''\n    Write a function to find the volume of a circle, square, or trapezoid.\n    '''\n    print(\"The volume of a circle, square, or trapezoid is {}\".format(math.pi*r**2))\ndef surfacearea_sphere_triangle_trapezoid(r):\n    '''\n    Write a function to find the surface area of a sphere, triangle, or trapezoid.\n    '''\n    print(\"The Surface area of a sphere, triangle, or trapezoid is {}\".format(4*math.pi*r**2))\ndef volume_sphere_triangle_trapezoid(r):\n    '''\n    Write a function to find the volume of a sphere, triangle, or trapezoid.\n    '''\n    print(\"The volume of a sphere, triangle, or trapezoid is {}\".format((4*math.pi*r**3)/3))\ndef surfacearea_cylinder_square_trapezoid(r,h):\n    '''\n    Write a function to find the surface area of a cylinder, square, or trapezoid.\n    '''\n    print(\"The Surface area of a cylinder, square, or trapezoid is {}\".format(2*math.pi*r*h))\ndef volume_cylinder_square_trapezoid(r,h):\n    '''\n    Write a function to find the volume of a cylinder, square, or trapezoid.\n    '''\n    print(\"The volume of a cylinder, square, or trapezoid is {}\".format(math.pi*r**2*h))\ndef surfacearea_cone_square_trapezoid(r,h):\n    '''\n    Write a function to find the surface area of a cone, square, or trapezoid.\n    '''\n    print(\"The Surface area of a cone, square, or trapezoid is {}\".format(math.pi*r*h))\ndef volume_cone_square_trapezoid(r,h):\n    '''\n    Write a function to find the volume of a cone, square, or trapezoid.\n    '''\n    print(\"The volume of a cone, square, or trapezoid is {}\".format((1/3)*math.pi*r**2*h))\ndef surfacearea_cube_rectangle_trapezoid(s):\n    '''\n    Write a function to find the surface area of a cube, rectangle, or trapezoid.\n    '''\n    print(\"The Surface area of a cube, rectangle, or trapezoid is {}\".format(6*s**2))\ndef volume_cube_rectangle_trapezoid(s):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return sa\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa=2*math.pi*r*h+2*math.pi*r**2\n    return sa\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    sa=math.pi*r**2+math.pi*r*h\n    return sa\ndef surfacearea_prism(l,w,h):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    sa=2*l*w+2*l*h+2*w*h\n    return sa\ndef surfacearea_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    sa=6*s**2\n    return sa\ndef surfacearea_tetrahedron(s):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    sa=4*math.sqrt(3)*s**2\n    return sa\ndef surfacearea_hexagon(s):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    sa=6*math.sqrt(3)*s**2/2\n    return sa\ndef surfacearea_rectangle(s,l):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    sa=2*s*l\n    return sa\ndef surfacearea_triangle(s,b):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    sa=s*b/2\n    return sa\ndef surfacearea_rhombus(s,b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    sa=s*b\n    return sa\ndef surfacearea_squarepyramid(s,b):\n    '''\n    Write a function to find the surface area of a square pyramid.\n    '''\n    sa=2*(s*b+s**2)**(1/2)\n    return sa\ndef surfacearea_parallelogram(s,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    sa=s*b\n    return sa\ndef surfacearea_triangularprism(s,b,h):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    sa=(s*b**2+s*h**2)**(1/2)\n    return sa\ndef surfacearea_rectangularprism(s,b,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    sa=2*(s*b+s*h)\n    return sa\ndef surfacearea_spheretriangularprism(r,h):\n    '''\n    Write a function to find the surface area of a sphere triangular prism.\n    '''\n    sa=2*(math.pi*r**2*h)\n    return sa\ndef surfacearea_cubictriangularprism(s,b,h):\n    '''\n    Write a function to find the surface area of a cube triangular prism.\n    '''\n    sa=3*(s*b**2+s*h**2)\n    return sa\ndef surfacearea_cubehexagonalprism(s,h):\n    '''\n    Write a function to find the surface area of a cube hexagonal prism.\n    '''\n    sa=6*s*h\n    return sa\ndef surfacearea_pyramidalhexagonalprism(s,h):\n    '''\n    Write a function to find the surface area of a pyramidal hexagonal prism.\n    '''\n    sa=2*s*(math.sqrt(2)*h+h/math.sqrt(6))\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=4/3*math.pi*r**3\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=math.pi*r**2*h\n    return v\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=1/3*math.pi*r**2*h\n    return v\ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    v=l*w*h\n    return v\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v=s**3\n    return v\ndef volume_tetrahedron(s):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    v=1/4*math.sqrt(3)*s**3\n    return v\ndef volume_hexagon(s):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    v=1/2*math.sqrt(3)*s**2\n    return v\ndef volume_rectangle(s,l):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    v=s*l\n    return v\ndef volume_triangle(s,b):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    v=s/2*b\n    return v\ndef volume_rhombus(s,b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    v=s*b/2\n    return v\ndef volume_squarepyramid(s,b):\n    '''\n    Write a function to find the volume of a square pyramid.\n    '''\n    v=s*b**2/3\n    return v\ndef volume_parallelogram(s,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    v=s*b\n    return v\ndef volume_triangularprism(s,b,h):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    v=s*b*h/3\n    return v\ndef volume_rectangularprism(s,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    v=s*b*h\n    return v\ndef volume_spheretriangularprism(r,h):\n    '''\n    Write a function to find the volume of a sphere triangular prism.\n    '''\n    v=1/3*math.pi*r**2*h\n    return v\ndef volume_cubictriangularprism(s,b,h):\n    '''\n    Write a function to find the volume of a cube triangular prism.\n    '''\n    v=s*b**2*h/3\n    return v\ndef volume_cubehexagonalprism(s,h):\n    '''\n    Write a function to find the volume of a cube hexagonal prism.\n    '''\n    v=s*h**3/3\n    return v\ndef volume_pyramidalhexagonalprism(s,h):\n    '''\n    Write a function to find the volume of a pyramidal hexagonal prism.\n    '''\n    v=s*(math.sqrt(2)*h**2+h/math.sqrt(6))\n    return v\n",
        "num_ids": 33
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * (r**2)\n    return s\n",
        "num_ids": 21
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea_sphere = 4 * math.pi * r**2\n    return surfacearea_sphere\n",
        "num_ids": 27
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4*math.pi*r**2\n    return sa\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 3\ndef circumference_cylinder(r, h):\n    '''\n    Write a function to find the circumference of a cylinder.\n    '''\n    return 2 * math.pi * r + 2 * math.pi * r * h\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h + 2 * math.pi * r ** 2\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * r * (r + h)\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1 / 3 * math.pi * r ** 2 * h\ndef surfacearea_prism(a, b, c):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    return 2 * (a * b + a * c + b * c)\ndef volume_prism(a, b, c):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return a * b * c\ndef surfacearea_triangle(a, b, c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (a + b + c) / 2\ndef volume_triangle(a, b, c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (a * b * c) ** (1 / 2)\ndef surfacearea_rhombus(a, b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    return 4 * a * b\ndef volume_rhombus(a, b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return a * b / 2\ndef surfacearea_rectangle(a, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a * b\ndef volume_rectangle(a, b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return a * b\ndef surfacearea_square(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return 4 * a ** 2\ndef volume_square(a):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return a ** 2\ndef surfacearea_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * a ** 2\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a ** 3\ndef surfacearea_cube_mesh(d, h):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return d ** 2 * 6\ndef volume_cube_mesh(d, h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return d ** 3\ndef surfacearea_rectangular_prism(a, b, c):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2 * (a * b + a * c + b * c)\ndef volume_rectangular_prism(a, b, c):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return a * b * c\ndef surfacearea_circular_prism(a, b):\n    '''\n    Write a function to find the surface area of a circular prism.\n    '''\n    return 2 * math.pi * a * b\ndef volume_circular_prism(a, b):\n    '''\n    Write a function to find the volume of a circular prism.\n    '''\n    return math.pi * a ** 2 * b\ndef surfacearea_conical_frustum(r, h):\n    '''\n    Write a function to find the surface area of a conical frustum.\n    '''\n    return math.pi * r * (r + h)\ndef volume_conical_frustum(r, h):\n    '''\n    Write a function to find the volume of a conical frustum.\n    '''\n    return math.pi / 3 * r ** 2 * h\ndef surfacearea_cylinder_with_hole(r, h):\n    '''\n    Write a function to find the surface area of a cylinder with a hole.\n    '''\n    return 2 * (math.pi * r * (r + h) - math.pi * (r ** 2 + r * h) + math.pi * r * h)\ndef volume_cylinder_with_hole(r, h):\n    '''\n    Write a function to find the volume of a cylinder with a hole.\n    '''\n    return math.pi * r ** 2 * h\ndef surfacearea_cone_with_hole(r, h):\n    '''\n    Write a function to find the surface area of a cone with a hole.\n    '''\n    return math.pi * r * (r + h)\ndef volume_cone_with_hole(r, h):\n    '''\n    Write a function to find the volume of a cone with a hole.\n    '''\n    return math.pi / 3 * r ** 2 * h\ndef surfacearea_hemisphere(r):\n    '''\n    Write a function to find the surface area of a hemisphere.\n    '''\n    return 2 * math.pi * r ** 2\ndef volume_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    return 1 / 3 * math.pi * r ** 3\ndef surfacearea_sphere_with_hole(r):\n    '''\n    Write a function to find the surface area of a sphere with a hole.\n    '''\n    return 4 * math.pi * r * (r - r / 10)\ndef volume_sphere_with_hole(r):\n    '''\n    Write a function to find the volume of a sphere with a hole.\n    '''\n    return 4 / 3 * math.pi * r ** 3 * (r - r / 10)\ndef surfacearea_parallelopiped(a, b, c):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    return 2 * (a * b + a * c + b * c)\ndef volume_parallelopiped(a, b, c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    return a * b * c\ndef surfacearea_ellipsoid(a, b, c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    return 4 * math.pi * a * b * c\ndef volume_ellipsoid(a, b, c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return (4 / 3) * math.pi * a * b * c\ndef surfacearea_rhombus_with_hole(a, b):\n    '''\n    Write a function to find the surface area of a rhombus with a hole.\n    '''\n    return 4 * a * b\ndef volume_rhombus_with_hole(a, b):\n    '''\n    Write a function to find the volume of a rhombus with a hole.\n    '''\n    return (1 / 3) * a ** 2 * b\ndef surfacearea_rectangular_prism_with_hole(a, b, c):\n    '''\n    Write a function to find the surface area of a rectangular prism with a hol",
        "num_ids": 18
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    sa = 4*pi*(r**2)\n    return sa\n",
        "num_ids": 26
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula for surface area of a sphere = 4 * 3.14 * r**2\n    # 3.14 = pi \n    # radius = r\n    # r**2 = radius**2\n",
        "num_ids": 47
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4*math.pi*r*r\n    return surfacearea\n",
        "num_ids": 21
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def nth_centered_hexagonal_number(n):\n        return 1/2 * (n * ((2 * n) - 1))\n    return nth_centered_hexagonal_number(n)\n",
        "num_ids": 50
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # p = n / 2\n    # if n % 2 == 0:\n    #     return ((p + 1) * p) / 2\n    # else:\n    #     return (p + 1) * p / 2 + p\n    # n = n % 6\n    n = n % 5\n",
        "num_ids": 71
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 0:\n        return hexagonal_number(n//2)\n    else:\n        return hexagonal_number(n//2) + 2 * (hexagonal_number(n//2 + 1) - hexagonal_number(n//2 - 1))\n",
        "num_ids": 66
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # https://en.wikipedia.org/wiki/Hexagonal_number\n    # https://en.wikipedia.org/wiki/Centered_hexagonal_number\n    # https://www.math.ucla.edu/~mgshu/Math110F13Labs/lecture_10.pdf\n",
        "num_ids": 72
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (-1) ** (n + 1) * n ** 2\n",
        "num_ids": 18
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a, b = 1, 0\n    n = n - 1\n    while n > 0:\n        a, b = b, a + b\n        n = n - 1\n    return a\n",
        "num_ids": 47
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # make a list\n    hexagonal = []\n",
        "num_ids": 14
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n) - hexagonal_number(n - 1)\n",
        "num_ids": 22
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (centered_hexagonal_number(n-1) + 1)**2 - 1\n",
        "num_ids": 51
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def f(n, m):\n        if n == 0:\n            return 1\n        return m * f(n - 1, m + 1)\n    if n == 0:\n        return 1\n    return f(n, 1)\n",
        "num_ids": 57
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not dict1:\n        return dict2\n    elif not dict2:\n        return dict1\n    elif not dict3:\n        return dict2\n",
        "num_ids": 40
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1,**dict2,**dict3)\n",
        "num_ids": 18
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict2:\n        if key in dict1:\n            dict1[key] += dict2[key]\n        else:\n            dict1[key] = dict2[key]\n    for key in dict3:\n        if key in dict1:\n            dict1[key] += dict3[key]\n        else:\n            dict1[key] = dict3[key]\n    return dict1\n",
        "num_ids": 99
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2)\ndef remove_key_from_dictionary(dict, key):\n    '''\n    Write a function to remove a key from a dictionary.\n    '''\n    dict.pop(key)\ndef remove_key_from_dictionary_two(dict, key):\n    '''\n    Write a function to remove a key from a dictionary.\n    '''\n    del dict[key]\ndef get_value_from_dictionary(dict, key):\n    '''\n    Write a function to get a value from a dictionary using a key.\n    '''\n    return dict[key]\ndef get_value_from_dictionary_two(dict, key):\n    '''\n    Write a function to get a value from a dictionary using a key.\n    '''\n    return dict.get(key)\ndef dictionary_length(dict):\n    '''\n    Write a function to determine the length of a dictionary.\n    '''\n    return len(dict)\ndef dictionary_contains_key(dict, key):\n    '''\n    Write a function to determine whether a dictionary contains a specific key.\n    '''\n    return key in dict\ndef dictionary_contains_key_two(dict, key):\n    '''\n    Write a function to determine whether a dictionary contains a specific key.\n    '''\n    return dict.__contains__(key)\ndef get_dictionary_keys(dict):\n    '''\n    Write a function to return all keys from a dictionary.\n    '''\n    return list(dict.keys())\ndef get_dictionary_keys_two(dict):\n    '''\n    Write a function to return all keys from a dictionary.\n    '''\n    return dict.keys()\ndef get_dictionary_values(dict):\n    '''\n    Write a function to return all values from a dictionary.\n    '''\n    return list(dict.values())\ndef get_dictionary_values_two(dict):\n    '''\n    Write a function to return all values from a dictionary.\n    '''\n    return dict.values()\ndef get_dictionary_items(dict):\n    '''\n    Write a function to return all items from a dictionary.\n    '''\n    return dict.items()\ndef get_dictionary_items_two(dict):\n    '''\n    Write a function to return all items from a dictionary.\n    '''\n    return dict.items()\ndef dictionary_update_value(dict, key, value):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_two(dict, key, value):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_two(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_three(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_four(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_five(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_six(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_seven(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_eight(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_nine(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_ten(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_eleven(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twelve(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_thirteen(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_fourteen(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_fifteen(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_sixteen(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_seventeen(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_eighteen(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_nineteen(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty_one(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty_two(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty_three(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty_four(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty_five(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty_six(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty_seven(dict, ke",
        "num_ids": 27
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_new = dict1.copy()\n    for key,value in dict2.items():\n        if key in dict_new.keys():\n            dict_new[key] = dict_new[key] + value\n        else:\n            dict_new[key] = value\n",
        "num_ids": 67
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}))\ndef merge_dictionaries_four(dict1,dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_four({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, 'j': 10}))\ndef merge_dictionaries_five(dict1, dict2, dict3, dict4, dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4, dict5):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_five({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, 'j': 10}, {'k': 11, 'l': 12,'m': 13}))\ndef merge_dictionaries_six(dict1, dict2, dict3, dict4, dict5, dict6):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_six({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, 'j': 10}, {'k': 11, 'l': 12,'m': 13}, {'n': 14, 'o': 15, 'p': 16}))\ndef merge_dictionaries_seven(dict1, dict2, dict3, dict4, dict5, dict6, dict7):\n    '''\n    Write a function to merge seven dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_seven({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, 'j': 10}, {'k': 11, 'l': 12,'m': 13}, {'n': 14, 'o': 15, 'p': 16}, {'q': 17, 'r': 18,'s': 19}))\ndef merge_dictionaries_eight(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_eight({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, 'j': 10}, {'k': 11, 'l': 12,'m': 13}, {'n': 14, 'o': 15, 'p': 16}, {'q': 17, 'r': 18,'s': 19}, {'t': 20, 'u': 21, 'v': 22}))\ndef merge_dictionaries_nine(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9):\n    '''\n    Write a function to merge nine dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_nine({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, 'j': 10}, {'k': 11, 'l': 12,'m': 13}, {'n': 14, 'o': 15, 'p': 16}, {'q': 17, 'r': 18,'s': 19}, {'t': 20, 'u': 21, 'v': 22}, {'w': 23, 'x': 24, 'y': 25, 'z': 26}))\ndef merge_dictionaries_ten(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10):\n    '''\n    Write a function to merge ten dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_ten({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, 'j': 10}, {'k': 11, 'l': 12,'m': 13}, {'n': 14, 'o': 15, 'p': 16}, {'q': 17, 'r': 18,'s': 19}, {'t': 20, 'u': 21, 'v': 22}, {'w': 23, 'x': 24, 'y': 25, 'z': 26}, {'a': 27, 'b': 28, 'c': 29, 'd': 30}))\ndef merge_dictionaries_eleven(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11):\n    '''\n    Write a function to merge eleven dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_eleven({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, '",
        "num_ids": 145
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_new = dict1.copy()\n    dict_new.update(dict2)\n    dict_new.update(dict3)\n    return dict_new\n",
        "num_ids": 41
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_res = {**dict1, **dict2, **dict3}\n    return dict_res\n",
        "num_ids": 27
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_res = dict1.copy()\n    dict_res.update(dict2)\n    dict_res.update(dict3)\n    return dict_res\n",
        "num_ids": 41
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n",
        "num_ids": 41
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = dict()\n    for x in list1:\n        freq_dict[x] = list1.count(x)\n    return freq_dict\n",
        "num_ids": 43
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = dict()\n    for i in list1:\n        if i not in freq_dict:\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n    return freq_dict\n",
        "num_ids": 63
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # list1 = [12, 45, 54, 45, 12, 12, 45, 54, 45, 45, 12, 12, 45, 54, 45, 45, 45]\n    dict1 = collections.Counter(list1)\n    return dict1\n",
        "num_ids": 60
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_count = {}\n    for x in list1:\n        if x in freq_count:\n            freq_count[x] += 1\n        else:\n            freq_count[x] = 1\n    return freq_count\nprint(freq_count([1, 1, 1, 3, 3, 3, 5, 5, 6, 6]))\n",
        "num_ids": 90
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for e in list1:\n        if e in count.keys():\n            count[e] += 1\n        else:\n            count[e] = 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = collections.Counter(list1)\n    return dict1\n",
        "num_ids": 19
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_count = {}\n    for num in list1:\n        if num not in freq_count.keys():\n            freq_count[num] = 1\n        else:\n            freq_count[num] += 1\n    return freq_count\n",
        "num_ids": 64
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n",
        "num_ids": 51
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #frequency = collections.Counter(list1)\n    #return frequency\n",
        "num_ids": 19
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "num_ids": 61
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        print(\"Invalid Number!\")\n        return\n    \n    print(closest_smaller_num(N))\n",
        "num_ids": 37
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # index of smallest element in array\n    # if n is smallest, return -1\n    # else return the index of the smallest element\n    def find_closest(arr, n):\n        smallest = float('inf')\n        index = 0\n        for i, num in enumerate(arr):\n            if num < smallest:\n                smallest = num\n                index = i\n        if n == smallest:\n            return -1\n        else:\n            return index\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    n = 9\n    index = find_closest(arr, n)\n    print(index)\n    print(arr[index])\n",
        "num_ids": 174
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    import math\n    def find_closest(n):\n        if n % 2 == 0:\n            return n - 1\n        else:\n            return n + 1\n    num = 0\n    print(find_closest(N))\n",
        "num_ids": 59
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 10:\n        return N\n",
        "num_ids": 13
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # close = lambda x, y: (x-y, y) if x-y < 0 else (y-x, x)\n    close = lambda x, y: y if x-y < 0 else x\n    for y in range(N-1, -1, -1):\n        if N-y == close(N, y+1)[0]:\n            return y\n    return -1\n",
        "num_ids": 94
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = len(str(N))\n    output = 10**(l-1)\n    for i in range(l-2, -1, -1):\n        if (N//(10**i))%10 >= N%10:\n            output = N//(10**i) + 10**i\n            break\n        elif (N//(10**i))%10 < N%10:\n            output = N//(10**i)\n            break\n    return output\n",
        "num_ids": 113
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # we want to do a binary search to find the closest number\n    # we can define the lower bound as 0 and upper bound as N\n    # if N > 0, then we take a closer bound, and vice versa\n    lower_bound = 0\n    upper_bound = N\n",
        "num_ids": 65
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 6:\n        return N + 1\n    else:\n        N = str(N)\n        N = list(N)\n        for i in range(len(N)-1,0,-1):\n            if int(N[i]) < int(N[i-1]):\n                N[i] = str(int(N[i]) + 1)\n                for j in range(i+1, len(N)):\n                    N[j] = '0'\n                N = ''.join(N)\n                return int(N)\n        return int(''.join(N))\n",
        "num_ids": 142
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n    smallest = N\n    for i in range(0,N):\n        if N - i < N - smallest:\n            smallest = N - i\n    return smallest\n",
        "num_ids": 54
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def is_smaller(n, b):\n        return n < b\n",
        "num_ids": 20
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list=[]\n    for i in list1:\n        len_list.append(len(i))\n    return len_list\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length_list = []\n    for i in list1:\n        length_list.append(len(i))\n    return max(length_list)\n",
        "num_ids": 38
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word=max(list1,key=len)\n    return len(word)\nprint(len_log(['shivam','shyam','niket']))\n",
        "num_ids": 42
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_len = []\n    for item in list1:\n        word_len.append(len(item))\n    return word_len\n    \ndef longest_word(list1):\n    '''\n    Write a python function to find the longest word.\n    '''\n    word_len = []\n    for item in list1:\n        word_len.append(len(item))\n    return max(word_len)\n    \ndef unique_words(list1):\n    '''\n    Write a python function to find the unique words in a sentence.\n    '''\n    unique = []\n    for item in list1:\n        if item not in unique:\n            unique.append(item)\n    return unique\n    \ndef frequency(list1):\n    '''\n    Write a python function to find the frequency of words in a sentence.\n    '''\n    unique = []\n    for item in list1:\n        if item not in unique:\n            unique.append(item)\n    frequency = []\n    for item in unique:\n        count = 0\n        for word in list1:\n            if word == item:\n                count += 1\n        frequency.append(count)\n    return frequency\n",
        "num_ids": 80
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length=0\n    for i in list1:\n        if len(i)>length:\n            length=len(i)\n    return length\n",
        "num_ids": 37
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(len(i))\n    return list2\n",
        "num_ids": 32
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = str(list1).replace('[','').replace(']','').replace(\"'\",\"\").split(',')\n    len_word = 0\n    for i in list1:\n        if len(i) > len_word:\n            len_word = len(i)\n    return len_word\n",
        "num_ids": 76
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n            length = i\n    return (max,length)\n",
        "num_ids": 46
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    length = 0\n    for i in list1:\n        if len(i) > length:\n            longest_word = i\n            length = len(i)\n    print(\"The longest word is : \", longest_word)\n    print(\"Length of the longest word is : \", length)\n    \nlist1 = ['grapes','carrot','potato','peas']\nlen_log(list1)\n",
        "num_ids": 105
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # split words\n    # find length of each word\n    # print max length\n    return max([len(word) for word in list1])\n",
        "num_ids": 36
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    if sub_str in str1:\n        return True\n    return False\n",
        "num_ids": 22
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    result = False\n    \n    for word in str1:\n        if sub_str in word:\n            result = True\n            break\n        else:\n            result = False\n            \n    return result\n",
        "num_ids": 51
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        if sub_str in str1[i]:\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for x in str1:\n        if sub_str in x:\n            print(\"Yes, it's present in the given list\")\n            return\n    print(\"No, not present in the given list\")\n",
        "num_ids": 49
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1_len = len(str1)\n    sub_str_len = len(sub_str)\n    if(str1_len < sub_str_len):\n        return False\n    str1_list = list(str1)\n    sub_str_list = list(sub_str)\n    for i in range(str1_len - sub_str_len + 1):\n        if (str1_list[i: i + sub_str_len] == sub_str_list):\n            return True\n    return False\n",
        "num_ids": 127
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    flag=0\n    for i in str1:\n        if i == sub_str:\n            flag+=1\n    if flag >0:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        print('Found a match!')\n    else:\n        print('No match!')\n",
        "num_ids": 33
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = list(sub_str)\n    for i in range(len(str1)):\n        check_str = str1[i: i+len(sub_str)]\n        if check_str == sub_str:\n            return True\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    for i in range(len(str1)):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    n = n - int(n)\n    if n == 0:\n        return True\n    elif n > 0:\n        return False\n    else:\n        return is_undulating(n)\nprint(is_undulating(0))\nprint(is_undulating(1))\nprint(is_undulating(0.1))\nprint(is_undulating(-0.1))\nprint(is_undulating(0.0))\nprint(is_undulating(-0.0))\nprint(is_undulating(0.5))\nprint(is_undulating(-0.5))\nprint(is_undulating(0.49999999999999996))\nprint(is_undulating(-0.49999999999999996))\nprint(is_undulating(0.50000000000000001))\nprint(is_undulating(-0.50000000000000001))\nprint(is_undulating(0.59999999999999998))\nprint(is_undulating(-0.59999999999999998))\nprint(is_undulating(0.60000000000000001))\nprint(is_undulating(-0.60000000000000001))\nprint(is_undulating(0.69999999999999996))\nprint(is_undulating(-0.69999999999999996))\nprint(is_undulating(0.79999999999999997))\nprint(is_undulating(-0.79999999999999997))\nprint(is_undulating(0.89999999999999996))\nprint(is_undulating(-0.89999999999999996))\nprint(is_undulating(0.90000000000000001))\nprint(is_undulating(-0.90000000000000001))\nprint(is_undulating(1.0000000000000002))\nprint(is_undulating(-1.0000000000000002))\nprint(is_undulating(1.0000000000000003))\nprint(is_undulating(-1.0000000000000003))\nprint(is_undulating(1.0000000000000004))\nprint(is_undulating(-1.0000000000000004))\nprint(is_undulating(1.0000000000000005))\nprint(is_undulating(-1.0000000000000005))\nprint(is_undulating(1.0000000000000006))\nprint(is_undulating(-1.0000000000000006))\nprint(is_undulating(1.0000000000000007))\nprint(is_undulating(-1.0000000000000007))\nprint(is_undulating(1.0000000000000008))\nprint(is_undulating(-1.0000000000000008))\nprint(is_undulating(1.0000000000000009))\nprint(is_undulating(-1.0000000000000009))\nprint(is_undulating(1.0000000000000010))\nprint(is_undulating(-1.0000000000000010))\nprint(is_undulating(1.0000000000000011))\nprint(is_undulating(-1.0000000000000011))\nprint(is_undulating(1.0000000000000012))\nprint(is_undulating(-1.0000000000000012))\nprint(is_undulating(1.0000000000000013))\nprint(is_undulating(-1.0000000000000013))\nprint(is_undulating(1.0000000000000014))\nprint(is_undulating(-1.0000000000000014))\nprint(is_undulating(1.0000000000000015))\nprint(is_undulating(-1.0000000000000015))\nprint(is_undulating(1.0000000000000016))\nprint(is_undulating(-1.0000000000000016))\nprint(is_undulating(1.0000000000000017))\nprint(is_undulating(-1.0000000000000017))\nprint(is_undulating(1.0000000000000018))\nprint(is_undulating(-1.0000000000000018))\nprint(is_undulating(1.0000000000000019))\nprint(is_undulating(-1.0000000000000019))\nprint(is_undulating(1.0000000000000020))\nprint(is_undulating(-1.0000000000000020))\nprint(is_undulating(1.0000000000000021))\nprint(is_undulating(-1.0000000000000021))\nprint(is_undulating(1.0000000000000022))\nprint(is_undulating(-1.0000000000000022))\nprint(is_undulating(1.0000000000000023))\nprint(is_undulating(-1.0000000000000023))\nprint(is_undulating(1.0000000000000024))\nprint(is_undulating(-1.0000000000000024))\nprint(is_undulating(1.0000000000000025))\nprint(is_undulating(-1.0000000000000025))\nprint(is_undulating(1.0000000000000026))\nprint(is_undulating(-1.0000000000000026))\nprint(is_undulating(1.0000000000000027))\nprint(is_undulating(-1.0000000000000027))\nprint(is_undulating(1.0000000000000028))\nprint(is_undulating(-1.0000000000000028))\nprint(is_undulating(1.0000000000000029))\nprint(is_undulating(-1.0000000000000029))\nprint(is_undulating(1.0000000000000030))\nprint(is_undulating(-1.0000000000000030))\nprint(is_undulating(1.0000000000000031))\nprint(is_undulating(-1.0000000000000031))\nprint(is_undulating(1.0000000000000032))\nprint(is_undulating(-1.0000000000000032))\nprint(is_undulating(1.0000000000000033))\nprint(is_undulating(-1.0000000000000033))\nprint(is_undulating(1.0000000000000034))\nprint(is_undulating(-1.0000000000000034))\nprint(is_undulating(1.0000000000000035))\nprint(is_undulating(-1.0000000000000035))\nprint(is_undulating(1.0000000000000036))\nprint(is_undulating(-1.0000000000000036))\nprint(is_undulating(1.0000000000000037))\nprint(is_undulating(-1.0000000000000037))\nprint(is_undulating(1.0000000000000038))\nprint(is_undulating(-1.0000000000000038))\nprint(is_undulating(1.0000000000000039))\nprint(is_undulating(-1.0000000000000039))\nprint(is_undulating(1.0000000000000040))\nprint(is_undulating(-1.0000000000000040))\nprint(is_undulating(1.0000000000000041))\nprint(is_undulating(-1.0000000000000041))\nprint(is_undulating(1.0000000000000042))\nprint(is_undulating(-1.0000000000000042))\nprint(is_undulating(1.0000000000000043))\nprint(is_undulating(-1.0000000000000043))\nprint(is_undulating(1.0000000000000044))\nprint(is_undulating(-1.0000000000000044))\nprint(is_undulating(1.0000000000000045))\nprint(is_undulating(-1.0000000000000045))\nprint(is_undulating(1.0000000000000046))\nprint(is_undulating(-1.0000000000000046))\nprint(is_undulating(1.0000000000000047))\nprint(is_undulating(-1.0000000000000047))\nprint(is_undulating(1.0000000000000048))\nprint(is_undulating(-1.0000000000000048))\nprint(is_undulating(1.0000000000000049))\nprint(is_undulating(-1.0000000000000049))\nprint(is_undulating(1.0000000000000050))\nprint(is_undulating(-1.0000000000000050))\nprint(is_undulating(1.0000000000000051))\nprint(is_undulating(-1.0000000000000051))\nprint(is_undulating(1.0000000000000052))\nprint(is_undulating(-1.0000000000000052))\nprint(is_undulating(1.0000000000000053))\nprint(is_undulating(-1.0000000000000053))\nprint(is_undulating(1.0000000000000054))\nprint(is_undulating(-1.0000000000000054))\nprint(is_undulating(1.0000000000000055))\nprint(is_undulating(-1.0000000000000055))\nprint(is_undulating(1.0000000000000056))\nprint(is_undulating(-1.0000000000000056))\nprint(is_undulating(1.0000000000000057))\nprint(is_undulating(-1.0000000000000057))\nprint(is_undulating(1.0000000000000058))\nprint(is_undulating(-1.0000000000000058))\nprint(is_undulating",
        "num_ids": 2014
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # your code here\n",
        "num_ids": 8
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def check(s, n):\n        if s[0] == '1' and s[n - 1] == '1':\n            return True\n        elif s[0] == '0' and s[n - 1] == '0':\n            return True\n        else:\n            return False\n        return s\n    if n < 2:\n        return False\n    else:\n        s = str(n)\n        if check(s, len(s)):\n            return True\n        else:\n            return False\n",
        "num_ids": 123
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    if n > 0:\n        return n % 2 == 1\n    else:\n        return n % 2 == 0\n    \n    \ndef is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    return n % 2 == 1 or n % 2 == 0\n    \ndef is_undulating(n):\n    if n > 0:\n        return n % 2 == 1\n    else:\n        return n % 2 == 0\n        \ndef is_undulating(n):\n    return n % 2 == 1 or n % 2 == 0\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1937
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_even(n): \n        '''\n        Write a function to check whether the given number is even or not.\n        '''\n        return n % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if (n%i == 0):\n            sum += i\n    return sum == 2*n\n",
        "num_ids": 41
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = list(str(n))\n    for i in range(1, len(s)):\n        if abs(int(s[i]) - int(s[i-1]))!= 1:\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return len(str(n)) % 2 == 1",
        "num_ids": 14
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Write your code here\n    n = str(n)\n    m = len(n)\n    for i in range(m):\n        n = int(n)\n        d = n%10\n        n = n/10\n        n = str(n)\n        if d in [0,2,4,6,8]:\n            return False\n    return True\n",
        "num_ids": 88
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    n_len = len(n)\n    for i in range(n_len):\n        if (i == 0 or i == n_len-1) and int(n[i])%2 == 1:\n            return False\n        if int(n[i])%2 == 0:\n            return False\n    return True\n",
        "num_ids": 85
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b>0:\n        return power(a,b-1)*a\n    if b<0:\n        return power(a,b+1)/a\n",
        "num_ids": 62
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    try:\n        return a ** b\n    except:\n        return \"Sorry, you cannot calculate negative numbers\"\n",
        "num_ids": 28
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # using math library\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b > 1:\n        return a*power(a,b-1)\n",
        "num_ids": 52
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b == 0):\n        return 1\n    elif(b%2 == 1):\n        return (a**b)*power(a,b-1)\n    else:\n        return (a**b)//2*power(a,b-2)\n",
        "num_ids": 64
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n",
        "num_ids": 13
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b > 1:\n        return a * power(a,b-1)\n",
        "num_ids": 44
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b>1:\n        return a*power(a,b-1)\n",
        "num_ids": 44
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list, key = itemgetter(1))[1]\n    for item in test_list:\n        if item[1] == min_value:\n            return item[0]\n",
        "num_ids": 53
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index = test_list[0][1]\n    for i in test_list:\n        if i[1] < index:\n            index = i[1]\n    return index\n",
        "num_ids": 45
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if not test_list:\n        return None\n    else:\n        min_index = 0\n        for index in range(1, len(test_list)):\n            if test_list[index][1] < test_list[min_index][1]:\n                min_index = index\n        return test_list[min_index][0]\n",
        "num_ids": 83
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0]\n",
        "num_ids": 27
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = min(test_list, key=itemgetter(1))\n    return test_list.index(minimum)\n",
        "num_ids": 31
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_index = i\n    return min_index\n",
        "num_ids": 80
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list by the second element\n    # return the first element\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 39
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) > 1:\n        return sorted(test_list, key = itemgetter(1))[0][0]\n    else:\n        return test_list[0][0]\n",
        "num_ids": 51
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return itemgetter(0)(sorted(test_list, key = itemgetter(1))[0])\n",
        "num_ids": 29
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_len = len(lst[0])\n    for i in lst:\n        if len(i) < smallest_len:\n            smallest_len = len(i)\n    return smallest_len\n",
        "num_ids": 53
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n",
        "num_ids": 48
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n    \ndef Factorial(num):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if num < 0:\n        return None\n    if num < 2:\n        return 1\n    return num * Factorial(num - 1)\n",
        "num_ids": 36
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = min(len(lst) for lst in lst)\n    return min_len\n",
        "num_ids": 28
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=1000\n    for i in lst:\n        if len(i)<min_len:\n            min_len=len(i)\n    return min_len\n",
        "num_ids": 45
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if min_len > len(i):\n            min_len = len(i)\n    return min_len\n",
        "num_ids": 50
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(sublst) for sublst in lst])\n    \n    ",
        "num_ids": 24
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_lst = lst[0]\n    for sub_lst in lst:\n        if len(sub_lst) < len(min_lst):\n            min_lst = sub_lst\n    return len(min_lst)\n    \n    \ndef Reverse_Words_in_Str(str):\n    '''\n    Write a python function to reverse the word in a string\n    '''\n    return \" \".join(reversed(str.split()))\n    \ndef Sum_Numbers(lst):\n    '''\n    Write a python function to sum up all the numbers in a list of lists\n    '''\n    num = 0\n    for i in lst:\n        for j in i:\n            if type(j) == int or type(j) == float:\n                num += j\n    return num\n    \ndef Sum_Numbers_v2(lst):\n    '''\n    Write a python function to sum up all the numbers in a list of lists using list comprehension\n    '''\n    return sum([sum(i) for i in lst])\n    \ndef Reverse_List(lst):\n    '''\n    Write a python function to reverse the order of the list\n    '''\n    return lst[::-1]\n    \ndef Count_Vowels(str):\n    '''\n    Write a python function to count the number of vowels in a string\n    '''\n    return len(list(filter(lambda x: x in ['a', 'e', 'i', 'o', 'u'], str.lower())))\n    \ndef Count_Vowels_v2(str):\n    '''\n    Write a python function to count the number of vowels in a string using list comprehension\n    '''\n    return len([i for i in str.lower() if i in ['a', 'e', 'i', 'o', 'u']])\n    \ndef Check_Occurance(str1, str2):\n    '''\n    Write a python function to check if str1 is a substring of str2\n    '''\n    return str1 in str2\n    \ndef Check_Occurance_v2(str1, str2):\n    '''\n    Write a python function to check if str1 is a substring of str2 using list comprehension\n    '''\n    return any([str1 in i for i in str2])\n    \ndef Check_Occurance_v3(str1, str2):\n    '''\n    Write a python function to check if str1 is a substring of str2 using regular expression\n    '''\n    return re.search(str1, str2)\n    \ndef Check_Occurance_v4(str1, str2):\n    '''\n    Write a python function to check if str1 is a substring of str2 using regular expression\n    '''\n    return bool(re.search(str1, str2))\n    \ndef Find_All_Strings(str1, str2):\n    '''\n    Write a python function to find all the substrings of str2 that is also a substring of str1\n    '''\n    return re.findall(str1, str2)\n    \ndef Find_All_Strings_v2(str1, str2):\n    '''\n    Write a python function to find all the substrings of str2 that is also a substring of str1\n    '''\n    return [i for i in str2.split() if i in str1.split()]\n    \ndef Find_All_Strings_v3(str1, str2):\n    '''\n    Write a python function to find all the substrings of str2 that is also a substring of str1\n    '''\n    return [i for i in str1.split() if i in str2.split()]\n    \ndef Find_All_Strings_v4(str1, str2):\n    '''\n    Write a python function to find all the substrings of str2 that is also a substring of str1\n    '''\n    return [i for i in str1.split() if i in str2.split()]\n    \ndef Longest_Word(lst):\n    '''\n    Write a python function to find the longest word in a list\n    '''\n    return max(lst, key=len)\n    \ndef Longest_Word_v2(lst):\n    '''\n    Write a python function to find the longest word in a list using list comprehension\n    '''\n    return sorted(lst, key=len)[-1]\n    \ndef Longest_Word_v3(lst):\n    '''\n    Write a python function to find the longest word in a list using regular expression\n    '''\n    return re.findall('[\\w]+', lst[0])[0]\n    \ndef Longest_Word_v4(lst):\n    '''\n    Write a python function to find the longest word in a list using regular expression\n    '''\n    return sorted(lst, key=lambda x: len(x))[-1]\n    \ndef Longest_Word_v5(lst):\n    '''\n    Write a python function to find the longest word in a list using regular expression\n    '''\n    return sorted([i for i in lst if len(i) >= len(lst[0])], key=len)[-1]\n    \ndef Find_Longest_Words(lst):\n    '''\n    Write a python function to find the longest words in a list using regular expression\n    '''\n    return [i for i in lst if len(i) == max([len(i) for i in lst])]\n    \ndef Find_Longest_Words_v2(lst):\n    '''\n    Write a python function to find the longest words in a list using list comprehension\n    '''\n    return sorted(lst, key=lambda x: len(x))[-1]\n    \ndef Find_Longest_Words_v3(lst):\n    '''\n    Write a python function to find the longest words in a list using list comprehension\n    '''\n    return [i for i in lst if len(i) == max([len(i) for i in lst])]\n    \ndef Find_Longest_Words_v4(lst):\n    '''\n    Write a python function to find the longest words in a list using list comprehension\n    '''\n    return [i for i in lst if len(i) == len(max(lst))]\n    \ndef Find_Longest_Words_v5(lst):\n    '''\n    Write a python function to find the longest words in a list using list comprehension\n    '''\n    return [i for i in lst if len(i) == len(max(lst, key=len))]\n    \ndef Find_Duplicate_Values(lst):\n    '''\n    Write a python function to find all duplicate values in a list\n    '''\n    return [i for i in lst if lst.count(i) > 1]\n    \ndef Find_Duplicate_Values_v2(lst):\n    '''\n    Write a python function to find all duplicate values in a list\n    '''\n    return list(set([i for i in lst if lst.count(i) > 1]))\n    \ndef Find_Duplicate_Values_v3(lst):\n    '''\n    Write a python function to find all duplicate values in a list using list comprehension\n    '''\n    return [i for i in lst if lst.count(i) > 1]\n    \ndef Find_Duplicate_Values_v4(lst):\n    '''\n    Write a python function to find all duplicate values in a list using list comprehension\n    '''\n    return [i for i in lst if lst.count(i) > 1]\n    \ndef Find_Duplicate_Values_v5(lst):\n    '''\n    Write a python function to find all duplicate values in a list using list comprehension\n    '''\n    return list(set([i for i in lst if lst.count(i) > 1]))\n    \ndef Count_Special_Chars(str):\n    '''\n    Write a python function to count the number of special characters in a string\n    '''\n    return len([i for i in str if i.isalpha() == False])\n    \ndef Count_Special_Chars_v2(str):\n    '''\n    Write a python function to count the number of special characters in a string\n    '''",
        "num_ids": 1
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])  \n    for i in range(1, len(lst)):  \n        if len(lst[i]) < min_len:  \n            min_len = len(lst[i])  \n    return min_len \n",
        "num_ids": 69
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n",
        "num_ids": 51
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisor_count += 1\n    return divisor_count\n",
        "num_ids": 50
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 0:\n        raise ValueError(\"The number of divisors must be positive.\")\n    divisors = 0\n    for x in range(1, n + 1):\n        if n % x == 0:\n            divisors += 1\n    return divisors\n",
        "num_ids": 67
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if (n == 0):\n        return 0\n    return n / 2 + divisor(n / 2)\n",
        "num_ids": 29
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether a given integer is prime or not.\n    '''\n    return divisor(n) == 2\n",
        "num_ids": 13
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,int(n/2)+1):\n        if n%i == 0:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 0:\n        return \"Number must be positive\"\n    else:\n        divisors = []\n        for i in range(1,n+1):\n            if n % i == 0:\n                divisors.append(i)\n        return len(divisors)\n",
        "num_ids": 70
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    l = []\n    for i in range(1, int(n**(1/2))+1):\n        if n % i == 0:\n            if n / i == i:\n                l.append(i)\n            else:\n                l.append(i)\n                l.append(int(n / i))\n    return len(l)\n",
        "num_ids": 85
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    #initialize result\n    res = 0\n    \n    #loop through all numbers from 1 to n\n    for i in range(1,n+1):\n        \n        #if number divides evenly, increment the divisor count\n        if n % i == 0:\n            res += 1\n",
        "num_ids": 69
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    my_dict = {}\n    for item in list1:\n        if item in my_dict:\n            my_dict[item] = my_dict[item] + 1\n        else:\n            my_dict[item] = 1\n    return my_dict\n",
        "num_ids": 63
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in list1:\n        if i not in frequency_dict:\n            frequency_dict[i] = 1\n        else:\n            frequency_dict[i] += 1\n    return frequency_dict\n",
        "num_ids": 57
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i not in freq_dict:\n            freq_dict[i] = list1.count(i)\n    return freq_dict\n",
        "num_ids": 53
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1={}\n    for i in list1:\n        if i not in dict1:\n            dict1[i]=1\n        else:\n            dict1[i]+=1\n    return dict1\n",
        "num_ids": 51
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for item in list1:\n        if item not in dictionary:\n            dictionary[item] = 1\n        else:\n            dictionary[item] += 1\n    return dictionary\n",
        "num_ids": 50
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dictionary = {}\n    for ele in list1:\n        freq_dictionary[ele] = list1.count(ele)\n    return freq_dictionary\n    \n",
        "num_ids": 47
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    unique = set(list1)\n    result = {}\n    for n in unique:\n        result[n] = list1.count(n)\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list1 = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,",
        "num_ids": 2009
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    return {key:list1.count(key) for key in list1}\n",
        "num_ids": 21
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for x in list1:\n        if x in freq.keys():\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    return freq\n",
        "num_ids": 53
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total/len(numbers)\nprint(multiply_num([1,2,3,4])",
        "num_ids": 46
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    #convert the list to a number using reduce function\n    numbers_length = len(numbers)\n    #convert the list to a number using reduce function\n    numbers_sum = reduce(lambda x,y: x*y, numbers)\n    #divide the number with the length of the list using reduce function\n    multiply_divide = reduce(lambda x,y: x/y, numbers)\n",
        "num_ids": 98
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    s = 1\n    for i in numbers:\n        s *= i\n    return s/len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplied = 1\n    for number in numbers:\n        multiplied = multiplied * number\n    return multiplied / len(numbers)\n",
        "num_ids": 33
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    total /= len(numbers)\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    res = 1\n    for n in numbers:\n        res = res * n\n    return res / len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n",
        "num_ids": 20
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for x in numbers:\n        product *= x\n    \n    return product / len(numbers)\n",
        "num_ids": 32
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product = product * number\n",
        "num_ids": 21
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for number in numbers:\n        multiply *= number\n    print(multiply)\n    return multiply/len(numbers)\n",
        "num_ids": 42
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_equivalent = [] \n    while n!= 0: \n        remainder = int(n % 2) \n        binary_equivalent.append(str(remainder)) \n        n = n // 2\n    binary_equivalent.reverse() \n    binary_equivalent = ''.join(binary_equivalent) \n    return binary_equivalent \n",
        "num_ids": 91
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = ''\n    while n!= 0:\n        r = n % 2\n        n = n // 2\n        result = str(r) + result\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return (n % 2 + 10 * decimal_to_binary(int(n / 2)))\n        #return (n % 2 + 10 * int(n / 2))\n",
        "num_ids": 57
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = ''\n    remainder = 0\n    while n > 0:\n        remainder = n % 2\n        n = n / 2\n        binary_string += str(remainder)\n    return binary_string[::-1]\n",
        "num_ids": 62
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    # We keep dividing by 2, and when n is odd, we add 1 to the output string, and when n is even, we don't add anything to the output string. \n    return decimal_to_binary(n//2) + str(n%2)\n",
        "num_ids": 75
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "num_ids": 16
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n<=1:\n        return str(n)\n    return decimal_to_binary(n//2) + str(n%2)\n    \nprint(decimal_to_binary(9))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(50))\n",
        "num_ids": 75
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if(n>1):\n        decimal_to_binary(n//2)\n    print(n%2,end = '')\n",
        "num_ids": 35
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n<=0:\n        return \"0\"\n    return str(decimal_to_binary(n//2) + str(n%2))\n",
        "num_ids": 39
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    length = len(num_str)\n    next_num = int(num_str + num_str[::-1])\n    return next_num if int(next_num) < 10**9 else None\n",
        "num_ids": 61
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    is_even = num % 2 == 0\n    divisor = 10\n    current_value = num\n    while True:\n        next_value = (current_value // divisor) * divisor\n        if is_even:\n            if next_value >= current_value:\n                break\n            if str(next_value) == str(next_value)[::-1]:\n                return next_value\n        else:\n            if next_value + 1 >= current_value:\n                break\n            if str(next_value + 1) == str(next_value + 1)[::-1]:\n                return next_value + 1\n        current_value = next_value\n        divisor = divisor * 10\n    return -1\n",
        "num_ids": 183
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    while True:\n        temp = num_str\n        rev_num_str = num_str[::-1]\n        if temp < rev_num_str:\n            rev_num_str = rev_num_str[1:]\n        else:\n            temp = int(temp + rev_num_str[1:])\n            rev_num_str = str(temp)\n        if is_palindrome(temp):\n            return temp\n",
        "num_ids": 115
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    length = len(num_str)\n    is_palindrome = False\n    while not is_palindrome:\n        for i in range(0,length):\n            if num_str[i]!= num_str[length-1-i]:\n                if num_str[i] > num_str[length-1-i]:\n                    num_str = num_str[:i]+num_str[i]+num_str[i]+num_str[i+1:]\n                else:\n                    num_str = num_str[:length-1-i]+num_str[length-1-i]+num_str[length-1-i]+num_str[length-1-i-1]\n                break\n        else:\n            is_palindrome = True\n    return int(num_str)\n",
        "num_ids": 204
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    num_string = str(num)\n    num_string = '0'*(len(num_string)+1) if len(num_string)%2 == 1 else '0'*len(num_string)\n    num_string = int(num_string)\n    \n    while not palindrome(num_string):\n        num_string += 1\n    return num_string\n",
        "num_ids": 94
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    for i in range(len(num), 0, -1):\n        if num[:i] == num[:-i+1][::-1]:\n            return int(num[:i] + num[:i-1:-1])\n",
        "num_ids": 66
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return -1\n    for i in range(len(num_str)):\n        if num_str[:i] == num_str[:i][::-1] and num_str[i:] == num_str[i:][::-1]:\n            return int(num_str[:i] + num_str[i:] + num_str[:i][::-1])\n    return -1\n",
        "num_ids": 123
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    # if it is already palindromic, then return the next one\n    if str(num) == str(num)[::-1]:\n        return num\n    # get the length of the number\n    length = len(str(num))\n    # initialize the answer\n    answer = 1\n    # from largest to smallest, if two are the same, return the next one\n    for i in range(length, 0, -1):\n        # get the largest palindromic number for length i\n        answer *= int(str(10 ** (i - 1)) + str(10 ** (i - 1))[::-1])\n        # if we have a valid palindromic number, return the next one\n        if answer >= num:\n            return int(str(10 ** i) + str(10 ** i)[::-1])\n    # return 1 if all numbers are the same\n    return 1\n",
        "num_ids": 216
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return int(num)\n    else:\n        if num[::-1] < num:\n            return int(num)\n        else:\n            for i in range(1, len(num)):\n                if num[0:i] == num[i:][::-1] and int(num[i:][::-1]) < int(num):\n                    return int(num[0:i] + num[i:][::-1])\n            return int(num)\n",
        "num_ids": 132
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #create a list of palindromes\n    palindromes = []\n    for i in range(1000,1,-1):\n        for j in range(1000,1,-1):\n            num = int(i*j)\n            if num >= 1 and str(num) == str(num)[::-1]:\n                palindromes.append(num)\n    #find the smallest palindrome\n    smallest = sys.maxsize\n    for num in palindromes:\n        if num < smallest:\n            smallest = num\n    #return the smallest palindrome\n    return smallest\n",
        "num_ids": 142
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return kth_element_helper(arr, 0, len(arr)-1, k)\n",
        "num_ids": 25
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(start, end, pivot_index):\n        pivot = arr[pivot_index]\n        arr[pivot_index], arr[end] = arr[end], arr[pivot_index]\n        store_index = start\n        for i in range(start, end):\n            if arr[i] < pivot:\n                arr[store_index], arr[i] = arr[i], arr[store_index]\n                store_index += 1\n        arr[store_index], arr[end] = arr[end], arr[store_index]\n        return store_index\n",
        "num_ids": 139
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1:\n        raise ValueError('Value of k must be >= 1')\n    \n    # Find the middle element\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] == k:\n            return arr[mid]\n        elif arr[mid] < k:\n            low = mid + 1\n        else:\n            high = mid - 1\n",
        "num_ids": 113
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        pivot = partition(arr, start, end)\n        if pivot == k:\n            return arr[pivot]\n        elif pivot > k:\n            end = pivot - 1\n        else:\n            start = pivot + 1\n    return -1\n",
        "num_ids": 83
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(start, end):\n        pivot = arr[end]\n        i = start\n        for j in range(start, end):\n            if arr[j] <= pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n        arr[i], arr[end] = arr[end], arr[i]\n        return i\n",
        "num_ids": 93
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    if arr == []:\n        return None\n    \n    start_index = 1\n    end_index = len(arr)\n    mid_index = (start_index + end_index) // 2\n    \n    # If we have a sorted array the element at index k will always be the kth element\n    if k <= end_index:\n        return arr[k - 1]\n    \n    # Check to see if the middle element is smaller than the element at k\n    if mid_index < k:\n        k = k - mid_index\n        # Check if the array is sorted\n        if arr[mid_index - 1] < arr[mid_index]:\n            return kth_element(arr[mid_index:], k)\n        else:\n            return kth_element(arr[:mid_index], k)\n    # If the element is larger than the element at k then we can search the left half of the array\n    else:\n        return kth_element(arr[:mid_index], k)\n    \nprint(kth_element([2,4,5,6], 4))\nprint(kth_element([3,4,7,8,9], 4))\nprint(kth_element([2,4,5,6], 1))\nprint(kth_element([3,4,7,8,9], 5))\nprint(kth_element([4,8,5,6], 3))\nprint(kth_element([5,6,7,8,9], 3)",
        "num_ids": 353
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #return sorted(arr)[k-1]\n    # return sorted(arr)[k-1]\n    def binary_search(arr, target):\n        '''\n        This function is a modified version of binary search, it stops if it finds the target element\n        or if the element to the left or right of the target is larger than the target\n        '''\n        start = 0\n        end = len(arr)-1\n        while start <= end:\n            mid = int((start + end) / 2)\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                start = mid + 1\n            else:\n                end = mid - 1\n        return -1\n    # check if the kth element is in the first half of the array\n    mid = int((len(arr)-1)/2)\n    if arr[mid] == k:\n        return arr[mid]\n    elif k > arr[mid]:\n        # check if the kth element is in the second half\n        # if k > arr[mid] and k < arr[mid+1]\n        if binary_search(arr[mid+1:], k) == -1:\n            # check if k is in the first half, if yes, return the kth element\n            if binary_search(arr[:mid+1], k) == -1:\n                return \"Element not found\"\n            else:\n                return arr[binary_search(arr[:mid+1], k)]\n        else:\n            # the kth element is in the second half\n            return arr[binary_search(arr[mid+1:], k)]\n    else:\n        # kth element is in the first half\n        if binary_search(arr[:mid+1], k) == -1:\n            return \"Element not found\"\n        else:\n            return arr[binary_search(arr[:mid+1], k)]\n",
        "num_ids": 364
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr is None:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # arr = [1, 2, 3, 4, 5, 6, 7]\n    # k = 5\n    # index = [1, 3, 5, 7]\n    # index = [2, 4, 6]\n    \n    # arr = [5,2,1,3]\n    # k = 4\n    # index = [2, 4, 6]\n    \n    # arr = [3,6,7,0]\n    # k = 3\n    # index = [3, 6, 7]\n    \n    if len(arr) < k:\n        return \"Invalid input\"\n    \n    index = []\n    for i in range(len(arr)):\n        index.append(i+1)\n        \n    arr = [None] + arr\n    \n    for i in range(len(arr)-1, -1, -1):\n        if i < k:\n            continue\n        if arr[i] < arr[i//2]:\n            arr[i], arr[i//2] = arr[i//2], arr[i]\n            index[i], index[i//2] = index[i//2], index[i]\n            \n    return arr[k-1], index[k-1]\n        \n",
        "num_ids": 291
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pivot = random.choice(arr)\n    left = [x for x in arr if x < pivot]\n    right = [x for x in arr if x > pivot]\n    if k <= len(left):\n        return kth_element(left, k)\n    if k > len(left) + len(right):\n        return kth_element(right, k - len(left) - len(right))\n    return pivot\n",
        "num_ids": 103
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    chars = list(word)\n    capital = False\n    for idx, char in enumerate(chars):\n        if char.isupper() or char == '_':\n            capital = True\n        elif char == '_':\n            capital = False\n        else:\n            if capital:\n                chars[idx] = char.upper()\n            else:\n                chars[idx] = char\n            capital = False\n    return ''.join(chars)\n",
        "num_ids": 114
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = []\n    for i, char in enumerate(word):\n        if char.isupper() and i!= 0:\n            res.append('_')\n        res.append(char)\n    return ''.join(res)\n",
        "num_ids": 58
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = []\n    for i in word.split(\"_\"):\n        res.append(i.capitalize())\n    return \"\".join(res)\n",
        "num_ids": 39
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = ''\n    # new_word = word.title()\n    for letter in word:\n        if letter == '_':\n            new_word +=''\n        else:\n            new_word += letter\n    return new_word.title()\n",
        "num_ids": 62
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    cap = False\n    for ch in word:\n        if ch.isupper():\n            cap = True\n        if cap:\n            result += ch.lower()\n        else:\n            result += ch\n    return result[0].lower() + result[1:]\n",
        "num_ids": 68
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = ''\n    for i in range(len(word)):\n        if word[i] == '_':\n            new_word += word[i+1].upper()\n        elif i == 0:\n            new_word += word[0].upper()\n        else:\n            new_word += word[i]\n    return new_word\n",
        "num_ids": 86
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    a = word.split('_')\n    return a[0] + ''.join(i.capitalize() for i in a[1:])\n",
        "num_ids": 37
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() for w in word.split('_'))\n    \ndef main():\n    snake = 'this_is_a_snake'\n    print(snake_to_camel(snake))\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \n",
        "num_ids": 83
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #your code here\n    if not word: return ''\n    res = word[0].upper()\n    for i in word[1:]:\n        if i.isupper():\n            res += '_' + i.lower()\n        else:\n            res += i\n    return res\n",
        "num_ids": 69
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_str = words[0]\n    for word in words[1:]:\n        camel_case_str += word.capitalize()\n    return camel_case_str\n",
        "num_ids": 57
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    def eulerian_num_list(n, m, lst):\n        '''\n        Write a function to find the Eulerian number a(n, m).\n        '''\n        \n        def find_eulerian(n, m, lst):\n            '''\n            Find the eulerian number.\n            '''\n            # print(n, m, lst)\n            if m == 1:\n                return 1\n            else:\n                num = 0\n                for j in range(n):\n                    if lst[j][1] == m - 1:\n                        num += lst[j][0]\n                # print(num)\n                return eulerian_num_list(n, m - 1, lst) + num\n        return find_eulerian(n, m, lst)\n    lst = []\n    for i in range(n):\n        lst.append((1, i))\n    lst.sort(reverse = True)\n    # print(lst)\n    return eulerian_num_list(n, m, lst)\n",
        "num_ids": 177
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m - (n - m)\n",
        "num_ids": 14
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1: return 3\n    elif n == 1 and m == 2: return 1\n    elif n == 2 and m == 1: return 5\n    elif n == 2 and m == 2: return 1\n    else: return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n    #return a(n-1, m) + a(n, m-1)\n",
        "num_ids": 108
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    else:\n        return m*(eulerian_num(n-1, m) + eulerian_num(n-2, m) + eulerian_num(n-3, m))\n",
        "num_ids": 105
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n==0) and (m==0):\n        return 1\n    else:\n        return eulerian_num(n-1, m)+eulerian_num(n, m-1)\n",
        "num_ids": 51
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = 0\n    for i in range(1, n + 1): \n        res += i * m\n    return res\n",
        "num_ids": 32
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m\n",
        "num_ids": 8
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    assert(n >= 0 and m >= 0)\n    assert(n >= 2 and m >= 2)\n    \n    return (2*n - m + 1)*(n - m + 1)\n",
        "num_ids": 47
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # function to create a dictionary\n    def create_dict(n):\n        return dict(zip(list(range(n)), [0]*n))\n    \n    # function to print the dictionary\n    def print_dict(dictionary):\n        for k, v in dictionary.items():\n            print(f'{k} => {v}')\n    \n    # function to add to the dictionary values\n    def add_dict(dictionary, m):\n        for k, v in dictionary.items():\n            dictionary[k] = (v + m)\n    \n    # function to find the total number of Eulerian paths\n    def find_paths(dictionary):\n        paths = 1\n        for k, v in dictionary.items():\n            if v == 0:\n                paths = 0\n                break\n            paths = paths*v\n        return paths\n    \n    # function to find the maximum possible value of the path\n    def max_path(dictionary, n):\n        max = 0\n        for k, v in dictionary.items():\n            if v > max:\n                max = v\n        return max\n    \n    # function to find the minimum path\n    def min_path(dictionary):\n        min = 0\n        for k, v in dictionary.items():\n            if v < min:\n                min = v\n        return min\n    \n    # function to find the difference between the path with maximum and minimum values\n    def diff_path(dictionary, n):\n        return n-min_path(dictionary)\n    \n    # function to find the first node in a path\n    def first_node(dictionary):\n        min_val = min_path(dictionary)\n        for k, v in dictionary.items():\n            if v == min_val:\n                return k\n    \n    # function to remove a node with minimum value from the dictionary\n    def delete_node(dictionary, node):\n        del dictionary[node]\n    \n    # function to add a node to a path with minimum value\n    def add_node(dictionary, node, m):\n        dictionary[node] = (dictionary[node] + m)\n    \n    # function to remove a node from a path with minimum value\n    def subtract_node(dictionary, node, m):\n        dictionary[node] = (dictionary[node] - m)\n    \n    # function to find the Eulerian cycle\n    def eulerian_cycle(dictionary, n):\n        cycle = []\n        while dictionary:\n            # traverse the path\n            node = first_node(dictionary)\n            cycle.append(node)\n            delete_node(dictionary, node)\n            add_node(dictionary, node, 1)\n        return cycle\n    \n    # function to find the Eulerian path\n    def eulerian_path(dictionary, n):\n        path = []\n        while dictionary:\n            # traverse the path\n            node = first_node(dictionary)\n            path.append(node)\n            delete_node(dictionary, node)\n            subtract_node(dictionary, node, 1)\n        return path\n    \n    # function to check if a cycle is Eulerian or not\n    def is_eulerian(dictionary):\n        path_num = find_paths(dictionary)\n        return path_num%2 == 0\n    \n    # function to check if a cycle is Eulerian with atleast one path\n    def is_eulerian_one(dictionary):\n        path_num = find_paths(dictionary)\n        return path_num >= 1\n    \n    # function to find the value of a(n, m)\n    def get_val(n, m):\n        dictionary = create_dict(n)\n        add_dict(dictionary, m)\n        \n        if is_eulerian_one(dictionary):\n            path = eulerian_path(dictionary, n)\n            return find_paths(dictionary)\n        \n        cycle = eulerian_cycle(dictionary, n)\n        \n        # if the cycle is not eulerian, try and add a node\n        # to get it to be Eulerian\n        while not is_eulerian(dictionary):\n            node = cycle[0]\n            if cycle.count(node) == 1:\n                cycle = cycle[1:]\n            else:\n                cycle.remove(node)\n                cycle = cycle[:-1]\n                add_node(dictionary, node, 1)\n        \n        # find the number of paths in the cycle\n        cycle_path = find_paths(dictionary)\n        \n        # find the number of paths in the cycle with the path with minimum value\n        # as the first node\n        dictionary = create_dict(n)\n        min_path = min_path(dictionary)\n        for node in cycle:\n            add_node(dictionary, node, min_path)\n        \n        # find the number of paths in the cycle with the path with maximum value\n        # as the first node\n        dictionary = create_dict(n)\n        max_path = max_path(dictionary, n)\n        for node in cycle:\n            add_node(dictionary, node, max_path)\n        \n        # find the number of paths in the cycle with the path with maximum\n        # value as the first node and minimum value as the last node\n        dictionary = create_dict(n)\n        max_path = max_path(dictionary, n)\n        min_path = min_path(dictionary)\n        for node in cycle:\n            if cycle.index(node) == 0:\n                add_node(dictionary, node, max_path)\n            elif cycle.index(node) == len(cycle) - 1:\n                add_node(dictionary, node, min_path)\n            else:\n                add_node(dictionary, node, max_path - min_path)\n        \n        # find the number of paths in the cycle with the path with maximum\n        # value as the last node and minimum value as the first node\n        dictionary = create_dict(n)\n        max_path = max_path(dictionary, n)\n        min_path = min_path(dictionary)\n        for node in cycle:\n            if cycle.index(node) == len(cycle) - 1:\n                add_node(dictionary, node, max_path)\n            elif cycle.index(node) == 0:\n                add_node(dictionary, node, min_path)\n            else:\n                add_node(dictionary, node, max_path - min_path)\n        \n        # find the number of paths in the cycle with the path with minimum value\n        # as the last node\n        dictionary = create_dict(n)\n        min_path = min_path(dictionary)\n        for node in cycle:\n            add_node(dictionary, node, min_path)\n        \n        # find the number of paths in the cycle with the path with maximum value\n        # as the last node\n        dictionary = create_dict(n)\n        max_path = max_path(dictionary, n)\n        for node in cycle:\n            add_node(dictionary, node, max_path)\n        \n        # find the number of paths in the cycle with the path with maximum value\n        # as the last node and minimum value as the first node\n        dictionary = create_dict(n)\n        max_path = max_path(dictionary, n)\n        min_path = min_path(dictionary)\n        for node in cycle:\n            if cycle.index(node) == len(cycle) - 1:\n                add_node(dictionary, node, max_path)\n            elif cycle.index(node) == 0:\n                add_node(dictionary, node, min_path)\n            else:\n                add_node(dictionary, node, max_path - min_path)\n        \n        # find the number of paths in the cycle with the path with maximum value\n        # as the first node and minimum value as the last node\n        dictionary = create_dict(n)\n        max_path = max_path(dictionary, n)\n        min_path = min_path(dictionary)\n        for node in cycle:\n            if cycle.index(node) == 0:\n                add_node(dictionary, node, max_path)\n            elif cycle.index(node) == len(cycle) - 1:\n                add_node(dictionary, node, min_path)\n            else:\n                add_node(dictionary, node",
        "num_ids": 2010
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n >= 1 and m >= 1:\n        return int((n - m + 1)*(n - m)/2)\n    else:\n        return 0\n",
        "num_ids": 39
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        new_list.append(sorted_sublist)\n    return new_list\n",
        "num_ids": 52
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(sublist) for sublist in input_list]\n",
        "num_ids": 20
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #create empty lists to store the sorted sublists\n    sublists = []\n    sorted_sublists = []\n    #loop through the given list of lists\n    for i in input_list:\n        #sort the sublists and store the sorted sublists in a list\n        sublists.append(sorted(i))\n    #for each sublist in the list of sublists\n    for j in sublists:\n        #convert the sublist to a string\n        string = \"\".join(j)\n        #append the string to a list\n        sorted_sublists.append(string)\n    #return the list of sorted sublists\n    return sorted_sublists\n",
        "num_ids": 156
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list.sort(key=lambda s: len(s))\n    return input_list\n",
        "num_ids": 25
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n",
        "num_ids": 39
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in input_list:\n        i.sort()\n    return input_list\n    \nif __name__ == \"__main__\":\n    print(sort_sublists([[1,2,3],['a','d','c'],['a','b','c']])",
        "num_ids": 68
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n",
        "num_ids": 19
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for item in input_list:\n        item.sort()\n    return input_list\n",
        "num_ids": 23
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for sublist in input_list:\n        sublist.sort()\n    \n    return input_list\n        \n        \ndef rotate_sublist(input_list, n):\n    '''\n    Given a list of lists, rotate the list so that the n-th sublist becomes\n    the first sublist. Assume that the n-th sublist is not empty.\n    '''\n    \n    n = n % len(input_list)\n    sublist = input_list[n]\n    input_list[n] = input_list[0]\n    input_list[0] = sublist\n    \n    return input_list\n",
        "num_ids": 61
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #Iterate through each element of the list of lists\n    for element in input_list:\n        #Sort the elements of the sublist\n        sorted_list = sorted(element)\n        #Replace the element with the sorted list\n        input_list[input_list.index(element)] = sorted_list\n    #Return the list of sorted lists\n    return input_list\n",
        "num_ids": 89
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    total = 0\n    for x in lst:\n        if bool(x) == True:\n            total += 1\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n    \n    \ndef max_sum(lst):\n    '''\n    Write a python function to get maximum sum of sublists in the given list.\n    '''\n    #  max_sum = 0\n    #  for i in range(len(lst)):\n    #      for j in range(len(lst)):\n    #          if max_sum < sum(lst[i:j]) <= max_sum:\n    #              max_sum = sum(lst[i:j])\n    #  return max_sum\n    \n    max_sum = 0\n    for i in range(len(lst)):\n        current_sum = 0\n        for j in range(i, len(lst)):\n            current_sum += lst[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\n",
        "num_ids": 170
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n    \n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if i])\n    \ndef reverse(lst):\n    '''\n    Write a python function to reverse the given list.\n    '''\n    return lst[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    ctr = 0\n    for i in lst:\n        if i:\n            ctr += 1\n    return ctr\n    \ndef convert(num): \n    '''\n    Write a python function to convert the given number to a string.\n    '''\n    return str(num)\n    \ndef reverse(num):\n    '''\n    Write a python function to reverse the given number.\n    '''\n    return int(str(num)[::-1])\n    \ndef is_prime(num):\n    '''\n    Write a python function to check if the given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2,int(num/2)+1):\n        if num % i == 0:\n            return False\n    return True\n    \ndef next_prime(num):\n    '''\n    Write a python function to find next prime number.\n    '''\n    return next_prime_helper(num)\n    \ndef next_prime_helper(num):\n    '''\n    Write a recursive python function to find next prime number.\n    '''\n    # base case\n    if num == 1:\n        return 2\n    # check if the given number is prime\n    if not is_prime(num):\n        # if not, find the next prime number\n        num += 1\n        while not is_prime(num):\n            num += 1\n    return num\n    \ndef is_palindrome(num):\n    '''\n    Write a python function to check if the given number is palindrome or not.\n    '''\n    return is_palindrome_helper(num)\n    \ndef is_palindrome_helper(num):\n    '''\n    Write a recursive python function to check if the given number is palindrome or not.\n    '''\n    # base case\n    if num == 0:\n        return True\n    elif num < 0:\n        return False\n    # compare the first and last digit\n    if num % 10 == num // 10 % 10:\n        return is_palindrome_helper(num // 10)\n    else:\n        return False\n        \ndef has_palindrome(num):\n    '''\n    Write a python function to check if the given number has a palindrome.\n    '''\n    return has_palindrome_helper(num)\n    \ndef has_palindrome_helper(num):\n    '''\n    Write a recursive python function to check if the given number has a palindrome.\n    '''\n    # base case\n    if num < 10:\n        return True\n    # compare the first and last digit\n    if num % 10 == num // 10 % 10:\n        return has_palindrome_helper(num // 10)\n    else:\n        return False\n    \ndef fib(num):\n    '''\n    Write a python function to calculate the fibonacci sequence for the given number.\n    '''\n    return fib_helper(num)\n    \ndef fib_helper(num):\n    '''\n    Write a recursive python function to calculate the fibonacci sequence for the given number.\n    '''\n    if num == 1:\n        return 0\n    if num == 2:\n        return 1\n    # calculate the fibonacci sequence\n    return fib_helper(num - 1) + fib_helper(num - 2)\n    \ndef fib_iter(num):\n    '''\n    Write a python function to calculate the fibonacci sequence for the given number.\n    '''\n    # create an array for the fibonacci sequence\n    fib = [0, 1]\n    for i in range(2, num + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[num]\n    \ndef is_power_of(num, base):\n    '''\n    Write a python function to check if the given number is a power of a given base.\n    '''\n    return is_power_of_helper(num, base)\n    \ndef is_power_of_helper(num, base):\n    '''\n    Write a recursive python function to check if the given number is a power of a given base.\n    '''\n    # base case\n    if num == 1:\n        return True\n    # compare the first and last digit\n    if num % 10 == base:\n        return is_power_of_helper(num // 10, base)\n    else:\n        return False\n    \ndef reverse_int(num):\n    '''\n    Write a python function to reverse the given number.\n    '''\n    return reverse_int_helper(num)\n    \ndef reverse_int_helper(num):\n    '''\n    Write a recursive python function to reverse the given number.\n    '''\n    # base case\n    if num < 10:\n        return num\n    # get the last digit\n    last_digit = num % 10\n    # get the next to the last digit\n    next_last = (num - last_digit) // 10\n    # return the reversed number\n    return reverse_int_helper(next_last) * 10 + last_digit\n    \ndef reverse_str(string):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    return reverse_str_helper(string)\n    \ndef reverse_str_helper(string):\n    '''\n    Write a recursive python function to reverse the given string.\n    '''\n    if len(string) == 0:\n        return ''\n    return reverse_str_helper(string[1:]) + string[0]\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check if the given two strings are anagrams.\n    '''\n    return is_anagram_helper(str1, str2)\n    \ndef is_anagram_helper(str1, str2):\n    '''\n    Write a recursive python function to check if the given two strings are anagrams.\n    '''\n    # base case\n    if len(str1) == 0 and len(str2) == 0:\n        return True\n    # compare the first and last digit\n    if len(str1)!= len(str2):\n        return False\n    if str1[0] == str2[0]:\n        return is_anagram_helper(str1[1:], str2[1:])\n    else:\n        return False\n    \ndef is_anagram_map(str1, str2):\n    '''\n    Write a python function to check if the given two strings are anagrams.\n    '''\n    return is_anagram_map_helper(str1, str2)\n    \ndef is_anagram_map_helper(str1, str2):\n    '''\n    Write a recursive python function to check if the given two strings are anagrams.\n    '''\n    # create a map for the first string\n    str1_map = {}\n    for char in str1:\n        if char in str1_map:\n            str1_map[char] += 1\n        else:\n            str1_map[char] = 1\n    # create a map for the second string\n    str2_map = {}\n    for char in str2:\n        if char in str2_map:\n            str2_map[char] += 1\n        else:\n            str2_map[char] = 1\n    # check if the two maps are the same\n    if str1_map == str2_map:\n        return True\n    return False\n    \ndef is_power_of_map(num, base):\n    '''\n    Write a python function to check if the given number is a power of a given base.\n    '''\n    return is_power_of_map_helper(num, base)\n    \ndef is_power_of_map_helper(num, base):\n    '''\n    Write a recursive python function to check if the given number is a power of a given base.\n    '''\n    # create a map for the given number\n    num_map = {}\n    # create a map for the base\n    base_map = {}\n    for char in str(num):\n        if char in num_map:\n            num_map[char] += 1\n        else:\n            num_map[char] = 1\n        if char in base_map:\n            base_map[char] += 1\n        else:\n            base_map[char] = 1",
        "num_ids": 109
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for i in lst:\n        if i is True:\n            cnt += 1\n    return cnt\n",
        "num_ids": 34
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    ctr = 0\n    for i in lst:\n        if i == True:\n            ctr += 1\n    return ctr\n",
        "num_ids": 32
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # your code here\n    return len([i for i in lst if i == True])\n",
        "num_ids": 24
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len(list(filter(lambda x: x == True, lst)))\n",
        "num_ids": 21
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(1 for i in lst if i == True)\n",
        "num_ids": 18
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list, test_tup)\n    return (test_list.append(test_tup))\n",
        "num_ids": 30
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # TODO: Implement Function\n    return_tup = ()\n    for tup in test_tup:\n        return_tup = return_tup + (tup, )\n    return return_tup + test_list\n",
        "num_ids": 57
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return list(test_list) + list(test_tup)\n",
        "num_ids": 19
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(test_list) + test_tup\n",
        "num_ids": 16
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Type your code here\n    for ele in test_list:\n        test_tup = test_tup + (ele,)\n    return test_tup\n",
        "num_ids": 40
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Insert the given list to the given tuples\n    # It returns a new list which contains tuples and list\n    return [test_list, test_tup]\n",
        "num_ids": 41
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append('a')\n    test_tup[0].append('b')\n    \n    return None\n",
        "num_ids": 31
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list)\n    print(test_tup)\n    list_tup = test_tup + (test_list,)\n    print(list_tup)\n    return\n",
        "num_ids": 48
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Solution 1:\n    test_list.append(test_tup)\n",
        "num_ids": 21
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if not num1: return num2\n    if not num2: return num1\n    if not num3: return num1\n    index_1, index_2, index_3 = 0,0,0\n    heap = []\n    result = []\n    while index_1 < len(num1) and index_2 < len(num2) and index_3 < len(num3):\n        heapq.heappush(heap, (min(num1[index_1],num2[index_2],num3[index_3]), 1))\n        if heap[0][1] == 1:\n            result.append(heapq.heappop(heap)[0])\n            index_1 += 1\n            index_2 += 1\n            index_3 += 1\n        elif heap[0][1] == 2:\n            heapq.heappush(heap,(num1[index_1],2))\n            index_1 += 1\n        elif heap[0][1] == 3:\n            heapq.heappush(heap,(num2[index_2],3))\n            index_2 += 1\n        elif heap[0][1] == 4:\n            heapq.heappush(heap,(num3[index_3],4))\n            index_3 += 1\n    return result\n",
        "num_ids": 318
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            heapq.heappush(num1,num2.pop(0))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            heapq.heappush(num2,num1.pop(0))\n        else:\n            heapq.heappush(num3,num1.pop(0))\n    if len(num2) > 0 and len(num3) > 0:\n        while len(num2) > 0:\n            heapq.heappush(num1,num2.pop(0))\n        while len(num3) > 0:\n            heapq.heappush(num1,num3.pop(0))\n    elif len(num1) > 0 and len(num3) > 0:\n        while len(num1) > 0:\n            heapq.heappush(num2,num1.pop(0))\n        while len(num3) > 0:\n            heapq.heappush(num2,num3.pop(0))\n    elif len(num2) > 0 and len(num3) > 0:\n        while len(num2) > 0:\n            heapq.heappush(num3,num2.pop(0))\n        while len(num3) > 0:\n            heapq.heappush(num3,num1.pop(0))\n    else:\n        pass\n    return num1\n",
        "num_ids": 442
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=num1\n    list2=num2\n    list3=num3\n    list_1=sorted(list1)\n    list_2=sorted(list2)\n    list_3=sorted(list3)\n    list_1.extend(list_2)\n    list_1.extend(list_3)\n    return list_1\ndef count_number_of_inversions(list1,list2,list3):\n    '''\n    Write a function that takes three sorted lists as parameters, and returns the number of inversions between the three lists.\n    '''\n    list_1=list1\n    list_2=list2\n    list_3=list3\n    list_1.extend(list_2)\n    list_1.extend(list_3)\n    len_list_1=len(list_1)\n    # print(list_1)\n    counter_1=0\n    for i in range(len_list_1):\n        for j in range(i+1,len_list_1):\n            if(list_1[i]>list_1[j]):\n                counter_1+=1\n    # print(counter_1)\n    return counter_1\ndef rearrange_digits(input_list):\n    '''\n    Rearrange Array Elements so as to form two number such that their sum is maximum.\n    '''\n    input_list=input_list\n    input_list.sort()\n    # print(input_list)\n    len_input_list=len(input_list)\n    # print(len_input_list)\n    list_1=[]\n    list_2=[]\n    i=0\n    while(len_input_list>1):\n        # print(input_list[i],input_list[len_input_list-1])\n        list_1.append(input_list[i])\n        list_2.append(input_list[len_input_list-1])\n        del input_list[i]\n        del input_list[len_input_list-1]\n        # print(input_list)\n        len_input_list=len(input_list)\n        # print(len_input_list)\n    # print(input_list)\n    list_1.append(input_list[0])\n    list_2.append(input_list[1])\n    # print(list_1,list_2)\n    output_list=[0,0]\n    output_list[0]=sum(list_1)\n    output_list[1]=sum(list_2)\n    return output_list\ndef reverse_digits(input_list):\n    '''\n    You are given a list of integers. Write a function that returns the largest product that can be made by multiplying any three integers in the list.\n    '''\n    input_list=input_list\n    input_list.sort()\n    # print(input_list)\n    len_input_list=len(input_list)\n    list_1=[]\n    list_2=[]\n    list_3=[]\n    i=0\n    while(len_input_list>2):\n        list_1.append(input_list[i])\n        list_2.append(input_list[len_input_list-1])\n        list_3.append(input_list[len_input_list-2])\n        del input_list[i]\n        del input_list[len_input_list-1]\n        del input_list[len_input_list-2]\n        len_input_list=len(input_list)\n    list_1.append(input_list[0])\n    list_2.append(input_list[1])\n    list_3.append(input_list[2])\n    output_list=[0,0,0]\n    output_list[0]=list_1[0]*list_1[1]*list_1[2]\n    output_list[1]=list_2[0]*list_2[1]*list_2[2]\n    output_list[2]=list_3[0]*list_3[1]*list_3[2]\n    return max(output_list)\ndef k_distinct_integers(input_list,k):\n    '''\n    You are given a list of integers. Write a function that returns the largest sum of \n    non-adjacent numbers. Numbers can be 0 or negative.\n    '''\n    input_list=input_list\n    input_list.sort()\n    # print(input_list)\n    len_input_list=len(input_list)\n    list_1=[]\n    list_2=[]\n    list_3=[]\n    i=0\n    while(len_input_list>1):\n        list_1.append(input_list[i])\n        list_2.append(input_list[len_input_list-1])\n        list_3.append(input_list[len_input_list-2])\n        del input_list[i]\n        del input_list[len_input_list-1]\n        del input_list[len_input_list-2]\n        len_input_list=len(input_list)\n    list_1.append(input_list[0])\n    list_2.append(input_list[1])\n    # print(list_1,list_2)\n    output_list=[0,0]\n    output_list[0]=sum(list_1)\n    output_list[1]=sum(list_2)\n    return max(output_list)\ndef check_sublist(list1,list2):\n    '''\n    Write a function that checks if one list is a subset of another list.\n    '''\n    list1=list1\n    list2=list2\n    for i in list1:\n        if(i not in list2):\n            return False\n    return True\ndef find_missing_number(list1):\n    '''\n    You are given a list of n-1 integers and these integers are in the range of 1 to n. \n    There are no duplicates in the list. One of the integers is missing in the list. \n    Write an efficient code to find the missing integer.\n    '''\n    list1=list1\n    len_list1=len(list1)\n    list_1=[]\n    list_2=[]\n    list_3=[]\n    i=0\n    while(len_list1>1):\n        list_1.append(list1[i])\n        list_2.append(list1[len_list1-1])\n        list_3.append(list1[len_list1-2])\n        del list1[i]\n        del list1[len_list1-1]\n        del list1[len_list1-2]\n        len_list1=len(list1)\n    list_1.append(list1[0])\n    list_2.append(list1[1])\n    list_3.append(list1[2])\n    output_list=[0,0,0]\n    for i in range(len(list_1)):\n        output_list[list_1[i]-1]+=1\n    for i in range(len(list_2)):\n        output_list[list_2[i]-1]+=1\n    for i in range(len(list_3)):\n        output_list[list_3[i]-1]+=1\n    for i in range(len(output_list)):\n        if(output_list[i]==0):\n            return i+1\ndef find_missing_number_v2(list1):\n    '''\n    You are given a list of n-1 integers and these integers are in the range of 1 to n. \n    There are no duplicates in the list. One of the integers is missing in the list. \n    Write an efficient code to find the missing integer.\n    '''\n    list1=list1\n    len_list1=len(list1)\n    list_1=[]\n    list_2=[]\n    list_3=[]\n    i=0\n    while(len_list1>1):\n        list_1.append(list1[i])\n        list_2.append(list1[len_list1-1])\n        list_3.append(list1[len_list1-2]",
        "num_ids": 106
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = []\n    i = j = k = 0\n    while(i < len(num1) and j < len(num2) and k < len(num3)):\n        if(num1[i] < num2[j] and num1[i] < num3[k]):\n            new_list.append(num1[i])\n            i += 1\n        elif(num2[j] < num3[k]):\n            new_list.append(num2[j])\n            j += 1\n        else:\n            new_list.append(num3[k])\n            k += 1\n    while(i < len(num1)):\n        new_list.append(num1[i])\n        i += 1\n    while(j < len(num2)):\n        new_list.append(num2[j])\n        j += 1\n    while(k < len(num3)):\n        new_list.append(num3[k])\n        k += 1\n    return new_list\n",
        "num_ids": 245
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 is None:\n        return num2\n    elif num2 is None:\n        return num3\n    elif num3 is None:\n        return num1\n    else:\n        if num1 < num2 and num1 < num3:\n            return num1 + merge_sorted_list(num2,num3,None)\n        elif num2 < num1 and num2 < num3:\n            return num2 + merge_sorted_list(num1,num3,None)\n        else:\n            return num3 + merge_sorted_list(num1,num2,None)\n",
        "num_ids": 145
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            j += 1\n        else:\n            k += 1\n    return num1 + num2 + num3\n",
        "num_ids": 120
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #naive method\n    # merge = []\n    # for i in range(len(num1)):\n    #     for j in range(len(num2)):\n    #         if num1[i]<num2[j]:\n    #             merge.append(num1[i])\n    #             break\n    #     for j in range(len(num3)):\n    #         if num1[i]<num3[j]:\n    #             merge.append(num1[i])\n    #             break\n    #     for j in range(len(num2)):\n    #         if num2[j]<num3[j]:\n    #             merge.append(num2[j])\n    #             break\n    #     for j in range(len(num1)):\n    #         if num2[j]<num3[j]:\n    #             merge.append(num1[i])\n    #             break\n    # print(merge)\n",
        "num_ids": 236
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i,j,k = 0,0,0\n",
        "num_ids": 20
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num_list = [num1,num2,num3]\n    for i in num_list:\n        for j in range(len(i)):\n            if i[j] == None:\n                i.pop(j)\n    print(num_list)\n    heapq.heapify(num_list)\n    print(num_list)\n    result_list = []\n    while num_list:\n        a = heapq.heappop(num_list)\n        for i in a:\n            if i == None:\n                continue\n            else:\n                result_list.append(i)\n    print(result_list)\n",
        "num_ids": 155
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list = [num1,num2,num3]\n    newlist = []\n    for num in list:\n        if num == []:\n            continue\n        else:\n            newlist.append(num)\n    newlist.sort()\n    return newlist\n",
        "num_ids": 64
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if s[i] == \"0\":\n            count += 1\n    return count\n    # return s.count('0')\n",
        "num_ids": 46
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return n % 2\n",
        "num_ids": 8
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # code goes here\n    str = '0b'\n    #str = str*n\n    rotation = '0b'\n    for i in range(0,n):\n        rotation += '0'\n    for i in range(0,len(s)):\n        if s[i]=='1':\n            rotation += '1'\n        else:\n            rotation += '0'\n    rotation = int(rotation,2)\n    return rotation\n",
        "num_ids": 113
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def find_count(s, n):\n        count = 0\n        for i in s:\n            if i == \"1\":\n                count += 1\n        return count\n    \n    s = s.replace('0','')\n    s = s.replace('1','')\n    s = s.split()\n    #print(s)\n    s = [int(x) for x in s]\n    \n    if n < 0:\n        n = abs(n)\n        for i in range(n):\n            s = [s[-1]] + s[:-1]\n    else:\n        for i in range(n):\n            s = [s[-1]] + s[:-1]\n    #print(s)\n    return find_count(s, n)\n",
        "num_ids": 186
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Use if statement to check if the length of the string is even or odd and set the variable to zero or 1.\n    if n % 2 == 0:\n        ans = 0\n    else:\n        ans = 1\n    # Looping through the string and check the value of the binary string is odd or even after rotating.\n    for i in range(0,len(s)):\n        if s[i] == '0':\n            if (i+1) % 2 == 0:\n                ans = ans + 1\n        elif s[i] == '1':\n            if (i+1) % 2 == 0:\n                ans = ans + 0\n        elif s[i] == '1':\n            if (i+1) % 2 == 1:\n                ans = ans + 0\n        elif s[i] == '0':\n            if (i+1) % 2 == 1:\n                ans = ans + 1\n    return ans\n",
        "num_ids": 220
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Creating a list of binary numbers\n    binary_string = []\n    while n:\n        n,remainder = divmod(n-1,2)\n        binary_string.append(str(remainder))\n",
        "num_ids": 54
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    for i in range(n):\n        if int(s,2)%2==1:\n            return int(s,2)\n        else:\n            s = s[1:] + s[0]\n    return 0\n",
        "num_ids": 55
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def even(s):\n        return '0' if len(s) % 2 == 0 else '1'\n",
        "num_ids": 28
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    k=[]\n    a=s[::-1]\n    count=0\n    for i in range(n):\n        for j in range(i+1):\n            if(a[j]=='1'):\n                count=count+1\n        k.append(count)\n        count=0\n    print(k[::-1])\ns=input()\nn=int(input())\nodd_Equivalent(s,n)\n",
        "num_ids": 107
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    num=0\n    for i in range(n):\n        a=str(s[i:]+s[:i])\n        for j in a:\n            if int(j)%2!=0:\n                num=num+1\n    return num\n",
        "num_ids": 63
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def check_lists(list1, list2):\n        for i in list2:\n            if i in list1:\n                return True\n        return False\n    final_list = []\n    for i in nestedlist:\n        if check_lists(final_list, i):\n            final_list.append(i)\n    return final_list\n",
        "num_ids": 83
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return_list = []\n    for i in nestedlist:\n        for j in i:\n            return_list.append(j)\n    return_list = list(set(return_list))\n    return return_list\n",
        "num_ids": 54
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return None\n    # Base case\n    first_item = nestedlist[0]\n    if isinstance(first_item, list):\n        return common_in_nested_lists(first_item)\n    # Recursive call to check the rest of the list\n    rest_list = nestedlist[1:]\n    if not rest_list:\n        return None\n    common_list = common_in_nested_lists(rest_list)\n    if common_list is None:\n        return None\n    else:\n        return [first_item] + common_list\n",
        "num_ids": 141
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def get_sublist(x):\n        return x[1]\n    \n    def get_common_ele(x, y):\n        z = set(x)\n        return list(z.intersection(set(y)))\n    \n    flat_list = [x for y in nestedlist for x in y]\n    sorted_flat_list = sorted(flat_list)\n    result = []\n    for i in range(len(sorted_flat_list) - 1):\n        if i == 0:\n            result = get_common_ele(sorted_flat_list[i], sorted_flat_list[i+1])\n        elif i == len(sorted_flat_list) - 1:\n            result = get_common_ele(result, sorted_flat_list[i])\n        else:\n            result = get_common_ele(result, sorted_flat_list[i])\n    return result\n",
        "num_ids": 217
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if nestedlist == []:\n        return []\n    else:\n        if isinstance(nestedlist[0], list):\n            return common_in_nested_lists(nestedlist[0]) + common_in_nested_lists(nestedlist[1:])\n        else:\n            return [nestedlist[0]] + common_in_nested_lists(nestedlist[1:])\n",
        "num_ids": 98
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    new_list = []\n    for i in nestedlist:\n        for j in i:\n            if j not in new_list:\n                new_list.append(j)\n            else:\n                new_list.remove(j)\n    return new_list\n",
        "num_ids": 64
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result_list = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in result_list:\n                result_list.append(item)\n    return result_list\n",
        "num_ids": 52
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # code here\n    common = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i==j:\n                common.append(i)\n    return common\n",
        "num_ids": 47
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    x = []\n    for i in nestedlist:\n        for j in i:\n            if j not in x:\n                x.append(j)\n    return x\n",
        "num_ids": 42
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # first solution is super easy...\n    return list(reduce(lambda a,b: set(a) & set(b), nestedlist))\n    # second solution is a little more complicated - but still super easy...\n    # return set.intersection(*map(set, nestedlist))\n",
        "num_ids": 68
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # for i in range(len(text)):\n    #     if not text[i].isdigit() and text[i]!= '-':\n    #         return False\n    # return True\n",
        "num_ids": 50
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "num_ids": 30
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    text = text.strip()\n    return text.isdigit()\n",
        "num_ids": 19
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_check = []\n    for dict1 in list1:\n        if len(dict1) == 0:\n            empty_check.append(True)\n        else:\n            empty_check.append(False)\n    if False in empty_check:\n        return False\n    else:\n        return True\n",
        "num_ids": 74
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    is_empty = True\n    for i in list1:\n        if i:\n            is_empty = False\n            break\n    return is_empty\n",
        "num_ids": 38
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if bool(x):\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if i:\n            empty = False\n    return empty\n",
        "num_ids": 29
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return 'all empty'\n    else:\n        return 'not all empty'\n    \nlist1=[{},{},{}]\n",
        "num_ids": 41
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_list = []\n    if not list1:\n        return True\n    else:\n        for item in list1:\n            if item:\n                return False\n        return True\n",
        "num_ids": 45
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list2 = []\n    for dict1 in list1:\n        for key,value in dict1.items():\n            if value == 0:\n                list2.append(dict1)\n    return list2\n",
        "num_ids": 51
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    is_empty=[]\n    for list_temp in list1:\n        is_empty.append(all(value==0 for value in list_temp.values()))\n    return is_empty\n",
        "num_ids": 48
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_str = ''\n    for num in nums:\n        num_str += str(num)\n    num_str = num_str.lstrip('0')\n    return int(num_str) if num_str else 0\n",
        "num_ids": 57
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return functools.reduce(lambda x, y: x*10 + y, nums)\n",
        "num_ids": 26
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if nums is None or len(nums)==0:\n        return 0\n    res = 0\n    for i in nums:\n        res = res*10 + i\n    return res\n",
        "num_ids": 48
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = \"\"\n    for i in nums:\n        num += str(i)\n    return int(num)\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(n) for n in nums))\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(n) for n in nums))\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n    \ndef tuple_to_int2(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n    ",
        "num_ids": 18
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not nums: return 0\n    elif len(nums) == 1: return nums[0]\n    elif len(nums) == 2: return nums[0] * 10 + nums[1]\n    else:\n        n = len(nums)\n        return nums[0] * (10 ** (n - 1)) + tuple_to_int(nums[1:])\n",
        "num_ids": 98
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(num) for num in nums))\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not isinstance(nums, tuple) or len(nums) <= 0 or any(i<=0 for i in nums):\n        return 0\n    nums = list(nums)\n    return int(''.join(list(map(str, nums))))\n",
        "num_ids": 66
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list\n",
        "num_ids": 72
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(x) for x in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # inp = [1,2,3,4,5,6]\n    # out = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\n    test_list = [[1,2,3,4,5,6],\n                [1,2,3,4],\n                [1,2,3,4.0],\n                ['1','2','3','4.0'],\n                ['1','2','3','4.0'],\n                ]\n    return [list(map(float,i)) for i in test_list]\n",
        "num_ids": 144
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [list(map(float, l)) for l in test_list]\n    return test_list\n",
        "num_ids": 30
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    #trying a for loop\n    #iterate over the list\n    for i in test_list:\n        for j in i:\n            try:\n                j = float(j)\n            except:\n                pass\n    return test_list\n",
        "num_ids": 59
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for element in test_list:\n        try:\n            new_list.append(float(element))\n        except:\n            pass\n    return new_list\n",
        "num_ids": 47
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_float = []\n    for list_element in test_list:\n        try:\n            test_list_float.append(float(list_element))\n        except ValueError:\n            pass\n    return test_list_float\n",
        "num_ids": 59
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [list(map(float, list(x))) for x in test_list]\n",
        "num_ids": 23
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_strings = string.split()\n    return list_strings\n",
        "num_ids": 18
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \") \n",
        "num_ids": 12
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # write your code here\n    return string.split(' ')\n",
        "num_ids": 18
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    li=string.split()\n    return li\n",
        "num_ids": 14
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # return list(string.split(\" \"))\n    return string.split(\" \")\n",
        "num_ids": 23
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #Sorting the array to reduce to O(n) time complexity\n    arr = sorted(arr)\n",
        "num_ids": 26
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    sorted_arr = sorted(arr)\n    for i in range(0, len(sorted_arr)):\n        if i == 0:\n            continue\n        if sorted_arr[i]!= sorted_arr[i-1]:\n            return sorted_arr[i]\n    return sorted_arr[0]\n",
        "num_ids": 77
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n",
        "num_ids": 54
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if(arr[i]!=arr[i+1]):\n            return arr[i]\n",
        "num_ids": 39
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    for i in range(0,len(arr)):\n        if arr[i]==arr[i+1]:\n            return arr[i]\n    return -1\n",
        "num_ids": 48
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    prev_item = None\n    unique_item = None\n    for item in arr:\n        if prev_item is None:\n            prev_item = item\n            unique_item = item\n        if prev_item == item:\n            unique_item = prev_item\n        else:\n            prev_item = item\n    return unique_item\n",
        "num_ids": 81
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i, j = 0, len(arr)-1\n    while i < j:\n        mid = (i + j) // 2\n        if arr[mid] == arr[mid+1]:\n            i = mid + 2\n        else:\n            j = mid\n",
        "num_ids": 63
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    num1 = 0\n    num2 = 0\n    for i in range(len(arr)):\n        if arr[i] == num1:\n            num2 = num1\n        else:\n            num1 = arr[i]\n    return num2\n",
        "num_ids": 62
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # The unique elements will occur only once.\n    unique_elements = []\n    # For each element, if it is already in the unique_elements list, then it is repeated.\n    # So, remove it from the unique_elements list.\n    # We will be left with only the unique elements.\n    for i in range(len(arr)):\n        if arr[i] in unique_elements:\n            unique_elements.remove(arr[i])\n        else:\n            unique_elements.append(arr[i])\n    return unique_elements[0]\n",
        "num_ids": 138
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    while i < len(arr)-1:\n        if arr[i] == arr[i+1]:\n            i += 2\n        else:\n            return arr[i]\n    return arr[-1]\n",
        "num_ids": 56
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    return None\n",
        "num_ids": 8
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in list1:\n        for j in list1:\n            if i == j:\n                pass\n            else:\n                prod = (i[0] * j[0]) * (i[1] * j[1])\n                if abs(prod) > max_prod:\n                    max_prod = prod\n    return max_prod\n",
        "num_ids": 95
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return 0\n    elif len(list1) == 2:\n        return list1[0][0]*list1[1][0]\n    else:\n        max_tuple = []\n        for i in range(0,len(list1) - 1):\n            for j in range(i + 1, len(list1)):\n                if i!= j:\n                    max_tuple.append(list1[i][0]*list1[j][0])\n        return max(max_tuple)\n",
        "num_ids": 135
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            result.append(list1[i]*list1[j])\n    return(max(result))\n",
        "num_ids": 62
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product_list = []\n    for i in range(0,len(list1)):\n        for j in range(i+1, len(list1)):\n            product_list.append(list1[i]*list1[j])\n    return max(product_list)\n",
        "num_ids": 69
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    nums = []\n    for x in list1:\n        for y in x:\n            nums.append(y)\n    nums.sort()\n    nums_len = len(nums)\n    max_product = 0\n    for i in range(nums_len):\n        if i+1 < nums_len:\n            if abs(nums[i]*nums[i+1]) > max_product:\n                max_product = abs(nums[i]*nums[i+1])\n    return max_product\n    \ndef max_product_list(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of numbers within a given list.\n    '''\n    nums = []\n    for x in list1:\n        for y in x:\n            nums.append(y)\n    nums.sort()\n    nums_len = len(nums)\n    max_product = 0\n    for i in range(nums_len):\n        if i+1 < nums_len:\n            if abs(nums[i]-nums[i+1]) > max_product:\n                max_product = abs(nums[i]-nums[i+1])\n    return max_product\n",
        "num_ids": 130
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            product = list1[i] * list1[j]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product\n",
        "num_ids": 84
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        if len(list1[i])!= 2:\n            return None\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if abs(list1[i][j]) > max:\n                max = abs(list1[i][j])\n    return max\n",
        "num_ids": 98
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort(key = lambda x: x[0])\n    result = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            result = max(result,list1[i][0]*list1[i+1][1])\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return False\n    else:\n        max_product = -1\n        for i in range(len(list1)):\n            for j in range(i + 1, len(list1)):\n                if list1[i][0] * list1[j][1] > max_product:\n                    max_product = list1[i][0] * list1[j][1]\n        return max_product\n",
        "num_ids": 109
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable_number(number):\n        '''\n        A number d is defined as the sum of the proper divisors of a number a,\n        excluding the number a itself. Proper divisors of a number a are numbers\n        greater than a that divide evenly into a.\n        '''\n        sum_divisors = sum([divisor for divisor in range(1,number) if number % divisor == 0])\n        sum_divisors_2 = sum([divisor for divisor in range(1, sum_divisors) if sum_divisors % divisor == 0])\n        return sum_divisors == number and sum_divisors_2 == number\n    \n    def get_amicable_numbers(limit):\n        amicable_numbers = []\n        for number in range(1, limit):\n            if number < 1000:\n                continue\n            if number % 2 == 0:\n                number_2 = number // 2\n            else:\n                number_2 = (number // 2) + 1\n            if is_amicable_number(number):\n                if is_amicable_number(number_2):\n                    amicable_numbers.append(number)\n        return amicable_numbers\n        \n    amicable_numbers = get_amicable_numbers(limit)\n    return sum(amicable_numbers)\n",
        "num_ids": 255
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(a + b for a in range(1, limit) for b in range(a + 1, limit) if amicable_number(a, b))\n",
        "num_ids": 40
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_of_divisors(n):\n        result = 0\n        for i in range(1, n):\n            if n % i == 0:\n                result += i\n        return result\n",
        "num_ids": 49
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable_number(n):\n        divisors = list(set(sum_divisors(n) - {n}))\n        return n == sum(divisors) and len(divisors) > 1\n",
        "num_ids": 57
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    if limit < 1:\n        raise Exception('Input a number greater than 1')\n    # Sum of all amicable numbers from 1 to limit\n    total = 0\n    for number in range(1, limit + 1):\n        if number == sum_of_divisors(number) and number!= sum_of_divisors(sum_of_divisors(number)):\n            total += number\n    return total\n",
        "num_ids": 99
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit):\n        if i not in dic and sum_of_divisors(i) == sum_of_divisors(sum_of_divisors(i)):\n            dic[i] = sum_of_divisors(i)\n            total += i\n    return total\n",
        "num_ids": 84
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a set of all amicable numbers up to limit\n    amicable_numbers = set(amicable_numbers_from_1_to(limit))\n    return sum(amicable_numbers)\n",
        "num_ids": 51
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    a = amicable_numbers(limit)\n    return sum(a)\n",
        "num_ids": 21
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    s = 0\n    for i in range(1, limit):\n        if i == sum_of_divisors(sum_of_divisors(i)) and i!= sum_of_divisors(i):\n            s += i\n    return s\n",
        "num_ids": 64
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1,limit):\n        if i == sum_of_proper_divisors(sum_of_proper_divisors(i)) and i!= sum_of_proper_divisors(i):\n            total += i\n    return total\n",
        "num_ids": 73
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #\n    z1 = complex(a,b)\n    z2 = complex(0,0)\n    print(z1)\n    print(z2)\n    if z1 == 0:\n        return 0\n    if z1.real == 0 and z1.imag == 0:\n        return 0\n    z1 = z1 - z2\n    angle = cmath.phase(z1)\n    angle = cmath.degrees(angle)\n    #angle = math.atan(z1.imag/z1.real)\n    #angle = math.atan(z1.imag/z1.real)*180/math.pi\n    return angle\n",
        "num_ids": 155
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a/b)\n",
        "num_ids": 14
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return(cmath.phase(a/b))\n",
        "num_ids": 15
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0 and b == 0:\n        return(0)\n    else:\n        return(cmath.phase(complex(a,b)))\n",
        "num_ids": 38
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n",
        "num_ids": 17
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    theta = cmath.phase(complex(a,b))\n    return theta\ndef complex_number(a,b):\n    '''\n    Write a function to convert a real number to a complex number.\n    '''\n    complex_number = a + b * 1j\n    return complex_number\ndef complex_multiply(a,b):\n    '''\n    Write a function to return the result of complex number a multiplied by complex number b.\n    '''\n    complex_number = a * b\n    return complex_number\ndef complex_division(a,b):\n    '''\n    Write a function to return the result of complex number a divided by complex number b.\n    '''\n    complex_number = a / b\n    return complex_number\ndef complex_add(a,b):\n    '''\n    Write a function to add complex numbers.\n    '''\n    complex_number = a + b\n    return complex_number\ndef complex_subtract(a,b):\n    '''\n    Write a function to subtract complex numbers.\n    '''\n    complex_number = a - b\n    return complex_number\ndef complex_power(a,b):\n    '''\n    Write a function to compute the result of complex number a to the power of complex number b.\n    '''\n    complex_number = a ** b\n    return complex_number\ndef display_complex(a,b):\n    '''\n    Write a function to display the complex number.\n    '''\n    print(complex(a,b))\ndef complex_multiply_by_real(a,b):\n    '''\n    Write a function to multiply a complex number by a real number.\n    '''\n    complex_number = a * b\n    return complex_number\ndef complex_division_by_real(a,b):\n    '''\n    Write a function to divide a complex number by a real number.\n    '''\n    complex_number = a / b\n    return complex_number\ndef complex_add_by_real(a,b):\n    '''\n    Write a function to add a complex number by a real number.\n    '''\n    complex_number = a + b\n    return complex_number\ndef complex_subtract_by_real(a,b):\n    '''\n    Write a function to subtract a complex number by a real number.\n    '''\n    complex_number = a - b\n    return complex_number\ndef complex_power_by_real(a,b):\n    '''\n    Write a function to compute the result of a complex number to the power of a real number.\n    '''\n    complex_number = a ** b\n    return complex_number\ndef complex_multiply_by_imaginary(a,b):\n    '''\n    Write a function to multiply a complex number by a imaginary number.\n    '''\n    complex_number = a * b\n    return complex_number\ndef complex_division_by_imaginary(a,b):\n    '''\n    Write a function to divide a complex number by a imaginary number.\n    '''\n    complex_number = a / b\n    return complex_number\ndef complex_add_by_imaginary(a,b):\n    '''\n    Write a function to add a complex number by a imaginary number.\n    '''\n    complex_number = a + b\n    return complex_number\ndef complex_subtract_by_imaginary(a,b):\n    '''\n    Write a function to subtract a complex number by a imaginary number.\n    '''\n    complex_number = a - b\n    return complex_number\ndef complex_power_by_imaginary(a,b):\n    '''\n    Write a function to compute the result of a complex number to the power of a imaginary number.\n    '''\n    complex_number = a ** b\n    return complex_number\ndef complex_multiply_by_complex(a,b):\n    '''\n    Write a function to multiply a complex number by another complex number.\n    '''\n    complex_number = a * b\n    return complex_number\ndef complex_division_by_complex(a,b):\n    '''\n    Write a function to divide a complex number by another complex number.\n    '''\n    complex_number = a / b\n    return complex_number\ndef complex_add_by_complex(a,b):\n    '''\n    Write a function to add a complex number by another complex number.\n    '''\n    complex_number = a + b\n    return complex_number\ndef complex_subtract_by_complex(a,b):\n    '''\n    Write a function to subtract a complex number by another complex number.\n    '''\n    complex_number = a - b\n    return complex_number\ndef complex_power_by_complex(a,b):\n    '''\n    Write a function to compute the result of a complex number to the power of another complex number.\n    '''\n    complex_number = a ** b\n    return complex_number\ndef complex_add_two_complex_numbers(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    complex_number = a + b\n    return complex_number\ndef complex_subtract_two_complex_numbers(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    complex_number = a - b\n    return complex_number\ndef complex_multiply_two_complex_numbers(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    complex_number = a * b\n    return complex_number\ndef complex_divide_two_complex_numbers(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    complex_number = a / b\n    return complex_number\ndef complex_power_two_complex_numbers(a,b):\n    '''\n    Write a function to compute the result of a complex number to the power of a complex number.\n    '''\n    complex_number = a ** b\n    return complex_number\ndef complex_conjugate(a):\n    '''\n    Write a function to return the conjugate of complex number.\n    '''\n    complex_number = a.conjugate()\n    return complex_number\ndef complex_add_conjugate(a,b):\n    '''\n    Write a function to add the conjugate of complex number to another complex number.\n    '''\n    complex_number = a + b.conjugate()\n    return complex_number\ndef complex_add_two_conjugate_numbers(a,b):\n    '''\n    Write a function to add the conjugate of complex number to another complex number.\n    '''\n    complex_number = a + b.conjugate()\n    return complex_number\ndef complex_subtract_conjugate(a,b):\n    '''\n    Write a function to subtract the conjugate of complex number to another complex number.\n    '''\n    complex_number = a - b.conjugate()\n    return complex_number\ndef complex_subtract_two_conjugate_numbers(a,b):\n    '''\n    Write a function to subtract the conjugate of complex number to another complex number.\n    '''\n    complex_number = a - b.conjugate()\n    return complex_number\ndef complex_multiply_conjugate(a,b):\n    '''\n    Write a function to multiply the conjugate of complex number to another complex number.\n    '''\n    complex_number = a * b.conjugate()\n    return complex_number\ndef complex_multiply_two_conjugate_numbers(a,b):\n    '''\n    Write a function to multiply the conjugate of complex number to another complex number.\n    '''\n    complex_number = a * b.conjugate()\n    return complex_number\ndef complex_divide_conjugate(a,b):\n    '''\n    Write a function to divide the conjugate of complex number to another complex number.\n    '''\n    complex_number = a / b.conjugate()\n    return complex_number\ndef complex_divide_two_conjugate_numbers(a,b):\n    '''\n    Write a function to divide the conjugate of complex number to another complex number.\n    '''\n    complex_number = a / b.conjugate()\n    return complex_numbe",
        "num_ids": 22
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.phase(complex(a,b))*180/cmath.pi)\n",
        "num_ids": 25
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a,b=complex(a,b),complex(a,b)\n    print(cmath.polar(a))\n    print(cmath.polar(b))\n    x1,y1=cmath.polar(a)\n    x2,y2=cmath.polar(b)\n    print(cmath.phase(a))\n    print(cmath.phase(b))\n    print(cmath.phase(a)+cmath.phase(b))\n    print(cmath.log(a))\n    print(cmath.log(b))\n    print(cmath.log(a)+cmath.log(b))\n",
        "num_ids": 156
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a/b)\n",
        "num_ids": 14
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    real = a.real\n    imag = a.imag\n    angle = math.atan(imag/real)\n    if real < 0 and imag > 0:\n        angle += math.pi\n    elif real < 0 and imag < 0:\n        angle += math.pi\n    elif real > 0 and imag < 0:\n        angle += 2*math.pi\n    return angle\n",
        "num_ids": 90
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0 = 0\n    count1 = 0\n    maxdiff = 0\n    for i in string:\n        if i == \"0\":\n            count0 += 1\n        elif i == \"1\":\n            count1 += 1\n        if count0 == count1:\n            if maxdiff < count0 - count1:\n                maxdiff = count0 - count1\n        elif count0 > count1:\n            if maxdiff < count0 - count1:\n                maxdiff = count0 - count1\n        elif count1 > count0:\n            if maxdiff < count1 - count0:\n                maxdiff = count1 - count0\n    return maxdiff\n",
        "num_ids": 156
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return len(string.split('1')) - len(string.split('0'))\n",
        "num_ids": 24
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # String can't be empty\n    if string == \"\":\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # creating a dictionary to store the frequency of each digit\n    freq = {}\n    max_freq = 0 # initialize maximum frequency\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n        \n        # check if frequency is greater than maximum frequency\n        if freq[char] > max_freq:\n            max_freq = freq[char]\n    \n    return max_freq\n    \n    \ndef find_length_v2(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0 # initialize maximum difference\n    zero = 0 # stores the count of 0s\n    one = 0 # stores the count of 1s\n    \n    for char in string:\n        if char == '0':\n            zero += 1\n        else:\n            one += 1\n        \n        # calculate the difference between 0s and 1s\n        if zero > one:\n            diff = zero - one\n        else:\n            diff = one - zero\n        \n        # update max_diff\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n",
        "num_ids": 140
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #string = \"101110\"\n    max_diff = 0\n    curr_diff = 0\n    for i in range(len(string)):\n        curr_diff = (int(string[i])-0)\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n        else:\n            curr_diff = 0\n    return max_diff\n",
        "num_ids": 95
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    counter0 = 0\n    counter1 = 0\n    for i in range(len(string)):\n        if string[i] == \"1\":\n            counter0 += 1\n        if string[i] == \"0\":\n            counter1 += 1\n        if counter1 > counter0:\n            max_diff = max(max_diff, counter1 - counter0)\n    return max_diff\n",
        "num_ids": 100
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max([sum(s) for s in [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]])\n",
        "num_ids": 48
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    count = 0\n    prev_digit = None\n",
        "num_ids": 21
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # we will use a hash map to store the number of 1s and number of 0s\n    # so we can find the max difference between these values\n    ones = 0\n    zeros = 0\n    map = {}\n    \n    for i in string:\n        if i == '1':\n            ones += 1\n        else:\n            zeros += 1\n        # if we have seen the key before, we just update the value of the key\n        if map.has_key(ones - zeros):\n            current_diff = abs(ones - zeros)\n            map[ones - zeros] = max(map[ones - zeros], current_diff)\n        # otherwise we add the new value to the map\n        else:\n            map[ones - zeros] = current_diff\n    return map[max(map)]\n    \ndef min_max_transactions(transactions):\n    '''\n    You are given an array of integers, where each element represents the maximum number of steps that can be made forward from that element. Write a function to return the minimum number of jumps needed to reach the end of the array (starting from the first element). If an element is 0, then cannot move through that element.\n    '''\n    # we will use a max heap to keep track of the maximum number of steps we can take forward\n    # we also keep track of the steps that we have made so far\n    max_heap = []\n    steps_made = 0\n    for i in range(len(transactions)):\n        heappush(max_heap, transactions[i])\n        steps_made = max(steps_made, i + 1)\n        while max_heap and max_heap[0] <= i:\n            max_heap.pop(0)\n    return steps_made\n",
        "num_ids": 134
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x = 1\n    sum = 0\n    while(x <= a or x <= b):\n        if(a % x == 0 and b % x == 0):\n            sum = sum + x\n        x = x + 1\n    return sum\n",
        "num_ids": 58
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 1\n    for i in range(2, min(a,b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum = sum + i\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a,b):\n        if a==0:\n            return b\n        return gcd(b%a,a)\n    c=gcd(a,b)\n    return (a+b)//c\n",
        "num_ids": 56
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a+b\n",
        "num_ids": 8
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i=2\n    while i<=a and i<=b:\n        if a%i==0 and b%i==0:\n            return i\n        i+=1\n    return a+b\n",
        "num_ids": 50
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Write your function here\n    i = 1\n    divisors = []\n    while(i<=b):\n        if a%i==0 and b%i==0:\n            divisors.append(i)\n        i += 1\n    return(sum(divisors))\n",
        "num_ids": 70
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 1\n    sum = 0\n    while(i <= a and i <= b):\n        if a % i == 0 and b % i == 0:\n            sum += i\n        i += 1\n    return sum\n",
        "num_ids": 53
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    for i in range(1, min(a, b)+1):\n        if a%i==0 and b%i==0:\n            s=i\n    return s\n",
        "num_ids": 43
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 1 \n    sum = 1\n    while(i<=b):\n        if a%i==0 and b%i==0:\n            sum+=i\n        i+=1\n    return sum\ndef commonDivisor(a,b):\n    '''\n    Write a python function to find the common divisors of two given numbers.\n    '''\n    i = 1 \n    a = list(str(a))\n    b = list(str(b))\n    a.sort()\n    b.sort()\n    a = int(\"\".join(a))\n    b = int(\"\".join(b))\n    sum = 1\n    while(i<=b):\n        if a%i==0 and b%i==0:\n            sum+=i\n        i+=1\n    return sum\n",
        "num_ids": 105
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    assert isinstance(a,int) and isinstance(b,int) and a>=0 and b>=0, \"Numbers must be positive integers\"\n    return sum([i for i in range(1,min(a,b)+1) if a%i==0 and b%i==0])\ndef sum_digit(n):\n    '''\n    Write a python function to find the sum of the digits of the given number.\n    '''\n    assert isinstance(n,int) and n>=0, \"Number must be positive integer\"\n    return sum([int(i) for i in str(n)])\ndef multiplication(a,b): \n    '''\n    Write a python function to find the multiplication of the two given numbers.\n    '''\n    assert isinstance(a,int) and isinstance(b,int) and a>=0 and b>=0, \"Numbers must be positive integers\"\n    return a*b\ndef check_palindrome(n):\n    '''\n    Write a python function to check if the given number is a palindrome or not.\n    '''\n    assert isinstance(n,int) and n>=0, \"Number must be positive integer\"\n    return n == int(str(n)[::-1])\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    assert isinstance(n,int) and n>=0, \"Number must be positive integer\"\n    if n==0:\n        return 0\n    elif n==1 or n==2:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of the given number.\n    '''\n    assert isinstance(n,int) and n>=0, \"Number must be positive integer\"\n    if n==0:\n        return 1\n    return n*factorial(n-1)\ndef exponent(a,b):\n    '''\n    Write a python function to find the exponent of the given number a to the power b.\n    '''\n    assert isinstance(a,int) and isinstance(b,int) and a>=0 and b>=0, \"Numbers must be positive integers\"\n    return a**b\ndef reverse(s):\n    '''\n    Write a python function to find the reversed string.\n    '''\n    assert isinstance(s,str), \"Input must be a string\"\n    return s[::-1]\ndef palindrome(s):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    '''\n    assert isinstance(s,str), \"Input must be a string\"\n    return s == reverse(s)\ndef prime(n):\n    '''\n    Write a python function to check if the given number is a prime number or not.\n    '''\n    assert isinstance(n,int) and n>=0, \"Number must be positive integer\"\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef fibonacci_sum_squares(n):\n    '''\n    Write a python function to find the sum of the squares of the first n Fibonacci numbers.\n    '''\n    assert isinstance(n,int) and n>=0, \"Number must be positive integer\"\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    return (fibonacci(n-1)**2 + fibonacci(n-2)**2)\ndef fibonacci_sum_squares_naive(n):\n    '''\n    Write a python function to find the sum of the squares of the first n Fibonacci numbers.\n    '''\n    assert isinstance(n,int) and n>=0, \"Number must be positive integer\"\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    fib1 = 0\n    fib2 = 1\n    sum_of_squares = 0\n    for i in range(n):\n        fib1,fib2 = fib2,(fib1+fib2)\n        sum_of_squares += fib1**2\n    return sum_of_squares\ndef hcfnaive(a,b):\n    '''\n    Write a python function to find the hcf of the two given numbers.\n    '''\n    assert isinstance(a,int) and isinstance(b,int) and a>=0 and b>=0, \"Numbers must be positive integers\"\n    if a==0 or b==0:\n        return 0\n    if a==b:\n        return a\n    if a>b:\n        return hcfnaive(b,a)\n    else:\n        return hcfnaive(a,b%a)\ndef hcf(a,b):\n    '''\n    Write a python function to find the hcf of the two given numbers.\n    '''\n    assert isinstance(a,int) and isinstance(b,int) and a>=0 and b>=0, \"Numbers must be positive integers\"\n    if a==0 or b==0:\n        return 0\n    if a==b:\n        return a\n    elif a>b:\n        return hcf(b,a)\n    else:\n        return a if b%a==0 else hcf(a,b%a)\ndef gcd(a,b):\n    '''\n    Write a python function to find the gcd of the two given numbers.\n    '''\n    assert isinstance(a,int) and isinstance(b,int) and a>=0 and b>=0, \"Numbers must be positive integers\"\n    return gcd(b,a) if a>b else gcd(a,b%a)\ndef fibonacci_sum_squares_fast(n):\n    '''\n    Write a python function to find the sum of the squares of the first n Fibonacci numbers.\n    '''\n    assert isinstance(n,int) and n>=0, \"Number must be positive integer\"\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    fib1 = 0\n    fib2 = 1\n    sum_of_squares = 0\n    for i in range(n):\n        fib1,fib2 = fib2,(fib1+fib2)\n        sum_of_squares += fib1**2\n    return sum_of_squares\ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factors of the given number.\n    '''\n    assert isinstance(n,int) and n>=0, \"Number must be positive integer\"\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    return prime_factors(n//2) + [n]*(n%2==0)\ndef is_prime(n):\n    '''\n    Write a python function to check if the given number is a prime or not.\n    '''\n    assert isinstance(n,int) and n>=0, \"Number must be positive integer\"\n    if n==0 or n==1:\n        return False\n    return len(prime_factors(n))==1\ndef sieve_of_eratosthenes(n):\n    '''\n    Write a python function to find the prime numbers up to the given number using Sieve of Eratosthenes.\n    '''\n    assert isinstance(n,int) and n>=0, \"Number must be positive integer\"\n    if n==0:\n        return []\n    if n==1:\n        return [0]\n    l=[i for i in range(0,n+1)]\n    for i in range(2,int(n**0.5)+1):\n        if l[i]==i:\n            for j in range(i*i,n+1,i):\n                if l[j]==j:\n                    l[j]=i\n    return [i for i in l if i>1]\ndef sieve_of_eratosthenes_fast(n):\n    '''\n    Write a python function to find the prime numbers up to the given number using Sieve of Eratosthenes.\n    '''\n    assert isinstance(n,int) and n",
        "num_ids": 13
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Method 1\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    print(long_words)\n",
        "num_ids": 52
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    print(\"\\n\\nQUESTION:\")\n    print(\"\\nWrite a function to find words that are longer than n characters from a given list of words.\")\n    print(\"\\nHere is a list of words to test the function with:\\n\",str)\n    print(\"\\nPlease enter n: \")\n    n = int(input())\n    print(\"\\nPlease enter a list of words separated by commas: \")\n    words_list = input().split(\",\")\n    print(\"\\nThe following words have more than\",n,\"characters:\\n\")\n    for word in words_list:\n        if len(word) > n:\n            print(word)\n",
        "num_ids": 157
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str.split() if len(x) > n]\n",
        "num_ids": 22
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    list1 = str.split()\n    list2 = []\n    for i in list1:\n        if len(i) > n:\n            list2.append(i)\n    return list2\n",
        "num_ids": 49
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    # Converting the string into a list\n    str_lst = str.split()\n    \n    # Initializing the output variable\n    out = []\n    \n    # Iterating over each element of the list to check if it is greater than the n\n    for element in str_lst:\n        if len(element) > n:\n            out.append(element)\n            \n    return out\n    \n    # str_lst = [element for element in str_lst if len(element) > n]\n    # return str_lst\n    \n    \ndef long_words_v2(n, str):\n    '''\n    Using filter\n    '''\n    \n    # Converting the string into a list\n    str_lst = str.split()\n    \n    # Initializing the output variable\n    out = list(filter(lambda x: len(x) > n, str_lst))\n    return out\n    \n    # return [element for element in str_lst if len(element) > n]\n",
        "num_ids": 85
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    output = []\n    for word in str:\n        if len(word) > n:\n            output.append(word)\n    return output\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    x = []\n    for word in str:\n        if len(word) > n:\n            x.append(word)\n    return x\n    \nx = long_words(4, 'Hey there mate you are just a walking dead')\nprint(x)\n",
        "num_ids": 63
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for x in range(0, len(str)):\n        if len(str[x]) > n:\n            words.append(str[x])\n    return words\n",
        "num_ids": 47
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # split the given string into a list of words\n    words = str.split()\n",
        "num_ids": 22
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # TODO:\n    #     - validate input\n    #     - validate test\n",
        "num_ids": 22
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Compute sum for each row and column\n    row_sums = []\n    col_sums = []\n    for row in range(len(my_matrix)):\n        row_sums.append(sum(my_matrix[row]))\n    for col in range(len(my_matrix[0])):\n        col_sums.append(sum([my_matrix[row][col] for row in range(len(my_matrix))]))\n",
        "num_ids": 114
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if (\n        my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] == my_matrix[1][0] + my_matrix[1][1] + my_matrix[1][2] == my_matrix[2][0] + my_matrix[2][1] + my_matrix[2][2] == my_matrix[0][0] + my_matrix[1][0] + my_matrix[2][0] == my_matrix[0][1] + my_matrix[1][1] + my_matrix[2][1] == my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][2] == my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] == my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n    ):\n        print(my_matrix)\n        print('\\n')\n        return'magic_square'\n    else:\n        print(my_matrix)\n        print('\\n')\n        return 'not_magic_square'\n",
        "num_ids": 304
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    sum_cols = [0 for i in range(n)]\n    sum_rows = [0 for i in range(n)]\n    sum_diag_1 = 0\n    sum_diag_2 = 0\n    for i in range(n):\n        for j in range(n):\n            sum_cols[i] += my_matrix[j][i]\n            sum_rows[j] += my_matrix[j][i]\n            if i == j:\n                sum_diag_1 += my_matrix[i][j]\n            if (i + j) == (n - 1):\n                sum_diag_2 += my_matrix[i][j]\n    if sum_cols == [n * (n ** 2 + 1) / 2 for i in range(n)]:\n        if sum_rows == [n * (n ** 2 + 1) / 2 for i in range(n)]:\n            if sum_diag_1 == (n ** 2 + 1) / 2:\n                if sum_diag_2 == (n ** 2 + 1) / 2:\n                    print(\"magic square\")\n                else:\n                    print(\"not magic square\")\n            else:\n                print(\"not magic square\")\n        else:\n            print(\"not magic square\")\n    else:\n        print(\"not magic square\")\n",
        "num_ids": 326
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for row in my_matrix:\n        if sum(row)!= 15:\n            return False\n    for col in list(map(list, zip(*my_matrix))):\n        if sum(col)!= 15:\n            return False\n    for i in range(3):\n        if sum(my_matrix[i][0:3])!= 15:\n            return False\n    for i in range(3):\n        if sum(my_matrix[0][i:i+3])!= 15:\n            return False\n    return True\n",
        "num_ids": 131
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    assert isinstance(my_matrix, list)\n    length = len(my_matrix)\n    for row in my_matrix:\n        assert isinstance(row, list)\n        assert len(row) == length\n        for element in row:\n            assert isinstance(element, int)\n    \n    sums = [0, 0, 0, 0, 0, 0]\n    diagonal_sums = [0, 0]\n    for i in range(length):\n        for j in range(length):\n            # Check row sums\n            sums[i] += my_matrix[i][j]\n            # Check column sums\n            sums[j] += my_matrix[i][j]\n            # Check diagonal sums\n            diagonal_sums[0] += my_matrix[i][j]\n            diagonal_sums[1] += my_matrix[-i-1][j]\n    \n    # Check sums\n    for index in range(len(sums)):\n        if sum(sums)!= sum(diagonal_sums):\n            return False\n    return True\n",
        "num_ids": 263
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    test_rows = []\n    test_columns = []\n    for i in range(3):\n        test_rows.append(sum(my_matrix[i]))\n    for i in range(3):\n        total = 0\n        for j in range(3):\n            total += my_matrix[j][i]\n        test_columns.append(total)\n",
        "num_ids": 91
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the matrix\n    my_sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            my_sum += my_matrix[i][j]\n    \n    # Calculate the sum of the major diagonal\n    my_major_sum = 0\n    for i in range(len(my_matrix)):\n        my_major_sum += my_matrix[i][i]\n    \n    # Calculate the sum of the minor diagonal\n    my_minor_sum = 0\n    for i in range(len(my_matrix)):\n        my_minor_sum += my_matrix[i][len(my_matrix) - 1 - i]\n    \n    # Calculate the sum of the minor diagonal\n    my_minor_sum = 0\n    for i in range(len(my_matrix)):\n        my_minor_sum += my_matrix[i][len(my_matrix) - 1 - i]\n    \n    # Check if the sum of the matrix equals the sum of its major diagonal\n    if my_sum!= my_major_sum:\n        return False\n    \n    # Check if the sum of the matrix equals the sum of its minor diagonal\n    if my_sum!= my_minor_sum:\n        return False\n    \n    # Check if the sum of the matrix equals the sum of its major diagonal\n    if my_sum!= my_major_sum:\n        return False\n    \n    return True\n",
        "num_ids": 368
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #check if all rows equal\n    matrix_check_rows = []\n    for row in my_matrix:\n        matrix_check_rows.append(sum(row))\n    if matrix_check_rows.count(sum(matrix_check_rows)) > 1:\n        return False\n",
        "num_ids": 72
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not my_matrix:\n        return False\n    if not isinstance(my_matrix, list):\n        return False\n    if len(my_matrix) == 0:\n        return False\n    if not all(isinstance(i, list) for i in my_matrix):\n        return False\n",
        "num_ids": 75
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_item = None\n    freq = defaultdict(int)\n    for i in nums:\n        freq[i] += 1\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_item = i\n    return max_item\n",
        "num_ids": 83
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d.items(), key = lambda x: x[1])[0]\n    ",
        "num_ids": 49
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n",
        "num_ids": 27
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    max_num = max(d.values())\n    return [k for k, v in d.items() if v == max_num]\n",
        "num_ids": 60
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    return max(counts.items(), key=lambda x: x[1])\n",
        "num_ids": 48
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    max_freq = 0\n    max_item = 0\n    for item, freq in d.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item\n",
        "num_ids": 87
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrences = defaultdict(int)\n    for num in nums:\n        occurrences[num] += 1\n    max_occurrence = 0\n    max_key = None\n    for key, value in occurrences.items():\n        if value > max_occurrence:\n            max_occurrence = value\n            max_key = key\n    return max_key\n",
        "num_ids": 88
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    map_dict = defaultdict(int)\n    max_freq = 0\n    for num in nums:\n        map_dict[num] += 1\n        if map_dict[num] > max_freq:\n            max_freq = map_dict[num]\n    for key,value in map_dict.items():\n        if value == max_freq:\n            return key\n",
        "num_ids": 94
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    return max(d, key=d.get)\n",
        "num_ids": 40
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        # To store items and their count\n        items_count = defaultdict(int)\n",
        "num_ids": 45
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    str2 = str1[::-1]\n    str3 = ''\n",
        "num_ids": 41
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #str1 = input('Enter a string: ')\n    vowels = 'aeiou'\n    str1 = list(str1)\n    n = len(str1)\n    i = 0\n    j = n-1\n    while(i<j):\n        if str1[i] in vowels and str1[j] in vowels:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n        elif str1[i] not in vowels and str1[j] not in vowels:\n            i += 1\n            j -= 1\n        elif str1[i] in vowels and str1[j] not in vowels:\n            j -= 1\n        elif str1[i] not in vowels and str1[j] in vowels:\n            i += 1\n    return ''.join(str1)\n",
        "num_ids": 220
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    str2 = str1[::-1]\n    vowels_only = []\n    for index in range(len(str2)):\n        if str2[index] in vowels:\n            vowels_only.append(str2[index])\n    return ''.join(vowels_only)\n    ",
        "num_ids": 100
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    string = list(str1)\n    i, j = 0, len(string) - 1\n    while i < j:\n        if string[i].lower() not in vowels:\n            i += 1\n        elif string[j].lower() not in vowels:\n            j -= 1\n        else:\n            string[i], string[j] = string[j], string[i]\n            i += 1\n            j -= 1\n    return \"\".join(string)\n",
        "num_ids": 128
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a','e','i','o','u','A','E','I','O','U')\n    vowel = []\n    for letter in str1:\n        if letter in vowels:\n            vowel.append(letter)\n",
        "num_ids": 62
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    str1 = [i for i in str1]\n    i = 0\n    j = len(str1)-1\n",
        "num_ids": 59
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a','e','i','o','u','A','E','I','O','U')\n    new_str = ''\n    new_list = list(str1)\n    for i in new_list:\n        if i in vowels:\n            if len(new_list) == 1:\n                new_str = i\n            else:\n                new_list[new_list.index(i)] = new_str\n                new_str = i\n        else:\n            new_str = i\n    return new_str.join(new_list)\n",
        "num_ids": 136
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowel_str = ''\n    for i in str1:\n        if i in vowels:\n            vowel_str += i\n    \n    vowel_str = list(vowel_str)\n    rev_vowel_str = vowel_str[::-1]\n    rev_str = str1[::-1]\n    \n    for i in range(len(rev_vowel_str)):\n        if rev_vowel_str[i] in vowels:\n            rev_str = rev_str[:i] + rev_vowel_str[i] + rev_str[i:]\n            \n    return rev_str\n    \ndef is_valid_palindrome(str1):\n    rev_str = reverse_vowels(str1)\n    if str1 == rev_str:\n        return True\n    return False\n    \nprint(is_valid_palindrome('slfxlews'))\nprint(is_valid_palindrome('slfjlws'))\nprint(is_valid_palindrome('sss'))",
        "num_ids": 274
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouy\"\n    string = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if string[i].lower() not in vowels:\n            i += 1\n        elif string[j].lower() not in vowels:\n            j -= 1\n        else:\n            string[i], string[j] = string[j], string[i]\n            i += 1\n            j -= 1\n    return \"\".join(string)\n",
        "num_ids": 127
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    vowels_in_str = {char for char in str1 if char.lower() in vowels}\n    reversed_vowels_in_str = {char for char in str1 if char.lower() not in vowels}\n    str1 = ''.join(char for char in str1 if char.lower() not in vowels)\n    str1 = ''.join(char for char in str1 if char.lower() in vowels_in_str)\n    str1 += ''.join(char for char in reversed_vowels_in_str)\n    return str1\n",
        "num_ids": 163
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i)\n        string +=''\n    return string\n",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # create a list from the tuple\n    list_from_tup = list(tup1)\n    # convert the list to string\n    string_from_list = ''.join(list_from_tup)\n    return string_from_list\n",
        "num_ids": 61
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = \"(\"\n    for i in tup1:\n        tup_str += str(i) + \", \"\n    tup_str = tup_str.rstrip(\", \")\n    tup_str += \")\"\n    return tup_str\n",
        "num_ids": 68
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for x in range(0, len(tup1)):\n        str1 += str(tup1[x])\n        if x!= len(tup1)-1:\n            str1 +=''\n    return str1\n",
        "num_ids": 62
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return(str(tup1))\n",
        "num_ids": 12
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    print(tuple(tup1))\n    string = \"\"\n    for i in range(len(tup1)):\n        string += str(tup1[i]) + \", \"\n    return string\n",
        "num_ids": 51
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # initialize the sum to 0\n    sum = 0\n    for num in nums:\n        # check if the current number is negative and add it to the sum if it is\n        if num < 0:\n            sum += num\n    return sum\n",
        "num_ids": 58
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            total += nums[i]\n    return total\n    \nprint(sum_negativenum([1, 2, 3, -4, 5]))\n",
        "num_ids": 68
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_nums = 0\n    for i in nums:\n        if i < 0:\n            sum_nums += i\n    return sum_nums\n",
        "num_ids": 40
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    # The following solution does not work because it will return 0 even if the list has negative numbers.\n    # sum_negative_nums = []\n    # for i in nums:\n    #     if i < 0:\n    #         sum_negative_nums.append(i)\n    # return sum(sum_negative_nums)\n    \n    return sum([i for i in nums if i < 0])\n    \n    \nif __name__ == '__main__':\n    print(sum_negativenum([1,2,3,-4,5]))\n    print(sum_negativenum([-2, 0, -4, -9, -1, -8, -3, -9])",
        "num_ids": 171
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = []\n    for num in nums:\n        if num < 0:\n            negatives.append(num)\n    return sum(negatives)\n",
        "num_ids": 40
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            negative_sum = negative_sum + nums[i]\n",
        "num_ids": 48
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    k = 1\n    result = 1\n    while k <= n: \n        result = result + (2*k)\n        k += 1\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # return (1/2)*n*(n+1)*(2*n+1)\n    return int(((1 + sqrt(1 + 4 * 4 * n)) / 2) ** 2)\n    \n    \ndef pentagonal_num(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return int(n*(3*n-1)/2)\n    \ndef hexagonal_num_generator(): \n    '''\n    Write a function to return a generator that yields\n    the next hexagonal number.\n    '''\n    n = 1\n    while True:\n        yield hexagonal_num(n)\n        n += 1\n        \ndef pentagonal_num_generator(): \n    '''\n    Write a function to return a generator that yields\n    the next pentagonal number.\n    '''\n    n = 1\n    while True:\n        yield pentagonal_num(n)\n        n += 1\n        ",
        "num_ids": 29
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # f(n) = n * (2n-1)\n    # e.g. f(1) = 1 * (2*1-1) = 1\n    # e.g. f(2) = 2 * (2*2-1) = 5\n    # e.g. f(3) = 3 * (2*3-1) = 11\n    # e.g. f(4) = 4 * (2*4-1) = 19\n    # e.g. f(5) = 5 * (2*5-1) = 37\n    # e.g. f(6) = 6 * (2*6-1) = 61\n    # e.g. f(7) = 7 * (2*7-1) = 91\n    # e.g. f(8) = 8 * (2*8-1) = 145\n    # e.g. f(9) = 9 * (2*9-1) = 169\n    # e.g. f(10) = 10 * (2*10-1) = 196\n    # e.g. f(11) = 11 * (2*11-1) = 341\n    # e.g. f(12) = 12 * (2*12-1) = 596\n    # e.g. f(13) = 13 * (2*13-1) = 721\n    # e.g. f(14) = 14 * (2*14-1) = 866\n    # e.g. f(15) = 15 * (2*15-1) = 1331\n    # e.g. f(16) = 16 * (2*16-1) = 1776\n    # e.g. f(17) = 17 * (2*17-1) = 1841\n    # e.g. f(18) = 18 * (2*18-1) = 1901\n    # e.g. f(19) = 19 * (2*19-1) = 2050\n    # e.g. f(20) = 20 * (2*20-1) = 2101\n    # e.g. f(21) = 21 * (2*21-1) = 2162\n    # e.g. f(22) = 22 * (2*22-1) = 2311\n    # e.g. f(23) = 23 * (2*23-1) = 2470\n    # e.g. f(24) = 24 * (2*24-1) = 2521\n    # e.g. f(25) = 25 * (2*25-1) = 2680\n    # e.g. f(26) = 26 * (2*26-1) = 2741\n    # e.g. f(27) = 27 * (2*27-1) = 2896\n    # e.g. f(28) = 28 * (2*28-1) = 2951\n    # e.g. f(29) = 29 * (2*29-1) = 3096\n    # e.g. f(30) = 30 * (2*30-1) = 3151\n    # e.g. f(31) = 31 * (2*31-1) = 3216\n    # e.g. f(32) = 32 * (2*32-1) = 3271\n    # e.g. f(33) = 33 * (2*33-1) = 3426\n    # e.g. f(34) = 34 * (2*34-1) = 3581\n    # e.g. f(35) = 35 * (2*35-1) = 3636\n    # e.g. f(36) = 36 * (2*36-1) = 3775\n    # e.g. f(37) = 37 * (2*37-1) = 3840\n    # e.g. f(38) = 38 * (2*38-1) = 3979\n    # e.g. f(39) = 39 * (2*39-1) = 4038\n    # e.g. f(40) = 40 * (2*40-1) = 4176\n    # e.g. f(41) = 41 * (2*41-1) = 4242\n    # e.g. f(42) = 42 * (2*42-1) = 4380\n    # e.g. f(43) = 43 * (2*43-1) = 4436\n    # e.g. f(44) = 44 * (2*44-1) = 4472\n    # e.g. f(45) = 45 * (2*45-1) = 4607\n    # e.g. f(46) = 46 * (2*46-1) = 4755\n    # e.g. f(47) = 47 * (2*47-1) = 4812\n    # e.g. f(48) = 48 * (2*48-1) = 4968\n    # e.g. f(49) = 49 * (2*49-1) = 5024\n    # e.g. f(50) = 50 * (2*50-1) = 5083\n    # e.g. f(51) = 51 * (2*51-1) = 5141\n    # e.g. f(52) = 52 * (2*52-1) = 5190\n    # e.g. f(53) = 53 * (2*53-1) = 5238\n    # e.g. f(54) = 54 * (2*54-1) = 5285\n    # e.g. f(55) = 55 * (2*55-1) = 5333\n    # e.g. f(56) = 56 * (2*56-1) = 5382\n    # e.g. f(57) = 57 * (2*57-1) = 5430\n    # e.g. f(58) = 58 * (2*58-1) = 5478\n    # e.g. f(59) = 59 * (2*59-1) = 5536\n    # e.g. f(60) = 60 * (2*60-1) = 5675\n    # e.g. f(61) = 61 * (2*61-1) = 583\n    # e.g. f(62) = 62 * (2*62-1) = 592\n    # e.g. f(63) = 63 * (2*63-1) = 593\n    # e.g. f(64) = 64 * (2*64-1) = 598\n    # e.g. f(65) = 65 * (2*65-1) = 606\n    # e.g. f(66) = 66 * (2*66-1) = 612\n    # e.g. f(67) = 67 * (2*67-1) = 654\n    # e.g. f(68) = 68 * (2*68-1) = 693\n    # e.g. f(69) = 69 * (2*69-1) = 707\n    # e.g. f(70) = 70 * (2*70-1) = 724\n    # e.g. f(71) = 71 * (2*71-1) = 736\n    # e.g. f(72) = 72 * (2*72-1) = 749\n    # e.g. f(73) = 73 * (2*73-1) = 772\n    # e.g. f(74) = 74 * (2*74-1) = 792\n    # e.g. f(75) = 75 * (2*75-1) = 810\n    # e.g. f(76) = 76 * (2*76-1) = 817\n    # e.g. f(77) = 77 * (2*77-1) = 826\n    # e.g. f(78) = 78 * (2*78-1) = 834\n    # e.g. f(79) = 79 * (2*79-1) = 849\n    # e.g. f(80) = 80 * (2*80-1) = 864\n    # e.g. f(81) = 81 * (2*81-1) = 882\n    # e.g. f(82) = 82 * (2*82-1) = 889\n    # e.g. f(83) = 83 * (2*83-1) = 898\n    # e.g. f(84) = 84 * (2*84-1) ",
        "num_ids": 2018
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def right(n):\n        return n + n + 1\n    def pentagonal(n):\n        return n*(3*n - 1) / 2\n",
        "num_ids": 39
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize our variables.\n    n, counter, curr_num, hexagonal_nums = 0, 0, 0, []\n    # Iterate through each term until we find the nth number.\n    while curr_num!= n:\n        # Calculate the current number.\n        curr_num = (1 / 2) * (counter * (counter + 1))\n        # If the number we are on is not in the list, add it and increment the counter.\n        if curr_num not in hexagonal_nums:\n            hexagonal_nums.append(curr_num)\n            counter += 1\n        # Otherwise, we have exceeded the number, so break.\n        else:\n            break\n    # Return the current number.\n    return curr_num\n",
        "num_ids": 184
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n*(2*n-1))\n",
        "num_ids": 16
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_nonzero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_nonzero += 1\n    return count_zero/count_nonzero\n",
        "num_ids": 62
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Runtime: O(n)\n    # Space: O(n)\n    n = len(nums)\n    nz = 0\n    nz_arr = array('i', [])\n    nz_arr.append(0)\n    nz += nums.count(0)\n    nz_arr[0] = nz\n    for num in nums:\n        if num == 0:\n            nz += 1\n        nz_arr.append(nz)\n    nz_arr.pop()\n    return nz_arr\n",
        "num_ids": 123
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # return nums.count(0) / len(nums)\n    zeroes = 0\n    non_zeroes = 0\n",
        "num_ids": 33
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if nums is None or len(nums) == 0:\n        return 0\n    \n    z = 0\n    nz = 0\n    for num in nums:\n        if num == 0:\n            z += 1\n        else:\n            nz += 1\n    return z / nz\n",
        "num_ids": 70
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    return zeroes/len(nums)\n",
        "num_ids": 41
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    ratio = zeroes/len(nums)\n    return ratio\n",
        "num_ids": 47
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = 0\n    num_nonzeros = 0\n    for i in nums:\n        if i == 0:\n            num_zeros += 1\n        else:\n            num_nonzeros += 1\n    return num_zeros/num_nonzeros\n",
        "num_ids": 68
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    total_zeroes = 0\n    total_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            total_zeroes += 1\n        else:\n            total_non_zeroes += 1\n    print(total_zeroes, total_non_zeroes)\n    return total_zeroes/total_non_zeroes\n",
        "num_ids": 87
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros=0\n    non_zeros=0\n    for i in nums:\n        if i==0:\n            zeros+=1\n        else:\n            non_zeros+=1\n    return zeros,non_zeros\n    \ndef count_digits(n):\n    '''\n    Write a function that takes an integer and returns the number of digits in the integer.\n    '''\n    number=n\n    count=0\n    while n>0:\n        count+=1\n        n=n//10\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros=0\n    count_nonzeros=0\n    for num in nums:\n        if num==0:\n            count_zeros+=1\n        else:\n            count_nonzeros+=1\n    return count_zeros/count_nonzeros\n    \ndef sum_divisors(n):\n    '''\n    Write a function to return the sum of all divisors of an integer n, not including the integer n.\n    '''\n    divisors = 0\n    i = 1\n    while i < n/2+1:\n        if n % i == 0:\n            divisors += i\n        i += 1\n    return divisors\n    \ndef is_power_of_two(n):\n    '''\n    Write a function that takes in a number and returns True if the number is a power of 2. Otherwise, return False.\n    '''\n    if n==0:\n        return False\n    elif n%2==1:\n        return False\n    else:\n        return True\n    \ndef find_missing_letter(chars):\n    '''\n    Write a function that takes in a string of lowercase letters and returns the missing letter in the string.\n    '''\n    alphabet='abcdefghijklmnopqrstuvwxyz'\n    lowercase_chars=list(chars)\n    for index, char in enumerate(lowercase_chars):\n        if char not in alphabet:\n            return alphabet[index]\n",
        "num_ids": 66
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n == sum(i for i in range(1,int(n**0.5)+1) if n % i == 0)\n",
        "num_ids": 34
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    if n == 0:\n        return 0\n        \n    while (n % 2 == 0):\n        n //= 2\n        \n    if (n == 1):\n        return 1\n        \n    return 0\n    ",
        "num_ids": 54
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pow = 0\n    while (n >= 2**pow): \n        pow += 1\n    if (2**pow == n): \n        return True\n    else: \n        return False\n",
        "num_ids": 51
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    while n!= 0:\n        if (n % 2) == 1:\n            return False\n        n = n // 2\n    return True\nprint(is_Sum_Of_Powers_Of_Two(100))\n",
        "num_ids": 100
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    elif n==1 or n==2:\n        return True\n    while(n!=1):\n        if n%2==0:\n            n/=2\n        else:\n            return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    while n: \n        if n % 2 or n < 0: \n            return False\n        n = n // 2\n    return True\n    \ndef print_power_of_two_sum_of_number(n): \n    '''\n    Write a python function to print the sum of all powers of 2 which are less than n.\n    '''\n    if n == 0: \n        return\n    while n: \n        if n == 1: \n            print(0, end ='')\n        elif n % 2: \n            print(n, end ='')\n        n = n // 2\n    print()\n    \ndef is_Power_of_Two(n): \n    '''\n    Write a python function to check whether a given number is power of 2 or not.\n    '''\n    return n > 0 and n & (n - 1) == 0\n    \ndef print_non_power_of_two_sum_of_number(n): \n    '''\n    Write a python function to print the sum of all non-power of 2 which are less than n.\n    '''\n    if n == 0: \n        return\n    while n: \n        if is_Power_of_Two(n): \n            n = n // 2\n        else: \n            print(n, end ='')\n            n = n - 1\n    print()\n    \ndef is_Hex_Number(n): \n    '''\n    Write a python function to check whether a given number is hexadecimal or not.\n    '''\n    return n >= 0 and n <= 15\n    \ndef is_Octal_Number(n): \n    '''\n    Write a python function to check whether a given number is octal or not.\n    '''\n    return n >= 0 and n <= 7\n    \ndef is_Binary_Number(n): \n    '''\n    Write a python function to check whether a given number is binary or not.\n    '''\n    return n >= 0 and n <= 1\n    \ndef is_Number_Of_Set_Bit(n): \n    '''\n    Write a python function to check whether a given number has only one set bit or not.\n    '''\n    return (is_Power_of_Two(n))\n    \ndef print_binary_number(n): \n    '''\n    Write a python function to print binary number of given decimal number.\n    '''\n    while n: \n        print(n % 2, end ='')\n        n = n // 2\n    print()\n    \ndef print_octal_number(n): \n    '''\n    Write a python function to print octal number of given decimal number.\n    '''\n    while n: \n        if is_Octal_Number(n % 8): \n            print(n % 8, end ='')\n        n = n // 8\n    print()\n    \ndef print_hexadecimal_number(n): \n    '''\n    Write a python function to print hexadecimal number of given decimal number.\n    '''\n    while n: \n        if is_Hex_Number(n % 16): \n            print(n % 16, end ='')\n        n = n // 16\n    print()\n    \ndef print_binary_number_recursive(n): \n    '''\n    Write a python function to print binary number of given decimal number.\n    '''\n    if n > 0: \n        print_binary_number_recursive(n - 1)\n        print(n % 2, end ='')\n    \ndef print_octal_number_recursive(n): \n    '''\n    Write a python function to print octal number of given decimal number.\n    '''\n    if n > 0: \n        print_octal_number_recursive(n - 1)\n        print(n % 8, end ='')\n    \ndef print_hexadecimal_number_recursive(n): \n    '''\n    Write a python function to print hexadecimal number of given decimal number.\n    '''\n    if n > 0: \n        print_hexadecimal_number_recursive(n - 1)\n        print(n % 16, end ='')\n    \ndef print_number_set_bit(n): \n    '''\n    Write a python function to print set bit of a given number.\n    '''\n    if n > 0: \n        print(n % 2, end ='')\n        print_number_set_bit(n // 2)\n        \ndef is_Number_Set_Bit_Algorithm(n): \n    '''\n    Write a python function to check whether a given number is set bit or not.\n    '''\n    if n == 0: \n        return False\n    while n: \n        if n % 2: \n            return True\n        n = n // 2\n    return False\n    \ndef print_numbers_set_bit_algorithm(n): \n    '''\n    Write a python function to print the set bit of all number from 0 to n.\n    '''\n    for i in range(n + 1): \n        if is_Number_Set_Bit_Algorithm(i): \n            print(i, end ='')\n        \ndef is_Power_of_Two_Algorithm(n): \n    '''\n    Write a python function to check whether a given number is power of 2 or not.\n    '''\n    if n == 0: \n        return False\n    if n == 1: \n        return True\n    while n > 0: \n        if n % 2: \n            return False\n        n = n // 2\n    return True\n    \ndef print_power_of_two_sum_of_number_algorithm(n): \n    '''\n    Write a python function to print the sum of all powers of 2 which are less than n.\n    '''\n    if n == 0: \n        return\n    if is_Power_of_Two_Algorithm(n): \n        print(n, end ='')\n    n = n - 1\n    print_power_of_two_sum_of_number_algorithm(n)\n    \ndef is_Power_of_Two_Sum_Of_Number_Algorithm(n): \n    '''\n    Write a python function to check whether a given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    while n: \n        if n == 1: \n            return True\n        if n % 2: \n            return False\n        n = n // 2\n    return True\n    \ndef print_power_of_two_sum_of_number_algorithm(n): \n    '''\n    Write a python function to print the sum of all powers of 2 which are less than n.\n    '''\n    if n == 0: \n        return\n    if is_Power_of_Two_Algorithm(n): \n        print(n, end ='')\n    n = n - 1\n    print_power_of_two_sum_of_number_algorithm(n)\n    \ndef print_non_power_of_two_sum_of_number_algorithm(n): \n    '''\n    Write a python function to print the sum of all non-power of 2 which are less than n.\n    '''\n    if n == 0: \n        return\n    while n: \n        if is_Power_of_Two(n): \n            n = n // 2\n        else: \n            print(n, end ='')\n            n = n - 1\n    print()\n    \ndef is_Power_of_Two_Sum_Of_Number_Algorithm(n): \n    '''\n    Write a python function to check whether a given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    while n: \n        if n == 1: \n            return True\n        if n % 2: \n            return False\n        n = n // 2\n    return True\n    \ndef print_non_power_of_two_sum_of_number_algorithm(n): \n    '''\n    Write a python function to print the sum of all non",
        "num_ids": 14
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    temp = bin(n)\n    c = 0\n    for i in range(len(temp)):\n        if temp[i] == '1':\n            c += 1\n    return True if c > 1 else False\n",
        "num_ids": 53
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    temp = 1\n    while(n>=temp):\n        if(n == temp or n%temp == 0):\n            return 0\n        temp <<= 1\n    return 1\n",
        "num_ids": 44
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return bin(n).count(\"1\") == 1\n",
        "num_ids": 15
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 2\n    while i < n: \n        if n % i == 0: \n            return False\n        i = i * 2\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n",
        "num_ids": 10
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI ",
        "num_ids": 8
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n",
        "num_ids": 10
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.141592\n    result = 2 * pi * r\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2*math.pi*r\n    return c\n",
        "num_ids": 17
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n",
        "num_ids": 10
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    c = 2*math.pi*r\n    return c\n",
        "num_ids": 21
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n",
        "num_ids": 13
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [str(i) for j in test_list for i in j]\n",
        "num_ids": 21
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result = []\n    for sublist in test_list:\n        for element in sublist:\n            result.append(element)\n    \n    return result\n",
        "num_ids": 41
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for i in test_list:\n        for j in i:\n            new_list.append(j)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    print('Lets get flatten:', test_list)\n    flattened = []\n    for list_ in test_list:\n        for item in list_:\n            flattened.append(item)\n    return flattened\n",
        "num_ids": 56
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = set()\n",
        "num_ids": 12
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # a list to store the singly list\n    singly_list = []\n    for x in test_list:\n        # if the inner list is not empty, we can push\n        # the elements in it to the singly list\n        if x:\n            for y in x:\n                singly_list.append(y)\n    return singly_list\n",
        "num_ids": 86
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for item in test_list:\n        for item_2 in item:\n            singly_list.append(item_2)\n    return singly_list\n",
        "num_ids": 48
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for i in range(len(test_list)):\n        flat_list += test_list[i]\n",
        "num_ids": 35
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    extracted = list(chain.from_iterable(test_list))\n    return extracted\n    \n    \ntest_list = [[1, 2], [3, 4, 5], [6, 7, 8, 9, 10, 11]]\n",
        "num_ids": 58
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # 1. Do not return anything, modify nums in-place instead.\n    n = len(nums)\n    i = n-1\n    while i > 0:\n        if nums[i-1] <= nums[i]:\n            break\n        j = i-1\n        while j >= 0:\n            if nums[j] <= nums[i-1]:\n                break\n            nums[j+1], nums[j] = nums[j], nums[j+1]\n            j -= 1\n        nums[j+1], nums[i-1] = nums[i-1], nums[j+1]\n        i -= 1\n",
        "num_ids": 163
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1, 0, -1):\n        currentMax = getMax(nums, 0, i)\n        j = i\n        while j > 0 and nums[j] > currentMax:\n            nums[j], nums[j - 1] = nums[j - 1], nums[j]\n            j = j - 1\n",
        "num_ids": 92
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    cur = len(nums)\n    while cur > 1:\n        # Find the maximum number in a subarray of size cur\n        # Find the index of the maximum number\n        # Swap it with the last item in the array\n        # and then reverse the subarray of size cur\n        i = 0\n        while i + cur < len(nums):\n            if nums[i] > nums[i + cur - 1]:\n                max_ind = i\n            i += 1\n        nums[max_ind], nums[-1] = nums[-1], nums[max_ind]\n        nums[:cur] = nums[:cur][::-1]\n        cur -= 1\n",
        "num_ids": 166
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted = False\n    i = len(nums) - 1\n    while not sorted:\n        sorted = True\n        for j in range(i):\n            if nums[j] > nums[j + 1]:\n                sorted = False\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n                # print(nums)\n        i = i - 1\n    return nums\n",
        "num_ids": 109
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pancake_sort_helper(nums, 0, len(nums) - 1)\n    return nums\n",
        "num_ids": 31
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        flip_to_top(nums, i)\n    return nums\n",
        "num_ids": 34
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    len_nums = len(nums)\n    if len_nums == 1:\n        return nums\n",
        "num_ids": 29
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) // 2):\n        nums = pancake_sort_helper(nums, len(nums) - i - 1)\n    return nums\n",
        "num_ids": 48
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    # find the maximum number in the list\n    max_num = max(nums)\n    max_index = nums.index(max_num)\n    # flip the biggest number to the end of the list\n    nums = flip(nums, max_index)\n    # sort the rest of the list with insertion sort\n    nums = insertion_sort(nums[:-1]) + [nums[-1]]\n    return nums\n",
        "num_ids": 121
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Sort the list of numbers in ascending order\n    for i in range(len(nums) - 1):\n        # Each pass we want to find the largest element and then\n        # rotate the list to place it in the proper place.\n        j = len(nums) - 1\n        while j > i:\n            if nums[j] < nums[j - 1]:\n                # If the list[j] is less than the list[j-1], then\n                # we know the list[j] is already in the correct place.\n                # Just move on to the next element.\n                break\n            else:\n                # Otherwise, we need to swap list[j] with list[j-1]\n                nums[j], nums[j - 1] = nums[j - 1], nums[j]\n                j -= 1\n    return nums\n",
        "num_ids": 202
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    length = len(list1)\n    count = 0\n    for i in range(length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_list = [i for i in list1 if i in list2 and i in list3]\n    return len(same_list)\n",
        "num_ids": 35
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_a = 0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i == j == k:\n                    count_a += 1\n    return count_a\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k] and i == j == k:\n                    total_sum += 1\n    return total_sum\n",
        "num_ids": 88
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            result += 1\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                for k in range(0,len(list3)):\n                    if list2[j]==list3[k]:\n                        count+=1\n    return count\n",
        "num_ids": 89
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j]==list3[k]:\n                    count+=1\n    print(count)\nlist1=[1,2,3,3,2,1]\nlist2=[5,6,1,2,3,3]\nlist3=[3,4,5,1,2,3]\ncount_samepair(list1,list2,list3)\n",
        "num_ids": 140
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return len([x for x,y,z in zip(list1,list2,list3) if x==y==z])\n",
        "num_ids": 33
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print('input lists not of same length')\n    else:\n        for i in range(len(list1)):\n            if list1[i] == list2[i] == list3[i]:\n                count+=1\n        print('Number of identical items in the same position for each input list:',count)\n",
        "num_ids": 106
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    def find_count_lists(Input,index):\n        count = 0\n        count_list = []\n        for i in range(0,index):\n            if type(Input[i]) == list:\n                count = count + 1\n                count_list.append(i)\n        return count, count_list\n    \n    def is_list(Input):\n        list_flag = False\n        for i in range(0,len(Input)):\n            if type(Input[i]) == list:\n                list_flag = True\n                break\n        return list_flag\n    \n    def return_list(Input):\n        temp = []\n        for i in range(0,len(Input)):\n            if type(Input[i]) == list:\n                temp.append(Input[i])\n        return temp\n    \n    def is_tuple(Input):\n        tuple_flag = False\n        for i in range(0,len(Input)):\n            if type(Input[i]) == tuple:\n                tuple_flag = True\n                break\n        return tuple_flag\n    \n    def return_tuple(Input):\n        temp = []\n        for i in range(0,len(Input)):\n            if type(Input[i]) == tuple:\n                temp.append(Input[i])\n        return temp\n    \n    if type(Input) == tuple:\n        Input = return_tuple(Input)\n    elif type(Input) == list:\n        Input = return_list(Input)\n    \n    index = len(Input)\n    count_list, count_list_index = find_count_lists(Input,index)\n    if count_list > 0:\n        if is_list(Input):\n            for i in range(0,count_list):\n                Input.pop(count_list_index[i])\n                Input = find_lists(Input)\n        elif is_tuple(Input):\n            for i in range(0,count_list):\n                Input.pop(count_list_index[i])\n                Input = find_lists(Input)\n    return Input\n",
        "num_ids": 496
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    list_count = 0\n    for i in Input:\n        if type(i) == list:\n            list_count += 1\n    return list_count\n",
        "num_ids": 41
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) is list:\n            count+=1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = Input[1:-1].split(',')\n    Output = []\n    for i in range(len(Input)):\n        if Input[i].find(']') > -1:\n            Output.append(Input[i][1:Input[i].find(']')])\n    return Output\n",
        "num_ids": 73
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len([i for i in Input if isinstance(i, list)])\n",
        "num_ids": 21
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = list(Input)\n    print(Input)\n    lists = []\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            lists.append(Input[i])\n    return len(lists)\n",
        "num_ids": 62
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Initialize a dictionary \n    dic = {}\n    for i in range(len(Input)):\n        if Input[i] in dic.keys():\n            dic[Input[i]] += 1\n        else:\n            dic[Input[i]] = 1\n",
        "num_ids": 67
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if(abs(arr[i]-arr[j])>max_abs_diff):\n                max_abs_diff = abs(arr[i]-arr[j])\n    return max_abs_diff\n",
        "num_ids": 87
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if arr is None:\n        return 'Array must be passed!'\n    return max(arr) - min(arr)\n",
        "num_ids": 30
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if ((arr[i] - arr[j]) > max_diff and arr[i] - arr[j] > 0):\n                max_diff = arr[i] - arr[j]\n    return max_diff\n",
        "num_ids": 84
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_Diff = arr[0] - arr[1]\n    min_Diff = arr[0] - arr[1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_Diff = max(max_Diff, arr[j] - arr[i])\n            min_Diff = min(min_Diff, arr[j] - arr[i])\n    return max_Diff\n",
        "num_ids": 108
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return (max(arr[-1]-arr[0], arr[1]-arr[0]))\n",
        "num_ids": 32
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initializing max value to the first element of the input array \n    max_value = arr[0] \n    # Initializing max absolute difference to the difference between first and last element \n    max_abs_diff = arr[0] - arr[1] \n    # Initializing current absolute difference to 0 \n    current_abs_diff = 0\n    for i in range(1, len(arr) - 1): \n        current_abs_diff = abs(arr[i] - arr[i + 1]) \n        # Updating the max_absolute difference if required \n        if current_abs_diff > max_abs_diff: \n            max_abs_diff = current_abs_diff\n            max_value = arr[i] \n    return max_value\n",
        "num_ids": 182
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    m = arr[0]\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if abs(arr[i] - arr[j]) > abs(m):\n                m = arr[i] - arr[j]\n    return m\n",
        "num_ids": 70
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    #print(arr)\n    min_elem = min(arr)\n    max_elem = max(arr)\n    max_abs_diff = abs(max_elem - min_elem)\n    #print(min_elem, max_elem, max_abs_diff)\n    return max_abs_diff\n",
        "num_ids": 80
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return (abs(arr[-1]-arr[0]))\n",
        "num_ids": 24
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff=0\n    for i in range(0,len(arr)):\n        for j in range(0,len(arr)):\n            if (i!=j and abs(arr[i]-arr[j]) > max_diff):\n                max_diff=abs(arr[i]-arr[j])\n    return max_diff\n",
        "num_ids": 83
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % gcd(a, b)!= 0:\n        return None\n    return (n // gcd(a, b), -(b // gcd(a, b)) * gcd(a, b))\n",
        "num_ids": 53
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % a == 0:\n        return int(n / a), 0\n    else:\n        x = int((n - b) / a)\n        y = int((n - b) / a) + 1\n        return x, y\n",
        "num_ids": 59
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x+b*y == n:\n                return (x, y)\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 0)\n    if b == 0:\n        return (0, n)\n    if a == 0:\n        return (0, -1 * n)\n    if a == 1:\n        return (n, n)\n    if b == 1:\n        return (n, n * n)\n    if n % a == 0:\n        return (n // a, 0)\n    if n % b == 0:\n        return (0, n // b)\n    x = n // a\n    y = n // b\n    # guess = n - x * a - y * b\n    # if guess < a * b:\n    #     return (x, y)\n    if x % a == 0:\n        return (x // a, 0)\n    if y % b == 0:\n        return (0, y // b)\n    guess = n - x * a - y * b\n    if guess < a * b:\n        return (x, y)\n    else:\n        return None\n",
        "num_ids": 245
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # START SOLUTION\n    \n    if n % a == 0:\n        return (n/a, 0)\n    else:\n        return b, n/a\n    \n    # END SOLUTION\n",
        "num_ids": 49
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % gcd(a, b)!= 0:\n        return None\n    x = int((n/b) + ((a/b) * (n/b) / a))\n    y = int((n/a) - (x/a))\n    return x, y\n",
        "num_ids": 68
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def gcd(a, b):\n        '''\n        Compute the greatest common divisor of a and b.\n        Euclid\u2019s algorithm uses subtraction to keep track of the greatest common divisor of two integers.\n        '''\n        if a == b:\n            return a\n        elif a > b:\n            return gcd(a - b, b)\n        else:\n            return gcd(a, b - a)\n",
        "num_ids": 49
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # modulo check\n    if n % a!= 0 or n % b!= 0:\n        return None\n    \n    # this one line solution (brute force)\n    # return (n // a, n // b)\n    \n    # one line solution (recursive)\n    # return div_check(n, a, b, n // a, n // b)\n    \n    # three line solution\n    # return div_check(n, a, b, find_x(n, a), find_y(n, b))\n    \n    # divide and conquer solution\n    x, y = find_solution(b, a, n)\n    # print(x, y, a, b, n)\n    return (y, x) if a < b else (x, y)\n",
        "num_ids": 189
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1,n+1):\n        for y in range(1,n+1):\n            if a*x + b*y == n:\n                return x, y\n    return None\n",
        "num_ids": 51
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n    \n    \n    \n    \n    \n    \ndef remove_elements2(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = [i for i in list1 if i not in list2]\n    return list3\n    \n    \n    \n    \n    \n    \ndef remove_elements3(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1845
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if type(list1)!= type([]) or type(list2)!= type([]):\n        return None\n    # list1.sort()\n    # list2.sort()\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\n",
        "num_ids": 75
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    while len(list2) > 0:\n        for item in list2:\n            while item in list1:\n                list1.remove(item)\n        list2.pop()\n    return list1\n",
        "num_ids": 50
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n",
        "num_ids": 39
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # sum = 0\n    # for i in range(n//2 + 1):\n    #     sum += i\n    # return sum\n    return n + sum_series(n-2) if n > 1 else 1\n    \n    \ndef sum_series_v2(n, x=0, y=1):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return 1\n    return sum_series_v2(n-2, x, y)\n    \n    \ndef fibonacci(n):\n    '''\n    Write a function that uses recursion to return the nth Fibonacci number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n    \n    \ndef fibonacci_v2(n, x=0, y=1):\n    '''\n    Write a function that uses recursion to return the nth Fibonacci number.\n    '''\n    if n <= 1:\n        return 1\n    return fibonacci_v2(n-1, x, y) + fibonacci_v2(n-2, x, y)\n    \n    \ndef lucas(n):\n    '''\n    Write a function to compute the nth Lucas number using recursion.\n    '''\n    if n == 0 or n == 1:\n        return 2\n    return lucas(n-1) + lucas(n-2)\n    \n    \ndef lucas_v2(n, x=2, y=1):\n    '''\n    Write a function to compute the nth Lucas number using recursion.\n    '''\n    if n == 0 or n == 1:\n        return x\n    return lucas_v2(n-1, x, y) + lucas_v2(n-2, x, y)\n    \n    \ndef sum_series(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    if n == 0:\n        return x\n    return sum_series(n-1, x, y) + y\n    \n    \ndef sum_series_v2(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    if n == 0:\n        return x\n    return sum_series_v2(n-1, x, y) + y\n    \n    \ndef sum_series_v3(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    return [sum_series_v2(n, x, y), sum_series_v2(n, x, y), sum_series_v2(n, x, y)]\n    \n    \ndef sum_series_v4(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    return [sum_series_v2(n, x, y), sum_series_v2(n, x, y), sum_series_v2(n, x, y)]\n    \n    \ndef sum_series_v5(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    return [sum_series_v2(n, x, y), sum_series_v2(n, x, y), sum_series_v2(n, x, y)]\n    \n    \ndef sum_series_v6(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    return [sum_series_v2(n, x, y), sum_series_v2(n, x, y), sum_series_v2(n, x, y)]\n    \n    \ndef sum_series_v7(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    return [sum_series_v2(n, x, y), sum_series_v2(n, x, y), sum_series_v2(n, x, y)]\n    \n    \ndef sum_series_v8(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    return [sum_series_v2(n, x, y), sum_series_v2(n, x, y), sum_series_v2(n, x, y)]\n    \n    \ndef sum_series_v9(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    return [sum_series_v2(n, x, y), sum_series_v2(n, x, y), sum_series_v2(n, x, y)]\n    \n    \ndef sum_series_v10(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    return [sum_series_v2(n, x, y), sum_series_v2(n, x, y), sum_series_v2(n, x, y)]\n    \n    \ndef sum_series_v11(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    return [sum_series_v2(n, x, y), sum_series_v2(n, x, y), sum_series_v2(n, x, y)]\n    \n    \ndef sum_series_v12(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    return [sum_series_v2(n, x, y), sum_series_v2(n, x, y), sum_series_v2(n, x, y)]\n    \n    \ndef sum_series_v13(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    return [sum_series_v2(n, x, y), sum_series_v2(n, x, y), sum_series_v2(n, x, y)]\n    \n    \ndef sum_series_v14(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    return [sum_series_v2(n, x, y), sum_series_v2(n, x, y), sum_series_v2(n, x, y)]\n    \n    \ndef sum_series_v15(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    return [sum_series_v2(n, x, y), sum_series_v2(n, x, y), sum_series_v2(n, x, y)]\n    \n    \ndef sum_series_v16(n, x=0, y=1):\n    '''\n    Write a function to compute the nth value of a summation series using recursion.\n    '''\n    return [sum_series_v2(n, x, y), sum_series_v2(n, x, y), sum_series_v2(n, x, y)]\n    \n    \ndef sum_series_v17(n, x=0",
        "num_ids": 62
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return \"I don't know.\"\n    else:\n        sum = 0\n        for i in range(0, n // 2):\n            sum += n - 2*i\n        return sum\n",
        "num_ids": 53
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 'n must be >= 0'\n    elif n <= 2:\n        return n\n    else:\n        return sum_series(n-2) + sum_series(n-4)\n",
        "num_ids": 55
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n        \ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of n, n!=1*2*3*...*(n-1)*n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n        \ndef reverse(s):\n    '''\n    Write a function to calculate the reverse of a string, from the last to the first\n    '''\n    if len(s) == 1:\n        return s\n    else:\n        return s[-1] + reverse(s[:-1])\n        \ndef search(s, ch):\n    '''\n    Write a function to find the index of the first occurrence of ch in s, if there is any.\n    '''\n    if len(s) == 0:\n        return 0\n    elif s[0] == ch:\n        return 0\n    else:\n        return 1 + search(s[1:], ch)\n    \ndef search_all(s, ch):\n    '''\n    Write a function to find all occurrences of ch in s, if there is any.\n    '''\n    if len(s) == 0:\n        return []\n    elif s[0] == ch:\n        return [0] + search_all(s[1:], ch)\n    else:\n        return [1 + search_all(s[1:], ch)] + search_all(s[1:], ch)\n        \ndef is_palindrome(s):\n    '''\n    Write a function to check if s is a palindrome, for instance, racecar.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == s[-1]:\n        return is_palindrome(s[1:-1])\n    else:\n        return False\n        \ndef is_power(a, b):\n    '''\n    Write a function to check if a is a power of b, for instance, 16 is a power of 2.\n    '''\n    if a == 1:\n        return True\n    elif b == 1:\n        return False\n    elif a == b:\n        return True\n    elif a % b == 0:\n        return is_power(a / b, b)\n    else:\n        return False\n        \ndef is_power_inf(a, b):\n    '''\n    Write a function to check if a is a power of b, for instance, 16 is a power of 2.\n    '''\n    if b == 1:\n        return False\n    elif a == 1:\n        return True\n    elif a == b:\n        return True\n    elif a % b == 0:\n        return True\n    else:\n        return is_power_inf(a, b - 1)\n        \ndef product(s):\n    '''\n    Write a function to calculate the product of all the numbers in the list.\n    '''\n    if len(s) == 1:\n        return s[0]\n    else:\n        return s[0] * product(s[1:])\n        \ndef product_inf(s):\n    '''\n    Write a function to calculate the product of all the numbers in the list.\n    '''\n    if len(s) == 1:\n        return s[0]\n    elif len(s) == 0:\n        return 1\n    else:\n        return s[0] * product_inf(s[1:])\n        \ndef find_max(s):\n    '''\n    Write a function to find the max number in a list.\n    '''\n    if len(s) == 1:\n        return s[0]\n    elif s[0] > s[1]:\n        return s[0]\n    else:\n        return find_max(s[1:])\n        \ndef sum_list(s):\n    '''\n    Write a function to add all the elements in a list.\n    '''\n    if len(s) == 1:\n        return s[0]\n    else:\n        return s[0] + sum_list(s[1:])\n        \ndef sum_list_inf(s):\n    '''\n    Write a function to add all the elements in a list.\n    '''\n    if len(s) == 1:\n        return s[0]\n    elif len(s) == 0:\n        return 0\n    else:\n        return s[0] + sum_list_inf(s[1:])\n        \ndef sum_list_iter(s):\n    '''\n    Write a function to add all the elements in a list using iterative approach.\n    '''\n    if len(s) == 1:\n        return s[0]\n    else:\n        sum = 0\n        for num in s:\n            sum = sum + num\n        return sum\n        \ndef sum_list_rec(s):\n    '''\n    Write a function to add all the elements in a list using recursive approach.\n    '''\n    if len(s) == 1:\n        return s[0]\n    else:\n        return s[0] + sum_list_rec(s[1:])\n        \ndef sum_list_rec_inf(s):\n    '''\n    Write a function to add all the elements in a list using recursive approach.\n    '''\n    if len(s) == 1:\n        return s[0]\n    elif len(s) == 0:\n        return 0\n    else:\n        return s[0] + sum_list_rec_inf(s[1:])\n        \ndef fibonacci(n):\n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n        \ndef fibonacci_inf(n):\n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_inf(n - 1) + fibonacci_inf(n - 2)\n        \ndef fibonacci_iter(n):\n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    a = 0\n    b = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(n - 1):\n            c = a + b\n            a = b\n            b = c\n        return b\n        \ndef fibonacci_iter_inf(n):\n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    a = 0\n    b = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(n - 1):\n            c = a + b\n            a = b\n            b = c\n        return b\n        \ndef fibonacci_rec(n):\n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_rec(n - 1) + fibonacci_rec(n - 2)\n        \ndef fibonacci_rec_inf(n):\n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_rec_inf(n - 1) + fibonacci_rec_inf(n - 2)\n        \ndef fibonacci_rec_tail(n, a = 0, b = 1):\n    '''\n    Write a function to calculate the nth Fibonacci number.\n    '''\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        return fibonacci_rec",
        "num_ids": 36
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sum_series(n-1) + sum_series(n-2)\n",
        "num_ids": 49
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return False\n    else:\n        return n - 2 * sum_series(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0, n // 2):\n        sum += n - 2*i\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    x = 2\n    if n == 0:\n        return 0\n    else:\n        return (n - 2*x) + sum_series(n - 2*x)\n",
        "num_ids": 43
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        n = n // 2\n    else:\n        n = (n + 1) // 2\n    return n\n",
        "num_ids": 37
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l ** 2) / (4 * tan(pi / l))\n",
        "num_ids": 22
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (l * s ** 2) / (4 * tan(pi / s))\n    return a\n    \nprint(area_polygon(4, 2))\n",
        "num_ids": 41
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    polygon = s * l\n    area = polygon * 1/2\n    print(f'The area of a {l} sided polygon is {area} units squared.')\n",
        "num_ids": 44
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l/2) * ((s*tan(pi/l))/2)\n",
        "num_ids": 25
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    A = (s ** 2) * (tan((pi / l))) / 2\n    return A\n",
        "num_ids": 25
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l ** 2 / (4 * tan(pi / l))\n",
        "num_ids": 20
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l * s**2) / (4 * tan(pi/s))\n    return area\n",
        "num_ids": 27
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l**2) / (4 * tan(pi / l))\n",
        "num_ids": 22
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (1/2)*(s)*(l)*tan(pi/n)\n",
        "num_ids": 22
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2/4*(l-2))/(tan(pi/l))\n",
        "num_ids": 24
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1=0\n    sum2=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum1=sum1+i\n    for i in range(1,n):\n        if(sum1%i==0):\n            sum2=sum2+i\n    if(sum1==sum2):\n        return True\n    return False\n",
        "num_ids": 93
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a=math.sqrt(n)\n    if a==int(a):\n        print(n, \" is a perfect square\")\n    elif n%a==0:\n        print(n,\" is a perfect square\")\n    else:\n        print(n,\" is not a perfect square\")\n    if n==0:\n        print(n,\" is not a perfect square and is divisible by zero\")\n    else:\n        for i in range(1,n+1):\n            if n%i==0:\n                print(i, \"is a divisor\")\n                if i!=n:\n                    print(i, \"is a divisor of\",n)\n                else:\n                    print(i,\"is a divisor of\",n)\n                if n%i==0:\n                    print(n,\"is divisible by\",i)\n                    if n==i:\n                        print(n,\"is an additive number\")\n                    if n==i+i:\n                        print(n,\"is an additive number\")\n                    if n==i*2:\n                        print(n,\"is an additive number\")\n                    if n==i+i+i:\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1))/2:\n                        print(n,\"is an additive number\")\n                    if n==i+(i+1):\n                        print(n,\"is an additive number\")\n                    if n==i+i+i+i:\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2))/6:\n                        print(n,\"is an additive number\")\n                    if n==i+i+(i+1):\n                        print(n,\"is an additive number\")\n                    if n==i*i+(i+1):\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2))/2:\n                        print(n,\"is an additive number\")\n                    if n==i*i*(i+1):\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2))/2:\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2)*(i+3))/6:\n                        print(n,\"is an additive number\")\n                    if n==i*i*(i+1)*(i+2):\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2)*(i+3))/2:\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2)*(i+3)*(i+4))/6:\n                        print(n,\"is an additive number\")\n                    if n==i*i*(i+1)*(i+2)*(i+3):\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5))/6:\n                        print(n,\"is an additive number\")\n                    if n==i*i*(i+1)*(i+2)*(i+3)*(i+4):\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6))/6:\n                        print(n,\"is an additive number\")\n                    if n==i*i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5):\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6)*(i+7))/6:\n                        print(n,\"is an additive number\")\n                    if n==i*i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6):\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6)*(i+7)*(i+8))/6:\n                        print(n,\"is an additive number\")\n                    if n==i*i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6)*(i+7):\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6)*(i+7)*(i+8)*(i+9))/6:\n                        print(n,\"is an additive number\")\n                    if n==i*i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6)*(i+7)*(i+8):\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6)*(i+7)*(i+8)*(i+9)*(i+10))/6:\n                        print(n,\"is an additive number\")\n                    if n==i*i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6)*(i+7)*(i+8)*(i+9):\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6)*(i+7)*(i+8)*(i+9)*(i+10)*(i+11))/6:\n                        print(n,\"is an additive number\")\n                    if n==i*i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6)*(i+7)*(i+8)*(i+9)*(i+10):\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6)*(i+7)*(i+8)*(i+9)*(i+10)*(i+11)*(i+12))/6:\n                        print(n,\"is an additive number\")\n                    if n==i*i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6)*(i+7)*(i+8)*(i+9)*(i+10)*(i+11):\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6)*(i+7)*(i+8)*(i+9)*(i+10)*(i+11)*(i+12)*(i+13))/6:\n                        print(n,\"is an additive number\")\n                    if n==i*i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6)*(i+7)*(i+8)*(i+9)*(i+10)*(i+11)*(i+12):\n                        print(n,\"is an additive number\")\n                    if n==(i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6)*(i+7)*(i+8)*(i+9)*(i+10)*(i+11)*(i+12)*(i+13)*(i+14))/6:\n                        print(n,\"is an additive number\")\n                    if n==i*i*(i+1)*(i+2)*(i+3)*(i+4)*(i+5)*(i+6)*(i+7)*(i+8)*(i+9)*(i+10)*(i+11)*(i+12)*",
        "num_ids": 2006
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sums = 0\n    for i in range(1, n):\n        if (n % i == 0):\n            sums += i\n    if (sums == n):\n        return True\n    return False\n    \n    \ndef div_prod(n):\n    '''\n    Write a function to determine if the product of the divisors of two integers are the same.\n    '''\n    prods = 1\n    for i in range(1, n):\n        if (n % i == 0):\n            prods *= i\n    if (prods == n):\n        return True\n    return False\n    \n    \ndef int_div(n):\n    '''\n    Write a function to determine if two integers are the same, when one is the divisor of the other.\n    '''\n    if (n % n == 0):\n        return True\n    return False\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if (n <= 1):\n        return False\n    elif (n <= 3):\n        return True\n    else:\n        if (n % 2 == 0 or n % 3 == 0):\n            return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return False\n    return True\n    \n    \ndef is_square(n):\n    '''\n    Write a function to determine if a number is a square.\n    '''\n    if (math.sqrt(n) % 1 == 0):\n        return True\n    return False\n    \n    \ndef is_fib(n):\n    '''\n    Write a function to determine if a number is a fibonacci number.\n    '''\n    if (is_prime(n) or is_square(n)):\n        return False\n    a = int((math.sqrt(5 * n * n + 4) + 1) / 2)\n    if (a % 2 == 0):\n        b = a\n    else:\n        b = a + 1\n    if (int(math.pow(a, 2)) + int(math.pow(b, 2)) == n):\n        return True\n    return False\n    \n    \ndef is_pythag(a, b, c):\n    '''\n    Write a function to determine if three numbers are a pythagorean triplet.\n    '''\n    if (a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or c ** 2 + b ** 2 == a ** 2):\n        return True\n    return False\n    \n    \ndef is_pell(n):\n    '''\n    Write a function to determine if a number is a pell number.\n    '''\n    if (is_prime(n) or is_square(n)):\n        return False\n    a = int((math.sqrt(n) + 1) / 2)\n    if (a % 2 == 0):\n        b = a\n    else:\n        b = a + 1\n    if (is_prime(b)):\n        return True\n    return False\n    \n    \ndef is_carm(n):\n    '''\n    Write a function to determine if a number is a carmichael number.\n    '''\n    if (is_prime(n)):\n        return False\n    a = int((math.sqrt(n) + 1) / 2)\n    if (a % 2 == 0):\n        b = a\n    else:\n        b = a + 1\n    if (is_prime(b)):\n        return False\n    for i in range(2, n):\n        if (n % i == 0):\n            if (i ** 2!= n):\n                return False\n    return True\n    \n    \ndef is_harshad(n):\n    '''\n    Write a function to determine if a number is a harshad number.\n    '''\n    if (is_prime(n) or is_square(n)):\n        return False\n    a = int(math.sqrt(n))\n    while (a >= 1):\n        if (n % a == 0):\n            if (a == n / a):\n                return True\n            else:\n                return False\n        a -= 1\n    return False\n    \n    \ndef is_lucky(n):\n    '''\n    Write a function to determine if a number is a lucky number.\n    '''\n    if (n <= 1):\n        return False\n    for i in range(2, n):\n        if (n % i == 0):\n            if (i == n / i):\n                return False\n    return True\n    \n    \ndef is_amstrong(n):\n    '''\n    Write a function to determine if a number is an amstrong number.\n    '''\n    if (is_prime(n)):\n        return False\n    s = str(n)\n    t = 0\n    for i in range(len(s)):\n        t += int(s[i]) ** len(s)\n    if (t == n):\n        return True\n    return False\n    \n    \ndef is_curious(n):\n    '''\n    Write a function to determine if a number is a curious number.\n    '''\n    if (is_prime(n)):\n        return False\n    for i in range(2, n):\n        if (n % i == 0):\n            if (is_prime(i)):\n                return False\n    return True\n    \n    \ndef is_circle(n):\n    '''\n    Write a function to determine if a number is a circular number.\n    '''\n    if (is_prime(n)):\n        return False\n    for i in range(2, n):\n        if (n % i == 0):\n            if (is_prime(n / i)):\n                return False\n    return True\n    \n    \ndef is_square(n):\n    '''\n    Write a function to determine if a number is a square.\n    '''\n    if (math.sqrt(n) % 1 == 0):\n        return True\n    return False\n    \n    \ndef is_square_1(n):\n    '''\n    Write a function to determine if a number is a square.\n    '''\n    if (math.sqrt(n) % 1 == 0):\n        return True\n    return False\n    \n    \ndef is_cube(n):\n    '''\n    Write a function to determine if a number is a cube.\n    '''\n    if (is_square(n) or is_prime(n)):\n        return False\n    for i in range(2, n):\n        if (n % i == 0):\n            if (is_square(i)):\n                return True\n    return False\n    \n    \ndef is_square_2(n):\n    '''\n    Write a function to determine if a number is a square.\n    '''\n    if (math.sqrt(n) % 1 == 0):\n        return True\n    return False\n    \n    \ndef is_cube_2(n):\n    '''\n    Write a function to determine if a number is a cube.\n    '''\n    if (is_square_2(n) or is_prime(n)):\n        return False\n    for i in range(2, n):\n        if (n % i == 0):\n            if (is_square_2(i)):\n                return True\n    return False\n    \n    \ndef is_pent(n):\n    '''\n    Write a function to determine if a number is a pent number.\n    '''\n    if (is_prime(n) or is_square(n)):\n        return False\n    for i in range(2, n):\n        if (n % i == 0):\n            if (is_prime(n / i)):\n                return False\n    return True\n    \n    \ndef is_hex(n):\n    '''\n    Write a function to determine if a number is a hex number.\n    '''\n    if (is_prime(n) or is_square(n)):\n        return False\n    for i in range(2, n):\n        if (n % i == 0):\n            if (is_prime(n / i)):\n                return False\n    return True\n    \n    \ndef is_oct(n):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 2\n    d_1 = 1\n    d_2 = 1\n    while i * i < n: \n        if n % i == 0: \n            d_1 += i \n            if n // i!= i: \n                d_1 += n // i \n        i += 1\n    for j in range(i, int(math.sqrt(n)) + 1): \n        if n % j == 0: \n            if n // j!= j: \n                d_2 += j + n // j \n            else: \n                d_2 += j \n    return d_1 == d_2 \ndef div_sum_2(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 2\n    s_1 = 0\n    s_2 = 0\n    while i * i < n: \n        if n % i == 0: \n            if n // i!= i: \n                s_1 += i + n // i \n            else: \n                s_1 += i \n        i += 1\n    for j in range(i, int(math.sqrt(n)) + 1): \n        if n % j == 0: \n            if n // j!= j: \n                s_2 += j + n // j \n            else: \n                s_2 += j \n    return s_1 == s_2 \ndef divisor_generator(n): \n    '''\n    Write a function to generate all the divisors of an integer.\n    '''\n    large_divisors = []\n    for i in range(1, int(math.sqrt(n) + 1)): \n        if n % i == 0: \n            yield i \n            if i*i!= n: \n                yield n // i \ndef divisor_generator_2(n): \n    '''\n    Write a function to generate all the divisors of an integer.\n    '''\n    large_divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            yield i \n            if i*i!= n: \n                yield n // i \ndef is_square(n): \n    '''\n    Write a function to determine if a number is a square number.\n    '''\n    n = abs(n) \n    for i in range(1, int(math.sqrt(n) + 1)): \n        if i*i == n: \n            return True \n    return False \ndef is_square_2(n): \n    '''\n    Write a function to determine if a number is a square number.\n    '''\n    return n ** 0.5 == int(n ** 0.5) \ndef is_square_3(n): \n    '''\n    Write a function to determine if a number is a square number.\n    '''\n    if n < 0: \n        return False \n    m = int(math.sqrt(n)) \n    for i in range(1, m + 1): \n        if i * i == n: \n            return True \n    return False \ndef is_prime(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2: \n        return False \n    for i in range(2, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            return False \n    return True \ndef is_prime_2(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2: \n        return False \n    for i in range(2, n): \n        if n % i == 0: \n            return False \n    return True \ndef is_prime_3(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2: \n        return False \n    if n == 2 or n == 3: \n        return True \n    if n % 2 == 0 or n % 3 == 0: \n        return False \n    i = 5 \n    while i * i <= n: \n        if n % i == 0 or n % (i + 2) == 0: \n            return False \n        i += 6 \n    return True \ndef is_prime_4(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2: \n        return False \n    if n == 2 or n == 3: \n        return True \n    if n % 2 == 0 or n % 3 == 0: \n        return False \n    i = 5 \n    while i * i <= n: \n        if n % i == 0 or n % (i + 2) == 0: \n            return False \n        i += 6 \n    return True \ndef is_prime_5(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2: \n        return False \n    if n == 2 or n == 3: \n        return True \n    if n % 2 == 0 or n % 3 == 0: \n        return False \n    i = 5 \n    while i * i <= n: \n        if n % i == 0 or n % (i + 2) == 0: \n            return False \n        i += 6 \n    return True \ndef is_prime_6(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2: \n        return False \n    if n == 2 or n == 3: \n        return True \n    if n % 2 == 0 or n % 3 == 0: \n        return False \n    i = 5 \n    while i * i <= n: \n        if n % i == 0 or n % (i + 2) == 0: \n            return False \n        i += 6 \n    return True \ndef prime_factors(n): \n    '''\n    Write a function to determine the prime factors of a number.\n    '''\n    if n == 1: \n        return [] \n    res = [] \n    i = 2 \n    while i * i < n: \n        if n % i == 0: \n            res.append(i) \n            n //= i \n            while n % i == 0: \n                res.append(i) \n                n //= i \n        else: \n            i += 1 \n        if n == 1: \n            break \n    if n > 1: \n        res.append(n) \n    return res \ndef prime_factors_2(n): \n    '''\n    Write a function to determine the prime factors of a number.\n    '''\n    if n == 1: \n        return [] \n    res = [] \n    i = 2 \n    while i * i < n: \n        if n % i == 0: \n            res.append(i) \n            n //= i \n            while n % i == 0: \n                res.append(i) \n                n //= i \n        else: \n            i += 1 \n        if n == 1: \n            break \n    if n > 1: \n        res.append(n) \n    return res \ndef prime_factors_3(n): \n    '''\n    Write a function to determine the prime factors of a number.\n    '''\n    if n == 1: \n        return [] \n    res = [] \n    i = 2 \n    while i * i < n: \n        if n % i == 0: \n            res.append(i) \n            n //= i \n            while n % i == 0: \n                res.append(i) \n                n //= i \n        else: \n            i += 1 \n        if n == 1: \n            break \n    if n > 1: \n        res.append(n) \n    return res \ndef prime_factors_4(n): \n    '''\n    Write a function to determine th",
        "num_ids": 9
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # n = input(\"Enter an integer: \")\n    # if n.isdigit() == False:\n    #     return \"error\"\n    # n = int(n)\n    sum_of_divisors = sum([i for i in range(1,int(math.sqrt(n))+1) if n%i==0])\n    print(sum_of_divisors)\n    print(sum([i for i in range(1,int(math.sqrt(n))+1) if n%i==0]))\n    return \"numbers of divisors are same\" if sum_of_divisors == sum([i for i in range(1,int(math.sqrt(n))+1) if n%i==0]) else \"numbers of divisors are not same\"\n",
        "num_ids": 193
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n): \n        if n % i == 0: \n            sum_of_divisors += i \n    if sum_of_divisors == n: \n        return True \n    elif sum_of_divisors > n: \n        return True\n    else: \n        return False\n",
        "num_ids": 94
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def div_sum_helper(n, l, sum_):\n        if n == 1:\n            sum_l.append(sum_)\n        else:\n            if n % 2 == 0:\n                div_sum_helper(n / 2, l, sum_ + n / 2)\n            else:\n                div_sum_helper(n - 1, l, sum_ + n - 1)\n    sum_l = []\n    div_sum_helper(n, l, 0)\n    print(sum_l)\n    if len(sum_l) > 0:\n        sum_l = sorted(set(sum_l))\n    return len(sum_l) == 0\n",
        "num_ids": 165
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    list_of_divisors = []\n    #f(x) = 1 + 2 + 3 + 4 + 5 +... + n = n(n+1)/2\n    #f(x) = 1 + 2 + 3 + 4 +... + n = n(n+1)/2 - n \n    #f(x) = 1 + 2 + 3 + 4 +... + n - n = n(n+1)/2 - 2n\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 3n + 1\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 4n + 2\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 5n + 3\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 6n + 4\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 7n + 5\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 8n + 6\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 9n + 7\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 10n + 8\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 11n + 9\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 12n + 10\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 13n + 11\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 14n + 12\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 15n + 13\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 16n + 14\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 17n + 15\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 18n + 16\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 19n + 17\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 20n + 18\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 21n + 19\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 22n + 20\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 23n + 21\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 24n + 22\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 25n + 23\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 26n + 24\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 27n + 25\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 28n + 26\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 29n + 27\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 30n + 28\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 31n + 29\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 32n + 30\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 33n + 31\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 34n + 32\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 35n + 33\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 36n + 34\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 37n + 35\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 38n + 36\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 39n + 37\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 40n + 38\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 41n + 39\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 42n + 40\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 43n + 41\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 44n + 42\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 45n + 43\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 46n + 44\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 47n + 45\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 48n + 46\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 49n + 47\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 50n + 48\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 51n + 49\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 52n + 50\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 53n + 51\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 - 54n + 52\n    #f(x) = 1 + 2 + 3 + 4 +... + n - n + 1 = n(n+1)/2 ",
        "num_ids": 2007
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1, n):\n        if n%i == 0:\n            s += i\n    return s \n",
        "num_ids": 37
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors.append(i)\n    sum_of_divisors.append(n)\n",
        "num_ids": 61
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict1 = {}\n    for i in str1:\n        if i.upper() in dict1:\n            dict1[i.upper()] += 1\n        else:\n            dict1[i.upper()] = 1\n    print(dict1)\ncount_char_position(\"The quick brown fox jumps over the lazy dog\")",
        "num_ids": 78
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # To store the characters\n    characters = {}\n    for i in str1:\n        characters[i] = characters.get(i,0) + 1\n    \n    # To store the count of same characters in alphabet\n    alphabet = {}\n    for i in range(0,26):\n        alphabet[chr(ord('a')+i)] = 0\n    \n    # Count the same characters in alphabet\n    for key,value in characters.items():\n        alphabet[key] += value\n    \n    # Result\n    result = 0\n    for key,value in alphabet.items():\n        if value == 0:\n            result += 1\n    return result\n",
        "num_ids": 160
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == 'a' or str1[i] == 'A':\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len(list(filter(lambda x: str1.index(x.upper()) == ord(x) - ord(\"A\"), str1)))\n",
        "num_ids": 36
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str1[i] and i < 26:\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    freq = [0] * len(alphabet)\n    str1 = str1.lower()\n    for c in str1:\n        if c in alphabet:\n            freq[alphabet.index(c)] += 1\n",
        "num_ids": 136
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    \n    \n    return int()\n",
        "num_ids": 13
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1=str1.lower()\n    alpha='abcdefghijklmnopqrstuvwxyz'\n    count=0\n    for i in str1:\n        if i in alpha:\n            count+=alpha.find(i)\n    return count\nprint(count_char_position('aPp99@\u00a3$%&))$%^&**('))\n",
        "num_ids": 91
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([letter for letter in str1 if str.upper(letter) == str.upper(letter)[0]])\n",
        "num_ids": 30
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    \n    \n    \n    def check_for_char(str):\n        '''\n        Write a function to check if a character is in the english alphabet\n        '''\n        \n        \n    def check_if_char_is_in_alphabet(str):\n        '''\n        Write a function to check if a character is in the english alphabet\n        '''\n        \n        \n    def count_character_frequency(str):\n        '''\n        Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n        '''\n        \n        \n    count = 0\n    alphabet_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for i in range(len(str1)):\n        for j in range(len(alphabet_list)):\n            if str1[i] == alphabet_list[j]:\n                count += 1\n                \n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1853
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0,len(A)):\n        for j in range(i+1,len(A)):\n            if ((A[i]^A[j])%2==0):\n                count+=1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    for i in A:\n        for j in A:\n            if i ^ j == 0:\n                even += 1\n    return even\n",
        "num_ids": 39
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    num_even_pairs = 0\n    # iterate over the range of length of A\n    for i in range(len(A)):\n        # iterate over the range of length of A\n        for j in range(len(A)):\n            # check if the element xor to A[i] and A[j] is even\n            if (A[i] ^ A[j]) & 1 == 0:\n                # increment the count\n                num_even_pairs += 1\n    return num_even_pairs\n",
        "num_ids": 124
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0, len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 2 or A[i] ^ A[j] == -2:\n                count += 1\n                break\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for x in A:\n        for y in A:\n            if x ^ y == 0:\n                even_count += 1\n    return even_count\n",
        "num_ids": 45
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    B = []\n    for i in A:\n        for j in A:\n            if i^j not in B and i^j in range(1,10001):\n                B.append(i^j)\n    B.sort()\n    count = 0\n    for i in B:\n        if i & 1 == 0:\n            count += 1\n    return count\n",
        "num_ids": 88
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    num_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if xor(A[i], A[j]) % 2 == 0:\n                num_pairs += 1\n    return num_pairs\n",
        "num_ids": 72
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    def count(array):\n        return sum([1 for pair in array if bin(pair[0]^pair[1])[2:].count(\"1\")%2==0])\n",
        "num_ids": 44
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    n = int(n)\n    if n < 0:\n        return -1\n    if n < 2:\n        return 2\n    return 2 << (n - 1).bit_length()\n",
        "num_ids": 49
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    if n < 0:\n        return -1\n    return 2**(n-1).bit_length()\n",
        "num_ids": 36
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while x < n: \n        x *= 2\n    return x\n",
        "num_ids": 25
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n and not(n & (n - 1))): \n        return n \n    n -= 1\n    return next_power_of_2(n) \n",
        "num_ids": 43
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = n - 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n",
        "num_ids": 58
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 0:\n        n = -n\n    return 1 if n < 1 else 2 if n == 1 else 2**((n-1).bit_length())\n",
        "num_ids": 41
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2**((n - 1).bit_length())\n    # 1) If n == 0, then return 1.\n    # 2) Find the smallest power of 2 that is greater than or equal to n.\n    #    Use the method we just covered to find the binary representation of the binary representation.\n    #    Remember that 0b101010 is 101010 in base-10.\n    #    Because we want the smallest power of 2 that is greater than or equal to n, \n    #    we can start our search for the smallest power of 2 at 1024.\n    # 3) If the current number is odd, then double it, and add 1.\n    # 4) Then we can keep searching for the next power of 2 by halving n.\n    #    Once we find a power of 2 that is greater than or equal to n, \n    #    we can stop searching.\n",
        "num_ids": 205
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # check if n is positive \n    if n < 0: \n        print('Invalid Input') \n    # if n is greater than or equal to 0 \n    if n >= 0: \n        # initialize powers of two \n        powers = [1] \n        # loop to multiply each number with 2 untill the result is greater than or equal to n \n        for x in range(1, n+1): \n            powers.append(2**x) \n        return powers ",
        "num_ids": 115
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n",
        "num_ids": 16
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if (n <= 0) else (2 ** math.ceil(math.log(n, 2)))\n",
        "num_ids": 29
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    for i in range(len(a)):\n        if a[i]==x:\n            count=count+1\n    return(count)\n    \ndef most_frequent(a):\n    '''\n    Write a function to find the most occurring element in a list.\n    '''\n    max_value = 0\n    max_item = None\n    for item in a:\n        if frequency(a,item) > max_value:\n            max_value = frequency(a,item)\n            max_item = item\n    return max_item\n    \ndef my_frequency(a):\n    '''\n    Write a function to return the frequency of a list's elements.\n    '''\n    freq_dict = dict()\n    for item in a:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n    \ndef my_most_frequent(a):\n    '''\n    Write a function to find the most occurring element in a list.\n    '''\n    max_value = 0\n    max_item = None\n    freq_dict = my_frequency(a)\n    for item in freq_dict:\n        if freq_dict[item] > max_value:\n            max_value = freq_dict[item]\n            max_item = item\n    return max_item\n    \ndef count(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count=count+1\n    return count\n    \ndef my_count(a,x):\n    '''\n    Write a function to return the number of occurrences of a list's elements.\n    '''\n    count_dict = dict()\n    for item in a:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict\n    \ndef my_most_count(a):\n    '''\n    Write a function to find the most occurring element in a list.\n    '''\n    max_value = 0\n    max_item = None\n    count_dict = my_count(a)\n    for item in count_dict:\n        if count_dict[item] > max_value:\n            max_value = count_dict[item]\n            max_item = item\n    return max_item\n    \ndef my_count_frequency(a):\n    '''\n    Write a function to return the number of occurrences of a list's elements.\n    '''\n    count_dict = dict()\n    for item in a:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict\n    \ndef my_most_count_frequency(a):\n    '''\n    Write a function to find the most occurring element in a list.\n    '''\n    max_value = 0\n    max_item = None\n    count_dict = my_count_frequency(a)\n    for item in count_dict:\n        if count_dict[item] > max_value:\n            max_value = count_dict[item]\n            max_item = item\n    return max_item\n    \ndef my_mode(a):\n    '''\n    Write a function to find the most occurring element in a list.\n    '''\n    max_value = 0\n    max_item = None\n    count_dict = my_count_frequency(a)\n    for item in count_dict:\n        if count_dict[item] > max_value:\n            max_value = count_dict[item]\n            max_item = item\n    return max_item\n    \ndef my_median(a):\n    '''\n    Write a function to return the median of a list of numbers.\n    '''\n    if len(a)%2==0:\n        median=(a[(len(a)+1)/2-1]+a[len(a)/2])/2\n    else:\n        median=a[len(a)/2]\n    return median\n",
        "num_ids": 63
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    i=0\n    while i < len(a):\n        if a[i] == x:\n            return a.count(x)\n        i+=1\n    return i\n",
        "num_ids": 44
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if a==[] or x not in a:\n        return 0\n    else:\n        return (a.count(x))\n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    cnt = 0\n    for i in a: \n        if i == x: \n            cnt = cnt + 1\n    return cnt\na = [1,2,3,4,5,6,7,8,9,10]\nprint(frequency(a, 10))\n",
        "num_ids": 71
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count+1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count+1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for element in a:\n        if element == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if x==a[i]:\n            count+=1\n    return count\ndef max_min(a,x):\n    '''\n    Write a function to find the maximum number in a given list, and the minimum number in a given list.\n    '''\n    max=a[0]\n    min=a[0]\n    for i in range(1,len(a)):\n        if x==a[i]:\n            max=x\n            min=x\n    return max,min\ndef palindrome(a):\n    '''\n    Write a function to determine whether the given string is palindrome or not.\n    '''\n    new=''\n    for i in range(len(a)):\n        new+=a[len(a)-i-1]\n    if new==a:\n        return 'Yes'\n    else:\n        return 'No'\ndef rotate(a,b):\n    '''\n    Write a function to rotate a given list of n elements to the left by k steps.\n    '''\n    for i in range(b):\n        a.append(a[0])\n        del a[0]\n    return a\ndef prime(x):\n    '''\n    Write a function that returns a list of all the prime numbers that are less than or equal to a given number.\n    '''\n    prime_list=[]\n    for i in range(2,x):\n        prime=True\n        for j in range(2,i):\n            if i%j==0:\n                prime=False\n        if prime:\n            prime_list.append(i)\n    return prime_list\ndef list_primes(x):\n    '''\n    Write a function to return a list of all the prime numbers that are less than or equal to a given number.\n    '''\n    prime_list=[]\n    for i in range(2,x):\n        prime=True\n        for j in range(2,i):\n            if i%j==0:\n                prime=False\n        if prime:\n            prime_list.append(i)\n    return prime_list\ndef prime_factors(x):\n    '''\n    Write a function to return the prime factors of a given integer.\n    '''\n    prime_factors_list=[]\n    for i in range(2,x+1):\n        prime=True\n        for j in range(2,i):\n            if i%j==0:\n                prime=False\n        if prime:\n            prime_factors_list.append(i)\n    return prime_factors_list\ndef prime_factors_list(x):\n    '''\n    Write a function to return the prime factors of a given integer.\n    '''\n    prime_factors_list=[]\n    for i in range(2,x+1):\n        prime=True\n        for j in range(2,i):\n            if i%j==0:\n                prime=False\n        if prime:\n            prime_factors_list.append(i)\n    return prime_factors_list\ndef remove_duplicates(a):\n    '''\n    Write a function to remove all the duplicate numbers from a given list.\n    '''\n    unique_list=[]\n    for i in range(len(a)):\n        if a[i] not in unique_list:\n            unique_list.append(a[i])\n    return unique_list\ndef remove_duplicates_set(a):\n    '''\n    Write a function to remove all the duplicate numbers from a given list.\n    '''\n    unique_list=set(a)\n    return list(unique_list)\ndef remove_duplicates_index(a):\n    '''\n    Write a function to remove all the duplicate numbers from a given list.\n    '''\n    unique_list=[]\n    duplicate_list=[]\n    for i in range(len(a)):\n        if a[i] in unique_list:\n            duplicate_list.append(a[i])\n        else:\n            unique_list.append(a[i])\n    return unique_list,duplicate_list\ndef remove_duplicates_index_2(a):\n    '''\n    Write a function to remove all the duplicate numbers from a given list.\n    '''\n    unique_list=[]\n    duplicate_list=[]\n    for i in range(len(a)):\n        if a[i] in unique_list:\n            duplicate_list.append(a[i])\n        else:\n            unique_list.append(a[i])\n    return unique_list,duplicate_list\ndef remove_duplicates_index_3(a):\n    '''\n    Write a function to remove all the duplicate numbers from a given list.\n    '''\n    unique_list=[]\n    duplicate_list=[]\n    for i in range(len(a)):\n        if a[i] not in unique_list:\n            unique_list.append(a[i])\n        else:\n            duplicate_list.append(a[i])\n    return unique_list,duplicate_list\ndef list_of_numbers(x):\n    '''\n    Write a function that accepts a string as a parameter and calculates the number of digits and letters.\n    '''\n    digit_list=[]\n    letter_list=[]\n    for i in range(len(x)):\n        if x[i].isdigit():\n            digit_list.append(x[i])\n        else:\n            letter_list.append(x[i])\n    return digit_list,letter_list\ndef list_of_numbers_2(x):\n    '''\n    Write a function that accepts a string as a parameter and calculates the number of digits and letters.\n    '''\n    digit_list=[]\n    letter_list=[]\n    for i in range(len(x)):\n        if x[i].isdigit():\n            digit_list.append(x[i])\n        else:\n            letter_list.append(x[i])\n    return digit_list,letter_list\ndef list_of_numbers_3(x):\n    '''\n    Write a function that accepts a string as a parameter and calculates the number of digits and letters.\n    '''\n    digit_list=[]\n    letter_list=[]\n    for i in range(len(x)):\n        if x[i].isdigit():\n            digit_list.append(x[i])\n        else:\n            letter_list.append(x[i])\n    return digit_list,letter_list\ndef list_of_numbers_4(x):\n    '''\n    Write a function that accepts a string as a parameter and calculates the number of digits and letters.\n    '''\n    digit_list=[]\n    letter_list=[]\n    for i in range(len(x)):\n        if x[i].isdigit():\n            digit_list.append(x[i])\n        else:\n            letter_list.append(x[i])\n    return digit_list,letter_list\ndef list_of_numbers_5(x):\n    '''\n    Write a function that accepts a string as a parameter and calculates the number of digits and letters.\n    '''\n    digit_list=[]\n    letter_list=[]\n    for i in range(len(x)):\n        if x[i].isdigit():\n            digit_list.append(x[i])\n        else:\n            letter_list.append(x[i])\n    return digit_list,letter_list\ndef list_of_numbers_6(x):\n    '''\n    Write a function that accepts a string as a parameter and calculates the number of digits and letters.\n    '''\n    digit_list=[]\n    letter_list=[]\n    for i in range(len(x)):\n        if x[i].isdigit():\n            digit_list.append(x[i])\n        else:\n            letter_list.append(x[i])\n    return digit_list,letter_list\ndef list_of_numbers_7(x):\n    '''\n    Write a function that accepts a string as a parameter and calculates the number of digits and letters.\n    '''\n    digit_list=[]\n    letter_list=[]\n    for i in range(len(x)):\n        if x[i].isdigit():\n            digit_lis",
        "num_ids": 43
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return None\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 63
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum([i for i in list1[m:n] if i % 2 == 0])\n",
        "num_ids": 25
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return 0\n    else:\n        sum1 = 0\n        for i in range(m,n+1):\n            sum1 += list1[i]\n        return sum1\n",
        "num_ids": 51
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # validate if list contains numbers\n    if all(isinstance(i, int) or isinstance(i, float) for i in list1):                                                                                                                                                                    \n        if len(list1) >= m and len(list1) >= n:                                                                                                                                                                                                                        \n            return sum(list1[m:n])                                                                                                                                                                                                                        \n        else:                                                                                                                                                                                                                        \n            raise ValueError('Invalid Input')                                                                                                                                                                                                                        \n    else:                                                                                                                                                                                                                        \n        raise ValueError('Invalid Input')\n",
        "num_ids": 134
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # print(list1[m:n])\n    return sum(list1[m:n])\n",
        "num_ids": 26
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    sum = 0                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ",
        "num_ids": 2320
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n + 1):\n        total = total + list1[i]\n    return total\n    ",
        "num_ids": 36
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum
        "num_ids": 2321
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m, n + 1):\n        result += list1[i]\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # print(list1)\n    total = 0\n    for i in range(m,n):\n        total += list1[i]\n    return total\n",
        "num_ids": 39
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p=5*a\n    return p\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    p=a*(3**0.5)/2\n    return p\ndef circumference_rectangle(l,w):\n    '''\n    Write a function to find the circumference of a rectangle.\n    '''\n    c=2*l+2*w\n    return c\ndef area_rectangle(l,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a=l*w\n    return a\ndef perimeter_square(l):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    p=4*l\n    return p\ndef area_square(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    a=l*l\n    return a\ndef circumference_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c=2*math.pi*r\n    return c\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    a=math.pi*r*r\n    return a\ndef length_diameter(d):\n    '''\n    Write a function to find the length of the diameter of a circle.\n    '''\n    l=d/2\n    return l\ndef circumference_round(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c=2*math.pi*r\n    return c\ndef area_round(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    a=math.pi*r*r\n    return a\ndef width_rectangle(l,b):\n    '''\n    Write a function to find the width of a rectangle.\n    '''\n    w=b\n    return w\ndef perimeter_rectangle(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    p=2*(l+b)\n    return p\ndef area_rectangle(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a=l*b\n    return a\ndef perimeter_trapezoid(l1,l2,h):\n    '''\n    Write a function to find the perimeter of a trapezoid.\n    '''\n    p=l1+l2+h\n    return p\ndef area_trapezoid(l1,l2,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    a=(l1+l2)*h/2\n    return a\ndef side_triangle(a,h):\n    '''\n    Write a function to find the length of the sides of a triangle.\n    '''\n    side=a+h\n    return side\ndef area_triangle(a,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    a=(a*h)/2\n    return a\ndef circumference_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c=2*math.pi*r\n    return c\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    a=math.pi*r*r\n    return a\ndef perimeter_parallelogram(l,b):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    p=l+b+l+b\n    return p\ndef area_parallelogram(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    a=l*b\n    return a\ndef perimeter_square_square(l):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    p=4*l\n    return p\ndef area_square_square(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    a=l*l\n    return a\ndef perimeter_parallelogram_square(l,b):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    p=4*l+l+b\n    return p\ndef area_parallelogram_square(l,b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    a=l*b\n    return a\ndef perimeter_circle_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    c=2*math.pi*r\n    return c\ndef area_circle_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    a=math.pi*r*r\n    return a\ndef radius_circle_circle(r1,r2):\n    '''\n    Write a function to find the radius of a circle.\n    '''\n    r=(r1+r2)/2\n    return r\ndef circumference_circle_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c=2*math.pi*r\n    return c\ndef area_circle_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    a=math.pi*r*r\n    return a\ndef circumference_cylinder(r,h):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c=2*math.pi*r+2*math.pi*r*h\n    return c\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    a=2*math.pi*r*h\n    return a\ndef circumference_sphere(r):\n    '''\n    Write a function to find the circumference of a sphere.\n    '''\n    c=2*math.pi*r\n    return c\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    a=4*math.pi*r*r\n    return a\ndef circumference_sphere_sphere(r1,r2):\n    '''\n    Write a function to find the circumference of a sphere.\n    '''\n    c=4*math.pi*r1+4*math.pi*r2\n    return c\ndef area_sphere_sphere(r1,r2):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    a=4*math.pi*r1*r1+4*math.pi*r2*r2\n    return a\ndef thickness_cylinder(r,h):\n    '''\n    Write a function to find the thickness of a cylinder.\n    '''\n    t=h/(math.pi*r**2)\n    return t\ndef radius_cylinder(h,t):\n    '''\n    Write a function to find the radius of a cylinder.\n    '''\n    r=(h/(math.pi*t))**0.5\n    return r\ndef height_cylinder(r,t):\n    '''\n    Write a function to find the height of a cylinder.\n    '''\n    h=math.pi*r**2*t\n    return h\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    a=math.pi*r*r*h\n    return a\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=math.pi*r*r*h\n    return v\ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    a=math.pi*r*",
        "num_ids": 11
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    area = math.sqrt(25*a**2 - (a**2/4)*(3+(math.sqrt(5))))\n    return area\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = 6*a\n    return perimeter\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    area = 3*math.sqrt(3)*a**2/2\n    return area\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = 8*a\n    return perimeter\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    area = 2*a**2*math.sqrt(2)\n    return area\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = 9*a\n    return perimeter\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    area = math.sqrt(9*a**2/4 + a**2*(math.sqrt(2)-1))\n    return area\ndef square(a):\n    '''\n    Write a function to find the perimeter of a square from its side length.\n    '''\n    perimeter = 4*a\n    return perimeter\ndef rectangle(a, b):\n    '''\n    Write a function to find the perimeter of a rectangle from its sides.\n    '''\n    perimeter = 2*(a+b)\n    return perimeter\ndef triangle(a, b, c):\n    '''\n    Write a function to find the perimeter of a triangle from its sides.\n    '''\n    perimeter = a+b+c\n    return perimeter\ndef trapezoid(a, b, c, d):\n    '''\n    Write a function to find the perimeter of a trapezoid from its sides.\n    '''\n    perimeter = a+b+c+d\n    return perimeter\ndef circle(a):\n    '''\n    Write a function to find the perimeter of a circle from its radius.\n    '''\n    perimeter = 2*math.pi*a\n    return perimeter\ndef ellipse(a, b):\n    '''\n    Write a function to find the perimeter of an ellipse from its major and minor axes.\n    '''\n    perimeter = math.pi*a*b\n    return perimeter\ndef arc(a):\n    '''\n    Write a function to find the perimeter of an arc from the radius of the circle the arc lies on.\n    '''\n    perimeter = math.pi*2*a\n    return perimeter\ndef parallelogram(a, b):\n    '''\n    Write a function to find the perimeter of a parallelogram from its base and height.\n    '''\n    perimeter = 2*(a+b)\n    return perimeter\ndef rhombus(a):\n    '''\n    Write a function to find the perimeter of a rhombus from its diagonals.\n    '''\n    perimeter = 4*a\n    return perimeter\ndef kite(a, b, c):\n    '''\n    Write a function to find the perimeter of a kite from its diagonals.\n    '''\n    perimeter = 2*(a+b+c)\n    return perimeter\ndef rectangle2(a):\n    '''\n    Write a function to find the area of a rectangle from its side length.\n    '''\n    area = a**2\n    return area\ndef triangle2(a, b, c):\n    '''\n    Write a function to find the area of a triangle from its sides.\n    '''\n    area = (a*b*c)/(4*math.sqrt(3))\n    return area\ndef trapezoid2(a, b, c, d):\n    '''\n    Write a function to find the area of a trapezoid from its sides.\n    '''\n    area = a*b*(c+d)/2\n    return area\ndef circle2(a):\n    '''\n    Write a function to find the area of a circle from its radius.\n    '''\n    area = a**2*math.pi\n    return area\ndef ellipse2(a, b):\n    '''\n    Write a function to find the area of an ellipse from its major and minor axes.\n    '''\n    area = a*b*math.pi\n    return area\ndef rhombus2(a):\n    '''\n    Write a function to find the area of a rhombus from its diagonals.\n    '''\n    area = a**2*math.sqrt(2)/4\n    return area\ndef kite2(a, b, c):\n    '''\n    Write a function to find the area of a kite from its diagonals.\n    '''\n    area = (a*b*math.sqrt(3))/4\n    return area\ndef arc2(a):\n    '''\n    Write a function to find the area of an arc from the radius of the circle the arc lies on.\n    '''\n    area = a**2*math.pi/4\n    return area\ndef circle3(a):\n    '''\n    Write a function to find the area of a circle from its radius.\n    '''\n    area = a**2*math.pi\n    return area\ndef ellipse3(a, b):\n    '''\n    Write a function to find the area of an ellipse from its major and minor axes.\n    '''\n    area = a*b*math.pi\n    return area\ndef arc3(a):\n    '''\n    Write a function to find the area of an arc from the radius of the circle the arc lies on.\n    '''\n    area = a**2*math.pi/4\n    return area\ndef rectangle3(a):\n    '''\n    Write a function to find the area of a rectangle from its side length.\n    '''\n    area = a**2\n    return area\ndef triangle3(a, b, c):\n    '''\n    Write a function to find the area of a triangle from its sides.\n    '''\n    area = (a*b*c)/(4*math.sqrt(3))\n    return area\ndef trapezoid3(a, b, c, d):\n    '''\n    Write a function to find the area of a trapezoid from its sides.\n    '''\n    area = a*b*(c+d)/2\n    return area\ndef circle4(a):\n    '''\n    Write a function to find the perimeter of a circle from its radius.\n    '''\n    perimeter = 2*math.pi*a\n    return perimeter\ndef ellipse4(a, b):\n    '''\n    Write a function to find the perimeter of an ellipse from its major and minor axes.\n    '''\n    perimeter = 2*(a+b)\n    return perimeter\ndef rectangle4(a):\n    '''\n    Write a function to find the perimeter of a rectangle from its side length.\n    '''\n    perimeter = 2*a\n    return perimeter\ndef triangle4(a, b, c):\n    '''\n    Write a function to find the perimeter of a triangle from its sides.\n    '''\n    perimeter = a+b+c\n    return perimeter\ndef trapezoid4(a, b, c, d):\n    '''\n    Write a function to find the perimeter of a trapezoid from its sides.\n    '''\n    perimeter = a+b+c+d\n    return perimeter\ndef circle5(a):\n    '''\n    Write a function to find the area of a circle from its radius.\n    '''\n    area = a**2*math.pi\n    return area\ndef ellipse5(a, b):\n    '''\n    Write a functio",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n",
        "num_ids": 8
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if not s:\n        return 0\n    # O(n) time\n    # O(n) space\n    return s.count('std')\n",
        "num_ids": 37
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    count = 0\n    for i in range(0, len(s)-3):\n        if s[i:i+4] =='std':\n            count = count + 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if(s.count(\"std\")>0):\n        return s.count(\"std\")\n    return 0\n",
        "num_ids": 28
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    string = \"std\"\n    count = 0\n    for i in range(0, len(string)):\n        if string[i] in s:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i] == \"s\" and s[i+1] == \"d\" and s[i+2] == \"e\" and s[i+3] == \"d\":\n            count+=1\n",
        "num_ids": 69
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = []\n    for i in test_tuple:\n        test_list.append(type(i))\n    if len(set(test_list)) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        if len(test_tuple) > 0:\n            return type(test_tuple[0])\n        return False\n    except:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not len(test_tuple) > 1:\n        raise ValueError\n    else:\n        # if all the elements in tuple have same data type,\n        # then the function will return a Tuple with same data type.\n        # else, the function will return a Tuple with a single data type.\n        # These data types will be int, float, str, bytes, tuple, list, dict, set or NoneType.\n        return type(test_tuple[0]), type(test_tuple[1])\n",
        "num_ids": 121
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(\"\\n\", \"-\"*5, \"Problem 2\", \"-\"*5)\n    #input_tuple = ('Red', 'Green', 'White', 'Black', 'Pink', 'Yellow')\n    print(\"Input tuple:\", test_tuple)\n    print(\"The element types are:\", type(test_tuple[0]))\n    if len(test_tuple)!= len(set(test_tuple)):\n        print(\"\\nThere are duplicate data in tuple.\\n\")\n    else:\n        print(\"\\nThere are no duplicate data in tuple.\\n\")\n",
        "num_ids": 140
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple[0]) == type(test_tuple[1]):\n        return 'True'\n    else:\n        return 'False'\n",
        "num_ids": 41
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple = (1, 'a', '12.3', 'b', 5, [1,2,3], 1j, {'a':1})\n    if type(test_tuple[0]) == type(test_tuple[1]) == type(test_tuple[2]) == type(test_tuple[3]) == type(test_tuple[4]) == type(test_tuple[5]) == type(test_tuple[6]) == type(test_tuple[7]):\n        print('Type of all elements are same')\n    else:\n        print('Type of all elements are different')\n",
        "num_ids": 150
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    my_tuple = test_tuple\n    return len(set(map(type, my_tuple))) < 2\n",
        "num_ids": 31
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    l=list(test_tuple)\n    print(type(l[0]))\n    for i in l:\n        if type(i)==type(l[0]):\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return len({type(test_tuple[i]) for i in range(len(test_tuple))}) == 1\n",
        "num_ids": 31
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = list(test_tuple)\n    list_type = [type(list_item) == type(test_list[0]) for list_item in test_list]\n    if False in list_type:\n        return False\n    else:\n        return True\n",
        "num_ids": 67
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # if n is 0, then return False\n    if n == 0:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if x == arr[0]:\n        return True\n    if x == arr[n - 1]:\n        return True\n    i, j = 0, n - 1\n    while i < j:\n        mid = int(i + (j - i) / 2)\n        if arr[mid] == x:\n            return True\n        if arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid\n    return False\n",
        "num_ids": 135
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # to be solved in O(n) time\n    # to be solved in O(1) space\n    # return False if there is no majority element\n    # return True if there is a majority element\n    \n    i, j = 0, len(arr)-1\n    while i < j:\n        mid = (i+j)//2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            j = mid\n        else:\n            i = mid + 1\n    if arr[i] == x:\n        return True\n    return False\n",
        "num_ids": 140
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return x == arr[0]\n",
        "num_ids": 18
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n <= 0:\n        return False\n    if arr[n-1] == x:\n        return True\n    if n == 1:\n        return False\n    if arr[n-2] == x:\n        return True\n    if arr[n-1]!= x and arr[n-2]!= x:\n        return False\n    if arr[n-1]!= x:\n        return is_majority(arr, n-1, x)\n    if arr[n-2]!= x:\n        return is_majority(arr, n-2, x)\n",
        "num_ids": 139
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x > n:\n        return False\n    return arr.count(x) > n//2\n",
        "num_ids": 26
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # dict_obj = {}\n    # for num in arr:\n    #     if num in dict_obj:\n    #         dict_obj[num] += 1\n    #     else:\n    #         dict_obj[num] = 1\n    #     if dict_obj[num] > n / 2:\n    #         return True\n    # return False\n",
        "num_ids": 86
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    return False\n",
        "num_ids": 22
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        n &= (n-1)\n        count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 31
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num_of_set_bits = 0\n    while n: \n        num_of_set_bits += n & 1\n        n >>= 1\n    return num_of_set_bits\n",
        "num_ids": 48
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    while (n): \n        set_bits += n & 1\n        n >>= 1\n    return set_bits\n",
        "num_ids": 37
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Initialize result \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 39
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # n = int(input(\"Enter a number: \"))\n    # Returns the number of 1 bits in the binary representation of number. \n    return bin(n).count('1') \n",
        "num_ids": 46
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = [ele for ele in str if not (str.index(ele) % 2)]\n    return ''.join(res)\n",
        "num_ids": 33
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str=input(\"enter a string:\")\n    l=[]\n    for i in range(len(str)):\n        if i%2==0:\n            l.append(str[i])\n    print(''.join(l))\n    \ndef odd_values_string_re(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string, using re module.\n    '''\n    import re\n    l=re.findall(r'.',str)\n    for i in range(len(l)):\n        if i%2!=0:\n            l[i]=''\n    print(''.join(l))\n    \ndef remove_odd_string(str):\n    '''\n    Write a python program to remove the characters which have odd index values of a given string.\n    '''\n    l=[]\n    for i in range(len(str)):\n        if i%2==0:\n            l.append(str[i])\n    print(''.join(l))\n    \ndef remove_odd_string_re(str):\n    '''\n    Write a python program to remove the characters which have odd index values of a given string, using re module.\n    '''\n    import re\n    l=re.findall(r'.',str)\n    for i in range(len(l)):\n        if i%2!=0:\n            l[i]=''\n    print(''.join(l))\n    \ndef even_index_string(str):\n    '''\n    Write a python program to extract characters at even index values of a given string.\n    '''\n    l=[]\n    for i in range(len(str)):\n        if i%2==0:\n            l.append(str[i])\n    print(''.join(l))\n    \ndef even_index_string_re(str):\n    '''\n    Write a python program to extract characters at even index values of a given string, using re module.\n    '''\n    import re\n    l=re.findall(r'.',str)\n    for i in range(len(l)):\n        if i%2!=0:\n            l[i]=''\n    print(''.join(l))\n    \ndef remove_even_string(str):\n    '''\n    Write a python program to remove the characters which have even index values of a given string.\n    '''\n    l=[]\n    for i in range(len(str)):\n        if i%2==0:\n            l.append(str[i])\n    print(''.join(l))\n    \ndef remove_even_string_re(str):\n    '''\n    Write a python program to remove the characters which have even index values of a given string, using re module.\n    '''\n    import re\n    l=re.findall(r'.',str)\n    for i in range(len(l)):\n        if i%2!=0:\n            l[i]=''\n    print(''.join(l))\n    \ndef multiple_strings():\n    '''\n    Write a python program to extract the characters at even index values of given string, after removing the odd index characters.\n    '''\n    s=input(\"enter a string:\")\n    l=[]\n    for i in range(len(s)):\n        if i%2==0:\n            l.append(s[i])\n    s=''.join(l)\n    print(s)\n    \ndef multiple_strings_re():\n    '''\n    Write a python program to extract the characters at even index values of given string, after removing the odd index characters.\n    '''\n    import re\n    s=input(\"enter a string:\")\n    l=re.findall(r'.',s)\n    s=''.join(l)\n    print(s)\n    \ndef multiple_strings_v1():\n    '''\n    Write a python program to extract the characters at even index values of given string, after removing the odd index characters.\n    '''\n    s=input(\"enter a string:\")\n    l=[]\n    for i in range(len(s)):\n        if i%2==0:\n            l.append(s[i])\n    s=''.join(l)\n    print(s)\n    \ndef multiple_strings_v2():\n    '''\n    Write a python program to extract the characters at even index values of given string, after removing the odd index characters.\n    '''\n    import re\n    s=input(\"enter a string:\")\n    l=re.findall(r'.',s)\n    s=''.join(l)\n    print(s)\n    \ndef multiple_strings_v3():\n    '''\n    Write a python program to extract the characters at even index values of given string, after removing the odd index characters.\n    '''\n    s=input(\"enter a string:\")\n    l=[]\n    for i in range(len(s)):\n        if i%2==0:\n            l.append(s[i])\n    s=''.join(l)\n    print(s)\n    \ndef multiple_strings_v4():\n    '''\n    Write a python program to extract the characters at even index values of given string, after removing the odd index characters.\n    '''\n    s=input(\"enter a string:\")\n    l=[]\n    for i in range(len(s)):\n        if i%2==0:\n            l.append(s[i])\n    s=''.join(l)\n    print(s)\n    \ndef multiple_strings_v5():\n    '''\n    Write a python program to extract the characters at even index values of given string, after removing the odd index characters.\n    '''\n    import re\n    s=input(\"enter a string:\")\n    l=re.findall(r'.',s)\n    s=''.join(l)\n    print(s)\n    \ndef multiple_strings_v6():\n    '''\n    Write a python program to extract the characters at even index values of given string, after removing the odd index characters.\n    '''\n    s=input(\"enter a string:\")\n    l=[]\n    for i in range(len(s)):\n        if i%2==0:\n            l.append(s[i])\n    s=''.join(l)\n    print(s)\n    \ndef multiple_strings_v7():\n    '''\n    Write a python program to extract the characters at even index values of given string, after removing the odd index characters.\n    '''\n    import re\n    s=input(\"enter a string:\")\n    l=re.findall(r'.',s)\n    s=''.join(l)\n    print(s)\n    \ndef multiple_strings_v8():\n    '''\n    Write a python program to extract the characters at even index values of given string, after removing the odd index characters.\n    '''\n    s=input(\"enter a string:\")\n    l=[]\n    for i in range(len(s)):\n        if i%2==0:\n            l.append(s[i])\n    s=''.join(l)\n    print(s)\n    \ndef multiple_strings_v9():\n    '''\n    Write a python program to extract the characters at even index values of given string, after removing the odd index characters.\n    '''\n    s=input(\"enter a string:\")\n    l=[]\n    for i in range(len(s)):\n        if i%2==0:\n            l.append(s[i])\n    s=''.join(l)\n    print(s)\n    \ndef multiple_strings_v10():\n    '''\n    Write a python program to extract the characters at even index values of given string, after removing the odd index characters.\n    '''\n    import re\n    s=input(\"enter a string:\")\n    l=re.findall(r'.',s)\n    s=''.join(l)\n    print(s)\n    \ndef multiple_strings_v11():\n    '''\n    Write a python program to extract the characters at even index values of given string, after removing the odd index characters.\n    '''\n    s=input(\"enter a string:\")\n    l=[]\n    for i in range(len(s)):\n        if i%2==0:\n            l.append(s[i])\n    s=''.join(l)\n    print(s)\n    ",
        "num_ids": 65
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i%2==0:\n            result += str[i]\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string.append(str[i])\n    return ''.join(new_string)\n",
        "num_ids": 53
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    print(str)\n    for i in range(len(str)):\n        if i%2==0:\n            print(str[i], end=\"\")\n    return\n",
        "num_ids": 43
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([char for index, char in enumerate(str) if index % 2 == 0])\n",
        "num_ids": 27
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(len(str)):\n        if i%2!=0:\n            str=str.replace(str[i],'')\n    return str\nprint(odd_values_string(\"Python\"))\n",
        "num_ids": 53
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    list1 = [str[i] for i in range(len(str)) if i % 2 == 0]\n    string = ''.join(list1)\n    return string\n",
        "num_ids": 43
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    a = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            a.append(str[i])\n    return \"\".join(a)\n",
        "num_ids": 47
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_list = []\n    for index in range(len(str)):\n        if index % 2 == 0:\n            new_list.append(str[index])\n    return new_list\n",
        "num_ids": 48
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n",
        "num_ids": 51
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            print(\"The minimum is\",c)\n        else:\n            print(\"The minimum is\",b)\n    else:\n        if a < c:\n            print(\"The minimum is\",c)\n        else:\n            print(\"The minimum is\",a)\n    return\n",
        "num_ids": 78
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return c\n        else:\n            return b\n    else:\n        if a<c:\n            return c\n        else:\n            return a\nprint(min_of_three(10,5,6))",
        "num_ids": 65
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n",
        "num_ids": 51
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return c\n        else:\n            return a\n    elif b>c:\n        return c\n    else:\n        return b\n",
        "num_ids": 48
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        print(a)\n    elif b < a and b < c:\n        print(b)\n    else:\n        print(c)\n",
        "num_ids": 47
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < c and b < a:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b:\n        if a<=c:\n            return a\n        else:\n            return c\n    else:\n        if b<=c:\n            return b\n        else:\n            return c\n    \nprint(min_of_three(1,2,3))\n",
        "num_ids": 71
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_value = min(a,b,c)\n    return min_value\n",
        "num_ids": 22
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return c\n        elif b > c:\n            return b\n        else:\n            return a\n    else:\n        if a < c:\n            return c\n        elif a > c:\n            return a\n        else:\n            return b\n",
        "num_ids": 75
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    ans = True\n    for i in range(n):\n        x = 2**i\n        if(x>=l and x<=r):\n            ans = False\n    return ans\n",
        "num_ids": 46
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    lbin = bin(l)[2:]\n    rbin = bin(r)[2:]\n    setBits = 0\n    for i in lbin:\n        if i == '1':\n            setBits += 1\n    for j in rbin:\n        if j == '1':\n            setBits += 1\n    if setBits == n:\n        return True\n    return False\n",
        "num_ids": 94
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # l = bin(l).split(\"0b\")[1]\n    # r = bin(r).split(\"0b\")[1]\n    l = '{0:032b}'.format(l)\n    r = '{0:032b}'.format(r)\n    print(l,r)\n    x = bin(n).split(\"0b\")[1]\n    print(x)\n    if l == \"0\" * 32 and r == \"0\" * 32:\n        print(\"1\")\n    else:\n        print(\"0\")\n",
        "num_ids": 133
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    ans=True\n    for i in range(l,r+1):\n        if(check_bit(i,n)):\n            ans=False\n            break\n    return ans\n",
        "num_ids": 45
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # print(bin(n),bin(l),bin(r))\n    # print(n,l,r)\n    if n < 0:\n        n = n & 0xFFFFFFFF\n    if l < 0:\n        l = l & 0xFFFFFFFF\n    if r < 0:\n        r = r & 0xFFFFFFFF\n    if (n < l) | (n > r):\n        return False\n    else:\n        return ((n ^ 0xFFFFFFFF) >> 1) + 1 == r\n",
        "num_ids": 121
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    import re\n",
        "num_ids": 6
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bin_n = bin(n)[2:]\n    if n>r:\n        return False\n    if l==0:\n        return True\n    if n==r or n<l:\n        return True\n    for i in bin_n:\n        if i=='0':\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # a=bin(n)[2:]\n    # b=bin(l)[2:]\n    # c=bin(r)[2:]\n    # if len(a)!=len(b) and len(a)!=len(c):\n    #     print('Unable to apply logical operations')\n    # else:\n    #     if len(a)==len(b):\n    #         for i in range(len(a)):\n    #             if a[i]!=b[i]:\n    #                 return False\n    #         return True\n    #     elif len(a)==len(c):\n    #         for i in range(len(a)):\n    #             if a[i]!=c[i]:\n    #                 return False\n    #         return True\n    #     else:\n    #         for i in range(len(a)):\n    #             if a[i]!=b[i] and a[i]!=c[i]:\n    #                 return False\n    #         return True\n    #     return True\n",
        "num_ids": 251
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n        '''\n        Write a python function to check whether all the bits are unset in the given range or not.\n        '''\n        if n>=1 and n<=32:\n            bin_n=bin(n)[2:]\n            length=len(bin_n)\n            if length<=r and length>=l:\n                s=''\n                for i in bin_n:\n                    s+=str(1-int(i))\n                return(int(s,2))\n            else:\n                print(\"Binary number must be in the range [{},{}]\".format(l,r))\n        else:\n            print(\"The number must be between 1 and 32\")\n    if __name__==\"__main__\":\n        print(all_Bits_Set_In_The_Given_Range(32,5,15)",
        "num_ids": 168
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return 2**n - 1 - l - r >= 0\n",
        "num_ids": 16
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive = []\n    negative = []\n    for i in arr:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n    return negative + positive\n",
        "num_ids": 52
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low = 0\n    high = n - 1\n    while low < high:\n        if arr[low] < 0 and arr[high] > 0:\n            arr[low], arr[high] = arr[high], arr[low]\n            low += 1\n            high -= 1\n        elif arr[low] >= 0:\n            low += 1\n        elif arr[high] <= 0:\n            high -= 1\n",
        "num_ids": 99
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    left_pos = 0\n    right_pos = n-1\n    while left_pos <= right_pos:\n        if arr[left_pos] < 0 and arr[right_pos] < 0:\n            left_pos += 1\n            right_pos -= 1\n        elif arr[left_pos] > 0 and arr[right_pos] > 0:\n            left_pos += 1\n            right_pos -= 1\n        elif arr[left_pos] > 0 and arr[right_pos] < 0:\n            left_pos += 1\n            right_pos -= 1\n        elif arr[left_pos] < 0 and arr[right_pos] > 0:\n            left_pos += 1\n            right_pos -= 1\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[left_pos] = arr[left_pos], arr[i]\n            left_pos += 1\n    for i in range(n, 2*n):\n        if arr[i] > 0:\n            arr[i], arr[right_pos] = arr[right_pos], arr[i]\n            right_pos -= 1\n    return arr\n",
        "num_ids": 278
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return arr\n    else:\n        for i in range(n):\n            if arr[i] < 0:\n                arr[0], arr[i] = arr[i], arr[0]\n    return arr\n",
        "num_ids": 59
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    start, end = 0, n\n    while start < end:\n        while arr[start] < 0 and start < end:\n            start += 1\n        while arr[end] >= 0 and end >= start:\n            end -= 1\n        if start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n    return arr\n",
        "num_ids": 88
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    index = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            for j in range(i, len(arr)):\n                if arr[j] >= 0:\n                    temp = arr[i]\n                    arr[i] = arr[j]\n                    arr[j] = temp\n                    break\n    return arr\n",
        "num_ids": 87
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 1:\n        return arr\n    for i in range(n - 1):\n        if arr[i] < 0 and arr[i+1] > 0:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n        elif arr[i] < 0 and arr[i+1] < 0:\n            continue\n        elif arr[i] > 0 and arr[i+1] > 0:\n            continue\n    return arr\n",
        "num_ids": 116
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low, high = 0, n - 1\n    while low <= high:\n        if arr[low] < 0 and arr[high] >= 0:\n            arr[low], arr[high] = arr[high], arr[low]\n            low += 1\n            high -= 1\n        elif arr[low] < 0 and arr[high] < 0:\n            low += 1\n        elif arr[low] >= 0 and arr[high] < 0:\n            high -= 1\n        else:\n            low += 1\n            high -= 1\n",
        "num_ids": 126
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            x = arr[i]\n            arr[i] = arr[n]\n            arr[n] = x\n            n += 1\n    return arr\n",
        "num_ids": 57
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low = 0\n    high = len(arr) - 1\n    i = 0\n    while i <= high:\n        if arr[i] < 0 and arr[low] < 0:\n            arr[i], arr[low] = arr[low], arr[i]\n            i += 1\n            low += 1\n        elif arr[i] < 0:\n            i += 1\n        elif arr[low] < 0:\n            low += 1\n        elif arr[high] > 0:\n            high -= 1\n        else:\n            arr[i], arr[high] = arr[high], arr[i]\n            i += 1\n            high -= 1\n    return arr\n",
        "num_ids": 160
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return(str1.replace(\" \",\"%s\"))\n",
        "num_ids": 16
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(' ','_')\n    return str2\n",
        "num_ids": 21
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for char in str1:\n        if char.isspace():\n            str1 = str1.replace(char,\"\")\n    return str1\n",
        "num_ids": 36
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\")%char\n",
        "num_ids": 17
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\") % char\n",
        "num_ids": 17
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s') % (char)\n",
        "num_ids": 19
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    #heap = []\n    #heapq.heapify(heap)\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heapreplace(heap, list1[i])\n    return heap\n    #print(heap)\n    #return heap\n    #return heapq.nlargest(n, list1)\n    #return heapq.nlargest(n, list1)\n",
        "num_ids": 155
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    heapq.heapify(list2)\n    for i in list1:\n        if len(list2)<n:\n            heapq.heappush(list2,i)\n        else:\n            heapq.heappushpop(list2,i)\n    return list2\n",
        "num_ids": 80
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n",
        "num_ids": 16
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,-num)\n    return [-num for num in heapq.nlargest(n,heap)]\n",
        "num_ids": 65
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #my_list = [3,7,8,9,11,15,13]\n    #n = 2\n    \n    #return [max(my_list)] * n\n    #approach 1\n    #sort the list\n    #l1 = sorted(list1)\n    #output = l1[-n:]\n    #return output\n    #approach 2\n    l1 = sorted(list1)\n    return l1[len(list1)-n:len(list1)]\n",
        "num_ids": 118
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    list2 = []\n    for i in range(0,n):\n        list2.append(max(list1))\n        list1.remove(max(list1))\n    return list2\n        \n",
        "num_ids": 52
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    list3=[]\n    list4=[]\n    a=n\n    for i in range(0,n):\n        list2.append(list1[i])\n    list2.sort(reverse=True)\n    for i in range(0,n):\n        for j in range(0,len(list1)):\n            if list1[j]==list2[i]:\n                list3.append(j)\n        for k in range(0,len(list3)):\n            list4.append(list1[list3[k]])\n        list1=list4\n        list4=[]\n        list3=[]\n    return list2\n",
        "num_ids": 163
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    n_largest_elements = heapq.nlargest(n, list1)\n    return n_largest_elements\nlist1=[1,4,7,2,5,3,9,0,9,2]\nprint(larg_nnum(list1,5))\nprint(larg_nnum([10,9,8,7,6,5,4,3,2,1],3))\nprint(larg_nnum([],5))\n",
        "num_ids": 122
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    sorted_list = sorted(list1, reverse = True)\n    return sorted_list[0:n]\n",
        "num_ids": 29
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[-n:]\n    \ndef larg_nnum_v2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,-num)\n    return [heapq.heappop(heap) for i in range(n)]\n",
        "num_ids": 53
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n",
        "num_ids": 20
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    pi = math.pi\n    return (2*pi*r*h) + (pi*r**2)\n",
        "num_ids": 33
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*r*(r+h)\n",
        "num_ids": 22
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 3.14*(r**2)*h\n",
        "num_ids": 15
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print(\"Lateral Surface Area of a Cylinder:\",round((2*3.14*(r**2+r**2))+2*3.14*(r*h),2))\n    return print(\"\\n\")\n",
        "num_ids": 56
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Lateral surface area = 2(pi*r**2 + 2*h*r)\n    \n    import math\n    \n    area = (2*math.pi*(r**2) + (2*h*r))\n    \n    return area\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    import math\n    \n    volume = math.pi * (r**2) * h\n    \n    return volume\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    import math\n    \n    volume = (4/3)*math.pi * (r**3)\n    \n    return volume\n    \n    \ndef lateral_cylinder_volume(r,h):\n    '''\n    Write a function to calculate the lateral volume of a cylinder.\n    '''\n    import math\n    \n    volume = (2*math.pi*(r**2) + (2*h*r))\n    \n    return volume\n    \n    \ndef lateral_sphere_volume(r):\n    '''\n    Write a function to calculate the lateral volume of a sphere.\n    '''\n    import math\n    \n    volume = (4/3)*math.pi * (r**3)\n    \n    return volume\n    \n    \ndef lateral_cylinder_surface_area(r,h):\n    '''\n    Write a function to calculate the lateral surface area of a cylinder.\n    '''\n    import math\n    \n    area = (2*math.pi*(r**2) + (2*h*r))\n    \n    return area\n    \n    \ndef lateral_sphere_surface_area(r):\n    '''\n    Write a function to calculate the lateral surface area of a sphere.\n    '''\n    import math\n    \n    area = (4*math.pi*(r**2))\n    \n    return area\n    \n    \ndef lateral_cylinder_volume_error(r,h):\n    '''\n    Write a function to calculate the lateral volume error of a cylinder.\n    '''\n    import math\n    \n    error = (abs(lateral_cylinder_volume(r,h)-lateral_cylinder_volume(r,h+0.01)))\n    \n    return error\n    \n    \ndef lateral_sphere_volume_error(r):\n    '''\n    Write a function to calculate the lateral volume error of a sphere.\n    '''\n    import math\n    \n    error = (abs(lateral_sphere_volume(r)-lateral_sphere_volume(r+0.01)))\n    \n    return error\n    \n    \ndef lateral_cylinder_surface_area_error(r,h):\n    '''\n    Write a function to calculate the lateral surface area error of a cylinder.\n    '''\n    import math\n    \n    error = (abs(lateral_cylinder_surface_area(r,h)-lateral_cylinder_surface_area(r,h+0.01)))\n    \n    return error\n    \n    \ndef lateral_sphere_surface_area_error(r):\n    '''\n    Write a function to calculate the lateral surface area error of a sphere.\n    '''\n    import math\n    \n    error = (abs(lateral_sphere_surface_area(r)-lateral_sphere_surface_area(r+0.01)))\n    \n    return error\n    \n    \ndef volume_error(r):\n    '''\n    Write a function to calculate the volume error of a sphere.\n    '''\n    import math\n    \n    error = (abs(sphere_volume(r)-sphere_volume(r+0.01)))\n    \n    return error\n    \n    \ndef area_error(r):\n    '''\n    Write a function to calculate the lateral surface area error of a sphere.\n    '''\n    import math\n    \n    error = (abs(sphere_surface_area(r)-sphere_surface_area(r+0.01)))\n    \n    return error\n    \n    \ndef h_error(r):\n    '''\n    Write a function to calculate the lateral surface area error of a sphere.\n    '''\n    import math\n    \n    error = (abs(h_sphere(r)-h_sphere(r+0.01)))\n    \n    return error\n    \n    \ndef volume_vs_h_cylinder(r,h):\n    '''\n    Write a function to plot the volume of a cylinder as a function of the height.\n    '''\n    import numpy as np\n    import matplotlib.pyplot as plt\n    \n    x = np.linspace(0,r,100)\n    \n    y = np.zeros(len(x))\n    \n    for i in range(len(x)):\n        y[i] = lateral_cylinder_volume(x[i],h)\n    \n    fig,ax = plt.subplots()\n    ax.plot(x,y)\n    ax.set_xlabel(\"Height (m)\")\n    ax.set_ylabel(\"Volume (m^3)\")\n    \n    plt.show()\n    \n    \ndef volume_vs_r_cylinder(r,h):\n    '''\n    Write a function to plot the volume of a cylinder as a function of the radius.\n    '''\n    import numpy as np\n    import matplotlib.pyplot as plt\n    \n    x = np.linspace(0,r,100)\n    \n    y = np.zeros(len(x))\n    \n    for i in range(len(x)):\n        y[i] = lateral_cylinder_volume(x[i],h)\n    \n    fig,ax = plt.subplots()\n    ax.plot(x,y)\n    ax.set_xlabel(\"Radius (m)\")\n    ax.set_ylabel(\"Volume (m^3)\")\n    \n    plt.show()\n    \n    \ndef volume_vs_h_sphere(r):\n    '''\n    Write a function to plot the volume of a sphere as a function of the height.\n    '''\n    import numpy as np\n    import matplotlib.pyplot as plt\n    \n    x = np.linspace(0,r,100)\n    \n    y = np.zeros(len(x))\n    \n    for i in range(len(x)):\n        y[i] = lateral_sphere_volume(x[i])\n    \n    fig,ax = plt.subplots()\n    ax.plot(x,y)\n    ax.set_xlabel(\"Height (m)\")\n    ax.set_ylabel(\"Volume (m^3)\")\n    \n    plt.show()\n    \n    \ndef volume_vs_r_sphere(r):\n    '''\n    Write a function to plot the volume of a sphere as a function of the radius.\n    '''\n    import numpy as np\n    import matplotlib.pyplot as plt\n    \n    x = np.linspace(0,r,100)\n    \n    y = np.zeros(len(x))\n    \n    for i in range(len(x)):\n        y[i] = lateral_sphere_volume(x[i])\n    \n    fig,ax = plt.subplots()\n    ax.plot(x,y)\n    ax.set_xlabel(\"Radius (m)\")\n    ax.set_ylabel(\"Volume (m^3)\")\n    \n    plt.show()\n    \n    \ndef h_vs_r_cylinder(r,h):\n    '''\n    Write a function to plot the height of a cylinder as a function of the radius.\n    '''\n    import numpy as np\n    import matplotlib.pyplot as plt\n    \n    x = np.linspace(0,r,100)\n    \n    y = np.zeros(len(x))\n    \n    for i in range(len(x)):\n        y[i] = h_cylinder(x[i],h)\n    \n    fig,ax = plt.subplots()\n    ax.plot(x,y)\n    ax.set_xlabel(\"Radius (m)\")\n    ax.set_ylabel(\"Height (m)\")",
        "num_ids": 138
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    lateral_surface = math.pi*r*(r+h)\n    return lateral_surface\n",
        "num_ids": 30
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    print(2*math.pi*r*h)\n",
        "num_ids": 20
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2*np.pi*r*h + 2*np.pi*r**2\n    return surface_area\n",
        "num_ids": 33
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(l**3)\n    return l**3\n",
        "num_ids": 16
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n",
        "num_ids": 13
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    v = l ** 3\n    a = math.pow(l,2)\n    return a\n",
        "num_ids": 30
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return int(l)**3\n",
        "num_ids": 11
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    return round(l**3, 2)\n",
        "num_ids": 17
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(\"Volume of cube =\", l ** 3)\n",
        "num_ids": 15
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n",
        "num_ids": 10
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bit_mask = 1\n    for i in range(32): \n        if (bit_mask & n) == 0:\n            break\n        bit_mask <<= 1\n    return n | bit_mask\n    \n    \ndef generate_binary(n):\n    if n == 0:\n        return 0\n    return (n & 1) + generate_binary(n >> 1)\n    \n    \ndef get_count_of_bits(n): \n    '''\n    Write a python function to get the count of bits set to 1 in a given integer.\n    '''\n    if n == 0:\n        return 32\n    return get_count_of_bits(n & (n - 1))\n    \n    \ndef reverse_number(n): \n    '''\n    Write a python function to reverse a given number.\n    '''\n    if n == 0:\n        return 0\n    rev = 0\n    while n:\n        rev = (rev << 1) + (n & 1)\n        n >>= 1\n    return rev\n    \n    \ndef reverse_binary_number(n):\n    '''\n    Write a python function to reverse a given binary number.\n    '''\n    if n == 0:\n        return 0\n    rev = 0\n    while n:\n        rev = (rev << 1) + (n & 1)\n        n >>= 1\n    return rev\n    \n    \ndef sum_all_bits(n): \n    '''\n    Write a python function to sum all bits set to 1 in a given integer.\n    '''\n    if n == 0:\n        return 0\n    return ((n & 1) + sum_all_bits(n >> 1))\n    \n    \ndef sum_all_bits_binary(n):\n    '''\n    Write a python function to sum all bits set to 1 in a given binary number.\n    '''\n    if n == 0:\n        return 0\n    return (n & 1) + sum_all_bits_binary(n >> 1)\n    \n    \ndef generate_powers_of_2(n):\n    '''\n    Write a python function to generate all powers of 2 less than n.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return 2\n    return generate_powers_of_2(n >> 1) << 1\n    \n    \ndef get_bit(n, i): \n    '''\n    Write a python function to return bit i of a given number.\n    '''\n    return (n >> i) & 1\n    \n    \ndef set_bit(n, i):\n    '''\n    Write a python function to set bit i of a given number.\n    '''\n    return n | 1 << i\n    \n    \ndef clear_bit(n, i):\n    '''\n    Write a python function to clear bit i of a given number.\n    '''\n    return n & ~(1 << i)\n    \n    \ndef get_rightmost_bit_set_to_1(n):\n    '''\n    Write a python function to return the index of the rightmost set bit.\n    '''\n    i = 0\n    while n:\n        n >>= 1\n        i += 1\n    return i\n    \n    \ndef count_bits_set_to_1(n):\n    '''\n    Write a python function to count the number of bits set to 1 in a given number.\n    '''\n    i = 0\n    while n:\n        n >>= 1\n        i += 1\n    return i\n    \n    \ndef clear_rightmost_set_bit(n):\n    '''\n    Write a python function to clear the rightmost set bit.\n    '''\n    if n == 0:\n        return 0\n    return n & (n - 1)\n    \n    \ndef clear_rightmost_set_bit_binary(n):\n    '''\n    Write a python function to clear the rightmost set bit in a binary number.\n    '''\n    if n == 0:\n        return 0\n    return n & (n - 1)\n    \n    \ndef swap_bits(n, i, j):\n    '''\n    Write a python function to swap bits i and j of a given number.\n    '''\n    if i == j:\n        return n\n    mask_i = 1 << i\n    mask_j = 1 << j\n    return (n & ~(mask_i | mask_j)) | (mask_i | mask_j)\n    \n    \ndef flip_bits(n, i, j):\n    '''\n    Write a python function to flip bits i and j of a given number.\n    '''\n    if i == j:\n        return n\n    mask_i = 1 << i\n    mask_j = 1 << j\n    return (n & ~(mask_i | mask_j)) | (mask_j | mask_i)\n    \n    \ndef set_bit_to_one_if_it_is_even(n):\n    '''\n    Write a python function to set the first bit of a number to 1 if it is even.\n    '''\n    if n == 0:\n        return 0\n    if (n & 1) == 0:\n        return n | 1\n    return n\n    \n    \ndef set_bit_to_zero_if_it_is_even(n):\n    '''\n    Write a python function to set the first bit of a number to 0 if it is even.\n    '''\n    if n == 0:\n        return 0\n    if (n & 1) == 0:\n        return n & 0xFE\n    return n\n    \n    \ndef set_bit_to_one_if_it_is_odd(n):\n    '''\n    Write a python function to set the first bit of a number to 1 if it is odd.\n    '''\n    if n == 0:\n        return 0\n    if (n & 1) == 1:\n        return n | 1\n    return n\n    \n    \ndef set_bit_to_zero_if_it_is_odd(n):\n    '''\n    Write a python function to set the first bit of a number to 0 if it is odd.\n    '''\n    if n == 0:\n        return 0\n    if (n & 1) == 1:\n        return n & 0xFE\n    return n\n    \n    \ndef is_power_of_2(n):\n    '''\n    Write a python function to determine if a given number is a power of 2.\n    '''\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    return (n & (n - 1)) == 0\n    \n    \ndef count_set_bits(n):\n    '''\n    Write a python function to count the number of bits set to 1 in a given number.\n    '''\n    count = 0\n    while n:\n        n &= (n - 1)\n        count += 1\n    return count\n    \n    \ndef set_bit_if_number_is_greater_than_n(n, i):\n    '''\n    Write a python function to set the ith bit of a number, if it is greater than n.\n    '''\n    if n < i:\n        return i\n    return n\n    \n    \ndef is_even(n):\n    '''\n    Write a python function to determine if a given number is even.\n    '''\n    return n & 1 == 0\n    \n    \ndef is_odd(n):\n    '''\n    Write a python function to determine if a given number is odd.\n    '''\n    return n & 1 == 1\n    \n    \ndef clear_bit_if_number_is_greater_than_n(n, i):\n    '''\n    Write a python function to clear the ith bit of a number, if it is greater than n.\n    '''\n    if n < i:\n        return n\n    return n & ~(1 << i)\n    \n    \ndef clear_bit_if_number_is_greater_than_n_binary(n, i):\n    '''\n    Write a python function to clear the ith bit of a number, if it is greater than n in binary representation.\n    '''\n    if n < i:\n        return n\n    return n & ~(1 << i)\n    \n    \ndef clear_rightmost_set_bit(n):\n    '''\n    Write a python function to clear the rightmost set bit of a given number.\n    '''\n    return ",
        "num_ids": 5
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n\n",
        "num_ids": 46
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n",
        "num_ids": 13
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 0x5555555555555555\n    return n & mask\n",
        "num_ids": 22
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    print(\"The even bit set number is: {}\".format(n))\n    n = bin(n)\n    x = n.count(\"1\")\n    if(x%2==0):\n        print(\"There are even number of bits\")\n    else:\n        print(\"There are odd number of bits\")\n",
        "num_ids": 73
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initializing n to 0\n    n = 0 \n    # creating a variable i \n    i = 0\n    # creating a while loop to iterate till the range of the number\n    while(n):\n        # checking if the bit at the position i is 1\n        if(n & 1):\n            # if 1, then we need to set it to 0\n            n = n & ~(1 << i)\n            # shifting i to the right to check the next bit\n            i += 1\n        # if bit at the position i is 0, then we need to shift to the right\n        n = n >> 1\n    # returning the new value of n\n    return n\n",
        "num_ids": 156
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n",
        "num_ids": 10
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(0, 32):\n        if (n & (1<<i))!= 0:\n            n = n & ~(1<<i)\n    return n\n",
        "num_ids": 44
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n ^ ((n >> 1) & 0x55555555) \n    return n\n",
        "num_ids": 26
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # A list of tuples containing numbers\n    test_list = [(1, 1), (2, 2), (3, 3), (4, 3), (5, 3), (6, 2)]\n    dict_occurences = {}\n",
        "num_ids": 57
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_of_tuple = dict(Counter(test_list))\n    return count_of_tuple\n",
        "num_ids": 28
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [(1, 'a'), (2, 'b'), (1, 'a'), (3, 'a'), (3, 'a')]\n    # Make a dictionary with each key the tuple and each value the number of occurences\n    print(Counter(test_list))\n",
        "num_ids": 69
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [\n    ('A', 3),\n    ('B', 2),\n    ('A', 1),\n    ('B', 1),\n    ('C', 1)\n    ]\n    def f(x):\n        return x[1]\n    test_list.sort(key=f)\n    # test_list = [x[0] for x in test_list]\n    d = Counter(test_list)\n    print(d)\n    return d\n",
        "num_ids": 112
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [('a',1), ('b',2), ('a',3),('a',1),('b',5),('c',1),('d',5),('b',2),('a',3),('b',2),('a',3),('b',2),('a',3)]\n    dictionary = {}\n    for i in test_list:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\n",
        "num_ids": 123
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for i in test_list:\n        if i not in test_dict:\n            test_dict[i] = test_list.count(i)\n    return test_dict\n",
        "num_ids": 51
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dict to store unique elements\n    dictionary = {}\n    # loop through the list and count the occurences\n    for i in range(0, len(test_list)):\n        # convert list into a tuple\n        tuple_to_add = tuple(test_list[i])\n        # check if tuple is in the dict, if not add it and give it a value of 1\n        if tuple_to_add not in dictionary:\n            dictionary[tuple_to_add] = 1\n        else:\n            # if it is, then increase the occurence value by 1\n            dictionary[tuple_to_add] += 1\n    # return the dictionary\n    return dictionary\n",
        "num_ids": 164
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # your code here\n    occurences = {}\n    for item in test_list:\n        if item in occurences:\n            occurences[item] += 1\n        else:\n            occurences[item] = 1\n    print(occurences)\n",
        "num_ids": 65
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    print(dict(Counter(test_list)))\n    #return dict(Counter(test_list))\n",
        "num_ids": 26
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    uniq_list = []\n    final_dict = {}\n    for tup in test_list:\n        if tup not in uniq_list:\n            uniq_list.append(tup)\n            final_dict[tup] = test_list.count(tup)\n    return final_dict\n",
        "num_ids": 76
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    non_empty_substrings = 0\n    for i in range(len(str)):\n        for j in range(len(str)):\n            substr = str[i:j+1]\n            if substr!= '' and len(substr) > 1:\n                non_empty_substrings += 1\n    return non_empty_substrings\n",
        "num_ids": 84
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    str_length = len(str)\n    count = 0\n",
        "num_ids": 17
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #Code here\n    n = len(str)\n    #For a string of length n, the number of non-empty substrings is (n * (n + 1)) / 2\n    return int((n * (n + 1)) / 2)\n",
        "num_ids": 59
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if str[i:j+1] == \"\":\n                count += 1\n    print(count)\n",
        "num_ids": 60
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # return len(set(str))\n    \n    # brute force approach \n    # count = 0\n    # for i in range(len(str)): \n    #     for j in range(i, len(str)): \n    #         if str[i:j+1] and str[i:j+1]!='': \n    #             count += 1\n",
        "num_ids": 92
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    if len(str) == 0:\n        return count\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if j == len(str)-1:\n                if len(str[i:j+1])!= 0:\n                    count+=1\n            else:\n                if len(str[i:j+1])!= 0:\n                    count+=1\n    return count\n",
        "num_ids": 110
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    return length - length // 2\n",
        "num_ids": 18
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            if str[i:j+1]!= '': \n                count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    count = 0\n    for i in range(length):\n        for j in range(i+1, length+1):\n            if str[i:j]!= '':\n                count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str) \n    for i in range(n): \n        for j in range(i,n): \n            sub = str[i:j+1] \n            if len(sub) > 0: \n                count += 1\n    return count \n",
        "num_ids": 72
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n",
        "num_ids": 7
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize variables\n    nth_sequence_count = 0\n    i = 2\n    nth_sequence_count = nth_sequence_count + m\n    while n > 1:\n        i = i + 1\n        nth_sequence_count = nth_sequence_count + m\n        n = n - 1\n    return nth_sequence_count\n",
        "num_ids": 87
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    possible_numbers = range(2,m+1)\n    all_combinations = [n**x for x in possible_numbers]\n    total_combinations = reduce(lambda x,y: x*y, all_combinations)\n    return total_combinations\n",
        "num_ids": 67
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    \n    # Explanation\n    '''\n    In this problem, we need to find the total number of sequences that can be formed of length n, such that the elements are positive integers and greater than or equal to twice the previous element. \n    As we know, we have a problem for finding the total number of numbers with a specific number of digits that are greater than or equal to m but smaller than or equal to n. \n    We will use the approach discussed in the following article.\n",
        "num_ids": 97
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    result = 1\n    for i in range(n-1):\n        result = result * (m - (i+1))\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        return m * (get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-2))\n",
        "num_ids": 58
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1: \n        return m\n    elif n == 2:\n        return m*(m+1)/2\n    else:\n        return m*get_total_number_of_sequences(m-1,n-1)\n",
        "num_ids": 61
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    if n == 2:\n        return m * m\n    if n == 3:\n        return m * m * m\n    if n == 4:\n        return m * m * m * m\n",
        "num_ids": 69
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    else:\n        return get_total_number_of_sequences(m,n-1) + (get_total_number_of_sequences(m-1,n-1))\n    \n    \ndef get_total_number_of_sequences_with_constraints(m,n,max_value): \n    '''\n    Write a function that takes in positive integers m, n and max_value and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        if m >= max_value:\n            return 1\n        else:\n            return 0\n    else:\n        if m >= max_value:\n            return 0\n        else:\n            return get_total_number_of_sequences_with_constraints(m,n-1,max_value) + get_total_number_of_sequences_with_constraints(m-1,n-1,max_value)\n    \n    \ndef get_total_number_of_sequences_with_constraints_2(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        if m >= 2:\n            return 2\n        else:\n            return 1\n    else:\n        if m >= 2:\n            return get_total_number_of_sequences_with_constraints_2(m,n-1) + get_total_number_of_sequences_with_constraints_2(m-1,n-1)\n        else:\n            return get_total_number_of_sequences_with_constraints_2(m,n-1)\n    \ndef get_total_number_of_sequences_2(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        if m >= 2:\n            return 2\n        else:\n            return 1\n    else:\n        if m >= 2:\n            return get_total_number_of_sequences_2(m,n-1) + get_total_number_of_sequences_2(m-1,n-1)\n        else:\n            return get_total_number_of_sequences_2(m,n-1)\n    \n    \ndef get_total_number_of_sequences_3(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        if m >= 2:\n            return 2\n        else:\n            return 1\n    else:\n        if m >= 2:\n            return get_total_number_of_sequences_3(m,n-1) + get_total_number_of_sequences_3(m-1,n-1)\n        else:\n            return get_total_number_of_sequences_3(m,n-1)\n    \n    \ndef get_total_number_of_sequences_with_constraints_4(m,n,max_value): \n    '''\n    Write a function that takes in positive integers m, n and max_value and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        if m >= max_value:\n            return 1\n        else:\n            return 0\n    else:\n        if m >= max_value:\n            return 0\n        else:\n            return get_total_number_of_sequences_with_constraints_4(m,n-1,max_value) + get_total_number_of_sequences_with_constraints_4(m-1,n-1,max_value)\n    \n    \ndef get_total_number_of_sequences_with_constraints_3(m,n,max_value): \n    '''\n    Write a function that takes in positive integers m, n and max_value and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        if m >= 2:\n            return 2\n        else:\n            return 1\n    else:\n        if m >= 2:\n            return get_total_number_of_sequences_with_constraints_3(m,n-1,max_value) + get_total_number_of_sequences_with_constraints_3(m-1,n-1,max_value)\n        else:\n            return get_total_number_of_sequences_with_constraints_3(m,n-1,max_value)\n    \n    \ndef get_total_number_of_sequences_with_constraints_4(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        if m >= 2:\n            return 2\n        else:\n            return 1\n    else:\n        if m >= 2:\n            return get_total_number_of_sequences_with_constraints_4(m,n-1) + get_total_number_of_sequences_with_constraints_4(m-1,n-1)\n        else:\n            return get_total_number_of_sequences_with_constraints_4(m,n-1)\n    \n    \ndef get_total_number_of_sequences_with_constraints_5(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        if m >= 2:\n            return 2\n        else:\n            return 1\n    else:\n        if m >= 2:\n            return get_total_number_of_sequences_with_constraints_5(m,n-1) + get_total_number_of_sequences_with_constraints_5(m-1,n-1)\n        else:\n            return get_total_number_of_sequences_with_constraints_5(m,n-1)\n    \n    \ndef get_total_number_of_sequences_with_constraints_6(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        if m >= 2:\n            return 2\n        else:\n            return 1\n    else:\n        if m >= 2:\n        ",
        "num_ids": 52
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    pass # remove this line\n",
        "num_ids": 9
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        if i == len(list1)-1:\n            list1[i] = list2[0]\n            list2.pop(0)\n    return list1\n",
        "num_ids": 54
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # list1 = list1[:len(list1) - 1]\n    # list1.extend(list2[:len(list2) - 1])\n    # return list1\n    list1 = list1[:len(list1) - 1]\n    list2 = list2[:len(list2) - 1]\n    list1[len(list1) - 1] = list2[len(list2) - 1]\n    return list1\n",
        "num_ids": 111
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list2)):\n        list1[-1]=list2[i]\n        return list1\n",
        "num_ids": 33
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list2\n    else:\n        list1.pop()\n        for i in list2:\n            list1.append(i)\n        return list1\n        \ndef replace_last(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1]+list2\n",
        "num_ids": 13
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    print(list1)\n",
        "num_ids": 20
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > len(list2):\n        list1[len(list1) - 1] = list2[len(list2) - 1]\n        return list1\n    elif len(list1) == len(list2):\n        list1[len(list1) - 1] = list2[len(list2) - 1]\n        return list1\n    else:\n        list2[len(list2) - 1] = list1[len(list1) - 1]\n        return list2\n",
        "num_ids": 125
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1:len(list1)]=list2[0:len(list2)]\n    return list1\n",
        "num_ids": 35
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    num_charac = 0\n    for x in str1:\n        num_charac = num_charac + 1\n    return num_charac\n",
        "num_ids": 38
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in range(0,len(str1)):\n        count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    chars = []\n    for i in str1:\n        if i not in chars:\n            chars.append(i)\n    return len(chars)\n",
        "num_ids": 41
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\nprint(\"count_charac:\", count_charac(\"hello\"))\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char=0\n    for i in str1:\n        char+=1\n    return char\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    print(count)\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for ch in str1:\n        char_count += 1\n    return char_count\n",
        "num_ids": 30
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count +=1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0: \n        return 1\n    # Initialize variables 'i' and 'n'. \n    i = n = N \n    while True: \n        # Increment 'n' until it is not equal to 'i'. \n        n += 1\n        # If 'n' is not equal to 'i', then it is a perfect \n        # square. Update 'i' and 'n' for next iteration. \n        if n!= i: \n            i = n \n            break\n        # Increment 'n' until it is not equal to 'i'. \n        n += 1\n        if n!= i: \n            i = n \n            break\n    # Return the output. \n    return i \n",
        "num_ids": 175
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    Sqrt = int(math.sqrt(N)) \n    ans = (-1) * (-1) \n    for i in range(1,1000): \n        ans = i * i \n        if (ans == N): \n            return i \n        if (ans > N): \n            return -1\n",
        "num_ids": 78
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = math.sqrt(N)\n    return(int((x + 1)**2)) \n",
        "num_ids": 27
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.sqrt(N))+1\ndef next_Perfect_Square_v2(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.sqrt(N))**2\n",
        "num_ids": 16
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return math.ceil((math.sqrt(N)+1)**2)\n",
        "num_ids": 22
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 2: \n        return 2\n    if N > 2: \n        for x in range(N+1, 2, -1): \n            if (x * x) > N: \n                return x \n                break\n    if N > 2: \n        return x \n",
        "num_ids": 72
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N)) \n    return (x+1)**2\ndef next_Perfect_Square_1(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N))\n    while x >= 0:\n        if (x**2 < N):\n            return x**2 + x + 1\n        x -= 1\n    return None\ndef next_Perfect_Square_2(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N))\n    while x >= 0:\n        if (x**2 < N):\n            return x**2 + x + 1\n        x -= 1\n    return None\n",
        "num_ids": 51
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return (math.sqrt(N) + 1) * 1.0\ndef find_next_great_divisible_number(N):\n    '''\n    Write a python function to find the next number greater than a given number, \n    which is also divisible by all its digits.\n    '''\n    #To find the next number divisible by all its digits, we will take all the \n    #digits of the number and find the greatest common divisor of all the digits.\n    \n    #Find the list of digits of the given number.\n    number_list = []\n    while N!=0:\n        number_list.append(N%10)\n        N = N//10\n    \n    #Initialize the variable gcd to 1.\n    gcd = 1\n    for i in range(0,len(number_list)):\n        #The digits of the number are stored in the list in descending order.\n        #That is why we have to find the greatest common divisor using\n        #the digits from the end to the beginning of the list.\n        gcd = gcd*number_list[i]\n    \n    return gcd\ndef find_greatest_common_divisor(A,B):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    #The greatest common divisor of two numbers is the greatest common \n    #divisor of all the digits of the numbers.\n    #To find the greatest common divisor of two numbers, we will take their \n    #digits and find the greatest common divisor of all the digits.\n    \n    #Find the greatest common divisor of A and B.\n    while B!=0:\n        A,B = B,A%B\n    \n    return A\n    \ndef find_greatest_common_multiple(A,B):\n    '''\n    Write a python function to find the greatest common multiple of two numbers.\n    '''\n    #The greatest common multiple of two numbers is the product of the \n    #greatest common divisor of the two numbers and the lowest common multiple\n    #of the two numbers.\n    \n    #Find the greatest common divisor of A and B.\n    greatest_common_divisor = find_greatest_common_divisor(A,B)\n    \n    #Find the lowest common multiple of A and B.\n    lowest_common_multiple = (greatest_common_divisor*A*B)//math.gcd(A,B)\n    \n    return lowest_common_multiple\n    \ndef convert_decimal_to_binary(N):\n    '''\n    Write a python function to convert a decimal number to binary.\n    '''\n    #Convert the decimal number to binary.\n    binary = ''\n    while N!=0:\n        binary = binary+str(N%2)\n        N = N//2\n    \n    return binary[::-1]\n    \ndef convert_decimal_to_octal(N):\n    '''\n    Write a python function to convert a decimal number to octal.\n    '''\n    #Convert the decimal number to octal.\n    octal = ''\n    while N!=0:\n        octal = octal+str(N%8)\n        N = N//8\n    \n    return octal[::-1]\n    \ndef convert_decimal_to_hexadecimal(N):\n    '''\n    Write a python function to convert a decimal number to hexadecimal.\n    '''\n    #Convert the decimal number to hexadecimal.\n    hexadecimal = ''\n    while N!=0:\n        hexadecimal = hexadecimal+str(N%16)\n        N = N//16\n    \n    return hexadecimal[::-1]\n    \ndef find_binary_representation_of_number(N):\n    '''\n    Write a python function to find the binary representation of a number.\n    '''\n    #To find the binary representation of a number, \n    #we will first convert the given decimal number to binary.\n    #Then we will find the first occurence of '1' in the binary number.\n    #To find the first occurence of '1' in a binary number, \n    #we can use the bitwise AND operation with the number itself.\n    \n    #Convert the given decimal number to binary.\n    binary_representation = convert_decimal_to_binary(N)\n    \n    #Find the first occurence of '1' in the binary representation of the given number.\n    first_occurence_of_one = binary_representation.find('1')\n    \n    return binary_representation[first_occurence_of_one:]\n    \ndef find_octal_representation_of_number(N):\n    '''\n    Write a python function to find the octal representation of a number.\n    '''\n    #To find the octal representation of a number,\n    #we will first convert the given decimal number to octal.\n    #Then we will find the first occurence of '0' in the octal number.\n    #To find the first occurence of '0' in a octal number,\n    #we can use the bitwise AND operation with the number itself.\n    \n    #Convert the given decimal number to octal.\n    octal_representation = convert_decimal_to_octal(N)\n    \n    #Find the first occurence of '0' in the octal representation of the given number.\n    first_occurence_of_zero = octal_representation.find('0')\n    \n    return octal_representation[first_occurence_of_zero:]\n    \ndef find_hexadecimal_representation_of_number(N):\n    '''\n    Write a python function to find the hexadecimal representation of a number.\n    '''\n    #To find the hexadecimal representation of a number,\n    #we will first convert the given decimal number to hexadecimal.\n    #Then we will find the first occurence of '0' in the hexadecimal number.\n    #To find the first occurence of '0' in a hexadecimal number,\n    #we can use the bitwise AND operation with the number itself.\n    \n    #Convert the given decimal number to hexadecimal.\n    hexadecimal_representation = convert_decimal_to_hexadecimal(N)\n    \n    #Find the first occurence of '0' in the hexadecimal representation of the given number.\n    first_occurence_of_zero = hexadecimal_representation.find('0')\n    \n    return hexadecimal_representation[first_occurence_of_zero:]\n    \ndef find_largest_power_of_2_less_than_number(N):\n    '''\n    Write a python function to find the largest power of 2 less than the given number.\n    '''\n    #The largest power of 2 less than the given number will be the largest power of 2\n    #less than the square root of the given number.\n    \n    #Square root of the given number.\n    square_root_of_given_number = math.sqrt(N)\n    \n    #Find the largest power of 2 less than the square root of the given number.\n    largest_power_of_2_less_than_square_root_of_given_number = math.log(square_root_of_given_number, 2)\n    \n    return 2**int(largest_power_of_2_less_than_square_root_of_given_number)\n    \ndef find_smallest_power_of_2_greater_than_number(N):\n    '''\n    Write a python function to find the smallest power of 2 greater than the given number.\n    '''\n    #The smallest power of 2 greater than the given number will be the smallest power of 2\n    #greater than the square root of the given number.\n    \n    #Square root of the given number.\n    square_root_of_given_number = math.sqrt(N)\n    \n    #Find the smallest power of 2 greater than the square root of the given number.\n    smallest_power_of_2_greater_than_square_root_of_given_number = math.log(square_root_of_given_number, 2)\n    \n    return 2**int(smal",
        "num_ids": 140
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while N > 0:\n        # N = N -1\n        sqrt_val = math.sqrt(N)\n        if sqrt_val == math.floor(sqrt_val):\n            return int(sqrt_val)\n        else:\n            N -= 1\n    return 0\n",
        "num_ids": 71
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Make the required change in the input number itself. \n    N += 1\n    square = math.floor(math.sqrt(N))\n    #print(square)\n    if square * square == N:\n        return N\n    return -1\n",
        "num_ids": 61
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # we will store all the increasing and decreasing subseqs\n    # so we will store them all in increasing subseqs and decreasing subseqs\n    # i.e. increasing subseqs = [1,2,3,4,5,6,7,8,9] -> [1,2,3,4,5,6] \n    #           decreasing subseqs = [1,2,3,4,5,6,7,8,9] -> [8,7,6,5,4,3]\n    # we are storing this in increasing and decreasing subseqs\n    # this will help in storing the possible subseqs\n    decreasing_subseqs = []\n    increasing_subseqs = []\n    # edge case for the first element \n    # check if the first element is greater than the next element \n    # if it is, then it is also the smallest number in the array\n    if arr[0] > arr[1]:\n        decreasing_subseqs.append([arr[0]])\n    # check if the last element is greater than the next element\n    # if it is, then it is also the largest number in the array\n    if arr[-1] > arr[-2]:\n        increasing_subseqs.append([arr[-1]])\n    \n    # looping through the array\n    for i in range(1,len(arr)-1):\n        # if the element is less than the previous one then it is also a part of the increasing subseq\n        if arr[i] > arr[i-1]:\n            increasing_subseqs.append([arr[i]])\n        # if the element is greater than the previous one then it is also a part of the decreasing subseq\n        if arr[i] < arr[i-1]:\n            decreasing_subseqs.append([arr[i]])\n",
        "num_ids": 435
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr)-1)\n",
        "num_ids": 22
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def maxSumIncreasingSubsequence(array): \n        #initialize array with values 0\n        sub_seq_sum_array = [0] * len(array)\n        \n        for i in range(len(array)):\n            current_max = 0\n            for j in range(i):\n                if array[i] > array[j] and sub_seq_sum_array[j] > current_max:\n                    current_max = sub_seq_sum_array[j]\n            sub_seq_sum_array[i] = current_max + array[i]\n        \n        max_value = 0\n        for element in sub_seq_sum_array:\n            if element > max_value:\n                max_value = element\n        return max_value\n    return maxSumIncreasingSubsequence(arr)\n",
        "num_ids": 193
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_bitonic(arr,0,len(arr)-1)\n",
        "num_ids": 22
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def find_max_sum(arr,start,end):\n        if start==end:\n            return arr[start]\n        mid=(start+end)//2\n        left_sum=find_max_sum(arr,start,mid)\n        right_sum=find_max_sum(arr,mid+1,end)\n        max_left=arr[mid]\n        min_right=arr[mid+1]\n        sum_left=0\n        sum_right=0\n        for i in range(mid,start-1,-1):\n            sum_left+=arr[i]\n            max_left=max(max_left,sum_left)\n        for i in range(mid+1,end+1):\n            sum_right+=arr[i]\n            min_right=min(min_right,sum_right)\n        return max(max_left+min_right,left_sum,right_sum)\n    return find_max_sum(arr,0,len(arr)-1)\n",
        "num_ids": 237
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def get_max_sum(arr, low, high):\n        if low >= high:\n            return arr[low]\n        mid = (low + high)//2\n        max_left = get_max_sum(arr, low, mid)\n        max_right = get_max_sum(arr, mid+1, high)\n        max_sum_in_bitonic_seq = max_left + max_right\n        max_sum_in_increasing_seq = float('-inf')\n        max_sum_in_decreasing_seq = float('-inf')\n        sum_in_increasing_seq = 0\n        sum_in_decreasing_seq = 0\n        for i in range(mid+1, low-1, -1):\n            sum_in_increasing_seq += arr[i]\n            if sum_in_increasing_seq > max_sum_in_increasing_seq:\n                max_sum_in_increasing_seq = sum_in_increasing_seq\n        for i in range(mid+1, high+1):\n            sum_in_decreasing_seq += arr[i]\n            if sum_in_decreasing_seq > max_sum_in_decreasing_seq:\n                max_sum_in_decreasing_seq = sum_in_decreasing_seq\n        return max(max_sum_in_increasing_seq + max_sum_in_bitonic_seq, max_sum_in_decreasing_seq + max_sum_in_bitonic_seq)\n    return get_max_sum(arr, 0, len(arr)-1)\n",
        "num_ids": 379
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return 0\n    if len(arr) == 2:\n        return sum(arr)\n    \n    incl = 0\n    excl = 0\n    for i in range(len(arr)):\n        # print(f'i: {i}')\n        new_excl = excl if excl > incl else incl\n        incl = excl + arr[i]\n        excl = new_excl\n        # print(f'excl: {excl}')\n        # print(f'incl: {incl}')\n    return max(excl, incl)\n",
        "num_ids": 149
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    m = len(arr)\n    max_sum = 0\n    for i in range(1, m-1):\n        max_sum = max(max_sum, arr[i] + max_sum)\n",
        "num_ids": 51
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # sort the array \n    arr.sort()\n    max_value = 0\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            max_value = max_value + arr[i] + arr[i+1]\n        else:\n            break\n    print(\"Maximum sum:\",max_value)\n",
        "num_ids": 89
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr) - 1)\n",
        "num_ids": 23
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1.0\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number / guess) / 2\n    guess = (guess + number ",
        "num_ids": 2015
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    number = abs(number)\n    guess = 1\n    #number = 12\n    iterations = 0\n    while guess * guess <= number and iterations < 500:\n        guess = (guess + (number / guess)) / 2.0\n        iterations += 1\n    return guess\n",
        "num_ids": 80
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    num = 0\n    num += 1\n    while abs(x - num ** 2) > 0.01:\n        num = (num + x / num) / 2\n    return num\n    \n    \ndef brent_squareroot(number):\n    '''\n    Write a function for computing square roots using the brent method.\n    '''\n    if number < 0:\n        number = -number\n    x = number\n    x_lower = x * 0.5\n    x_upper = x\n    low_prev = 0\n    high_prev = 0\n    eps = 1e-8\n    x_lower_prev = 0\n    x_upper_prev = 0\n    while abs(x_upper - x_lower) > eps:\n        if x_lower ** 2 < number and x_upper ** 2 > number:\n            return x_upper\n        x_lower = x_lower_prev\n        x_upper = x_upper_prev\n        if x_lower ** 2 < number:\n            x_lower_prev = x_lower\n            low_prev = x_lower\n            x_lower = (x_lower + x_upper) * 0.5\n            x_lower_prev = x_lower\n        if x_upper ** 2 > number:\n            x_upper_prev = x_upper\n            high_prev = x_upper\n            x_upper = (x_lower + x_upper) * 0.5\n            x_upper_prev = x_upper\n    return x_upper\n    \n    \ndef parallel_squareroot(number):\n    '''\n    Write a function for computing square roots using the parallel method.\n    '''\n    x = number\n    num = 0\n    num += 1\n    while abs(x - num ** 2) > 0.01:\n        num = (num + x / num) * 0.5\n    return num\n    \n    \ndef test_squareroot():\n    '''\n    Write some simple tests for the three squareroot functions.\n    '''\n    number = 3.0\n    eps = 1e-8\n    print('Testing Babylonian squareroot...')\n    assert abs(babylonian_squareroot(number) - math.sqrt(number)) < eps\n    print('Passed')\n    print('Testing Brent squareroot...')\n    assert abs(brent_squareroot(number) - math.sqrt(number)) < eps\n    print('Passed')\n    print('Testing Parallel squareroot...')\n    assert abs(parallel_squareroot(number) - math.sqrt(number)) < eps\n    print('Passed')\n    \n    \nif __name__ == '__main__':\n    test_squareroot()",
        "num_ids": 164
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number / 2.0) + 1\n    while x > y:\n        y = (y + (number / y)) / 2.0\n    return y\n",
        "num_ids": 47
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    previous_guess = 1.0\n",
        "num_ids": 18
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number / 2) + 1\n    while True:\n        y = 0.5 * (x + y)\n        yield y\n        x = number / y\n",
        "num_ids": 48
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def estimate(x):\n        return ((x + number / x) / 2)\n    def improve(x):\n        return ((x + number / x) / 2)\n    def sqrt(number):\n        x = number / 2\n        while (estimate(x) - improve(x)) > 0.00001:\n            x = estimate(x)\n        return x\n    return sqrt(number)\n",
        "num_ids": 97
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    previous_guess = 0\n",
        "num_ids": 17
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + 1) // 2\n    while y < x:\n        x = y\n        y = (x + number // x) // 2\n    return y\n",
        "num_ids": 47
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    m = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        m[i][i] = 1\n    for i in range(n-1): \n        if(str[i] == str[i+1]): \n            m[i][i+1] = 2\n    for j in range(2,n): \n        for i in range(0,n-j): \n            k = i+j \n            if(str[i] == str[k] and str[i+1] == str[k-1]): \n                m[i][k] = m[i+1][k-1] + 2\n            else: \n                m[i][k] = max(m[i][k-1],m[i+1][k]) \n    return m[0][n-1]\n",
        "num_ids": 221
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)]for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n    return L[0][n-1] \ndef matrix_chain_multiplication(p, n): \n    '''\n    Given a chain of matrices A1, A2, A3,.....An, you have to figure out the minimum number of multiplications needed to compute the matrix A1 * A2 * A3 *...... * An (n is the length of the chain). You can assume that the matrices are square.\n    '''\n    if n < 2: \n        return 0\n    min_mul = [0] * n\n    for i in range(1, n): \n        min_mul[i] = sys.maxsize \n        for j in range(i): \n            q = min_mul[j] + p[j] * p[i] * (i - j) \n            if q < min_mul[i]: \n                min_mul[i] = q \n    return min_mul[n-1] \ndef lcs(str1, str2): \n    '''\n    Given two strings str1 and str2, find the length of their longest common subsequence.\n    '''\n    return lcs_rec(str1, str2, 0, 0)\ndef lcs_rec(str1, str2, i, j): \n    '''\n    Recursive function to get the length of the longest common subsequence of two strings.\n    '''\n    if i == len(str1) or j == len(str2): \n        return 0\n    elif str1[i] == str2[j]: \n        return 1 + lcs_rec(str1, str2, i+1, j+1)\n    else: \n        return max(lcs_rec(str1, str2, i+1, j), lcs_rec(str1, str2, i, j+1))\ndef edit_distance(str1, str2, m, n): \n    '''\n    Given two strings str1 and str2, find the minimum number of operations needed to convert str1 into str2.\n    You can make the following edits:\n    Insert a character\n    Delete a character\n    Replace a character\n    '''\n    dp = [[0 for x in range(n+1)]for y in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0: \n                dp[i][j] = j \n            elif j == 0: \n                dp[i][j] = i \n            elif str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) \n    return dp[m][n] \ndef edit_distance_dp(str1, str2): \n    '''\n    Given two strings str1 and str2, find the minimum number of operations needed to convert str1 into str2.\n    You can make the following edits:\n    Insert a character\n    Delete a character\n    Replace a character\n    '''\n    m, n = len(str1), len(str2)\n    dp = [[0 for x in range(n+1)]for y in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0: \n                dp[i][j] = j \n            elif j == 0: \n                dp[i][j] = i \n            elif str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) \n    return dp[m][n] \ndef edit_distance_dp_tab(str1, str2): \n    '''\n    Given two strings str1 and str2, find the minimum number of operations needed to convert str1 into str2.\n    You can make the following edits:\n    Insert a character\n    Delete a character\n    Replace a character\n    '''\n    m, n = len(str1), len(str2)\n    dp = [[0 for x in range(n+1)]for y in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0: \n                dp[i][j] = j \n            elif j == 0: \n                dp[i][j] = i \n            elif str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) \n    return dp[m][n] \ndef edit_distance_rec(str1, str2, i, j): \n    '''\n    Given two strings str1 and str2, find the minimum number of operations needed to convert str1 into str2.\n    You can make the following edits:\n    Insert a character\n    Delete a character\n    Replace a character\n    '''\n    if i == 0: \n        return j \n    elif j == 0: \n        return i \n    elif str1[i-1] == str2[j-1]: \n        return edit_distance_rec(str1, str2, i-1, j-1) \n    else: \n        return 1 + min(edit_distance_rec(str1, str2, i, j-1), edit_distance_rec(str1, str2, i-1, j), edit_distance_rec(str1, str2, i-1, j-1)) \ndef lcs_dp(str1, str2): \n    '''\n    Given two strings str1 and str2, find the length of their longest common subsequence.\n    '''\n    m, n = len(str1), len(str2)\n    dp = [[0 for x in range(n+1)]for y in range(m+1)] \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1] + 1\n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n    return dp[m][n] \ndef lcs_dp_tab(str1, str2): \n    '''\n    Given two strings str1 and str2, find the length of their longest common subsequence.\n    '''\n    m, n = len(str1), len(str2)\n    dp = [[0 for x in range(n+1)]for y in range(m+1)] \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if str1[i-1] == str2[j-1]: \n                dp[i][j] = 1 + dp[i-1][j",
        "num_ids": 108
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)]for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1],L[i+1][j])\n    return L[0][n-1] \n",
        "num_ids": 196
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for x in range(n)] for y in range(n)] \n",
        "num_ids": 32
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)]for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n    return L[0][n-1] \n",
        "num_ids": 197
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)]for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n    return L[0][n-1]\n    \n",
        "num_ids": 198
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n",
        "num_ids": 32
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n+1)] for x in range(n+1)] \n",
        "num_ids": 36
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return rec_lps(str,0,len(str)-1)\n",
        "num_ids": 20
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    x = 0\n    for i in range(1, n):\n        x += 1 / i\n    return round(x, 2)\n",
        "num_ids": 34
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1 / i for i in range(1, n)])\n",
        "num_ids": 20
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    if n == 1:\n        return 1\n    else:\n        for i in range(1, n):\n            result += 1 / i\n        return result\n",
        "num_ids": 44
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + (1/n) + (harmonic_sum(n-1))\n    \n    \ndef harmonic_sum_squares(n):\n    '''\n    Write a function that takes in an integer n and returns the sum of the first n numbers, each raised to the power of the first n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n**n) + (harmonic_sum_squares(n-1))\n    \n    \ndef fib(n):\n    '''\n    Write a function that takes in a number and returns that number's fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \n    \ndef final_strings(words):\n    '''\n    Write a function that takes in a list of words, and returns a list of strings containing each word in the list, starting with the final word, then the 2nd to last, then the 3rd to last, and so on.\n    '''\n    if len(words) == 1:\n        return words\n    else:\n        return [words[-1]] + final_strings(words[:-1])\n        \n        \ndef split_strings(s):\n    '''\n    Write a function that takes in a string s and returns a list of strings of the same length as s, where each string is the first half of s, followed by the last half of s.\n    '''\n    if len(s) == 1:\n        return [s]\n    else:\n        return [s[:len(s)//2]] + split_strings(s[len(s)//2:])\n        \n        \ndef count_palindromes(s):\n    '''\n    Write a function that takes in a string and returns the number of palindromes in that string.\n    '''\n    if len(s) == 1:\n        return 1\n    elif s[0] == s[-1]:\n        return 1 + count_palindromes(s[1:-1])\n    else:\n        return count_palindromes(s[1:])\n    \n    \ndef string_matrix(s):\n    '''\n    Write a function that takes in a string s and returns a list of strings of the same length as s, where each string is the first character of s followed by the last character of s.\n    '''\n    if len(s) == 1:\n        return [s]\n    else:\n        return [s[0]] + string_matrix(s[1:])\n        \n        \ndef sum_string(s):\n    '''\n    Write a function that takes in a string s and returns the sum of all the characters in that string.\n    '''\n    if len(s) == 1:\n        return int(s[0])\n    else:\n        return int(s[0]) + sum_string(s[1:])\n        \n        \ndef char_histogram(s):\n    '''\n    Write a function that takes in a string s and returns a dictionary containing the number of times each character in s appears.\n    '''\n    if len(s) == 1:\n        return {s[0]:1}\n    else:\n        return {s[0]:1} + char_histogram(s[1:])\n        \n        \ndef char_tally(s):\n    '''\n    Write a function that takes in a string and returns a list of all the characters in that string, and their frequencies, sorted from highest to lowest.\n    '''\n    if len(s) == 1:\n        return [(s[0], 1)]\n    else:\n        return [(s[0], 1)] + char_tally(s[1:])\n        \n        \ndef remove_whitespace(s):\n    '''\n    Write a function that takes in a string s and removes whitespace from that string.\n    '''\n    if s == '':\n        return ''\n    elif s[0] in'\\t\\n\\r':\n        return remove_whitespace(s[1:])\n    else:\n        return s[0] + remove_whitespace(s[1:])\n        \n        \ndef remove_whitespace_list(s):\n    '''\n    Write a function that takes in a string s and removes whitespace from that string, returning a list of words without whitespace.\n    '''\n    if len(s) == 1:\n        return [s]\n    else:\n        if s[0] in'\\t\\n\\r':\n            return remove_whitespace_list(s[1:])\n        else:\n            return [s[0]] + remove_whitespace_list(s[1:])\n        \n        \ndef nth_list(n, s):\n    '''\n    Write a function that takes in a number n and a string s, and returns a list of the first n characters of the string s.\n    '''\n    if n == 1:\n        return [s[0]]\n    else:\n        return [s[0]] + nth_list(n-1, s[1:])\n        \n        \ndef letter_freq(s):\n    '''\n    Write a function that takes in a string s and returns a dictionary that maps each character in the string to the number of times it appears in the string.\n    '''\n    if len(s) == 1:\n        return {s[0]:1}\n    else:\n        return {s[0]:1} + letter_freq(s[1:])\n        \n        \ndef reverse_string(s):\n    '''\n    Write a function that takes in a string s and returns the string s in reversed order.\n    '''\n    if len(s) == 1:\n        return s\n    else:\n        return s[-1] + reverse_string(s[:-1])\n        \n        \ndef swap_tuples(tuple1, tuple2):\n    '''\n    Write a function that takes in two tuples and swaps the values of the tuples.\n    '''\n    if len(tuple1) == 1 and len(tuple2) == 1:\n        return (tuple2[0], tuple1[0])\n    else:\n        return (tuple2[0], tuple1[0]), swap_tuples(tuple1[1:], tuple2[1:])\n        \n        \ndef subsets_with_duplicates(s):\n    '''\n    Write a function that takes in a string s and returns a list of all possible subsets of s (with duplicates allowed).\n    '''\n    if len(s) == 1:\n        return [[], s]\n    else:\n        return [s[0]] + subsets_with_duplicates(s[1:]) + subsets_with_duplicates(s[1:])\n        \n        \ndef permutations_with_duplicates(s):\n    '''\n    Write a function that takes in a string s and returns a list of all the permutations of s (with duplicates allowed).\n    '''\n    if len(s) == 1:\n        return [s]\n    else:\n        return [s[0]] + permutations_with_duplicates(s[1:]) + [s[0] + i for i in permutations_with_duplicates(s[1:])]\n        \n        \ndef binary_search(s, v):\n    '''\n    Write a function that takes in a sorted list of numbers s and a target value v, and returns the index of the value v in the list s. If v is not in s, return -1.\n    '''\n    if len(s) == 1:\n        if s[0] == v:\n            return 0\n        else:\n            return -1\n    else:\n        if s[0] == v:\n            return 0\n        elif s[0] > v:\n            return binary_search(s[:len(s)//2], v)\n        else:\n            return 1 + binary_search(s[len(s)//2:], v)\n            \n            \ndef is_sorted(s):\n    '''\n    Write a function that takes in a list of numbers s, and returns True if the list s is in non-decreasing order, and False otherwise.\n    '''\n    if len(s) == 1:\n        retur",
        "num_ids": 15
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n",
        "num_ids": 25
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum2(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum3(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum4(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum5(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum6(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum7(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum8(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum9(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum10(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum11(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum12(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum13(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum14(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum15(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum16(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum17(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum18(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum19(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum20(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum21(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum22(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum23(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum24(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum25(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum26(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum27(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum28(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum29(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum30(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for x in range(1, n):\n        sum += 1/x\n    return sum\n    \ndef harmonic_sum31(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    assert n >= 1, 'n must be positive'\n    if n == 1:\n        return 1\n",
        "num_ids": 26
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/sum([1/i for i in range(1, n)])\n",
        "num_ids": 22
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Approach 1\n    '''\n    # Get all numbers up to n\n    sum = 0\n    for i in range(1, n+1):\n        # Get the sum of all numbers up to i\n        sum += 1/i\n    return sum\n    '''\n    \n    # Approach 2\n    return sum(1/i for i in range(1, n+1))\n",
        "num_ids": 28
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1 & set2)\n",
        "num_ids": 39
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #solution 1:\n    #return sorted(set(array_nums1).intersection(array_nums2))\n    #solution 2:\n    return list(set(array_nums1) & set(array_nums2))\n",
        "num_ids": 61
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #Using sets\n    #return list(set(array_nums1) & set(array_nums2))\n",
        "num_ids": 30
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n",
        "num_ids": 28
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersected_nums = []\n    for i in range(0,len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersected_nums.append(array_nums1[i])\n    return intersected_nums\n",
        "num_ids": 75
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [x for x in array_nums1 if x in array_nums2]\n",
        "num_ids": 24
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    i = 0\n    j = 0\n    intersection_array = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection_array.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n    return intersection_array\n",
        "num_ids": 169
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    nums1 = set(array_nums1)\n    nums2 = set(array_nums2)\n    for x in nums1:\n        if x in nums2:\n            intersection.append(x)\n    return intersection\n",
        "num_ids": 67
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) > len(array_nums2):\n        big_array = array_nums1\n        small_array = array_nums2\n    else:\n        big_array = array_nums2\n        small_array = array_nums1\n    result_array = []\n    for item in big_array:\n        if item in small_array:\n            result_array.append(item)\n    return result_array\n",
        "num_ids": 111
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = []\n    for i in array_nums1:\n        if i in array_nums2:\n            res.append(i)\n    return res\n",
        "num_ids": 41
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(0,len(tup)):\n        if tup[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x=x.lower()\n    count = 0\n    for ele in tup:\n        if ele == x:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if tup == tuple:\n        return 0\n    else:\n        return tup.count(x)\n    \ndef remove_X(tup, x):\n    '''\n    Write a python function that removes an element from a tuple, so that the modified tuple has the given element removed.\n    '''\n    if tup == tuple:\n        return tup\n    else:\n        return tup.remove(x)\n    \ndef index_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and returns the index of the element in the tuple, if the element appears multiple times in the tuple, then return only the index of the first occurence of the element in the tuple. If the element is not in the tuple, then return None.\n    '''\n    if tup == tuple:\n        return None\n    else:\n        return tup.index(x)\n",
        "num_ids": 28
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if tup is None:\n        return 0\n    elif tup[0] == x:\n        return 1 + count_X(tup[1:], x)\n    else:\n        return count_X(tup[1:], x)\n",
        "num_ids": 62
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for e in tup:\n        if e == x:\n            count += 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if (element == x):\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for e in tup:\n        if e == x:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        list.append(element)\n        return list\n    elif list == [element]:\n        list.append(element)\n        return list\n    else:\n        new_list = []\n        for i in range(len(list)):\n            new_list.append(list[i])\n            new_list.append(element)\n        return new_list\n    \ndef insert_element_end(list,element):\n    '''\n    Write a function that takes in a list and an element and appends the element to the list, and returns the resulting list.\n    '''\n    if list == []:\n        list.append(element)\n        return list\n    elif list == [element]:\n        list.append(element)\n        return list\n    else:\n        new_list = []\n        for i in range(len(list)):\n            new_list.append(list[i])\n        new_list.append(element)\n        return new_list\n",
        "num_ids": 93
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n",
        "num_ids": 16
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for ele in list:\n        result.append(element)\n        result.append(ele)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]+list\n",
        "num_ids": 9
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # list = [1,2,3,4]\n    # element = 'dog'\n    # return [element,1,element,2,element,3,element,4]\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n",
        "num_ids": 92
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n",
        "num_ids": 16
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # TODO: Write function here\n    list.insert(0, element)\n    return list\n",
        "num_ids": 25
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(item)\n        new_list.append(element)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #Insert element into list by appending it to the beginning then popping out the first element of the list\n    new_list = [element] + list\n    new_list.pop(0)\n    return new_list\n",
        "num_ids": 52
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Create an empty list to store the result\n    result = []\n    # Check if the element is in the list\n    if element in list:\n        # Append the element to the list\n        list.append(element)\n        # Loop over the list\n        for index in range(len(list)):\n            # If the element is in the list\n            if list[index] == element:\n                # Append the element to the list\n                result.append(element)\n            # If the element is not in the list\n            else:\n                # Append the element to the list\n                result.append(list[index])\n        # Return the list\n        return result\n",
        "num_ids": 156
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def real(numbers):\n        real = numbers.real\n        return real\n    \n    def imag(numbers):\n        imag = numbers.imag\n        return imag\n    \n    def modulus(numbers):\n        modulus = cmath.sqrt((numbers.real ** 2) + (numbers.imag ** 2))\n        return modulus\n    \n    def phase(numbers):\n        phase = cmath.phase(numbers)\n        return phase\n    \n    real = real(numbers)\n    imag = imag(numbers)\n    modulus = modulus(numbers)\n    phase = phase(numbers)\n    return [real, imag, modulus, phase]\n",
        "num_ids": 164
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def convert_polar(complex_num):\n        '''\n        Write a python function to convert complex numbers to polar coordinates.\n        '''\n        converted = cmath.polar(complex_num)\n        print('The complex number {} converted to polar coordinates is: {}'.format(complex_num,converted))\n        return converted\n",
        "num_ids": 46
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(\"\\n\")\n    def polar(a):\n        a = cmath.polar(a)\n        print(\"Real part:\",a[0],\"\\n\")\n        print(\"Imaginary part:\",a[1],\"\\n\")\n        #print(\"The number of real and imaginary parts:\",a)\n    polar(numbers)\n",
        "num_ids": 84
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x,y=numbers\n    r=math.sqrt((x**2)+(y**2))\n    t=math.atan(y/x)\n    return (r,t)\n",
        "num_ids": 48
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def complex(a,b):\n        '''\n        Function to convert complex numbers to polar coordinates.\n        '''\n        return cmath.polar(complex(a,b))\n    if numbers == []:\n        return None\n    else:\n        a = numbers[0]\n        b = numbers[1]\n        print(complex(a,b))\n        return complex(a,b)\n",
        "num_ids": 67
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    list_complex = []\n    for x in numbers:\n        r = abs(x)\n        phi = cmath.phase(x)\n        list_complex.append( (r,phi) )\n    return list_complex    \n    \ndef check(list_complex, key):    \n    '''\n    Write a python function to check if a complex number is its own conjugate in a list of complex numbers.\n    '''\n    list_is_conjugate = []\n    for x in list_complex:\n        if x[0] == key[0] and x[1] == key[1]*(-1):\n            list_is_conjugate.append(True)\n        else:\n            list_is_conjugate.append(False)\n    return list_is_conjugate    \n",
        "num_ids": 91
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(\"Given numbers:\", numbers)\n    polar = []\n    for number in numbers:\n        real, imag = number.real, number.imag\n        if number.real == 0:\n            real = 0\n        if number.imag == 0:\n            imag = 0\n        if real < 0:\n            imag = imag * -1\n            real = real * -1\n        if real == 0:\n            imag = imag / 0.1\n        if imag == 0:\n            real = real / 0.1\n        if real == 0 and imag == 0:\n            real = 0\n            imag = 0\n        if real == 0 and imag!= 0:\n            real = 0\n            imag = imag / 0.1\n        if real!= 0 and imag == 0:\n            imag = imag / 0.1\n        radius = (real**2 + imag**2)**0.5\n        if radius < 0:\n            imag = imag * -1\n            real = real * -1\n            radius = (real**2 + imag**2)**0.5\n        print(\"Radius:\", radius)\n        print(\"Theta:\", cmath.phase(complex(real, imag)))\n        polar.append(complex(real, imag))\n    print(\"Polar coordinates:\", polar)\ndef apply_complex_numbers(complex_numbers, func):\n    '''\n    Write a python function to apply a function to the complex numbers.\n    '''\n    print(\"Given complex numbers:\", complex_numbers)\n    print(\"Function:\", func)\n    real = []\n    imag = []\n    for number in complex_numbers:\n        real.append(number.real)\n        imag.append(number.imag)\n    print(\"Real:\", real)\n    print(\"Imaginary:\", imag)\n    for number, i in zip(real, range(len(real))):\n        real[i] = func(number)\n    for number, i in zip(imag, range(len(imag))):\n        imag[i] = func(number)\n    print(\"Real:\", real)\n    print(\"Imaginary:\", imag)\n    for i in range(len(real)):\n        print(\"Complex number:\", complex(real[i], imag[i]))\ndef multiply_complex_numbers(complex_numbers, numbers):\n    '''\n    Write a python function to multiply complex numbers.\n    '''\n    print(\"Given complex numbers:\", complex_numbers)\n    print(\"Numbers to multiply:\", numbers)\n    real = []\n    imag = []\n    for number in complex_numbers:\n        real.append(number.real)\n        imag.append(number.imag)\n    print(\"Real:\", real)\n    print(\"Imaginary:\", imag)\n    for number, i in zip(real, range(len(real))):\n        real[i] = number * numbers[0]\n    for number, i in zip(imag, range(len(imag))):\n        imag[i] = number * numbers[1]\n    print(\"Real:\", real)\n    print(\"Imaginary:\", imag)\n    for i in range(len(real)):\n        print(\"Complex number:\", complex(real[i], imag[i]))\ndef complex_number_exp(complex_number):\n    '''\n    Write a python function to raise a complex number to power e.\n    '''\n    print(\"Given complex number:\", complex_number)\n    real = complex_number.real\n    imag = complex_number.imag\n    print(\"Real:\", real)\n    print(\"Imaginary:\", imag)\n    power = cmath.exp(complex(real, imag))\n    print(\"Power:\", power)\n    return power\ndef complex_number_ln(complex_number):\n    '''\n    Write a python function to raise a complex number to the power of the constant e.\n    '''\n    print(\"Given complex number:\", complex_number)\n    real = complex_number.real\n    imag = complex_number.imag\n    print(\"Real:\", real)\n    print(\"Imaginary:\", imag)\n    power = cmath.log(complex(real, imag))\n    print(\"Power:\", power)\n    return power\ndef complex_number_sin(complex_number):\n    '''\n    Write a python function to raise a complex number to the sine of theta.\n    '''\n    print(\"Given complex number:\", complex_number)\n    real = complex_number.real\n    imag = complex_number.imag\n    print(\"Real:\", real)\n    print(\"Imaginary:\", imag)\n    power = cmath.sin(complex(real, imag))\n    print(\"Power:\", power)\n    return power\ndef complex_number_cos(complex_number):\n    '''\n    Write a python function to raise a complex number to the cosine of theta.\n    '''\n    print(\"Given complex number:\", complex_number)\n    real = complex_number.real\n    imag = complex_number.imag\n    print(\"Real:\", real)\n    print(\"Imaginary:\", imag)\n    power = cmath.cos(complex(real, imag))\n    print(\"Power:\", power)\n    return power\ndef complex_number_tan(complex_number):\n    '''\n    Write a python function to raise a complex number to the tangent of theta.\n    '''\n    print(\"Given complex number:\", complex_number)\n    real = complex_number.real\n    imag = complex_number.imag\n    print(\"Real:\", real)\n    print(\"Imaginary:\", imag)\n    power = cmath.tan(complex(real, imag))\n    print(\"Power:\", power)\n    return power\ndef complex_number_inverse(complex_number):\n    '''\n    Write a python function to find the inverse of a complex number.\n    '''\n    print(\"Given complex number:\", complex_number)\n    real = complex_number.real\n    imag = complex_number.imag\n    print(\"Real:\", real)\n    print(\"Imaginary:\", imag)\n    power = cmath.sqrt(complex(real, imag))\n    print(\"Power:\", power)\n    return power\ndef complex_number_add(complex_number, complex_number2):\n    '''\n    Write a python function to find the sum of two complex numbers.\n    '''\n    print(\"Given complex numbers:\", complex_number)\n    print(\"Given complex numbers:\", complex_number2)\n    real = complex_number.real\n    imag = complex_number.imag\n    real2 = complex_number2.real\n    imag2 = complex_number2.imag\n    print(\"Real:\", real)\n    print(\"Imaginary:\", imag)\n    print(\"Real2:\", real2)\n    print(\"Imaginary2:\", imag2)\n    power = complex(real + real2, imag + imag2)\n    print(\"Power:\", power)\n    return power\ndef complex_number_subtract(complex_number, complex_number2):\n    '''\n    Write a python function to find the difference between two complex numbers.\n    '''\n    print(\"Given complex numbers:\", complex_number)\n    print(\"Given complex numbers:\", complex_number2)\n    real = complex_number.real\n    imag = complex_number.imag\n    real2 = complex_number2.real\n    imag2 = complex_number2.imag\n    print(\"Real:\", real)\n    print(\"Imaginary:\", imag)\n    print(\"Real2:\", real2)\n    print(\"Imaginary2:\", imag2)\n    power = complex(real - real2, imag - imag2)\n    print(\"Power:\", power)\n    return power\ndef complex_number_multiply(complex_number, complex_number2):\n    '''\n    Write a python function to multiply two complex numbers.\n    '''\n    print(\"Given complex numbers:\", complex_number)\n    print(\"Given complex numbers:\", complex_number2)\n    real = complex_number.real\n    imag = complex_number.imag\n    real2 = complex_number2.real\n    imag2 = complex_number2.imag\n    print(\"Real:\", real)\n    print(\"Imaginary:\", imag)\n    print(\"Real2:\", real2)\n    print(\"Imaginary2:\", imag2)\n    power = complex(real * real2 - imag * imag2, real * imag2 + imag * real2)\n    print(\"Power:\", power)\n    return powe",
        "num_ids": 152
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def polar_complex(complex_number):\n        return cmath.polar(complex_number)\n    return [polar_complex(complex_number) for complex_number in numbers]\n",
        "num_ids": 46
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(numbers) is True:\n        a=cmath.polar(numbers)\n        return a\n    else:\n        print(\"Please enter a complex number\")\ndef get_polar(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(numbers) is True:\n        a=cmath.polar(numbers)\n        return a\n    else:\n        print(\"Please enter a complex number\")\ndef cmplx_polar_to_rect(real,imag):\n    '''\n    Write a python function to convert complex numbers from polar coordinates to rectangular coordinates.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(real) is True:\n        real=cmath.rect(real,imag*cmath.pi/180)\n        return real\n    else:\n        print(\"Please enter a complex number\")\ndef get_rect(real,imag):\n    '''\n    Write a python function to convert complex numbers from rectangular coordinates to polar coordinates.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(real) is True:\n        real=cmath.rect(real,imag*cmath.pi/180)\n        return real\n    else:\n        print(\"Please enter a complex number\")\ndef cmplx_rect_to_polar(real,imag):\n    '''\n    Write a python function to convert complex numbers from rectangular coordinates to polar coordinates.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(real) is True:\n        real=cmath.rect(real,imag*cmath.pi/180)\n        return real\n    else:\n        print(\"Please enter a complex number\")\ndef get_polar_to_rect(real,imag):\n    '''\n    Write a python function to convert complex numbers from polar coordinates to rectangular coordinates.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(real) is True:\n        real=cmath.rect(real,imag*cmath.pi/180)\n        return real\n    else:\n        print(\"Please enter a complex number\")\ndef rect_to_polar(real,imag):\n    '''\n    Write a python function to convert complex numbers from rectangular coordinates to polar coordinates.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(real) is True:\n        real=cmath.rect(real,imag*cmath.pi/180)\n        return real\n    else:\n        print(\"Please enter a complex number\")\ndef cmplx_rect_to_polar(real,imag):\n    '''\n    Write a python function to convert complex numbers from rectangular coordinates to polar coordinates.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(real) is True:\n        real=cmath.rect(real,imag*cmath.pi/180)\n        return real\n    else:\n        print(\"Please enter a complex number\")\ndef get_rect_to_polar(real,imag):\n    '''\n    Write a python function to convert complex numbers from rectangular coordinates to polar coordinates.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(real) is True:\n        real=cmath.rect(real,imag*cmath.pi/180)\n        return real\n    else:\n        print(\"Please enter a complex number\")\ndef complex_add(complex1,complex2):\n    '''\n    Write a python function to add two complex numbers.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(complex1) is True and check_type(complex2) is True:\n        print(complex1+complex2)\n    elif check_type(complex1) is False or check_type(complex2) is False:\n        print(\"Please enter a complex number\")\ndef complex_sub(complex1,complex2):\n    '''\n    Write a python function to subtract two complex numbers.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(complex1) is True and check_type(complex2) is True:\n        print(complex1-complex2)\n    elif check_type(complex1) is False or check_type(complex2) is False:\n        print(\"Please enter a complex number\")\ndef complex_multiply(complex1,complex2):\n    '''\n    Write a python function to multiply two complex numbers.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(complex1) is True and check_type(complex2) is True:\n        print(complex1*complex2)\n    elif check_type(complex1) is False or check_type(complex2) is False:\n        print(\"Please enter a complex number\")\ndef complex_divide(complex1,complex2):\n    '''\n    Write a python function to divide two complex numbers.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(complex1) is True and check_type(complex2) is True:\n        print(complex1/complex2)\n    elif check_type(complex1) is False or check_type(complex2) is False:\n        print(\"Please enter a complex number\")\ndef complex_polar(real,imag):\n    '''\n    Write a python function to convert complex numbers from rectangular coordinates to polar coordinates.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(real) is True:\n        print(real,imag*cmath.pi/180)\n    else:\n        print(\"Please enter a complex number\")\ndef complex_polar_to_rect(real,imag):\n    '''\n    Write a python function to convert complex numbers from polar coordinates to rectangular coordinates.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(real) is True:\n        print(cmath.rect(real,imag*cmath.pi/180))\n    else:\n        print(\"Please enter a complex number\")\ndef complex_rect_to_polar(real,imag):\n    '''\n    Write a python function to convert complex numbers from rectangular coordinates to polar coordinates.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(real) is True:\n        print(cmath.rect(real,imag*cmath.pi/180))\n    else:\n        print(\"Please enter a complex number\")\ndef complex_real(complex1):\n    '''\n    Write a python function to get the real part of a complex number.\n    '''\n    def check_type(num):\n        if isinstance(num,complex):\n            return True\n        else:\n            return False\n    if check_type(complex1) is True:\n        print(complex1.real)\n    else:\n        print(\"Please enter a complex number\")\ndef complex_imag(complex1):\n    '''\n    Write a python function to ge",
        "num_ids": 9
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers=numbers.replace('i','j')\n    return complex(numbers)\n",
        "num_ids": 24
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for x in list1:\n        if type(x)==int:\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if type(i) == int])\n",
        "num_ids": 21
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count=count+1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n",
        "num_ids": 10
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) is int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) is int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if isinstance(list1[i], int):\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l)):\n        a = l[i]\n        for j in range(i+1, len(l)):\n            b = l[j]\n            for k in range(j+1, len(l)):\n                c = l[k]\n                if len(set([a,b,c])) == 3:\n                    combos.append(tuple([a,b,c]))\n    return combos\ndef generate_possible_colors(hand):\n    '''\n    Write a function that takes in a list and returns a list of all possible tuples of colors that can be used to generate an almost-sorted hand. The list of colors does not have to be sorted and may include duplicates. The colors may be used any number of times.\n    '''\n    l = []\n    for i in hand:\n        for j in hand:\n            if i!= j:\n                l.append((i,j))\n    return l\ndef count_occurrences(hand, color):\n    '''\n    Write a function that takes in a hand and a color and returns the number of times the color appears in the hand.\n    '''\n    count = 0\n    for i in hand:\n        if i == color:\n            count += 1\n    return count\ndef almost_sorted(hand):\n    '''\n    Write a function that takes in a hand and returns True if the hand is almost sorted. The hand must have one or more of the same numbers in pairs, but not necessarily adjacent, like:\n    '''\n    hand_copy = hand.copy()\n    hand_copy.sort()\n    for i in range(len(hand)):\n        if hand_copy[i]!= hand[i]:\n            return False\n    return True\ndef find_color_group_count(hand):\n    '''\n    Write a function that takes in a hand and returns the number of colors that are part of a color group. A color group is a set of two or more adjacent colors. For example, in the following hand, the reds are part of a color group because they are all adjacent and there are at least two of them.\n    '''\n    hand_copy = hand.copy()\n    hand_copy.sort()\n    num_groups = 0\n    for i in range(len(hand)-1):\n        if hand_copy[i] == hand_copy[i+1]:\n            num_groups += 1\n    return num_groups\ndef find_largest_group(hand):\n    '''\n    Write a function that takes in a hand and returns the largest color group. A color group is a set of two or more adjacent colors. The largest color group is the one that contains the most of the colors in the hand. For example, in the following hand, the largest color group is the set of reds because they all appear together.\n    '''\n    hand_copy = hand.copy()\n    hand_copy.sort()\n    max_group = []\n    for i in range(len(hand)-1):\n        if hand_copy[i] == hand_copy[i+1]:\n            max_group.append(hand_copy[i])\n    return max_group\ndef find_largest_run(hand):\n    '''\n    Write a function that takes in a hand and returns the largest run of numbers that is part of the same color group. For example, in the following hand, the largest run is the set of reds because they appear together and there are more reds than any other number.\n    '''\n    hand_copy = hand.copy()\n    hand_copy.sort()\n    max_run = []\n    current_run = []\n    for i in range(len(hand_copy)-1):\n        if hand_copy[i] == hand_copy[i+1]:\n            current_run.append(hand_copy[i])\n            if len(current_run) > len(max_run):\n                max_run = current_run\n        else:\n            current_run = []\n    return max_run\ndef almost_sorted_colors(hand):\n    '''\n    Write a function that takes in a hand and returns the number of colors that are part of an almost-sorted color group. An almost-sorted color group is a set of two or more adjacent colors that must be part of the same color group. For example, the following hand is almost sorted since the reds and the twos are part of the same color group, but the threes and the fours are not.\n    '''\n    hand_copy = hand.copy()\n    hand_copy.sort()\n    num_groups = 0\n    for i in range(len(hand)-1):\n        if hand_copy[i] == hand_copy[i+1]:\n            num_groups += 1\n    return num_groups\ndef sort_hand(hand):\n    '''\n    Write a function that takes in a hand and returns the hand sorted in ascending order.\n    '''\n    return sorted(hand)\ndef sort_hand_v2(hand):\n    '''\n    Write a function that takes in a hand and returns the hand sorted in descending order.\n    '''\n    hand_copy = hand.copy()\n    hand_copy.sort()\n    hand_copy = hand_copy[::-1]\n    return hand_copy\ndef find_min_number_of_cards_for_almost_sorted_hand(hand, k):\n    '''\n    Write a function that takes in a hand and a k and returns the minimum number of cards that must be removed from the hand to make the hand almost sorted.\n    '''\n    hand_copy = hand.copy()\n    hand_copy.sort()\n    for i in range(k):\n        hand_copy = remove_cards(hand_copy, 2)\n    return len(hand_copy)\ndef remove_cards(hand, n):\n    '''\n    Write a function that takes in a hand, an integer n, and returns a list of cards that are removed n at a time.\n    '''\n    hand_copy = hand.copy()\n    hand_copy = hand_copy[::-1]\n    for i in range(n):\n        hand_copy.pop()\n    hand_copy = hand_copy[::-1]\n    return hand_copy\ndef replace_color(hand, color, replacement):\n    '''\n    Write a function that takes in a hand, a color, and a replacement color and returns a list of the hand where the color is replaced with the replacement color.\n    '''\n    hand_copy = hand.copy()\n    for i in range(len(hand_copy)):\n        if hand_copy[i] == color:\n            hand_copy[i] = replacement\n    return hand_copy\ndef find_all_combinations(hand, k):\n    '''\n    Write a function that takes in a hand, and an integer k, and returns a list of all possible combinations of k cards.\n    '''\n    l = []\n    for i in range(len(hand)+1):\n        for j in combinations_with_replacement(hand, i):\n            if len(j) == k:\n                l.append(list(j))\n    return l\ndef recursive_generate_colors(hand):\n    '''\n    Write a function that takes in a hand and returns a list of all possible tuples of colors that can be used to generate an almost-sorted hand. The list of colors does not have to be sorted and may include duplicates. The colors may be used any number of times. The function should recursively call itself if you have enough of the same color in the hand to make an almost-sorted hand.\n    '''\n    l = []\n    for i in hand:\n        for j in hand:\n            if i!= j:\n                l.append((i,j))\n    for i in l:\n        if almost_sorted(replace_color(hand, i[0], i[1])):\n            l.remove(i)\n    return l\ndef recursive_generate_possible_colors(hand):\n    '''\n    Write a function that takes in a hand and returns a list of all possible tuples of colors that can be used to generate an almost-sorted hand. The list of colors does not have to be sorted and may include duplicates. The colors may be used any number of times. The function should recursively call itself if you have enough of the same color in the hand to make an almost-sorted hand.\n    '''\n    l = []\n",
        "num_ids": 7
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [i for i in combinations_with_replacement(l, n)]\n",
        "num_ids": 21
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 21
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]\n",
        "num_ids": 21
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            print(i,j)\n    return l\n",
        "num_ids": 42
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = list(combinations_with_replacement(l, n))\n    return comb_list\n",
        "num_ids": 28
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = list(combinations_with_replacement(l, n))\n    for index, combination in enumerate(combinations):\n        combinations[index] = tuple(combination)\n    return combinations\n",
        "num_ids": 51
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = sorted(l)\n    result = []\n    for i in range(n,len(l)+1):\n        result.extend(list(combinations_with_replacement(l, i)))\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        yield []\n        return\n    if len(l) < n:\n        return\n    for i in range(len(l)):\n        for cc in combinations_colors(l[:i]+l[i+1:], n-1):\n            yield [l[i]] + cc\n",
        "num_ids": 79
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return \"Error!\"\n    if n == 1:\n        return l\n    if len(l) == n:\n        return [tuple(l)]\n    result = []\n    for i in range(len(l)):\n        result += combinations_colors(l[:i]+l[i+1:], n-1)\n    return result\n",
        "num_ids": 93
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = [2]\n    for number in range(3, n+1):\n        is_prime = True\n        for prime in primes:\n            if number % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(number)\n    return len(primes)\n",
        "num_ids": 92
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_Prime(n):\n        if n <= 3:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            return True\n    if n <= 1:\n        return 0\n    if n <= 3:\n        return 1\n    if n % 2 == 0:\n        return 0\n    for i in range(3,n):\n        if is_Prime(i):\n            pass\n        else:\n            return 0\n    return 1 + count_Primes_nums(n//2)\n",
        "num_ids": 127
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        '''\n        Write a function that takes in a non-negative number and returns True if it is prime, and False if it is not prime.\n        '''\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for x in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % x == 0:\n                return False\n        return True\n    \n    def count_primes(n):\n        '''\n        Write a function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        if n == 1:\n            return 0\n        prime = []\n        for i in range(2, n):\n            if is_prime(i):\n                prime.append(i)\n        return len(prime)\n    return count_primes(n)\ncount_Primes_nums(500)\n",
        "num_ids": 74
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # o(n)\n    count = 0\n    if n < 2:\n        return 0\n    for i in range(2, n+1):\n        if isPrime(i):\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 3:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        if n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        for i in range(5, int(n**0.5) + 1, 6):\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(n):\n        if is_prime(i):\n            count += 1\n    return count\n",
        "num_ids": 125
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = [2]\n    for num in range(3,n+1):\n        prime = True\n        for div in range(2, num):\n            if (num % div) == 0:\n                prime = False\n                break\n        if prime == True:\n            primes.append(num)\n    return len(primes)\n",
        "num_ids": 93
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<2:\n        return 0\n    primes = [2]\n    x = 3\n    while x <= n:\n        for y in range(3,x,2):\n            if x%y == 0:\n                x += 2\n                break\n        else:\n            primes.append(x)\n            x += 2\n    print(primes)\n    return len(primes)\n",
        "num_ids": 96
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    primes = [2]\n    x = 3\n    while x <= n:\n        for y in primes:\n            if x%y == 0:\n                x += 2\n                break\n        else:\n            primes.append(x)\n            x += 2\n    return len(primes)\n",
        "num_ids": 84
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    prime_num = [2]\n    for i in range(3, n):\n        for j in prime_num:\n            if i % j == 0:\n                break\n        else:\n            prime_num.append(i)\n    return len(prime_num)\n",
        "num_ids": 81
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return (a,b)\n",
        "num_ids": 19
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple = test_tup1\n        elif test_tup1[i] < test_tup2[i]:\n            max_tuple = test_tup2\n        else:\n            continue\n    return max_tuple\n",
        "num_ids": 105
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # get largest value in each tuple, and add to result tuple if they are equal\n    return [max(i, j) for i, j in zip(test_tup1, test_tup2)]\n",
        "num_ids": 50
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print(test_tup1, test_tup2)\n    if len(test_tup1) == len(test_tup2):\n        max_tup = []\n        for i in range(0, len(test_tup1)):\n            max_tup.append(max(test_tup1[i], test_tup2[i]))\n        return tuple(max_tup)\n    else:\n        print(\"Tuples are not the same length!\")\n",
        "num_ids": 119
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1), max(test_tup2)\n",
        "num_ids": 21
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    def max_of_two(t1, t2):\n        return max(t1, t2)\n",
        "num_ids": 30
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = 0\n    for i in test_tup1:\n        if i > max1:\n            max1 = i\n    max2 = 0\n    for j in test_tup2:\n        if j > max2:\n            max2 = j\n",
        "num_ids": 64
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def comp(val1, val2):\n        if val1 > val2:\n            return 1\n        elif val1 == val2:\n            return 0\n        else:\n            return -1\n",
        "num_ids": 49
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    sum1 = 0\n    sum2 = 0\n",
        "num_ids": 14
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #tuple1 = (1, 2, 4)\n    #tuple2 = (5, 7, 9)\n",
        "num_ids": 30
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return test_tup1\n        else:\n            return test_tup2\n",
        "num_ids": 58
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define a prime number\n    prime_number = [2,3,5,7,11,13]\n    # For a given n, if n/p is even then p is not a newman\u2013shanks\u2013williams prime\n    if n in prime_number:\n        return n\n    # To generate a newman\u2013shanks\u2013williams prime number \n    # we take a given prime number p \n    # m is the multiplier and k is the incrementer \n    m = 10**9\n    k = 0\n    while True:\n        # k will be incremented in every iteration \n        # n = (p-1)*m + k \n        # (p-1) is a multiple of p \n        if (n-1)%(p*m) == 0:\n            # we have found the prime number \n            # and k is the answer \n            return p*m + k \n        k += 1\n        # To generate a newman\u2013shanks\u2013williams prime number \n        # we take a given prime number p \n        # m is the multiplier and k is the incrementer \n        m = 10**9\n",
        "num_ids": 271
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 0\n    p = 2\n    while a!= n:\n        if is_prime(p):\n            a += 1\n        p += 1\n    return p - 1\n",
        "num_ids": 45
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for p in primes:\n            if i % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            if len(primes) == n:\n                break\n    return primes[-1]\n",
        "num_ids": 94
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Find all primes less than n\n    primes = eratosthenes(n)\n    # Create a lookup list of the multiples of primes\n    multiply = [primes[0]]\n    for i in range(1, len(primes)):\n        multiply.append(i * primes[i])\n    # List to store the newman\u2013shanks\u2013williams primes\n    p = []\n    # Starting from 2\n    i = 2\n    while len(p) < n:\n        # Generating the new number\n        num = i * multiply[i - 1]\n        # If the number is prime, add it to the list\n        if num >= n:\n            break\n        if is_prime(num):\n            p.append(num)\n        # Update the index\n        i += 1\n    return p[n - 1]\n",
        "num_ids": 206
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 2\n",
        "num_ids": 13
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return 'Error: input is less than 1.'\n    elif n == 1:\n        return 2\n    else:\n        p = [2, 3]\n        i = 1\n        while len(p) < n:\n            x = p[i - 1] + 2 * p[i]\n            if x > 2 * p[i - 1]:\n                p.append(x)\n            else:\n                i += 1\n                x = p[i - 1] + 2 * p[i]\n                p.append(x)\n        return p[n - 1]\n",
        "num_ids": 142
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(input('Number to find the newman\u2013shanks\u2013williams prime: '))\n    if n <= 0:\n        print('Please enter a positive number.')\n    elif n == 1:\n        print('The first newman\u2013shanks\u2013williams prime number is 2.')\n    elif n == 2:\n        print('The first newman\u2013shanks\u2013williams prime number is 3.')\n    else:\n        n = n + 1\n        count = 1\n        prime = 1\n        while count < n:\n            prime += 2\n            if is_prime(prime):\n                count += 1\n        print('The', n, 'th newman\u2013shanks\u2013williams prime number is', prime)\n        \ndef is_prime(n):\n    '''\n    Write a function to check whether an integer is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n        \ndef armstrong(n):\n    '''\n    Write a function to find the sum of digits in an integer.\n    '''\n    n = int(input('Enter a number to find the sum of digits: '))\n    num = n\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit ** 3\n        n = n // 10\n    if num == sum:\n        print(num, 'is an Armstrong number.')\n    else:\n        print(num, 'is not an Armstrong number.')\n        \ndef sum_of_digits(n):\n    '''\n    Write a function to find the sum of digits in an integer.\n    '''\n    n = int(input('Enter a number to find the sum of digits: '))\n    num = n\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n = n // 10\n    print('Sum of digits of', num, 'is', sum)\n        \ndef sum_of_evens_and_odds(n):\n    '''\n    Write a function to find the sum of even digits and odd digits of an integer.\n    '''\n    n = int(input('Enter a number to find the sum of even and odd digits: '))\n    odd = 0\n    even = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            even += digit\n        else:\n            odd += digit\n        n = n // 10\n    print('Sum of even digits is', even)\n    print('Sum of odd digits is', odd)\n        \ndef sum_of_digits_in_base_b(n, b):\n    '''\n    Write a function to find the sum of digits in an integer in base b.\n    '''\n    n = int(input('Enter a number to find the sum of digits in base', b, ': '))\n    num = n\n    sum = 0\n    while n > 0:\n        digit = n % b\n        sum += digit\n        n = n // b\n    print('Sum of digits of', num, 'in base', b, 'is', sum)\n        \ndef factor_of_first_n_primes(n):\n    '''\n    Write a function to find the factor of first n prime numbers.\n    '''\n    n = int(input('Enter a number to find the factor of first n prime numbers: '))\n    prime = 2\n    factor = 1\n    count = 1\n    while count < n:\n        if is_prime(prime):\n            prime += 1\n            if count == 1:\n                factor = prime\n            count += 1\n    print('Factor of first', n, 'prime numbers is', factor)\n        \ndef next_prime(n):\n    '''\n    Write a function to find the next prime number after an integer.\n    '''\n    n = int(input('Enter a number to find the next prime number after it: '))\n    if n <= 0:\n        print('Please enter a positive number.')\n    elif is_prime(n):\n        print(n, 'is already a prime number.')\n    else:\n        n += 1\n        while not is_prime(n):\n            n += 1\n        print(n, 'is the next prime number after', n)\n        \ndef gcd(a, b):\n    '''\n    Write a function to find the greatest common denominator of two integers.\n    '''\n    a = int(input('Enter the first number: '))\n    b = int(input('Enter the second number: '))\n    gcd = 1\n    if a < 0:\n        a = -1 * a\n    if b < 0:\n        b = -1 * b\n    if a < b:\n        temp = b\n        b = a\n        a = temp\n    while a % b!= 0:\n        remainder = a % b\n        a = b\n        b = remainder\n    print('The greatest common denominator of', a, 'and', b, 'is', b)\n        \ndef lcm(a, b):\n    '''\n    Write a function to find the least common multiple of two integers.\n    '''\n    a = int(input('Enter the first number: '))\n    b = int(input('Enter the second number: '))\n    gcd = 1\n    if a < 0:\n        a = -1 * a\n    if b < 0:\n        b = -1 * b\n    if a < b:\n        temp = b\n        b = a\n        a = temp\n    while b!= 0:\n        remainder = a % b\n        a = b\n        b = remainder\n    print('The least common multiple of', a, 'and', b, 'is', a)\n        \ndef number_of_digits(n):\n    '''\n    Write a function to find the number of digits in an integer.\n    '''\n    n = int(input('Enter a number: '))\n    count = 1\n    while n > 0:\n        count += 1\n        n = n // 10\n    print('The number of digits in', n, 'is', count)\n        \ndef decimal_to_binary(n):\n    '''\n    Write a function to convert a decimal number to binary.\n    '''\n    n = int(input('Enter a number to convert to binary: '))\n    count = 0\n    binary = ''\n    while n > 0:\n        digit = n % 2\n        n = n // 2\n        binary += str(digit)\n        count += 1\n    print('The binary representation of', n, 'is', binary)\n        \ndef binary_to_decimal(n):\n    '''\n    Write a function to convert a binary number to decimal.\n    '''\n    n = input('Enter a binary number to convert to decimal: ')\n    decimal = 0\n    power = len(n) - 1\n    for digit in n:\n        decimal += int(digit) * 2 ** power\n        power -= 1\n    print('The decimal representation of', n, 'is', decimal)\n        \ndef decimal_to_octal(n):\n    '''\n    Write a function to convert a decimal number to octal.\n    '''\n    n = int(input('Enter a number to convert to octal: '))\n    count = 1\n    octal = ''\n    while n > 0:\n        digit = n % 8\n        n = n // 8\n        octal += str(digit)\n        count += 1\n    print('The octal representation of', n, 'is', octal)\n        \ndef octal_to_decimal(n):\n    '''\n    Write a function to convert a octal number to decimal.\n    '''\n    n = input('Enter a octal number to convert to decimal: ')\n    decimal = 0\n    power = len(n) - 1\n    for digit in n:\n        decimal += int(digit) * 8 ** power\n        power -= 1\n    print('The decimal representation of', n, 'is', decimal)\n        \ndef decimal_to_hex(n):\n    '''\n    Write a function to convert a decimal number to hexadecimal.\n    '''\n    n = int(input('Enter a number t",
        "num_ids": 13
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    if n < 1:\n        return \"Not a valid input\"\n    elif n == 1:\n        return 2\n    else:\n        prime = [2,3]\n        i = 2\n        while len(prime) < n:\n            i += 1\n            if i%2!= 0:\n                prime.append(prime[-1] + 2)\n            else:\n                prime.append(prime[-1] + 1)\n            if prime[-1] > 10000:\n                return \"Not enough numbers calculated\"\n        return prime[-1]\n    \nprint(newman_prime(1))\nprint(newman_prime(2))\nprint(newman_prime(3))\nprint(newman_prime(4))\nprint(newman_prime(5))\nprint(newman_prime(10))\nprint(newman_prime(13))\nprint(newman_prime(20))\nprint(newman_prime(25))\nprint(newman_prime(100))\nprint(newman_prime(500))\nprint(newman_prime(1000))\nprint(newman_prime(5000))\nprint(newman_prime(10000))",
        "num_ids": 276
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    sieve = [True]*(n+1)\n    for i in range(3, int(n**0.5) + 1, 2):\n        if sieve[i]:\n            for j in range(2*i, n+1, i):\n                sieve[j] = False\n    return [i for i in range(3, n+1, 2) if sieve[i]]\n",
        "num_ids": 96
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    is_prime = lambda n: all(n % i for i in range(2, int(sqrt(n)) + 1))\n    def d(n):\n        '''\n        Finds the nth digit of the prime number\n        '''\n        return n // 10 ** (n % 10)\n    \n    def find_prime(n):\n        '''\n        Finds the nth newman\u2013shanks\u2013williams prime number\n        '''\n        n_ = d(n)\n        while n_:\n            # iterate until the number is not divisible by any of the existing primes\n            if not is_prime(n_):\n                n_ += 1\n            else:\n                break\n        # if n_ is already the newman\u2013shanks\u2013williams prime number\n        if n_ == n:\n            return n_\n        \n        # otherwise, find the new prime number and return it\n        return (n * 10 + find_prime(n_ - 1))\n    \n    return find_prime(n)\n",
        "num_ids": 136
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + ((test_tup1[i] / test_tup2[i]),)\n    return result_tup\n",
        "num_ids": 64
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # NOTE: 1. The number of elements in each tuple must be the same. 2. Each tuple must contain only numeric values. 3. The number of elements in each tuple must be the same. 4. Each tuple must contain only numeric values. 5. The function must return a tuple containing the mathematical division of each of the elements in the given tuples.\n    return tuple(x/y for x,y in zip(test_tup1, test_tup2))\n",
        "num_ids": 105
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        if len(test_tup1) == len(test_tup2):\n            if type(test_tup1) == tuple and type(test_tup2) == tuple:\n                tup3 = tuple(i/j for i, j in zip(test_tup1, test_tup2))\n                return tup3\n            else:\n                print(\"Given tuples are not in the required format.\")\n        else:\n            print(\"Given tuples are not in the required format.\")\n    except ZeroDivisionError:\n        print(\"Cannot perform division by zero.\")\n    except TypeError:\n        print(\"Cannot perform arithmetic operations on tuples of different lengths.\")\n    except Exception:\n        print(\"Something went wrong.\")\n",
        "num_ids": 177
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup1 = ()\n    new_tup2 = ()\n    for i in range(len(test_tup1)):\n        new_tup1 += (test_tup1[i] / test_tup2[i],)\n    for i in range(len(test_tup2)):\n        new_tup2 += (test_tup2[i] / test_tup1[i],)\n    return new_tup1, new_tup2\n",
        "num_ids": 120
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # Perform element-wise division\n    for i in range(len(test_tup1)):\n        test_tup1[i] /= test_tup2[i]\n    \n    # Return tuple\n    return test_tup1\n",
        "num_ids": 63
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tuple = ()\n    try:\n        if len(test_tup1) > len(test_tup2):\n            for index in range(len(test_tup2)):\n                result_tuple += (test_tup1[index] / test_tup2[index],)\n            for index in range(len(test_tup2), len(test_tup1)):\n                result_tuple += (test_tup1[index],)\n        else:\n            for index in range(len(test_tup1)):\n                result_tuple += (test_tup2[index] / test_tup1[index],)\n            for index in range(len(test_tup1), len(test_tup2)):\n                result_tuple += (test_tup2[index],)\n    except ZeroDivisionError:\n        print(\"Cannot divide by zero.\")\n    return result_tuple\n",
        "num_ids": 229
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1, test_tup2 = tuple(test_tup1), tuple(test_tup2)\n    try:\n        return tuple(divide_elements(test_tup1, test_tup2))\n    except Exception as e:\n        print(\"Error:\", e)\n",
        "num_ids": 75
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Edge case: input tuples have different lengths\n    if len(test_tup1) == len(test_tup2):\n        return tuple(i/j for i,j in zip(test_tup1, test_tup2))\n    elif len(test_tup1) < len(test_tup2):\n        return tuple(i/j for i,j in zip(test_tup1, test_tup2[:len(test_tup1)]))\n    elif len(test_tup2) < len(test_tup1):\n        return tuple(i/j for i,j in zip(test_tup1, test_tup2[:len(test_tup1)]))\n",
        "num_ids": 177
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        test_tup = ()\n        for i in range(len(test_tup1)):\n            test_tup += (test_tup1[i] / test_tup2[i],)\n        return test_tup\n    else:\n        raise Exception(\"The two tuples must be of the same length!\")\n",
        "num_ids": 100
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[0:L], list1[L:]]\n",
        "num_ids": 19
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[:L], list1[L:]]\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    def split(list1, L):\n        if L == len(list1):\n            return list1\n        elif L > len(list1):\n            return list1, []\n        else:\n            return list1[:L], list1[L:]\n    return split(list1, L)\n",
        "num_ids": 73
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_half = list1[0:L]\n    second_half = list1[L:]\n    return (first_half, second_half)\n",
        "num_ids": 38
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    \n    return list1[0:L], list1[L:]\n",
        "num_ids": 21
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n",
        "num_ids": 16
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        raise Exception(\"The list must have more than L elements.\")\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)\n",
        "num_ids": 62
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # list1 = [1,2,3,4,5,6,7,8,9,10]\n    # L = 5\n    # list2 = [6,7,8,9,10]\n    # list3 = [1,2,3,4,5]\n    # list4 = []\n    # list5 = []\n",
        "num_ids": 83
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    x = L\n    y = len(list1)\n    result1 = list1[:x]\n    result2 = list1[x:]\n    return result1, result2\n",
        "num_ids": 45
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if (len(list1) == 2):\n        return (list1[:L], list1[L:])\n    else:\n        return (list1[:L], list1[L:L+1], list1[L+1:])\n",
        "num_ids": 61
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # The dog's age in human years is input to the function.\n    # The function will return the age in dog's years.\n    # Do not use type conversion in this assignment.\n",
        "num_ids": 44
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 20 + (h_age - 2) * 7\n",
        "num_ids": 39
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # 1.calculate the dog's age in dog's years\n    d_age = h_age * 7\n    # 2.return the dog's age in dog's years\n    return d_age\n",
        "num_ids": 49
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n",
        "num_ids": 39
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age*7\n    return dog_age\n    \n    \n    \ndef dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age*7\n    return dog_age\n    \n    \n    \ndef countdown(n):\n    '''\n    Write a function that returns a countdown from n to 1.\n    '''\n    while n>0:\n        print(n)\n        n -= 1\n    print('Blastoff!')\n    \n    \n    \ndef countdown(n):\n    '''\n    Write a function that returns a countdown from n to 1.\n    '''\n    if n<=0:\n        print('Blastoff!')\n    else:\n        print(n)\n        countdown(n-1)\n        \n        \n        \ndef print_n(s,n):\n    '''\n    Write a function that prints the first n numbers of a sequence.\n    '''\n    if n<=0:\n        print('Blastoff!')\n    else:\n        print(s)\n        print_n(s,n-1)\n        \n        \n        \ndef print_n(s,n):\n    '''\n    Write a function that prints the first n numbers of a sequence.\n    '''\n    if n<=0:\n        print('Blastoff!')\n    else:\n        print(s)\n        print_n(s,n-1)\n        \n        \n        \ndef factorial(n):\n    '''\n    Write a function that returns the factorial of n.\n    '''\n    if n<=1:\n        return 1\n    else:\n        return n*factorial(n-1)\n        \n        \n        \ndef factorial(n):\n    '''\n    Write a function that returns the factorial of n.\n    '''\n    if n<=1:\n        return 1\n    else:\n        return n*factorial(n-1)\n        \n        \n        \ndef fib(n):\n    '''\n    Write a function that returns the nth Fibonacci number.\n    '''\n    if n<=1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n        \n        \n        \ndef fib(n):\n    '''\n    Write a function that returns the nth Fibonacci number.\n    '''\n    if n<=1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n        \n        \n        \ndef power(b,n):\n    '''\n    Write a function that returns the base b raised to the power n.\n    '''\n    if n<=1:\n        return b\n    else:\n        return power(b,n-1)*b\n        \n        \n        \ndef power(b,n):\n    '''\n    Write a function that returns the base b raised to the power n.\n    '''\n    if n<=1:\n        return b\n    else:\n        return power(b,n-1)*b\n        \n        \n        \ndef reverse(s):\n    '''\n    Write a function that returns a reversed version of the string s.\n    '''\n    if len(s)<=1:\n        return s\n    else:\n        return reverse(s[1:])+s[0]\n        \n        \n        \ndef reverse(s):\n    '''\n    Write a function that returns a reversed version of the string s.\n    '''\n    if len(s)<=1:\n        return s\n    else:\n        return reverse(s[1:])+s[0]\n        \n        \n        \ndef first(s):\n    '''\n    Write a function that returns the first character of the string s.\n    '''\n    return s[0]\n    \n    \n    \ndef first(s):\n    '''\n    Write a function that returns the first character of the string s.\n    '''\n    return s[0]\n    \n    \n    \ndef last(s):\n    '''\n    Write a function that returns the last character of the string s.\n    '''\n    return s[-1]\n    \n    \n    \ndef last(s):\n    '''\n    Write a function that returns the last character of the string s.\n    '''\n    return s[-1]\n    \n    \n    \ndef middle(s):\n    '''\n    Write a function that returns all but the first and last characters of the string s.\n    '''\n    return s[1:-1]\n    \n    \n    \ndef middle(s):\n    '''\n    Write a function that returns all but the first and last characters of the string s.\n    '''\n    return s[1:-1]\n    \n    \n    \ndef chop(s):\n    '''\n    Write a function that removes the first and last characters of the string s.\n    '''\n    return s[1:-1]\n    \n    \n    \ndef chop(s):\n    '''\n    Write a function that removes the first and last characters of the string s.\n    '''\n    return s[1:-1]\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome and False otherwise.\n    '''\n    return s==s[::-1]\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome and False otherwise.\n    '''\n    return s==s[::-1]\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome and False otherwise.\n    '''\n    return s==s[::-1]\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome and False otherwise.\n    '''\n    return s==s[::-1]\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome and False otherwise.\n    '''\n    return s==s[::-1]\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome and False otherwise.\n    '''\n    return s==s[::-1]\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome and False otherwise.\n    '''\n    return s==s[::-1]\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome and False otherwise.\n    '''\n    return s==s[::-1]\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome and False otherwise.\n    '''\n    return s==s[::-1]\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome and False otherwise.\n    '''\n    return s==s[::-1]\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome and False otherwise.\n    '''\n    return s==s[::-1]\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome and False otherwise.\n    '''\n    return s==s[::-1]\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome and False otherwise.\n    '''\n    return s==s[::-1]\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome and False otherwis",
        "num_ids": 23
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_years = (h_age * 15) + 7\n    return dog_age_in_years\n",
        "num_ids": 31
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # split = []\n    # for i in range(0, len(S), step):\n    #     split.append(S[i:i+step])\n    # return split\n",
        "num_ids": 45
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lst = S\n    lst_split = []\n    count = 0\n    for i in lst:\n        if count % step == 0:\n            lst_split.append(lst[count])\n        count += 1\n    return lst_split\n",
        "num_ids": 64
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if S == []:\n        return []\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 30
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step == 0:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    return None\n",
        "num_ids": 43
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    return new_list\n",
        "num_ids": 46
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # l=int(input(\"Enter the side length of the cube:\"))\n    import math\n    def lateral_surface_area(l):\n        return 6 * (l ** 2)\n    return lateral_surface_area(l)",
        "num_ids": 55
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l ** 2\n    return area\n",
        "num_ids": 15
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side = l*l\n    lateral = 2*side\n    print(\"The lateral surface area of the cube is: \"+str(lateral))\n",
        "num_ids": 36
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if type(l)!= int or type(l)!= float:\n        raise TypeError(\"l must be a number\")\n    return 6*l**2\n",
        "num_ids": 39
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateral_area(a):\n        '''\n        Write a function to find the lateral surface area of a cube given its side length.\n        '''\n        return 6*a**2\n    return lateral_area(l)\n    \nlateralsurface_cube(3)\n",
        "num_ids": 31
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #side length\n    s = l\n    #total surface area\n    tsa = 6*s**2\n    #lateral surface area\n    lsa = 4*s**2\n    return lsa\n",
        "num_ids": 50
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l > 0:\n        return 6*l**2\n    else:\n        return \"Invalid side length\"\n",
        "num_ids": 29
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l)**2\n",
        "num_ids": 12
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return (n * (n+1))/2\n",
        "num_ids": 15
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    if n>0:\n        for i in range(1,n+1):\n            if i%2!=0:\n                sum+=i**2\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s+=i**2\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum_ = 0\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            sum_ += i**2\n        \n    return sum_\n",
        "num_ids": 48
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #return sum([x**2 for x in range(1, n+1, 2)])\n    \n    return sum(x**2 for x in range(1, n+1, 2))\n",
        "num_ids": 48
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    odd_num_sum = 0\n    \n    for x in range(1, n + 1):\n        if x % 2 == 1:\n            odd_num_sum += x ** 2\n            \n    return odd_num_sum\n",
        "num_ids": 58
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i**2\n    return sum\nprint(square_Sum(5))\n",
        "num_ids": 38
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Base Case: 1. \n    if n == 1:\n        return 1\n    else:\n        return n ** 2 + square_Sum(n-1)\n",
        "num_ids": 41
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    if (type(n)!= int):\n        return \"Please enter an integer!\"\n    if (n < 0):\n        return \"Please enter a natural number!\"\n    for i in range(1, n + 1, 2):\n        total += i**2\n    return total\n",
        "num_ids": 71
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return ((n*(n+1))/2) ** 2\n",
        "num_ids": 18
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return 2 ** (n - 1)\n",
        "num_ids": 12
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + find_star_num(n-1)\n",
        "num_ids": 44
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (n**2 + n) // 2\n",
        "num_ids": 14
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # base case: n = 1\n    if n == 1:\n        return 1\n",
        "num_ids": 22
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(n):\n        n_star = (i*(i+1))//2\n        if (n_star+1) % 5 == 0:\n            return n_star\n    return -1\n",
        "num_ids": 53
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # n = 0, (1, 0, 0)\n    # n = 1, (2, 1, 0)\n    # n = 2, (4, 2, 1)\n    # n = 3, (8, 4, 2)\n    # n = 4, (16, 8, 4)\n    # n = 5, (32, 16, 8)\n    \n    if n == 1:\n        return (2, 1, 0)\n    \n    (a, b, c) = find_star_num(n-1)\n    return (a*2, b+1, c)\n    \n    ",
        "num_ids": 144
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def find_star(n, num_stars): \n        '''\n        Write a recursive function to return then'th star number.\n        '''\n        if num_stars == 1: \n            return n \n        else: \n            return n * num_stars\n    \n    return find_star(n, 1) \n    \nprint(find_star_num(1))\nprint(find_star_num(2))\nprint(find_star_num(3))\nprint(find_star_num(4))\nprint(find_star_num(5))\nprint(find_star_num(6))\nprint(find_star_num(7))\nprint(find_star_num(8))\nprint(find_star_num(9))\nprint(find_star_num(10)",
        "num_ids": 155
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    l = 1\n    while True: \n        if n > l*(l+1)//2: \n            n -= l*(l+1)//2\n            l += 1\n        else: \n            if l % 2 == 0: \n                return l*(l+1)//2 - n\n            else: \n                return n - (l-1)*(l)//2\n",
        "num_ids": 96
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    a, b = 0, 0\n    for i in range(1, n+1):\n        a, b = b, a+b\n    return b\n",
        "num_ids": 39
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = \"\"\n    \n    for i in range(1, n+1):\n        star_num = star_num + \"*\"\n        \n        if i % 3 == 0:\n            star_num = star_num + \" \"\n    \n    return star_num\n    \nprint(find_star_num(5))\nprint(find_star_num(7))\n",
        "num_ids": 92
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k)!= str:\n        return None\n    return ord(k)\n",
        "num_ids": 23
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= '0' and k <= '9':\n        return ord(k) - 48\n    else:\n        return ord(k) - 65 + 10\n",
        "num_ids": 40
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_positions = list()\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_positions.append(arr[i])\n    return sum(even_positions)\n",
        "num_ids": 55
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for x in arr:\n        if (x%2 == 0) and (arr.index(x)%2 == 0):\n            sum += x\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for num in range(len(arr)):\n        if (num % 2) == 0 and num % 2 == 0:\n            even_sum += arr[num]\n    return even_sum\n",
        "num_ids": 54
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if(arr[i] % 2 == 0) and (i % 2 == 0):\n            sum = sum + arr[i]\n    return sum\n",
        "num_ids": 56
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count = 0\n    sum = 0\n    for i in range(0,len(arr)):\n        if (i % 2 == 0 and arr[i] % 2 == 0):\n            count += 1\n            sum += arr[i]\n    return sum\n",
        "num_ids": 62
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if not isinstance(arr,list):\n        return\n    else:\n        sum=0\n        for i in range(0,len(arr)):\n            if (arr[i]%2==0 and i%2==0):\n                sum+=arr[i]\n        return sum\n",
        "num_ids": 70
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even_index += arr[i]\n    return sum_even_index\n    \ndef print_even_odd_numbers(arr):\n    '''\n    Write a python function to print numbers in a list, where numbers are even if they are at even indices, odd if they are at odd indices, and 0 if they are at 0th index.\n    '''\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            print(arr[i], end=\" \")\n        else:\n            print(arr[i], end=\" \")\n    \ndef print_odd_even_numbers(arr):\n    '''\n    Write a python function to print numbers in a list, where numbers are even if they are at even indices, odd if they are at odd indices, and 0 if they are at 0th index.\n    '''\n    for i in range(len(arr)):\n        if arr[i] % 2!= 0:\n            print(arr[i], end=\" \")\n        else:\n            print(arr[i], end=\" \")\n    \ndef print_even_and_odd_numbers(arr):\n    '''\n    Write a python function to print numbers in a list, where numbers are even if they are at even indices, odd if they are at odd indices, and 0 if they are at 0th index.\n    '''\n    for i in range(len(arr)):\n        if i % 2!= 0 and arr[i] % 2!= 0:\n            print(arr[i], end=\" \")\n        else:\n            print(arr[i], end=\" \")\n",
        "num_ids": 62
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_count = 0\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_count += 1\n            even_sum += arr[i]\n    print('Sum of even numbers at even positions:',even_sum)\n    print('Number of even numbers at even positions:',even_count)\n",
        "num_ids": 88
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(0, n):\n        total = total + (i**5)\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(0, n+1):\n        if i % 2 == 0:\n            total += (i**5)\n    return total\n",
        "num_ids": 42
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += (i**5)\n    return s\nprint(even_Power_Sum(10))\n",
        "num_ids": 44
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(1, n+1) if i % 2 == 0])\n",
        "num_ids": 28
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def sum_n_naturals_raised_to_power(n):\n        return sum([(i**5) for i in range(1, n+1)])\n",
        "num_ids": 43
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(0, n + 1):\n        total += (i ** 5)\n    return total\n    ",
        "num_ids": 34
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n",
        "num_ids": 7
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #return sum(x**5 for x in range(n+1) if x%2 == 0)\n    return sum([i**5 for i in range(n+1) if i%2 == 0])\n",
        "num_ids": 51
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum=0\n    for i in range(1,n+1):\n        even_sum+=i**5\n    return even_sum\n",
        "num_ids": 37
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [test_tup[1] for test_tup in test_list]\n",
        "num_ids": 23
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for item in test_list:\n        rear.append(item[1])\n    return rear\n",
        "num_ids": 32
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple_[1] for tuple_ in test_list]\n",
        "num_ids": 20
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_list.append(tup[-1])\n    return new_list\n",
        "num_ids": 39
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[1])\n    return rear_list\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list\n",
        "num_ids": 47
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for x in test_list:\n        result.append(x[1])\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for item in test_list:\n        rear.append(item[1])\n    return rear\n",
        "num_ids": 32
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # new_list = []\n    # for element in test_list:\n    #     new_list.append(element[-1])\n    # return new_list\n    # return [element[-1] for element in test_list]\n    return [element[-1] for element in test_list]\n",
        "num_ids": 75
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x,y: x-y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    if len(test_tup1) >= len(test_tup2):\n        for i in range(0,len(test_tup1)):\n            new_tup.append(test_tup1[i] - test_tup2[i])\n    else:\n        for i in range(0,len(test_tup2)):\n            new_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(new_tup)\n",
        "num_ids": 132
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtraction_list = []\n    for i in range(len(test_tup1)):\n        subtraction_list.append(test_tup1[i] - test_tup2[i])\n    return tuple(subtraction_list)\n",
        "num_ids": 65
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print(\"tuple1 - tuple2: \", end='')\n    for i in range(0,len(test_tup1)):\n        print(test_tup1[i]-test_tup2[i], end=\" \")\n",
        "num_ids": 60
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([a - b for a, b in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sums = []\n    for i in range(len(test_tup1)):\n        sums.append(test_tup1[i] - test_tup2[i])\n    return tuple(sums)\n",
        "num_ids": 56
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    first_tup = test_tup1\n    second_tup = test_tup2\n    new_tup = ()\n    for i in range(len(first_tup)):\n        new_tup = new_tup + (first_tup[i] - second_tup[i], )\n    return new_tup\n",
        "num_ids": 85
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = ('a', 'b', 'c', 'd', 'e', 'f')\n    test_tup2 = ('e', 'f', 'g', 'h', 'i', 'j')\n    \n    test_tup1 = (0, 1, 2, 3, 4, 5)\n    test_tup2 = (5, 4, 3, 2, 1, 0)\n    \n    '''\n    \n    Subtract elements of two tuples with the same index\n    '''\n    new_tup = tuple(list(test_tup1) + list(test_tup2))\n    \n    return new_tup\n    \n    \ndef multiply_tuples(tup1, tup2):\n    '''\n    Write a function that takes in two tuples and returns the tuple resulting from multiplying the first tuple by the second tuple element by element.\n    '''\n    return tuple(list(tup1)*len(tup2))\n    \n    \ndef test_tuples(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns True if they have at least one common element, False otherwise.\n    '''\n    test_tup1 = (1, 2, 3, 4)\n    test_tup2 = (3, 4, 5, 6)\n    \n    '''\n    \n    Return True if tuples contain common element\n    '''\n    if len(test_tup1) < len(test_tup2):\n        length = len(test_tup1)\n    else:\n        length = len(test_tup2)\n    \n    for i in range(length):\n        if test_tup1[i] == test_tup2[i]:\n            return True\n            break\n    return False\n    \n    \ndef test_multiply_tuples(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns True if multiplying them together produces a tuple with elements that appear only once.\n    '''\n    test_tup1 = (1, 2, 3, 4)\n    test_tup2 = (3, 4, 5, 6)\n    \n    '''\n    \n    Return True if tuple contains a common element\n    '''\n    for i in test_tup1:\n        if test_tup2.count(i) == 1:\n            return True\n            break\n    for i in test_tup2:\n        if test_tup1.count(i) == 1:\n            return True\n            break\n    return False\n    \n    \ndef test_substract_tuples(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns True if substracting one tuple from the other produces a tuple with elements that appear only once.\n    '''\n    test_tup1 = (1, 2, 3, 4)\n    test_tup2 = (3, 4, 5, 6)\n    \n    '''\n    \n    Return True if tuple contains a common element\n    '''\n    for i in test_tup1:\n        if test_tup2.count(i) == 1:\n            return True\n            break\n    for i in test_tup2:\n        if test_tup1.count(i) == 1:\n            return True\n            break\n    return False\n    \n    \ndef test_multiply_tuples_v2(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns True if substracting one tuple from the other produces a tuple with elements that appear only once.\n    '''\n    test_tup1 = (1, 2, 3, 4)\n    test_tup2 = (3, 4, 5, 6)\n    \n    '''\n    \n    Return True if tuple contains a common element\n    '''\n    for i in test_tup1:\n        if test_tup2.count(i) == 1:\n            return True\n            break\n    for i in test_tup2:\n        if test_tup1.count(i) == 1:\n            return True\n            break\n    return False\n    \n    \ndef test_convert_to_list(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns a list with the elements from both tuples in order.\n    '''\n    test_tup1 = (1, 2, 3, 4)\n    test_tup2 = (5, 6, 7, 8)\n    \n    '''\n    \n    Return list with the elements from tuples\n    '''\n    new_list = list(test_tup1 + test_tup2)\n    \n    return new_list\n    \n    \ndef test_convert_to_tuple(test_list):\n    '''\n    Write a function that takes in a list and returns a tuple with the elements of the list in the same order.\n    '''\n    test_list = [1, 2, 3, 4]\n    \n    '''\n    \n    Return tuple with the elements from list\n    '''\n    new_tup = tuple(test_list)\n    \n    return new_tup\n    \n    \ndef test_frequency_counter(test_list):\n    '''\n    Write a function that takes in a list and returns a dictionary with the elements of the list as the keys and the frequency of the element as the value.\n    '''\n    test_list = [1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3]\n    \n    '''\n    \n    Return dictionary with elements from list as keys and the frequency of the element as value\n    '''\n    frequency_dict = {}\n    for i in test_list:\n        frequency_dict[i] = test_list.count(i)\n    \n    return frequency_dict\n    \n    \ndef test_frequency_counter_v2(test_list):\n    '''\n    Write a function that takes in a list and returns a dictionary with the elements of the list as the keys and the frequency of the element as the value.\n    '''\n    test_list = [1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3]\n    \n    '''\n    \n    Return dictionary with elements from list as keys and the frequency of the element as value\n    '''\n    frequency_dict = {}\n    for i in test_list:\n        if test_list.count(i) > 1:\n            frequency_dict[i] = test_list.count(i)\n    \n    return frequency_dict\n    \n    \ndef test_frequency_counter_v3(test_list):\n    '''\n    Write a function that takes in a list and returns a dictionary with the elements of the list as the keys and the frequency of the element as the value.\n    '''\n    test_list = [1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3]\n    \n    '''\n    \n    Return dictionary with elements from list as keys and the frequency of the element as value\n    '''\n    frequency_dict = {}\n    for i in test_list:\n        if test_list.count(i) == 1:\n            frequency_dict[i] = test_list.count(i)\n    \n    return frequency_dict\n    \n    \ndef test_frequency_counter_v4(test_list):\n    '''\n    Write a function that takes in a list and returns a dictionary with the elements of the list as the keys and the frequency of the element as the value.\n    '''\n    test_list = [1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3]\n    \n    '''\n    \n    Return dictionary with elements from list as keys and the frequency of the element as value\n    '''\n    frequency_dict = {}\n    for i in test_list:\n        if test_list.count(i) == 1:\n            frequency_dict[i] = test_list.count(i)\n    \n    return frequency_dict\n    \n    \ndef test_frequency_counter_v5(test_list):\n    '''\n    Write a function tha",
        "num_ids": 7
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # test_tup1 = (1, 2, 3, 4, 5)\n    # test_tup2 = (4, 3, 2, 1, 4)\n    # test_tup3 = (4, 4, 4, 4, 4)\n    # test_tup4 = (5, 6, 7, 8, 9)\n    # test_tup5 = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(substract_elements(test_tup1, test_tup2))\n    # print(substract_elements(test_tup1, test_tup3))\n    # print(substract_elements(test_tup1, test_tup4))\n    # print(substract_elements(test_tup1, test_tup5))\n",
        "num_ids": 204
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomial_coefficient( n, k): \n        if k > n: \n            return 0\n        else: \n            return math.factorial(n) // (math.factorial(n - k) * math.factorial(k))\n    \n    sum = 0\n    for i in range(0, n + 1):\n        sum += binomial_coefficient(n, i)\n    return sum\n",
        "num_ids": 100
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coefficients = []\n    for i in range(n):\n        binomial_coefficients.append(binomial(i,2))\n    print(\"binomial_coefficients = \",binomial_coefficients)\n    return sum(binomial_coefficients)\n",
        "num_ids": 65
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (n*(n-1))//2\n",
        "num_ids": 30
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff_sum = 0\n    # Write code here\n    for i in range(n + 1):\n        if i % 2 == 0:\n            binomial_coeff_sum += math.factorial(n) / (math.factorial(i) * math.factorial(n - i))\n    return int(binomial_coeff_sum) \nprint(even_binomial_Coeff_Sum(10))\ndef even_binomial_Coeff_Sum_v2(n):\n    return int(round(((1+n)/math.sqrt(2))**n))\nprint(even_binomial_Coeff_Sum_v2(20))\n",
        "num_ids": 164
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #Implement This Code\n    def fibonacci(n):\n        fib_list = [0, 1]\n        a, b = 0, 1\n        for i in range(n-1):\n            a, b = b, a+b\n            fib_list.append(b)\n        return fib_list\n    # sum of even index terms in fibonacci series \n    def sum_even_index_terms(n):\n        fib = fibonacci(n)\n        sum = 0\n        for i in range(n):\n            if i%2 == 0:\n                sum += fib[i]\n        return sum\n    return sum_even_index_terms(n)\n",
        "num_ids": 164
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return even_binomial_Coeff_Sum(n-1) + n/2",
        "num_ids": 38
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Base Case \n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return 1\n",
        "num_ids": 35
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum([math.factorial(n)//(math.factorial(i) * math.factorial(n-i)) for i in range(0, n+1, 2)])\ndef even_binomial_Coeff_Mult( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the product of even index binomial coefficients.\n    '''\n    return math.factorial(n)//(math.factorial(1) * math.factorial(n-1))\ndef binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the first n even binomial coefficients.\n    '''\n    return sum([math.factorial(n)//(math.factorial(i) * math.factorial(n-i)) for i in range(0, n+1, 2)])\ndef binomial_Coeff_Mult( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the product of the first n even binomial coefficients.\n    '''\n    return math.factorial(n)//(math.factorial(1) * math.factorial(n-1))\ndef fibonacci( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the nth fibonacci number.\n    '''\n    return math.pow(math.sqrt(5)+1,n)//math.sqrt(5)\ndef prime( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the nth prime number.\n    '''\n    nth_prime = 2\n    count = 1\n    while(count < n):\n        if is_prime(nth_prime):\n            count += 1\n        nth_prime += 1\n    return nth_prime\ndef is_prime( n):\n    '''\n    Write a python function that takes in a positive integer n and finds if n is a prime number or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef sum_of_digits( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the digits of n.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\ndef palindrome( n):\n    '''\n    Write a python function that takes in a positive integer n and finds if n is a palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while n > 0:\n        rev = (rev * 10) + n % 10\n        n = n // 10\n    return temp == rev\ndef is_perfect_square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds if n is a perfect square or not.\n    '''\n    temp = n\n    while n > 0:\n        n = n - 1\n        temp = temp - math.pow(n, 2)\n    return temp == 0\ndef is_pythagorean_triplet( a, b, c):\n    '''\n    Write a python function that takes in three positive integers a, b and c and finds if a^2 + b^2 = c^2 or not.\n    '''\n    if math.pow(a, 2) + math.pow(b, 2) == math.pow(c, 2):\n        return True\n    return False\ndef square_root( n):\n    '''\n    Write a python function that takes in a positive integer n and finds if n is a perfect square or not.\n    '''\n    temp = n\n    if n < 0:\n        return False\n    while n > 0:\n        n = n - 1\n        temp = temp - math.pow(n, 2)\n    return temp == 0\ndef prime_factor( n):\n    '''\n    Write a python function that takes in a positive integer n and finds all the prime factors of n.\n    '''\n    if is_prime(n):\n        return [n]\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    i = 3\n    while i*i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n        i += 2\n    if n > 2:\n        factors.append(n)\n    return factors\ndef find_strong_numbers( n):\n    '''\n    Write a python function that takes in a positive integer n and finds all the strong numbers in the range [1, n].\n    '''\n    numbers = []\n    for num in range(1, n+1):\n        sum = 0\n        for digit in str(num):\n            sum += int(digit) ** len(str(num))\n        if num == sum:\n            numbers.append(num)\n    return numbers\ndef is_armstrong_number( n):\n    '''\n    Write a python function that takes in a positive integer n and finds if n is an armstrong number or not.\n    '''\n    sum = 0\n    temp = n\n    while n > 0:\n        sum += math.pow(n % 10, 3)\n        n = n // 10\n    return sum == temp\ndef get_sum_of_digits_recur( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the digits of n.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + get_sum_of_digits_recur(n//10)\ndef get_sum_of_digits( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the digits of n.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\ndef is_pandigital_number( n):\n    '''\n    Write a python function that takes in a positive integer n and finds if n is a pandigital number or not.\n    '''\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return sorted(list(str(n))) == numbers\ndef is_prime_number( n):\n    '''\n    Write a python function that takes in a positive integer n and finds if n is a prime number or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\ndef is_palindrome( n):\n    '''\n    Write a python function that takes in a positive integer n and finds if n is a palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\ndef is_truncatable_prime( n):\n    '''\n    Write a python function that takes in a positive integer n and finds if n is a truncatable prime or not.\n    '''\n    #truncate n to 3 digits\n    #truncate n to 2 digits\n    #truncate n to 1 digit\n    #check if n is a prime number\n    #return True if all 3 conditions hold\n    if len(str(n)) <= 1:\n        return is_prime_number(n)\n    return is_prime_number(n) and is_truncatable_prime(int(str(n)[1:])) and is_truncatable_prime(int(str(n)[:-1]))\ndef is_perfect_square( n):\n    '''\n    Write a python function that takes in a positive integer n and finds if n is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 1\n    return False\ndef is_prime( n):\n",
        "num_ids": 57
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    res = 0\n    for i in range(0, n + 1, 2):\n        if i == 0:\n            res = 1\n        else:\n            res = (res * (n + 1 - i)) // i \n    return res \n",
        "num_ids": 60
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #Sets the variable even_binomial_coefficients to the list of even binomial coefficients\n    #and sets the list to an empty list\n    even_binomial_coefficients = [0]\n    even_binomial_coefficients = []\n    for i in range(n):\n        #Appends the list with the binomial coefficient, 2**i, to the even_binomial_coefficients list\n        even_binomial_coefficients.append(math.factorial(n) // (math.factorial(i) * math.factorial(n - i)))\n    #Sums the even index values\n    even_binomial_coefficients_sum = sum(even_binomial_coefficients)\n    return even_binomial_coefficients_sum\n",
        "num_ids": 176
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r**2 * h)\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14*(r**2)*h)\n",
        "num_ids": 17
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (r**2) * 3.14 * (h/3)\n    return volume\n",
        "num_ids": 25
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r**2) * h\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*(r**2)*h\n    return volume\n",
        "num_ids": 20
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume_cylinder = (3.1415 * r ** 2 * h)\n    return volume_cylinder\n",
        "num_ids": 28
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n",
        "num_ids": 12
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14 * r**2 * h)\n",
        "num_ids": 16
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    if r > 0 and h > 0:\n        v = math.pi * r**2 * h\n        return v\n    else:\n        raise ValueError('Radius cannot be negative or zero')\n",
        "num_ids": 52
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi=3.14\n    return (pi*r**2*h)\n",
        "num_ids": 21
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    \n    return {k:v for k,v in dict.items() if v>=n}\n",
        "num_ids": 28
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.items() if v >= n}\n",
        "num_ids": 25
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {key:value for key, value in dict.items() if value >= n}\n    return new_dict\n",
        "num_ids": 32
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k:v for k,v in dict.items() if v >= n}\n    return filtered_dict\n",
        "num_ids": 33
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:val for key,val in dict.items() if val>=n}\n",
        "num_ids": 24
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if n in dict.values():\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    # write your function here\n    return test_tup[0]\n",
        "num_ids": 21
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    l = len(test_tup)\n    count = 0\n    for i in range(0,l):\n        if i!= 0 and test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if isinstance(test_tup, tuple) and len(test_tup) > 0:\n        print(test_tup[0])\n    else:\n        print(\"Invalid Input\")\n",
        "num_ids": 48
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    i = 0\n    for i, test_tup_element in enumerate(test_tup):\n        if type(test_tup_element) == tuple:\n            test_tup[i] = list(test_tup[i])\n            test_tup[i][0] = 0\n            test_tup[i] = tuple(test_tup[i])\n            break\n    i = 0\n    while i < len(test_tup):\n        if test_tup[i][0] == 0:\n            count = test_tup[i][1]\n            for j in range(i + 1, len(test_tup)):\n                if test_tup[j][0] == 0:\n                    count += test_tup[j][1]\n                    test_tup[j][0] = 0\n                else:\n                    break\n            test_tup[i][0] = count\n        else:\n            test_tup[i][0] = 0\n        i += 1\n    return test_tup\n",
        "num_ids": 250
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    dict = {}\n    # for i in range(len(test_tup)):\n    #     dict[i] = test_tup[i]\n    for i in range(len(test_tup)):\n        dict[i] = test_tup[i]\n",
        "num_ids": 68
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    try:\n        test_tup = tuple(test_tup)\n    except TypeError:\n        raise TypeError('Function can only be called with a tuple')\n",
        "num_ids": 41
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    i = 0\n    for x in test_tup:\n        if i == 0:\n            i = i + 1\n            continue\n        else:\n            if x == test_tup[0]:\n                break\n            else:\n                count = count + 1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = (1,2,1,2,3,4,5,2,1,1,2,5,6,4,1,2,3,6,5,2,3,4,5,3,2,3,4,5,3,2,3,4,5,3,2,3,4,5)\n    new_tup = []\n    for i in test_tup:\n        if i not in new_tup:\n            new_tup.append(i)\n    new_tup.append('end')\n    #print(new_tup)\n    temp_dict = {}\n    temp = []\n    #print(new_tup)\n    for i in new_tup:\n        temp.append(i)\n        for j in temp:\n            if j not in temp_dict:\n                temp_dict[j] = 1\n            else:\n                temp_dict[j] += 1\n    #print(temp_dict)\n    print(temp_dict[1])\n    print(temp_dict[2])\n    print(temp_dict[3])\n    print(temp_dict[4])\n    print(temp_dict[5])\n    print(temp_dict[6])\n    print(temp_dict[end])\ncount_first_elements(test_tup)\n",
        "num_ids": 320
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = (1, 2, 3, 3, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 3, 3, 3, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ",
        "num_ids": 2006
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n + 9) == 2 * (n - 1) * (n + 10)\n",
        "num_ids": 26
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n * (n + 1) / 2)\n",
        "num_ids": 17
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n * (n - 1) / 2)\n",
        "num_ids": 17
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+10) - (n-1)\n",
        "num_ids": 18
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    return int((1 + 5 ** 0.5) * n - 1 / 2 * 5 ** 0.5)\n",
        "num_ids": 30
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    return int(n * (9*n - 1) / 2)\n",
        "num_ids": 30
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #Step 1: Find the corresponding row number\n    row = n + 1\n    \n    #Step 2: Add the corresponding number\n    sum = 0\n    for i in range(1, row + 1):\n        sum += i * 9 * (i - 1)\n    \n    #Step 3: The nth decagonal number is the sum of the previous row\n    num = sum + n * 10 * (n - 1)\n    \n    #Step 4: Return the nth decagonal number\n    return num\n",
        "num_ids": 118
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(0.5*n*n - n + 1))\n",
        "num_ids": 22
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return False\n    # n = n*10\n    x = 1\n    s = 0\n    while x <= n:\n        s += 9 * x\n        x += 1\n    return s\n",
        "num_ids": 54
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Iterate over each element in the list\n    for index, element in enumerate(dlist):\n        # Check if the item in the element is the one we're looking for\n        if item == element:\n            # If so, return the boolean and the index\n            return (True, index)\n    # If we get here, then the element was not found\n    return (False, -1)\n",
        "num_ids": 93
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Initialize the index variable\n    index = 0\n    for i in dlist:\n        if i == item:\n            return True, index\n        else:\n            index += 1\n    return False, -1\n",
        "num_ids": 52
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n",
        "num_ids": 38
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n    \ndef binary_search_iterative(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Your code here\n    return (False, -1)\n    \ndef binary_search_recursive(dlist, item, start, end):\n    '''\n    Write a function that takes in an array, element, and start and end index positions and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Your code here\n    return (False, -1)\n    \n    \ndef main():\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    print(sequential_search([1, 2, 3, 4, 5], 5))\n    print(sequential_search([1, 2, 3, 4, 5], 6))\n    print(binary_search_iterative([1, 2, 3, 4, 5], 5))\n    print(binary_search_iterative([1, 2, 3, 4, 5], 6))\n    print(binary_search_recursive([1, 2, 3, 4, 5], 5, 0, 4))\n    print(binary_search_recursive([1, 2, 3, 4, 5], 6, 0, 4))\n    \nmain(",
        "num_ids": 148
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return (False, -1)\n    \n    i = 0\n    while i < len(dlist):\n        if dlist[i] == item:\n            return (True, i)\n        else:\n            i += 1\n    \n    return (False, -1)\n",
        "num_ids": 78
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            break\n    if index == -1:\n        return (False, index)\n    else:\n        return (True, index)\n",
        "num_ids": 68
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 41
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list=[]\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    if len(unique_list)==len(test_list):\n        return True\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list.sort()\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #creating a set of list \n    # set(<list>) will return a set of the unique items. \n    set_list = set(test_list)\n    if len(set_list) == len(test_list):\n        print(\"The list has unique elements.\")\n    else:\n        print(\"The list has not unique elements.\")\n",
        "num_ids": 83
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Your code here\n    count = 0\n    for x in test_list:\n        for y in test_list:\n            if x == y:\n                count += 1\n    if count == len(test_list)**2:\n        return False\n    else:\n        return True\n",
        "num_ids": 69
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # return len(set(test_list)) == len(test_list)\n",
        "num_ids": 21
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    checker_list = []\n    for i in test_list:\n        if i in checker_list:\n            return False\n        else:\n            checker_list.append(i)\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i] - nums2[i])\n    return new_list\n",
        "num_ids": 50
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # def sub_list(list_1, list_2):\n    #     list_3 = []\n    #     for i in range(len(list_1)):\n    #         list_3.append(list_1[i] - list_2[i])\n    #     return list_3\n",
        "num_ids": 74
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    list1 = list()\n    list1 = [i-j for i,j in zip(nums1,nums2)]\n    return list1\n",
        "num_ids": 38
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i] - nums2[i])\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 30
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        for i in range(len(nums1)-len(nums2)):\n            nums2.append(0)\n    elif len(nums2) > len(nums1):\n        for i in range(len(nums2)-len(nums1)):\n            nums1.append(0)\n    return list(map(lambda x,y:x-y,nums1,nums2))\n",
        "num_ids": 119
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if not nums1 or not nums2:\n        return []\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 47
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1-n2 for (n1,n2) in zip(nums1,nums2)]\n    \n",
        "num_ids": 32
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # new_list = []\n    # for i in range(len(nums1)):\n    #     new_list.append(nums1[i] - nums2[i])\n    # return new_list\n    return [i-j for i,j in zip(nums1,nums2)]\n",
        "num_ids": 77
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    try:\n        return [x1-x2 for x1,x2 in zip(nums1,nums2)]\n    except ValueError:\n        print('You can only subtract lists with the same number of elements')\n    except TypeError:\n        print('You can only subtract lists of numbers')\n",
        "num_ids": 72
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Note: Python string and list are immutable so we can't change the element in the list, we can only reassign the variable.\n    # We can use.join() to join a list of letters together.\n",
        "num_ids": 49
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for i in n: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n",
        "num_ids": 48
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_dict = {}\n    for i in str(n):\n        digit_dict[i] = digit_dict.get(i,0) + 1\n    return all(v <= int(k) for k,v in digit_dict.items())\n",
        "num_ids": 61
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return len(set([i for i in str(n)])) <= len([i for i in str(n)])\n",
        "num_ids": 30
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    a = n\n    while(a > 0):\n        digit = a%10\n        count = count + 1\n        a = int(a/10)\n    return count == n\ndef sumofDigits(n):\n    '''\n    Write a function sumofDigits to take in an integer and return the sum of the digits in the integer.\n    '''\n    sum = 0\n    n = n\n    while(n>0):\n        digit = n%10\n        sum = sum + digit\n        n = int(n/10)\n    return sum\ndef reverse(n):\n    '''\n    Write a function reverse to take in an integer and return the reversed integer.\n    '''\n    return int(str(n)[::-1])\ndef palindrome(n):\n    '''\n    Write a function palindrome to check whether the input integer is a palindrome.\n    '''\n    return n == reverse(n)\ndef check(n):\n    '''\n    Write a function check to check whether the input integer n is a check digit of a valid phone number.\n    '''\n    n = str(n)\n    phone_number = ['2','3','4','5','6','7','8','9']\n    count = 0\n    for i in range(len(n)):\n        if n[i] in phone_number:\n            count = count + 1\n    if count == len(n):\n        return True\n    else:\n        return False\ndef fizzbuzz(n):\n    '''\n    Write a function fizzbuzz to check whether the input number n is a multiple of 3 or 5 or both.\n    '''\n    return n%3 == 0 or n%5 == 0\ndef countOccurence(s,sub):\n    '''\n    Write a function countOccurence to count the number of occurence of a substring in a string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+len(sub)] == sub:\n            count = count + 1\n    return count\ndef groupSumTo(n,target):\n    '''\n    Write a function groupSumTo to count the number of groups of positive integers that sum to the target.\n    '''\n    count = 0\n    for i in range(n+1):\n        if i == 0:\n            continue\n        if target == sumofDigits(i):\n            count = count + 1\n    return count\ndef uniqueOccurence(n):\n    '''\n    Write a function uniqueOccurence to count the number of unique occurence of digits in a number.\n    '''\n    count = 0\n    for i in range(len(n)):\n        if n.count(n[i]) == 1:\n            count = count + 1\n    return count\ndef countOccurence(s,sub):\n    '''\n    Write a function countOccurence to count the number of occurence of a substring in a string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+len(sub)] == sub:\n            count = count + 1\n    return count\ndef triplet(n):\n    '''\n    Write a function triplet to check whether the input integer n is a triplet.\n    '''\n    n = n\n    for i in range(n):\n        a = n\n        while(a > 0):\n            digit = a%10\n            a = int(a/10)\n            if a == digit:\n                return True\n    return False\ndef compare(n,m):\n    '''\n    Write a function compare to compare the two input integers n and m.\n    '''\n    n = n\n    m = m\n    if n < m:\n        return 'less'\n    elif n > m:\n        return 'greater'\n    else:\n        return 'equal'\ndef findmax(a):\n    '''\n    Write a function findmax to find the maximum value in the input array.\n    '''\n    m = a[0]\n    for i in range(len(a)):\n        if m < a[i]:\n            m = a[i]\n    return m\ndef findmaxrec(a):\n    '''\n    Write a recursive function findmaxrec to find the maximum value in the input array.\n    '''\n    if len(a) == 0:\n        return 'invalid input'\n    if len(a) == 1:\n        return a[0]\n    else:\n        if a[0] > a[1]:\n            return a[0]\n        else:\n            return findmaxrec(a[1:])\ndef findmaxiter(a):\n    '''\n    Write a function findmaxiter to find the maximum value in the input array.\n    '''\n    m = a[0]\n    for i in range(1,len(a)):\n        if m < a[i]:\n            m = a[i]\n    return m\ndef findmax(a):\n    '''\n    Write a function findmax to find the maximum value in the input array.\n    '''\n    m = a[0]\n    for i in range(1,len(a)):\n        if m < a[i]:\n            m = a[i]\n    return m\ndef findmaxrec(a):\n    '''\n    Write a recursive function findmaxrec to find the maximum value in the input array.\n    '''\n    if len(a) == 0:\n        return 'invalid input'\n    if len(a) == 1:\n        return a[0]\n    else:\n        if a[0] > a[1]:\n            return a[0]\n        else:\n            return findmaxrec(a[1:])\ndef findmaxiter(a):\n    '''\n    Write a function findmaxiter to find the maximum value in the input array.\n    '''\n    m = a[0]\n    for i in range(1,len(a)):\n        if m < a[i]:\n            m = a[i]\n    return m\ndef selectionSort(a):\n    '''\n    Write a function selectionSort to sort the input array a.\n    '''\n    for i in range(len(a)):\n        min_index = i\n        for j in range(i+1,len(a)):\n            if a[j] < a[min_index]:\n                min_index = j\n        a[i],a[min_index] = a[min_index],a[i]\n    return a\ndef selectionSort(a):\n    '''\n    Write a function selectionSort to sort the input array a.\n    '''\n    for i in range(len(a)):\n        min_index = i\n        for j in range(i+1,len(a)):\n            if a[j] < a[min_index]:\n                min_index = j\n        a[i],a[min_index] = a[min_index],a[i]\n    return a\ndef insertionSort(a):\n    '''\n    Write a function insertionSort to sort the input array a.\n    '''\n    for i in range(1,len(a)):\n        j = i\n        while j > 0:\n            if a[j] < a[j-1]:\n                a[j],a[j-1] = a[j-1],a[j]\n                j -= 1\n            else:\n                break\n    return a\ndef bubbleSort(a):\n    '''\n    Write a function bubbleSort to sort the input array a.\n    '''\n    for i in range(len(a)):\n        for j in range(len(a)-1):\n            if a[j] > a[j+1]:\n                a[j],a[j+1] = a[j+1],a[j]\n    return a\ndef bubbleSort(a):\n    '''\n    Write a function bubbleSort to sort the input array a.\n    '''\n    for i in range(len(a)):\n        for j in range(len(a)-1):\n            if a[j] > a[j+1]:\n                a[j],a[j+1] = a[j+1],a[j]\n    return a\ndef selectionSort(a):\n    '''\n    Write a function selectionSort to sort the input array a.\n    '''\n    fo",
        "num_ids": 4
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict = {}\n    for i in str(n):\n        if i in dict:\n            dict[i] = dict[i] + 1\n        else:\n            dict[i] = 1\n    for k in dict:\n        if dict[k] > int(k):\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = [0] * 10\n    while n:\n        digit_freq[n%10] += 1\n        n //= 10\n    for x in range(len(digit_freq)):\n        if digit_freq[x] > x:\n            return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def find_no_of_digits(num):\n        no_of_digits = 0\n        while num!= 0:\n            num = int(num / 10)\n            no_of_digits = no_of_digits + 1\n        return no_of_digits\n",
        "num_ids": 70
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    while (n > 0): \n        freq[(n % 10)] += 1\n        n //= 10\n",
        "num_ids": 39
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    \n    return True\n",
        "num_ids": 10
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all([item == element for item in list]):\n        print(\"Equal\")\n    else:\n        print(\"Not equal\")\n",
        "num_ids": 34
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\nprint(check_element([1,1,1,1],1))\nprint(check_element([0,0,0,0],1))\nprint(check_element([1,2,3,4],1))\nprint(check_element([2,3,4,5],2))\n",
        "num_ids": 93
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item==element for item in list)\n",
        "num_ids": 15
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list)!= len(set(list)):\n        return False\n    else:\n        for i in list:\n            if i!= element:\n                return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n    \nprint(check_element([1,1,1,1],1))\nprint(check_element([1,2,3,4],4))\n",
        "num_ids": 61
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # check if element in list\n    return element in list\n",
        "num_ids": 16
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all([item == element for item in list])\n",
        "num_ids": 15
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if(list[i]!=element):\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = 'ab{2}|ab{3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return 'YES'\n    else:\n        return 'NO'\n",
        "num_ids": 52
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'a.{2,3}b', text))\n",
        "num_ids": 24
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.match(r'ab{2}|ab{3}', text):\n        return True\n    return False\n    \ndef text_match_three_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters, followed by a 'c' character, followed by four 'd' characters, followed by a 'f' character.\n    '''\n    if re.match(r'ab{3}c{4}d{1}f', text):\n        return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}a', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_two = re.compile(r'ab{2}')\n    text_three = re.compile(r'ab{3}')\n    if text_two.search(text):\n        return 2\n    elif text_three.search(text):\n        return 3\n    else:\n        return 0\ndef search_words(string_):\n    '''\n    Write a function that searches for words inside a sentence that start with a certain character\n    '''\n    string_ = \"This is a sample sentence\"\n    string_ = string_.split()\n    for word in string_:\n        if word[0].lower() == 'a':\n            print(word)\n",
        "num_ids": 50
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #pattern = re.compile(r'a.{2,3}b')\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r\"(ab){2,3}\", text):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2000
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # MY SOLUTION\n    # if text.count(\"a\") == 0:\n    #     return False\n    # elif text.count(\"a\") == 1 and text.find(\"a\") == 0:\n    #     return False\n    # else:\n    #     if text.count(\"b\") < 2 or text.count(\"b\") > 3:\n    #         return False\n    #     else:\n    #         return True\n",
        "num_ids": 102
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    count = 0\n    for i in range(len(text)):\n        if text[i] == \"a\" and text[i+1] == \"b\" and text[i+2] == \"b\" :\n            count = 1\n            break\n        elif text[i] == \"a\" and text[i+1] == \"b\" :\n            count = 1\n            break\n    if count == 0:\n        return False\n    elif count == 1:\n        return True\n",
        "num_ids": 116
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if (n < k): \n        return -1\n    max_sum = 0\n    for i in range(0, n - k + 1): \n        current_sum = 0\n        for j in range(i, i + k): \n            current_sum += a[j % n] \n        if (current_sum > max_sum): \n            max_sum = current_sum\n    return max_sum \n  ",
        "num_ids": 103
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    cur_sum = max_sum = 0\n    for i in range(n): \n        cur_sum = cur_sum + a[i] \n        if (i >= k - 1): \n            max_sum = max(max_sum, cur_sum) \n            cur_sum = cur_sum - a[i - k + 1] \n    return max_sum \n",
        "num_ids": 92
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if (n == 1):\n        return a[0]\n    a1 = a[0]\n    a2 = a[0]\n    for i in range(1, n):\n        a1 = max(a[i], a1 + a[i])\n        a2 = max(a1, a2 + a[i])\n    return a2\n",
        "num_ids": 86
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sm = 0; sub = 0; \n    for i in range(n): \n        sm = sm + a[i] \n        if (i >= k and sub < sm): \n            sub = sm \n        if (sm < 0): \n            sm = 0\n    return sub\n",
        "num_ids": 71
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if k > n:\n        return max_sub_array_sum_repeated(a, n, n)\n    max_sum_so_far = a[0]\n    max_sum_ending_here = a[0]\n    for i in range(1, n):\n        max_sum_ending_here = max(a[i], max_sum_ending_here + a[i])\n        if i % k == 0:\n            max_sum_ending_here = 0\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n    return max_sum_so_far\n",
        "num_ids": 169
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sub_array = 0\n    max_value = 0\n    max_start = 0\n    max_end = 0\n    cur_sum = 0\n    cur_start = 0\n    cur_end = 0\n    for i in range(n):\n        cur_sum += a[i]\n        if cur_sum > max_value:\n            max_value = cur_sum\n            max_start = cur_start\n            max_end = cur_end\n            max_end += 1\n        elif cur_sum == max_value:\n            max_start = cur_start\n            max_end = cur_end\n            max_end += 1\n        elif cur_sum < max_value:\n            cur_start = i + 1\n            cur_end = i + 1\n            cur_sum = 0\n            continue\n    return max_start, max_end, max_value\n",
        "num_ids": 208
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0: \n        return 0\n    if k==1:\n        return sum(a)\n    max_sum_of_array = -1\n    max_sum_of_arrays = [0 for x in range(k)]\n    for i in range(k):\n        max_sum_of_arrays[i] = sum(a)\n    max_sum_of_array = sum(max_sum_of_arrays)\n    \n    for i in range(1, n//k):\n        max_sum_of_array -= a[i - 1]\n        max_sum_of_array += a[n - i*k]\n        if max_sum_of_array > max_sum_of_array:\n            max_sum_of_array = max_sum_of_array\n        else:\n            max_sum_of_array = max_sum_of_array + max_sum_of_arrays[i]\n    return max_sum_of_array\n",
        "num_ids": 236
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the array\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n",
        "num_ids": 34
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # if k is less than n, we need atleast n+k+1 elements to form a subarray with k as the number of times\n    # the array is repeated. So there is no point in repeating the array again.\n    if k >= n:\n        return max_sub_array_sum(a, n)\n    # If k is equal to 1, we need atleast n+k+1 elements to form a subarray with k as the number of times\n    # the array is repeated.\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    # If k is equal to n, we need atleast 2*n+1 elements to form a subarray with k as the number of times\n    # the array is repeated.\n    if k == n:\n        return max_sub_array_sum(a, n)\n    # If k is more than n, we need atleast 2n+1 elements to form a subarray with k as the number of times\n    # the array is repeated.\n    if k > n:\n        return max_sub_array_sum(a, n)\n    # If k is less than 1, there is no point in repeating the array again.\n    if k < 1:\n        return max_sub_array_sum(a, n)\n",
        "num_ids": 306
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def k_times_arr(arr, k):\n        n = len(arr)\n        for i in range(k):\n            temp = arr[:]\n            for j in range(i, n * k, k):\n                arr[j] = sum(temp[j:j + k])\n",
        "num_ids": 71
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i*i\n    return sum\nn=int(input(\"Enter an integer value:\"))\nprint(square_Sum(n))\n",
        "num_ids": 55
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    print(\"\\n\")\n    print(\"Function name : \", square_Sum.__name__)\n    print(\"Module name : \", square_Sum.__module__)\n    print(\"Doc string : \", square_Sum.__doc__)\n    print(\"Type : \", type(square_Sum))\n    print(\"\\n\")\n    def sum_of_Squares(n):\n        return sum(i**2 for i in range(n) if i%2 == 0)\n    return sum_of_Squares(n)\nprint(square_Sum(100))\n",
        "num_ids": 132
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_sq = 0\n    for i in range(0,n+1):\n        if i%2 == 0:\n            sum_sq = sum_sq + i**2\n",
        "num_ids": 44
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum=sum+i*i\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    n = int(input(\"Enter a number:\"))\n    def sum_of_squares(n):\n      even_number_sum = 0\n      for i in range(0, n+1, 2):\n        even_number_sum += i * i\n      return even_number_sum\n    return sum_of_squares(n)\n    #pass #remove this line\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2004
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 1:\n        return n\n    return n * (2*n + (n-1) * (n-2) )/2\n",
        "num_ids": 37
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i**2 for i in range(n) if i%2==0])\n",
        "num_ids": 24
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum += i * i\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([(i ** 2) for i in range(2,n+1) if i % 2 == 0])\n",
        "num_ids": 30
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    def sum_of_squares(n):\n        sum = 0\n        for i in range(n):\n            if i % 2 == 0:\n                sum += i ** 2\n        return sum\n    return sum_of_squares(n)\n",
        "num_ids": 60
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return(len(max(list1,key=len)))\n",
        "num_ids": 17
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    result = []\n    length = len(list1)\n    while length>0:\n        max = 0\n        for i in range(length):\n            if len(list1[i])>max:\n                max = len(list1[i])\n        result.append(list1[i])\n        length = length-1\n    return result\nlist1 = [[1,2,3],[4,5,6],[7,8,9,10]]\nprint(max_length(list1))\nprint('-'*40)\n",
        "num_ids": 125
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=[]\n    for i in list1:\n        max_len.append(len(i))\n    return(max(max_len))\n",
        "num_ids": 39
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return(max([len(i) for i in list1]))\nprint(max_length([[1, 2], [2, 3], [3]]))\n",
        "num_ids": 40
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 1:\n        return len(list1[0])\n    else:\n        return max(max_length(list1[1:]),len(list1[0]))\n    \nprint(max_length([[1], [2, 3], [1, 5, 6]])) #6\nprint(max_length([[1, 2, 3], [5, 6], [7, 8, 9]])) #3\nprint(max_length([[1, 2, 3, 4, 5, 6], [7], [8, 9, 10]])) #6\nprint(max_length([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12, 13, 14, 15], [16, 17], [18, 19, 20, 21, 22], [23, 24, 25, 26, 27, 28, 29, 30]])) #28\n",
        "num_ids": 214
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n",
        "num_ids": 39
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for l in list1:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    max=0\n    for i in list1:\n        if(len(i)>max):\n            max=len(i)\n    print(max)\n    \n    #return max\n    \n    \ndef test_max_length():\n    assert max_length([[1,2,3], [1,2], [1,2,3,4,5]]) == 5\n    assert max_length([[1], [2], [1,2,3,4,5]]) == 5\n    assert max_length([[1,2,3,4,5], [1,2,3,4,5]]) == 5\n    assert max_length([[1,2,3,4,5], [1,2,3,4,5,6], [1,2,3,4,5]]) == 6\n    assert max_length([[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5,6,7], [1,2,3,4,5,6]]) == 7\n    assert max_length([[1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7]]) == 7\n    assert max_length([[1,2,3,4,5,6,7], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7]]) == 7\n    assert max_length([[1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8]]) == 8\n    assert max_length([[1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8]]) == 8\n    assert max_length([[1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8]]) == 8\n    assert max_length([[1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8]]) == 8\n    assert max_length([[1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8]]) == 8\n    assert max_length([[1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8]]) == 8\n    assert max_length([[1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,",
        "num_ids": 2014
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxlen = 0\n    for i in range(len(list1)):\n        if len(list1[i])>maxlen:\n            maxlen = len(list1[i])\n    print('Max length of list is: ', maxlen)\n",
        "num_ids": 61
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = []\n    for i in list1:\n        if len(i) == max([len(j) for j in list1]):\n            l.append(i)\n    return l\n",
        "num_ids": 48
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==0 or k==0 or n==1:\n        return 0\n    if k==1:\n        return n\n    result = [[0 for _ in range(n)] for _ in range(k)]\n    result[0][0] = 1\n    result[1][0] = 1\n    result[0][1] = 1\n    result[1][1] = 1\n    for i in range(2, n):\n        result[0][i] = result[0][i-1] + result[1][i-1]\n        result[1][i] = result[0][i-2] + result[1][i-2]\n    print(result)\n    return result[0][n-1] + result[1][n-1]\n",
        "num_ids": 181
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    memo = [0]*(k+1)\n    memo[0] = 1\n",
        "num_ids": 25
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    memo = {}\n    return count_no_of_ways_recursive(n, k, 0, 0, memo)\n",
        "num_ids": 32
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base cases \n    if (n == 0 or k == 0): \n        return 0\n    # solution array \n    dp = [0 for i in range(n + 1)] \n    # initializing dp array with 0's \n    for i in range(k): \n        dp[1] = 1\n    # starting from 2nd index \n    for i in range(2, n + 1): \n        # from 0th index to kth index \n        for j in range(1, k + 1): \n            # if jth color is different from the current color \n            if (j!= i): \n                # update dp with dp of j - 1 and dp of i - 1 \n                dp[i] = dp[i] + dp[i - 1] \n    return dp[n] \n",
        "num_ids": 201
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    modulo = 1000000000\n    dp = [0]*(k+1)\n    dp[0] = 1\n    if n == 1:\n        return dp[k]\n    dp[1] = k\n    if n == 2:\n        return dp[k]\n    if n >= 3:\n        for i in range(k):\n            for j in range(1, min(i+3, k+1)):\n                dp[j] = (dp[j] + dp[j-1])%modulo\n    return dp[k]\n",
        "num_ids": 137
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k + 1)] for j in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = 1\n    for j in range(1, k + 1):\n        dp[1][j] = j\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i - 2][j]\n    return dp[n][k]\n",
        "num_ids": 136
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # global variables\n    global no_of_ways, color_dict, prev_color_dict, x, y\n    # initializing variables\n    no_of_ways = 0\n    color_dict = {}\n    prev_color_dict = {}\n    x = 0\n    y = 0\n    \n    find_no_of_ways(n, k)\n    print('Number of ways:'+ str(no_of_ways))\n    \ndef find_no_of_ways(n, k): \n    '''\n    Utility function to calculate the number of ways.\n    '''\n    global no_of_ways, color_dict, prev_color_dict, x, y\n    if n == 0: # base condition\n        return\n    if n == 1: # base condition\n        if x in color_dict:\n            if color_dict[x]!= prev_color_dict[x]:\n                no_of_ways += 1\n        else:\n            color_dict[x] = y\n            no_of_ways += 1\n        return\n    if k == 1: # base condition\n        for i in range(n):\n            if x in prev_color_dict:\n                if color_dict[i]!= prev_color_dict[x]:\n                    no_of_ways += 1\n            else:\n                color_dict[i] = y\n                no_of_ways += 1\n        return\n    if x in color_dict:\n        if color_dict[x]!= prev_color_dict[x]:\n            no_of_ways += 1\n    else:\n        color_dict[x] = y\n        no_of_ways += 1\n    prev_color_dict[x] = color_dict[x]\n    find_no_of_ways(n-1, k)\n    for i in range(1, k):\n        y = (y + i) % k\n        if x in prev_color_dict:\n            if color_dict[x]!= prev_color_dict[x]:\n                no_of_ways += 1\n        else:\n            color_dict[x] = y\n            no_of_ways += 1\n        prev_color_dict[x] = color_dict[x]\n        find_no_of_ways(n-1, k)\n        \ndef count_no_of_ways_optimized(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # global variables\n    global no_of_ways, color_dict, prev_color_dict, x, y\n    # initializing variables\n    no_of_ways = 0\n    color_dict = {}\n    prev_color_dict = {}\n    x = 0\n    y = 0\n    \n    find_no_of_ways_optimized(n, k)\n    print('Number of ways:'+ str(no_of_ways))\n    \ndef find_no_of_ways_optimized(n, k): \n    '''\n    Utility function to calculate the number of ways.\n    '''\n    global no_of_ways, color_dict, prev_color_dict, x, y\n    if n == 0: # base condition\n        return\n    if n == 1: # base condition\n        if x in color_dict:\n            if color_dict[x]!= prev_color_dict[x]:\n                no_of_ways += 1\n        else:\n            color_dict[x] = y\n            no_of_ways += 1\n        return\n    if k == 1: # base condition\n        for i in range(n):\n            if x in prev_color_dict:\n                if color_dict[i]!= prev_color_dict[x]:\n                    no_of_ways += 1\n            else:\n                color_dict[i] = y\n                no_of_ways += 1\n        return\n    if x in color_dict:\n        if color_dict[x]!= prev_color_dict[x]:\n            no_of_ways += 1\n    else:\n        color_dict[x] = y\n        no_of_ways += 1\n    prev_color_dict[x] = color_dict[x]\n    find_no_of_ways_optimized(n-1, k)\n    for i in range(1, k):\n        y = (y + i) % k\n        if x in prev_color_dict:\n            if color_dict[x]!= prev_color_dict[x]:\n                no_of_ways += 1\n        else:\n            color_dict[x] = y\n            no_of_ways += 1\n        prev_color_dict[x] = color_dict[x]\n        find_no_of_ways_optimized(n-1, k)\n    \nif __name__ == '__main__':\n    count_no_of_ways(5, 2)\n    count_no_of_ways(7, 3)\n    count_no_of_ways(2, 2)\n    count_no_of_ways(6, 4)\n    count_no_of_ways(8, 5)\n    count_no_of_ways(10, 4)\n    count_no_of_ways(10, 5)\n    count_no_of_ways(12, 6)\n    count_no_of_ways(12, 7)\n    count_no_of_ways(12, 8)\n    count_no_of_ways(13, 8)\n    count_no_of_ways(16, 7)\n    count_no_of_ways(20, 8)\n    count_no_of_ways(18, 10)\n    count_no_of_ways(8, 6)\n    count_no_of_ways(8, 7)\n    count_no_of_ways(8, 8)\n    count_no_of_ways(7, 3)\n    count_no_of_ways(6, 2)\n    count_no_of_ways(6, 3)\n    count_no_of_ways(6, 4)\n    count_no_of_ways(6, 5)\n    count_no_of_ways(6, 6)\n    count_no_of_ways(7, 4)\n    count_no_of_ways(7, 5)\n    count_no_of_ways(8, 5)\n    count_no_of_ways(8, 6)\n    count_no_of_ways(9, 5)\n    count_no_of_ways(9, 6)\n    count_no_of_ways(9, 7)\n    count_no_of_ways(9, 8)\n    count_no_of_ways(9, 9)\n    count_no_of_ways(10, 4)\n    count_no_of_ways(10, 5)\n    count_no_of_ways(10, 6)\n    count_no_of_ways(10, 7)\n    count_no_of_ways(10, 8)\n    count_no_of_ways(10, 9)\n    count_no_of_ways(10, 10)\n    count_no_of_ways(10, 11)\n    count_no_of_ways(11, 5)\n    count_no_of_ways(11, 6)\n    count_no_of_ways(11, 7)\n    count_no_of_ways(11, 8)\n    count_no_of_ways(11, 9)\n    count_no_of_ways(11, 10)\n    count_no_of_ways(11, 11)\n    count_no_of_ways(12, 4)\n    count_no_of_ways(12, 5)\n    count_no_of_ways(12, 6)\n    count_no_of_ways(12, 7)\n    count_no_of_ways(12, 8)\n    count_no_of_ways(12, 9)\n    count_no_of_ways(12, 10)\n    count_no_of_ways(12, 11)\n    count_no_of_ways(12, 12)\n    count_no_of_ways(14, 5)\n    count_no_of_ways(14, 6)\n    count_no_of_ways(1",
        "num_ids": 1245
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a table to store results of subproblems \n    m = k+2\n    table = [[0 for x in range(m)] for x in range(n+1)] \n  \n    # Fill the entries for 0 value case (n = 0) \n    for i in range(m): \n        table[0][i] = 1\n  \n    # Fill rest of the table entries in bottom up manner \n    for i in range(1, n+1): \n        for j in range(m): \n  \n            # Count of solutions including S[i-1] \n            x = table[i-1][j] \n  \n            # Count of solutions excluding S[i-1] \n            y = table[i-1][j-1] if j>=2 else 0\n  \n            # total count \n            table[i][j] = x + y \n  \n    return table[n][k] \n  ",
        "num_ids": 224
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0 or n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        if k == 1:\n            return 1\n        else:\n            return k\n",
        "num_ids": 54
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 2:\n        return n\n",
        "num_ids": 13
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n",
        "num_ids": 11
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n // m \n    print(q)\n    \n    return q\n",
        "num_ids": 22
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n/m\n    return quotient\n    # Use'return' to return the result of the function.\ndef find_quotient_and_remainder(n,m):\n    '''\n    Write a python function to find quotient and remainder of two numbers\n    '''\n    return n//m, n%m\n    # Use'return' to return the result of the function.\ndef arithmetic_progression(n,m):\n    '''\n    Write a python function to find arithmetic progression \n    '''\n    if (n-m) == n*(n+1)/2 - m*(m+1)/2:\n        return True\n    else:\n        return False\n    # Use'return' to return the result of the function.\ndef get_year(n):\n    '''\n    Write a python function to find the year in which the person was born.\n    '''\n    return n[6:]\n    # Use'return' to return the result of the function.\ndef get_month(n):\n    '''\n    Write a python function to find the month in which the person was born.\n    '''\n    return n[:3]\n    # Use'return' to return the result of the function.\ndef get_day(n):\n    '''\n    Write a python function to find the day in which the person was born.\n    '''\n    return n[4:]\n    # Use'return' to return the result of the function.\ndef is_valid_date(n):\n    '''\n    Write a python function to find if the person is of valid age\n    '''\n    x = n[6:]\n    if int(x) > 0 and int(x) < 120:\n        return True\n    else:\n        return False\n    # Use'return' to return the result of the function.\ndef leap_year(n):\n    '''\n    Write a python function to find if the year is a leap year\n    '''\n    return n[6:] % 4 == 0\n    # Use'return' to return the result of the function.\ndef get_date(n):\n    '''\n    Write a python function to find the date in which the person was born.\n    '''\n    return n[6:]+'/'+n[4:6]+'/'+n[:4]\n    # Use'return' to return the result of the function.\ndef is_palindrome(n):\n    '''\n    Write a python function to check if the number is a palindrome.\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    else:\n        return False\n    # Use'return' to return the result of the function.\ndef is_power_of_two(n):\n    '''\n    Write a python function to check if the number is power of two\n    '''\n    if n == 2**len(str(n)):\n        return True\n    else:\n        return False\n    # Use'return' to return the result of the function.\ndef get_number_of_digits(n):\n    '''\n    Write a python function to find the number of digits in the number.\n    '''\n    return len(str(n))\n    # Use'return' to return the result of the function.\ndef get_number_of_odd_digits(n):\n    '''\n    Write a python function to find the number of odd digits in the number.\n    '''\n    return len([i for i in str(n) if int(i) % 2!= 0])\n    # Use'return' to return the result of the function.\ndef is_leap_year_number(n):\n    '''\n    Write a python function to check if the number is a leap year number\n    '''\n    return int(n) % 4 == 0\n    # Use'return' to return the result of the function.\ndef is_palindrome_number(n):\n    '''\n    Write a python function to check if the number is a palindrome number.\n    '''\n    return int(n) == int(n[::-1])\n    # Use'return' to return the result of the function.\ndef is_power_of_two_number(n):\n    '''\n    Write a python function to check if the number is a power of two number.\n    '''\n    return int(n) == 2**len(str(n))\n    # Use'return' to return the result of the function.\ndef get_number_of_letters(n):\n    '''\n    Write a python function to find the number of letters in the number.\n    '''\n    return len(str(n)) - n.count('0')\n    # Use'return' to return the result of the function.\ndef get_number_of_odd_letters(n):\n    '''\n    Write a python function to find the number of odd letters in the number.\n    '''\n    return len([i for i in str(n) if int(i) % 2!= 0])\n    # Use'return' to return the result of the function.\ndef is_valid_credit_card_number(n):\n    '''\n    Write a python function to check if the credit card number is valid.\n    '''\n    if n.count('-') == 1 and n.count(' ') == 1 and n.startswith('4'):\n        n = n.replace(' ', '')\n        n = n.replace('-', '')\n        return int(n) % 31 == 0\n    else:\n        return False\n    # Use'return' to return the result of the function.\ndef get_number_of_digits_of_sum_of_odd_digits_product(n):\n    '''\n    Write a python function to find the number of digits in the sum of odd digits product.\n    '''\n    return sum([int(i) for i in str(n) if int(i) % 2!= 0])\n    # Use'return' to return the result of the function.\ndef get_number_of_digits_of_sum_of_even_digits_product(n):\n    '''\n    Write a python function to find the number of digits in the sum of even digits product.\n    '''\n    return sum([int(i) for i in str(n) if int(i) % 2 == 0])\n    # Use'return' to return the result of the function.\ndef get_number_of_digits_of_sum_of_odd_and_even_digits_product(n):\n    '''\n    Write a python function to find the number of digits in the sum of odd and even digits product.\n    '''\n    return sum([int(i) for i in str(n) if int(i) % 2!= 0]) - sum([int(i) for i in str(n) if int(i) % 2 == 0])\n    # Use'return' to return the result of the function.\ndef get_number_of_digits_of_sum_of_even_and_odd_digits_product(n):\n    '''\n    Write a python function to find the number of digits in the sum of even and odd digits product.\n    '''\n    return sum([int(i) for i in str(n) if int(i) % 2 == 0]) - sum([int(i) for i in str(n) if int(i) % 2!= 0])\n    # Use'return' to return the result of the function.\ndef is_valid_credit_card_number_using_digit_sum(n):\n    '''\n    Write a python function to check if the credit card number is valid using digit sum.\n    '''\n    if n.count('-') == 1 and n.count(' ') == 1 and n.startswith('4'):\n        n = n.replace(' ', '')\n        n = n.replace('-', '')\n        if sum(int(i) for i in n) % 10 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n    # Use'return' to return the result of the function.\ndef is_valid_credit_card_number_using_digit_product(n):\n    '''\n    Write a python function to check if the credit card number is valid using digit product.\n    '''\n    if n.count('-') == 1 and n.count(' ') == 1 and n.startswith('4'):\n        n = n.replace(' ', '')\n        n ",
        "num_ids": 46
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        div=n//m\n        return div\n    elif n<m:\n        div=m//n\n        return div\n    else:\n        div=n\n        return div\n",
        "num_ids": 52
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    result = n//m\n    return result\n    \ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded up to the nearest integer).\n    '''\n    result = n//m\n    return result+1\n    \ndef factorial(n):  \n    '''\n    Write a python function to calculate factorial of a number.\n    '''\n    result = 1\n    for x in range(1,n+1):\n        result = result * x\n    return result\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a number using recursion.\n    '''\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n    \ndef fibonacci(n):  \n    '''\n    Write a python function to calculate fibonacci of a number.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    return fibonacci(n-1)+fibonacci(n-2)\n    \ndef fibonacci(n):\n    '''\n    Write a python function to calculate fibonacci of a number using recursion.\n    '''\n    if n<=1:\n        return n\n    return fibonacci(n-1)+fibonacci(n-2)\n    \ndef decimalToBinary(n):  \n    '''\n    Write a python function to convert decimal to binary.\n    '''\n    return bin(n)\n    \ndef decimalToBinary(n):\n    '''\n    Write a python function to convert decimal to binary using recursion.\n    '''\n    if n<2:\n        return n\n    return (n%2) + 10*decimalToBinary(n//2)\n    \ndef binaryToDecimal(n):  \n    '''\n    Write a python function to convert binary to decimal.\n    '''\n    return int(n,2)\n    \ndef binaryToDecimal(n):\n    '''\n    Write a python function to convert binary to decimal using recursion.\n    '''\n    if n<10:\n        return n\n    return (n%10) + 10*binaryToDecimal(n//10)\n    \ndef decimalToOctal(n):  \n    '''\n    Write a python function to convert decimal to octal.\n    '''\n    return oct(n)\n    \ndef decimalToOctal(n):\n    '''\n    Write a python function to convert decimal to octal using recursion.\n    '''\n    if n<8:\n        return n\n    return (n%8) + 10*decimalToOctal(n//8)\n    \ndef decimalToHexadecimal(n):  \n    '''\n    Write a python function to convert decimal to hexadecimal.\n    '''\n    return hex(n)\n    \ndef decimalToHexadecimal(n):\n    '''\n    Write a python function to convert decimal to hexadecimal using recursion.\n    '''\n    if n<16:\n        return n\n    return (n%16) + 10*decimalToHexadecimal(n//16)\n    \ndef hexadecimalToDecimal(n):  \n    '''\n    Write a python function to convert hexadecimal to decimal.\n    '''\n    return int(n,16)\n    \ndef hexadecimalToDecimal(n):\n    '''\n    Write a python function to convert hexadecimal to decimal using recursion.\n    '''\n    if len(n)<=1:\n        return n\n    return int(n[0])*16 + hexadecimalToDecimal(n[1:])\n    \ndef decimalToOctal(n):  \n    '''\n    Write a python function to convert decimal to octal.\n    '''\n    return oct(n)\n    \ndef decimalToOctal(n):\n    '''\n    Write a python function to convert decimal to octal using recursion.\n    '''\n    if n<8:\n        return n\n    return (n%8) + 10*decimalToOctal(n//8)\n    \ndef binaryToDecimal(n):  \n    '''\n    Write a python function to convert binary to decimal.\n    '''\n    return int(n,2)\n    \ndef binaryToDecimal(n):\n    '''\n    Write a python function to convert binary to decimal using recursion.\n    '''\n    if n<10:\n        return n\n    return (n%10) + 10*binaryToDecimal(n//10)\n    \ndef hexadecimalToDecimal(n):  \n    '''\n    Write a python function to convert hexadecimal to decimal.\n    '''\n    return int(n,16)\n    \ndef hexadecimalToDecimal(n):\n    '''\n    Write a python function to convert hexadecimal to decimal using recursion.\n    '''\n    if len(n)<=1:\n        return n\n    return int(n[0])*16 + hexadecimalToDecimal(n[1:])\n    \ndef binaryToHexadecimal(n):  \n    '''\n    Write a python function to convert binary to hexadecimal.\n    '''\n    return hex(n)\n    \ndef binaryToHexadecimal(n):\n    '''\n    Write a python function to convert binary to hexadecimal using recursion.\n    '''\n    if n<16:\n        return n\n    return (n%16) + 10*binaryToHexadecimal(n//16)\n    \ndef octalToDecimal(n):  \n    '''\n    Write a python function to convert octal to decimal.\n    '''\n    return int(n,8)\n    \ndef octalToDecimal(n):\n    '''\n    Write a python function to convert octal to decimal using recursion.\n    '''\n    if n<8:\n        return n\n    return (n%8) + 10*octalToDecimal(n//8)\n    \ndef decimalToBinary(n):  \n    '''\n    Write a python function to convert decimal to binary.\n    '''\n    return bin(n)\n    \ndef decimalToBinary(n):\n    '''\n    Write a python function to convert decimal to binary using recursion.\n    '''\n    if n<2:\n        return n\n    return (n%2) + 10*decimalToBinary(n//2)\n    \ndef binaryToOctal(n):  \n    '''\n    Write a python function to convert binary to octal.\n    '''\n    return oct(n)\n    \ndef binaryToOctal(n):\n    '''\n    Write a python function to convert binary to octal using recursion.\n    '''\n    if n<8:\n        return n\n    return (n%8) + 10*binaryToOctal(n//8)\n    \ndef binaryToDecimal(n):  \n    '''\n    Write a python function to convert binary to decimal.\n    '''\n    return int(n,2)\n    \ndef binaryToDecimal(n):\n    '''\n    Write a python function to convert binary to decimal using recursion.\n    '''\n    if n<10:\n        return n\n    return (n%10) + 10*binaryToDecimal(n//10)\n    \ndef binaryToHexadecimal(n):  \n    '''\n    Write a python function to convert binary to hexadecimal.\n    '''\n    return hex(n)\n    \ndef binaryToHexadecimal(n):\n    '''\n    Write a python function to convert binary to hexadecimal using recursion.\n    '''\n    if n<16:\n        return n\n    return (n%16) + 10*binaryToHexadecimal(n//16)\n    \ndef octalToBinary(n):  \n    '''\n    Write a python function to convert octal to binary.\n    '''\n    return bin(n)\n    \ndef octalToBinary(n):\n    '''\n    Write a python function to convert octal to binary using recursion.\n    '''\n    if n<2:\n        return n\n    return (n%2) + 10*octalToBinary(n//2)\n    \ndef decimalT",
        "num_ids": 39
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n//m\n    return q\n",
        "num_ids": 13
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n",
        "num_ids": 11
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #iterate through all numbers 1,2,...n and check if gcd(m, n) is 1 (i.e. gcd(m, n) divides m and n)\n    #return quotient\n    if m%n == 0:\n        return m//n\n    else:\n        return 0\n",
        "num_ids": 73
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<m:\n        k=n\n        n=m\n        m=k\n    quotient=n//m\n    return quotient\n",
        "num_ids": 38
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x = w**2 + h**2\n    x = x**0.5\n    return x\ndef triangle_sum(a,b):\n    '''\n    Write a function to find the sum of the lengths of the sides of a triangle.\n    '''\n    x = a**2 + b**2\n    x = x**0.5\n    return x\ndef triangle_area(s):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    x = s**0.5\n    x = x*(s**0.5)\n    x = x*(s**0.5)\n    return x\ndef distance_btwn_points(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    x = ((x1-x2)**2)\n    x = x**0.5\n    y = ((y1-y2)**2)\n    y = y**0.5\n    z = x + y\n    return z\ndef rectangle_area(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    x = w*h\n    return x\ndef perimeter_rectangle(w,h):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    x = 2*w + 2*h\n    return x\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    x = (r**2)*(math.pi)\n    x = round(x,2)\n    return x\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    x = 2*(math.pi)*r\n    x = round(x,2)\n    return x\ndef right_triangle_area(a,b):\n    '''\n    Write a function to find the area of a right triangle.\n    '''\n    x = 0.5*a*b\n    x = round(x,2)\n    return x\ndef right_triangle_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a right triangle.\n    '''\n    x = a + b + ((a**2 + b**2)**0.5)\n    x = round(x,2)\n    return x\ndef third_angle(a,b):\n    '''\n    Write a function to find the third angle of a triangle.\n    '''\n    x = 180 - (a + b)\n    return x\ndef triangle_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    x = a + b + ((a**2 + b**2)**0.5)\n    return x\ndef triangle_perimeter_three_sides(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    x = a + b + c + ((a**2 + b**2 + c**2)**0.5)\n    return x\ndef triangle_area_three_sides(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s = (a + b + c + ((a**2 + b**2 + c**2)**0.5))/2\n    x = (s*(s-a)*(s-b)*(s-c))**0.5\n    x = round(x,2)\n    return x\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    x = 2*math.pi*r\n    return x\ndef circle_circumference_area_diameter(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    x = r*2*math.pi\n    x = round(x,2)\n    return x\ndef triangle_circumference(a,b,c):\n    '''\n    Write a function to find the circumference of a triangle.\n    '''\n    x = a + b + c + ((a**2 + b**2 + c**2)**0.5)\n    return x\ndef square_area(w):\n    '''\n    Write a function to find the area of a square.\n    '''\n    x = w*w\n    x = x/4\n    return x\ndef square_perimeter(w):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    x = w*4\n    return x\ndef rectangle_circumference(w,h):\n    '''\n    Write a function to find the circumference of a rectangle.\n    '''\n    x = w*2 + h*2\n    return x\ndef rectangle_area_diagonal(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    x = w*h\n    return x\ndef rectangle_area_diagonal_two(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    x = a*b\n    return x\ndef rectangle_perimeter_diagonal(w,h):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    x = w*2 + h*2\n    return x\ndef rectangle_perimeter_diagonal_two(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    x = a*2 + b*2\n    return x\ndef triangle_area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    x = 0.5*a*b\n    x = x*(a**2 + b**2)\n    return x\ndef triangle_perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    x = a + b + c + ((a**2 + b**2 + c**2)**0.5)\n    return x\ndef rectangle_area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    x = a*b\n    return x\ndef rectangle_perimeter_parallelogram(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    x = a*2 + b*2\n    return x\ndef circle_area_sector(r):\n    '''\n    Write a function to find the area of a sector of a circle.\n    '''\n    x = r*r*(math.pi)/4\n    return x\ndef circle_area_sector_circumference(r):\n    '''\n    Write a function to find the circumference of a sector of a circle.\n    '''\n    x = 2*r*math.pi\n    return x\ndef circle_area_sector_diameter(r):\n    '''\n    Write a function to find the diameter of a sector of a circle.\n    '''\n    x = 2*r\n    return x\ndef rectangle_circumference_area_rectangle(w,h):\n    '''\n    Write a function to find the circumference of a rectangle.\n    '''\n    x = w*2 + h*2\n    return x\ndef rectangle_circumference_perimeter_rectangle(w,h):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    x = w*2 + h*2\n    return x\ndef square_perimeter_area_square(w):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    x = w*4\n    return x\ndef square_area_area_square(w):\n    '''\n    Write a function to find the area of a square.\n    '''\n    x = w*w\n    return x\ndef circle_circumference_area_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    x = 2*math.pi*r\n    return x\ndef circle_cir",
        "num_ids": 22
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    '''\n    The Pythagorean Theorem states that the square of the hypotenuse (c) of any right angled triangle can be computed by the following formula:\n",
        "num_ids": 35
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = []\n    side.append(math.sqrt(h**2 + w**2))\n    side.append(math.sqrt(h**2 + w**2))\n    side.append(math.sqrt(h**2 + w**2))\n    side.sort()\n    return side[0]\n",
        "num_ids": 77
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (2*w)+(2*h)\n    \n",
        "num_ids": 17
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = (w**2 + h**2)**0.5\n    return c\n",
        "num_ids": 23
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        thirdside=h\n    else:\n        thirdside=math.sqrt(h**2+w**2)\n    return thirdside\n",
        "num_ids": 42
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # w = int(input('Enter width of the triangle: '))\n    # h = int(input('Enter height of the triangle: '))\n    # if w == h:\n    #     print('{0} and {1} are the sides'.format(w,h))\n    #     return\n    # elif w!= h:\n    #     print('No third side')\n    #     return\n    if w==h:\n        print('{0} and {1} are the sides'.format(w,h))\n        return\n    elif w!=h:\n        print('No third side')\n        return\n    if w>h:\n        thirdside = w-h\n        print('{0} is the third side'.format(thirdside))\n        return\n    if w<h:\n        thirdside = w+h\n        print('{0} is the third side'.format(thirdside))\n        return\n    \ndef otherside_rangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # w = int(input('Enter width of the triangle: '))\n    # h = int(input('Enter height of the triangle: '))\n    # if w == h:\n    #     print('{0} and {1} are the sides'.format(w,h))\n    #     return\n    # elif w!= h:\n    #     print('No third side')\n    #     return\n    if w==h:\n        print('{0} and {1} are the sides'.format(w,h))\n        return\n    elif w!=h:\n        print('No third side')\n        return\n    if w>h:\n        thirdside = w-h\n        print('{0} is the third side'.format(thirdside))\n        return\n    if w<h:\n        thirdside = w+h\n        print('{0} is the third side'.format(thirdside))\n        return\ndef is_rightangled(a,b,c):\n    '''\n    Write a function to find the hypotenuse of a right angled triangle.\n    '''\n    # a = int(input('Enter length of side A: '))\n    # b = int(input('Enter length of side B: '))\n    # c = int(input('Enter length of side C: '))\n    # if a==b==c:\n    #     print('{0},{1},{2} are all equal'.format(a,b,c))\n    #     return\n    # elif a!=b!=c:\n    #     print('No side is equal to hypotenuse')\n    #     return\n    if a==b==c:\n        print('{0},{1},{2} are all equal'.format(a,b,c))\n        return\n    elif a!=b!=c:\n        print('No side is equal to hypotenuse')\n        return\n    if a>b and a>c:\n        if b**2+c**2==a**2:\n            print('{0},{1},{2} are hypotenuse and sides'.format(a,b,c))\n            return\n        else:\n            print('No sides are hypotenuse')\n            return\n    if b>a and b>c:\n        if a**2+c**2==b**2:\n            print('{0},{1},{2} are hypotenuse and sides'.format(a,b,c))\n            return\n        else:\n            print('No sides are hypotenuse')\n            return\n    if c>a and c>b:\n        if a**2+b**2==c**2:\n            print('{0},{1},{2} are hypotenuse and sides'.format(a,b,c))\n            return\n        else:\n            print('No sides are hypotenuse')\n            return\n    \ndef is_rightangled2(a,b,c):\n    '''\n    Write a function to find the hypotenuse of a right angled triangle.\n    '''\n    # a = int(input('Enter length of side A: '))\n    # b = int(input('Enter length of side B: '))\n    # c = int(input('Enter length of side C: '))\n    # if a==b==c:\n    #     print('{0},{1},{2} are all equal'.format(a,b,c))\n    #     return\n    # elif a!=b!=c:\n    #     print('No side is equal to hypotenuse')\n    #     return\n    if a==b==c:\n        print('{0},{1},{2} are all equal'.format(a,b,c))\n        return\n    elif a!=b!=c:\n        print('No side is equal to hypotenuse')\n        return\n    if a>b and a>c:\n        if b**2+c**2==a**2:\n            print('{0},{1},{2} are hypotenuse and sides'.format(a,b,c))\n            return\n        else:\n            print('No sides are hypotenuse')\n            return\n    if b>a and b>c:\n        if a**2+c**2==b**2:\n            print('{0},{1},{2} are hypotenuse and sides'.format(a,b,c))\n            return\n        else:\n            print('No sides are hypotenuse')\n            return\n    if c>a and c>b:\n        if a**2+b**2==c**2:\n            print('{0},{1},{2} are hypotenuse and sides'.format(a,b,c))\n            return\n        else:\n            print('No sides are hypotenuse')\n            return\n    \ndef is_rightangled3(a,b,c):\n    '''\n    Write a function to find the hypotenuse of a right angled triangle.\n    '''\n    # a = int(input('Enter length of side A: '))\n    # b = int(input('Enter length of side B: '))\n    # c = int(input('Enter length of side C: '))\n    # if a==b==c:\n    #     print('{0},{1},{2} are all equal'.format(a,b,c))\n    #     return\n    # elif a!=b!=c:\n    #     print('No side is equal to hypotenuse')\n    #     return\n    if a==b==c:\n        print('{0},{1},{2} are all equal'.format(a,b,c))\n        return\n    elif a!=b!=c:\n        print('No side is equal to hypotenuse')\n        return\n    if a>b and a>c:\n        if b**2+c**2==a**2:\n            print('{0},{1},{2} are hypotenuse and sides'.format(a,b,c))\n            return\n        else:\n            print('No sides are hypotenuse')\n            return\n    if b>a and b>c:\n        if a**2+c**2==b**2:\n            print('{0},{1},{2} are hypotenuse and sides'.format(a,b,c))\n            return\n        else:\n            print('No sides are hypotenuse')\n            return\n    if c>a and c>b:\n        if a**2+b**2==c**2:\n            print('{0},{1},{2} are hypotenuse and sides'.format(a,b,c))\n            return\n        else:\n            print('No sides are hypotenuse')\n            return\n    \ndef is_rightangled4(a,b,c):\n    '''\n    Write a function to find the hypotenuse of a right angled triangle.\n    '''\n    # a = int(input('Enter length of side A: '))\n    # b = int(input('Enter length of side B: '))\n    # c = int(input('Enter length of side C: '))\n    # if a==b==c:\n    #     print('{0},{1},{2} are all equal'.format(a,b,c))\n    #     return\n    # elif a!=b!=c:\n    # ",
        "num_ids": 111
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # w and h are the width and height of the triangle\n    # w + h = s = math.sqrt(w**2 + h**2)\n    # return s\n    if w == math.sqrt(w**2 + h**2):\n        return h\n    elif h == math.sqrt(w**2 + h**2):\n        return w\n    else:\n        return 0\n",
        "num_ids": 96
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2+h**2 == 3**2:\n        return 2*math.sqrt(3*w**2+h**2)\n    elif h**2+w**2 == 3**2:\n        return 2*math.sqrt(3*h**2+w**2)\n    else:\n        return 3*math.sqrt(w**2+h**2)\n",
        "num_ids": 95
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval = list(listval)\n    if len(listval) == 0:\n        raise ValueError('Empty list')\n    max_val = listval[0]\n    for x in listval:\n        if type(x) == int or type(x) == float:\n            if x > max_val:\n                max_val = x\n        else:\n            raise ValueError('Invalid data types in list')\n    return max_val\n",
        "num_ids": 106
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval[0] if len(listval)==1 else max(max_val(listval[1:]), listval[0])\n",
        "num_ids": 36
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 'empty list'\n    else:\n        maxval = listval[0]\n        for i in range(len(listval)):\n            if listval[i] > maxval:\n                maxval = listval[i]\n        return maxval\n",
        "num_ids": 74
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val=listval[0]\n    for i in listval:\n        if i>max_val:\n            max_val=i\n    return max_val\n",
        "num_ids": 43
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxv = listval[0]\n    for v in listval:\n        if v > maxv:\n            maxv = v\n    return maxv\n",
        "num_ids": 39
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in listval:\n        if type(i) == int or type(i) == float:\n            if i > max_val:\n                max_val = i\n        elif type(i) == str:\n            if len(i) > max_val:\n                max_val = len(i)\n    return max_val\n",
        "num_ids": 89
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        mid = len(listval)//2\n        left = listval[:mid]\n        right = listval[mid:]\n        lm = max_val(left)\n        rm = max_val(right)\n        if lm > rm:\n            return lm\n        else:\n            return rm\n",
        "num_ids": 97
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    list_max = listval[0]\n    for i in listval:\n        if i > list_max:\n            list_max = i\n    return list_max\n",
        "num_ids": 43
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # a list can be a list of numeric values, or list of strings\n    # or list of tuples\n    # all of them should return the same maximum value\n    # a list can also contain lists\n    # Write a function to find the maximum value in a given heterogeneous list.\n    # listval=[1,2,3,4,5,6,7,8,9,10]\n    # listval.append([11,12,13,14,15])\n    # listval.append([11,12,13,14,15,16])\n    # listval.append(17)\n    # listval.append(18)\n    # listval.append(19)\n    # listval.append(20)\n    # max_val(listval)\n    # return_value=[11,12,13,14,15,16,17,18,19,20]\n    # return_value=sorted(listval)\n    # return_value.pop(len(return_value)-1)\n    # return_value.pop(len(return_value)-1)\n    # return_value.pop(len(return_value)-1)\n    # return_value.pop(len(return_value)-1)\n    # return_value.pop(len(return_value)-1)\n    # return_value.pop(len(return_value)-1)\n    # return_value.pop(len(return_value)-1)\n    # return_value.pop(len(return_value)-1)\n    # return_value.pop(len(return_value)-1)\n    # return_value.pop(len(return_value)-1)\n    # return_value.pop(len(return_value)-1)\n    # return return_value\n    # print(listval)\n    # print(sorted(listval))\n    # print(listval.pop(len(listval)-1))\n    # print(listval.pop(len(listval)-1))\n    # print(listval.pop(len(listval)-1))\n    # print(listval.pop(len(listval)-1))\n    # print(listval.pop(len(listval)-1))\n    # print(listval.pop(len(listval)-1))\n    # print(listval.pop(len(listval)-1))\n    # print(listval.pop(len(listval)-1))\n    # print(listval.pop(len(listval)-1))\n    # print(listval.pop(len(listval)-1))\n    # print(listval.pop(len(listval)-1))\n    # print(listval.pop(len(listval)-1))\n    # print(listval.pop(len(listval)-1))\n    # return sorted(listval)\n    # listval.sort()\n    # print(listval)\n    # return listval[len(listval)-1]\n    # a=[1,2,3,4,5,6,7,8,9,10]\n    # b=[1,2,3,4,5,6,7,8,9,10]\n    # c=[1,2,3,4,5,6,7,8,9,10]\n    # d=[1,2,3,4,5,6,7,8,9,10]\n    # e=[1,2,3,4,5,6,7,8,9,10]\n    # f=[1,2,3,4,5,6,7,8,9,10]\n    # g=[1,2,3,4,5,6,7,8,9,10]\n    # h=[1,2,3,4,5,6,7,8,9,10]\n    # i=[1,2,3,4,5,6,7,8,9,10]\n    # j=[1,2,3,4,5,6,7,8,9,10]\n    # k=[1,2,3,4,5,6,7,8,9,10]\n    # l=[1,2,3,4,5,6,7,8,9,10]\n    # m=[1,2,3,4,5,6,7,8,9,10]\n    # n=[1,2,3,4,5,6,7,8,9,10]\n    # o=[1,2,3,4,5,6,7,8,9,10]\n    # p=[1,2,3,4,5,6,7,8,9,10]\n    # q=[1,2,3,4,5,6,7,8,9,10]\n    # r=[1,2,3,4,5,6,7,8,9,10]\n    # s=[1,2,3,4,5,6,7,8,9,10]\n    # t=[1,2,3,4,5,6,7,8,9,10]\n    # u=[1,2,3,4,5,6,7,8,9,10]\n    # v=[1,2,3,4,5,6,7,8,9,10]\n    # w=[1,2,3,4,5,6,7,8,9,10]\n    # x=[1,2,3,4,5,6,7,8,9,10]\n    # y=[1,2,3,4,5,6,7,8,9,10]\n    # z=[1,2,3,4,5,6,7,8,9,10]\n    # a.append(b)\n    # a.append(c)\n    # a.append(d)\n    # a.append(e)\n    # a.append(f)\n    # a.append(g)\n    # a.append(h)\n    # a.append(i)\n    # a.append(j)\n    # a.append(k)\n    # a.append(l)\n    # a.append(m)\n    # a.append(n)\n    # a.append(o)\n    # a.append(p)\n    # a.append(q)\n    # a.append(r)\n    # a.append(s)\n    # a.append(t)\n    # a.append(u)\n    # a.append(v)\n    # a.append(w)\n    # a.append(x)\n    # a.append(y)\n    # a.append(z)\n    # return sorted(a)[len(a)-1]\n    # a=[1,2,3,4,5,6,7,8,9,10]\n    # b=[1,2,3,4,5,6,7,8,9,10]\n    # c=[1,2,3,4,5,6,7,8,9,10]\n    # d=[1,2,3,4,5,6,7,8,9,10]\n    # e=[1,2,3,4,5,6,7,8,9,10]\n    # f=[1,2,3,4,5,6,7,8,9,10]\n    # g=[1,2,3,4,5,6,7,8,9,10]\n    # h=[1,2,3,4,5,6,7,8,9,10]\n    # i=[1,2,3,4,5,6,7,8,9,10]\n    # j=[1,2,3,4,5,6,7,8,9,10]\n    # k=[1,2,3,4,5,6,7,8,9,10]\n    # l=[1,2,3,4,5,6,7,8,9,10]\n    # m=[1,2,3,4,5,6,7,8,9,10]\n    # n=[1,2,3,4,5,6,7,8,9,10]\n    # o=[1,2,3,4,5,6,7,8,9,10]\n    # p=[1,2,3,4,5,6,7,8,9,10]\n    # q=[1,2,3,4,5,6,7,8,9,10]\n    # r=[1,2,",
        "num_ids": 2015
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_v = None\n    for e in listval:\n        if max_v is None:\n            max_v = e\n        elif e > max_v:\n            max_v = e\n    return max_v\n",
        "num_ids": 56
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    else:\n        return number + sum_div(number-1)\n",
        "num_ids": 30
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = 0\n    for i in range(1,number):\n        if (number%i == 0):\n            div += i\n    return div\n",
        "num_ids": 37
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)\n",
        "num_ids": 50
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [n for n in range(1, number + 1) if number % n == 0]\n    return sum(divisors)\n",
        "num_ids": 37
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 0\n    for i in range(1,number):\n        if number % i == 0:\n            s += i\n    return s\n",
        "num_ids": 36
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # define sum\n    sum = 0\n    # find divisors\n    for i in range(1,number):\n        if number % i == 0:\n            sum += i\n    # return the sum\n    return sum\n",
        "num_ids": 54
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for n in range(1, number + 1):\n        if number % n == 0:\n            total += n\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 1\n    for i in range(2,number+1):\n        if number % i == 0:\n            total += i\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    num_inversions = 0\n",
        "num_ids": 10
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def count_split_inversions(arr, start, end):\n        count = 0\n        if end - start <= 1:\n            return count\n",
        "num_ids": 36
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n=len(arr)\n    inv_count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                inv_count+=1\n    return inv_count\n",
        "num_ids": 64
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # If the array is empty, return 0\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 27
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n",
        "num_ids": 17
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0, arr\n    # first and second half\n    mid = n//2\n    first_half, first_half_count = get_Inv_Count(arr[:mid])\n    second_half, second_half_count = get_Inv_Count(arr[mid:])\n    # merge first and second half\n    third_half = []\n    i, j = 0, 0\n    inversion_count = first_half_count + second_half_count\n    while i < len(first_half) and j < len(second_half):\n        if first_half[i] <= second_half[j]:\n            third_half.append(first_half[i])\n            i += 1\n        else:\n            third_half.append(second_half[j])\n            j += 1\n            inversion_count += len(first_half[i:])\n    # put back rest of first half\n    third_half += first_half[i:]\n    # put back rest of second half\n    third_half += second_half[j:]\n    return third_half, inversion_count\n",
        "num_ids": 272
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr)\n",
        "num_ids": 11
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n",
        "num_ids": 71
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr)\ndef mergesort(arr): \n    '''\n    Divide and conquer mergesort.\n    '''\n    if len(arr)<= 1:\n        return 0\n    mid = len(arr)//2\n    left = arr[:mid]\n    right = arr[mid:]\n    i = 0\n    j = 0\n    k = 0\n    inv_count = mergesort(left)+mergesort(right)\n    while k<len(arr):\n        if j==len(right) or (i<len(left) and left[i]<=right[j]):\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            inv_count += (len(left)-i)\n            j += 1\n        k += 1\n    return inv_count\n",
        "num_ids": 175
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return merge_sort(arr, 0, len(arr)-1)\n",
        "num_ids": 19
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    if type(list1[0]) == list:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return [list1[0]] + flatten_list(list1[1:])\n",
        "num_ids": 76
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for i in list1:\n        if isinstance(i, list):\n            output += flatten_list(i)\n        else:\n            output.append(i)\n    return output\n",
        "num_ids": 52
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n",
        "num_ids": 19
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for sublist in list1:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n    \n    \n    ",
        "num_ids": 47
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def flatten(list2):\n        for i in list2:\n            if type(i) == list:\n                flatten(i)\n            else:\n                list_temp.append(i)\n    list_temp = []\n    flatten(list1)\n    return list_temp\n",
        "num_ids": 71
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if type(i) is list:\n            for j in i:\n                flat_list.append(j)\n        else:\n            flat_list.append(i)\n    return flat_list\n",
        "num_ids": 64
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # return [item for sublist in list1 for item in sublist]\n    return sum(list1, [])\n",
        "num_ids": 30
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n",
        "num_ids": 19
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, (list, tuple)):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = {}\n    for t in stdata:\n        if t[0] not in d:\n            d[t[0]] = 0\n        d[t[0]] += t[1]\n",
        "num_ids": 49
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    print(stdata)\n    stdata.sort()\n    print(stdata)\n    d=defaultdict(list)\n    for t in stdata:\n        d[t[1]].append(t[0])\n    print(d)\n    return(d)\n",
        "num_ids": 67
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max([sum(i) for i in stdata])\n",
        "num_ids": 17
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #stdata=[(1,1,1),(2,2,2),(1,1,1),(2,3,2),(3,3,3),(4,4,4),(5,5,5),(6,6,6)]\n    dict_stdata=defaultdict(int)\n    for num in stdata:\n        dict_stdata[num[0]]+=num[1]\n    #print(dict_stdata)\n    max_val=max(dict_stdata.values())\n    #print(max_val)\n    #print(sorted(dict_stdata.items(), key=lambda x: x[1], reverse=True))\n    for k,v in sorted(dict_stdata.items(), key=lambda x: x[1], reverse=True):\n        if v == max_val:\n            return k\n",
        "num_ids": 204
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #Calculate the sum of the tuples\n    st_data_sum = [(i[0],i[1],sum(i[1:])) for i in stdata]\n",
        "num_ids": 44
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # I have used the defaultdict to make a list which is identified by the key i.e. team_id and the key is the name of the player.\n",
        "num_ids": 38
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for i in stdata:\n        if i[1] > max_agg:\n            max_agg = i[1]\n    return max_agg\n",
        "num_ids": 45
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    for x in stdata:\n        d[x[0]].append(x[1])\n",
        "num_ids": 34
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(list)\n    \n    for tuple in stdata:\n        data[tuple[0]].append(tuple[1])\n    \n    result = []\n    for key, value in data.items():\n        # print(value)\n        # print(max(value))\n        result.append(max(value))\n    return result\n",
        "num_ids": 86
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max([sum(t) for t in stdata])\n    \n    \ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    return min([sum(t) for t in stdata])\n    \ndef avg_aggregate(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    return sum([sum(t) for t in stdata])/len(stdata)\n    \ndef mode_aggregate(stdata):\n    '''\n    Write a function to calculate the mode aggregate from the list of tuples.\n    '''\n    d=defaultdict(int)\n    for t in stdata:\n        for i in t:\n            d[i]+=1\n    return max(d, key=d.get)\n    \ndef median_aggregate(stdata):\n    '''\n    Write a function to calculate the median aggregate from the list of tuples.\n    '''\n    stdata.sort()\n    l=len(stdata)\n    return stdata[l//2]\n    \ndef stdev_aggregate(stdata):\n    '''\n    Write a function to calculate the standard deviation aggregate from the list of tuples.\n    '''\n    mean=avg_aggregate(stdata)\n    l=len(stdata)\n    return sum([(i-mean)**2 for i in [sum(t) for t in stdata]])/l\n    \ndef mode_aggregate_distinct(stdata):\n    '''\n    Write a function to calculate the mode aggregate from the list of tuples while taking distinct values into account.\n    '''\n    d=defaultdict(int)\n    for t in stdata:\n        for i in t:\n            d[i]+=1\n    return max(d, key=d.get)\n    \ndef median_aggregate_distinct(stdata):\n    '''\n    Write a function to calculate the median aggregate from the list of tuples while taking distinct values into account.\n    '''\n    stdata.sort()\n    l=len(stdata)\n    return stdata[l//2]\n    \ndef stdev_aggregate_distinct(stdata):\n    '''\n    Write a function to calculate the standard deviation aggregate from the list of tuples while taking distinct values into account.\n    '''\n    mean=avg_aggregate_distinct(stdata)\n    l=len(stdata)\n    return sum([(i-mean)**2 for i in [sum(t) for t in stdata]])/l\n    \ndef max_aggregate_distinct(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples while taking distinct values into account.\n    '''\n    return max([sum(t) for t in stdata])\n    \ndef min_aggregate_distinct(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples while taking distinct values into account.\n    '''\n    return min([sum(t) for t in stdata])\n    \ndef avg_aggregate_distinct(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples while taking distinct values into account.\n    '''\n    return sum([sum(t) for t in stdata])/len(stdata)\n    \ndef stdev_aggregate_distinct(stdata):\n    '''\n    Write a function to calculate the standard deviation aggregate from the list of tuples while taking distinct values into account.\n    '''\n    mean=avg_aggregate_distinct(stdata)\n    l=len(stdata)\n    return sum([(i-mean)**2 for i in [sum(t) for t in stdata]])/l\n",
        "num_ids": 55
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    all_seq = []\n    for i in range(1, 2**(2*n)):\n        binary_seq = str(bin(i))[2:]\n        if ((i >> n) << n) == ((i & ((2**n)-1)) << n) + ((i >> n) & ((2**n)-1)):\n            all_seq.append(binary_seq)\n    return all_seq\n",
        "num_ids": 99
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [0] * (2 ** 20) \n    dp[0] = 1\n    for i in range(1, 2 ** 20): \n        dp[i] = dp[i & (i - 1)] + dp[i - 1] \n    return dp[n] ",
        "num_ids": 72
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return binomial(2*n, n)\n",
        "num_ids": 14
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # base case: \n    if n == 0: \n        return 1 \n    # Recursion: \n    else: \n        return (count_binary_seq(n - 1) + count_binary_seq(n - 1)) \n",
        "num_ids": 60
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def sum_first_last(n):\n        '''\n        Returns the sum of first n bits of n\n        '''\n        return int(2**(n-1))+int(2**(n-1))\n    #print(sum_first_last(n))\n    def find(n):\n        '''\n        Returns the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits\n        '''\n        ans = 0\n        for i in range(2**(n-1), 2**n):\n            s1 = sum_first_last(n)\n            s2 = sum_first_last(n)\n            if s1 == s2:\n                ans += 1\n        return ans\n    return find(n)\n    ",
        "num_ids": 77
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return int((2**(2*n))*((2*n)+1)/2)\n",
        "num_ids": 24
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [0] * (1<<n)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(1, 1<<n):\n        for j in range(n-1, -1, -1):\n            if (i&(1<<j) == 0):\n                dp[i|1<<j] += dp[i]\n    return sum(dp)\n",
        "num_ids": 98
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # n must be even\n    if (n%2==0):\n        return ((2**(2*n)-1)//(2**(n)-1))\n    else:\n        return 0\n",
        "num_ids": 49
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # for x in range(1<<n):\n    #     i = x\n    #     j = 1<<n-x\n    #     s = 0\n    #     while i > 0:\n    #         s += i%2\n    #         i //= 2\n    #     while j > 0:\n    #         s += j%2\n    #         j //= 2\n    #     if s == (1<<n):\n    #         print(x, j)\n    # return 0\n    # Using formula: nC2 = (nCn)/2.\n    return int((1 << (2*n))/2)\n",
        "num_ids": 150
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # This solution is inspired by the solution provided by https://leetcode.com/problems/count-binary-substrings/discuss/109225/C%2B%2BJavaPython-Easy-Understand-DP-Solution\n    # A binary string consists of 0 and 1 only\n    # In every step, we consider the sub-string of length 2n starting from the most significant bit (MSB)\n    # For example, when n = 3, we consider the sub-strings of length 3 starting from MSBs, MSBs, LSBs, and MSBs\n    # So, we can obtain the number of possible sequences of substrings of length 2n such that the MSB and LSBs are equal\n    # then, we can use the number of possible sequences of substrings of length 2n-1 to get the number of possible sequences of substrings of length 2n\n",
        "num_ids": 198
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        return max([dict_depth(d[key]) for key in d.keys()]) + 1\n    else:\n        return 0\n",
        "num_ids": 43
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n",
        "num_ids": 45
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    elif isinstance(d, list):\n        return 0\n    else:\n        l = list(d.values())\n        return 1 + (max(dict_depth(i) for i in l) if l else 0)\n",
        "num_ids": 70
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n",
        "num_ids": 45
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    elif not d:\n        return 1\n    else:\n        return max(dict_depth(d[key]) for key in d) + 1\n",
        "num_ids": 52
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n    \ndef dict_depth2(d):\n    '''\n    An alternative version of dict_depth.\n    '''\n    if type(d) == dict:\n        return 1 + max(map(dict_depth2, d.values()))\n    return 0\n",
        "num_ids": 35
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == None:\n        return 0\n    else:\n        max_depth = 0\n        for key in d.keys():\n            if not isinstance(d[key], dict):\n                return 1\n            else:\n                depth = dict_depth(d[key])\n                if depth > max_depth:\n                    max_depth = depth\n        return 1+max_depth\n",
        "num_ids": 90
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    else:\n        return max(dict_depth(d[k]) for k in d) + 1\n",
        "num_ids": 36
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index>=ranges) :\n        index%=ranges\n    return arr[index]\n",
        "num_ids": 27
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Code here\n    num = arr[index]\n    arr_1 = arr[:]\n    if num in ranges :\n        pos = ranges.index(num)\n        ranges = rotate(arr_1,ranges,rotations)\n        new_num = ranges[pos]\n        arr_1 = []\n        for i in range(len(arr)) :\n            arr_1.append(arr[i])\n        # print(arr_1)\n        for i in range(len(arr_1)) :\n            if arr_1[i] == new_num :\n                return arr_1[i]\n    else :\n        return -1\n",
        "num_ids": 154
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[ranges[rotations][index]]\n",
        "num_ids": 15
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    total=ranges*rotations\n    return arr[index%total]\n    \ndef find_Element2(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    total=ranges*rotations\n    index=index%total\n    #print index\n    return arr[index]\n",
        "num_ids": 30
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while(low <= high):\n        mid = (low + high) // 2\n        if arr[mid] == ranges[index]:\n            return arr[mid]\n        if arr[mid] > ranges[index]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return arr[low]\n",
        "num_ids": 92
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    i = index\n    left,right = 0,len(arr)-1\n    while left < right :\n        mid = left + (right-left)//2\n        if ranges[mid] == i :\n            return arr[mid]\n        elif ranges[mid] < i :\n            left = mid+1\n        else :\n            right = mid - 1\n    if left == len(arr)-1 :\n        return arr[-1]\n    else :\n        return arr[left]\n        \n    #Code here\n    # return -1\n",
        "num_ids": 129
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Finds the value at the index after rotations are made\n    sum=0\n    for i in range(rotations) :\n        sum=sum+arr[ranges[index]]\n        index=ranges[index]\n    return sum    \n    \n",
        "num_ids": 62
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #Taking input\n    arr = [1,2,3,4,5]\n    ranges = [1,2]\n    rotations = 2\n    index = 3\n    #code here\n    def rotation(arr,ranges,rotations,index) :\n        if rotations <= 0 :\n            return arr[index]\n        else :\n            return rotation(arr[-rotations:],ranges[-rotations:],rotations-1,index)\n    return rotation(arr,ranges,rotations,index)\n",
        "num_ids": 125
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < len(ranges) :\n        if ranges[index] < len(arr) :\n            if rotations[index] < len(arr[ranges[index]]) :\n                return(arr[ranges[index]][rotations[index]])\n            else :\n                return(arr[ranges[index]][0])\n        else :\n            return('Sorry, index out of range')\n    else :\n        return('Sorry, index out of range')\n    \ndef find_Element_V1(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < len(ranges) :\n        if ranges[index] < len(arr) :\n            if rotations[index] < len(arr[ranges[index]]) :\n                return(arr[ranges[index]][rotations[index]])\n            else :\n                return(arr[ranges[index]][0])\n        else :\n            return('Sorry, index out of range')\n    else :\n        return('Sorry, index out of range')\n",
        "num_ids": 112
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    flag = False\n    for i in range(0,len(arr)) :\n        if i == index :\n            for j in range(0,rotations) :\n                if arr[j] == ranges[0] :\n                    flag = True\n                else :\n                    flag = False\n                    break\n            if flag == True :\n                return arr[j]\n    if flag == False :\n        return \"Element not found in the array.\"\n",
        "num_ids": 103
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    mylist=[]\n    for word in words:\n        if word.startswith(\"p\"):\n            mylist.append(word)\n    return mylist[0:2]\n",
        "num_ids": 46
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [w for w in words if w.startswith('p')]\n",
        "num_ids": 21
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # return re.findall('^p.*p.*', words)\n    l = []\n    for i in words:\n        if i.startswith('p') and i.endswith('p'):\n            l.append(i)\n    return l\n",
        "num_ids": 64
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    s = ''\n    for i in words:\n        if i[0] == 'p':\n            s = i\n            break\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word[0] == 'p':\n            result.append(word)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    wordlist = words.split()\n    pattern = re.compile('^p')\n    for word in wordlist:\n        if pattern.match(word):\n            return (wordlist[wordlist.index(word)-1], wordlist[wordlist.index(word)-2])\n",
        "num_ids": 68
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    word1 = re.findall(r'p[a-z]*', words)\n    word2 = re.findall(r'p[a-z]*', words)\n    \n    return word1,word2\n",
        "num_ids": 56
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if re.search(\"^p.*\",word)]\n",
        "num_ids": 22
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[0] == 'p':\n            res.append(word)\n    return res\n",
        "num_ids": 37
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word[0].lower() == \"p\":\n            result.append(word)\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n    \n    max_sum = 0\n    for i in range(n):\n        if a[i] > k:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, i, index, k))\n    \n    max_sum += a[index]\n    \n    return max_sum\n",
        "num_ids": 90
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < n and k <= index:\n        max_sum = -999999999999\n        for i in range(index, k):\n            max_sum = max(max_sum, a[i])\n        for i in range(k, n):\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k))\n        return max_sum\n    return 0\n",
        "num_ids": 107
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (index == n):\n        return 0\n    if (index == k):\n        return a[k]\n    ans1 = max_sum_increasing_subseq(a, n, index+1, k)\n    ans2 = a[index] + max_sum_increasing_subseq(a, n, index+1, k-1)\n    return max(ans1, ans2)\n",
        "num_ids": 95
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #  O(n^3) Time | O(n) Space\n    max_sum_inc = -2 ** 32\n    for i in range(0, k):\n        max_sum_inc = max(max_sum_inc, prefix_sum[i])\n",
        "num_ids": 64
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0:\n        return 0\n    max_sum = 0\n    for i in range(index, -1, -1):\n        if a[i] + index >= k:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[i])\n    return max_sum\n",
        "num_ids": 87
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0:\n        return 0\n    if index == n:\n        return 0\n    if index == k:\n        return a[k]\n    max_sum = 0\n    for i in range(index, k + 1):\n        current_sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n",
        "num_ids": 114
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #max_sum = 0\n    #max_sum_list = []\n    #max_sum_list.append(0)\n    #for i in range(n):\n    #    max_sum_list.append(0)\n    #for i in range(n):\n    #    max_sum_list[i] = max(max_sum_list[i], a[i])\n    #for j in range(k, n):\n    #    for i in range(k - 1, j):\n    #        max_sum_list[j] = max(max_sum_list[j], max_sum_list[i] + a[j])\n    #return max_sum_list[n - 1]\n    dp = [0 for _ in range(n)]\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], a[i] + dp[i - k] if i >= k - 1 else 0)\n    return dp[n - 1]\n",
        "num_ids": 252
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # # -------------------------------------------------------------------------------\n    # # Solution 1\n    # # -------------------------------------------------------------------------------\n    # # TC: O(n^2)\n    # # SC: O(n)\n    # if n == 0:\n    #     return 0\n    # if k > n:\n    #     return 0\n    # s = 0\n    # for i in range(n):\n    #     if i < k:\n    #         s = max(s, a[i])\n    #     else:\n    #         s = max(s, a[i] + a[i - k])\n    # return s\n",
        "num_ids": 141
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 1:\n        return a[0]\n    \n    a[index] = None\n    max_sum = -math.inf\n    for i in range(index):\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    \n    max_sum = max(max_sum, a[index])\n    for i in range(index + 1, n):\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    \n    return max_sum\n    \na = [5, 10, -5, 2, 11]\nn = len(a)\nk = 3\nmax_sum = max_sum_increasing_subseq(a, n, 0, k)\nprint(max_sum",
        "num_ids": 197
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = []\n    for i in range(n):\n        dp.append([0]*(k+1))\n    for i in range(1, n):\n        for j in range(1, k+1):\n            if j == 1:\n                dp[i][j] = a[i]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i][j-1]) + a[i]\n    res = dp[n-1][k]\n    return res\n",
        "num_ids": 130
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m >= 1 and n >= 1:\n        if len(tuplex) == m * n:\n            return tuplex[(m-1)*n:(m*n)-1]\n        else:\n            return None\n    else:\n        return None\n",
        "num_ids": 63
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:m+n]\n",
        "num_ids": 15
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = ()\n    for i in range(m,m+n):\n        new_tuplex += (tuplex[i],)\n    return new_tuplex\n",
        "num_ids": 48
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(m):\n        result.append(tuplex[i][:n])\n    return tuple(result)\n",
        "num_ids": 38
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=tuple(tuplex)\n    colon=tuplex[0:m]+tuplex[m:n]+tuplex[n:]\n    return colon\n",
        "num_ids": 46
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n",
        "num_ids": 13
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #check\n    tuplex_check(tuplex)\n",
        "num_ids": 18
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex = ()\n    for i in range(m):\n        colon_tuplex += (tuplex[i],)\n    for i in range(m,n):\n        colon_tuplex += (tuplex[i],)\n    return colon_tuplex\ndef index_tuplex(tuplex,k):\n    '''\n    Write a function to get a index tuple of a tuple.\n    '''\n    index_tuplex = ()\n    for i in range(k):\n        index_tuplex += (i,)\n    return index_tuplex\ndef slice_tuplex(tuplex,k,m):\n    '''\n    Write a function to get a slice of a tuple.\n    '''\n    slice_tuplex = ()\n    for i in range(k):\n        slice_tuplex += (tuplex[i],)\n    for i in range(k,k+m):\n        slice_tuplex += (tuplex[i],)\n    return slice_tuplex\ndef slice_tuplex2(tuplex,k,m):\n    '''\n    Write a function to get a slice of a tuple.\n    '''\n    slice_tuplex = ()\n    for i in range(k,k+m):\n        slice_tuplex += (tuplex[i],)\n    return slice_tuplex\ndef list_tuplex(tuplex):\n    '''\n    Write a function to get a list of a tuple.\n    '''\n    list_tuplex = []\n    for i in range(len(tuplex)):\n        list_tuplex.append(tuplex[i])\n    return list_tuplex\ndef copy_tuplex(tuplex):\n    '''\n    Write a function to get a copy of a tuple.\n    '''\n    copy_tuplex = ()\n    for i in range(len(tuplex)):\n        copy_tuplex += (tuplex[i],)\n    return copy_tuplex\ndef is_tuplex_repetition(tuplex,k,m):\n    '''\n    Write a function to judge whether a tuple has repetition.\n    '''\n    is_repetition = False\n    if len(tuplex) > k:\n        if tuplex[0:k] == tuplex[k:k+m]:\n            is_repetition = True\n    return is_repetition\ndef is_tuplex_repetition2(tuplex,k,m):\n    '''\n    Write a function to judge whether a tuple has repetition.\n    '''\n    is_repetition = False\n    if len(tuplex) > k+m:\n        if tuplex[k:k+m] == tuplex[k+m:k+m+m]:\n            is_repetition = True\n    return is_repetition\ndef is_tuplex_repetition_test():\n    '''\n    Test function for is_tuplex_repetition2.\n    '''\n    tuplex = (0,1,2,2,2,2,2,2,2,2,3,4,5,6,6,6,6,6,6,6,6,7)\n    k = 2\n    m = 2\n    is_repetition = is_tuplex_repetition2(tuplex,k,m)\n    print('Test:',is_repetition)\ndef swap_tuplex(tuplex):\n    '''\n    Write a function to swap a tuple.\n    '''\n    tuplex = tuplex[-1:]+tuplex[:-1]\n    return tuplex\ndef swap_tuplex_test():\n    '''\n    Test function for swap_tuplex.\n    '''\n    tuplex = (1,2,3,4,5,6,7)\n    print('Test:',swap_tuplex(tuplex))\ndef reverse_tuplex(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    reverse_tuplex = ()\n    for i in range(len(tuplex)):\n        reverse_tuplex += (tuplex[-1-i],)\n    return reverse_tuplex\ndef reverse_tuplex_test():\n    '''\n    Test function for reverse_tuplex.\n    '''\n    tuplex = (1,2,3,4,5,6,7)\n    print('Test:',reverse_tuplex(tuplex))\ndef get_maximum_tuplex(tuplex):\n    '''\n    Write a function to get the maximum of a tuple.\n    '''\n    max_tuplex = ()\n    for i in range(len(tuplex)):\n        max_tuplex += (max(tuplex),)\n    return max_tuplex\ndef get_maximum_tuplex_test():\n    '''\n    Test function for get_maximum_tuplex.\n    '''\n    tuplex = (1,2,3,4,5,6,7)\n    print('Test:',get_maximum_tuplex(tuplex))\ndef get_minimum_tuplex(tuplex):\n    '''\n    Write a function to get the minimum of a tuple.\n    '''\n    min_tuplex = ()\n    for i in range(len(tuplex)):\n        min_tuplex += (min(tuplex),)\n    return min_tuplex\ndef get_minimum_tuplex_test():\n    '''\n    Test function for get_minimum_tuplex.\n    '''\n    tuplex = (1,2,3,4,5,6,7)\n    print('Test:',get_minimum_tuplex(tuplex))\ndef difference_tuplex(tuplex,k):\n    '''\n    Write a function to get the difference of a tuple.\n    '''\n    difference_tuplex = ()\n    for i in range(len(tuplex)):\n        difference_tuplex += (tuplex[i]-k,)\n    return difference_tuplex\ndef difference_tuplex_test():\n    '''\n    Test function for difference_tuplex.\n    '''\n    tuplex = (1,2,3,4,5,6,7)\n    k = 2\n    print('Test:',difference_tuplex(tuplex,k))\ndef swap_element_tuplex(tuplex,k,m):\n    '''\n    Write a function to swap a element of a tuple.\n    '''\n    tuplex[k],tuplex[k+m] = tuplex[k+m],tuplex[k]\n    return tuplex\ndef swap_element_tuplex_test():\n    '''\n    Test function for swap_element_tuplex.\n    '''\n    tuplex = (1,2,3,4,5,6,7)\n    k = 2\n    m = 2\n    print('Test:',swap_element_tuplex(tuplex,k,m))\ndef is_tuplex_palindrome(tuplex,k,m):\n    '''\n    Write a function to judge whether a tuple is a palindrome.\n    '''\n    is_palindrome = False\n    if len(tuplex) > k:\n        if tuplex[0:k] == reverse_tuplex(tuplex[0:k]):\n            is_palindrome = True\n    return is_palindrome\ndef is_tuplex_palindrome_test():\n    '''\n    Test function for is_tuplex_palindrome.\n    '''\n    tuplex = (1,2,3,2,2,2,2,2,2,2,3,4,5,6,6,6,6,6,6,6,6,7)\n    k = 2\n    m = 2\n    is_palindrome = is_tuplex_palindrome(tuplex,k,m)\n    print('Test:',is_palindrome)\ndef is_tuple",
        "num_ids": 107
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #return tuple((tuplex[0],tuplex[1],m,n))\n    return tuple(list(tuplex) + [m,n])\n",
        "num_ids": 41
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple([tuplex[x] for x in range(m,n+1)])\ndef create_tuple(index,value):\n    '''\n    Write a function to create a tuple, just like a list.\n    '''\n    tuplex = ()\n    for x in range(0,value):\n        tuplex += (index,)\n    return tuplex\n",
        "num_ids": 35
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    results = []\n    if nums1 and nums2:\n        for i in range(N):\n            results.append(nums1[i] * nums2[i])\n        return sorted(results, reverse=True)[:N]\n    elif nums1 and not nums2:\n        for num in nums1:\n            results.append(num)\n        return sorted(results, reverse=True)[:N]\n    elif not nums1 and nums2:\n        for num in nums2:\n            results.append(num)\n        return sorted(results, reverse=True)[:N]\n    else:\n        return []\n",
        "num_ids": 156
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) + len(nums2):\n        raise Exception('too many numbers requested')\n    if len(nums1) == 0 or len(nums2) == 0:\n        raise Exception('empty list provided')\n    if N == 0:\n        return []\n    n1 = len(nums1)\n    n2 = len(nums2)\n    if n1 >= n2:\n        i = 0\n        j = 0\n        n = N\n        result = []\n        while n > 0:\n            while i < n1 and n > 0:\n                if i == 0:\n                    result.append(nums1[0] * nums2[j])\n                else:\n                    result.append(result[-1] * nums1[i])\n                i += 1\n                n -= 1\n            while j < n2 and n > 0:\n                if j == 0:\n                    result.append(nums2[0] * nums1[i - 1])\n                else:\n                    result.append(result[-1] * nums2[j])\n                j += 1\n                n -= 1\n        return result\n    else:\n        i = 0\n        j = 0\n        n = N\n        result = []\n        while n > 0:\n            while j < n2 and n > 0:\n                if j == 0:\n                    result.append(nums1[0] * nums2[0])\n                else:\n                    result.append(result[-1] * nums1[i])\n                j += 1\n                n -= 1\n            while i < n1 and n > 0:\n                if i == 0:\n                    result.append(nums1[0] * nums2[j - 1])\n                else:\n                    result.append(result[-1] * nums1[i])\n                i += 1\n                n -= 1\n        return result\n",
        "num_ids": 452
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Brute force\n    # Time complexity: O(n x m), where n, m are lengths of given lists\n    # Space complexity: O(n x m)\n    res = []\n    for i in range(N):\n        res.append(nums1[i] * nums2[i])\n    res.sort(reverse = True)\n    return res[:N]\n",
        "num_ids": 92
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product_list = []\n    for i in range(N):\n        max_product_list.append(nums1[i]*nums2[i])\n    max_product_list.sort(reverse = True)\n    return max_product_list[0:N]\n",
        "num_ids": 70
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def sorted_dict(dic):\n        return sorted(dic, key=dic.get, reverse=True)\n",
        "num_ids": 31
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def product(nums):\n        ans = 1\n        for num in nums:\n            ans *= num\n        return ans\n",
        "num_ids": 33
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    large_prods = []\n    for i in range(N):\n        n1 = nums1[i]\n        n2 = nums2[i]\n        large_prods.append(n1 * n2)\n    return large_prods\n",
        "num_ids": 63
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def product(nums):\n        p = 1\n        for i in nums:\n            p *= i\n        return p\n",
        "num_ids": 33
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    largest_product = 1\n    for num1 in nums1[:N]:\n        for num2 in nums2[:N]:\n            product = num1*num2\n            if product > largest_product:\n                largest_product = product\n    return largest_product\n",
        "num_ids": 90
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    prod = [1]*N\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            prod[i] *= nums1[i] if i<N else nums2[j]\n    return prod\n",
        "num_ids": 70
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a>b:\n        print(a)\n    else:\n        print(b)\nmaximum(4,5)\n",
        "num_ids": 48
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n    \ndef maximum_list(lst):\n    '''\n    Write a python function to find the maximum of a list of numbers.\n    '''\n    result = lst[0]\n    for i in range(1,len(lst)):\n        result = maximum(result,lst[i])\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\nprint(maximum(2,5))\n",
        "num_ids": 31
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if len(str1) == 0:\n        return []\n    else:\n        return (str1[0],) + string_to_tuple(str1[1:])\n",
        "num_ids": 45
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = list(str1)\n    return tuple(list1)\n",
        "num_ids": 20
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    my_list = []\n    for x in str1:\n        my_list.append(x)\n",
        "num_ids": 27
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #return tuple(str1)\n    return tuple(str1[i:i+1] for i in range(0, len(str1)))\n    \ndef character_check(tup1, tup2):\n    '''\n    Write a function that checks if all the characters in a tuple are also in another tuple.\n    '''\n    if all(x in tup2 for x in tup1):\n        return True\n    else:\n        return False\n    \ndef inter_check(tup1, tup2):\n    '''\n    Write a function that checks if all elements in one tuple are also present in another tuple.\n    '''\n    return set(tup1).issubset(tup2)\n",
        "num_ids": 19
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    my_list=[]\n    for x in str1:\n        my_list.append(x)\n    my_tuple=tuple(my_list)\n    return my_tuple\n",
        "num_ids": 48
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & ~(n-1)\n    \ndef set_left_most_unset_bit_2(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & ~n\n    \ndef set_left_most_unset_bit_3(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & ~(n & -n)\n",
        "num_ids": 14
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while (n & 1 == 0 and n!= 0): \n        count += 1\n        n = n >> 1\n    return count \n",
        "num_ids": 40
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 1 << (n.bit_length() - 1)\n    while mask:\n        if n & mask == 0:\n            break\n        mask >>= 1\n    n |= mask\n    return n\n",
        "num_ids": 51
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0: \n        return 0\n    i = 1\n    while i <= n: \n        if (2**i - 1) & n == 0: \n            return 2**i\n        i += 1\n",
        "num_ids": 54
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    s = bin(n & ~(n - 1))[2:]\n    return int(s, 2)\n",
        "num_ids": 28
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = n\n    while i > 0:\n        i = int(i / 2)\n        if i == 0:\n            break\n        if (i % 2) == 0:\n            n = n | i\n    return n\n",
        "num_ids": 56
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # n & (n - 1) will keep the rightmost set bit of the binary representation. \n    # eg. for decimal 27, it will set rightmost set bit of 1 to 0 and\n    # print the rightmost set bit of 0 so it'll be 00000001 = 5.\n    # We keep reducing n until the value is 0 and return the resulting number.\n    return n & -n\n",
        "num_ids": 91
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # Convert the number to binary representation. \n    # This is required because the binary representation of \n    # the number is not printed in the same format as the number itself. \n    # For example, binary representation of 12 is 1100 and binary representation of 12.2 is 101100. \n    binary_rep = bin(n) \n    \n    # Get the list of string after splitting by '.'. \n    binary_list = list(binary_rep.split(\".\")) \n    \n    # The list is converted to integer and then back to binary. \n    binary_list = [int(i) for i in binary_list] \n    \n    # Get the index of the first 0 in the binary representation of the number. \n    index = 0\n    while binary_list[index] == 1: \n        index += 1\n    \n    # Set the index to the left of the left most unset bit. \n    index -= 1\n    \n    # Set the left most unset bit to 1. \n    binary_list[index] = 1\n    \n    # Convert the binary representation back to decimal. \n    binary_rep = '.'.join([str(i) for i in binary_list]) \n    \n    # Return the decimal representation of the number. \n    return int(binary_rep, 2) \n    \n",
        "num_ids": 311
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # If last bit is set, flip it.\n    if n & (n - 1) == 0:\n        return n\n    else:\n        return n & ~(n - 1)\n",
        "num_ids": 46
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*(r**2)*h/3\n    return round(volume,2)\n",
        "num_ids": 27
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*(h)\n",
        "num_ids": 22
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r**2) * (h/3)\n    return volume\n",
        "num_ids": 25
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone = (1/3)*math.pi*(r**2)*h\n    return volume_cone\n",
        "num_ids": 29
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*(h)\n",
        "num_ids": 22
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = 3.14\n    volume = (pi * r**2) * h / 3\n    return volume\n",
        "num_ids": 28
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #return (1/3)*math.pi*r*r*h\n    #return math.pi*(r**2)*(h/3)\n    return math.pi*r*r*h/3\n",
        "num_ids": 52
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * r * r * h)/3\n",
        "num_ids": 17
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r*r*h\n",
        "num_ids": 19
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume\n    \ndef v_rect_prism(b,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    volume = b*h\n    return volume\n",
        "num_ids": 13
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while(1 << i <= n): \n        i += 1\n    return 1 << (i - 1)\n",
        "num_ids": 33
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    return (math.floor(math.log(n,2)))\n",
        "num_ids": 20
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the variable\n    highest_power = 0\n    # Loop through all the powers of 2\n    power = 1\n    while(power * 2 <= n):\n        highest_power = power\n        power = power * 2\n    return highest_power\n",
        "num_ids": 61
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_pow = 0; \n    while(n & n != 0): \n        highest_pow = highest_pow + 1\n        n = n >> 1\n    return highest_pow; \n",
        "num_ids": 52
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    x = 1\n    while x > 0:\n        if x <= n and 2 ** x == n:\n            return 2 ** x\n        x = x + 1\n    return 0\n    \ndef f(n):\n    '''\n    Write a python function to find the sum of the first n prime numbers.\n    '''\n    def isPrime(n):\n        if n == 1:\n            return False\n        elif n == 2:\n            return True\n        else:\n            for x in range(2, n):\n                if n % x == 0:\n                    return False\n            return True\n    total = 0\n    for i in range(1, n+1):\n        if isPrime(i) == True:\n            total = total + i\n    return total\n    \ndef isSubsetSum(set, n, sum): \n    if sum == 0: \n        return True\n    if n == 0 and sum!= 0: \n        return False\n    return isSubsetSum(set, n-1, sum) or isSubsetSum(set, n-1, sum-set[n-1]) \n  \ndef partition(set, n): \n    sum = 0\n    for i in range(0, n): \n        sum += set[i] \n    if sum % 2!= 0: \n        return False\n    else: \n        return isSubsetSum(set, n, sum // 2) \n        \ndef balancedSum(arr, n): \n    for i in range(0, n): \n        if partition(arr, n) == False: \n            return False\n    return True\n    \ndef isSubsetSum(arr, n, sum):\n    if sum == 0: \n        return True\n    if n == 0 and sum!= 0: \n        return False\n    if arr[n-1] > sum: \n        return isSubsetSum(arr, n-1, sum) \n    return isSubsetSum(arr, n-1, sum) or isSubsetSum(arr, n-1, sum-arr[n-1]) \n",
        "num_ids": 417
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialise highest power of 2 to 1\n    highest_power = 2\n    # as long as highest power of 2 is greater than 0\n    # we need to find the highest power of 2 that is less than or equal to n\n    while highest_power > 0: \n        # if the remainder of n is 0, then n is a power of 2\n        if n % highest_power == 0: \n            return highest_power\n        # if the remainder of n is not 0, then n is not a power of 2\n        else: \n            highest_power -= 1\n    # if the highest power of 2 that is less than or equal to n is 1\n    # then n is not a power of 2\n    return 1\n",
        "num_ids": 166
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # base case\n    if n <= 0:\n        return -1\n    # if n == 1, then 2^0 = 1\n    elif n == 1:\n        return 0\n    # if n is even, then 2^(n/2) = 2^n/2\n    elif n % 2 == 0:\n        return highest_Power_of_2(n/2)\n    # if n is odd, then 2^(n/2) = 2^(n-1)/2\n    else:\n        return highest_Power_of_2((n-1)/2)\n",
        "num_ids": 138
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return highest_Power_of_2(n-1) << 1\n",
        "num_ids": 46
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 1\n    while x < n:\n        x *= 2\n    return x\n",
        "num_ids": 24
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # one liner: highest_power_of_2 = lambda n: [2**i for i in range(0,n+1) if 2**i <= n][-1] \n    # ist = []\n    # for i in range(0,n+1):\n    #     if 2**i <= n:\n    #         ist.append(i)\n    # print(ist)\n    # return 2**ist[-1]\n    \n    # n=8\n    # 2**2==4\n    # 2**3==8\n    # 2**4==16\n    # 2**5==32\n    # 2**6==64\n    # 2**7==128\n    # 2**8==256\n    # 2**9==512\n    # 2**10==1024\n    # 2**11==2048\n    # 2**12==4096\n    # 2**13==8192\n    # 2**14==16384\n    # 2**15==32768\n    # 2**16==65536\n    # 2**17==131072\n    # 2**18==262144\n    # 2**19==524288\n    # 2**20==1048576\n    # 2**21==2097152\n    # 2**22==4194304\n    # 2**23==8388608\n    # 2**24==16777216\n    # 2**25==33554432\n    # 2**26==67108864\n    # 2**27==134217728\n    # 2**28==268435456\n    # 2**29==536870912\n    # 2**30==1073741824\n    \n    # n = 1048576\n    # 2**30 == 1073741824\n    # n//2**30 == 0 \n    # n%2**30 == 0\n    # n//2**29 == 0 \n    # n%2**29 == 0\n    # n//2**28 == 0 \n    # n%2**28 == 0\n    # n//2**27 == 0 \n    # n%2**27 == 0\n    # n//2**26 == 0 \n    # n%2**26 == 0\n    # n//2**25 == 0 \n    # n%2**25 == 0\n    # n//2**24 == 0 \n    # n%2**24 == 0\n    # n//2**23 == 0 \n    # n%2**23 == 0\n    # n//2**22 == 0 \n    # n%2**22 == 0\n    # n//2**21 == 0 \n    # n%2**21 == 0\n    # n//2**20 == 0 \n    # n%2**20 == 0\n    # n//2**19 == 0 \n    # n%2**19 == 0\n    # n//2**18 == 0 \n    # n%2**18 == 0\n    # n//2**17 == 0 \n    # n%2**17 == 0\n    # n//2**16 == 0 \n    # n%2**16 == 0\n    # n//2**15 == 0 \n    # n%2**15 == 0\n    # n//2**14 == 0 \n    # n%2**14 == 0\n    # n//2**13 == 0 \n    # n%2**13 == 0\n    # n//2**12 == 0 \n    # n%2**12 == 0\n    # n//2**11 == 0 \n    # n%2**11 == 0\n    # n//2**10 == 0 \n    # n%2**10 == 0\n    # n//2**9 == 0 \n    # n%2**9 == 0\n    # n//2**8 == 0 \n    # n%2**8 == 0\n    # n//2**7 == 0 \n    # n%2**7 == 0\n    # n//2**6 == 0 \n    # n%2**6 == 0\n    # n//2**5 == 0 \n    # n%2**5 == 0\n    # n//2**4 == 0 \n    # n%2**4 == 0\n    # n//2**3 == 0 \n    # n%2**3 == 0\n    # n//2**2 == 0 \n    # n%2**2 == 0\n    # n//2**1 == 0 \n    # n%2**1 == 0\n    # n//2**0 == 0 \n    # n%2**0 == 0\n    # n//1 == 0 \n    # n%1 == 0\n    # n//0 == 0 \n    # n%0 == 0\n    \n    return n and n-1\n    \nprint(highest_Power_of_2(8))\nprint(highest_Power_of_2(0))\nprint(highest_Power_of_2(1))\nprint(highest_Power_of_2(2))\nprint(highest_Power_of_2(3))\nprint(highest_Power_of_2(4))\nprint(highest_Power_of_2(5))\nprint(highest_Power_of_2(6))\nprint(highest_Power_of_2(7))\nprint(highest_Power_of_2(8))\nprint(highest_Power_of_2(9))\nprint(highest_Power_of_2(10))\nprint(highest_Power_of_2(11))\nprint(highest_Power_of_2(12))\nprint(highest_Power_of_2(13))\nprint(highest_Power_of_2(14))\nprint(highest_Power_of_2(15))\nprint(highest_Power_of_2(16))\nprint(highest_Power_of_2(17))\nprint(highest_Power_of_2(18))\nprint(highest_Power_of_2(19))\nprint(highest_Power_of_2(20))\nprint(highest_Power_of_2(21))\nprint(highest_Power_of_2(22))\nprint(highest_Power_of_2(23))\nprint(highest_Power_of_2(24))\nprint(highest_Power_of_2(25))\nprint(highest_Power_of_2(26))\nprint(highest_Power_of_2(27))\nprint(highest_Power_of_2(28))\nprint(highest_Power_of_2(29))\nprint(highest_Power_of_2(30))\nprint(highest_Power_of_2(31))\nprint(highest_Power_of_2(32))\nprint(highest_Power_of_2(33))\nprint(highest_Power_of_2(34))\nprint(highest_Power_of_2(35))\nprint(highest_Power_of_2(36))\nprint(highest_Power_of_2(37))\nprint(highest_Power_of_2(38))\nprint(highest_Power_of_2(39))\nprint(highest_Power_of_2(40))\nprint(highest_Power_of_2(41))\nprint(highest_Power_of_2(42))\nprint(highest_Power_of_2(43))\nprint(highest_Power_of_2(44))\nprint(highest_Power_of_2(45))\nprint(highest_Power_of_2(46))\nprint(highest_Power_of_2(47))\nprint(highest_Power_of_2(48))\nprint(highest_Power_of_2(49))\nprint(highest_Power_of_2(50))\nprint(highest_Power_of_2(51))\nprint(highest_Power_of_2(52))\nprint(highest_Power_of_2(53))\nprint(highest_Power_of_2(54))\nprint(highest_Power_of_2(55))\nprint(highest_Power_of_2(56))\nprint(highest_Power_of_2(57))\nprint(highest_Power_of_2(58))\nprint(highest_Power_of_2(59))\nprint(highest_Power_of_2(60))\nprint(highest_Power_of_2(61))\nprint(highest_Power_of_2(62))\nprint(highest_Power_of_2(63))\nprint(highest_Power_of_2(64))\nprint(highest_Power_of_2(65))\nprint(highest_Power_of_2(66))\nprint(highest_Power_of_2(67))\nprint(highest_Power",
        "num_ids": 2004
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return lucas(n-1) + lucas(n-2)\n        \n        \ndef lucas_seq(n):\n    '''\n    Write a function to return the nth Lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return lucas(n-1) + lucas(n-2)\n",
        "num_ids": 47
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n >= 3:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 66
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # l0 = 2\n    # l1 = 1\n    # if n == 0: return l0\n    # elif n == 1: return l1\n    # else:\n    #     for i in range(n):\n    #         l_temp = l0 + l1\n    #         l0 = l1\n    #         l1 = l_temp\n    #     return l1\n    # O(n) time | O(1) space\n    return 2*sum_series(n,2,1)\n",
        "num_ids": 123
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 1\n    for i in range(n):\n        lucas += 1\n        lucas = lucas * 2 - 1\n    return lucas\n",
        "num_ids": 42
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return lucas_numbers(n)\n    \ndef lucas_numbers(n):\n    '''\n    nth lucas number \n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return lucas_numbers(n-1) + lucas_numbers(n-2)\n        \ndef sum_series(n, a = 0, b = 1):\n    '''\n    Write a function to return then'th value in a series.\n    '''\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        return sum_series(n-1, a, b) + sum_series(n-2, a, b)\n    \ndef fibonacci(n):\n    '''\n    Write a function to return then'th value in a fibonacci series.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \ndef lucas(n):\n    '''\n    Write a function to return then'th value in a lucas series.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return lucas(n-1) + lucas(n-2)\n        \ndef print_sequence(n, n0 = 0, n1 = 1):\n    '''\n    Write a function to print the fibonacci or lucas sequence up to n.\n    '''\n    if n == 0:\n        return n0\n    elif n == 1:\n        return n1\n    else:\n        print(n0)\n        print(n1)\n        return print_sequence(n - 1, n0, n1)\n        \ndef test_sum_series(n):\n    '''\n    Test a number in a series.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return test_sum_series(n-1) + test_sum_series(n-2)\n        \ndef test_fibonacci(n):\n    '''\n    Test a number in a fibonacci series.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return test_fibonacci(n-1) + test_fibonacci(n-2)\n        \ndef test_lucas(n):\n    '''\n    Test a number in a lucas series.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return test_lucas(n-1) + test_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    #write your code here \n    if n < 2:\n        if n == 0:\n            return 2\n        if n == 1:\n            return 1\n    prev_two = 0\n    prev_one = 2\n    curr = 3\n    if n >= 3:\n        for i in range(3,n+1):\n            curr = prev_one + prev_two\n            prev_two = prev_one\n            prev_one = curr\n        return curr\n",
        "num_ids": 113
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # base case\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    # recursive case\n    return find_lucas(n-2) + find_lucas(n-1)\n",
        "num_ids": 58
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "num_ids": 74
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = string.split(',')\n    return list_\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # list_ = ['1', '2', '3']\n    # string = '%s'\n    # print(list(map(string, list_)))\n    return [string % i for i in list_]\n",
        "num_ids": 53
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = []\n    return list_\n",
        "num_ids": 13
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string.format(item) for item in list_]\n    return list_\n",
        "num_ids": 25
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    for num in range(len(list_)):\n        list_[num] = string.format(list_[num])\n        \n    return list_\n",
        "num_ids": 41
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "num_ids": 18
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1_dict = {k:v for k, v in zip(l1, l2)}\n    l2_dict = {k:v for k, v in zip(l2, l3)}\n    l1_dict.update(l2_dict)\n    return l1_dict\n",
        "num_ids": 71
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == len(l2) and len(l1) == len(l3):\n        return [dict(zip(l1, t)) for t in zip(l2, l3)]\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Check if list lengths match\n    if len(l1) == len(l2) == len(l3):\n        \n        # Initialize dictionary\n        d = {}\n        for idx in range(len(l1)):\n            d[l1[idx]] = {l2[idx]: l3[idx]}\n        \n        return d\n    \n    else:\n        print('Length of lists does not match.')\n        return None\n",
        "num_ids": 111
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {l2[i]: l3[i]}\n    return dictionary\n    \nprint(convert_list_dictionary([\"Class 1\", \"Class 2\", \"Class 3\", \"Class 4\"], [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"], [1, 2, 3, 4]))\nprint(convert_list_dictionary([\"C#\", \"Python\", \"Java\"], [\"Sunday\", \"Monday\", \"Tuesday\"], [10, 20, 30]))\n",
        "num_ids": 136
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {}\n        for j in range(len(l2)):\n            dictionary[l1[i]][l2[j]] = l3[i][j]\n    return dictionary\n",
        "num_ids": 74
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary of lists\n    l = {\"first\": l1, \"second\": l2, \"third\": l3}\n    # print the dictionary\n    print(l)\n    # print the first element in the first list\n    print(l[\"first\"][0])\n    # print the last element in the second list\n    print(l[\"second\"][-1])\n    # print the first three elements in the third list\n    print(l[\"third\"][0:3])\n",
        "num_ids": 114
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = dict()\n        for j in range(len(l2)):\n            d[l1[i]][l2[j]] = l3[i][j]\n    return d\n",
        "num_ids": 72
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    for i in range(len(l1)):\n        temp = {l1[i]: {l2[i]: l3[i]}}\n        print(temp)\n    return temp\n",
        "num_ids": 47
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict = {}\n    for i in range(len(l1)):\n        dict[l1[i]] = [l2[i], l3[i]]\n    return dict\n",
        "num_ids": 45
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    # iterate through list and create dict\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n in [0,1]:\n            return n\n        a, b, c = f(n/2), f(n/3), f(n/4)\n        s = max(a,b,c)\n        return s + n if s < n else s\n    return f(n)\n",
        "num_ids": 80
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 0:\n        return -1\n    \n    else:\n        return max(find_max_sum(n//2), find_max_sum(n//3), find_max_sum(n//4), find_max_sum(n//5))\n",
        "num_ids": 65
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = None\n",
        "num_ids": 9
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base case\n    if n == 0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    f_n_2 = get_max_sum(n/2)\n    f_n_3 = get_max_sum(n/3)\n    f_n_4 = get_max_sum(n/4)\n    f_n_5 = get_max_sum(n/5)\n    return max(f_n_2 + f_n_3 + f_n_4 + f_n_5, n)\n",
        "num_ids": 116
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # implement the function here\n    return 0\n",
        "num_ids": 13
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max( (get_max_sum(int(n/2)) + get_max_sum(int(n/3)) + get_max_sum(int(n/4)) + get_max_sum(int(n/5))), n)\n",
        "num_ids": 77
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    return max ( f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n",
        "num_ids": 71
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = None\n    if n == 1:\n        max_sum = n\n    elif n == 2:\n        max_sum = n\n    elif n == 3:\n        max_sum = n\n    else:\n        max_sum = max(n, n//3 + get_max_sum(n//3), n//2 + get_max_sum(n//2), n//5 + get_max_sum(n//5), n//4 + get_max_sum(n//4))\n    return max_sum\n",
        "num_ids": 129
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = n // 5\n    return n * 5 + get_max_sum(n) if n > 0 else 0\n",
        "num_ids": 30
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    for i in input_list:\n        if(len(i) > max):\n            max = len(i)\n    return max\n",
        "num_ids": 39
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    \n    max_length = 0\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    \n    for i in input_list:\n        if len(i) == max_length:\n            return i\n    \n",
        "num_ids": 73
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths_list = []\n    for i in input_list:\n        lengths_list.append(len(i))\n    return lengths_list.index(max(lengths_list))\n",
        "num_ids": 48
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if max_length < len(i):\n            max_length = len(i)\n    return max_length\n",
        "num_ids": 45
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n",
        "num_ids": 46
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = -1\n    max_list = []\n    for i in input_list:\n        if isinstance(i, list):\n            if len(i) >= max_len:\n                max_list = i\n                max_len = len(i)\n    return max_list\n",
        "num_ids": 71
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if(len(i) > max_length):\n            max_length = len(i)\n    return max_length\n",
        "num_ids": 47
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_lengths = []\n    for element in input_list:\n        list_lengths.append(len(element))\n    return max(list_lengths)\n",
        "num_ids": 42
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = None\n",
        "num_ids": 18
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_length_list = [i]\n        elif len(i) == max_length:\n            max_length_list.append(i)\n    return max_length_list\n",
        "num_ids": 93
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    if test_tup:\n        test_set = set(test_tup)\n        return len(test_tup) == len(test_set)\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = tuple(test_tup)\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n    \n",
        "num_ids": 24
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    s = set()\n    for t in test_tup:\n        if t in s:\n            return False\n        s.add(t)\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert tuple to list\n    t = list(test_tup)\n    # sort list\n    t.sort()\n    # print(t)\n",
        "num_ids": 38
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return -1\n",
        "num_ids": 32
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    str2 = []\n    for i in str1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    for i in str1:\n        if dict1[i] == 1:\n            str2.append(i)\n    if len(str2)!= 0:\n        return str2[0]\n    else:\n        return -1\n",
        "num_ids": 108
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1=str1.lower()\n    l1=[]\n    for i in str1:\n        if i in l1:\n            pass\n        else:\n            l1.append(i)\n    return l1[0]\n",
        "num_ids": 58
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(0,len(str1)):\n        if str1.count(str1[i])==1:\n            return str1[i]\n    return '_'\n",
        "num_ids": 47
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    unique_chars = {}\n",
        "num_ids": 10
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if(len(str1) == 0):\n        return 'No character in string'\n",
        "num_ids": 23
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = \"geeksforgeeks\"\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return '_'\n",
        "num_ids": 44
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] = dict1[i] + 1\n",
        "num_ids": 53
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_dict = {}\n    for c in str1:\n        if c not in str_dict:\n            str_dict[c] = 1\n        else:\n            str_dict[c] += 1\n    for key in str_dict.keys():\n        if str_dict[key] == 1:\n            return key\n    return '_'\n",
        "num_ids": 84
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict_str1 = {}\n    for i in str1:\n        dict_str1[i] = 0\n    for i in str1:\n        dict_str1[i] += 1\n    for i in str1:\n        if dict_str1[i] == 1:\n            return i\n    return '_'\n",
        "num_ids": 79
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.search(regex, string)):\n        print(True)\n    else:\n        print(False)\n        \ncheck_char(\"hello\")\ncheck_char(\"abcdefg\")\n",
        "num_ids": 50
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    \n    return re.search(regex, string)\n",
        "num_ids": 16
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string.strip()\n    if len(string) < 1:\n        return False\n    return re.match(regex, string) is not None\n",
        "num_ids": 39
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = str(string)\n    if re.match(regex,string):\n        print(\"Yes\")\n    else:\n        print(\"No\")\ncheck_char(\"hello\")\n",
        "num_ids": 45
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string)) \n",
        "num_ids": 17
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))\nprint(check_char(\"abcdef\"))\n",
        "num_ids": 26
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))\n",
        "num_ids": 16
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0]==string[len(string)-1]):\n        return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if bool(re.match(regex,string)):\n        return True\n    else:\n        return False\ndef check_char_palindrome(string):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    if string==string[::-1]:\n        return True\n    else:\n        return False\ndef palindrome(string):\n    '''\n    Write a function that finds the longest palindromic substring in the given string.\n    '''\n    str1=string\n    len1=len(str1)\n    max1=0\n    for i in range(len1):\n        for j in range(len1,i,-1):\n            if len(str1[i:j])>max1 and check_char_palindrome(str1[i:j]):\n                max1=len(str1[i:j])\n                p=i\n    return str1[p:p+max1]\ndef longest_palindrome(string):\n    '''\n    Write a function to find the longest palindromic substring in the given string.\n    '''\n    len1=len(string)\n    max1=0\n    for i in range(len1):\n        for j in range(len1,i,-1):\n            if len(string[i:j])>max1 and check_char_palindrome(string[i:j]):\n                max1=len(string[i:j])\n                p=i\n    return string[p:p+max1]\ndef find_longest_substring(string):\n    '''\n    Write a function to find the longest substring without repeating characters in the given string.\n    '''\n    len1=len(string)\n    max1=0\n    for i in range(len1):\n        for j in range(i,len1):\n            substring=string[i:j+1]\n            if len(substring)>max1 and len(set(substring))==len(substring):\n                max1=len(substring)\n                p=i\n    return string[p:p+max1]\ndef check_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    reversed_string=string[::-1]\n    if string==reversed_string:\n        return True\n    else:\n        return False\ndef check_rotated(string1,string2):\n    '''\n    Write a function to check whether the given two strings are equal in respect to the rotation of characters of the same length.\n    '''\n    len1=len(string1)\n    len2=len(string2)\n    if len1!=len2:\n        return False\n    else:\n        for i in range(len1):\n            j=i\n            if string1[j]!=string2[i]:\n                return False\n        return True\ndef check_rotation(string1,string2):\n    '''\n    Write a function to check whether the given two strings are equal in respect to the rotation of characters of the same length.\n    '''\n    len1=len(string1)\n    len2=len(string2)\n    if len1!=len2:\n        return False\n    else:\n        if check_char(string1):\n            if string1 in string2:\n                return True\n            else:\n                return False\n        else:\n            for i in range(len1):\n                j=i\n                if string1[j]!=string2[i]:\n                    return False\n            return True\ndef check_rotated_palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome after it is rotated.\n    '''\n    if check_rotated(string,string[::-1]):\n        return True\n    else:\n        return False\ndef rotated_palindrome(string):\n    '''\n    Write a function to find the longest palindromic substring in the given string after it is rotated.\n    '''\n    len1=len(string)\n    max1=0\n    for i in range(len1):\n        for j in range(len1,i,-1):\n            if check_rotated_palindrome(string[i:j]):\n                max1=len(string[i:j])\n                p=i\n    return string[p:p+max1]\ndef check_rotated_palindrome_v1(string1,string2):\n    '''\n    Write a function to check whether the given two strings are equal in respect to the rotation of characters of the same length.\n    '''\n    len1=len(string1)\n    len2=len(string2)\n    if len1!=len2:\n        return False\n    else:\n        if check_char(string1):\n            if string1 in string2:\n                return True\n            else:\n                return False\n        else:\n            for i in range(len1):\n                if string1[i]!=string2[i]:\n                    return False\n            return True\ndef rotated_palindrome_v1(string1,string2):\n    '''\n    Write a function to find the longest palindromic substring in the given string after it is rotated.\n    '''\n    len1=len(string1)\n    max1=0\n    for i in range(len1):\n        for j in range(len1,i,-1):\n            if check_rotated_palindrome_v1(string1[i:j],string2):\n                max1=len(string1[i:j])\n                p=i\n    return string1[p:p+max1]\ndef rotate_string(string1,string2):\n    '''\n    Write a function to rotate the given string.\n    '''\n    len1=len(string1)\n    rotated_string=string1[::-1]\n    for i in range(len1):\n        if string2[i] not in rotated_string:\n            return string1\n        else:\n            for j in range(len1-1,-1,-1):\n                if string2[i]==rotated_string[j]:\n                    string1=string1[j:]+string1[:j]\n                    return string1\ndef rotate_string_v1(string1,string2):\n    '''\n    Write a function to rotate the given string.\n    '''\n    len1=len(string1)\n    rotated_string=string1[::-1]\n    for i in range(len1):\n        if string2[i] not in rotated_string:\n            return string1\n        else:\n            for j in range(len1-1,-1,-1):\n                if string2[i]==rotated_string[j]:\n                    string1=string1[j:]+string1[:j]\n                    return string1\ndef check_permutation(string1,string2):\n    '''\n    Write a function to check whether the given two strings are equal in respect to the permutation of characters of the same length.\n    '''\n    if len(string1)!=len(string2):\n        return False\n    else:\n        sorted_string=sorted(string1)\n        sorted_string2=sorted(string2)\n        for i in range(len(sorted_string)):\n            if sorted_string[i]!=sorted_string2[i]:\n                return False\n        return True\ndef check_permutation_v1(string1,string2):\n    '''\n    Write a function to check whether the given two strings are equal in respect to the permutation of characters of the same length.\n    '''\n    return sorted(string1)==sorted(string2)\ndef permutation(string1,string2):\n    '''\n    Write a function to find the longest permutation of the given two strings.\n    '''\n    len1=len(string1)\n    max1=0\n    for i in range(len1):\n        for j in range(len1,i,-1):\n            if check_permutation_v1(string1[i:j],string2):\n                max1=len(string1[i:j])\n                p=",
        "num_ids": 80
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))\n",
        "num_ids": 16
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    elif a>c:\n        return a\n    elif b>c:\n        return c\n    else:\n        return b\n",
        "num_ids": 72
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if(a>b):\n        if(a<c):\n            return a\n        elif(b>c):\n            return b\n        else:\n            return c\n    else:\n        if(b>c):\n            if(a<c):\n                return a\n            elif(a>c):\n                return c\n            else:\n                return a\n        else:\n            if(a<c):\n                return b\n            elif(b>c):\n                return c\n            else:\n                return b\n",
        "num_ids": 125
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    median = a\n    if b - a > c - b:\n        median = b\n    elif c - a > b - a:\n        median = c\n    return median\n",
        "num_ids": 63
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            median = b\n        elif a > c:\n            median = c\n        else:\n            median = a\n    else:\n        if a > c:\n            median = a\n        elif b > c:\n            median = c\n        else:\n            median = b\n    return median\n    \ndef main():\n    a = input('Enter the first number: ')\n    b = input('Enter the second number: ')\n    c = input('Enter the third number: ')\n    print('The median of the numbers is ', median_numbers(a,b,c))\n",
        "num_ids": 158
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return sorted([a,b,c])[1]\n",
        "num_ids": 16
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted((a,b,c))\n    if a == b == c:\n        return a\n    return a + (b-a)//2\n",
        "num_ids": 43
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return numpy.median([a,b,c])\n",
        "num_ids": 17
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    else:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b\n",
        "num_ids": 75
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if(a>b):\n        if(b>c):\n            median = b\n        elif(c>b):\n            median = c\n        else:\n            median = b\n    elif(a>c):\n        if(c>b):\n            median = c\n        else:\n            median = b\n    elif(b>c):\n        median = b\n    else:\n        median = c\n    return(median)\n",
        "num_ids": 138
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    def get_median(a,b,c):\n        \"\"\"\n        Returns the median of three numbers a,b,c\n        \"\"\"\n        return sorted([a,b,c])[1]\n",
        "num_ids": 49
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    #convert nums to string, then into list\n    s = str(nums)\n    num_list = list(s)\n    #create empty list to fill in with digits\n    digits = []\n    for i in num_list:\n        digits.append(i)\n    \n    #create a function to sum digits in a list\n    def sum_digits(num_list):\n        total = 0\n        for num in num_list:\n            total += int(num)\n        return total\n    \n    #return sum of digits\n    return sum_digits(digits)\n    \n    \ndef one_to_ten():\n    '''\n    Write a function to generate a list of the numbers from 1 to 10.\n    '''\n    #create empty list\n    num_list = []\n    #loop through 1 to 10\n    for i in range(1,11):\n        num_list.append(i)\n    \n    return num_list\n",
        "num_ids": 52
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(i) for i in str(num))\n    return total_sum\n",
        "num_ids": 42
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(list(map(int, str(num))))\n    return sum_of_digits\n",
        "num_ids": 50
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for i in nums:\n        total = total + sum([int(j) for j in str(i)])\n    return total\n",
        "num_ids": 39
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n",
        "num_ids": 20
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += sum([int(digit) for digit in str(num)])\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total = total + sum(int(i) for i in str(num))\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # convert string into integers\n    nums = list(map(int, nums))\n    return sum(nums)\n",
        "num_ids": 31
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in list(str(nums))])\n",
        "num_ids": 22
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_ = 0\n    for num in nums:\n        sum_ += sum_of_digits(num)\n    return sum_\n",
        "num_ids": 35
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return\n",
        "num_ids": 25
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    def binary_xor(num1, num2):\n        return '{0:0{1}b}'.format(int(num1, 2) ^ int(num2, 2), max(len(num1), len(num2)))\n",
        "num_ids": 59
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x,y: x ^ y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1 ^ test_tup2)\n    \nprint(bitwise_xor((1,2,3,4,5,6),(1,2,3,4,5,6)))\n",
        "num_ids": 54
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(res)\n",
        "num_ids": 53
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(bitwise_xor(a,b) for a,b in zip(test_tup1, test_tup2))\nprint(bitwise_xor(test_tup1, test_tup2))\n",
        "num_ids": 57
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i, j in zip(test_tup1, test_tup2):\n        result.append(i ^ j)\n    return tuple(result)\n",
        "num_ids": 45
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Initialize a variable to store the unique tuples.\n    unique = []\n",
        "num_ids": 21
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    dict_freq = {}\n    for item in test_list:\n        if item in dict_freq:\n            dict_freq[item] += 1\n        else:\n            dict_freq[item] = 1\n    print(dict_freq)\n",
        "num_ids": 64
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = 0\n    for tup in test_list:\n        for char in tup:\n            if char not in test_list:\n                test_list.append(char)\n    return len(test_list)\n",
        "num_ids": 55
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]):\n                freq_list.append(tuple(test_list[j]))\n    return freq_list\n",
        "num_ids": 91
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list.sort()\n    prev_value = test_list[0]\n    freq_list = [0]\n    for i in range(1, len(test_list)):\n        if test_list[i] == prev_value:\n            freq_list[-1] += 1\n        else:\n            prev_value = test_list[i]\n            freq_list.append(1)\n    return freq_list\n",
        "num_ids": 108
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n",
        "num_ids": 9
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    counter = 0\n    for element in test_list:\n        if type(element) is tuple:\n            counter += 1\n    return counter\n",
        "num_ids": 35
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your code here\n    freq_dict = dict()\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict\n    \nprint(extract_freq([\"a\", \"a\", \"b\", \"a\", \"b\", \"c\"]))\nprint(extract_freq([1, 2, 3, 2, 1, 3, 2]))\nprint(extract_freq([]))\nprint(extract_freq([1]))\n",
        "num_ids": 147
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    for item in test_list:\n        if type(item) == tuple:\n            item = list(item)\n        if type(item) == list:\n            return len(set(item))\n    return -1\n    \n",
        "num_ids": 55
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    i=0\n    j=0\n    result_tup=()\n    if len(test_tup1)>=len(test_tup2):\n        max_len=len(test_tup1)\n    else:\n        max_len=len(test_tup2)\n    while i<=max_len-1:\n        result_tup+=(test_tup1[i]+test_tup2[i],)\n        i+=1\n    return result_tup\n",
        "num_ids": 122
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(0, len(test_tup1)):\n        result = result + (test_tup1[i] + test_tup2[i],)\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    output = ()\n    for i in range(len(test_tup1)):\n        tup = ()\n        for j in range(len(test_tup1[i])):\n            tup += (test_tup1[i][j] + test_tup2[i][j],)\n        output += (tup,)\n",
        "num_ids": 83
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup3 = ()\n    \n    for index in range(len(test_tup1)):\n        test_tup3 += (test_tup1[index] + test_tup2[index],)\n    \n    return test_tup3\n",
        "num_ids": 66
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_tup = ()\n    for index in range(len(test_tup1)):\n        if type(test_tup1[index]) == tuple:\n            nested_tup += (add_nested_tuples(test_tup1[index], test_tup2[index]),)\n        else:\n            nested_tup += (test_tup1[index] + test_tup2[index],)\n    return nested_tup\n",
        "num_ids": 115
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    total = 0\n    if len(test_tup1) > len(test_tup2):\n        longest = test_tup1\n        shorter = test_tup2\n    else:\n        longest = test_tup2\n        shorter = test_tup1\n    for index in range(len(longest)):\n        total += test_tup1[index] + test_tup2[index]\n    return total\n",
        "num_ids": 109
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print(tuple(zip(*(tup[::-1] for tup in zip(test_tup1, test_tup2)))))\n    \n    \nadd_nested_tuples(((1, 2, 3), (4, 5, 6), (7, 8, 9)), ((1, 2, 3), (4, 5, 6), (7, 8, 9)))\n",
        "num_ids": 93
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Hint: Use map\n    result = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == type(test_tup2[i]):\n            result.append(tuple(map(lambda x, y: x+y, test_tup1[i], test_tup2[i])))\n        else:\n            result.append(test_tup1[i])\n    return result\n",
        "num_ids": 115
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(tuple_1[i] + tuple_2[i] for i in range(len(tuple_1)))\n",
        "num_ids": 33
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for idx in range(len(test_tup1)):\n        result_tup += (test_tup1[idx] + test_tup2[idx],)\n    return result_tup\n",
        "num_ids": 62
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        return b\n    else:\n        return a\n",
        "num_ids": 22
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b,c):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    if a < b:\n        return minimum(a,b)\n    else:\n        return minimum(b,c)\n",
        "num_ids": 31
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # Use the if..else statement to find minimum\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 33
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    elif b>a:\n        return a\n    else:\n        return a\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif b>a:\n        return b\n    else:\n        return a\n",
        "num_ids": 33
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 20
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = a if a<b else b\n    return min\n",
        "num_ids": 17
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a)\n    else:\n        print(b)\n",
        "num_ids": 25
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex=str(tuplex)\n    tuple1=str(tuple1)\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n",
        "num_ids": 11
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1:\n        if item == tuplex:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #your code here\n    result = False \n    for i in tuplex:\n        if i == tuple1:\n            result = True\n    return result \ntuplex = ('abcd', 'efgh', 'ijkl','mnop')\ntuple1 = 'abcd'\nprint(check_tuplex(tuplex,tuple1))\ntuple1 = 'efgh'\nprint(check_tuplex(tuplex,tuple1))\ntuple1 = 'ijkl'\nprint(check_tuplex(tuplex,tuple1))\ntuple1 ='mnop'\nprint(check_tuplex(tuplex,tuple1))\n",
        "num_ids": 165
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = list(tuplex)\n    tuple1 = list(tuple1)\n    tuplex.sort()\n    tuple1.sort()\n    if tuple1 == tuplex:\n        return True\n    else:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            print('element exists')\n        else:\n            print('element doesn\\'t exists')\n",
        "num_ids": 50
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuple1)):\n        if tuplex == tuple1[i]:\n            return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(\"{} is an even number\".format(x))\n    else: \n        print(\"{} is an odd number\".format(x))\n",
        "num_ids": 47
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\n    \ndef is_Even(x):\n    '''\n    Write a python function to find whether the given number is even or odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef find_Odd(x):\n    '''\n    Write a python function to find whether the given number is odd or even.\n    '''\n    if is_Even(x) == True:\n        return \"even\"\n    else:\n        return \"odd\"\n        \n    \ndef main():\n    '''\n    Write a python function that accepts a number from the user and prints \"Even\" if it is even and \"Odd\" if it is odd.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if find_Odd(x) == \"even\":\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \ndef odd_or_even(x):\n    '''\n    Write a python function to find whether the given number is odd or even.\n    '''\n    return x % 2 == 0\n    \ndef main():\n    '''\n    Write a python function that accepts a number from the user and prints \"Even\" if it is even and \"Odd\" if it is odd.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if odd_or_even(x) == True:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \ndef main():\n    '''\n    Write a python function to find whether a given number is odd or even.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if x % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \n    \ndef main():\n    '''\n    Write a python function that accepts a number from the user and prints \"Even\" if it is even and \"Odd\" if it is odd.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if is_Even(x) == True:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \ndef is_Even(x):\n    '''\n    Write a python function to find whether the given number is even or odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef main():\n    '''\n    Write a python function that accepts a number from the user and prints \"Even\" if it is even and \"Odd\" if it is odd.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if is_Even(x) == True:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \ndef main():\n    '''\n    Write a python function that accepts a number from the user and prints \"Even\" if it is even and \"Odd\" if it is odd.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if is_Even(x) == True:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \n    \ndef main():\n    '''\n    Write a python function to find whether a given number is odd or even.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if x % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \ndef main():\n    '''\n    Write a python function to find whether a given number is odd or even.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if x % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \ndef main():\n    '''\n    Write a python function to find whether a given number is odd or even.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if is_Even(x) == True:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \ndef main():\n    '''\n    Write a python function to find whether a given number is odd or even.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if x % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \ndef main():\n    '''\n    Write a python function to find whether a given number is odd or even.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if is_Even(x) == True:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \n    \ndef main():\n    '''\n    Write a python function to find whether a given number is odd or even.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if x % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \ndef main():\n    '''\n    Write a python function to find whether a given number is odd or even.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if is_Even(x) == True:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \ndef main():\n    '''\n    Write a python function to find whether a given number is odd or even.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if is_Even(x) == True:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \ndef main():\n    '''\n    Write a python function to find whether a given number is odd or even.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if is_Even(x) == True:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \ndef main():\n    '''\n    Write a python function to find whether a given number is odd or even.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if is_Even(x) == True:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \ndef main():\n    '''\n    Write a python function to find whether a given number is odd or even.\n    '''\n    x = int(input(\"Enter a number: \"))\n    if is_Even(x) == True:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n    \nif __name__ == \"__main__\":\n    main()\n    \n    \n    \ndef main():\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    result = 0\n    while(x): \n        result ^= x & 1\n        x >>= 1\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    n=bin(x).count('1')\n    return n%2\n",
        "num_ids": 20
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n",
        "num_ids": 8
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True\n",
        "num_ids": 25
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x%2 == 0):\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "num_ids": 29
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\ndef find_OddOccurences(list):\n    '''\n    Write a python function to find whether the number of odd occurences in a given list is odd.\n    '''\n    oddCount = 0\n    for num in list:\n        if find_Parity(num) == 1:\n            oddCount = oddCount + 1\n    if find_Parity(oddCount) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    def is_even(x): \n        return not (x % 2) \n",
        "num_ids": 22
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if(is_next_bigger_number(n)):\n        n = str(n)\n        n_arr = [char for char in n]\n        n_arr_re = list(n_arr)\n        for i in range(len(n_arr_re)-1):\n            for j in range(i+1,len(n_arr_re)):\n                if(n_arr_re[i] > n_arr_re[j]):\n                    n_arr_re[i], n_arr_re[j] = n_arr_re[j], n_arr_re[i]\n        n_arr_re = ''.join(n_arr_re)\n        return n_arr_re\n    else:\n        return -1\n",
        "num_ids": 182
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = n\n    string_num = str(num)\n    print(string_num)\n",
        "num_ids": 25
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10: return None\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)-1):\n        if digits[i] < digits[i+1]:\n            return int(''.join(str(d) for d in digits[:i+1]+digits[i+1:]))\n    return int(''.join(str(d) for d in digits[:-1]))\n",
        "num_ids": 107
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    def swap_adjacent(n):\n        if len(n) == 1:\n            return n\n        n = list(n)\n        for i in range(1, len(n)):\n            if n[i-1] < n[i]:\n                break\n        n[i-1], n[i] = n[i], n[i-1]\n        return ''.join(n)\n    \n    while True:\n        n = swap_adjacent(n)\n        if n < n[:len(n)-1]:\n            break\n    return int(n)\n",
        "num_ids": 147
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_str = str(n)\n    num_list = [int(x) for x in num_str]\n    \n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n            \n            return int(''.join([str(x) for x in num_list]))\n        \n    return -1\n",
        "num_ids": 131
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    ans = []\n    for i in range(len(s)):\n        ans.append(s[i])\n    # ans = sorted(ans,reverse=True)\n    for i in range(len(s)-1):\n        if int(s[i+1]) > int(s[i]):\n            temp = ans[i+1]\n            ans[i+1] = ans[i]\n            ans[i] = temp\n    return int(''.join(ans))\n",
        "num_ids": 123
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if len(str(n)) <= 1:\n        return n\n",
        "num_ids": 18
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    bigger = ''\n    for i in range(1, len(s)):\n        for j in range(len(s)-i):\n            if int(s[j]+s[j+1]) > int(s[j+1]+s[j]):\n                bigger += s[j]+s[j+1]\n                s = s[:j]+s[j+2:]\n                break\n    return int(bigger)\n",
        "num_ids": 113
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    n = str(n)\n    \n    i = len(n) - 1\n    while i > 0 and n[i] == '9':\n        i -= 1\n        \n    if i == 0:\n        return -1\n        \n    j = len(n) - 1\n    while n[j] == '0':\n        j -= 1\n        \n    n = list(n)\n    a = n[:i]\n    b = n[i:]\n    \n    if len(b) == 0:\n        return -1\n        \n    m = max(b)\n    \n    for i in range(len(b)):\n        if b[i] == m:\n            b[i] = '9'\n            break\n        \n    b = ''.join(b)\n    a = ''.join(a)\n    \n    return int(a + b)\n    \n",
        "num_ids": 212
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = [int(i) for i in str(n)]\n    if len(n) < 2:\n        return None\n    else:\n        if n[-2] < n[-1]:\n            del(n[-1])\n            return int(''.join([str(i) for i in n]))\n        elif n[-2] == n[-1]:\n            if len(n) == 2:\n                return None\n            else:\n                del(n[-2])\n                return int(''.join([str(i) for i in n]))\n        else:\n            for i in range(len(n)-2):\n                if n[i] < n[i+1]:\n                    tmp = n[i+1:]\n                    n[i+1:] = [n[i]] + tmp\n                    return int(''.join([str(i) for i in n]))\n            else:\n                return None\n",
        "num_ids": 220
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    result = []\n",
        "num_ids": 15
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # First, we iterate through the first array and we create a hash table with all the elements of the first array.\n    # We use a heap to hold the size of the smallest pairs in the hash table.\n    # Then we iterate through the second array and if we can find an element which is in the hash table, we check if the pair with the same element is smaller than the element we found.\n    # If the pair is smaller than the smallest element we found so far, we update the smallest element and we add the pair to the hash table.\n    # The complexity of the algorithm is O(nlogm) where n is the length of the first array and m is the length of the second array.\n",
        "num_ids": 157
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k < 1:\n        return None\n    # Making nums1 always the shortest\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n",
        "num_ids": 56
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Set the index for the first array\n    idx1 = 0\n    # Set the index for the second array\n    idx2 = 0\n    # Set the counter\n    count = 0\n    # Create a heap for the resulting pairs\n    pairs = []\n    # Use a heap to store the current k pairs\n    while count < k:\n        # Pop the smallest pair from the heap\n        pair = heappop(pairs)\n        # Increment the count by 1\n        count += 1\n        # Append the pair to the result array\n        result.append([pair[0], pair[1]])\n        # Append the next elements from the first array to the heap\n        if idx1 < len(nums1):\n            pair = [nums1[idx1], nums2[idx2]]\n            # Insert the pair to the heap\n            heappush(pairs, pair)\n            # Increment the index for the first array\n            idx1 += 1\n        # Append the next elements from the second array to the heap\n        if idx2 < len(nums2):\n            pair = [nums1[idx1], nums2[idx2]]\n            # Insert the pair to the heap\n            heappush(pairs, pair)\n            # Increment the index for the second array\n            idx2 += 1\n    return result\n",
        "num_ids": 321
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (-abs(nums1[i] - nums2[j]), [nums1[i], nums2[j]]))\n            elif abs(nums1[i] - nums2[j]) < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-abs(nums1[i] - nums2[j]), [nums1[i], nums2[j]]))\n    return [i[1] for i in heap]\n",
        "num_ids": 185
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for x in nums1:\n        for y in nums2:\n            heapq.heappush(heap, (x + y, (x,y)))\n    ret = []\n    for _ in range(k):\n        ret.append(heapq.heappop(heap)[1])\n    return ret\nnums1 = [1,7,11]\nnums2 = [2,4,6]\nk = 3\nprint(k_smallest_pairs(nums1, nums2, k)",
        "num_ids": 151
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if k <= 0:\n        return []\n    if len(nums1) == 1 and len(nums2) == 1:\n        return [[nums1[0], nums2[0]]]\n    \n    if k >= len(nums1) * len(nums2):\n        k = len(nums1) * len(nums2)\n",
        "num_ids": 115
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    return [(nums1[i], nums2[j]) for _, i, j in heap]\n",
        "num_ids": 174
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #check if k is smaller than 0\n    if k < 0 or k > len(nums1) * len(nums2):\n        raise Exception(\"Invalid input\")\n    #initialize a heap\n    heap = []\n    #iterate through nums1\n    for num1 in nums1:\n        #iterate through nums2\n        for num2 in nums2:\n            #calculate the absolute value of the difference between the two numbers\n            absDiff = abs(num1 - num2)\n            #append the tuple to the heap\n            heapq.heappush(heap, (absDiff, num1, num2))\n    #return the k smallest elements\n    return [heapq.heappop(heap)[1:] for _ in range(k)]\n",
        "num_ids": 186
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0 or k == 0:\n        return []\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n    nums2.sort()\n    ans = []\n    n = len(nums1)\n    m = len(nums2)\n    i = 0\n    j = 0\n    while i < n and j < m and len(ans) < k:\n        if nums1[i] + nums2[j] < nums1[i + 1] + nums2[j]:\n            ans.append([nums1[i], nums2[j]])\n            i += 1\n        else:\n            j += 1\n    return ans\n",
        "num_ids": 198
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_prod = list1[0][0] * list1[0][1]\n    first_tup = list1[0]\n",
        "num_ids": 42
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    min_product = list1[0]*list1[1]\n    for i in range(len(list1)-1):\n        if list1[i+1]*list1[i+2] < min_product:\n            min_product = list1[i+1]*list1[i+2]\n    return min_product\n",
        "num_ids": 90
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    return list1[0][0] * list1[0][1]\n",
        "num_ids": 27
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = list1[0][0] * list1[0][1]\n    for i in range(1,len(list1)):\n        if (list1[i][0] * list1[i][1]) < min_prod:\n            min_prod = list1[i][0] * list1[i][1]\n    return min_prod\n",
        "num_ids": 93
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            list2.append(list1[i]*list1[j])\n    return min(list2)\n",
        "num_ids": 64
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    def min_product(tuple1):\n        return tuple1[0]*tuple1[1]\n",
        "num_ids": 28
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) % 2!= 0:\n        return None\n    else:\n        list1.sort()\n        new_list = []\n        for i in range(0, len(list1), 2):\n            new_list.append(list1[i] * list1[i + 1])\n        return min(new_list)\n",
        "num_ids": 84
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    def product(list1):\n        product = 1\n        for i in list1:\n            product *= i\n        return product\n    print(f'The minimum product is {product(min(list1,key=product))}.')\n",
        "num_ids": 58
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    print (min(list1, key=lambda x: x[0] * x[1]))\n",
        "num_ids": 26
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 1:\n        return 0\n    if len(list1) == 1:\n        return list1[0][0]*list1[0][1]\n    \n    result = list1[0][0]*list1[0][1]\n    for i in range(1, len(list1)):\n        if list1[i][0] < list1[i-1][0]*list1[i][1]:\n            result = min(result, list1[i][0]*list1[i][1])\n        else:\n            result = min(result, list1[i-1][0]*list1[i][1])\n    return result\n",
        "num_ids": 166
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    val = None\n    for ele in listval:\n        if val == None:\n            val = ele\n        else:\n            if type(ele) == int or type(ele) == float:\n                if ele < val:\n                    val = ele\n    return val\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    val = None\n    for ele in listval:\n        if val == None:\n            val = ele\n        else:\n            if type(ele) == int or type(ele) == float:\n                if ele > val:\n                    val = ele\n    return val\n",
        "num_ids": 64
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # One way\n    return min([i for i in listval if isinstance(i,int)])\n",
        "num_ids": 27
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for val in listval:\n        if val < min:\n            min = val\n    return min\n",
        "num_ids": 35
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        m = listval[0]\n        for x in listval:\n            if x < m:\n                m = x\n        return m\n",
        "num_ids": 54
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    x = len(listval)\n    minval = listval[0]\n    for i in range(x):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval\n",
        "num_ids": 57
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n    #another solution\n    #return min(listval)\n",
        "num_ids": 70
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n",
        "num_ids": 43
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min:\n                min = listval[i]\n        return min\n",
        "num_ids": 89
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #word = 'this_is_a_snake_case_variable_name'\n    #word = word.replace('_',' ').title().replace(' ','')\n    word_list = list(word)\n    first_letter_capitalised = False\n    if word_list[0].isupper():\n        first_letter_capitalised = True\n    if word_list[0].islower():\n        word_list[0] = word_list[0].upper()\n    word_list[0] = word_list[0].lower()\n    for i in range(1, len(word_list)):\n        if word_list[i].isupper() and word_list[i-1] == '_':\n            word_list[i] = word_list[i].lower()\n        elif word_list[i-1]!= '_':\n            word_list[i] = word_list[i].upper()\n    word_list = ''.join(word_list)\n    return word_list if not first_letter_capitalised else word_list[0].lower() + word_list[1:]\n",
        "num_ids": 267
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #take a word and make it lowercase\n    word = word.lower()\n    #take the first letter and add it to the end of the word and call it the first string\n    first_string = word[0].upper()\n    first_string += word[1:]\n    #set an empty string\n    word = \"\"\n    #loop through the first string\n    for i in first_string:\n        if i == \"_\":\n            word += \" \"\n        else:\n            word += i\n    return word\n",
        "num_ids": 120
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # return re.sub(r'\\w+_\\w+', lambda m: m.group(0)[0] + m.group(0)[1].upper(), word, flags=re.IGNORECASE)\n    return word[0:1].upper()+word[1:].lower()\n",
        "num_ids": 72
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n    return word[0].upper() + word[1:].lower()\n",
        "num_ids": 29
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n",
        "num_ids": 28
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n",
        "num_ids": 28
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    new_word = []\n    count = 0\n    for i in range(len(word)):\n        if word[i].isupper() and count==0:\n            new_word.append(word[i].lower())\n            count = 1\n        else:\n            new_word.append(word[i])\n",
        "num_ids": 78
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    list_of_words = word.split('_')\n    list_of_words = [word.capitalize() for word in list_of_words]\n    return ''.join(list_of_words)\n",
        "num_ids": 52
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_([a-zA-Z])', lambda m: m.group(1).upper(), word)\n",
        "num_ids": 34
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    print(\"Method 1 : Convert to camel case\")\n    splitted = word.split('_')\n    for i,word in enumerate(splitted):\n        if i>0:\n            splitted[i] = word.capitalize()\n    return \"\".join(splitted)\n",
        "num_ids": 68
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for n in l:\n        if n % 2 == 0:\n            new_list.append(n)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i%2 == 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # lst = []\n    # for num in l:\n    #     if num % 2 == 0:\n    #         lst.append(num)\n    # return lst\n",
        "num_ids": 45
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list=[]\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [x for x in l if x%2 == 0]\n    return l\n",
        "num_ids": 23
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l_copy = []\n    for item in l:\n        if item % 2 == 0:\n            l_copy.append(item)\n    return l_copy\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            l.pop(i)\n            i = i - 1\n    return l\n",
        "num_ids": 45
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for i in l:\n        if i%2 == 0:\n            result.append(i)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Your code here\n    \n    pass\n",
        "num_ids": 13
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # return list1[n]\n    # Solution1\n    return list1[n - 1]\n    # Solution2\n    return list1[n][1]\n    # Solution3\n    return list1[n][0]\n    # Solution4\n    return list1[n][0][1]\n",
        "num_ids": 73
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return (list1[n])\n",
        "num_ids": 11
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # return list1[n]\n",
        "num_ids": 11
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # your code here\n    return list1[n]\n",
        "num_ids": 16
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    print(list1[n])\n    \n",
        "num_ids": 13
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for n in list1:\n        return n[n]\n",
        "num_ids": 17
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n        else:\n            return False\n",
        "num_ids": 30
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return len([x for x in list1 if x in list2]) > 0\n",
        "num_ids": 21
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return len([x for x in list1 if x in list2])>0\n",
        "num_ids": 21
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    a=set(list1)\n    b=set(list2)\n    c=a.intersection(b)\n    if c:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) > len(list2):\n        for i in range(len(list2)):\n            if list2[i] in list1:\n                return True\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                return True\n        return False\n",
        "num_ids": 86
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # for i in list1:\n    #     if i in list2:\n    #         return True\n    #     else:\n    #         return False\n    # list1=[\"a\",\"b\",\"c\"]\n    # list2=[\"a\",\"d\",\"e\"]\n    # a = list1 + list2\n    # print(a)\n    # print(len(a))\n    # print(len(list1))\n    return set(list1) & set(list2)\n",
        "num_ids": 115
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #Your code here\n    if len(list1) < len(list2):\n        smaller = list1\n    else:\n        smaller = list2\n",
        "num_ids": 40
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1.sort()\n    list2.sort()\n    list3=[]\n    for i in list1:\n        if i in list2:\n            list3.append(i)\n    return list3\n",
        "num_ids": 52
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list3=[]\n    for i in list1:\n        if i in list2:\n            list3.append(i)\n    return list3\n",
        "num_ids": 38
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value1 in list1:\n        for value2 in list2:\n            if value1==value2:\n                return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i],arr[j])\n    return max_pair\n",
        "num_ids": 88
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return arr[-1]*arr[-2]\n",
        "num_ids": 22
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = sorted(arr)\n    print(arr[-1],arr[-2])\n    return max(arr[-1]*arr[-2],arr[-1]*arr[-3])\n",
        "num_ids": 51
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    result = 0\n    arr.sort(reverse=True)\n    for i in range(n - 1):\n        if (arr[i] * arr[i + 1]) > result:\n            result = arr[i] * arr[i + 1]\n    return result\n    \ndef max_Product_divide_and_conquer(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers using divide and conquer method.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr) // 2\n    l = max_Product_divide_and_conquer(arr[:mid])\n    r = max_Product_divide_and_conquer(arr[mid:])\n    return max(l*r, max_cross(arr, 0, mid, mid), max_cross(arr, mid, len(arr), len(arr)))\n",
        "num_ids": 108
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if(len(arr)<2):\n        return None\n    max1 = arr[0]\n    max2 = arr[1]\n    if(max1>=max2):\n        max1 = arr[1]\n        max2 = arr[0]\n    for i in range(2,len(arr)):\n        if(arr[i]>=max1):\n            max2 = max1\n            max1 = arr[i]\n        elif(arr[i]>=max2):\n            max2 = arr[i]\n    return (max1*max2)\n",
        "num_ids": 140
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    highest_product = arr[0] * arr[1]\n    left, right = 0, len(arr) - 1\n    while left < right:\n        current_product = arr[left] * arr[right]\n        highest_product = max(highest_product, current_product)\n        if current_product < 0:\n            left += 1\n        else:\n            right -= 1\n    return highest_product\n",
        "num_ids": 112
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Get product of all elements in array\n    l_prod = 1\n    for i in arr:\n        l_prod = l_prod * i\n    \n    r_prod = 1\n    for j in arr[::-1]:\n        r_prod = r_prod * j\n    \n    # Get the maximum of both products\n    return max(l_prod,r_prod)\n",
        "num_ids": 102
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # iterate over the list\n    # search for maximum product pair with 2*n-1 elements\n    \n    # for each pair of 3 elements, \n    # compare their product and if product is greater than found max then update max\n    \n    # return max\n    max_value = -1\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] * arr[j] > max_value:\n                max_value = arr[i]*arr[j]\n    return max_value\n        \nif __name__ == \"__main__\":\n    arr = [12, 8, 10, 6, 12, 14, 14, 16, 20, 30, 40, 50]\n    print(max_Product(arr))",
        "num_ids": 188
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] * arr[j]) > max_prod:\n                max_prod = arr[i] * arr[j]\n                i_max, j_max = arr[i], arr[j]\n    return (i_max, j_max)\n",
        "num_ids": 111
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            product = arr[i]*arr[j]\n            if max_product < product:\n                max_product = product\n                i1 = i\n                i2 = j\n    return i1,i2,max_product\n",
        "num_ids": 94
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #unzip the tuple and sort the list\n    Input = sorted(list(zip(*Input))) \n    #Initialize the first tuple and increment the second tuple\n    first = Input[0][0]\n    second = Input[0][0]\n    #Loop through the list\n    for i in range(len(Input)):\n        if first == Input[i][0]:\n            continue\n        else:\n            second = Input[i][0]\n            break\n    #Return the common first element\n    return first\n",
        "num_ids": 121
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List = []\n    NewList = []\n    result = ''\n    for i in range(len(Input)):\n        List.append(Input[i][0])\n    for j in range(len(List)):\n        if List.count(List[j]) >= 2:\n            if List[j] not in NewList:\n                NewList.append(List[j])\n    for k in range(len(NewList)):\n        result = result + '(' + str(NewList[k]) + ')' + ','\n    if result == '':\n        return ''\n    else:\n        return result[:-1]\n",
        "num_ids": 149
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    tuple_list=[]\n    for i in range(len(Input)):\n        tuple_list.append(tuple(Input[i]))\n    first_elem_list=[]\n    for i in range(len(tuple_list)):\n        first_elem_list.append(tuple_list[i][0])\n    first_elem_set=set(first_elem_list)\n    unique_list=list(first_elem_set)\n    if(len(unique_list)>1):\n        return unique_list\n    else:\n        return unique_list[0]\n",
        "num_ids": 149
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    dict = {}\n    for element in Input: \n        for sub_element in element:\n            dict[sub_element] = element\n    return dict.values()\ndef find_unique(Input):\n    '''\n    Write a function to find unique values in a list.\n    '''\n    unique = []\n    for element in Input:\n        if element not in unique:\n            unique.append(element)\n    return unique\ndef find_minimum(Input):\n    '''\n    Write a function to find minimum value in a list.\n    '''\n    min = Input[0]\n    for element in Input:\n        if element < min:\n            min = element\n    return min\ndef find_maximum(Input):\n    '''\n    Write a function to find maximum value in a list.\n    '''\n    max = Input[0]\n    for element in Input:\n        if element > max:\n            max = element\n    return max\ndef append_list(Input, Input_2):\n    '''\n    Write a function to append 2 lists.\n    '''\n    result = []\n    for element in Input:\n        result.append(element)\n    for element in Input_2:\n        result.append(element)\n    return result\ndef remove_dublicates(Input):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    result = []\n    for element in Input:\n        if element not in result:\n            result.append(element)\n    return result\ndef remove_dublicates_comprehension(Input):\n    '''\n    Write a function to remove duplicates from a list using comprehension.\n    '''\n    return list(set(Input))\ndef find_index(Input):\n    '''\n    Write a function to find index of a given element in a list.\n    '''\n    for index, element in enumerate(Input):\n        if element == Input:\n            return index\ndef copy_list(Input):\n    '''\n    Write a function to copy a list.\n    '''\n    return list(Input)\ndef remove_element(Input, Input_2):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    result = []\n    for element in Input:\n        if element!= Input_2:\n            result.append(element)\n    return result\ndef sort_list(Input):\n    '''\n    Write a function to sort a list.\n    '''\n    return sorted(Input)\ndef sort_list_comprehension(Input):\n    '''\n    Write a function to sort a list using comprehension.\n    '''\n    return sorted(Input)\ndef reverse_list(Input):\n    '''\n    Write a function to reverse a list.\n    '''\n    return list(reversed(Input))\ndef reverse_list_comprehension(Input):\n    '''\n    Write a function to reverse a list using comprehension.\n    '''\n    return list(reversed(Input))\ndef test_strings(Input, Input_2):\n    '''\n    Write a function to check if 2 strings are equal or not.\n    '''\n    if Input == Input_2:\n        return True\n    else:\n        return False\ndef test_strings_comprehension(Input, Input_2):\n    '''\n    Write a function to check if 2 strings are equal or not using comprehension.\n    '''\n    return (Input == Input_2)\ndef test_string_length(Input):\n    '''\n    Write a function to check if length of a string is equal or not.\n    '''\n    if len(Input) == 0:\n        return False\n    else:\n        return True\ndef test_string_length_comprehension(Input):\n    '''\n    Write a function to check if length of a string is equal or not using comprehension.\n    '''\n    return (len(Input) == 0)\ndef test_list_length(Input, Input_2):\n    '''\n    Write a function to check if length of a list is equal or not.\n    '''\n    if len(Input) == len(Input_2):\n        return True\n    else:\n        return False\ndef test_list_length_comprehension(Input, Input_2):\n    '''\n    Write a function to check if length of a list is equal or not using comprehension.\n    '''\n    return (len(Input) == len(Input_2))\ndef test_list_elements(Input, Input_2):\n    '''\n    Write a function to check if 2 lists have same elements or not.\n    '''\n    if set(Input) == set(Input_2):\n        return True\n    else:\n        return False\ndef test_list_elements_comprehension(Input, Input_2):\n    '''\n    Write a function to check if 2 lists have same elements or not using comprehension.\n    '''\n    return (set(Input) == set(Input_2))\ndef test_all_elements(Input, Input_2):\n    '''\n    Write a function to check if 2 lists have same elements in same order or not.\n    '''\n    if set(Input) == set(Input_2) and Input == Input_2:\n        return True\n    else:\n        return False\ndef test_all_elements_comprehension(Input, Input_2):\n    '''\n    Write a function to check if 2 lists have same elements in same order or not using comprehension.\n    '''\n    return (set(Input) == set(Input_2) and Input == Input_2)\ndef test_all_elements_different(Input, Input_2):\n    '''\n    Write a function to check if 2 lists have same elements in different order or not.\n    '''\n    if set(Input) == set(Input_2) and set(Input)!= set(Input_2):\n        return True\n    else:\n        return False\ndef test_all_elements_different_comprehension(Input, Input_2):\n    '''\n    Write a function to check if 2 lists have same elements in different order or not using comprehension.\n    '''\n    return (set(Input) == set(Input_2) and set(Input)!= set(Input_2))\ndef test_any_element(Input, Input_2):\n    '''\n    Write a function to check if 2 lists have any same elements or not.\n    '''\n    if set(Input) & set(Input_2):\n        return True\n    else:\n        return False\ndef test_any_element_comprehension(Input, Input_2):\n    '''\n    Write a function to check if 2 lists have any same elements or not using comprehension.\n    '''\n    return (set(Input) & set(Input_2))\ndef test_any_element_different(Input, Input_2):\n    '''\n    Write a function to check if 2 lists have any same elements in different order or not.\n    '''\n    if set(Input) & set(Input_2) and set(Input)!= set(Input_2):\n        return True\n    else:\n        return False\ndef test_any_element_different_comprehension(Input, Input_2):\n    '''\n    Write a function to check if 2 lists have any same elements in different order or not using comprehension.\n    '''\n    return (set(Input) & set(Input_2) and set(Input)!= set(Input_2))\ndef test_any_elements_different(Input, Input_2):\n    '''\n    Write a function to check if 2 lists have any same elements in different order or not.\n    '''\n    if set(Input) & set(Input_2) and set(Input)!= set(Input_2):\n        return True\n    else:\n        return False\ndef test_any_elements_different_comprehension(Input, Input_2):\n    '''\n    Write a function to check if 2 lists have any same elements in different order or not using comprehension.\n    '''\n    return (set(Input) & set(Input_2) and set(Input)!= set(Input_2))\ndef test_list_contains_all_elements(Input, Input_2):\n    '''\n    Write a function to check if 2 lists have all same elements in same order or not.\n    '''\n    if set(Input) == set(Input_2) and set(Input) & set(Input_2):\n        return True\n    else",
        "num_ids": 34
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    import itertools as itr\n    d = {}\n    for a, b in itr.combinations(Input, 2):\n        if a[0] == b[0]:\n            d[a[0]] = d.get(a[0], 0) + 1\n    return [(k,v) for k, v in d.items()]\n",
        "num_ids": 84
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = [] \n    for i in range(len(Input)): \n        for j in range(i + 1, len(Input)): \n            if Input[i][0] == Input[j][0]: \n                Output.append(Input[i]) \n    return Output \n",
        "num_ids": 71
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(0,len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                Output.append(Input[i])\n                break\n    return Output\n",
        "num_ids": 70
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = []\n    for i,j in Input:\n        if i in common_element:\n            common_element.append(j)\n    return common_element\n",
        "num_ids": 43
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    import itertools\n    return list(itertools.chain(*Input))\n",
        "num_ids": 21
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = [list(x) for x in zip(*Input)]\n    return Output\n",
        "num_ids": 22
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len) \n",
        "num_ids": 15
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst1 = list(map(len, lst))\n    return max(lst1, key=len)\n    \ndef Rotate(lst,k): \n    '''\n    Write a function to rotate a list k times.\n    '''\n    if len(lst)<k:\n        return lst\n    return lst[k:]+lst[:k]\n",
        "num_ids": 33
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_el = lst[i]\n    print(max_el)\n",
        "num_ids": 69
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for ele in lst:\n        if max_len < len(ele):\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n",
        "num_ids": 58
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max = 0\n    for i in lst:\n        if len(i) > Max:\n            Max = len(i)\n            Max_element = i\n    return Max_element\n",
        "num_ids": 46
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if (len(i)>max):\n            max = len(i)\n    return max\n",
        "num_ids": 38
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst,key = len)\n",
        "num_ids": 14
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n            max_i = i\n    return lst[max_i]\n",
        "num_ids": 61
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort()\n    return lst[-1]\n",
        "num_ids": 18
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if(len(i)>max):\n            max=len(i)\n            max_ele=i\n    return max_ele\n    #Code here\n",
        "num_ids": 52
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += round(i)\n    print(\"The sum of rounded values of the list is: \", sum*len(list1))\n",
        "num_ids": 45
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    return total * len(list1)\n",
        "num_ids": 33
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total*len(list1))\n    \ndef avg_of_sum(list1):\n    '''\n    Write a function that returns the average of the sum of numbers in a list.\n    '''\n    total = 0\n    for i in list1:\n        total += i\n    return total/len(list1)\n    \ndef distance_between_points(x1, y1, x2, y2):\n    '''\n    Write a function that returns the distance between two points.\n    '''\n    import math\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)\n",
        "num_ids": 32
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    def round_num(n):\n        '''\n        Write a function to round a given number to two decimal places.\n        '''\n        if n == int(n):\n            return int(n)\n        return float(n)\n    \n    return round_num(sum(list(map(round_num,list1))))*len(list1)\n    \nprint(round_and_sum([1.2, 5, 7.7, 3.4]))\n",
        "num_ids": 79
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result = 0\n    for i in list1:\n        result += round(i)\n    return result * len(list1)\n",
        "num_ids": 33
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for x in list1:\n        sum += round(x)\n    print(sum*len(list1))\n    \n    \ndef main():\n    round_and_sum([1.2, 2.5, 3.8, 4.1, 5.7])\n    round_and_sum([6.5, 7.5, 8.5, 9.5, 10.5])\n    round_and_sum([1.2, 2.5, 3.8, 4.1, 5.7])\n    round_and_sum([6.5, 7.5, 8.5, 9.5, 10.5])\n    \nmain()",
        "num_ids": 158
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    sum_list = 0\n    for n in list1:\n        list2.append(round(n))\n        sum_list += list2[-1]\n    print(f'The sum of the list is {sum_list * len(list1)}.')\n",
        "num_ids": 70
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        i = round(i, 2)\n        sum += i\n    print(sum*len(list1))\n",
        "num_ids": 41
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += round(i)\n    return sum * len(list1)\n",
        "num_ids": 33
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round1 = list(map(lambda x: round(x, 1), list1))\n    round_sum = 0\n    for i in round1:\n        round_sum += i\n    print(round_sum * len(list1))\n",
        "num_ids": 58
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(2, n+1, 2)])\n    # return sum([i**3 for i in range(1, n+1, 2)])\n    # return sum([i**3 for i in range(0, n+1, 2)])\n",
        "num_ids": 70
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**3\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i*i*i for i in range(1,n+1) if i%2==0])\n",
        "num_ids": 30
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum += i**3\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(n):\n        if i % 2 == 0:\n            s = s + i ** 3\n    return s\n    \ndef cube_Sum_2(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    \n    Note: The code should be written in one line only.\n    '''\n    s = sum([i ** 3 for i in range(n) if i % 2 == 0])\n    return s\n    \ndef cube_Sum_3(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    \n    Note: The code should be written in one line only.\n    '''\n    s = sum(i ** 3 for i in range(n) if i % 2 == 0)\n    return s\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    f = 1\n    for i in range(1,n+1):\n        f = f * i\n    return f\n    \ndef factorial_2(n):\n    '''\n    Write a python function to find the factorial of a number.\n    \n    Note: The code should be written in one line only.\n    '''\n    f = 1\n    for i in range(1,n+1):\n        f = f * i\n    return f\n    \ndef fibonacci(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    \n    Note: The code should be written in one line only.\n    '''\n    a,b = 1,1\n    for _ in range(1,n):\n        a,b = b,a+b\n    return a\n    \ndef fibonacci_2(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    \n    Note: The code should be written in one line only.\n    '''\n    a,b = 0,1\n    for _ in range(1,n):\n        a,b = b,a+b\n    return a\n    \ndef fibonacci_3(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    \n    Note: The code should be written in one line only.\n    '''\n    f = lambda n: n if n <= 1 else f(n-1) + f(n-2)\n    return f(n)\n    \ndef fibonacci_4(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    \n    Note: The code should be written in one line only.\n    '''\n    f = lambda n,a,b: a if n == 0 else f(n-1, b, a+b)\n    return f(n,0,1)\n    \ndef fibonacci_5(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    \n    Note: The code should be written in one line only.\n    '''\n    a,b = 0,1\n    for _ in range(n):\n        a,b = b,a+b\n    return a\n    \ndef fibonacci_6(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    \n    Note: The code should be written in one line only.\n    '''\n    f = lambda n,a,b: a if n == 0 else f(n-1, b, a+b)\n    return f(n,0,1)\n    \ndef hanoi(n,a,b,c):\n    '''\n    Write a python function to find the minimum number of moves required to move n discs from source tower to destination tower.\n    \n    Note: The code should be written in one line only.\n    '''\n    if n == 1:\n        print('move disc from {} to {}'.format(a,b))\n    else:\n        hanoi(n-1,a,c,b)\n        hanoi(1,a,b,c)\n        hanoi(n-1,c,b,a)\n        \ndef hanoi_2(n,a,b,c):\n    '''\n    Write a python function to find the minimum number of moves required to move n discs from source tower to destination tower.\n    \n    Note: The code should be written in one line only.\n    '''\n    if n == 1:\n        print('move disc from {} to {}'.format(a,b))\n    else:\n        hanoi_2(n-1,a,c,b)\n        hanoi_2(1,a,b,c)\n        hanoi_2(n-1,c,b,a)\n        \ndef hanoi_3(n,a,b,c):\n    '''\n    Write a python function to find the minimum number of moves required to move n discs from source tower to destination tower.\n    \n    Note: The code should be written in one line only.\n    '''\n    def hanoi_help(n,a,b,c):\n        if n == 1:\n            print('move disc from {} to {}'.format(a,b))\n        else:\n            hanoi_help(n-1,a,c,b)\n            hanoi_help(1,a,b,c)\n            hanoi_help(n-1,c,b,a)\n    hanoi_help(n,a,b,c)\n    \ndef hanoi_4(n,a,b,c):\n    '''\n    Write a python function to find the minimum number of moves required to move n discs from source tower to destination tower.\n    \n    Note: The code should be written in one line only.\n    '''\n    def hanoi_help(n,a,b,c,r):\n        if n == 1:\n            print('move disc from {} to {}'.format(a,b))\n        else:\n            hanoi_help(n-1,a,r,b,c)\n            hanoi_help(1,a,b,c,r)\n            hanoi_help(n-1,c,b,a,r)\n    hanoi_help(n,a,b,c,c)\n    \ndef hanoi_5(n,a,b,c):\n    '''\n    Write a python function to find the minimum number of moves required to move n discs from source tower to destination tower.\n    \n    Note: The code should be written in one line only.\n    '''\n    def hanoi_help(n,a,b,c,t):\n        if n == 1:\n            print('move disc from {} to {}'.format(a,b))\n            t.append(1)\n        else:\n            hanoi_help(n-1,a,t,b,c)\n            hanoi_help(1,a,b,c,t)\n            hanoi_help(n-1,c,b,a,t)\n            t.append(1)\n    t = []\n    hanoi_help(n,a,b,c,t)\n    return len(t)\n    \ndef hanoi_6(n,a,b,c):\n    '''\n    Write a python function to find the minimum number of moves required to move n discs from source tower to destination tower.\n    \n    Note: The code should be written in one line only.\n    '''\n    def hanoi_help(n,a,b,c,t):\n        if n == 1:\n            print('move disc from {} to {}'.format(a,b))\n            t.append(1)\n        else:\n            hanoi_help(n-1,a,t,c,b)\n            hanoi_help(1,a,b,c,t)\n            hanoi_help(n-1,c,b,a,t)\n            t.append(1)\n    t = []\n    hanoi_help(n,a,b,c,t)\n    return len(t)\n    \ndef matrix_Multiplication(A,B):\n    '''\n    Write a python function to find the product of two matrices.\n    \n    Note: The code should be written in one line only.\n    '''\n    l = le",
        "num_ids": 6
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    i=1\n    while(i<=n):\n        sum+=i*i*i\n        i+=2\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #return int((n**2)*(n/2)+((n/2)**2)*(n/2))\n    return int((n**3)/6)\n    \nprint(cube_Sum(10))\nprint(cube_Sum(20))\nprint(cube_Sum(30))\nprint(cube_Sum(40))\nprint(cube_Sum(50))\nprint(cube_Sum(60))\nprint(cube_Sum(70))\nprint(cube_Sum(80))\nprint(cube_Sum(90))\nprint(cube_Sum(100)",
        "num_ids": 132
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Code here\n    sum1 = 0\n    for i in range(1,n+1):\n        if(i%2==0):\n            sum1 += i**3\n    return sum1\n",
        "num_ids": 49
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if(i % 2 == 0):\n            sum = sum + i*i*i\n    return(sum)\n",
        "num_ids": 45
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + (i**3)\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    output = ''\n    for i in test_tup:\n        output = output + i + '-'\n    return output[:-1]\n",
        "num_ids": 35
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    print(delimiter.join(test_tup))\n",
        "num_ids": 25
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    for i in range(0,len(test_tup)):\n        for j in range(0,len(test_tup[i])):\n            test_tup[i][j] = \",\" + test_tup[i][j]\n    print(test_tup)\n",
        "num_ids": 71
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str_tup = \"\"\n    for element in test_tup:\n        str_tup += str(element) + delimiter\n    print(str_tup)\n",
        "num_ids": 43
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimeter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    #print(type(test_tup))\n    print(test_tup, end=\"\")\n",
        "num_ids": 26
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    my_list = []\n    for i in test_tup:\n        my_list.append(i)\n    return delimiter.join(my_list)\n",
        "num_ids": 41
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Cube of a number is defined as the number raised to the power of 3\n    # Average of the cube of first n numbers = (Sum of n first natural numbers) * (1/n)\n    # Average of the cube of first n numbers = (1/n) * (Sum of n first natural numbers) * (Sum of n first natural numbers)\n    # Average of the cube of first n numbers = (1/n) * (Sum of n first natural numbers) * (Sum of n first natural numbers) * (Sum of n first natural numbers)\n    # Average of the cube of first n numbers = (1/n^3) * (Sum of n first natural numbers) * (Sum of n first natural numbers) * (Sum of n first natural numbers)\n    # Average of the cube of first n numbers = (1/n)^3 * (Sum of n first natural numbers) * (Sum of n first natural numbers) * (Sum of n first natural numbers)\n    # Average of the cube of first n numbers = (1/n^2)^3 * (Sum of n first natural numbers) * (Sum of n first natural numbers) * (Sum of n first natural numbers)\n    # Average of the cube of first n numbers = (1/n)^3 * (Sum of n first natural numbers) * (Sum of n first natural numbers) * (Sum of n first natural numbers) * (Sum of n first natural numbers)\n    \n    # n = int(input(\"Enter the value of n: \"))\n    # sum_of_n = n * (n + 1) * (2 * n + 1) / 6\n    # print(f\"The sum of the first {n} natural numbers is {sum_of_n}\")\n    # average_of_cube = (sum_of_n) * (1 / n)\n    # print(f\"The average of cubes of first {n} natural numbers is {average_of_cube}\")\n",
        "num_ids": 440
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    return sum/(n*n*n)\n",
        "num_ids": 40
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    avg = sum/n\n    return avg\n",
        "num_ids": 39
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if type(n)!= int or n < 1:\n        return \"Enter a positive integer only\"\n    else:\n        return n ** 3 / n\n",
        "num_ids": 38
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n+1):\n        total = total + (i ** 3)\n    \n    return total/(n+1)\n    \n",
        "num_ids": 42
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    average_of_cubes = 0\n    for i in range(n):\n        average_of_cubes += i**3\n",
        "num_ids": 33
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i*i*i\n    print(\"The average of cubes of first {} numbers is {}\".format(n, sum/n))\n",
        "num_ids": 54
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    #computing the sum\n    total = 0\n    for i in range(1,n+1):\n        total = total + i**3\n",
        "num_ids": 38
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum//n\n",
        "num_ids": 33
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Type your code here\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n",
        "num_ids": 40
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n",
        "num_ids": 12
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n",
        "num_ids": 12
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([word[-1] for word in test_tuple])\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_tuple = ('name', 'age', 'gender')\n    return test_tuple[-1]\n",
        "num_ids": 29
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print(test_tuple[1])\n    # return tuple with only the rear elements of the strings\n",
        "num_ids": 26
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[len(test_tuple) - 1]\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = None\n    #Insert your code here.\n    #Reminder, you can use a for loop to iterate through a tuple.\n",
        "num_ids": 35
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # return len([i for i in list1 if x in i])\n    return len([i for i in list1 if x in i])\n",
        "num_ids": 35
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for element in list1:\n        if element == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if x in sublist:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n    \n    \nl1 = [[1,2,3], [4,5,6,7], [8,9,10], [4,5,6,7], [1,2,3], [4,5,6,7], [8,9,10], [4,5,6,7]]\nx = 4\nprint(count_element_in_list(l1, x))\n",
        "num_ids": 123
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for l in list1:\n        if x in l:\n            count = count+1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1: \n        if isinstance(item, list): \n            count += 1\n        elif isinstance(item, list): \n            count += 1\n        elif isinstance(item, list): \n            count += 1\n    if count > 0: \n        return 'Not a list'\n    elif x == x: \n        return 'No sublists'\n    else: \n        return 'Found'\n",
        "num_ids": 110
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if isinstance(list1[i], list): \n            count += count_element_in_list(list1[i], x) \n        if list1[i] == x: \n            count += 1\n    return count \n",
        "num_ids": 77
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n    \n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1: \n        if x in i: \n            count = count + 1\n    return count \n",
        "num_ids": 36
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for num in nums:\n        if num % 2 == 1:\n            new_list.append(num)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    print(list(filter(lambda x: x % 2!= 0, nums)))\n    # filter(function, iterable) --> filter object\n",
        "num_ids": 36
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n",
        "num_ids": 22
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # a function to filter numbers\n    def is_odd(num):\n        return num % 2 == 1\n",
        "num_ids": 27
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\nprint(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n",
        "num_ids": 74
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
        "num_ids": 46
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_list = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list\n",
        "num_ids": 42
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2, nums))\n",
        "num_ids": 19
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = list(filter(lambda n: n%2!= 0, nums))\n    return oddnumbers\n",
        "num_ids": 31
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.split('-')\n",
        "num_ids": 12
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    split_dt=dt.split('-')\n    return split_dt[2]+'-'+split_dt[1]+'-'+split_dt[0]\ndef create_usernames(names):\n    '''\n    Write a function which creates usernames from a list of names.\n    '''\n    usernames=[]\n    for name in names:\n        usernames.append(name.lower()[0]+str(len(name))+name.lower()[-1])\n    return usernames\ndef extra_char_remover(s):\n    '''\n    Write a function to remove all the special characters from a string.\n    '''\n    s_without_extra_chars=''\n    for i in s:\n        if i.isalpha() or i.isdigit() or i==' ':\n            s_without_extra_chars+=i\n    return s_without_extra_chars\ndef string_splitter(s):\n    '''\n    Write a function to split a string and add it to a list if it is not a word.\n    '''\n    list_of_words=[]\n    temp_string=''\n    for i in s:\n        if i==' ':\n            list_of_words.append(temp_string)\n            temp_string=''\n        else:\n            temp_string+=i\n    list_of_words.append(temp_string)\n    return list_of_words\ndef split_string(s):\n    '''\n    Write a function to split a string into words and add it to a list if it is not a word.\n    '''\n    list_of_words=[]\n    temp_string=''\n    for i in s:\n        if i==' ':\n            list_of_words.append(temp_string)\n            temp_string=''\n        else:\n            temp_string+=i\n    list_of_words.append(temp_string)\n    return list_of_words\ndef remove_spaces(s):\n    '''\n    Write a function to remove all the extra spaces from a string.\n    '''\n    temp_string=''\n    for i in s:\n        if i!=' ':\n            temp_string+=i\n    return temp_string\ndef count_words(s):\n    '''\n    Write a function to count the number of words present in a given string.\n    '''\n    return len(split_string(s))\ndef upper_lower_case(s):\n    '''\n    Write a function to convert all the letters of a string to lower and upper case.\n    '''\n    return s.upper()+s.lower()\ndef to_camel_case(s):\n    '''\n    Write a function to convert a given string to CamelCase.\n    '''\n    s=upper_lower_case(s)\n    s=s[0].upper()+s[1:]\n    s=s[0].lower()+s[1:]\n    return s\ndef check_sentence(s):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    s=s.split(' ')\n    i=0\n    for word in s:\n        if word==word[::-1]:\n            i+=1\n    if i==len(s):\n        return True\n    else:\n        return False\ndef palindrome(s):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    rev=''\n    for i in s:\n        rev=i+rev\n    if s==rev:\n        return True\n    else:\n        return False\ndef string_reverser(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    s=s[::-1]\n    return s\ndef get_number_of_characters_without_spaces(s):\n    '''\n    Write a function to get the number of characters excluding spaces from a given string.\n    '''\n    counter=0\n    for i in s:\n        if i!=' ':\n            counter+=1\n    return counter\ndef get_number_of_characters_with_spaces(s):\n    '''\n    Write a function to get the number of characters including spaces from a given string.\n    '''\n    counter=0\n    for i in s:\n        if i==' ':\n            counter+=1\n    return counter+1\ndef get_number_of_vowels(s):\n    '''\n    Write a function to get the number of vowels in a given string.\n    '''\n    vowels='aeiou'\n    counter=0\n    for i in s:\n        if i in vowels:\n            counter+=1\n    return counter\ndef get_number_of_consonants(s):\n    '''\n    Write a function to get the number of consonants in a given string.\n    '''\n    vowels='aeiou'\n    counter=0\n    for i in s:\n        if i not in vowels:\n            counter+=1\n    return counter\ndef get_number_of_special_characters(s):\n    '''\n    Write a function to get the number of special characters in a given string.\n    '''\n    vowels='aeiou'\n    counter=0\n    special_chars=['.','-','_']\n    for i in s:\n        if i in special_chars:\n            counter+=1\n    return counter\ndef get_number_of_digits(s):\n    '''\n    Write a function to get the number of digits in a given string.\n    '''\n    counter=0\n    for i in s:\n        if i.isdigit():\n            counter+=1\n    return counter\ndef is_string_binary(s):\n    '''\n    Write a function to check whether a given string is a binary or not.\n    '''\n    if s==s[::-1]:\n        return True\n    else:\n        return False\ndef get_number_of_words(s):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    return len(split_string(s))\ndef is_string_binary_string(s):\n    '''\n    Write a function to check whether a given string is a binary string or not.\n    '''\n    s=s.lower()\n    i=0\n    while i<len(s)-1:\n        if s[i]=='0' and s[i+1]=='1' or s[i]=='1' and s[i+1]=='0':\n            i+=1\n            continue\n        else:\n            return False\n    if s[-1]=='0' or s[-1]=='1':\n        return True\n    else:\n        return False\ndef get_number_of_lines(fname,ch='\\n'):\n    '''\n    Write a function to count the number of lines in a given file.\n    '''\n    with open(fname,'r') as f:\n        lines=f.readlines()\n    return lines.count(ch)\ndef get_number_of_lines_v2(fname,ch='\\n'):\n    '''\n    Write a function to count the number of lines in a given file.\n    '''\n    with open(fname,'r') as f:\n        return f.read().count(ch)\ndef is_leap_year(year):\n    '''\n    Write a function to check whether a given year is a leap year or not.\n    '''\n    if year%400==0:\n        return True\n    elif year%4==0 and year%100!=0:\n        return True\n    else:\n        return False\ndef get_days_of_month(month,year):\n    '''\n    Write a function to get the days in a given month of a given year.\n    '''\n    if month in [1,3,5,7,8,10,12]:\n        return 31\n    elif month in [4,6,9,11]:\n        return 30\n    elif month==2 and is_leap_year(year):\n        return 29\n    else:\n        return 28\ndef get_day_of_year(day,month,year):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = '28/04/2007'\n    # Your code goes here\n    dt = dt.split('/')\n    dt = dt[-1] + '-' + dt[1] + '-' + dt[0]\n    print(dt)\n",
        "num_ids": 65
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    new_date = date[2]+'-'+date[1]+'-'+date[0]\n    return new_date\n",
        "num_ids": 43
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = str(dt)\n    dt = re.sub(r'\\d{4}-\\d{2}-\\d{2}', r'\\3-\\1-\\2', dt)\n    return dt\n",
        "num_ids": 57
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = re.split(\"-| |:\",dt)\n    if date[1] == '01' and date[0]!= '01':\n        month = date[0]\n        year = int(date[2]) + 1\n    elif date[1] == '01' and date[0] == '01':\n        month = str(12)\n        year = int(date[2]) + 1\n    else:\n        month = str(int(date[1]) - 1)\n        year = date[2]\n",
        "num_ids": 125
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split(\"-\")\n    dt = [re.sub('[^0-9]','',i) for i in dt]\n    dt = \"\".join(dt)\n    return dt\n",
        "num_ids": 53
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #print(dt)\n    d, m, y = dt.split('-')\n    #print(d, m, y)\n    d, m = d.replace('0',''), m.replace('0','')\n    #print(d, m)\n    return f'{d}-{m}-{y}'\n    \n",
        "num_ids": 85
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match(r'\\d{4}-\\d{2}-\\d{2}',dt):\n        dt=dt.split('-')\n        return dt[2]+'-'+dt[1]+'-'+dt[0]\n    else:\n        return None\n        \n",
        "num_ids": 73
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = str(dt)\n    dt = dt[8:] + '-' + dt[5:7] + '-' + dt[0:4]\n    return dt\n",
        "num_ids": 46
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Length of array\n    n = len(my_list)\n    # Insertion sort\n    for i in range(n):\n        j = i\n        while j >= 0 and my_list[j] > my_list[j + 1]:\n            my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n            j -= 1\n    return my_list\n",
        "num_ids": 102
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = int(length/2)\n",
        "num_ids": 22
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gaps = [7, 3, 1]\n",
        "num_ids": 24
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n",
        "num_ids": 19
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n",
        "num_ids": 14
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    my_list = my_list[:]\n    gaps = [7, 3, 1]\n",
        "num_ids": 25
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length // 2\n",
        "num_ids": 19
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 114
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            current = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > current:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = current\n        gap //= 2\n",
        "num_ids": 108
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Start with a big gap, then reduce the gap\n    n = len(my_list)\n    gap = n // 2\n",
        "num_ids": 34
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(zip(test_tup1, test_tup2))\n",
        "num_ids": 21
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup = tuple()\n    for i in range(0,len(test_tup1)):\n        if(test_tup1[i] == test_tup2[i]):\n            new_tup = new_tup + (test_tup1[i],)\n    return new_tup\n",
        "num_ids": 80
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (min(test_tup1[0], test_tup2[0]), min(test_tup1[1], test_tup2[1]))\n",
        "num_ids": 43
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(min(tup1, tup2) for tup1, tup2 in zip(test_tup1, test_tup2))\nprint(and_tuples(test_tup1, test_tup2))\n",
        "num_ids": 60
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup_and_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            tup_and_tup.append(test_tup1[i] and test_tup2[i])\n        else:\n            tup_and_tup.append(test_tup1[i] or test_tup2[i])\n    return tuple(tup_and_tup)\n",
        "num_ids": 124
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(set(test_tup1).intersection(set(test_tup2)))\n",
        "num_ids": 26
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([i for i in test_tup1 if i in test_tup2])\n",
        "num_ids": 25
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([t1 & t2 for t1, t2 in zip(test_tup1, test_tup2)])\n",
        "num_ids": 34
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = -b / (2 * a) \n    y1 = -a * x1**2 + c\n    return x1, y1\n",
        "num_ids": 38
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # If a = 0, then the parabola is a line and has no directrix.\n    if a == 0:\n        return None\n    x_directrix = -(b/2/a)\n    y_directrix = (-(c/2)/(a*x_directrix**2))\n    return (x_directrix, y_directrix)\n",
        "num_ids": 87
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b**2-4*a*c)**0.5/(2*a)\n",
        "num_ids": 25
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((-b + sqrt((b**2) - 4*(a*c))) / (2*a))\n",
        "num_ids": 30
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b ** 2 - 4 * a * c\n    if d >= 0:\n        x1 = (-b + d ** 0.5) / (2 * a)\n        x2 = (-b - d ** 0.5) / (2 * a)\n        return x1, x2\n    else:\n        return None, None\n",
        "num_ids": 80
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0 and b == 0 and c == 0:\n        return None\n    d = b*b - 4*a*c\n    if d < 0:\n        return None\n    elif d == 0:\n        return -b/(2*a)\n    else:\n        return (-b-math.sqrt(d))/(2*a), (-b+math.sqrt(d))/(2*a)\n",
        "num_ids": 100
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    return (a/2)*(1+math.sqrt(1+4*b*b/a/a))\n",
        "num_ids": 34
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def parabola(x, a, b, c):\n        return (x - a)**2 / b + c\n    x = np.arange(0, 10, 0.01)\n    y = parabola(x, a, b, c)\n    plt.plot(x, y)\n    plt.axhline(0, color ='red')\n    plt.axvline(0, color ='red')\n    plt.axvline(5, color = 'green')\n    plt.axvline(7, color = 'green')\n    plt.axvline(8, color = 'green')\n    plt.axvline(9, color = 'green')\n    plt.axhline(5, color ='red')\n    plt.axhline(7, color ='red')\n    plt.axhline(9, color ='red')\n    plt.title('Parabola with a = {}, b = {} and c = {}'.format(a, b, c))\n    plt.show()\n",
        "num_ids": 257
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = symbols('x')\n    # ax^2 + bx + c = 0\n    eq = (x*(a*x**2 + b*x + c))\n    # Find the discriminant\n    D = b**2 - 4*a*c\n    if D < 0:\n        print('The parabola has no real roots.')\n    elif D == 0:\n        print('The parabola has one real root.')\n        print('The root is:', sqrt(b/2*a))\n    else:\n        print('The parabola has two real roots.')\n        print('The roots are:')\n        print(sqrt(b/2*a), '+', sqrt(b/2*a))\n        print(sqrt(b/2*a), '-', sqrt(b/2*a))\n",
        "num_ids": 201
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1_set = set(list1)\n    list2_set = set(list2)\n    return list1_set.intersection(list2_set)\n",
        "num_ids": 42
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Time: O(n + m) | Space: O(1)\n    if len(list1) > len(list2):\n        return common_element(list2, list1)\n    \n    pointer1 = 0\n    pointer2 = 0\n",
        "num_ids": 61
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # TODO: Implement me\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n    \ndef max_list(list):\n    '''\n    Write a function that takes a list and returns the maximum value of the list. The list can contain either strings, integers, or floats. If the list is empty, the function should return None.\n    '''\n    if len(list) == 0:\n        return None\n    max = list[0]\n    for element in list:\n        if element > max:\n            max = element\n    return max\n",
        "num_ids": 47
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return list1.count(list2[0]) > 0\n",
        "num_ids": 17
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < 1 or len(list2) < 1:\n        return False\n    \n    for i in list1:\n        if i in list2:\n            return True\n    \n    return False\n    \n    \ndef common_elements(list1, list2):\n    '''\n    Write a function that takes two lists and returns a new list containing only the elements that are common between the lists (without duplicates).\n    '''\n    \n    common_items = []\n    \n    for i in list1:\n        if i in list2:\n            if i not in common_items:\n                common_items.append(i)\n    \n    return common_items\n    \n    \ndef common_elements_2(list1, list2):\n    '''\n    Write a function that takes two lists and returns a new list containing only the elements that are common between the lists (without duplicates).\n    '''\n    common_items = []\n    \n    for i in list1:\n        if i in list2:\n            if i not in common_items:\n                common_items.append(i)\n    \n    return set(common_items)\n    \n    \ndef reverse_string(my_str):\n    '''\n    Write a function that reverses a string. The input string is given as an array of characters char[].\n    '''\n    return my_str[::-1]\n    \n    \ndef reverse_string_2(my_str):\n    '''\n    Write a function that reverses a string. The input string is given as an array of characters char[].\n    '''\n    r_str = ''\n    \n    for i in my_str:\n        r_str = i + r_str\n    \n    return r_str\n    \n    \ndef is_palindrome(my_str):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return my_str == my_str[::-1]\n    \n    \ndef count_char(my_str, char):\n    '''\n    Write a function that takes a string and a character and returns the number of times that character appears in the string.\n    '''\n    return my_str.count(char)\n    \n    \ndef is_anagram(my_str1, my_str2):\n    '''\n    Write a function that takes two strings and returns True if they are anagrams.\n    '''\n    return Counter(my_str1) == Counter(my_str2)\n    \n    \ndef count_vowels(my_str):\n    '''\n    Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in the string.\n    '''\n    return sum([1 for i in my_str if i in 'aeiou'])\n    \n    \ndef count_consonants(my_str):\n    '''\n    Write a function that takes a string and returns the number of consonants (anything that is not a vowel) in the string.\n    '''\n    return sum([1 for i in my_str if i in 'bcdfghjklmnpqrstvwxyz'])\n    \n    \ndef count_digits(my_str):\n    '''\n    Write a function that takes a string and returns the number of digits (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) in the string.\n    '''\n    return sum([1 for i in my_str if i in '0123456789'])\n    \n    \ndef to_snake_case(my_str):\n    '''\n    Write a function that converts an \"CamelCaseName\" to \"snake_case_name\".\n    '''\n    return ''.join(['_' + i.lower() if i.isupper() else i for i in my_str]).lstrip('_')\n    \n    \ndef generate_hashtag(s):\n    '''\n    Write a function that, given a string s (without any whitespaces), generates a hashtag (a string that begins with '#' and contains all letters in s in lowercase alternating between _ and -).\n    '''\n    \n    return '#' + ''.join([i.lower() if i == i.upper() else '-' + i.lower() for i in s])\n    \n    \ndef generate_hashtag_2(s):\n    '''\n    Write a function that, given a string s (without any whitespaces), generates a hashtag (a string that begins with '#' and contains all letters in s in lowercase alternating between _ and -).\n    '''\n    \n    return ''.join([i.lower() if i == i.upper() else '-' + i.lower() for i in s]).lstrip('-')[:140]\n    \n    \ndef count_code(my_str):\n    '''\n    Write a function that takes a string and returns the number of times that a substring \"code\" appears anywhere in the given string, except we'll accept any letter for the 'd', so \"cope\" and \"cooe\" count.\n    '''\n    return my_str.count('co')\n    \n    \ndef count_code_2(my_str):\n    '''\n    Write a function that takes a string and returns the number of times that a substring \"code\" appears anywhere in the given string, except we'll accept any letter for the 'd', so \"cope\" and \"cooe\" count.\n    '''\n    return len([i for i in range(len(my_str)) if my_str.startswith('co', i)])\n    \n    \ndef longest_word(my_str):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    return max([i for i in my_str.split(' ')], key=len)\n    \n    \ndef longest_word_2(my_str):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    return max(my_str.split(' '), key=len)\n    \n    \ndef find_longest_word(my_str):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    return max([len(i) for i in my_str.split(' ')])\n    \n    \ndef find_longest_word_2(my_str):\n    '''\n    Write a function that takes a string and returns the longest word in the string.\n    '''\n    return max([i for i in my_str.split(' ')], key=len)\n    \n    \ndef add_strings(s1, s2):\n    '''\n    Write a function that takes 2 strings and returns their sum.\n    '''\n    return int(s1) + int(s2)\n    \n    \ndef add_strings_2(s1, s2):\n    '''\n    Write a function that takes 2 strings and returns their sum.\n    '''\n    return int(s1) + int(s2)\n    \n    \ndef is_prime(n):\n    '''\n    Write a function that checks if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef is_prime_2(n):\n    '''\n    Write a function that checks if a number is prime or not.\n    '''\n    return n > 1 and all([n % i for i in range(2, int(n**0.5) + 1)])\n    \n    \ndef is_prime_3(n):\n    '''\n    Write a function that checks if a number is prime or not.\n    '''\n    return n > 1 and all([n % i for i in range(2, n//2 + 1)])\n    \n    \ndef get_sum_of_digits(n):\n    '''\n    Write a function that takes an integer and returns the sum of all the digits in the integer.\n    '''\n    return sum([int(i) for i in str(n)])\n    \n    \ndef get_sum_of_digits_2(n):\n    '''\n    Write a function that takes an integer and returns the sum of all the digits in the integer",
        "num_ids": 21
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # returns true if list1 has at least one element in common with list2\n    return len(set(list1).intersection(list2))!= 0\n",
        "num_ids": 39
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 == base2:\n        print('These bases are the same.  Are you sure?')\n    else:\n        print('The median length of the base is {}'.format((base1 + base2)/2))\n",
        "num_ids": 54
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (((base1+base2)/2)*height)\n",
        "num_ids": 17
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base = (base1+base2)/2.0\n    area = (base1+base2)/2.0 * height\n    return area\n",
        "num_ids": 36
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1+base2)/2\n    return median*height\n",
        "num_ids": 21
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (1/2)*(base1+base2)*height\n",
        "num_ids": 18
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if not (isinstance(base1, int) and isinstance(base2, int) and isinstance(height, int)):\n        return None\n    if height == 0 or (base1 + base2) <= 0:\n        return None\n",
        "num_ids": 58
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2)/2\n    return (median*height)\n",
        "num_ids": 24
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # TODO: Fill in the missing code\n    return 0\n",
        "num_ids": 17
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = False\n    for i in arr:\n        if(i < number):\n            flag = True\n    return flag\n",
        "num_ids": 31
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for item in arr:\n        if item < number:\n            return False\n    return True\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in range(len(arr)):\n        if arr[x] > number:\n            print(\"The number\", number,\"is greater than the element in position:\",x)\n        else:\n            pass\n    return None\n",
        "num_ids": 55
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = True\n    for i in arr:\n        if i > number:\n            flag = False\n            break\n    return flag\n",
        "num_ids": 33
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr.sort()\n    greater_than_number = []\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater_than_number.append(arr[i])\n    if greater_than_number:\n        return greater_than_number\n    else:\n        return -1\n",
        "num_ids": 81
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for num in arr:\n        if num > number:\n            greater = True\n    return greater\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > int(arr[0]):\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for item in arr:\n        if item < number:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_list = []\n    for i in arr:\n        if number > i:\n            greater_list.append(i)\n    print(greater_list)\n",
        "num_ids": 44
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    def one_or_more_b(text):\n        pattern = re.compile(r'ab+')\n        result = pattern.findall(text)\n        return result\n    return one_or_more_b(text)\n",
        "num_ids": 57
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # text = input(\"Enter a text: \")\n    # return bool(re.search(r'ab+',text))\n",
        "num_ids": 32
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'[a]+b+')\n    #mo = pattern.search(text)\n    #return mo is not None\n    return len(re.findall(r'[a]+b+',text)) > 0\n",
        "num_ids": 61
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    m = re.match(r'(.*)(a)(.*)', text)\n    if m is not None:\n        return m.group(2)\n",
        "num_ids": 39
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pat = re.compile(r'(.)b(.?)')\n    matches = re.finditer(pat, text)\n    return [match.group() for match in matches]\n",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b')\n    if pattern.search(text)!= None:\n        return 'Found match!'\n    else:\n        return 'Not matched!'\n",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab*', text)\n",
        "num_ids": 16
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[abb]*b')\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n",
        "num_ids": 49
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = str(text)\n    if len(text) > 0:\n        text = re.search(r\"^a.*?b{1,}$\", text)\n        if text:\n            return \"Match\"\n        else:\n            return \"No match\"\n    else:\n        return \"Empty text\"\n",
        "num_ids": 76
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab*')\n    # The * in the above regex means \"zero or more instances of ab\"\n    result = pattern.search(text)\n    return result!= None\n",
        "num_ids": 51
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\nprint(last_Digit(12))\nprint(last_Digit(10))\nprint(last_Digit(72))\n",
        "num_ids": 38
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    l_num = str(n)\n    last_num = l_num[len(l_num) - 1]\n    return last_num\n",
        "num_ids": 37
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    def fun(n) :\n        if n == 0 :\n            return 0\n        else :\n            return fun(n//10)\n    return fun(n)\nn = int(input(\"Enter any number : \"))\nprint(last_Digit(n))\n",
        "num_ids": 64
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n >= 10:\n        n = n/10\n    return n\n",
        "num_ids": 20
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    return n[-1]\n",
        "num_ids": 18
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n",
        "num_ids": 14
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n",
        "num_ids": 14
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        n = n * (-1)\n    else :\n        n = n\n    return n % 10\nprint(last_Digit(102))\n",
        "num_ids": 43
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # add all the digits and return the last digit\n    # ex: 321\n    #    3 + 2 + 1\n    #    9\n    # return the last digit\n    # ex: 9\n    # 1 + 0 = 1\n    return sum(int(i) for i in str(n))\n",
        "num_ids": 71
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x: x < 0, list1))\n    # return [i for i in list1 if i < 0]\n",
        "num_ids": 35
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            print(\"-\",i)\n",
        "num_ids": 25
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l1 = []\n    for i in list1:\n        if i < 0:\n            l1.append(i)\n    return l1\n",
        "num_ids": 37
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list=[]\n    for i in range(len(list1)):\n        if list1[i]<0:\n            neg_list.append(list1[i])\n    return neg_list\n",
        "num_ids": 52
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    res=[]\n    for i in list1:\n        if i<0:\n            res.append(i)\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x: x < 0, list1))\n",
        "num_ids": 19
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = [list1[i] for i in range(0, len(list1), 1) if list1[i] < 0]\n    print(list2)\n    \n",
        "num_ids": 45
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n    \ndef words_count(string):\n    '''\n    Write a function to return a dictionary where the keys are the words in the string \n    and the values are the counts of each word in the string.\n    '''\n    list1 = string.split()\n    dict1 = dict()\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n    \ndef unique_words(string):\n    '''\n    Write a function to return the unique words in a string.\n    '''\n    list1 = string.split()\n    list2 = set(list1)\n    return list2\n",
        "num_ids": 26
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_of_neg = []\n    for i in list1:\n        if i < 0:\n            list_of_neg.append(i)\n    return list_of_neg\n",
        "num_ids": 46
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[1::2]\n",
        "num_ids": 12
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    print('Removing ODD characters from a string: {}'.format(str1))\n    result = []\n    for i in str1:\n        if i not in result:\n            if i not in [str(x) for x in range(0,10)]:\n                result.append(i)\n    result = ''.join(result)\n    return result\n",
        "num_ids": 96
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    i = 0\n    new = ''\n    for c in str1:\n        if i % 2 == 0:\n            new += c\n        i += 1\n    return new\n",
        "num_ids": 43
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    return \"\".join(filter(lambda i: i in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', str1))\n",
        "num_ids": 52
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i not in new_str:\n            new_str += i\n    return new_str\n",
        "num_ids": 40
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    result = ''\n    for char in str1:\n        if char in '0123456789':\n            result += char\n    return result\n    \n    \n",
        "num_ids": 42
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for char in str1:\n        if char in '0123456789':\n            str2 += char\n    return str2\n",
        "num_ids": 39
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i not in '13579':\n            new_str += i\n    return new_str\n",
        "num_ids": 40
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([i for i in str1 if i%2==0])\n",
        "num_ids": 22
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0,len(test_list)-1):\n        if (test_list[i][0]==test_list[i+1][1] and test_list[i][1]==test_list[i+1][0]):\n            count = count+1\n    return count\n",
        "num_ids": 79
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i][1] == test_list[i+1][0]:\n            count += 1\n    return count\n    \n",
        "num_ids": 55
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    # max_len = len(test_list)\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "num_ids": 97
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    x_count = 0\n    y_count = 0\n    z_count = 0\n    for tup in test_list:\n        if tup[0] == tup[1]:\n            x_count += 1\n        elif tup[0] == tup[1] - 1:\n            y_count += 1\n        elif tup[0] == tup[1] + 1:\n            z_count += 1\n    return x_count + y_count + z_count\n",
        "num_ids": 118
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    tuples = []\n    count = 0\n    # set = set()\n    for i in test_list:\n        # if i[0] == i[1] and i[0] not in set:\n        if i[0] == i[1]:\n            count += 1\n        # set.add(i[0])\n        # set.add(i[1])\n    return count\n",
        "num_ids": 94
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        if isinstance(i, tuple) and len(i) == 2:\n            if i[0] == i[1]:\n                count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_list = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            tuple1 = (test_list[i], test_list[j])\n            tuple2 = (test_list[j], test_list[i])\n            if tuple1 == tuple2:\n                bidirectional_list.append(tuple1)\n    return bidirectional_list\n",
        "num_ids": 113
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    i, j = 0, 0\n    count = 0\n    while i < len(test_list):\n        if test_list[i] == test_list[j]:\n            i += 1\n            j += 1\n            count += 1\n        elif test_list[i] > test_list[j]:\n            j += 1\n        else:\n            i += 1\n    return count\n",
        "num_ids": 93
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(L))\n",
        "num_ids": 12
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n",
        "num_ids": 20
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    output = 0\n    for i in range(len(L)):\n        output += L[i]\n    return output\n",
        "num_ids": 31
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    print(int(reduce(lambda x, y: str(x) + str(y), L)))\n",
        "num_ids": 27
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n    \n",
        "num_ids": 18
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = int(L)\n    multiple = 1\n    for x in L:\n        multiple *= x\n    return multiple\n    \nprint(multiple_to_single([\"2\", \"3\", \"4\", \"5\", \"6\"]))\nprint(multiple_to_single([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]))\nprint(multiple_to_single([2,3,4,5,6]))\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9,0]))\n",
        "num_ids": 149
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    ans = \"\"\n    for i in range(len(L)):\n        if i == len(L)-1:\n            ans += L[i]\n        else:\n            ans += L[i] + \",\"\n    return ans\n",
        "num_ids": 57
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not L:\n        return None\n    elif len(L) == 1:\n        return L[0]\n    elif len(L) == 2:\n        return L[0]*10 + L[1]\n    else:\n        return L[0]*10**(len(L)-1) + multiple_to_single(L[1:])\n",
        "num_ids": 88
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = ''\n    for i in L:\n        s += str(i)\n    return int(s)\n",
        "num_ids": 29
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    list_adverb = []\n    list_index = []\n    for index, value in enumerate(text):\n        if re.search(r'(a|an|A|An)\\s+(adverb)', value, flags=re.IGNORECASE):\n            list_adverb.append(value)\n            list_index.append(index)\n    return list_adverb, list_index\n",
        "num_ids": 96
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # first, find all adverbs in the sentence\n    pattern1 = r'\\w+ly'\n    pattern2 = r'\\w+ness'\n    adverbs = re.findall(pattern1, text)\n    adverbs.extend(re.findall(pattern2, text))\n    if len(adverbs) > 0:\n        # find the positions of the adverbs in the text\n        pos = re.finditer(r'\\w+ly', text)\n        pos = list(pos)\n        pos.extend(re.finditer(r'\\w+ness', text))\n        pos = [elem.start(0) for elem in pos]\n        # combine them into a list of tuples\n        pos = list(zip(adverbs, pos))\n        print(pos)\n    else:\n        print('No adverb')\n    return pos\n",
        "num_ids": 206
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    words = text.split()\n    position = 0\n    for index, word in enumerate(words):\n        word = word.lower()\n        if word in ('no', 'now', 'here'):\n            position = index\n    return position\n",
        "num_ids": 59
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly'\n    print(re.findall(pattern,text))\n    # return ''.join([x+'\\n' for x in re.findall(pattern,text)])\n",
        "num_ids": 55
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text.split()\n    adverb = []\n    for i, word in enumerate(sentence):\n        if word[-3:] == 'ly':\n            adverb.append(i)\n    if len(adverb) > 0:\n        print(f'The first adverb is at {adverb[0]}')\n    else:\n        print('No adverb found in this sentence.')\n",
        "num_ids": 98
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    output_list = []\n    # your code here\n    for sent in nlp(text).sents:\n        for token in sent:\n            if token.text.lower() in adverbs:\n                output_list.append((token.text, token.i))\n                break\n    return output_list\n",
        "num_ids": 73
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'(?:\\b[a-z]*(?:ad[vb]?|adv|adverb|adjective))'\n    adverb_list = re.findall(pattern, text.lower())\n    if adverb_list:\n        print(f'The first adverb is: {adverb_list[0]}')\n        print(f'It occurs in the text at position {len(adverb_list[0]) + 1}')\n    else:\n        print('No adverbs in the text')\n",
        "num_ids": 126
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adv_position_list = []\n    adv_count = 0\n    text_list = text.split(' ')\n    for i in text_list:\n        #print(i)\n        if i.endswith('ly') or i.endswith('ing') or i.endswith('er'):\n            adv_count += 1\n            adv_position_list.append(text_list.index(i))\n        if adv_count > 0:\n            break\n    return adv_position_list\n",
        "num_ids": 121
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #pattern = re.compile(r'\\w+ly')\n    pattern = re.compile(r'\\w+ly')\n    result = pattern.finditer(text)\n    for m in result:\n        print (m.start(), m.end())\n",
        "num_ids": 65
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # -1 to remove the word \"the\" from the text\n    for i in range(-1, len(text)):\n        # Find the position of the first \"the\" in the text\n        if text[i] == \"the\":\n            return i\n",
        "num_ids": 61
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6*(l**2))\n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder of a given radius and height.\n    '''\n    return ((2*math.pi*(r**2))+(2*math.pi*r*h))\n    \ndef main():\n    print(surfacearea_cube(3))\n    print(surfacearea_cylinder(2,3))\n    \nif __name__=='__main__':\n    main()",
        "num_ids": 75
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    print(l*l*6)\n    \nsurfacearea_cube(2)    \n",
        "num_ids": 23
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * (l ** 2)\n    print(f\"Surface area of cube is {area}\")\n",
        "num_ids": 29
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    if type(l) == int:\n        area = 6*(l**2)\n        return area\n    else:\n        raise ValueError('l must be an integer!')\n",
        "num_ids": 48
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    print(l*l*6)\n    return l*l*6\n",
        "num_ids": 20
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # convert l to a float\n    l = float(l)\n    # find the cube root of the input\n    l = l ** (1/3)\n    # calculate the surface area\n    sa = 6 * (l ** 2)\n    return sa\n",
        "num_ids": 61
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count/len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if nums==[]:\n        return 0\n    counter=0\n    for num in nums:\n        if num>0:\n            counter+=1\n    return counter/len(nums)\n    \ndef most_frequent(str):\n    '''\n    Write a function to find the most frequent character in a string.\n    '''\n    counts={}\n    for c in str:\n        if c not in counts:\n            counts[c]=1\n        else:\n            counts[c]+=1\n    #To find the most frequent character\n    big_count=0\n    for c in counts:\n        if counts[c]>big_count:\n            big_count=counts[c]\n    for c in counts:\n        if counts[c]==big_count:\n            return c\n    \ndef frequency_sort(str):\n    '''\n    Write a function that takes in an array of unique integers and returns a \n    string of those numbers in sorted order separated by single commas.\n    '''\n    counts={}\n    for c in str:\n        if c not in counts:\n            counts[c]=1\n        else:\n            counts[c]+=1\n    #To sort the string\n    sorted_string=[]\n    for c in counts:\n        sorted_string.append(c)\n    sorted_string.sort()\n    sorted_string=''.join(sorted_string)\n    return sorted_string\n    \ndef reverse_int(number):\n    '''\n    Write a function that takes in a number and reverses it.\n    '''\n    if number<0:\n        number=number*(-1)\n    reversed_number=0\n    while number>0:\n        reversed_number=reversed_number*10+number%10\n        number=number//10\n    return reversed_number\n    \ndef is_palindrome(str):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    if str==str[::-1]:\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    for i in nums:\n        if i > 0:\n            positives += 1\n    return positives/len(nums)\n    \ndef max_list_iter(int_list):\n    '''\n    Write a function that takes a list and returns the index of the largest element in the list\n    '''\n    if int_list == []:\n        return None\n    \n    max_index = 0\n    max_num = int_list[0]\n    \n    for i in range(1, len(int_list)):\n        if int_list[i] > max_num:\n            max_index = i\n            max_num = int_list[i]\n    return max_index\n        \ndef reverse_rec(int_list):\n    '''\n    Write a function that reverses the elements in the list (in place).\n    '''\n    if len(int_list) <= 1:\n        return int_list\n    else:\n        return [int_list[-1]] + reverse_rec(int_list[:-1])\n    \ndef bin_search(target, low, high, int_list):\n    '''\n    Write a function that implements the binary search.\n    '''\n    if high < low:\n        return False\n    middle = int((high+low)/2)\n    if int_list[middle] == target:\n        return True\n    elif int_list[middle] < target:\n        return bin_search(target, middle+1, high, int_list)\n    else:\n        return bin_search(target, low, middle-1, int_list)\n        \ndef remove_duplicates(nums):\n    '''\n    Write a function that takes a list and removes all duplicate values.\n    '''\n    if len(nums) <= 1:\n        return len(nums)\n    else:\n        return [nums[0]] + remove_duplicates(nums[1:])\n        \n        \ndef remove_first(nums, target):\n    '''\n    Write a function that takes a list, and a target value.\n    It should remove the first instance of the target value in the list.\n    The function should return a list with all instances of the target value removed.\n    '''\n    if nums == []:\n        return nums\n    elif nums[0] == target:\n        return remove_first(nums[1:], target)\n    else:\n        return [nums[0]] + remove_first(nums[1:], target)\n        \ndef replace_first(nums, target, replacement):\n    '''\n    Write a function that takes a list, a target value and a replacement value.\n    It should replace all instances of the target value in the list with the replacement value.\n    It should return a list with all instances of the target value removed.\n    '''\n    if nums == []:\n        return nums\n    elif nums[0] == target:\n        return [replacement] + replace_first(nums[1:], target, replacement)\n    else:\n        return [nums[0]] + replace_first(nums[1:], target, replacement)\n        \ndef remove_all(nums, target):\n    '''\n    Write a function that takes a list, and a target value.\n    It should remove all instances of the target value in the list.\n    It should return a list with all instances of the target value removed.\n    '''\n    if nums == []:\n        return nums\n    elif nums[0] == target:\n        return remove_all(nums[1:], target)\n    else:\n        return [nums[0]] + remove_all(nums[1:], target)\n        \ndef sum_all(nums):\n    '''\n    Write a function that takes a list and returns the sum of all items in the list\n    '''\n    if nums == []:\n        return 0\n    else:\n        return nums[0] + sum_all(nums[1:])\n        \ndef max_in_list(nums):\n    '''\n    Write a function that takes a list and returns the largest value in the list\n    '''\n    if nums == []:\n        return None\n    else:\n        return max(nums)\n        \ndef length_all(nums):\n    '''\n    Write a function that takes a list and returns the length of the list\n    '''\n    if nums == []:\n        return 0\n    else:\n        return 1 + length_all(nums[1:])\n        \ndef sum_even(nums):\n    '''\n    Write a function that takes a list and returns the sum of the even valued elements in the list.\n    '''\n    if nums == []:\n        return 0\n    elif nums[0] % 2 == 0:\n        return nums[0] + sum_even(nums[1:])\n    else:\n        return sum_even(nums[1:])\n        \ndef count_even(nums):\n    '''\n    Write a function that takes a list and returns the number of even values in the list.\n    '''\n    if nums == []:\n        return 0\n    elif nums[0] % 2 == 0:\n        return 1 + count_even(nums[1:])\n    else:\n        return count_even(nums[1:])\n        \ndef count_all(nums, target):\n    '''\n    Write a function that takes a list and an item and returns the number of times that item appears in the list.\n    '''\n    if nums == []:\n        return 0\n    elif nums[0] == target:\n        return 1 + count_all(nums[1:], target)\n    else:\n        return count_all(nums[1:], target)\n        \ndef extend_list(nums, values):\n    '''\n    Write a function that takes a list and an item and adds the item to the end of the list.\n    '''\n    if len(values) > len(nums):\n        return nums + values\n    else:\n        return values + nums\n        \ndef min_in_list(nums):\n    '''\n    Write a function that takes a list and returns the minimum value in the list.\n    '''\n    if nums == []:\n        return None\n    else:\n        return min(nums)\n        \ndef min_index_in_list(nums):\n    '''\n    Write a function that takes a list and returns the index of the minimum value in the list.\n    '''\n    if nums == []:\n        return None\n    else:\n        return nums.index(min(nums))\n        \ndef make_list(n):\n    '''\n    Write a function that takes a number and returns a list of n numbers in ascending order.\n    '''\n    if n < 0:\n        return []\n    else:\n        return [0] + make_list(n-1)\n        \ndef list_ends(nums):\n    '''\n    Write a function that takes a list of numbers and returns a list of the first and last elements in the list.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        return [nums[0]] + [nums[-1]] + list_ends(nums[1:-1])\n        \ndef remove_middle(nums):\n    '''\n    Write a function that takes a list of numbers and removes the middle element from the list.\n    If the list's length is odd, return the middle element. If the list's length is even, return the middle two elements.\n    '''\n    if len(nums) % 2 == 0:\n        return [nums[len(nums)//2]] + remove_middle(nums[:len(nums)//2]) + remove_middle(nums[(len(nums)+1)//2:])\n    else:\n        return nums[:len(nums)//2] + remove_middle(nums[(len(nums)+1)//2:])\n        \ndef max_ends(nums):\n    '''\n    Write a function that takes a list of numbers and returns the maximum difference between the first and last elements in the list.\n    '''\n    return max(nums[0], nums[-1]) - min(nums[0], nums[",
        "num_ids": 28
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for x in nums:\n        if x > 0:\n            count = count + 1\n    return count/len(nums)\n",
        "num_ids": 39
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Your code here\n    nums = array('i', nums)\n    count = 0\n    for x in nums:\n        if x > 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 55
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    neg_count=0\n    pos_count=0\n    for num in nums:\n        if num>0:\n            pos_count+=1\n        elif num<0:\n            neg_count+=1\n    return float(pos_count)/len(nums)\n",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    numbers_positive=0\n    for number in nums:\n        if number >= 0:\n            numbers_positive += 1\n    return numbers_positive/len(nums)\n",
        "num_ids": 45
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_num = 0\n    negative_num = 0\n    for i in nums:\n        if i > 0:\n            positive_num += 1\n        if i < 0:\n            negative_num += 1\n    return positive_num / (positive_num + negative_num)\n    \ndef leap_year(n):\n    '''\n    Write a function to check if a year is a leap year.\n    '''\n    if n%4 == 0:\n        if n%100 == 0:\n            if n%400 == 0:\n                return True\n            return False\n        return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for i in nums:\n        if i > 0:\n            positive_count += 1\n",
        "num_ids": 31
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #print(list1)\n    list1.sort()\n    list1.reverse()\n    \n    for i in range(len(list1)):\n        if(list1[i] < 0):\n            #print(list1[i])\n            return list1[i]\n        else:\n            continue\n    #print(max(list1))\n    return None\n        \n",
        "num_ids": 92
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = None\n    for i in list1:\n        if max_num is None:\n            max_num = i\n        elif i < 0 and i > max_num:\n            max_num = i\n    if max_num == None:\n        return \"list doesn't contain any negative number\"\n    return max_num\n",
        "num_ids": 81
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    negative = [i for i in list1 if i < 0]\n    return max(negative)\n",
        "num_ids": 25
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # list1 = list(map(int, input().split()))\n    print(max([i for i in list1 if i<0]))\n",
        "num_ids": 37
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1 == []:\n        return \"No negative numbers in the list\"\n    else:\n        neg_numbers = [number for number in list1 if number < 0]\n        return max(neg_numbers)\n",
        "num_ids": 54
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n",
        "num_ids": 10
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    list1.reverse()\n    print(list1)\n    max = 0\n    for x in list1:\n        if(x < 0):\n            if(x > max):\n                max = x\n    return max\n",
        "num_ids": 61
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = [-6,8,-4,7,6,2,2,3]\n    # list1 = [1,-2,3,4,5]\n    # list1 = [1,2,3,4,5]\n    # list1 = [-6,-8,-4,-7,-6,-2,-2,-3]\n    # list1 = [-1,-2,-3,-4,-5]\n    # list1 = [-6,-8,-4,-7,-6,-2,-2,-3]\n    # list1 = [-6,-8,-4,-7,-6,-2,-2,-3,-1,-5]\n",
        "num_ids": 148
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Converting list of floats to integers to find the largest negative number\n    for i in range(0, len(list1)):\n        list1[i] = int(list1[i])\n    #initializing the largest negative number to 0\n    largest_neg = 0\n    #finding the largest negative number\n    for i in range(0, len(list1)):\n        if (list1[i] < 0 and list1[i] > largest_neg):\n            largest_neg = list1[i]\n    print(\"Largest negative number in the list is:\", largest_neg)\n",
        "num_ids": 141
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #returns the largest negative number\n    largest_neg=max(i for i in list1 if i < 0)\n    return largest_neg\n    \n",
        "num_ids": 38
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return([tup[K:] for tup in test_list])\n    # return(tuple(tup[K:] for tup in test_list))\n",
        "num_ids": 40
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        if len(tup) > K:\n            return tup[:K]\n    return []\n",
        "num_ids": 36
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_tuple_list = [elem for elem in test_list if len(elem) >= K]\n    return trimmed_tuple_list\n",
        "num_ids": 41
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(0, len(test_list)):\n        test_list[i] = tuple(test_list[i][0:K])\n",
        "num_ids": 39
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [t[K:] for t in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return([i[:K] for i in test_list])\n",
        "num_ids": 18
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # enumerate(iterable, start=0)\n    # If start is specified, it is taken as the index value from which the counter is \n    # to be started, otherwise, enumerate() defaults to 0.\n    # This function returns a tuple containing the current count and the item. \n    # This can be useful when you want to both iterate over the items and keep a \n    # count of them.\n    # enumerate(iterable, start=0)\n    # Return an enumerate object. \n    # Iterate through the given data and return (0, data[0]), (1, data[1]), (2, data[2]),...\n    # Note that start defaults to 0.\n    return tuple(test_list[i] for i in range(K) )\n",
        "num_ids": 182
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda tup: tuple(tup[:K]), test_list))\n",
        "num_ids": 25
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda t: t[:K], test_list))\n",
        "num_ids": 21
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    while K > 0:\n        if test_list[-1][-1]!= 0:\n            del test_list[-1]\n        K -= 1\n    return test_list\n",
        "num_ids": 47
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    assert type(test_tup1)==type(tup1)\n    assert type(test_tup2)==type(tup2)\n    assert len(test_tup1)==len(test_tup2)\n",
        "num_ids": 58
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n    tup3 = ()\n    for i in range(len(test_tup1)):\n        tup3 += (test_tup1[i] * test_tup2[i],)\n    print(tup3)\n",
        "num_ids": 78
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    mult_list = []\n    for i in range(len(test_tup1)):\n        mult_list.append(test_tup1[i] * test_tup2[i])\n    return tuple(mult_list)\n    \n    ",
        "num_ids": 62
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    list1 = [el*el for el in test_tup1]\n    list2 = [el*el for el in test_tup2]\n    return tuple(list1 + list2)\n",
        "num_ids": 49
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    output_tuple = ()\n    for i in range(len(test_tup1)):\n        output_tuple += (test_tup1[i] * test_tup2[i], )\n    return output_tuple\n",
        "num_ids": 59
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = ()\n    for i in range(0,len(test_tup1)):\n        new_tup += (test_tup1[i]*test_tup2[i],)\n    return new_tup\n",
        "num_ids": 61
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print([(i) * j for i,j in zip(test_tup1, test_tup2)])\n",
        "num_ids": 31
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n",
        "num_ids": 53
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    list_multiplication = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            list_multiplication.append(test_tup1[i]*test_tup2[i])\n        tup = tuple(list_multiplication)\n        return tup\n    else:\n        print('Please check the size of both tuples. They should be of same size')\n",
        "num_ids": 113
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup) \n    return c.most_common(len(lst)) \nlst = [1,2,3,4,4,5,3,3,3,3,4,2,1,2,4,5,6,7,8]\ntup = (1,2,3,4,4,5,3,3,3,3,4,2,1,2,4,5,6,7,8)\nprint(count_Occurrence(tup, lst))\n",
        "num_ids": 127
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    print(lst)\n    print(tup)\n    cnt = Counter(lst) \n    print(cnt)\n    for key, value in tup:\n        print(key, value)\n        if key in cnt:\n            print(cnt[key])\n        else:\n            print(\"0\")\n",
        "num_ids": 79
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = lst[:] # copying the list to a new list \n    count = Counter(lst) \n    for i in tup: \n        if i in lst: \n            print(\"Occurence of\", i, \"is:\", count[i]) \n        else: \n            print(\"Element is not present in the tuple\") \n    return count \n",
        "num_ids": 91
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = dict(Counter(lst)) \n    for key in d: \n        print (\"{} occurs {} times\".format(key, d[key]))\n    \ntup = tuple(input(\"Enter tuple :\"))\nlst = list(map(str, input(\"Enter list :\").split()))\ncount_Occurrence(tup,lst)\n",
        "num_ids": 86
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    return count[tup] \n",
        "num_ids": 21
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Use counter function to count the occurrence of all elements of list \n    occurence_count = Counter(lst) \n    #print(occurence_count)\n    return(occurence_count)",
        "num_ids": 52
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence_dict = dict(Counter(lst)) \n    for key, value in occurence_dict.items(): \n        occurence_dict[key] = tup.count(key) \n    return occurence_dict \n",
        "num_ids": 62
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    result = Counter(tup) \n    for i in lst: \n        if i in result: \n            print(str(i) + \" occured \"+ str(result[i]) +\" times.\") \n        else: \n            print(str(i) + \" not found\") \n",
        "num_ids": 72
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    freq = Counter(tup) \n    print (\"\\nOccurence of all elements in the given tuple\\n\") \n    for i in lst: \n        if i in freq: \n            print (i, \"=\",freq[i]) \n        else: \n            print (i,\"=0\") \n    print()\ndef count_Occurrence_with_key(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    freq = Counter(tup) \n    print (\"\\nOccurence of all elements in the given tuple\\n\") \n    for i in lst: \n        print (i,\"=\",freq[i]) \n    print()\ndef reverse_tuple(tup): \n    '''\n    Write a python function to reverse a tuple. \n    '''\n    return tup[::-1] \ndef reverse_tuple_with_key(tup): \n    '''\n    Write a python function to reverse a tuple.\n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    reverse = tup[::-1] \n    print (\"\\nThe reversed tuple is : \" + str(reverse)) \ndef sort_tuple(tup): \n    '''\n    Write a python function to sort a tuple. \n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    sorted_tup = sorted(tup) \n    print (\"\\nThe sorted tuple is : \" + str(sorted_tup)) \ndef sort_tuple_with_key(tup): \n    '''\n    Write a python function to sort a tuple.\n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    sorted_tup = sorted(tup) \n    print (\"\\nThe sorted tuple is : \" + str(sorted_tup)) \ndef unpack_tuple(tup): \n    '''\n    Write a python function to unpack a tuple.\n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    lst = list(tup) \n    print (\"\\nThe unpacked list is : \" + str(lst)) \ndef unpack_tuple_with_key(tup): \n    '''\n    Write a python function to unpack a tuple.\n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    lst = list(tup) \n    print (\"\\nThe unpacked list is : \" + str(lst)) \ndef delete_tuple_element(tup,index): \n    '''\n    Write a python function to delete a tuple element.\n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    lst = list(tup) \n    lst.pop(index) \n    tup = tuple(lst) \n    print (\"\\nThe tuple after deleting an element : \" + str(tup)) \ndef delete_tuple_element_with_key(tup,index): \n    '''\n    Write a python function to delete a tuple element.\n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    lst = list(tup) \n    lst.pop(index) \n    tup = tuple(lst) \n    print (\"\\nThe tuple after deleting an element : \" + str(tup)) \ndef concat_tuples(tup1, tup2): \n    '''\n    Write a python function to concatenate two tuples.\n    '''\n    print (\"\\nThe original tuples are : \" + str(tup1) + \" and \" + str(tup2)) \n    print (\"\\nThe concatenated tuple is : \" + str(tup1 + tup2)) \ndef concat_tuples_with_key(tup1, tup2): \n    '''\n    Write a python function to concatenate two tuples.\n    '''\n    print (\"\\nThe original tuples are : \" + str(tup1) + \" and \" + str(tup2)) \n    print (\"\\nThe concatenated tuple is : \" + str(tup1 + tup2)) \ndef find_index_of_element(tup, ele): \n    '''\n    Write a python function to find the index of a tuple element.\n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    try: \n        index = tup.index(ele) \n        print (\"\\nThe index of the element is : \" + str(index)) \n    except ValueError: \n        print (\"\\nThe element is not present in the tuple\") \ndef find_index_of_element_with_key(tup,ele): \n    '''\n    Write a python function to find the index of a tuple element.\n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    try: \n        index = tup.index(ele) \n        print (\"\\nThe index of the element is : \" + str(index)) \n    except ValueError: \n        print (\"\\nThe element is not present in the tuple\") \ndef min_max_tuple(tup): \n    '''\n    Write a python function to print the minimum and maximum elements of a tuple.\n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    print (\"\\nThe minimum and maximum of the tuple are : \" + str(min(tup)) + \" and \" + str(max(tup))) \ndef min_max_tuple_with_key(tup): \n    '''\n    Write a python function to print the minimum and maximum elements of a tuple.\n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    print (\"\\nThe minimum and maximum of the tuple are : \" + str(min(tup)) + \" and \" + str(max(tup))) \ndef count_occurence_of_element(tup,ele): \n    '''\n    Write a python function to count the occurence of an element in a tuple.\n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    print (\"\\nThe occurence of the element \" + str(ele) + \" is \" + str(tup.count(ele))) \ndef count_occurence_of_element_with_key(tup,ele): \n    '''\n    Write a python function to count the occurence of an element in a tuple.\n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    print (\"\\nThe occurence of the element \" + str(ele) + \" is \" + str(tup.count(ele))) \ndef first_occurence_of_element(tup,ele): \n    '''\n    Write a python function to print the first occurence of an element in a tuple.\n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    print (\"\\nThe first occurence of the element \" + str(ele) + \" is \" + str(tup.index(ele))) \ndef first_occurence_of_element_with_key(tup,ele): \n    '''\n    Write a python function to print the first occurence of an element in a tuple.\n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    print (\"\\nThe first occurence of the element \" + str(ele) + \" is \" + str(tup.index(ele))) \ndef last_occurence_of_element(tup,ele): \n    '''\n    Write a python function to print the last occurence of an element in a tuple.\n    '''\n    print (\"\\nThe original tuple is : \" + str(tup)) \n    print (\"\\nThe last occurence of the element \" + str(ele) + \" is \" + str",
        "num_ids": 46
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    for el in tup: \n        if el in count.keys(): \n            count[el] -= 1\n            if count[el] == 0: \n                count.pop(el)\n    print(count) \n",
        "num_ids": 65
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    results = []\n    for num in nums:\n        results.append(num ** 3)\n    return results\n",
        "num_ids": 29
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Method 1.\n    # return [x**3 for x in nums]\n    # Method 2.\n    # return list(map(lambda x: x**3, nums))\n    # Method 3.\n    return list(map(lambda x: x**3, nums))\n",
        "num_ids": 69
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(0, len(nums)):\n        nums[i] = nums[i] ** 3\n    return nums\n",
        "num_ids": 37
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubed_nums = []\n    for i in nums:\n        cubed_nums.append(i ** 3)\n    return cubed_nums\n",
        "num_ids": 43
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    return [x**3 for x in nums]\n",
        "num_ids": 17
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print([i**3 for i in nums])\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    a = 1\n    b = 0\n    temp = 0\n    sum = 0\n    while temp < n:\n        temp = a + b\n        if temp % 2 == 0:\n            sum += temp\n        b = a\n        a = temp\n    return sum\n",
        "num_ids": 64
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return 2*n**2+4*n+1\n",
        "num_ids": 16
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += sum([int(j) for j in str(i)])\n        print(total)\n    return total\n",
        "num_ids": 48
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 2\n    if n == 2:\n        return 8\n    if n == 3:\n        return 36\n    if n == 4:\n        return 256\n    if n == 5:\n        return 9984\n    if n == 6:\n        return 35160\n    if n == 7:\n        return 51456\n    if n == 8:\n        return 88816\n    if n == 9:\n        return 365560\n    if n == 10:\n        return 52734\n    if n == 11:\n        return 84310\n    if n == 12:\n        return 88224\n    if n == 13:\n        return 90516\n    if n == 14:\n        return 92560\n    if n == 15:\n        return 96634\n    if n == 16:\n        return 99840\n    if n == 17:\n        return 103424\n    if n == 18:\n        return 106080\n    if n == 19:\n        return 110720\n    if n == 20:\n        return 112784\n    if n == 21:\n        return 116480\n    if n == 22:\n        return 121630\n    if n == 23:\n        return 126784\n    if n == 24:\n        return 131410\n    if n == 25:\n        return 135220\n    if n == 26:\n        return 138392\n    if n == 27:\n        return 141530\n    if n == 28:\n        return 144680\n    if n == 29:\n        return 148820\n    if n == 30:\n        return 152040\n    if n == 31:\n        return 155200\n    if n == 32:\n        return 158560\n    if n == 33:\n        return 162290\n    if n == 34:\n        return 166080\n    if n == 35:\n        return 170360\n    if n == 36:\n        return 174490\n    if n == 37:\n        return 178600\n    if n == 38:\n        return 183040\n    if n == 39:\n        return 187380\n    if n == 40:\n        return 192080\n    if n == 41:\n        return 194820\n    if n == 42:\n        return 198360\n    if n == 43:\n        return 200960\n    if n == 44:\n        return 203580\n    if n == 45:\n        return 207620\n    if n == 46:\n        return 212060\n    if n == 47:\n        return 217500\n    if n == 48:\n        return 226480\n    if n == 49:\n        return 231620\n    if n == 50:\n        return 235780\n    if n == 51:\n        return 240220\n    if n == 52:\n        return 245670\n    if n == 53:\n        return 250300\n    if n == 54:\n        return 254960\n    if n == 55:\n        return 259610\n    if n == 56:\n        return 263860\n    if n == 57:\n        return 268090\n    if n == 58:\n        return 272340\n    if n == 59:\n        return 276890\n    if n == 60:\n        return 281280\n    if n == 61:\n        return 285770\n    if n == 62:\n        return 290180\n    if n == 63:\n        return 294580\n    if n == 64:\n        return 299580\n    if n == 65:\n        return 304180\n    if n == 66:\n        return 308720\n    if n == 67:\n        return 313350\n    if n == 68:\n        return 317200\n    if n == 69:\n        return 320700\n    if n == 70:\n        return 323840\n    if n == 71:\n        return 327910\n    if n == 72:\n        return 332460\n    if n == 73:\n        return 337090\n    if n == 74:\n        return 341740\n    if n == 75:\n        return 345790\n    if n == 76:\n        return 351220\n    if n == 77:\n        return 356080\n    if n == 78:\n        return 360180\n    if n == 79:\n        return 364580\n    if n == 80:\n        return 369210\n    if n == 81:\n        return 373170\n    if n == 82:\n        return 378110\n    if n == 83:\n        return 382360\n    if n == 84:\n        return 386840\n    if n == 85:\n        return 391260\n    if n == 86:\n        return 395490\n    if n == 87:\n        return 399130\n    if n == 88:\n        return 402880\n    if n == 89:\n        return 406790\n    if n == 90:\n        return 410710\n    if n == 91:\n        return 414550\n    if n == 92:\n        return 418540\n    if n == 93:\n        return 422420\n    if n == 94:\n        return 427100\n    if n == 95:\n        return 431450\n    if n == 96:\n        return 435460\n    if n == 97:\n        return 438670\n    if n == 98:\n        return 442940\n    if n == 99:\n        return 447090\n    if n == 100:\n        return 451540\n    return 0\n",
        "num_ids": 1284
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(n+1)//2\n",
        "num_ids": 14
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n * (n + 3) / 2\n",
        "num_ids": 14
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2*cal_sum(n-1) + cal_sum(n-2)\n",
        "num_ids": 63
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return 2 * (n-1) + 1\n",
        "num_ids": 29
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[l:] for s in str]\n",
        "num_ids": 15
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # L is the size of the strings\n    # Output should be in the form of list\n    pass\n",
        "num_ids": 26
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if (len(str) >= l):\n        return str[0:l]\n    else:\n        return str + \"-\" * (l - len(str))\n",
        "num_ids": 41
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    import sys\n    for i in range(len(str)):\n        if str[i][0] == l:\n            sys.stdout.write(str[i])\n",
        "num_ids": 43
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == []:\n        return []\n    return [str[:l], str[l:]]\n",
        "num_ids": 27
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    if(len(str)>=l):\n        print(str)\n",
        "num_ids": 22
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # print(str[l:])\n    return str[l:]\n",
        "num_ids": 19
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    print(\"\\nEXTRACT STRING\")\n    print(\"--------------------\")\n    print(\"str: \" + str)\n    print(\"l: \" + str(l))\n",
        "num_ids": 42
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[0:l] for x in str]\n",
        "num_ids": 17
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [item[l] for item in str]\n",
        "num_ids": 15
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=text1.split()\n    return \" \".join(text2)\ndef longest_word(words):\n    '''\n    Write a function that, given a list of words,\n    returns the longest word in the list. If there is more than one word\n    with the maximum length, return any one of them. If the input list is empty,\n    the function should return None\n    '''\n    longest=words[0]\n    for i in words:\n        if len(i)>len(longest):\n            longest=i\n    return longest\ndef words_longer_than(text,n):\n    '''\n    Write a function that, given a text and a number n, returns\n    the number of words in the text that have a length greater than n.\n    '''\n    count=0\n    words=text.split()\n    for i in words:\n        if len(i)>n:\n            count+=1\n    return count\ndef longest_word2(words):\n    '''\n    Use the above function to return the length of the longest word\n    in the given list. If there is more than one word with the maximum length,\n    return any one of them. If the input list is empty, the function should return None\n    '''\n    count=0\n    for i in words:\n        if len(i)>count:\n            count=len(i)\n    return count\ndef words_longer_than2(text,n):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    count=0\n    words=text.split()\n    for i in words:\n        if len(i)>n:\n            count+=1\n    return count\ndef longest_word3(words):\n    '''\n    Use the above function to return the length of the longest word\n    in the given list. If there is more than one word with the maximum length,\n    return any one of them. If the input list is empty, the function should return None\n    '''\n    return len(words[0])\ndef words_longer_than3(text,n):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    count=0\n    for i in text.split():\n        if len(i)>n:\n            count+=1\n    return count\ndef longest_word4(words):\n    '''\n    Use the above function to return the length of the longest word\n    in the given list. If there is more than one word with the maximum length,\n    return any one of them. If the input list is empty, the function should return None\n    '''\n    return max(words, key=len)\ndef words_longer_than4(text,n):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    count=0\n    for i in text.split():\n        if len(i)>n:\n            count+=1\n    return count\ndef words_longer_than5(text,n):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return len([i for i in text.split() if len(i)>n])\ndef get_longest_words(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words2(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words3(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words4(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words5(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words6(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words7(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words8(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words9(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words10(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words11(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words12(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words13(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words14(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words15(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words16(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words17(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words18(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater than n.\n    '''\n    return [i for i in text.split() if len(i)>4]\ndef get_longest_words19(text):\n    '''\n    Use the above function to return the number of words in the text\n    that have a length greater tha",
        "num_ids": 24
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace('\\n',' ')\n    text1 = re.sub(' +',' ',text1)\n    return text1\n",
        "num_ids": 37
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=''\n    for char in text1:\n        if char==' ':\n            pass\n        else:\n            text2+=char\n    return text2\n",
        "num_ids": 42
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text1)\n",
        "num_ids": 20
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result=re.sub(r'[\\s]',\"\",text1)\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=text1.split(\" \")\n    return \"\".join(text2)\n",
        "num_ids": 24
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = text1.replace(' ', '')\n    return new_text\n",
        "num_ids": 22
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.replace(' ','')\n    return text2\n",
        "num_ids": 20
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #re.sub(pattern, repl, string, count=0, flags=0)\n    #string : string to be manipulated\n    #count : optional, 0 means all\n    #flags : optional, re.I for case insensitive\n    #repl : optional, value to replace the matches\n    #pattern : optional, pattern to match. Default is None.\n    #Returns : returns the modified string.\n    text1=re.sub('\\s+','', text1)\n    return text1\ndef remove_special_chars(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    #re.sub(pattern, repl, string, count=0, flags=0)\n    #string : string to be manipulated\n    #count : optional, 0 means all\n    #flags : optional, re.I for case insensitive\n    #repl : optional, value to replace the matches\n    #pattern : optional, pattern to match. Default is None.\n    #Returns : returns the modified string.\n    text1=re.sub('[^A-Za-z0-9]+','', text1)\n    return text1\ndef replace_numbers(text1):\n    '''\n    Write a function to replace all numbers in the given string with the given text.\n    '''\n    #re.sub(pattern, repl, string, count=0, flags=0)\n    #string : string to be manipulated\n    #count : optional, 0 means all\n    #flags : optional, re.I for case insensitive\n    #repl : optional, value to replace the matches\n    #pattern : optional, pattern to match. Default is None.\n    #Returns : returns the modified string.\n    text1=re.sub('[0-9]+', 'number', text1)\n    return text1\ndef replace_numbers_with_given_text(text1):\n    '''\n    Write a function to replace all numbers in the given string with the given text.\n    '''\n    #re.sub(pattern, repl, string, count=0, flags=0)\n    #string : string to be manipulated\n    #count : optional, 0 means all\n    #flags : optional, re.I for case insensitive\n    #repl : optional, value to replace the matches\n    #pattern : optional, pattern to match. Default is None.\n    #Returns : returns the modified string.\n    text1=re.sub('[0-9]', '100', text1)\n    return text1\ndef replace_all_digits(text1):\n    '''\n    Write a function to replace all digits in the given string with the given text.\n    '''\n    #re.sub(pattern, repl, string, count=0, flags=0)\n    #string : string to be manipulated\n    #count : optional, 0 means all\n    #flags : optional, re.I for case insensitive\n    #repl : optional, value to replace the matches\n    #pattern : optional, pattern to match. Default is None.\n    #Returns : returns the modified string.\n    text1=re.sub('[0-9]', 'number', text1)\n    return text1\ndef remove_stopwords(text1):\n    '''\n    Write a function to remove all the stopwords from the given string.\n    '''\n    #re.sub(pattern, repl, string, count=0, flags=0)\n    #string : string to be manipulated\n    #count : optional, 0 means all\n    #flags : optional, re.I for case insensitive\n    #repl : optional, value to replace the matches\n    #pattern : optional, pattern to match. Default is None.\n    #Returns : returns the modified string.\n    text1=re.sub('[^\\w]+','', text1)\n    return text1\ndef remove_special_chars(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    #re.sub(pattern, repl, string, count=0, flags=0)\n    #string : string to be manipulated\n    #count : optional, 0 means all\n    #flags : optional, re.I for case insensitive\n    #repl : optional, value to replace the matches\n    #pattern : optional, pattern to match. Default is None.\n    #Returns : returns the modified string.\n    text1=re.sub('[^A-Za-z0-9]+','', text1)\n    return text1\ndef remove_chars_at_specific_location(text1, start, stop):\n    '''\n    Write a function to remove the characters from the given string at specific location.\n    '''\n    #re.sub(pattern, repl, string, count=0, flags=0)\n    #string : string to be manipulated\n    #count : optional, 0 means all\n    #flags : optional, re.I for case insensitive\n    #repl : optional, value to replace the matches\n    #pattern : optional, pattern to match. Default is None.\n    #Returns : returns the modified string.\n    text1=re.sub('^.*?('+start+').*$', '', text1)\n    text1=re.sub('^.*?('+stop+').*$', '', text1)\n    return text1\ndef remove_chars_at_specific_location_with_given_text(text1, start, stop):\n    '''\n    Write a function to remove the characters from the given string at specific location with the given text.\n    '''\n    #re.sub(pattern, repl, string, count=0, flags=0)\n    #string : string to be manipulated\n    #count : optional, 0 means all\n    #flags : optional, re.I for case insensitive\n    #repl : optional, value to replace the matches\n    #pattern : optional, pattern to match. Default is None.\n    #Returns : returns the modified string.\n    text1=re.sub('^.*?('+start+').*?('+stop+').*$', '', text1)\n    return text1\ndef remove_chars_at_specific_location_with_given_text_with_start_end(text1, start, stop):\n    '''\n    Write a function to remove the characters from the given string at specific location with the given text.\n    '''\n    #re.sub(pattern, repl, string, count=0, flags=0)\n    #string : string to be manipulated\n    #count : optional, 0 means all\n    #flags : optional, re.I for case insensitive\n    #repl : optional, value to replace the matches\n    #pattern : optional, pattern to match. Default is None.\n    #Returns : returns the modified string.\n    text1=re.sub('^.*?('+start+').*?('+stop+').*$', '', text1)\n    return text1\ndef remove_chars_at_specific_location_with_given_text_with_start_end_with_number(text1, start, stop):\n    '''\n    Write a function to remove the characters from the given string at specific location with the given text.\n    '''\n    #re.sub(pattern, repl, string, count=0, flags=0)\n    #string : string to be manipulated\n    #count : optional, 0 means all\n    #flags : optional, re.I for case insensitive\n    #repl : optional, value to replace the matches\n    #pattern : optional, pattern to match. Default is None.\n    #Returns : returns the modified string.\n    text1=re.sub('^.*?('+start+').*?('+stop+').*?('+start+').*?('+stop+').*$', '', text1)\n    return text1\ndef remove_chars_at_specific_location_with_given_text_with_start_end_with_number_end(text1, start, stop):\n    '''\n    Write a function to remove the characters from the given string at specific location with the given text.\n    '''\n    #re.sub(pattern, repl, string, count=0, flags=0)\n    #string : string to be manipulated\n    #count : optional, 0 means all\n    #flags : optional, re.I for case insensitive\n    #repl : optional, value to replace the matches\n    #pattern : optional, pattern to match. Default is None.\n    #Returns : returns the modified string.\n    text1=re.sub('^.*?('+start+').*?('+stop+').*?('+start+').*?('+stop+').*?('+stop+').*$', ",
        "num_ids": 140
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # text ='  Hello World   '\n    # text = 'Hello World'\n    # text = 'Hello World'\n    # text ='   Hello World     '\n    # text ='  hello world   '\n    # text = 'hello world'\n    # text = 'Hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text ='  hello world   '\n    # text = 'hello world'\n    # text = 'Hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = 'hello world'\n    # text = ",
        "num_ids": 2013
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        loss_amount=actual_cost-sale_amount\n        return loss_amount\n    else:\n        return 0\n",
        "num_ids": 40
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        loss = actual_cost - sale_amount\n    else:\n        loss = 0\n    return loss\n    \n    \n    \ndef employee_check(emp_name):\n    '''\n    Write a function that checks if employee name is present in employees or not.\n    '''\n    employees = {\"John\":1, \"Jack\":2, \"Jill\":3, \"James\":4, \"Emma\":5}\n    if emp_name in employees.keys():\n        print(True)\n    else:\n        print(False)\n        \n        \n        \ndef employee_check_2(emp_name):\n    '''\n    Write a function that checks if employee name is present in employees or not.\n    '''\n    employees = {\"John\":1, \"Jack\":2, \"Jill\":3, \"James\":4, \"Emma\":5}\n    for i in employees.keys():\n        if i==emp_name:\n            print(True)\n            break\n        else:\n            print(False)\n            break\n            \n            \n            \ndef employee_check_3(emp_name):\n    '''\n    Write a function that checks if employee name is present in employees or not.\n    '''\n    employees = {\"John\":1, \"Jack\":2, \"Jill\":3, \"James\":4, \"Emma\":5}\n    for i in employees.keys():\n        if i==emp_name:\n            print(True)\n            return\n        else:\n            print(False)\n            return\n            \n            \n            \ndef check_name(emp_name):\n    '''\n    Write a function that checks if employee name is present in employees or not.\n    '''\n    employees = {\"John\":1, \"Jack\":2, \"Jill\":3, \"James\":4, \"Emma\":5}\n    for i in employees.keys():\n        if i==emp_name:\n            print(True)\n            return\n        else:\n            print(False)\n            return\n            \n            \n            \ndef check_name_2(emp_name):\n    '''\n    Write a function that checks if employee name is present in employees or not.\n    '''\n    employees = {\"John\":1, \"Jack\":2, \"Jill\":3, \"James\":4, \"Emma\":5}\n    for i in employees.keys():\n        if i==emp_name:\n            print(True)\n            break\n        else:\n            print(False)\n            break\n            \n            \n            \ndef check_name_3(emp_name):\n    '''\n    Write a function that checks if employee name is present in employees or not.\n    '''\n    employees = {\"John\":1, \"Jack\":2, \"Jill\":3, \"James\":4, \"Emma\":5}\n    for i in employees.keys():\n        if i==emp_name:\n            print(True)\n            return\n        else:\n            print(False)\n            return\n            \n            \n            \ndef check_name_4(emp_name):\n    '''\n    Write a function that checks if employee name is present in employees or not.\n    '''\n    employees = {\"John\":1, \"Jack\":2, \"Jill\":3, \"James\":4, \"Emma\":5}\n    for i in employees.keys():\n        if i==emp_name:\n            print(True)\n            return i\n        else:\n            print(False)\n            return\n            \n            \n            \ndef employee_salary(emp_name):\n    '''\n    Write a function that takes in employee name and returns his salary.\n    '''\n    employees = {\"John\":10000, \"Jack\":20000, \"Jill\":30000, \"James\":40000, \"Emma\":50000}\n    for i in employees.keys():\n        if i==emp_name:\n            print(employees[i])\n            return employees[i]\n        else:\n            print(False)\n            return\n            \n            \n            \ndef employee_salary_2(emp_name):\n    '''\n    Write a function that takes in employee name and returns his salary.\n    '''\n    employees = {\"John\":10000, \"Jack\":20000, \"Jill\":30000, \"James\":40000, \"Emma\":50000}\n    for i in employees.keys():\n        if i==emp_name:\n            print(employees[i])\n            return employees[i]\n        else:\n            print(False)\n            return\n            \n            \n            \ndef employee_salary_3(emp_name):\n    '''\n    Write a function that takes in employee name and returns his salary.\n    '''\n    employees = {\"John\":10000, \"Jack\":20000, \"Jill\":30000, \"James\":40000, \"Emma\":50000}\n    for i in employees.keys():\n        if i==emp_name:\n            return employees[i]\n        else:\n            print(False)\n            return\n            \n            \n            \ndef employee_salary_4(emp_name):\n    '''\n    Write a function that takes in employee name and returns his salary.\n    '''\n    employees = {\"John\":10000, \"Jack\":20000, \"Jill\":30000, \"James\":40000, \"Emma\":50000}\n    for i in employees.keys():\n        if i==emp_name:\n            return i\n        else:\n            print(False)\n            return\n            \n            \n            \ndef check_salary(emp_name, sal_amount):\n    '''\n    Write a function that takes in employee name and salary amount. If the salary is greater than or equal to 25000 return true else false.\n    '''\n    employees = {\"John\":10000, \"Jack\":20000, \"Jill\":30000, \"James\":40000, \"Emma\":50000}\n    if employees[emp_name]>=25000:\n        print(True)\n    else:\n        print(False)\n        \n        \n        \ndef check_salary_2(emp_name, sal_amount):\n    '''\n    Write a function that takes in employee name and salary amount. If the salary is greater than or equal to 25000 return true else false.\n    '''\n    employees = {\"John\":10000, \"Jack\":20000, \"Jill\":30000, \"James\":40000, \"Emma\":50000}\n    if employees[emp_name]>=sal_amount:\n        print(True)\n    else:\n        print(False)\n        \n        \n        \ndef check_salary_3(emp_name, sal_amount):\n    '''\n    Write a function that takes in employee name and salary amount. If the salary is greater than or equal to 25000 return true else false.\n    '''\n    employees = {\"John\":10000, \"Jack\":20000, \"Jill\":30000, \"James\":40000, \"Emma\":50000}\n    if employees[emp_name]>sal_amount:\n        print(True)\n    else:\n        print(False)\n        \n        \n        \ndef check_salary_4(emp_name, sal_amount):\n    '''\n    Write a function that takes in employee name and salary amount. If the salary is greater than or equal to 25000 return true else false.\n    '''\n    employees = {\"John\":10000, \"Jack\":20000, \"Jill\":30000, \"James\":40000, \"Emma\":50000}\n    if employees[emp_name]>=sal_amount:\n        return True\n    else:\n        return False\n        \n        \n        \ndef check_salary_5(emp_name, sal_amount):\n    '''\n    Write a function that takes in employee name and salary amount. If the salary is greater than or equal to 25000 return true else false.\n    '''\n    employees = {\"John\":10000, \"Jack\":20000, \"Jill\":30000, \"James\":40000, \"Emma\":50000}\n    if employees[emp_name]>=sal_amount:\n        print(True)\n    else:\n        print(False)\n        \n        \n        \ndef check_salary_6(emp_name, sal_amount):\n    '''\n    Write a function that takes in employee name and salary amount. If the salary is greater than or equal to 25000 return true else false.\n    '''\n    employees = {\"John\":1000",
        "num_ids": 10
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss < 0:\n        return 0\n    else:\n        return loss\n",
        "num_ids": 32
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n        ",
        "num_ids": 32
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #return (sale_amount - actual_cost) if (sale_amount > actual_cost) else 0\n    if (sale_amount > actual_cost):\n        return (sale_amount - actual_cost)\n    else:\n        return 0\n    \n    \ndef loss_amount_list(items_list):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0 for each item in the list.\n    '''\n    total_loss = 0\n    for item in items_list:\n        sale_amount = item[1]\n        actual_cost = item[2]\n        total_loss = total_loss + loss_amount(actual_cost,sale_amount)\n    return total_loss\n",
        "num_ids": 66
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if(actual_cost < sale_amount):\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "num_ids": 32
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    return 0\n    \ndef cal_discount(sale_amount):\n    '''\n    Write a function that returns discount if sale amount is greater than 1000 else 0.\n    '''\n    if sale_amount > 1000:\n        return sale_amount * 0.1\n    return 0\n",
        "num_ids": 25
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    sqrt = int(math.sqrt(n))\n    for i in range(1, n + 1) : \n        if (n % i == 0) : \n            if (i <= sqrt) : \n                if (i % 2 == 0) : \n                    sum += i \n            else : \n                if (n % i == 0) : \n                    if (i % 2 == 0) : \n                        sum += i \n    return sum \ndef triangleNumber(n) : \n    '''\n    Write a python function to find the triangle number in a given range.\n    '''\n    sum = 0\n    for i in range(1, n + 1) : \n        sum += i \n    return sum \ndef numberofDivisors(n) : \n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    if n == 1 : \n        return 1\n    count = 1\n    sum = 1\n    sqrt = int(math.sqrt(n))\n    for i in range(2, n + 1) : \n        if (n % i == 0) : \n            if (i <= sqrt) : \n                if (i == n / i) : \n                    count += 1\n                else : \n                    count += 2\n            else : \n                count += 1\n    return count \ndef sumofDivisors(n) : \n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    if n == 1 : \n        return 1\n    count = 1\n    sum = 1\n    sqrt = int(math.sqrt(n))\n    for i in range(2, n + 1) : \n        if (n % i == 0) : \n            if (i <= sqrt) : \n                if (i == n / i) : \n                    count += 1\n                else : \n                    count += 2\n            else : \n                count += 1\n    return sum \ndef euler(n) : \n    '''\n    Write a python function to find the value of euler for a given number.\n    '''\n    sum = 0\n    sqrt = int(math.sqrt(n))\n    for i in range(1, n + 1) : \n        if (i <= sqrt) : \n            if (i % 2 == 0) : \n                sum += 1\n                n = n / i \n            else : \n                sum -= 1\n                n = n / i \n        else : \n            if (n % 2 == 0) : \n                sum += 1\n                n = n / i \n            else : \n                sum -= 1\n                n = n / i \n    return sum \ndef sumofDigits(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    sum = 0\n    n = abs(n)\n    while (n) : \n        sum += n % 10\n        n = int(n / 10)\n    return sum \ndef sumofDigits2(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    sum = 0\n    while (n) : \n        sum += n % 10\n        n = int(n / 10)\n    return sum \ndef sumofDigits3(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum([int(x) for x in str(n)]) \ndef largestDigit(n) : \n    '''\n    Write a python function to find the largest digit of a number.\n    '''\n    largest = 0\n    n = abs(n)\n    while (n) : \n        largest = largest * 10 + n % 10\n        n = int(n / 10)\n    return largest \ndef largestDigit2(n) : \n    '''\n    Write a python function to find the largest digit of a number.\n    '''\n    return int(str(n).strip('0')[-1]) \ndef sumofNumbers(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    sum = 0\n    while (n) : \n        sum = sum + n % 10\n        n = n / 10\n    return sum \ndef sumofNumbers2(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum([int(x) for x in str(n)]) \ndef sumofNumbers3(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum(list(map(int, str(n)))) \ndef countDigits(n) : \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n)) \ndef sumofNumbers4(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    n = str(n)\n    sum = 0\n    for i in n : \n        sum += int(i)\n    return sum \ndef countDigits2(n) : \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    count = 0\n    while (n) : \n        count += 1\n        n = int(n / 10)\n    return count \ndef sumofNumbers5(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    sum = 0\n    while (n) : \n        sum += n % 10\n        n = int(n / 10)\n    return sum \ndef countDigits3(n) : \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n)) \ndef sumofNumbers6(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    n = str(n)\n    return sum([int(i) for i in n]) \ndef sumofNumbers7(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum(list(map(int, str(n)))) \ndef sumofNumbers8(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    n = str(n)\n    return sum(map(int, n)) \ndef sumofNumbers9(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum(int(i) for i in str(n)) \ndef sumofNumbers10(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    return sum(int(x) for x in str(n)) \ndef countDigits4(n) : \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    n = str(n)\n    return len(n) \ndef countDigits5(n) : \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n)) \ndef countDigits6(n) : \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n)) \ndef countDigits7(n) : \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n)) \ndef countDigits8(n) : \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n)) \ndef countDigits9(n) : \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return len(str(n)",
        "num_ids": 10
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1,int(n/2)+1):\n        if n % i == 0:\n            s += i\n    return s \n    \ndef sumofFactors_re(n):\n    return sum([i for i in range(1,int(n/2)+1) if n%i == 0 ])\n    \n    \ndef sieve_of_eratosthenes(n):\n    '''\n    This function implements the Sieve of Eratosthenes.\n    It returns a list of prime numbers which are less than or equal to n.\n    '''\n    if n < 2:\n        return []\n    prime_list = [2]\n    limit = int(n/2) + 1\n    temp_list = [True] * (limit)\n    temp_list[0] = False\n    temp_list[1] = False\n    for i in range(2,int(math.sqrt(n))+1):\n        j = 2\n        while i * j < limit:\n            temp_list[i*j] = False\n            j += 1\n    for i in range(limit):\n        if temp_list[i]:\n            prime_list.append(2*i + 1)\n    return prime_list \n    \ndef prime_factors(n):\n    '''\n    Write a Python function to find the prime factors of a number.\n    '''\n    primelist = []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            primelist.append(i)\n            n = int(n/i)\n    primelist.append(n)\n    return primelist\n    \ndef prime_factors_v2(n):\n    '''\n    Write a Python function to find the prime factors of a number.\n    '''\n    primelist = []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            primelist.append(i)\n    return primelist\n    \n    \ndef prime_factors_v3(n):\n    '''\n    Write a Python function to find the prime factors of a number.\n    '''\n    primelist = []\n    for i in range(2,n+1):\n        if n%i == 0:\n            primelist.append(i)\n    return primelist\n    \n    \ndef prime_factors_v4(n):\n    '''\n    Write a Python function to find the prime factors of a number.\n    '''\n    primelist = []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            primelist.append(i)\n            while n % i == 0:\n                n = int(n/i)\n    primelist.append(n)\n    return primelist\n    \n    \ndef prime_factors_v5(n):\n    '''\n    Write a Python function to find the prime factors of a number.\n    '''\n    primelist = []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            primelist.append(i)\n            n = int(n/i)\n    return primelist\n    \n    \ndef prime_factors_v6(n):\n    '''\n    Write a Python function to find the prime factors of a number.\n    '''\n    primelist = []\n    for i in range(2,int(n)+1):\n        if n%i == 0:\n            primelist.append(i)\n    return primelist\n    \n    \ndef prime_factors_v7(n):\n    '''\n    Write a Python function to find the prime factors of a number.\n    '''\n    primelist = []\n    for i in range(2,n+1):\n        if n%i == 0:\n            primelist.append(i)\n    return primelist\n    \n    \ndef prime_factors_v8(n):\n    '''\n    Write a Python function to find the prime factors of a number.\n    '''\n    primelist = []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            primelist.append(i)\n    return primelist\n    \n    \ndef prime_factors_v9(n):\n    '''\n    Write a Python function to find the prime factors of a number.\n    '''\n    primelist = []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            primelist.append(i)\n    return primelist\n    \n    \ndef prime_factors_v10(n):\n    '''\n    Write a Python function to find the prime factors of a number.\n    '''\n    primelist = []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            primelist.append(i)\n    return primelist\n    \n    \ndef prime_factors_v11(n):\n    '''\n    Write a Python function to find the prime factors of a number.\n    '''\n    primelist = []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            primelist.append(i)\n    return primelist\n    \n    \ndef prime_factors_v12(n):\n    '''\n    Write a Python function to find the prime factors of a number.\n    '''\n    primelist = []\n    for i in range(2,int(n)+1):\n        if n%i == 0:\n            primelist.append(i)\n    return primelist\n    \n    \ndef isprime(n):\n    '''\n    Write a Python function to check whether a number is prime or not.\n    '''\n    for i in range(2,int(n/2)+1):\n        if n%i == 0:\n            return False\n    return True\n    \n    \ndef isprime_v2(n):\n    '''\n    Write a Python function to check whether a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\n    \n    \ndef isprime_v3(n):\n    '''\n    Write a Python function to check whether a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,int(n/2)+1):\n        if n%i == 0:\n            return False\n    return True\n    \n    \ndef isprime_v4(n):\n    '''\n    Write a Python function to check whether a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,int(n/2)+1):\n        if n%i == 0:\n            return False\n    return True\n    \n    \ndef isprime_v5(n):\n    '''\n    Write a Python function to check whether a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,int(n/2)+1):\n        if n%i == 0:\n            return False\n    return True\n    \n    \ndef isprime_v6(n):\n    '''\n    Write a Python function to check whether a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,int(n/2)+1):\n        if n%i == 0:\n            return False\n    return True\n    \n    \ndef isprime_v7(n):\n    '''\n    Write a Python function to check whether a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,int(n/2)+1):\n        if n%i == 0:\n            return False\n    return True\n    \n    \ndef isprime_v8(n):\n    '''\n    Write a Python function to check whether a number is prime or not.\n    '''\n    if n < 2:\n        return False",
        "num_ids": 12
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum([i for i in range(1,n) if n%i==0 and i%2==0])\n    # return n*(n+1)/2\n",
        "num_ids": 42
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1) : \n        if (n % i == 0) : \n            if (i % 2 == 0) : \n                sum = sum + i \n    return sum \n    \ndef generatePrimeFactors(n) : \n    '''\n    Write a python function to generate all the prime factors of a number. \n    '''\n    primeFactors = []\n    count = 0\n    for i in range(2, n + 1) : \n        if (n % i == 0) : \n            if (isPrime(i)) : \n                count = count + 1\n                primeFactors.append(i)\n    return primeFactors \n",
        "num_ids": 76
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    a=0\n    for i in range(2,(n//2)+1):\n        if(n%i==0):\n            a+=i\n    return a\ndef triangle(n) :\n    '''\n    Write a python function to find if a number is a triangle number.\n    '''\n    a=0\n    b=0\n    for i in range(1,(n//2)+1):\n        if(n%i==0):\n            a+=i\n    for i in range(1,(n//2)+1):\n        if(n-i==a):\n            b+=i\n    if(b==n):\n        return True\n    else:\n        return False\ndef countDivisors(n) :\n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    a=0\n    for i in range(1,(n//2)+1):\n        if(n%i==0):\n            a+=i\n    return a\ndef prime(n):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    a=0\n    for i in range(2,n):\n        if(n%i==0):\n            a=1\n            break\n    if(a==0):\n        return True\n    else:\n        return False\ndef odd(n):\n    '''\n    Write a python function to find if a number is odd.\n    '''\n    if(n%2==0):\n        return False\n    else:\n        return True\ndef primeFactors(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    a=[]\n    for i in range(2,n+1):\n        if(n%i==0):\n            if(prime(i)):\n                a.append(i)\n    return a\ndef isPrime(n):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if(n<=1):\n        return False\n    else:\n        for i in range(2,n):\n            if(n%i==0):\n                return False\n        return True\ndef palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome.\n    '''\n    a=n\n    b=0\n    while(n>0):\n        b=(b*10)+n%10\n        n//=10\n    if(a==b):\n        return True\n    else:\n        return False\ndef palindrome_string(s):\n    '''\n    Write a python function to check if a string is palindrome.\n    '''\n    a=0\n    b=0\n    for i in range(len(s)):\n        a=(a*10)+s[i]\n        b=b*10+s[len(s)-i-1]\n    if(a==b):\n        return True\n    else:\n        return False\ndef armstrong(n):\n    '''\n    Write a python function to check if a number is an armstrong number.\n    '''\n    a=0\n    for i in range(len(str(n))):\n        a+=(int(str(n)[i])**3)\n    if(a==n):\n        return True\n    else:\n        return False\ndef hcf(a,b):\n    '''\n    Write a python function to find the hcf of two numbers.\n    '''\n    if(b==0):\n        return a\n    else:\n        return hcf(b,a%b)\ndef lcm(a,b):\n    '''\n    Write a python function to find the lcm of two numbers.\n    '''\n    return a*b/hcf(a,b)\ndef gcd(a,b):\n    '''\n    Write a python function to find the gcd of two numbers.\n    '''\n    while(b!=0):\n        temp=a%b\n        a=b\n        b=temp\n    return a\ndef exponent(n):\n    '''\n    Write a python function to find the exponent of a number.\n    '''\n    a=1\n    for i in range(1,n+1):\n        a*=i\n    return a\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if(n==0):\n        return 1\n    else:\n        return n*factorial(n-1)\ndef fibonacci(n):\n    '''\n    Write a python function to find the fibonacci of a number.\n    '''\n    if(n==0):\n        return 0\n    elif(n==1):\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef sigma(n,term=0):\n    '''\n    Write a python function to find the sum of the first n terms of a sequence.\n    '''\n    if(term==0):\n        return n*(n+1)/2\n    else:\n        return (n**2+n)/2+(sigma(n+1,term-1))\ndef harmonic(n):\n    '''\n    Write a python function to find the harmonic of a number.\n    '''\n    a=0\n    for i in range(1,n+1):\n        a+=1/i\n    return a\ndef is_perfect(n):\n    '''\n    Write a python function to find if a number is perfect.\n    '''\n    if(n<=1):\n        return False\n    else:\n        a=0\n        for i in range(1,n):\n            if(n%i==0):\n                a+=i\n        if(a==n):\n            return True\n        else:\n            return False\ndef is_abundant(n):\n    '''\n    Write a python function to find if a number is abundant.\n    '''\n    if(n<=12):\n        return False\n    else:\n        a=0\n        for i in range(1,(n//2)+1):\n            if(n%i==0):\n                a+=i\n        if(a>n):\n            return True\n        else:\n            return False\ndef is_deficient(n):\n    '''\n    Write a python function to find if a number is deficient.\n    '''\n    if(n<=12):\n        return False\n    else:\n        a=0\n        for i in range(1,(n//2)+1):\n            if(n%i==0):\n                a+=i\n        if(a<n):\n            return True\n        else:\n            return False\ndef is_amicable(n):\n    '''\n    Write a python function to find if a number is amicable.\n    '''\n    if(n<=12):\n        return False\n    else:\n        a=0\n        b=0\n        for i in range(1,(n//2)+1):\n            if(n%i==0):\n                a+=i\n        for i in range(1,(n//2)+1):\n            if(n-i==a):\n                b+=i\n        if(b==n and a==b):\n            return True\n        else:\n            return False\ndef quadratic_formula(a,b,c):\n    '''\n    Write a python function to find the solutions of quadratic equation.\n    '''\n    d=b**2-4*a*c\n    if(d<0):\n        return []\n    elif(d==0):\n        return [-b/(2*a)]\n    else:\n        return [(d**0.5-b)/(2*a),(d**0.5+b)/(2*a)]\ndef circular_prime(n):\n    '''\n    Write a python function to find if a number is circular prime.\n    '''\n    a=0\n    for i in range(1,(n//2)+1):\n        if(n%i==0):\n            a+=i\n    if(prime(a)):\n        return True\n    else:\n        return False\ndef xyz_triplet(a,b,c):\n    '''\n    Write a python function to find the xyz triplet of a number.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))):\n        if n % i == 0:\n            sum += i\n            if(i*i!= n):\n                sum += n/i\n    return sum\n    \ndef sumofFactors1(n):\n    return sum([i for i in range(1,n) if n%i == 0 and i%2 == 0])\n",
        "num_ids": 102
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # for i in range(1,int(math.sqrt(n))): \n    #     if n % i == 0 : \n    #         sum += i \n    #         if (i!= n / i) and (n/i!= n) : \n    #             sum += n/i \n    # return sum \n",
        "num_ids": 83
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # To store the sum of the factors\n    sum = 0\n    # Iterate from 2 to n / 2\n    for i in range(2, int(math.sqrt(n))+1):\n        # If num is divisible by i, then increase sum by i\n        if n % i == 0:\n            sum += i\n            # If i is a factor of n, then add another i\n            if i * i!= n:\n                sum += n / i\n    # Return the sum of the factors\n    return int(sum)\n    \nprint(sumofFactors(100))\n",
        "num_ids": 139
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Iterate from 2 to n / 2, if n is \n    # divisible by any number\n    # then print that number\n    # and also print(\"Sum of the factors = \", sum)\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1): \n        if (n % i == 0): \n            if (n / i == i): \n                sum = sum + i \n            else: \n                sum = sum + (i + n / i) \n    return(sum) \ndef superReducedString(S): \n    '''\n    Write a function to find out whether a given \n    string is a super reduced string or not.\n    '''\n    l = list(S)\n    l1 = []\n    while True:\n        for i in range(0,len(l)-1):\n            if l[i] == l[i+1]:\n                l1.append(l[i])\n                l1.append(l[i+1])\n                l = l[:i] + l[i+2:]\n                break\n        if len(l) == 0:\n            break\n    if len(l) == 0:\n        return (\"Given string is a super reduced string\")\n    else:\n        return (\"Given string is not a super reduced string\")\ndef isTriangleNumber(n): \n    '''\n    Write a function to find whether a given \n    number is a triangle number or not.\n    '''\n    if (n <= 0): \n        return False\n    i = 1\n    sum = 0\n    while(i * (i + 1) / 2 <= n): \n        sum = sum + i \n        i = i + 1\n    return (sum + 1 == n) \ndef isPentagonalNumber(n): \n    '''\n    Write a function to check whether a given \n    number is a pentagonal number or not.\n    '''\n    if (n < 0): \n        return False\n    elif (n == 0): \n        return False\n    x = (1 + math.sqrt(24 * n + 1)) / 6\n    if (x == int(x)): \n        return True\n    else: \n        return False\ndef isHexagonalNumber(n): \n    '''\n    Write a function to check whether a given \n    number is a hexagonal number or not.\n    '''\n    if (n < 0): \n        return False\n    elif (n == 0): \n        return False\n    x = (1 + math.sqrt(8 * n + 1)) / 4\n    if (x == int(x)): \n        return True\n    else: \n        return False\ndef isHeptagonalNumber(n): \n    '''\n    Write a function to check whether a given \n    number is a heptagonal number or not.\n    '''\n    if (n < 0): \n        return False\n    elif (n == 0): \n        return False\n    x = (1 + math.sqrt(40 * n + 9)) / 10\n    if (x == int(x)): \n        return True\n    else: \n        return False\ndef isOctagonalNumber(n): \n    '''\n    Write a function to check whether a given \n    number is a octagonal number or not.\n    '''\n    if (n < 0): \n        return False\n    elif (n == 0): \n        return False\n    x = (1 + math.sqrt(3 * n + 1)) / 3\n    if (x == int(x)): \n        return True\n    else: \n        return False\ndef isEquilateralTriangle(s1, s2, s3): \n    '''\n    Write a function to check whether a given \n    triangle is equilateral or not.\n    '''\n    if (s1 == s2 == s3): \n        return True\n    else: \n        return False\ndef isIsocelesTriangle(s1, s2, s3): \n    '''\n    Write a function to check whether a given \n    triangle is isoceles or not.\n    '''\n    if ((s1 == s2) and (s2!= s3)) or ((s1 == s3) and (s2!= s3)) or ((s2 == s3) and (s1!= s3)): \n        return True\n    else: \n        return False\ndef isScaleneTriangle(s1, s2, s3): \n    '''\n    Write a function to check whether a given \n    triangle is scalene or not.\n    '''\n    if ((s1!= s2) and (s1!= s3) and (s2!= s3)): \n        return True\n    else: \n        return False\ndef isRightTriangle(s1, s2, s3): \n    '''\n    Write a function to check whether a given \n    triangle is right angled or not.\n    '''\n    if ((s1 ** 2 + s2 ** 2) == s3 ** 2) or ((s2 ** 2 + s3 ** 2) == s1 ** 2) or ((s1 ** 2 + s3 ** 2) == s2 ** 2): \n        return True\n    else: \n        return False\ndef findTriangleType(s1, s2, s3): \n    '''\n    Write a function to find the type of \n    a triangle given the lengths of its \n    sides as input.\n    '''\n    if (s1 == s2 == s3): \n        return(\"Equilateral Triangle\")\n    elif ((s1 == s2) and (s2!= s3)) or ((s1 == s3) and (s2!= s3)) or ((s2 == s3) and (s1!= s3)): \n        return(\"Isosceles Triangle\")\n    elif ((s1!= s2) and (s1!= s3) and (s2!= s3)): \n        return(\"Scalene Triangle\")\n    elif (s1 ** 2 + s2 ** 2 == s3 ** 2): \n        return(\"Right Angle Triangle\")\ndef findSideLength(x, y, z): \n    '''\n    Write a function to find the length of \n    the missing side of a given triangle \n    if the length of the first two sides \n    can be determined.\n    '''\n    a = math.sqrt((x ** 2) + (y ** 2))\n    b = math.sqrt((y ** 2) + (z ** 2))\n    c = math.sqrt((x ** 2) + (z ** 2))\n    return(a, b, c)\ndef findMissingLength(a, b, c): \n    '''\n    Write a function to find the length of the \n    missing side of a given triangle if the \n    length of the first two sides are known.\n    '''\n    s = (a + b + c) / 2\n    return(math.sqrt(s * (s - a) * (s - b) * (s - c)))\ndef findAreaOfTriangle(s1, s2, s3): \n    '''\n    Write a function to find the area of a \n    triangle if its lengths are known.\n    '''\n    return(0.5 * s1 * s2 * math.sqrt(s1 * s2 * s3)) \ndef findPerimeterOfTriangle(s1, s2, s3): \n    '''\n    Write a function to find the perimeter of a \n    triangle if its lengths are known.\n    '''\n    return(s1 + s2 + s3) \ndef areaOfTriangle(s1, s2, s3): \n    '''\n    Write a function to find the area of a \n    triangle if its sides are known.\n    '''\n    return(0.5 * s1 * s2 * math.sqrt(s1 * s2 * s3)) \ndef perimeterOfTriangle(s1, s2, s3): \n    '''\n    Write a function to find the perimeter of a \n    triangle if its sides are known.\n    '''\n    return(s1 + s2 + s3) \ndef findHypotenuse(a, b): \n    '''\n    Write a function to find the hypotenuse of a \n    right angled triangle if the lengths of th",
        "num_ids": 25
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    else:\n        return (n // 2) * (1 + n % 2)\n",
        "num_ids": 44
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    m = re.findall(\"\\w*z\\w*\", text)\n    print(\"\\n\\n text_match_wordz:\",m)\n",
        "num_ids": 39
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # text = \"This is a test to see if this word works\"\n    # res = re.match(r\"\\b\\w*z\\w*\\b\", text)\n    # res = re.findall(r\"\\b\\w*z\\w*\\b\", text)\n    # print(res)\n",
        "num_ids": 77
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'\\w*z\\w*'\n    result = re.findall(regex, text)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if 'z' in text:\n        return True\n    else:\n        return False\ndef text_match_word_or_digit(text):\n    '''\n    Write a function that matches 'words' that are either alphabetic or numeric.\n    '''\n    if re.search(\"[^a-zA-Z0-9]\", text):\n        return False\n    else:\n        return True\ndef text_match_word_of_length_at_least_7(text):\n    '''\n    Write a function that matches 'words' that are at least 7 characters long.\n    '''\n    if len(text) < 7:\n        return False\n    else:\n        return True\ndef text_match_word_of_length_at_least_5(text):\n    '''\n    Write a function that matches 'words' that are at least 5 characters long.\n    '''\n    if len(text) < 5:\n        return False\n    else:\n        return True\ndef text_match_word_that_ends_in_a_number(text):\n    '''\n    Write a function that matches 'words' that end in a number.\n    '''\n    if re.search(\"[0-9]$\", text):\n        return True\n    else:\n        return False\ndef text_match_word_that_starts_with_a_capital(text):\n    '''\n    Write a function that matches 'words' that start with a capital letter.\n    '''\n    if re.search(\"^[A-Z]\", text):\n        return True\n    else:\n        return False\ndef text_match_word_that_contains_a_capital(text):\n    '''\n    Write a function that matches 'words' that contain a capital letter.\n    '''\n    if re.search(\"[A-Z]\", text):\n        return True\n    else:\n        return False\ndef text_match_word_that_contains_a_lowercase(text):\n    '''\n    Write a function that matches 'words' that contain a lowercase letter.\n    '''\n    if re.search(\"[a-z]\", text):\n        return True\n    else:\n        return False\ndef text_match_word_that_contains_a_lower_and_a_number(text):\n    '''\n    Write a function that matches 'words' that contain a lowercase and a number.\n    '''\n    if re.search(\"[a-z0-9]\", text):\n        return True\n    else:\n        return False\ndef text_match_word_that_contains_a_lower_and_a_capital(text):\n    '''\n    Write a function that matches 'words' that contain a lowercase and a capital letter.\n    '''\n    if re.search(\"[a-zA-Z]\", text):\n        return True\n    else:\n        return False\ndef text_match_word_that_contains_a_number_and_a_capital(text):\n    '''\n    Write a function that matches 'words' that contain a number and a capital letter.\n    '''\n    if re.search(\"[0-9A-Z]\", text):\n        return True\n    else:\n        return False\ndef text_match_words_that_start_with_a_capital(text):\n    '''\n    Write a function that matches 'words' that start with a capital letter.\n    '''\n    if re.search(\"^[A-Z]+[a-zA-Z0-9]*\", text):\n        return True\n    else:\n        return False\ndef text_match_words_that_start_with_a_capital_and_contain_a_number(text):\n    '''\n    Write a function that matches 'words' that start with a capital letter and contain a number.\n    '''\n    if re.search(\"^[A-Z][0-9]*[a-zA-Z]+\", text):\n        return True\n    else:\n        return False\ndef text_match_words_that_start_with_a_lower_and_a_number(text):\n    '''\n    Write a function that matches 'words' that start with a lowercase and a number.\n    '''\n    if re.search(\"^[a-z0-9]*[a-zA-Z]\", text):\n        return True\n    else:\n        return False\ndef text_match_words_that_contain_a_lower_and_a_capital(text):\n    '''\n    Write a function that matches 'words' that contain a lowercase and a capital letter.\n    '''\n    if re.search(\"[a-zA-Z]+[a-zA-Z0-9]*\", text):\n        return True\n    else:\n        return False\ndef text_match_words_that_contain_a_lower_and_a_number(text):\n    '''\n    Write a function that matches 'words' that contain a lowercase and a number.\n    '''\n    if re.search(\"[a-z0-9]+[a-zA-Z]\", text):\n        return True\n    else:\n        return False\ndef text_match_words_that_contain_a_lower_and_a_capital_and_a_number(text):\n    '''\n    Write a function that matches 'words' that contain a lowercase, a capital letter, and a number.\n    '''\n    if re.search(\"[a-z0-9]+[a-zA-Z]+\", text):\n        return True\n    else:\n        return False\ndef text_match_words_that_contain_a_lower_and_a_number_and_a_capital(text):\n    '''\n    Write a function that matches 'words' that contain a lowercase, a number, and a capital letter.\n    '''\n    if re.search(\"[a-z0-9]+[0-9A-Z]+\", text):\n        return True\n    else:\n        return False\ndef text_match_words_that_contain_a_lower_and_a_number_and_a_number(text):\n    '''\n    Write a function that matches 'words' that contain a lowercase, a number, and a number.\n    '''\n    if re.search(\"[a-z0-9]+[0-9]+\", text):\n        return True\n    else:\n        return False\ndef text_match_words_that_contain_a_number_and_a_number(text):\n    '''\n    Write a function that matches 'words' that contain a number and a number.\n    '''\n    if re.search(\"[0-9]+[0-9]+\", text):\n        return True\n    else:\n        return False\ndef text_match_words_that_contain_a_number_and_a_capital_and_a_number(text):\n    '''\n    Write a function that matches 'words' that contain a number, a capital letter, and a number.\n    '''\n    if re.search(\"[0-9]+[0-9A-Z]+\", text):\n        return True\n    else:\n        return False\ndef text_match_words_that_contain_a_number_and_a_number_and_a_capital(text):\n    '''\n    Write a function that matches 'words' that contain a number, a number, and a capital letter.\n    '''\n    if re.search(\"[0-9]+[0-9A-Z]+\", text):\n        return True\n    else:\n        return False\ndef text_match_words_that_contain_a_capital_and_a_capital_and_a_capital(text):\n    '''\n    Write a function that matches 'words' that contain a capital letter, a capital letter, and a capital letter.\n    '''\n    if re.search(\"[A-Z]+[A-Z]+[A-Z]+\", text):\n        return True\n    else:\n        return False\ndef text_match_words_that_contain_a_lower_and_a_number_and_a_number(text):\n    '''\n    Write a function that matches 'words' that contain a lowercase, a number, and a number.\n    '''\n    if re.search(\"[a-z0-9]+[0-9]+\", text):\n        return True\n    else:\n        return False\ndef text_match_words",
        "num_ids": 43
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if 'z' in text:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #match=\"[abc]*[z]\"\n    match=\"[a-z]+[z]$\"\n    if re.match(match,text):\n        return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_regex = re.compile(r'\\w*z\\w*')\n    matches = word_regex.findall(text)\n    return matches\n",
        "num_ids": 43
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z', text)\n",
        "num_ids": 13
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r\"\\b[^\\W\\d_]+z[^\\W\\d_]*\\b\", text)\n    ",
        "num_ids": 38
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(match)\n    return\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\")",
        "num_ids": 67
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return 28\n",
        "num_ids": 91
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Return True if number of days is 31\n    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        return True\n    # Return True if number of days is 30\n    if monthnum2==4 or monthnum2==6 or monthnum2==9 or monthnum2==11:\n        return True\n    return False\n",
        "num_ids": 108
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months_31 = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum2 in months_31:\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb_number = monthnum2\n    if monthnumb_number == 1:\n        print(\"January number has 31 days\")\n    elif monthnumb_number == 2:\n        print(\"February number has 28 days\")\n    elif monthnumb_number == 3:\n        print(\"March number has 31 days\")\n    elif monthnumb_number == 4:\n        print(\"April number has 30 days\")\n    elif monthnumb_number == 5:\n        print(\"May number has 31 days\")\n    elif monthnumb_number == 6:\n        print(\"June number has 30 days\")\n    elif monthnumb_number == 7:\n        print(\"July number has 31 days\")\n    elif monthnumb_number == 8:\n        print(\"August number has 31 days\")\n    elif monthnumb_number == 9:\n        print(\"September number has 30 days\")\n    elif monthnumb_number == 10:\n        print(\"October number has 31 days\")\n    elif monthnumb_number == 11:\n        print(\"November number has 30 days\")\n    elif monthnumb_number == 12:\n        print(\"December number has 31 days\")\n    else:\n        print(\"There is no such month\")\n",
        "num_ids": 290
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in (1,3,5,7,8,10,12):\n        return True\n    elif monthnum2 in (4,6,9,11):\n        return False\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        print('31 days')\n    elif monthnum2 == 2:\n        print('28/29 days')\n    elif monthnum2 == 3:\n        print('31 days')\n    elif monthnum2 == 4:\n        print('30 days')\n    elif monthnum2 == 5:\n        print('31 days')\n    elif monthnum2 == 6:\n        print('30 days')\n    elif monthnum2 == 7:\n        print('31 days')\n    elif monthnum2 == 8:\n        print('31 days')\n    elif monthnum2 == 9:\n        print('30 days')\n    elif monthnum2 == 10:\n        print('31 days')\n    elif monthnum2 == 11:\n        print('30 days')\n    elif monthnum2 == 12:\n        print('31 days')\n",
        "num_ids": 207
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return \"Wrong month number\"\n",
        "num_ids": 96
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    #monthnum1 = '12'\n    #monthnum2 = '31'\n    monthnum3 = '13'\n    monthnum4 = '30'\n    monthnum5 = '29'\n    monthnum6 = '28'\n    monthnum7 = '29'\n    monthnum8 = '30'\n    monthnum9 = '31'\n    monthnum10 = '31'\n    monthnum11 = '30'\n    monthnum12 = '31'\n    monthnum13 = '31'\n    monthnum14 = '30'\n    monthnum15 = '31'\n    monthnum16 = '31'\n    monthnum17 = '30'\n    monthnum18 = '31'\n    monthnum19 = '31'\n    monthnum20 = '30'\n    monthnum21 = '31'\n    monthnum22 = '31'\n    monthnum23 = '30'\n    monthnum24 = '31'\n    monthnum25 = '31'\n    monthnum26 = '30'\n    monthnum27 = '31'\n    monthnum28 = '31'\n    monthnum29 = '30'\n    monthnum30 = '31'\n    monthnum31 = '31'\n    monthnum32 = '30'\n    monthnum33 = '31'\n    monthnum34 = '31'\n    monthnum35 = '30'\n    monthnum36 = '31'\n    monthnum37 = '31'\n    monthnum38 = '30'\n    monthnum39 = '31'\n    monthnum40 = '31'\n    monthnum41 = '30'\n    monthnum42 = '31'\n    monthnum43 = '31'\n    monthnum44 = '30'\n    monthnum45 = '31'\n    monthnum46 = '31'\n    monthnum47 = '30'\n    monthnum48 = '31'\n    monthnum49 = '31'\n    monthnum50 = '30'\n    monthnum51 = '31'\n    monthnum52 = '31'\n    monthnum53 = '30'\n    monthnum54 = '31'\n    monthnum55 = '31'\n    monthnum56 = '30'\n    monthnum57 = '31'\n    monthnum58 = '31'\n    monthnum59 = '30'\n    monthnum60 = '31'\n    monthnum61 = '31'\n    monthnum62 = '30'\n    monthnum63 = '31'\n    monthnum64 = '31'\n    monthnum65 = '30'\n    monthnum66 = '31'\n    monthnum67 = '31'\n    monthnum68 = '30'\n    monthnum69 = '31'\n    monthnum70 = '31'\n    monthnum71 = '30'\n    monthnum72 = '31'\n    monthnum73 = '31'\n    monthnum74 = '30'\n    monthnum75 = '31'\n    monthnum76 = '31'\n    monthnum77 = '30'\n    monthnum78 = '31'\n    monthnum79 = '31'\n    monthnum80 = '30'\n    monthnum81 = '31'\n    monthnum82 = '31'\n    monthnum83 = '30'\n    monthnum84 = '31'\n    monthnum85 = '31'\n    monthnum86 = '30'\n    monthnum87 = '31'\n    monthnum88 = '31'\n    monthnum89 = '30'\n    monthnum90 = '31'\n    monthnum91 = '31'\n    monthnum92 = '30'\n    monthnum93 = '31'\n    monthnum94 = '31'\n    monthnum95 = '30'\n    monthnum96 = '31'\n    monthnum97 = '31'\n    monthnum98 = '30'\n    monthnum99 = '31'\n    monthnum100 = '31'\n    monthnum101 = '30'\n    monthnum102 = '31'\n    monthnum103 = '31'\n    monthnum104 = '30'\n    monthnum105 = '31'\n    monthnum106 = '31'\n    monthnum107 = '30'\n    monthnum108 = '31'\n    monthnum109 = '31'\n    monthnum110 = '30'\n    monthnum111 = '31'\n    monthnum112 = '31'\n    monthnum113 = '30'\n    monthnum114 = '31'\n    monthnum115 = '31'\n    monthnum116 = '30'\n    monthnum117 = '31'\n    monthnum118 = '31'\n    monthnum119 = '30'\n    monthnum120 = '31'\n    monthnum121 = '31'\n    monthnum122 = '30'\n    monthnum123 = '31'\n    monthnum124 = '31'\n    monthnum125 = '30'\n    monthnum126 = '31'\n    monthnum127 = '31'\n    monthnum128 = '30'\n    monthnum129 = '31'\n    monthnum130 = '31'\n    monthnum131 = '30'\n    monthnum132 = '31'\n    monthnum133 = '31'\n    monthnum134 = '30'\n    monthnum135 = '31'\n    monthnum136 = '31'\n    monthnum137 = '30'\n    monthnum138 = '31'\n    monthnum139 = '31'\n    monthnum140 = '30'\n    monthnum141 = '31'\n    monthnum142 = '31'\n    monthnum143 = '30'\n    monthnum144 = '31'\n    monthnum145 = '31'\n    monthnum146 = '30'\n    monthnum147 = '31'\n    monthnum148 = '31'\n    monthnum149 = '30'\n    monthnum150 = '31'\n    monthnum151 = '31'\n    monthnum152 = '30'\n    monthnum153 = '31'\n    monthnum154 = '31'\n    monthnum155 = '30'\n    monthnum156 = '31'\n    monthnum157 = '31'\n    monthnum158 = '30'\n    monthnum159 = '31'\n    monthnum160 = '31'\n    monthnum161 = '30'\n    monthnum162 = '31'\n    monthnum163 = '31'\n    monthnum164 = '30'\n    monthnum165 = '31'\n    monthnum166 = '31'\n    monthnum167 = '30'\n    monthnum168 = '31'\n    monthnum169 = '31'\n    monthnum170 = '30'\n    monthnum171 = '31'\n    monthnum172 = '31'\n    monthnum173 = '30'\n    monthnum174 = '31'\n    monthnum175 = '31'\n    monthnum176 = '30'\n    monthnum177 = '31'\n    monthnum178 = '31'\n    monthnum179 = '30'\n    monthnum180 = '31'\n    monthnum181 = '31'\n    monthnum182 = '30'\n    monthnum183 = '31'\n    monthnum184 = '31'\n    monthnum185 = '30'\n    monthnum186 = '31'\n    monthnum187 = '31'\n    monthnum188 = '30'\n    monthnum189 = '31'\n    monthnum190 = '31'\n    monthnum191 = '30'\n    monthnum192 = '31'\n    monthnum193 = '31'\n    monthnum194 = '30'\n    monthnum195 = '31'\n    monthnum196 = '31'\n    monthnum197 = '30'\n    monthnum198 = '31'\n    monthnum199 = '31'\n    monthnum200 = '30'\n    monthnum201 = '31'\n    monthnum202 = '31'\n    monthnum203 = '30'\n    monthnum204 = '31'\n    monthnum205 = '31'\n    monthnum206 = '30'\n    monthnum207 = '31'\n    monthnum208 = '31'\n    monthnum209 = '30'\n    monthnum210 = '31'\n    monthnum211 = '31'\n    monthnum212 = '30'\n    monthnum213 = '31'\n    monthnum214 = '31'\n    monthnum215 = '30'\n    monthnum216 = '31'\n    monthnum217 = '31'\n    monthnum218 = '30'\n    monthnum219 = '31'\n    monthnum220 = '31'\n    monthnum221 = '30'\n    monthnum222 = '31'\n    monthnum223 = '31",
        "num_ids": 2009
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if type(stringlist) == str:\n        return stringlist[::-1]\n    elif type(stringlist) == list:\n        newlist = []\n        for item in stringlist:\n            newlist.append(item[::-1])\n        return newlist\n",
        "num_ids": 67
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #reverse the entire list\n    stringlist.reverse()\n    print(stringlist)\n    #reverse each string\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n        print(stringlist)\n",
        "num_ids": 66
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_string_list = []\n    for string in stringlist:\n        reversed_string_list.append(string[::-1])\n",
        "num_ids": 39
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    new_stringlist = []\n    for string in stringlist:\n        new_stringlist.append(string[::-1])\n    return new_stringlist\n",
        "num_ids": 42
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for word in stringlist:\n        newlist.append(word[::-1])\n    return newlist",
        "num_ids": 33
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n",
        "num_ids": 14
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    print('The original list of strings:\\n',stringlist)\n    print('The reversed list of strings:\\n', [i[::-1] for i in stringlist])\n",
        "num_ids": 42
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for s in stringlist:\n        reversed_list.append(s[::-1])\n    return reversed_list\n    # test\n    # print(reverse_string_list(['abc', 'hello', 'kitty', 'world']))\n",
        "num_ids": 70
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    string_list = []\n    for i in range(len(stringlist)):\n        string_list.append(stringlist[i][::-1])\n    return string_list\n",
        "num_ids": 45
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize the minimum sub list\n    min_len = len(lst[0])\n    min_lst = []\n    # loop through the list to find the minimum sublist\n    for i in range(len(lst)):\n        if len(lst[i])<min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst\n",
        "num_ids": 104
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #print('the input list is:',lst)\n    #print('\\n')\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            #print(len(lst[i][j]))\n            minim=min(len(lst[i][j]))\n            #print('minimum of the sublist is:',minim)\n    return minim\n",
        "num_ids": 104
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_list=lst[0]\n    min_len=len(sub_list)\n    for i in lst:\n        if len(i)<min_len:\n            min_len=len(i)\n            sub_list=i\n    return sub_list\n",
        "num_ids": 68
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(len(lst)):\n        if(len(lst[i]) < min_len):\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst\n",
        "num_ids": 88
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minlen = len(lst[0])\n    sublist = lst[0]\n    for i in range(0,len(lst)):\n        if(len(lst[i])<minlen):\n            minlen = len(lst[i])\n            sublist = lst[i]\n    return sublist\n",
        "num_ids": 81
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lengths = [len(x) for x in lst] \n    min_len = min(lengths)\n    return [lst[i] for i, x in enumerate(lengths) if x == min_len] \n",
        "num_ids": 58
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l=len(lst)\n    min=0\n    i=0\n    for j in range(l):\n        if lst[j]<min:\n            min=lst[j]\n            i=j\n    return i\n",
        "num_ids": 59
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_list = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) <= len(sub_list):\n            sub_list = lst[i]\n    return sub_list\n",
        "num_ids": 62
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return [lst[i:j] for i in range(len(lst)) for j in range(i+1, len(lst)+1)]\n",
        "num_ids": 39
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    return lst[0]\n",
        "num_ids": 17
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area=l*b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(l*b)\n",
        "num_ids": 10
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1_length = len(str1)\n    new_str = ''\n    is_upper_found = False\n    for i in range(str1_length):\n        if str1[i] >= 'a' and str1[i] <= 'z':\n            if is_upper_found:\n                continue\n            else:\n                new_str += str1[i]\n        elif str1[i] >= 'A' and str1[i] <= 'Z':\n            if is_upper_found:\n                continue\n            else:\n                is_upper_found = True\n                new_str += str1[i]\n        else:\n            is_upper_found = False\n            new_str += str1[i]\n    return new_str\n",
        "num_ids": 190
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=list(str1)\n    while True:\n        try:\n            if str1[str1.index('A')]=='A':\n                del str1[str1.index('A')]\n        except:\n            break\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str1[i]=str1[i].lower()\n    str1=''.join(str1)\n    return str1\ndef remove_odd(num):\n    '''\n    Write a function to remove odd digits from an integer.\n    '''\n    num=str(num)\n    result=''\n    for i in num:\n        if int(i)%2==0:\n            result=result+i\n    result=int(result)\n    return result\ndef end_num(num):\n    '''\n    Write a function to return the last four digits of an integer.\n    '''\n    num=str(num)\n    return int(num[-4:])\ndef end_num_test(num):\n    '''\n    Write a function to return the last four digits of an integer.\n    '''\n    num=str(num)\n    return int(num[-4:])\ndef is_panagram(str1, alphabet=None):\n    '''\n    Write a function to check whether a string is a panagram or not. A panagram is a string which contains all the letters of the English alphabet at least once.\n    '''\n    if alphabet==None:\n        alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n    str1=remove_uppercase(str1)\n    for i in alphabet:\n        if str1.count(i)==0:\n            return False\n    return True\ndef is_panagram_test(str1):\n    '''\n    Write a function to check whether a string is a panagram or not. A panagram is a string which contains all the letters of the English alphabet at least once.\n    '''\n    str1=remove_uppercase(str1)\n    alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n    for i in alphabet:\n        if str1.count(i)==0:\n            return False\n    return True\ndef is_panagram_test_updated(str1):\n    '''\n    Write a function to check whether a string is a panagram or not. A panagram is a string which contains all the letters of the English alphabet at least once.\n    '''\n    str1=str1.lower()\n    alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n    for i in alphabet:\n        if str1.count(i)==0:\n            return False\n    return True\ndef remove_vowels(str1):\n    '''\n    Write a function to remove all vowels from a given string.\n    '''\n    vowels=('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    for i in str1:\n        if i in vowels:\n            str1=str1.replace(i, '')\n    return str1\ndef remove_vowels_test(str1):\n    '''\n    Write a function to remove all vowels from a given string.\n    '''\n    vowels=('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    for i in str1:\n        if i in vowels:\n            str1=str1.replace(i, '')\n    return str1\ndef group_anagrams(words):\n    '''\n    Write a function to group anagrams together. Anagrams are strings made up of the same letters.\n    '''\n    words=sorted(words)\n    result=[]\n    result.append(words[0])\n    for i in range(1, len(words)):\n        if words[i]==words[i-1]:\n            result[-1]=result[-1]+words[i]\n        else:\n            result.append(words[i])\n    return result\ndef group_anagrams_test(words):\n    '''\n    Write a function to group anagrams together. Anagrams are strings made up of the same letters.\n    '''\n    words=sorted(words)\n    result=[]\n    result.append(words[0])\n    for i in range(1, len(words)):\n        if words[i]==words[i-1]:\n            result[-1]=result[-1]+words[i]\n        else:\n            result.append(words[i])\n    return result\ndef group_anagrams_updated(words):\n    '''\n    Write a function to group anagrams together. Anagrams are strings made up of the same letters.\n    '''\n    words=sorted(words)\n    result=[]\n    result.append(words[0])\n    for i in range(1, len(words)):\n        if words[i]==words[i-1]:\n            result[-1]=result[-1]+words[i]\n        else:\n            result.append(words[i])\n    return result\ndef has_pangram(str1):\n    '''\n    Write a function to check whether a string has a pangram or not. A pangram is a sentence using every letter of the alphabet at least once.\n    '''\n    alphabet='abcdefghijklmnopqrstuvwxyz'\n    for i in alphabet:\n        if str1.count(i)==0:\n            return False\n    return True\ndef has_pangram_test(str1):\n    '''\n    Write a function to check whether a string has a pangram or not. A pangram is a sentence using every letter of the alphabet at least once.\n    '''\n    alphabet='abcdefghijklmnopqrstuvwxyz'\n    for i in alphabet:\n        if str1.count(i)==0:\n            return False\n    return True\ndef count_chars(str1):\n    '''\n    Write a function to count the number of each character in a string.\n    '''\n    dict1={}\n    for i in str1:\n        if i in dict1:\n            dict1[i]=dict1[i]+1\n        else:\n            dict1[i]=1\n    return dict1\ndef count_chars_test(str1):\n    '''\n    Write a function to count the number of each character in a string.\n    '''\n    dict1={}\n    for i in str1:\n        if i in dict1:\n            dict1[i]=dict1[i]+1\n        else:\n            dict1[i]=1\n    return dict1\ndef count_chars_updated(str1):\n    '''\n    Write a function to count the number of each character in a string.\n    '''\n    dict1={}\n    for i in str1:\n        dict1[i]=str1.count(i)\n    return dict1\ndef rotate_chars(str1):\n    '''\n    Write a function to rotate characters in a string.\n    '''\n    n=len(str1)\n    result=''\n    for i in range(0, n):\n        if str1[i].isalpha():\n            result=result+str1[(i-n)%n]\n        else:\n            result=result+str1[i]\n    return result\ndef rotate_chars_test(str1):\n    '''\n    Write a function to rotate characters in a string.\n    '''\n    n=len(str1)\n    result=''\n    for i in range(0, n):\n        if str1[i].isalpha():\n            result=result+str1[(i+1)%n]\n        else:\n            result=result+str1[i]\n    return result\ndef rotate_chars_updated(str1):\n    '''\n    Write a function to rotate characters in a string.\n    '''\n    n=len(str1)\n    result=''\n    for i in range(0, n):\n        if str1[i].isalpha():\n            result=result+str1[(i+1)%n]\n        else:\n            result=result+str1[i",
        "num_ids": 68
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n    \ndef remove_digits(str2):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return re.sub('[0-9]', '', str2)\n    \ndef remove_whitespace(str3):\n    '''\n    Write a function to remove whitespace characters from a given string.\n    '''\n    return re.sub('\\s', '', str3)\n    \ndef remove_punctuation(str4):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return re.sub('[!\"#$%&()*+,./:;<=>?@[\\]^_`{|}~]', '', str4)\n    \ndef count_consonants(str5):\n    '''\n    Write a function to count the number of consonants in a given string.\n    '''\n    return len(re.findall(r'[b-df-hj-np-tv-z]', str5))\n    \ndef count_vowels(str6):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    return len(re.findall(r'[a-zA-Z]', str6))\n    \ndef count_words(str7):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    return len(re.findall(r'\\w+', str7))\n    \ndef is_palindrome(str8):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    return str8 == str8[::-1]\n    \ndef longest_word(str9):\n    '''\n    Write a function to find the longest word in a given string.\n    '''\n    return max(str9.split(' '), key=len)\n    \ndef is_anagram(str10):\n    '''\n    Write a function to check whether a given string is anagram or not.\n    '''\n    return sorted(list(str10.replace(\" \",\"\"))) == sorted(list(str10.replace(\" \",\"\")))\n    \ndef reverse_string(str11):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return str11[::-1]\n    \ndef rot_13(str12):\n    '''\n    Write a function to convert a given string to rot_13.\n    '''\n    return str(bytes.fromhex(str12).decode('utf-8'))\n    \ndef remove_all(str13, ch):\n    '''\n    Write a function to remove all occurrences of a given character in a given string.\n    '''\n    return str13.replace(ch, '')\n    \ndef is_pangram(str14):\n    '''\n    Write a function to check whether a given string is a pangram or not.\n    '''\n    return len(set(str14)) == 26\n    \ndef is_pangram_without_using_regex(str15):\n    '''\n    Write a function to check whether a given string is a pangram without using regex.\n    '''\n    alpha = [chr(i) for i in range(97,123)]\n    return len(list(set(str15))) == 26 and set(alpha).issuperset(set(str15))\n    \ndef is_isogram(str16):\n    '''\n    Write a function to check whether a given string is an isogram or not.\n    '''\n    return len(set(str16)) == len(str16)\n    \ndef is_isogram_without_using_regex(str17):\n    '''\n    Write a function to check whether a given string is an isogram or not without using regex.\n    '''\n    return len(set(str17)) == len(str17)\n    \ndef is_valid_iban(str18):\n    '''\n    Write a function to check whether a given IBAN is valid or not.\n    '''\n    return re.match(r'^[a-zA-Z]{2}[0-9]{2}[a-zA-Z0-9]{11,30}$', str18)\n    \ndef is_valid_iban_without_using_regex(str19):\n    '''\n    Write a function to check whether a given IBAN is valid or not without using regex.\n    '''\n    return bool(re.search(r'[A-Z]{2}[0-9]{2}[A-Z0-9]{11,30}$', str19))\n    \ndef is_valid_ip_address(str20):\n    '''\n    Write a function to check whether a given string is a valid IP address or not.\n    '''\n    return bool(re.search(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', str20))\n    \ndef is_valid_ip_address_without_using_regex(str21):\n    '''\n    Write a function to check whether a given string is a valid IP address or not without using regex.\n    '''\n    return bool(re.search(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', str21))\n    \ndef remove_all_occurrences(str22, ch):\n    '''\n    Write a function to remove all occurrences of a given character from a given string.\n    '''\n    return re.sub(ch, '', str22)\n    \ndef replace_all(str23, old, new):\n    '''\n    Write a function to replace all occurrences of a given character in a given string.\n    '''\n    return re.sub(old, new, str23)\n    \ndef find_all(str24, ch):\n    '''\n    Write a function to find all occurrences of a given character in a given string.\n    '''\n    return re.findall(ch, str24)\n    \ndef find_all_without_using_regex(str25):\n    '''\n    Write a function to find all occurrences of a given character in a given string without using regex.\n    '''\n    return list(str25)\n    \ndef replace_all_with_whitespace_separator(str26, ch):\n    '''\n    Write a function to replace all occurrences of a given character in a given string with whitespace as separator.\n    '''\n    return re.sub(ch, r'\\s', str26)\n    \ndef replace_all_without_using_regex(str27, old, new):\n    '''\n    Write a function to replace all occurrences of a given character in a given string without using regex.\n    '''\n    return str(str27.replace(old, new))\n    \ndef find_all_without_using_regex(str28):\n    '''\n    Write a function to find all occurrences of a given character in a given string without using regex.\n    '''\n    return str28.split(' ')\n    \ndef reverse_word(str29):\n    '''\n    Write a function to reverse a given word in a given string.\n    '''\n    return re.sub(r'(\\w+)', r'\\1', str29)\n    \ndef find_all_without_using_regex(str30):\n    '''\n    Write a function to find all occurrences of a given character in a given string without using regex.\n    '''\n    return list(str30)\n    \ndef add_spaces(str31):\n    '''\n    Write a function to add spaces between each character of a given string.\n    '''\n    return re.sub(r'",
        "num_ids": 10
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i.islower() is True:\n            new_str += i\n        elif i.isupper() is True:\n            new_str += '_'\n    return new_str\n",
        "num_ids": 62
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    return str2\ndef remove_special_char(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    str3 = re.sub('[^0-9a-zA-Z]+','', str1)\n    return str3\ndef remove_numbers(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    str4 = ''.join(i for i in str1 if not i.isdigit())\n    return str4\ndef count_words(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    str5 = str1.split(' ')\n    return len(str5)\ndef count_vowels(str1):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    vowels = 0\n    vowel_set = set('aeiou')\n    for i in str1:\n        if i in vowel_set:\n            vowels += 1\n    return vowels\ndef count_unique_words(str1):\n    '''\n    Write a function to count the number of unique words in a given string.\n    '''\n    str6 = str1.split(' ')\n    str7 = list(set(str6))\n    return len(str7)\ndef count_chars(str1):\n    '''\n    Write a function to count the number of characters in a given string.\n    '''\n    return len(str1)\ndef repeat_words(str1):\n    '''\n    Write a function to count the number of repeated words in a given string.\n    '''\n    str8 = str1.split(' ')\n    str9 = set(str8)\n    str10 = list(str9)\n    return len(str10)\ndef count_uppercase(str1):\n    '''\n    Write a function to count the number of uppercase characters in a given string.\n    '''\n    str11 = str1.upper()\n    return len(str11)\ndef count_non_alpha(str1):\n    '''\n    Write a function to count the number of non alphabetic characters in a given string.\n    '''\n    str12 = ''.join(i for i in str1 if not i.isalpha())\n    return len(str12)\ndef count_non_digit(str1):\n    '''\n    Write a function to count the number of non numeric characters in a given string.\n    '''\n    str13 = ''.join(i for i in str1 if not i.isdigit())\n    return len(str13)\ndef count_non_whitespace(str1):\n    '''\n    Write a function to count the number of non whitespace characters in a given string.\n    '''\n    str14 = ''.join(i for i in str1 if not i.isspace())\n    return len(str14)\ndef make_lowercase(str1):\n    '''\n    Write a function to make the given string in lowercase.\n    '''\n    return str1.lower()\ndef make_uppercase(str1):\n    '''\n    Write a function to make the given string in uppercase.\n    '''\n    return str1.upper()\ndef is_unique(str1):\n    '''\n    Write a function to check if the given string has only unique characters.\n    '''\n    return len(str1) == len(set(str1))\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation characters from a given string.\n    '''\n    str15 = str1.replace('.', '').replace(',', '').replace('?', '').replace('!', '')\n    return str15\ndef is_match(str1, str2):\n    '''\n    Write a function to check if given two strings are anagrams of each other.\n    '''\n    str16 = str1.replace(' ', '').lower()\n    str17 = str2.replace(' ', '').lower()\n    return sorted(str16) == sorted(str17)\ndef get_domain_name(str1):\n    '''\n    Write a function to extract domain name from a given string.\n    '''\n    str18 = str1.split('.')\n    return str18[-1]\ndef get_ip_address(str1):\n    '''\n    Write a function to extract IP address from a given string.\n    '''\n    str19 = str1.split('.')\n    return '.'.join(str19[:3])\ndef get_common_characters(str1):\n    '''\n    Write a function to get the common characters in a given string.\n    '''\n    str20 = set(str1)\n    return sorted(str20)\ndef get_most_frequent_characters(str1):\n    '''\n    Write a function to get the most frequent characters in a given string.\n    '''\n    str21 = str1.replace(' ', '').lower()\n    str22 = {}\n    for i in str21:\n        if i in str22:\n            str22[i] += 1\n        else:\n            str22[i] = 1\n    return sorted(str22.items(), key=lambda x: x[1], reverse=True)\ndef check_for_uppercase_word(str1):\n    '''\n    Write a function to check if given string contains uppercase word.\n    '''\n    str23 = str1.split(' ')\n    for i in str23:\n        if i.isupper():\n            return True\n    return False\ndef replace_char(str1, ch, ch2):\n    '''\n    Write a function to replace all occurrences of given character in a given string with another character.\n    '''\n    str24 = str1.replace(ch, ch2)\n    return str24\ndef replace_character(str1, ch, ch2):\n    '''\n    Write a function to replace all occurrences of a character in a given string with another character.\n    '''\n    return str1.replace(ch, ch2)\ndef get_alternate_characters(str1):\n    '''\n    Write a function to get the alternates characters in a given string.\n    '''\n    str25 = sorted(set(str1))\n    return str25\ndef encrypt_message(str1):\n    '''\n    Write a function to encrypt a given string using rot13 encryption.\n    '''\n    import codecs\n    str26 = str1.encode('rot13')\n    return codecs.decode(str26, 'rot_13')\ndef decrypt_message(str1):\n    '''\n    Write a function to decrypt a given string using rot13 encryption.\n    '''\n    import codecs\n    str27 = str1.encode('rot13')\n    return codecs.decode(str27, 'rot_13')\ndef check_pangram(str1):\n    '''\n    Write a function to check if given string is a pangram.\n    '''\n    str28 = set(str1)\n    if len(str28) == 26:\n        return True\n    return False\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    str29 = re.sub('[^0-9a-zA-Z]+','', str1)\n    return str29\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    str30 = ''.join(i for i in str1 if not i in '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~')\n    return str30\ndef remove_non_ascii(str1):\n    '''\n    Write a function to remove non ascii characters from a given string.\n    '''\n    str31 = ''.join(i for i in str1 if ord(i)<128)\n    return str31\ndef remove_non_alphabet(str1):\n    '''\n    Write a function to remove non alphabet characters from a given string.\n    '''\n    str32 = ''.join(i for i in st",
        "num_ids": 15
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r\"[A-Z]+\", \"\", str1)\n",
        "num_ids": 21
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    reg_string = str1.split()\n    for x in reg_string:\n        if x[0].isupper():\n            reg_string.remove(x)\n    return reg_string\n",
        "num_ids": 48
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    import re\n    str_re = re.compile(r'[A-Z][A-Z][A-Z]')\n    str2 = str_re.sub('', str1)\n    return str2\n",
        "num_ids": 53
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    s1 = re.findall('[A-Z][a-z]*',str1)\n    s2 = ''\n    for i in s1:\n        s2+=i\n    return s2\n",
        "num_ids": 51
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst] \n",
        "num_ids": 17
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst] \n",
        "num_ids": 17
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(c.isupper() for c in str)\n",
        "num_ids": 17
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for character in str:\n        if character.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isupper():\n            ctr += 1\n    return ctr\n",
        "num_ids": 32
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for letter in str:\n        if letter.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([x for x in str if x.isupper()])\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in range(0,len(str)):\n        if(str[i].isupper()):\n            count=count+1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l = len(list1)\n    res = []\n    for i in range(l,0,-1):\n        for j in itertools.combinations(list1,i):\n            res.append(j)\n    return res\n",
        "num_ids": 58
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations_list = list()\n    for i in range(len(list1)+1):\n        for combination in itertools.combinations(list1,i):\n            combinations_list.append(combination)\n    return combinations_list\n",
        "num_ids": 60
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # return list(itertools.combinations(list1, 2))\n    return list(itertools.combinations(list1, 2))\n    \nprint(combinations_list([1, 2, 3, 4]))\n",
        "num_ids": 56
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations_list = []\n    for i in range(1, len(list1)):\n        for j in combinations(list1, i):\n            combinations_list.append(list(j))\n    return combinations_list\n",
        "num_ids": 56
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations, permutations, combinations_with_replacement\n    list_ = list(list1)\n    print('--Combinations--')\n    print(list(combinations(list_, 2)))\n    print('--Permutations--')\n    print(list(permutations(list_, 2)))\n    print('--Combinations with replacement--')\n    print(list(combinations_with_replacement(list_, 2)))\n    print()\n    \ndef dict_comprehension():\n    '''\n    Write a Python program to create a dictionary from a given expression\n    '''\n    D = {i:i**3 for i in range(1,11)}\n    print('--Dictionary Comprehension--')\n    print(D)\n    print()\n    \ndef dict_comprehension2():\n    '''\n    Write a Python program to find intersection of two given sets.\n    '''\n    A = {'a', 'b', 'c', 'd', 'e'}\n    B = {'c', 'd', 'e', 'f', 'g'}\n    print('--Intersection of Sets--')\n    print(A.intersection(B))\n    print()\n    \ndef dict_comprehension3():\n    '''\n    Write a Python program to check whether a given set is a subset of another given set.\n    '''\n    A = {'a', 'b', 'c'}\n    B = {'a', 'b', 'c', 'd', 'e'}\n    print('--Checking whether a set is a subset of another set--')\n    print(A.issubset(B))\n    print()\n    \ndef dict_comprehension4():\n    '''\n    Write a Python program to create a dictionary that contains a number (between 1 and n) in the form (x, x*x).\n    Sample dict (n = 5) :\n    Expected Output : {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n    '''\n    D = {i:i**2 for i in range(1,6)}\n    print('--Dictionary--')\n    print(D)\n    print()\n    \ndef dict_comprehension5():\n    '''\n    Write a Python program to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys. \n    Sample Dictionary (n = 5) :\n    Expected Output : {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n    '''\n    D = {i:i**2 for i in range(1,6)}\n    print('--Dictionary--')\n    print(D)\n    print()\n    \ndef dict_comprehension6():\n    '''\n    Write a Python program to create and display a dictionary \n    where the keys are numbers between 1 and 15 (both included) \n    and the values are square of keys. \n    Sample Dictionary (n = 5) :\n    Expected Output : {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n    '''\n    D = {i:i**2 for i in range(1,6)}\n    print('--Dictionary--')\n    print(D)\n    print()\n    \ndef dict_comprehension7():\n    '''\n    Write a Python program to create and display a dictionary \n    where the keys are numbers between 1 and 15 (both included) and the values are square of keys. \n    Sample Dictionary (n = 5) :\n    Expected Output : {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n    '''\n    D = {i:i**2 for i in range(1,6)}\n    print('--Dictionary--')\n    print(D)\n    print()\n    \ndef dict_comprehension8():\n    '''\n    Write a Python program to create and display a dictionary \n    where the keys are numbers between 1 and 15 (both included) and the values are square of keys. \n    Sample Dictionary (n = 5) :\n    Expected Output : {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n    '''\n    D = {i:i**2 for i in range(1,6)}\n    print('--Dictionary--')\n    print(D)\n    print()\n    \ndef dict_comprehension9():\n    '''\n    Write a Python program to create and display a dictionary \n    where the keys are numbers between 1 and 15 (both included) and the values are square of keys. \n    Sample Dictionary (n = 5) :\n    Expected Output : {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n    '''\n    D = {i:i**2 for i in range(1,6)}\n    print('--Dictionary--')\n    print(D)\n    print()\n    \ndef dict_comprehension10():\n    '''\n    Write a Python program to combine two dictionary adding values for common keys. \n    d1 = {'a': 100, 'b': 200, 'c':300}\n    d2 = {'a': 300, 'b': 200, 'd':400}\n    Sample output: Counter({'a': 400, 'b': 400, 'd': 400, 'c': 300})\n    '''\n    from collections import Counter\n    d1 = {'a': 100, 'b': 200, 'c':300}\n    d2 = {'a': 300, 'b': 200, 'd':400}\n    d = Counter(d1) + Counter(d2)\n    print('--Dictionary--')\n    print(d)\n    print()\n    \ndef dict_comprehension11():\n    '''\n    Write a Python program to print a dictionary \n    where the keys are numbers between 1 and 15 (both included) and the values are square of keys. \n    Sample Dictionary (n = 5) :\n    Expected Output : {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n    '''\n    D = {i:i**2 for i in range(1,6)}\n    print('--Dictionary--')\n    print(D)\n    print()\n    \ndef dict_comprehension12():\n    '''\n    Write a Python program to create and display a dictionary \n    where the keys are numbers between 1 and 15 (both included) and the values are square of keys. \n    Sample Dictionary (n = 5) :\n    Expected Output : {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n    '''\n    D = {i:i**2 for i in range(1,6)}\n    print('--Dictionary--')\n    print(D)\n    print()\n    \ndef dict_comprehension13():\n    '''\n    Write a Python program to create a dictionary that contains \n    a number (between 1 and n) in the form (x, x*x). \n    Sample dict (n = 5) :\n    Expected Output : {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n    '''\n    D = {i:i**2 for i in range(1,6)}\n    print('--Dictionary--')\n    print(D)\n    print()\n    \ndef dict_comprehension14():\n    '''\n    Write a Python program to create and display a dictionary \n    where the keys are numbers between 1 and 15 (both included) and the values are square of keys. \n    Sample Dictionary (n = 5) :\n    Expected Output : {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n    '''\n    D = {i:i**2 for i in range(1,6)}\n    print('--Dictionary--')\n    print(D)\n    print()\n    \ndef dict_comprehension15():\n    '''\n    Write a Python program to create and display a dictionary \n    where the keys are numbers between 1 and 15 (both included) and the values are square of keys. \n    Sample Dictionary (n = 5) :\n    Expected Output : {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n    '''\n    D = {i:i**2 for i in range(1,6)}\n    print('--Dictionary--')\n    prin",
        "num_ids": 33
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            comb.append(list1[i] + list1[j])\n    return comb\n",
        "num_ids": 58
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #import pdb; pdb.set_trace()\n    if len(list1) > 0:\n        if len(list1) == 1:\n            return [list1]\n        else:\n            combinations = []\n            first_element = list1[0]\n            remaining_elements = list1[1:]\n            sub_combinations_list = combinations_list(remaining_elements)\n            for element in sub_combinations_list:\n                combinations.append([first_element] + element)\n            return combinations + sub_combinations_list\n    else:\n        return []\n",
        "num_ids": 143
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            temp = []\n            for x in range(i,j+1):\n                temp.append(list1[x])\n            combinations.append(temp)\n    return combinations\n",
        "num_ids": 78
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    print('The list :',list1)\n    print('The combinations of the given list :')\n    print(list(itertools.combinations(list1,len(list1))))\n",
        "num_ids": 46
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            result += combinations_list(list1[i+1:])\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) <= 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 33
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    min_product = float('inf')\n    max_product_start = 0\n    min_product_start = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_product *= arr[i]\n            min_product *= arr[i]\n        else:\n            temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        if max_product > max_product_start:\n            max_product_start = i\n        if min_product < min_product_start:\n            min_product_start = i\n    return (max_product_start, max_product, min_product_start, min_product)\n",
        "num_ids": 194
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_start = 0\n    min_start = 0\n    for i in range(len(arr)):\n        max_start = i\n        for j in range(i+1, len(arr)+1):\n            product = 1\n            for k in range(i, j):\n                product *= arr[k]\n            if product > max_product:\n                max_product = product\n                max_start = i\n                min_start = j - 1\n    return (max_start, min_start)\n",
        "num_ids": 132
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = 1\n    max_ending_here = 1\n    start = 0\n    end = 0\n    s = 0\n    for i in range(len(arr)):\n        max_ending_here = max_ending_here * arr[i]\n        if max_ending_here < 0:\n            max_ending_here = arr[i]\n            start = i+1\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            end = i\n            s = max_ending_here\n    print(arr[start:end+1])\n    print(s)\n",
        "num_ids": 156
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global_max = float('-inf')\n    global_max_start = -1\n    global_max_end = -1\n    for index in range(0,len(arr)):\n        if index == 0:\n            max_ending_here = arr[index]\n            max_so_far = max_ending_here\n            local_min_so_far = arr[index]\n        elif index == 1:\n            max_ending_here = arr[index]\n            max_so_far = max_ending_here\n            local_min_so_far = min(arr[index],arr[index-1])\n        else:\n            max_ending_here = arr[index]\n            max_ending_here = max(arr[index],max_so_far*max_ending_here)\n            local_min_so_far = min(arr[index],local_min_so_far*arr[index])\n            max_so_far = max(max_so_far,max_ending_here)\n            if max_so_far > global_max:\n                global_max = max_so_far\n                global_max_start = local_min_so_far\n                global_max_end = max_ending_here\n    print(global_max,global_max_start,global_max_end)\n",
        "num_ids": 312
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return arr[0]\n    max_so_far = 1\n    max_ending_here = 1\n    for i in range(n):\n        max_ending_here = max(arr[i], arr[i]*max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "num_ids": 119
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod, max_start_index, max_end_index = -float(\"inf\"), -1, -1\n    max_left_prod, max_right_prod = -float(\"inf\"), -1\n    for i in range(len(arr)):\n        if max_left_prod < 0:\n            max_left_prod = arr[i]\n        else:\n            max_left_prod *= arr[i]\n        if max_right_prod < 0:\n            max_right_prod = arr[len(arr) - i - 1]\n        else:\n            max_right_prod *= arr[len(arr) - i - 1]\n        if (max_prod < max_left_prod * max_right_prod):\n            max_prod = max_left_prod * max_right_prod\n            max_start_index = i\n            max_end_index = len(arr) - i - 1\n    return max_prod, max_start_index, max_end_index\n",
        "num_ids": 253
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = 1\n    start_index = 0\n    end_index = 0\n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        if max_ending_here == 0:\n            max_ending_here = 1\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        if min_ending_here == 0:\n            min_ending_here = 1\n        if (max_so_far < max_ending_here):\n            start_index = i - 1\n            end_index = i\n            max_so_far = max_ending_here\n    print(f\"Maximum Subarray product: {max_ending_here}\\n\")\n    return start_index, end_index\n",
        "num_ids": 218
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = 0\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        max_ending_here = max_ending_here*arr[i]\n        max_ending_here = 0 if max_ending_here < 0 else max_ending_here\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = i\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n    for i in range(len(arr)-1, -1, -1):\n        max_ending_here = max_ending_here*arr[i]\n        max_ending_here = 0 if max_ending_here < 0 else max_ending_here\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            start = i\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n    print(arr[start:end+1])\n    return max_so_far\n",
        "num_ids": 282
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if dict.values()[0] == dict[key]:\n            return True\n        else:\n            return False\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    val = None\n    for key in dict:\n        if val == None:\n            val = dict[key]\n        else:\n            if val!= dict[key]:\n                return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == 1:\n        return True\n    if dict.values()[0]!= dict.values()[1]:\n        return False\n    return check_value(dict, n-1)\n",
        "num_ids": 49
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    flag = True\n    for i in dict:\n        if i in dict and dict[i] == n:\n            continue\n        else:\n            flag = False\n            break\n",
        "num_ids": 43
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    result = all(dict[n] == i for i in dict.values())\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    list_ = []\n    for x in dict.values():\n        list_.append(x)\n    if len(list_) == 1:\n        return True\n    elif list_[0] == list_[1]:\n        return check_value(dict, n+1)\n    else:\n        return False\n",
        "num_ids": 76
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    return False\n",
        "num_ids": 25
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    flag = 0\n    for i in dict:\n        if i == n:\n            flag += 1\n    if flag == len(dict):\n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not dict:\n        return None\n",
        "num_ids": 12
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i == n:\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {x: y for x, y in dict1.items() if y!= ''}\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, val in list(dict1.items()):\n        if not val:\n            del dict1[key]\n    return dict1\n",
        "num_ids": 36
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = dict()\n    for k, v in dict1.items():\n        if v!= '':\n            dict2[k] = v\n    return dict2\n",
        "num_ids": 43
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    while '' in dict1:\n        dict1.pop('')\n    return dict1\n",
        "num_ids": 24
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1= dict(filter(lambda x: x[1], dict1.items()))\n    return dict1\n",
        "num_ids": 29
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in list(dict1.items()):\n        if not value:\n            del dict1[key]\n",
        "num_ids": 31
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty_keys = [key for key in dict1 if not dict1[key]]\n    for key in empty_keys:\n        del dict1[key]\n    return dict1\n",
        "num_ids": 44
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    #solution 1:\n    # dict1 = {'a':1, 'b':2, 'c':3, 'd':''}\n    # dict1.pop('d')\n    # dict1.pop('d', None)\n    # return dict1\n    # solution 2:\n    # dict1 = {'a':1, 'b':2, 'c':3, 'd':''}\n    # dict1.popitem()\n    # dict1.popitem()\n    # dict1.popitem()\n    # return dict1\n    # solution 3:\n    dict1 = {'a':1, 'b':2, 'c':3, 'd':''}\n    dict1 = {k:v for k,v in dict1.items() if v}\n    return dict1\n",
        "num_ids": 189
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return 0\n    prev_max = curr_max = 1\n    for val in arr[1:]:\n        prev_max, curr_max = max(prev_max * val, curr_max * val, val), prev_max * val\n    return curr_max\n",
        "num_ids": 78
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_prod = 1\n    min_prod = 1\n",
        "num_ids": 26
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 1:\n        return arr[0] if len(arr) == 1 else -1\n    \n    max_product = 1\n    for i in range(len(arr)):\n        temp = 1\n        for j in range(i,len(arr)):\n            temp *= arr[j]\n            max_product = max(temp, max_product)\n    return max_product\n",
        "num_ids": 98
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = [1, 4, 2, 5, 3]\n    print(\"Maximum product of increasing subsequence:\", max_product(arr))\n",
        "num_ids": 35
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product\n",
        "num_ids": 24
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 3:\n        return 0\n    \n    max_prod = 1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_prod = max(max_prod, arr[i] * arr[j])\n    return max_prod\n",
        "num_ids": 84
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # check for empty or single element array\n    if len(arr) < 2:\n        return -1\n",
        "num_ids": 29
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product\n",
        "num_ids": 24
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n",
        "num_ids": 65
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 1\n    #min_num = min(arr)\n    #max_num = max(arr)\n    #max_product = min_num * max_num\n    max_product = 1\n    for i in range(0, len(arr)-1):\n        curr_product = arr[i] * arr[i+1]\n        if curr_product > max_product:\n            max_product = curr_product\n    return max_product\n",
        "num_ids": 120
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    new_tup = ()\n    for i in range(len(test_tup)-1):\n        new_tup += (test_tup[i]+test_tup[i+1],)\n        \n    return new_tup\n",
        "num_ids": 62
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x = test_tup[0]\n    y = test_tup[1]\n    return x + y\n",
        "num_ids": 30
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (tup[0] + tup[1])\n",
        "num_ids": 17
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(0, len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple((int(x) + int(y)) for x, y in zip(test_tup[:-1], test_tup[1:]))\n",
        "num_ids": 39
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return reduce(lambda x, y: x+y, [test_tup[i]+test_tup[i+1] for i in range(len(test_tup)-1)])\n",
        "num_ids": 48
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    my_tup = tuple(test_tup)\n    new_tup = []\n    for i in range(len(my_tup) - 1):\n        new_tup.append(my_tup[i] + my_tup[i + 1])\n    return tuple(new_tup)\n",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(list(zip(test_tup[:-1], test_tup[1:])))\n    return [x + y for x, y in zip(test_tup[:-1], test_tup[1:])]\n",
        "num_ids": 57
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(\"The pairwise addition of the neighboring elements of the given tuple is : \",end=\"\")\n    print(tuple(test_tup[x]+test_tup[x+1] for x in range(0,len(test_tup)-1,2)))\n    return\n",
        "num_ids": 68
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum = 0\n    if len(test_tup) % 2 == 1:\n        i = 0\n        while i < len(test_tup) - 1:\n            sum += test_tup[i] + test_tup[i + 1]\n            i += 2\n        return sum\n    else:\n        i = 0\n        while i < len(test_tup) - 1:\n            sum += test_tup[i] + test_tup[i + 1]\n            i += 2\n        return sum\n",
        "num_ids": 126
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if (arr == None):\n        return -1\n",
        "num_ids": 15
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    return prod % n \n",
        "num_ids": 34
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n",
        "num_ids": 7
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n):\n        prod = prod * arr[i]\n    return prod % n\n",
        "num_ids": 34
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(n):\n        result = (result * arr[i]) % n\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result *= i \n        result %= n\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod * i % n\n    return prod\n    \n",
        "num_ids": 31
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for ele in arr: \n        res = res * ele % n \n    return res \n",
        "num_ids": 30
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n): \n        prod = (prod * arr[i]) % n \n    return prod \n",
        "num_ids": 39
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod\n",
        "num_ids": 32
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    a = sorted(l)\n    for i in range(len(a)-1):\n        if a[i] + 1 == a[i+1]:\n            return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    s = 0\n    e = 0\n    e = e+1\n    while(e < len(l)):\n        if(l[s] == l[e] - 1):\n            e = e + 1\n            continue\n        else:\n            return False\n    return True\n    \nprint(check_Consecutive([1,2,3,4,5,6]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10]))\nprint(check_Consecutive([0,1,2,3,4,5]))\nprint(check_Consecutive([0,1,2,3,4,5,9,10]))\n",
        "num_ids": 170
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return l == sorted(l)\n",
        "num_ids": 11
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if(l[i]+1 == l[i+1]):\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l) + 1)) \n",
        "num_ids": 26
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1 = list(set(l))\n    s = sorted(l1)\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]+1:\n            return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    return (all(l[i]-l[i-1]==1 for i in range(1,len(l))))\n    \n    \n    \n    \n    \n    \ndef remove_duplicates(l): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    \n    return list(set(l))\n    \n    \n    \n    \n    \ndef check_pallindrome(n):\n    '''\n    Write a Python program to check whether a number is a palindrome or not.\n    '''\n    \n    n=str(n)\n    return n==n[::-1]\n    \n    \n    \n    \n    \ndef check_leap_year(n):\n    '''\n    Write a Python program to check if a year is a leap year or not.\n    '''\n    \n    if n%4==0:\n        if n%100==0 and n%400!=0:\n            return False\n        return True\n    return False\n    \n    \n    \n    \n    \ndef check_factors(n):\n    '''\n    Write a Python program to find the factors of a given number.\n    '''\n    \n    factors=[]\n    \n    for i in range(1,n+1):\n        if n%i==0:\n            factors.append(i)\n    return factors\n    \n    \n    \n    \n    \ndef check_armstrong(n):\n    '''\n    Write a Python program to check whether a number is an Armstrong number or not.\n    '''\n    \n    n=str(n)\n    return sum([int(i)**len(n) for i in n])==int(n)\n    \n    \n    \n    \n    \ndef check_fibonacci(n):\n    '''\n    Write a Python program to find the index of Fibonacci number.\n    '''\n    \n    a,b=0,1\n    index=1\n    while True:\n        c=a+b\n        if c<n:\n            a=b\n            b=c\n            index+=1\n        else:\n            break\n    return index\n    \n    \n    \n    \n    \ndef prime_factors(n):\n    '''\n    Write a Python program to find the prime factors of a given number.\n    '''\n    \n    i=2\n    factors=[]\n    while i*i<=n:\n        if n%i==0:\n            factors.append(i)\n            n/=i\n        else:\n            i+=1\n    if n>1:\n        factors.append(int(n))\n    return factors\n    \n    \n    \n    \n    \ndef sum_of_digits(n):\n    '''\n    Write a Python program to compute the sum of the digits of a given number.\n    '''\n    \n    n=str(n)\n    s=0\n    for i in n:\n        s+=int(i)\n    return s\n    \n    \n    \n    \n    \ndef check_perfect_number(n):\n    '''\n    Write a Python program to check whether a given number is perfect or not.\n    '''\n    \n    if n<0:\n        return False\n    sum1=0\n    for i in range(1,n):\n        if n%i==0:\n            sum1+=i\n    return sum1==n\n    \n    \n    \n    \n    \ndef check_anti_prime(n):\n    '''\n    Write a Python program to check whether a given number is an anti-prime or not.\n    '''\n    \n    if n<0:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n    \n    \n    \n    \n    \ndef check_happy_number(n):\n    '''\n    Write a Python program to check whether a given number is a happy number or not.\n    '''\n    \n    def happy(n,sum1):\n        if n==1:\n            return True\n        if n%10==0 or n%10==1:\n            sum1+=1\n        if sum1==10:\n            return False\n        return happy(n//10,sum1)\n    return happy(n,0)\n    \n    \n    \n    \n    \ndef check_strong_number(n):\n    '''\n    Write a Python program to check whether a given number is a strong number or not.\n    '''\n    \n    sum1=0\n    temp=n\n    while temp>0:\n        sum1+=temp%10\n        temp//=10\n    return sum1==n\n    \n    \n    \n    \n    \ndef check_palindrome_number(n):\n    '''\n    Write a Python program to check whether a given number is a palindrome number or not.\n    '''\n    \n    n=str(n)\n    return n==n[::-1]\n    \n    \n    \n    \n    \ndef is_prime(n):\n    '''\n    Write a Python program to check whether a number is prime or not.\n    '''\n    \n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            return False\n    return True\n    \n    \n    \n    \n    \ndef is_prime_list(n):\n    '''\n    Write a Python program to print all Prime numbers from 1 to N.\n    '''\n    \n    for i in range(1,n+1):\n        if is_prime(i):\n            print(i,end=' ')\n    \n    \n    \n    \n    \ndef is_prime_sieve(n):\n    '''\n    Write a Python program to print prime numbers from 1 to n using Sieve of Eratosthenes.\n    '''\n    \n    prime=[True for i in range(n+1)]\n    p=2\n    while p*p<=n:\n        if prime[p]:\n            for i in range(p*p,n+1,p):\n                prime[i]=False\n        p+=1\n    for i in range(2,n+1):\n        if prime[i]:\n            print(i,end=' ')\n            \n            \n            \ndef check_prime_number(n):\n    '''\n    Write a Python program to print the prime numbers which are in the range of 1 to n.\n    '''\n    \n    prime=[True for i in range(n+1)]\n    p=2\n    while p*p<=n:\n        if prime[p]:\n            for i in range(p*p,n+1,p):\n                prime[i]=False\n        p+=1\n    for i in range(2,n+1):\n        if prime[i]:\n            print(i,end=' ')\n            \n            \n            \n            \ndef check_prime_number_list(n):\n    '''\n    Write a Python program to print the prime numbers which are in the range of 1 to n.\n    '''\n    \n    prime=[True for i in range(n+1)]\n    p=2\n    while p*p<=n:\n        if prime[p]:\n            for i in range(p*p,n+1,p):\n                prime[i]=False\n        p+=1\n    prime[0]=False\n    prime[1]=False\n    for i in range(n+1):\n        if prime[i]:\n            print(i,end=' ')\n            \n            \n            \n            \ndef check_prime_number_list_with_sieve_of_eratosthenes(n):\n    '''\n    Write a Python program to print the prime numbers which are in the range of 1 to n.\n    '''\n    \n    prime=[True for i in range(n+1)]\n    p=2\n    while p*p<=n:\n        if prime[p]:\n            for i in range(p*p,n+1,p):\n                prime[i]=False\n        p+=1\n    prime[0]=False\n    prime[1]=False\n    for i in range(n+1):\n        if prime[i]:\n            print(i,end=' ')\n            \n            \n            \n            \ndef check_fibonacci_number(n):\n    '''\n    Write a Python program to check whether a given number is a Fibonacci number or not.",
        "num_ids": 22
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 1\n    start = l[0]\n    for i in range(1,len(l)):\n        if l[i] == l[i-1] + 1:\n            count += 1\n        else:\n            count = 1\n",
        "num_ids": 60
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    try:\n        for i in range(0,len(l)-1):\n            if(l[i+1]-l[i]==1):\n                return True\n        return False\n    except:\n        print(\"Please pass a list as an argument.\")\n    \ndef find_Maximum(l):\n    '''\n    Write a python function to find the maximum number from the given list.\n    '''\n    try:\n        max_num=0\n        for i in range(len(l)):\n            if l[i]>max_num:\n                max_num=l[i]\n        return max_num\n    except:\n        print(\"Please pass a list as an argument.\")\n    \ndef find_Minimum(l):\n    '''\n    Write a python function to find the minimum number from the given list.\n    '''\n    try:\n        min_num=100\n        for i in range(len(l)):\n            if l[i]<min_num:\n                min_num=l[i]\n        return min_num\n    except:\n        print(\"Please pass a list as an argument.\")\n",
        "num_ids": 69
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return max(l) - min(l) == len(l)-1\n",
        "num_ids": 20
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set(test_list1).intersection(test_list2)\n    return tuple(intersection)\n",
        "num_ids": 30
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    list1 = set(test_list1)\n    list2 = set(test_list2)\n    return list(list1.intersection(list2))\n",
        "num_ids": 40
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #return intersection(test_list1, test_list2)\n    return set(test_list1) & set(test_list2)\n",
        "num_ids": 36
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n",
        "num_ids": 22
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_list = []\n    for i in test_list1:\n        for j in test_list2:\n            if i[1] == j[1]:\n                common_list.append(j)\n    return common_list\n",
        "num_ids": 57
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_list = []\n    for x in test_list1:\n        if x in test_list2 and x not in result_list:\n            result_list.append(x)\n    return result_list\n",
        "num_ids": 52
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) == 0 or len(test_list2) == 0:\n        return None\n    return [x for x in test_list1 if x in test_list2]\n",
        "num_ids": 49
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                result.append(i)\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1_set = set(test_list1)\n    test_list2_set = set(test_list2)\n    if len(test_list1) == len(test_list2):\n        print(test_list1_set & test_list2_set)\n    else:\n        print(\"Passed in lists are not of same length\")\n        print(\"Length of list1: \" + str(len(test_list1)))\n        print(\"Length of list2: \" + str(len(test_list2)))\n",
        "num_ids": 128
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Your Code Here\n    test_list1 = tuple(test_list1)\n    test_list2 = tuple(test_list2)\n    result = []\n    for ele in test_list1:\n        if ele in test_list2 and ele not in result:\n            result.append(ele)\n    return tuple(result)\n",
        "num_ids": 81
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    i=0\n    new=''\n    for char in str1:\n        if char == ch:\n            new+=newch\n        else:\n            new+=char\n        i+=1\n    return new\n    \n",
        "num_ids": 53
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for i in range(0,len(str1)):\n        if ch == str1[i]:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str\n",
        "num_ids": 63
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for ch in str1:\n        if ch == ch:\n            newstr += newch\n        else:\n            newstr += ch\n    return newstr\n",
        "num_ids": 45
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = str1.replace(ch,newch)\n    return result\n",
        "num_ids": 20
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #print(\"str1=\",str1)\n    #print(\"ch=\",ch)\n    #print(\"newch=\",newch)\n    for i in range(len(str1)):\n        #print(str1[i])\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n            #print(str1)\n    return str1\n",
        "num_ids": 105
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a list of tuples\n    # return a sorted dictionary\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "num_ids": 41
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n",
        "num_ids": 31
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    sorted_dict = {key: value for key, value in sorted(dict1.items(), key=lambda item: item[1])}\n    return sorted_dict\n    \ndef sort_counter_v2(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    dict1 = {key: value for key, value in sorted(dict1.items(), key=lambda item: item[1])}\n    return dict1\n",
        "num_ids": 40
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    sorted_d = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_d\ndef sort_counter_v2(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k:v for k, v in sorted(dict1.items(), key=lambda x: x[1])}\ndef sort_counter_v3(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\ndef sort_counter_v4(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\ndef sort_counter_v5(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)[0]\ndef sort_counter_v6(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)[1]\n",
        "num_ids": 27
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #sorted(dict1.values())[::-1]\n    return {key: value for key, value in sorted(dict1.items(), key=lambda item: item[1], reverse=True)}\n",
        "num_ids": 50
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1],reverse=True))\ndef check_list(list1):\n    '''\n    Write a function that returns the number of elements that are greater than or equal to the mean value of the list. \n    '''\n    mean = sum(list1)/len(list1)\n    return sum(1 for x in list1 if x>=mean)\ndef check_list_2(list1):\n    '''\n    Write a function that counts the number of elements in the list that are above the mean value.\n    '''\n    mean = sum(list1)/len(list1)\n    return sum(1 for x in list1 if x>mean)\ndef list_index(list1,value):\n    '''\n    Write a function that returns the index of the given element in the list.\n    '''\n    return list1.index(value)\ndef list_index_2(list1,value):\n    '''\n    Write a function that returns the index of the given element in the list.\n    '''\n    return [i for i,x in enumerate(list1) if x == value]\ndef list_first(list1):\n    '''\n    Write a function that returns the first element of the list.\n    '''\n    return list1[0]\ndef list_last(list1):\n    '''\n    Write a function that returns the last element of the list.\n    '''\n    return list1[-1]\ndef list_append(list1,value):\n    '''\n    Write a function that adds an element to the end of the list.\n    '''\n    list1.append(value)\n    return list1\ndef list_extend(list1,list2):\n    '''\n    Write a function that adds all the elements of a list to the end of the current list.\n    '''\n    list1.extend(list2)\n    return list1\ndef list_insert(list1,value,index):\n    '''\n    Write a function that inserts an element to the given index position in the list.\n    '''\n    list1.insert(index,value)\n    return list1\ndef list_remove(list1,value):\n    '''\n    Write a function that removes the first occurence of the given element from the list.\n    '''\n    list1.remove(value)\n    return list1\ndef list_pop(list1):\n    '''\n    Write a function that removes the last element of the list.\n    '''\n    list1.pop()\n    return list1\ndef list_clear(list1):\n    '''\n    Write a function that removes all the elements from the list.\n    '''\n    list1.clear()\n    return list1\ndef list_index_of(list1,value):\n    '''\n    Write a function that returns the first index of the given element in the list.\n    '''\n    return list1.index(value)\ndef list_count(list1,value):\n    '''\n    Write a function that counts the number of times the given element appears in the list.\n    '''\n    return list1.count(value)\ndef list_reverse(list1):\n    '''\n    Write a function that reverses the order of the list.\n    '''\n    list1.reverse()\n    return list1\ndef list_copy(list1):\n    '''\n    Write a function that copies the list.\n    '''\n    list2 = list1[:]\n    return list2\ndef list_sort(list1):\n    '''\n    Write a function that sorts the list.\n    '''\n    list1.sort()\n    return list1\ndef list_index_of_2(list1,value):\n    '''\n    Write a function that returns a list of indexes of the given element in the list.\n    '''\n    return [i for i,x in enumerate(list1) if x == value]\ndef list_remove_all(list1,value):\n    '''\n    Write a function that removes all the occurences of the given element in the list.\n    '''\n    return [x for x in list1 if x!=value]\ndef list_join(list1,list2):\n    '''\n    Write a function that concatenates two lists.\n    '''\n    return list1+list2\ndef list_count_each(list1):\n    '''\n    Write a function that counts the number of times each element appears in the list.\n    '''\n    count_dict = Counter(list1)\n    return count_dict\ndef list_max(list1):\n    '''\n    Write a function that returns the maximum element in the list.\n    '''\n    return max(list1)\ndef list_min(list1):\n    '''\n    Write a function that returns the minimum element in the list.\n    '''\n    return min(list1)\ndef list_average(list1):\n    '''\n    Write a function that returns the average of the elements in the list.\n    '''\n    return sum(list1)/len(list1)\ndef list_clear_2(list1):\n    '''\n    Write a function that returns a list with all the elements removed.\n    '''\n    return list1.copy()\ndef list_concatenate(list1,list2):\n    '''\n    Write a function that concatenates two lists.\n    '''\n    list1.extend(list2)\n    return list1\ndef list_slice(list1,start,stop):\n    '''\n    Write a function that slices the list from the given start index to the given stop index.\n    '''\n    return list1[start:stop]\ndef list_sum(list1):\n    '''\n    Write a function that returns the sum of all the elements in the list.\n    '''\n    return sum(list1)\ndef list_sort_2(list1):\n    '''\n    Write a function that sorts the list in descending order.\n    '''\n    return sorted(list1,reverse=True)\ndef list_comprehension(list1):\n    '''\n    Write a list comprehension to do the same thing as the map function.\n    '''\n    return [x for x in list1]\ndef list_comprehension_2(list1):\n    '''\n    Write a list comprehension to do the same thing as the filter function.\n    '''\n    return [x for x in list1 if x>5]\ndef list_comprehension_3(list1):\n    '''\n    Write a list comprehension to do the same thing as the reduce function.\n    '''\n    return [x for x in list1]\ndef list_comprehension_4(list1):\n    '''\n    Write a list comprehension to do the same thing as the reduce function.\n    '''\n    return [x+1 for x in list1]\ndef list_comprehension_5(list1):\n    '''\n    Write a list comprehension to do the same thing as the reduce function.\n    '''\n    return [x+y for x,y in zip(list1,list1[1:])]\ndef list_comprehension_6(list1):\n    '''\n    Write a list comprehension to do the same thing as the reduce function.\n    '''\n    return [x+y for x,y in zip(list1[1:],list1[2:])]\ndef list_comprehension_7(list1):\n    '''\n    Write a list comprehension to do the same thing as the reduce function.\n    '''\n    return [x+y+z for x,y,z in zip(list1[:-1],list1[1:],list1[2:])]\ndef list_comprehension_8(list1):\n    '''\n    Write a list comprehension to do the same thing as the reduce function.\n    '''\n    return [x*y for x,y in zip(list1,list1[1:])]\ndef list_comprehension_9(list1):\n    '''\n    Write a list comprehension to do the same thing as the reduce function.\n    '''\n    return [x*y*z for x,y,z in zip(list1[:-1],list1[1:],list1[2:])]\ndef list_comprehension_10(list1):\n    '''\n    Write a list comprehension to do the same thing as the reduce functio",
        "num_ids": 18
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    res = sorted(dict1.items(), key = lambda x:x[1], reverse = True)\n    return res\n    \ndef merge_sorted_lists(list1, list2):\n    '''\n    Write a function to merge two lists of dictionaries.\n    '''\n    list3 = list1 + list2\n    list3.sort(key = lambda x: x['marks'])\n    return list3\n    \ndef deffuq_elements(list1):\n    '''\n    Write a function that will return the defference between two lists.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    return list(list1 - list2)\n    \ndef deffuq_elements_sorted(list1, list2):\n    '''\n    Write a function that will return the defference between two lists.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    return sorted(list(list1 - list2))\n    \ndef vowels_counter(s):\n    '''\n    Write a function that counts the vowels in a string.\n    '''\n    return {letter:s.count(letter) for letter in s if letter in 'aeiou'}\n    \ndef vowel_check(str1):\n    '''\n    Write a function to check if a string is a pangram or not.\n    '''\n    vowels = set('aeiou')\n    return vowels.issubset(set(str1.lower()))\n",
        "num_ids": 32
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(sum(sorted(nums)[0:2]))\n",
        "num_ids": 19
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    def my_function(nums):\n        largest = -1 * sys.maxsize\n        smallest = sys.maxsize\n        for num in nums:\n            if num > largest:\n                largest = num\n            if num < smallest:\n                smallest = num\n        return largest+smallest\n    return my_function(nums)\n",
        "num_ids": 82
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #Sums the largest and smallest values in the array and returns them.\n    return sum(sorted(nums)[::-1])\n",
        "num_ids": 34
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    try:\n        def sum_min_max(nums):\n            max_num = nums[0]\n            min_num = nums[0]\n            for i in nums:\n                if i > max_num:\n                    max_num = i\n                elif i < min_num:\n                    min_num = i\n            return print(f'The largest value is {max_num}, while the smallest value is {min_num}')\n        sum_min_max(nums)\n    except TypeError:\n        return print('You must input an array type.')\n    except NameError:\n        return print('You must input an array type.')\n",
        "num_ids": 157
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums_max = max(nums)\n    nums_min = min(nums)\n    print(nums_max + nums_min)\n",
        "num_ids": 40
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sorted_list = sorted(nums)\n    return sum(sorted_list[:2])\n",
        "num_ids": 27
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[len(nums)-1] + nums[0]\n",
        "num_ids": 28
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    biggest = nums[-1]\n    smallest = nums[0]\n    return biggest + smallest\n",
        "num_ids": 36
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n",
        "num_ids": 17
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n",
        "num_ids": 10
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case = string.lower()\n    return lower_case\n",
        "num_ids": 18
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    newstr = \"\"\n    for i in str1:\n        if i.islower() == False:\n            newstr += i\n    return newstr\n",
        "num_ids": 38
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    match = re.findall(r\"[a-z][A-Z]*\",str1)\n    print(match)\n    print(str1)\n    for m in match:\n        str1 = str1.replace(m,\"\")\n    print(str1)\n    return str1\n",
        "num_ids": 71
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = str1.split(sep='_')\n    str_lst = []\n    for i in new_str:\n        if i.isupper():\n            str_lst.append(i)\n    return '_'.join(str_lst)\n",
        "num_ids": 67
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = 'aaaabbbccccd'\n    str_out = ''\n    for c in str1:\n        if c not in str_out:\n            str_out += c\n    str_out = ''.join(str_out)\n    print('Original string: ', str1)\n    print('String after removal of lowercase characters: ', str_out)\n",
        "num_ids": 89
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = ''\n    str1 = str1.lower()\n    for i in range(0, len(str1)):\n        if (str1[i] >= 'a' and str1[i] <= 'z'):\n            str2 += str1[i]\n    return str2\n",
        "num_ids": 72
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r\"\\b[a-z]\\b\", \"\", str1, flags=re.IGNORECASE)\n    \nprint(\"\\nremove_lowercase example:\")\nprint(remove_lowercase(\"test case\"))\nprint(remove_lowercase(\"THIS SHOULD ALL BE LOWERCASE!\"))\nprint(remove_lowercase(\"Remove ALL lowercase substrings from this sentence. But NOT these words: Here\"))\nprint(remove_lowercase(\"Remove ALL lowercase substrings from this sentence. But NOT these words: Here But Not Here Either\"))\n",
        "num_ids": 132
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for i in range(0, len(str1)):\n        if i == len(str1)-1:\n            return str1\n        else:\n            if str1[i].islower() and str1[i+1].islower():\n                str1 = str1.replace(str1[i], '', 1)\n                return remove_lowercase(str1)\n            else:\n                continue\n",
        "num_ids": 97
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2=str1.split()\n    new_str=\"\"\n    for x in str2:\n        for i in x:\n            if(i.isalpha()):\n                new_str=new_str+i\n    return new_str\n    \n    \n",
        "num_ids": 64
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if(str1[i] == str1[j]):\n                print(str1[i])\n                str1 = str1.replace(str1[i] + str1[j], \"\")\n    return str1\n",
        "num_ids": 95
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        n=int(n)\n        while n>0:\n            n=n//10\n        return n\n    except ValueError:\n        return \"Please enter a number\"\n",
        "num_ids": 47
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return int(str(n)[0])\n",
        "num_ids": 28
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n /= 10\n    return n\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n + 1):\n        fact = fact * i\n    return fact\n    \ndef sum_digits(n):\n    '''\n    Write a python function to find the sum of all the digits of a given number.\n    '''\n    num = first_Digit(n)\n    sum = 0\n    while num > 0:\n        rem = num % 10\n        sum = sum + rem\n        num = num / 10\n    return sum\n    \ndef concatenate(s1, s2):\n    '''\n    Write a python function to concatenate two strings.\n    '''\n    return s1 + s2\n    \ndef reverse(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef isPalindrome(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    rev = reverse(s)\n    if (concatenate(s, rev) == s):\n        return True\n    else:\n        return False\n        \n    \ndef frequency(s):\n    '''\n    Write a python function to count the frequency of each character in a string.\n    '''\n    characters = {}\n    for character in s:\n        characters[character] = s.count(character)\n    return characters\n    \ndef frequency_sort(s):\n    '''\n    Write a python function to sort the characters of a string in descending order of their frequencies.\n    '''\n    freq = frequency(s)\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    string = ''\n    for item in sorted_freq:\n        string += item[0] * item[1]\n    return string\n    \ndef RLE(s):\n    '''\n    Write a python function to convert a string into Run-Length Encoding.\n    '''\n    string = ''\n    count = 1\n    for i in range(1, len(s)):\n        if (s[i]!= s[i - 1]):\n            string += s[i - 1] + str(count)\n            count = 0\n        count += 1\n    string += s[len(s) - 1] + str(count)\n    return string\n    \ndef int_to_string(x):\n    '''\n    Write a python function to convert a given number into a string.\n    '''\n    return str(x)\n",
        "num_ids": 9
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0:\n        n = n * (-1)\n    while n >= 10:\n        n = n // 10\n    return n\n",
        "num_ids": 36
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n//10\n    \ndef nth_digit(n, d) :  \n    '''\n    Write a python function to find the nth digit of a given number.\n    '''\n    return (n//(10**(d-1)))%10\n",
        "num_ids": 18
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10**(len(str(n))-1)\n",
        "num_ids": 19
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n // 10\n    return first_digit\n",
        "num_ids": 17
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 0 :\n        i = n%10\n        n = n//10\n    return i\n",
        "num_ids": 27
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    while n >= 10 :\n        n = n / 10\n    return int(n)\n",
        "num_ids": 25
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    for i in str(n):\n        if i!= '-':\n            return i\n            break\n    else:\n        return '-1'\n        pass\n",
        "num_ids": 41
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2==1]\n    \n    \n    \n    \ndef Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2==1]\n    \n",
        "num_ids": 20
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    i=0\n    odd_list=[]\n    while(i<len(list)):\n        if(list[i]%2!=0):\n            odd_list.append(list[i])\n        i+=1\n    return odd_list\n",
        "num_ids": 62
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    l=[]\n    for i in list:\n        if i%2!=0:\n            l.append(i)\n    return l\n",
        "num_ids": 36
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!= 0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [item for item in list if item % 2!= 0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!=0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even=[]\n    odd=[]\n    for x in list:\n        if x%2==0:\n            even.append(x)\n        else:\n            odd.append(x)\n    return odd\nprint(Split([1,2,3,4,5,6,7]))\n",
        "num_ids": 72
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_num = []\n    odd_num = []\n    for num in list:\n        if num % 2 == 0:\n            even_num.append(num)\n        else:\n            odd_num.append(num)\n    return odd_num\n",
        "num_ids": 62
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    # return the odd number\n    return(list[1::2])\n    \n    \n    \ndef SumOddNumbers(list): \n    '''\n    Write a python function which takes a list of integers and only returns the sum of the odd ones.\n    '''\n    \n    # return the sum of the odd numbers\n    return sum(list[1::2])\n",
        "num_ids": 25
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i % 2!= 0:\n            odds.append(i)\n    return odds\n",
        "num_ids": 38
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sumofcubes(n):\n        sum = 0\n        for i in range(1,n+1):\n            sum+=i*i*i\n        return sum\n    \n    def sumofsquares(n):\n        sum = 0\n        for i in range(1,n+1):\n            sum+=i*i\n        return sum\n    \n    sum_of_cubes = sumofcubes(n)\n    sum_of_squares = sumofsquares(n)\n    return abs(sum_of_squares-sum_of_cubes)\n",
        "num_ids": 137
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1,n+1) :\n        sum_cubes += i**3\n        sum_natural += i\n    return (sum_cubes-sum_natural)\n",
        "num_ids": 61
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum = 0\n",
        "num_ids": 15
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)//6 - sum([i**3 for i in range(1,n+1)])\n",
        "num_ids": 39
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    first_n_num = [i**3 for i in range(1,n+1)]\n    return sum(first_n_num) - sum(range(1,n+1))",
        "num_ids": 46
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # code here\n    sum_of_squares = 0\n    sum_of_cubes = 0\n    for i in range(1,n+1):\n        sum_of_squares += i*i\n        sum_of_cubes += i*i*i\n    return (sum_of_cubes**2 - sum_of_squares)\n",
        "num_ids": 86
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 1 :\n        return 1\n    else :\n        return n*(3*n+1)//2 - sum_of_cubes(n)\n    \n",
        "num_ids": 43
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n) :\n        return int(n*(n+1)*(n+2)*(n+3)/6)\n    \n    def sum_of_naturals(n) :\n        return n*(n+1)/2\n",
        "num_ids": 66
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_nums = 0\n    for i in range(1,n+1):\n        sum_of_nums += i\n        sum_of_cubes += i**3\n    return abs(sum_of_nums**2 - sum_of_cubes)\n",
        "num_ids": 78
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural = 0\n    for i in range(1,n+1):\n        sum_of_cubes += i*i*i\n        sum_of_natural += i\n    return abs(sum_of_cubes-sum_of_natural*sum_of_natural)\n",
        "num_ids": 81
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N - 1) :\n        for j in range(i + 1, N) : \n            if (A[i] ^ A[j]) % 2!= 0 : \n                count += 1\n",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if (A[i] ^ A[j]) & 1 : \n                count+=1\n    return count \n",
        "num_ids": 64
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A.sort()\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if(A[i]^A[j]&1) : \n                count += 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if(A[i] ^ A[j] % 2!= 0): \n                count = count + 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] & 1 :\n                count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    from collections import Counter\n    xor = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            xor = A[i] ^ A[j]\n            if xor % 2!= 0 : \n                print((i,j),xor)\n                return xor\n",
        "num_ids": 82
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1 :\n                count += 1\n    return count\nA = [1,2,3,4,5]\nN = len(A)\nprint(find_Odd_Pair(A,N))\n",
        "num_ids": 100
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1) :\n        for j in range(i+1, N) :\n            if (A[i] ^ A[j]) % 2 == 1 :\n                count += 1\n    return count \n",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i + 1, N) :\n            if (A[i] ^ A[j] ) & 1 :\n                count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N) : \n        for j in range(i + 1, N) : \n            if ((A[i] ^ A[j]) & 1) : \n                count += 1\n    return count\n    ",
        "num_ids": 63
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        if string[i].isupper():\n            string[i] = string[i].lower()\n        else:\n            string[i] = string[i].upper()\n    return ''.join(string)\n",
        "num_ids": 71
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    newstring = ''\n    for char in string:\n        newstring = newstring + char.swapcase()\n    return newstring\n",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    uppers = list(string)\n    lowers = list(string)\n    \n    for index in range(0, len(uppers)):\n        if uppers[index].isupper():\n            lowers[index] = uppers[index].lower()\n        else:\n            lowers[index] = uppers[index].upper()\n    \n    return \"\".join(lowers)\n    \ndef toggle_string_second_method(string):\n    '''\n    Write a function to toggle the case of all characters in a string without using any list or loops.\n    '''\n    \n    string = list(string)\n    \n    for index in range(0, len(string)):\n        if string[index].islower():\n            string[index] = string[index].upper()\n        else:\n            string[index] = string[index].lower()\n    \n    return \"\".join(string)\n    \ndef get_substrings(string):\n    '''\n    Write a function that takes a string as a parameter and returns a list of substrings of that string.\n    '''\n    # This solution is O(n^2) in time and O(n^2) in space.\n    # I could also do it with a loop that passes every element in the string\n    # and adds it to the list.\n    \n    substrings = list()\n    for index in range(0, len(string)):\n        for subindex in range(index, len(string)):\n            substrings.append(string[index:subindex + 1])\n            \n    return substrings\n    \ndef get_substrings_second_method(string):\n    '''\n    Write a function that takes a string as a parameter and returns a list of substrings of that string.\n    '''\n    # This solution is O(n^2) in time and O(n^2) in space.\n    # I could also do it with a loop that passes every element in the string\n    # and adds it to the list.\n    \n    substrings = list()\n    length = 1\n    \n    while length <= len(string):\n        for index in range(0, len(string) - length + 1):\n            substrings.append(string[index:index + length])\n            \n        length += 1\n        \n    return substrings\n    \ndef all_substrings(string):\n    '''\n    Write a function that takes a string as a parameter and returns a list of substrings of that string.\n    '''\n    # This solution is O(n^2) in time and O(n^2) in space.\n    # I could also do it with a loop that passes every element in the string\n    # and adds it to the list.\n    \n    substrings = list()\n    length = 1\n    \n    while length <= len(string):\n        for index in range(0, len(string) - length + 1):\n            substrings.append(string[index:index + length])\n            \n        length += 1\n        \n    return substrings\n    \ndef reverse_string(string):\n    '''\n    Write a function that takes a string as a parameter and returns a reversed copy of that string.\n    '''\n    # This solution is O(n) in time and O(n) in space.\n    \n    reversed = list()\n    for index in range(0, len(string)):\n        reversed.append(string[len(string) - index - 1])\n        \n    return \"\".join(reversed)\n    \ndef reverse_string_with_loop(string):\n    '''\n    Write a function that takes a string as a parameter and returns a reversed copy of that string.\n    '''\n    # This solution is O(n) in time and O(n) in space.\n    \n    reversed = list()\n    for index in range(0, len(string)):\n        reversed.append(string[index])\n        \n    return \"\".join(reversed)\n    \ndef replace_string(string):\n    '''\n    Write a function that takes a string as a parameter and returns a copy of that string with all lowercase letters replaced with uppercase letters.\n    '''\n    # This solution is O(n) in time and O(n) in space.\n    \n    lowercase = list()\n    uppercase = list()\n    \n    for index in range(0, len(string)):\n        if string[index].islower():\n            lowercase.append(string[index])\n        else:\n            uppercase.append(string[index])\n            \n    return \"\".join(lowercase) + \"\".join(uppercase)\n    \ndef replace_string_with_two_loops(string):\n    '''\n    Write a function that takes a string as a parameter and returns a copy of that string with all lowercase letters replaced with uppercase letters.\n    '''\n    # This solution is O(n) in time and O(n) in space.\n    \n    lowercase = list()\n    uppercase = list()\n    \n    for index in range(0, len(string)):\n        if string[index].islower():\n            lowercase.append(string[index])\n        else:\n            uppercase.append(string[index])\n            \n    return \"\".join(lowercase) + \"\".join(uppercase)\n    \ndef find_unique_letters(string):\n    '''\n    Write a function that takes a string as a parameter and returns a list with all the letters that are not duplicated in the string.\n    '''\n    # This solution is O(n) in time and O(n) in space.\n    \n    unique_letters = list()\n    \n    for index in range(0, len(string)):\n        if string[index] not in unique_letters:\n            unique_letters.append(string[index])\n    \n    return unique_letters\n    \ndef find_unique_letters_with_counter(string):\n    '''\n    Write a function that takes a string as a parameter and returns a list with all the letters that are not duplicated in the string.\n    '''\n    # This solution is O(n) in time and O(n) in space.\n    \n    unique_letters = collections.Counter(string)\n    \n    return unique_letters\n    \ndef find_unique_letters_with_dict(string):\n    '''\n    Write a function that takes a string as a parameter and returns a list with all the letters that are not duplicated in the string.\n    '''\n    # This solution is O(n) in time and O(n) in space.\n    \n    unique_letters = dict()\n    \n    for index in range(0, len(string)):\n        if string[index] not in unique_letters:\n            unique_letters[string[index]] = True\n            \n    return unique_letters.keys()\n    \ndef get_unique_letters(string):\n    '''\n    Write a function that takes a string as a parameter and returns a list with all the letters that are not duplicated in the string.\n    '''\n    # This solution is O(n) in time and O(n) in space.\n    \n    unique_letters = set()\n    \n    for index in range(0, len(string)):\n        if string[index] not in unique_letters:\n            unique_letters.add(string[index])\n            \n    return list(unique_letters)\n    \ndef count_appearances(string):\n    '''\n    Write a function that takes a string as a parameter and returns a dictionary with all the characters from the string as keys and their counts as values.\n    '''\n    # This solution is O(n) in time and O(n) in space.\n    \n    appearances = dict()\n    \n    for index in range(0, len(string)):\n        if string[index] in appearances:\n            appearances[string[index]] += 1\n        else:\n            appearances[string[index]] = 1\n            \n    return appearances\n    \ndef find_longest_palindrome(string):\n    '''\n    Write a function that takes a string as a parameter and returns the longest palindrome contained in that string.\n    '''\n    # This solution is O(n^2) in time and O(n) in space.\n    \n    longest_palindrome = \"\"\n    \n    for index in range(0, len(string)):\n        for index2 in range(index, len(string)):\n            if string[index:index2 + 1] == string[index:index2 + ",
        "num_ids": 87
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string_length = len(string)\n    if string_length < 2:\n        return string\n    else:\n        return string[0].upper() + string[1:]\n",
        "num_ids": 43
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(map(lambda x:x.upper() if x.islower() else x.lower(), string))\n",
        "num_ids": 31
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    print(string.swapcase())\n",
        "num_ids": 12
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = []\n    for char in string:\n        if char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char.upper())\n    return ''.join(result)\n",
        "num_ids": 55
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([''.join([str(c.upper() if c.islower() else c.lower()) for c in s]) for s in string])\n    \n    \n",
        "num_ids": 44
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def toggle_helper(string, i):\n        if i == len(string) - 1:\n            return string\n        else:\n            return toggle_helper(string[:i] + string[i].swapcase() + string[i+1:], i+1)\n    return toggle_helper(string, 0)\n",
        "num_ids": 80
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    import math\n    n1 = str(n1)\n    n2 = str(n2)\n    def find_diff(n1, n2):\n        diff = 0\n        for i in range(0, len(n1)):\n            diff += abs(int(n1[i])-int(n2[i]))\n        return diff\n    return find_diff(n1,n2)\n    \ndef is_anagram(n1,n2):\n    '''\n    Write a python function to check whether two strings are anagrams of each other.\n    Hint: An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n    '''\n    import collections\n    n1 = str(n1)\n    n2 = str(n2)\n    if len(n1)!= len(n2):\n        return False\n    else:\n        n1 = sorted(n1)\n        n2 = sorted(n2)\n        if collections.Counter(n1) == collections.Counter(n2):\n            return True\n        else:\n            return False\n            \ndef find_factors(n):\n    '''\n    Write a Python function, find_factors() to find all the factors of a given number. \n    The function should return a list containing all the factors of the given number.\n    '''\n    if n == 1:\n        return [1]\n    else:\n        factors = []\n        for i in range(1, n+1):\n            if n%i == 0:\n                factors.append(i)\n        return factors\n    \ndef is_prime(n):\n    '''\n    Write a Python function, is_prime(), to check whether a given number is a prime or not. \n    The function should return True if the number is prime. Else it should return false.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i == 0:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    while(n1!= 0 or n2!= 0):\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    return sum\n",
        "num_ids": 57
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2))])\n",
        "num_ids": 36
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # digit_distance_nums(n1 = 20, n2 = 21)\n    # digit_distance_nums(n1 = 11111111111, n2 = 22222222222)\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    if len(n1_list) < len(n2_list):\n        n1_list.extend([0]*(len(n2_list)-len(n1_list)))\n    else:\n        n2_list.extend([0]*(len(n1_list)-len(n2_list)))\n    distance_list = []\n    for i in range(len(n1_list)):\n        distance_list.append(abs(int(n1_list[i])-int(n2_list[i])))\n    return sum(distance_list)\n",
        "num_ids": 215
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    assert isinstance(n1, int)\n    assert isinstance(n2, int)\n",
        "num_ids": 24
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(n1%10 - n2%10) for n1, n2 in zip(str(n1), str(n2))])\n",
        "num_ids": 39
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # check if n1 is smaller than n2\n    if n1 < n2:\n        temp = n1\n        n1 = n2\n        n2 = temp\n",
        "num_ids": 42
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2)))\n",
        "num_ids": 35
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str(n1), str(n2)))\n",
        "num_ids": 39
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(x) - int(y)) for x, y in zip(str(n1), str(n2))])\n",
        "num_ids": 36
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -float('inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum = current_sum + a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n",
        "num_ids": 85
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -999999999999999999\n    max_ending_here = 0\n    for i in range(0,size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n",
        "num_ids": 110
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(0, size):\n        temp_sum = 0\n        for j in range(i, size):\n            temp_sum += a[j]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n    return max_sum\n",
        "num_ids": 74
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    temp_sum = 0\n    for i in range(0, size):\n        temp_sum += a[i]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n        if temp_sum < 0:\n            temp_sum = 0\n    return max_sum\n",
        "num_ids": 79
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    start = 0\n    end = 0\n    sum = 0\n    for i in range(size):\n        sum = sum + a[i]\n        if sum > max_sum:\n            max_sum = sum\n            start = end\n            end = i\n    return max_sum, start, end\n",
        "num_ids": 79
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    \n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n",
        "num_ids": 107
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize the max so far\n    max_so_far = 0\n    # Initialize the max to be the first element\n    max_ending_here = 0\n",
        "num_ids": 41
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    for i in range(1, len(a)):\n        if a[i] > a[i-1] + a[i]:\n            a[i] = a[i-1] + a[i]\n        if a[i] > max_sum:\n            max_sum = a[i]\n    return max_sum\n",
        "num_ids": 91
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    return sum(a[0:size])\n",
        "num_ids": 13
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    max_till = a[0]\n    for i in range(1, size):\n        max_till = max(a[i], max_till+a[i])\n        if max_till > max_sum:\n            max_sum = max_till\n    return max_sum\n",
        "num_ids": 84
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    assert isinstance(test_tup1, tuple), 'Input argument not a tuple'\n    assert isinstance(test_tup2, tuple), 'Input argument not a tuple'\n",
        "num_ids": 44
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    sorted_list = list(set(test_tup1).union(set(test_tup2)))\n    sorted_list.sort()\n    return tuple(sorted_list)\n",
        "num_ids": 48
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n",
        "num_ids": 26
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set_union = set(test_tup1).union(set(test_tup2))\n    return tuple(sorted(set_union))\n",
        "num_ids": 38
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    union_list = test_list1 + test_list2\n    union_list.sort()\n    return tuple(union_list)\n",
        "num_ids": 64
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    \n    return(sorted(set(test_tup1 + test_tup2)))\n",
        "num_ids": 57
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1).union(set(test_tup2)))\n    union_list.sort()\n    return tuple(union_list)\n",
        "num_ids": 45
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #list comprehension \n    #union_tup = tuple(set(test_tup1).union(set(test_tup2)))\n    union_tup = tuple([item for item in sorted(list(set(test_tup1).union(set(test_tup2))))])\n",
        "num_ids": 72
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return set(test_tup1).union(set(test_tup2))\n",
        "num_ids": 23
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1).union(test_tup2)))\n",
        "num_ids": 25
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lenlst = len(lst)\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    lst4 = []\n    lst5 = []\n    lst6 = []\n    lst7 = []\n    for i in range(lenlst):\n        if type(lst[i]) == list:\n            lst1.append(len(lst[i]))\n        if type(lst[i]) == tuple:\n            lst2.append(len(lst[i]))\n        if type(lst[i]) == set:\n            lst3.append(len(lst[i]))\n        if type(lst[i]) == str:\n            lst4.append(len(lst[i]))\n        if type(lst[i]) == dict:\n            lst5.append(len(lst[i]))\n        if type(lst[i]) == range:\n            lst6.append(len(lst[i]))\n        if type(lst[i]) == frozenset:\n            lst7.append(len(lst[i]))\n    if len(lst1)!= 0:\n        return(max(lst1))\n    if len(lst2)!= 0:\n        return(max(lst2))\n    if len(lst3)!= 0:\n        return(max(lst3))\n    if len(lst4)!= 0:\n        return(max(lst4))\n    if len(lst5)!= 0:\n        return(max(lst5))\n    if len(lst6)!= 0:\n        return(max(lst6))\n    if len(lst7)!= 0:\n        return(max(lst7))\n",
        "num_ids": 432
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    if len(lst) == 0:\n        return max_length\n    else:\n        max_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length\n",
        "num_ids": 90
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        max_len = max(max_len, len(lst[i]))\n    return max_len\n",
        "num_ids": 48
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    temp=[]\n    max_len=0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if len(lst[i:j])>=max_len:\n                temp=lst[i:j]\n                max_len=len(lst[i:j])\n    print(max_len,temp)\n",
        "num_ids": 98
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len=0\n    for i in range(0,len(lst)):\n        cnt=0\n        for j in range(i,len(lst)):\n            if lst[j] not in lst[i:j]:\n                cnt+=1\n        if cnt>max_len:\n            max_len=cnt\n    return max_len\n",
        "num_ids": 92
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    temp_lst = []\n    for i in range(len(lst)):\n        if(lst[i] == None):\n            continue\n        temp_lst.append(lst[i])\n        if(len(temp_lst) > max_length):\n            max_length = len(temp_lst)\n            temp_lst = []\n    return max_length\n",
        "num_ids": 102
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    sublist_lengths = []\n    for sublist in lst:\n        sublist_lengths.append(len(sublist))\n    for i in range(len(sublist_lengths)):\n        max_length = max(max_length, sublist_lengths[i])\n    return max_length\n",
        "num_ids": 84
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_lst=0\n    \n    for sublist in lst:\n        max_lst = max(max_lst,len(sublist))\n    return max_lst\n",
        "num_ids": 47
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    temp_list = []\n    \n    max_length = 0\n    \n    for i in lst:\n        \n        if isinstance(i, list):\n            temp_list.append(i)\n        \n        else:\n            \n            if len(temp_list) > 0:\n                max_length = max(max_length, len(temp_list))\n                temp_list = []\n    \n    if len(temp_list) > 0:\n        max_length = max(max_length, len(temp_list))\n    \n    return max_length\n",
        "num_ids": 137
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = r'\\\"(.*?)\\\"'\n    result = re.findall(regex, text)\n    if len(result) == 0:\n        return False\n    else:\n        return result\n",
        "num_ids": 51
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    a = re.findall(\"\\\"[a-zA-Z0-9]*\\\"\", text)\n    return a\n",
        "num_ids": 32
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\"[^\"\\n\\t\\\\]*\"|\\'[^\\'\\n\\t\\\\]*\\'', text)\n",
        "num_ids": 39
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = re.compile(r'\"[^\"]*\"')\n    values = regex.findall(text)\n    return values\n",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.search(r'\"([^\"]*)\"', text)\n    if match:\n        return match.group(1)\n    else:\n        return None\ndef values_not_in_text(text, val_list):\n    '''\n    Write a function to return all values from a list that are not in a text.\n    '''\n    return [val for val in val_list if val not in text]\ndef extract_all(text, val_list):\n    '''\n    Write a function to extract all values from a list that are in a text.\n    '''\n    return [val for val in val_list if val in text]\ndef is_float(text):\n    '''\n    Write a function to check if a string is a float.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\ndef is_int(text):\n    '''\n    Write a function to check if a string is an integer.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\ndef extract_numbers(text):\n    '''\n    Write a function to extract all floating-point numbers from a string.\n    '''\n    return [float(val) for val in re.findall(r'[-+]?\\d*\\.\\d+|\\d+', text)]\ndef extract_characters(text, char_list):\n    '''\n    Write a function to extract all characters from a list that are in a text.\n    '''\n    return [val for val in char_list if val in text]\ndef is_upper(text):\n    '''\n    Write a function to check if all characters in a text are upper case.\n    '''\n    return all([char.isupper() for char in text])\ndef is_lower(text):\n    '''\n    Write a function to check if all characters in a text are lower case.\n    '''\n    return all([char.islower() for char in text])\ndef is_title(text):\n    '''\n    Write a function to check if all words in a text start with a capital letter.\n    '''\n    return all([char.istitle() for char in text])\ndef is_alpha(text):\n    '''\n    Write a function to check if all characters in a text are alphabetic.\n    '''\n    return all([char.isalpha() for char in text])\ndef is_digit(text):\n    '''\n    Write a function to check if all characters in a text are digits.\n    '''\n    return all([char.isdigit() for char in text])\ndef is_punct(text):\n    '''\n    Write a function to check if all characters in a text are punctuation.\n    '''\n    return all([char.isprintable() for char in text])\ndef space_remover(text):\n    '''\n    Write a function to remove all leading and trailing spaces from a string.\n    '''\n    return text.strip()\ndef char_counter(text, char):\n    '''\n    Write a function to count all characters in a text, excluding spaces.\n    '''\n    return len(re.sub(r'[^\\s]', '', text))\ndef extract_emails(text):\n    '''\n    Write a function to extract all email addresses from a string.\n    '''\n    return re.findall(r'[\\w\\.-]+@[\\w\\.-]+', text)\ndef is_palindrome(text):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return text == text[::-1]\ndef is_anagram(text1, text2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return sorted(text1) == sorted(text2)\ndef word_counter(text, word):\n    '''\n    Write a function to count all instances of a word in a text.\n    '''\n    return text.count(word)\ndef extract_emails_from_file(filepath):\n    '''\n    Write a function to extract all email addresses from a file.\n    '''\n    with open(filepath) as file:\n        return re.findall(r'[\\w\\.-]+@[\\w\\.-]+', file.read())\ndef replace_last(text, old, new):\n    '''\n    Write a function to replace the last instance of a character/string in a text with another string.\n    '''\n    return text[:text.rfind(old)] + new\ndef replace_all(text, old, new):\n    '''\n    Write a function to replace all instances of a character/string in a text with another string.\n    '''\n    return text.replace(old, new)\ndef is_pangram(text):\n    '''\n    Write a function to check if a text is a pangram.\n    '''\n    return set(text.lower()) >= set('abcdefghijklmnopqrstuvwxyz')\ndef is_pangram_solution1(text):\n    '''\n    Write a function to check if a text is a pangram.\n    '''\n    return set(text.lower()) >= set(string.ascii_lowercase)\ndef is_pangram_solution2(text):\n    '''\n    Write a function to check if a text is a pangram.\n    '''\n    return len(set(text.lower())) == 26\ndef is_pangram_solution3(text):\n    '''\n    Write a function to check if a text is a pangram.\n    '''\n    return len(set(text.lower()) - set(string.ascii_lowercase)) == 0\ndef is_pangram_solution4(text):\n    '''\n    Write a function to check if a text is a pangram.\n    '''\n    return len(set(text.lower()) - set(string.ascii_lowercase)) == 0\ndef split_string(text, split_list):\n    '''\n    Write a function to split a string into a list.\n    '''\n    return re.split('|'.join(split_list), text)\ndef check_sentence(text):\n    '''\n    Write a function to check if a sentence contains two consecutive periods.\n    '''\n    return text.count('..') > 0\ndef check_sentence_solution1(text):\n    '''\n    Write a function to check if a sentence contains two consecutive periods.\n    '''\n    return '..' in text\ndef check_sentence_solution2(text):\n    '''\n    Write a function to check if a sentence contains two consecutive periods.\n    '''\n    return text.endswith('..')\ndef check_sentence_solution3(text):\n    '''\n    Write a function to check if a sentence contains two consecutive periods.\n    '''\n    return text.endswith('..') or text.endswith('.. ')\ndef is_isogram(text):\n    '''\n    Write a function to check if a string is an isogram.\n    '''\n    return len(set(text.lower())) == len(text.lower())\ndef is_isogram_solution1(text):\n    '''\n    Write a function to check if a string is an isogram.\n    '''\n    return len(set(text.lower())) == len(text.lower())\ndef is_isogram_solution2(text):\n    '''\n    Write a function to check if a string is an isogram.\n    '''\n    return len(set(text.lower())) == len(text.lower())\ndef is_isogram_solution3(text):\n    '''\n    Write a function to check if a string is an isogram.\n    '''\n    return len(text.lower()) == len(set(text.lower()))\ndef is_isogram_solution4(text):\n    '''\n    Write a function to check if a string is an isogram.\n    '''\n    return len(set(text.lower())) == len(text.lower())\ndef is_isogram_solution5(text):\n    '''\n    Write a function to check if a string is an isogram.\n    '''\n    text = text.lower()\n    for cha",
        "num_ids": 13
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    value = pattern.findall(text)\n    return value\n",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\\"(.+)\\\"', text)\n",
        "num_ids": 20
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\"([^\"]*)\"', text)\n",
        "num_ids": 21
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # <YOUR CODE HERE>\n    return re.findall(r'\\\"\\w+\\\"',text)\n",
        "num_ids": 29
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"\\d+\"')\n    return pattern.findall(text)\n",
        "num_ids": 27
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    odd = 0\n    even = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                even = even + 1\n            else:\n                odd = odd + 1\n    return even,odd\n",
        "num_ids": 70
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dicti = {}\n    for i in range(n):\n        if arr[i] in dicti:\n            dicti[arr[i]] += 1\n        else:\n            dicti[arr[i]] = 1\n    sum = 0\n    for key, value in dicti.items():\n        sum += (value*(value-1))/2\n    return int(sum)\n    \ndef all_substrings(s):\n    '''\n    Write a python function which takes a string and returns all possible substrings of that string in the form of a list.\n    '''\n    arr = []\n    arr.append(s)\n    for i in range(1,len(s)):\n        arr.append(s[i:])\n    return arr\n",
        "num_ids": 44
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    x=set(arr)\n    x.discard(0)\n    y=list(x)\n    counter=0\n    for i in range(len(y)):\n        for j in range(i+1,len(y)):\n            if y[i]!=y[j]:\n                counter+=1\n    print(counter)\n    return counter\ncount_Pairs([1,2,3,4,5,6,7],7)\n",
        "num_ids": 110
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #arr = [2,3,6,5,7,6,8,7,10]\n    #n = len(arr)\n    pairs = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                pairs +=1\n    return pairs\n",
        "num_ids": 88
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    arr.sort()\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # trivial case\n    if n < 2:\n        return 0\n    \n    # Counting pairs whose first element is smaller than second\n    num_smaller = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                num_smaller += 1\n    \n    # Counting pairs whose first element is greater than second\n    num_greater = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] > arr[i]:\n                num_greater += 1\n    \n    return num_smaller + num_greater",
        "num_ids": 161
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if (i!= j and arr[i]!= arr[j]):\n                count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    sum=0\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                sum+=1\n                \n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2002
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Your code here\n    c=0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if arr[i]!= arr[j]: \n                c+=1\n    return c \n  \n  ",
        "num_ids": 66
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \n    \ndef join(char_list):\n    '''\n    Write a python function to join a list of characters.\n    '''\n    return ''.join(char_list)\n",
        "num_ids": 13
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\ndef match_words(word1, word2):\n    '''\n    Write a function that accepts two words and returns True if they are anagrams, False otherwise.\n    '''\n    return sorted(split(word1)) == sorted(split(word2))\ndef is_anagram(string1, string2):\n    '''\n    Write a python function which accepts two strings and returns True if they are anagrams, False otherwise.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    for char in string1:\n        if char not in string2:\n            return False\n    return True\ndef are_anagrams(strings):\n    '''\n    Write a python function which accepts a list of strings and returns True if all the lists are anagrams, False otherwise.\n    '''\n    if len(strings) < 2:\n        return False\n    for i in range(1, len(strings)):\n        if not is_anagram(strings[i-1], strings[i]):\n            return False\n    return True\ndef is_palindrome(string):\n    '''\n    Write a function which accepts a string and returns True if it is a palindrome, False otherwise.\n    '''\n    if len(string) < 2:\n        return True\n    else:\n        return string[0] == string[-1] and is_palindrome(string[1:-1])\ndef is_palindrome_recursive(string):\n    '''\n    Write a recursive function which accepts a string and returns True if it is a palindrome, False otherwise.\n    '''\n    return True if is_palindrome(string) else False\ndef is_palindrome_recursive_helper(string, left, right):\n    '''\n    Write a recursive helper function that accepts a string and two indices.\n    '''\n    if left >= right:\n        return True\n    else:\n        return string[left] == string[right] and is_palindrome_recursive_helper(string, left+1, right-1)\ndef is_palindrome_recursive(string):\n    '''\n    Write a recursive function which accepts a string and returns True if it is a palindrome, False otherwise.\n    '''\n    return is_palindrome_recursive_helper(string, 0, len(string)-1)\ndef factorial(n):\n    '''\n    Write a function which accepts a number and returns that number's factorial.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef reverse(s):\n    '''\n    Write a function which accepts a string and returns that string in reversed order.\n    '''\n    return s[::-1]\ndef remove_vowels(string):\n    '''\n    Write a function which accepts a string and returns that string with all vowels removed.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in string:\n        if char in vowels:\n            string = string.replace(char, '')\n    return string\ndef is_anagram_of_palindrome(string):\n    '''\n    Write a function which accepts a string and returns True if it is an anagram of a palindrome, False otherwise.\n    '''\n    return is_anagram(string, reverse(string))",
        "num_ids": 15
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n",
        "num_ids": 13
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return 0 if n == 0 else n % 10 + sum_digits(n // 10)\n",
        "num_ids": 24
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 29
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(int(n / 10))\n",
        "num_ids": 42
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n!= 0:\n        s += n % 10\n        n //= 10\n    return s\n",
        "num_ids": 32
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(list(map(int, list(str(n)))))\n",
        "num_ids": 20
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s=0\n    for d in str(n):\n        s+=int(d)\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 29
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    if len(list1) == 1:\n        return True\n    if list1[0] > list1[1]:\n        return False\n    return issort_list(list1[1:])\n",
        "num_ids": 64
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] < list1[i+1]:\n            pass\n        else:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    return list1 == sorted(list1)\n",
        "num_ids": 28
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    sort_bool = True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            sort_bool = False\n    return sort_bool\n",
        "num_ids": 54
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if(list1[i]>list1[i+1]):\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return \"List is Sorted\"\n    else:\n        return \"List is not Sorted\"\n",
        "num_ids": 36
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    is_sorted = True\n    i = 0\n    while i < (len(list1) - 1) and is_sorted:\n        if list1[i] > list1[i + 1]:\n            is_sorted = False\n        i += 1\n    return is_sorted\n",
        "num_ids": 71
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    return issort_list(list1[1:])\n",
        "num_ids": 50
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n",
        "num_ids": 13
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_dict = {}\n        empty_list.append(empty_dict)\n    return empty_list\n",
        "num_ids": 43
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if isinstance(length, int) == False:\n        return \"Error: length must be an integer!\"\n    else:\n        lst = [{} for i in range(length)]\n        return lst\n",
        "num_ids": 51
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    n = length\n    return [{} for _ in range(n)]\n",
        "num_ids": 20
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length <= 0:\n        return []\n    return [{} for i in range(length)]\n",
        "num_ids": 26
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # list1 = [['b','c'],['a','d','c'],['a','f','g']]\n    list1 = sorted(list1,key=len)\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "num_ids": 66
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key = str.lower)\n",
        "num_ids": 16
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # write your function here\n    # # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n    def sort_list(list1):\n        # \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d \u043e\u0434\u0438\u043d \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n        if len(list1) == 1:\n            return list1[0]\n        else:\n            # \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0441\u043f\u0438\u0441\u043a\u0430\n            sorted_list = []\n            # \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 \u043f\u043e\u0441\u043b\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043e\u0434\u0438\u043d \u044d\u043b\u0435\u043c\u0435\u043d\u0442\n            for i in range(len(list1)):\n                sorted_list.append(sort_list(list1[i]))\n            return sorted_list\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u043b\u0438\u0441\u0442 \u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0438 \u043e\u043d \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043f\u043e\u0434\u0441\u043f\u0438\u0441\u043a\u043e\u0432\n    # \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u043b\u0438\u0441\u0442 \u043d\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0438 \u043e\u043d \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n    if len(list1) == 0:\n        return None\n    elif isinstance(list1[0], str) == True:\n        return list1\n    else:\n        # \u0418\u043d\u0430\u0447\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 \u043f\u043e\u0441\u043b\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043e\u0434\u0438\u043d \u044d\u043b\u0435\u043c\u0435\u043d\u0442\n        return sort_list(list1)",
        "num_ids": 676
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sort_list = []\n    for list in list1:\n        new_list = sorted(list)\n        sort_list.append(new_list)\n    return sort_list\n    \ndef sort_sublists2(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists using a \n    lambda function.\n    '''\n    sort_list = []\n    for list in list1:\n        new_list = sorted(list, key = lambda x: x[0])\n        sort_list.append(new_list)\n    return sort_list\n",
        "num_ids": 54
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    import operator\n    #sort each sublist by length\n    list1.sort(key=len)\n    #return sorted list\n    return list1\n    ",
        "num_ids": 38
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n    return list1\n",
        "num_ids": 21
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n        \n    return list1\n",
        "num_ids": 25
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for x in list1:\n        x.sort()\n        list2.append(x)\n    return list2\n",
        "num_ids": 36
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for item in list1:\n        item.sort()\n    return list1\n",
        "num_ids": 21
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for list1 in list1:\n        list1.sort()\n    return list1\n    \nsort_sublists([\"AAA\",\"BB\",\"CCC\"])\n",
        "num_ids": 39
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    seen = set()\n",
        "num_ids": 13
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    duplicates = set()\n    uniques = []\n",
        "num_ids": 16
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    a = set(nums)\n    a = list(a)\n    return a\n",
        "num_ids": 23
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # for l in nums:\n    #     if len(l) > 2:\n    #         return False\n    return len(nums) == len(set([x for l in nums for x in l]))\n",
        "num_ids": 54
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = set(nums)\n    return unique\n",
        "num_ids": 15
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Sort the lists and take the first unique number as the sorted list is always unique.\n    return list(set().union(*sorted(set(x) for x in nums)))\n",
        "num_ids": 44
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = list(set(nums))\n    return unique_nums\n",
        "num_ids": 23
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # YOUR CODE HERE\n    # need to deal with the case when nums is an empty list\n    if len(nums) == 0:\n        return []\n    # init a dictionary to store the number of times each number occurs\n    dict_ = {}\n    for num in nums[0]:\n        dict_[num] = nums[0].count(num)\n    # use set() to remove duplicate values\n    unique = set(num for num in dict_)\n    result = []\n    for i in unique:\n        result.append([i]*dict_[i])\n    return result\n",
        "num_ids": 140
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    uniques = []\n    for num in nums:\n        if num not in uniques:\n            uniques.append(num)\n    return uniques\n",
        "num_ids": 39
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Sort the list of lists\n    nums.sort()\n    # Store the numbers that we need to return\n    unique_nums = []\n    # Assign the first number of the list to an initial value\n    num = nums[0]\n    # For every number in the list\n    for i in range(len(nums)):\n        # If the current number is not the same as the previous number\n        if nums[i]!= num:\n            # Add the number to the list of numbers to return\n            unique_nums.append(nums[i])\n            # Store the current number as the new previous number\n            num = nums[i]\n    return unique_nums\n",
        "num_ids": 164
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(operator.mul, list(set(list_data)), 1)\n",
        "num_ids": 22
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for x in list_data:\n        product *= x\n    return product\n",
        "num_ids": 26
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    my_set = set(list_data)\n    result = 1\n    for item in my_set:\n        result *= item\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1,3,5,7,6,4,8,9,1]\n    print(list_data)\n    sum = 1\n    for x in list_data:\n        sum = sum * x\n    print(sum)\n",
        "num_ids": 62
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return np.prod(list(set(list_data)))\n",
        "num_ids": 18
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_product = 1\n    for i in list_data:\n        unique_product *= i\n    return unique_product\n    # complete this function\n    \ndef common_product(list_data):\n    '''\n    Write a python function to calculate the product of the common numbers in a given list.\n    '''\n    common_product = 1\n    for i in list_data:\n        if list_data.count(i) >= 2:\n            common_product *= i\n    return common_product\n    # complete this function\n    \ndef product_of_common_unique(list_data):\n    '''\n    Write a python function to calculate the product of the common numbers and the unique numbers in a given list.\n    '''\n    return common_product(list_data) * unique_product(list_data)\n    # complete this function\n    ",
        "num_ids": 29
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    print(unique_list)\n    product = 1\n    for num in unique_list:\n        product *= num\n    print(product)\n    return product\n",
        "num_ids": 76
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    nums = []\n    for i in list_data:\n        if i not in nums:\n            nums.append(i)\n    return nums\n",
        "num_ids": 40
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_product = 1\n    for value in list_data:\n        list_product = list_product * value\n    return list_product\n",
        "num_ids": 35
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [2, 4, 5, 2, 4, 3, 3, 5]\n    unique_data = set(list_data)\n    product = 1\n    for num in unique_data:\n        product = product * num\n    print(product)\n",
        "num_ids": 64
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 2*3.14*r**2\n",
        "num_ids": 24
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    a = (2*pi*r*h) + (2*pi*r**2)\n    return a\n",
        "num_ids": 36
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = (2*pi*r*h) + (2*pi*r*r)\n    return surface_area\n",
        "num_ids": 33
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    return pi * (r**2) * h\n",
        "num_ids": 21
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=3.14159\n    sa=2*pi*r*h+2*pi*r**2\n    return sa\n",
        "num_ids": 33
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (2*3.14*r*h)+(2*3.14*r**2)\n    return area\n",
        "num_ids": 32
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    return 2*pi*r*h + 2*pi*r**2\n",
        "num_ids": 26
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2 * math.pi * r * (r + h)\n    return surfacearea\n",
        "num_ids": 25
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    surface_area = 2*pi*r*(r+h)\n    return surface_area\n",
        "num_ids": 31
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    SA= 2*pi*r*h + 2*pi*r**2\n    return SA\n",
        "num_ids": 25
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A)\n    m = len(B)\n    for i in range(0, m-n+1):\n        if sorted(A) == sorted(B[i:i+n]):\n            return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(len(B) > len(A)):\n        return False\n    for i in range(0, len(B)):\n        if B[i] == A[0]:\n            if is_Sub_Array(A[1:], B[i+1:]):\n                return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(0,len(B)):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\ndef Sub_Array(A,B):\n    '''\n    Write a python function to find common elements between A and B\n    '''\n    if len(A)<len(B):\n        return []\n    result=[]\n    for i in range(0,len(A)):\n        if A[i] in B and A[i] not in result:\n            result.append(A[i])\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    m = len(A) \n    n = len(B) \n",
        "num_ids": 20
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:len(B)+i]==B:\n            return True\n    return False\ndef is_Sub_Array_2(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_3(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_4(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:len(B)+i]==B:\n            return True\n    return False\ndef is_Sub_Array_5(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)]==B:\n            return True\n    return False\ndef is_Sub_Array_6(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)]==B:\n            return True\n    return False\ndef is_Sub_Array_7(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_8(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_9(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:len(B)+i]==B:\n            return True\n    return False\ndef is_Sub_Array_10(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_11(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:len(B)+i]==B:\n            return True\n    return False\ndef is_Sub_Array_12(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_13(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:len(B)+i]==B:\n            return True\n    return False\ndef is_Sub_Array_14(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_15(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:len(B)+i]==B:\n            return True\n    return False\ndef is_Sub_Array_16(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_17(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_18(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_19(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_20(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_21(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_22(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_23(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_24(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    le",
        "num_ids": 4
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if all(B[j] == A[i+j] for j in range(len(B))): \n            return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<len(B):\n        return False\n    for i in range(0,len(B)):\n        if A[i]==B[i]:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag = 0\n    for i in range(len(B)):\n        if A == B[i:i+len(A)]:\n            flag = 1\n    if flag == 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "num_ids": 63
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        return False\n    else:\n        for i in range(0,len(B)-len(A)+1):\n            if A==B[i:i+len(A)]:\n                return True\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(0, len(B)): \n        if B[i]==A[0]: \n            j = 1\n            flag = 0\n            while(j<len(A)): \n                if A[j]!= B[i+j]: \n                    flag = 1\n                    break\n                j += 1\n            if flag == 1: \n                continue\n            else: \n                return True\n    return False\n",
        "num_ids": 121
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        print(\"Factorial doesn't exist for negative numbers\") \n    elif n == 0: \n        return 1\n    else: \n        return n * last_Digit_Factorial(n - 1) \n  ",
        "num_ids": 61
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    fact = str(fact)\n    return fact[len(fact)-1]\n",
        "num_ids": 46
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n == 0):\n        return 1\n    elif(n == 1):\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n",
        "num_ids": 48
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0: \n        return 1\n    else: \n        return n*last_Digit_Factorial(n-1) \n",
        "num_ids": 37
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    assert(n > 0)\n    total = 1\n    while n > 0:\n        total *= n\n        n -= 1\n    return int(str(total)[len(str(total))-1])\n",
        "num_ids": 51
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    import math\n    # Base case \n    if n == 0: \n        return 1\n    # Recursive call \n    else: \n        return n * last_Digit_Factorial(n-1)\n",
        "num_ids": 53
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # code here \n    return (factorial(n)%10)\n",
        "num_ids": 20
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    import math \n    res = math.factorial(n)\n    last_digit = res % 10\n    print(f\"Last Digit Factorial of {n} is {last_digit}.\")\n    return last_digit\n",
        "num_ids": 55
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1,n+1):\n        result = result * i\n    return result % 10\n",
        "num_ids": 33
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return len(str(result))-1\n",
        "num_ids": 37
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n",
        "num_ids": 34
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    for i in range(len(list1)):\n        if (i % 3 == 0):\n            list3.append(list1[i])\n        if (i % 3 == 1):\n            list3.append(list2[i])\n        if (i % 3 == 2):\n            list3.append(list3[i])\n    return list3\n",
        "num_ids": 86
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    print([x for t in zip(list1,list2,list3) for x in t])\n",
        "num_ids": 26
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Your code here\n    # return list1 + list2 + list3\n    return [a for a in itertools.chain(*zip(list1, list2, list3))]\n",
        "num_ids": 46
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1.extend(list2)\n    list1.extend(list3)\n    return list1\n",
        "num_ids": 29
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #TODO: implement this\n    return [x for t in zip(list1,list2,list3) for x in t]\n    \n    \ndef shuffle(l):\n    '''\n    Write a function to shuffle a list.\n    '''\n    #TODO: implement this\n    shuffled_list = []\n    for i in range(len(l)):\n        index = random.randint(0,len(l)-1)\n        shuffled_list.append(l[index])\n        l.pop(index)\n    return shuffled_list\n    \n    \ndef reverse(l):\n    '''\n    Write a function to reverse a list.\n    '''\n    #TODO: implement this\n    reversed_list = []\n    for i in range(len(l)-1,-1,-1):\n        reversed_list.append(l[i])\n    return reversed_list\n",
        "num_ids": 57
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for t in zip(list1, list2, list3) for item in t]\n",
        "num_ids": 26
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [elem for tup in zip(list1,list2,list3) for elem in tup]\n",
        "num_ids": 30
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    out_list = []\n    for i in range(len(list1)):\n        out_list.append(list1[i])\n        out_list.append(list2[i])\n        out_list.append(list3[i])\n    return out_list\n",
        "num_ids": 67
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    return [item for item in zip(list1,list2,list3)]\n",
        "num_ids": 23
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            continue\n        else:\n            dissimilar.append(test_tup1[i])\n    return dissimilar\n    \nif __name__ == '__main__':\n    #testing\n    tup1 = (10, 20, 30, 40)\n    tup2 = (70, 20, 30, 60)\n    print(\"dissimilar elements are: \", find_dissimilar(tup1, tup2))\n",
        "num_ids": 145
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = []\n    # if test_tup1 == test_tup2:\n    #     raise Exception(\"Input tuples are the same.\")\n    for i, j in zip(test_tup1, test_tup2):\n        if i!= j:\n            res.append(i)\n    return tuple(res)\n",
        "num_ids": 81
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements\n",
        "num_ids": 76
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_tup.append(test_tup1[i])\n    \n    return dissimilar_tup\n",
        "num_ids": 80
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #return (list(set(test_tup1) - set(test_tup2)), list(set(test_tup2) - set(test_tup1)))\n    return (list(set(test_tup1) - set(test_tup2)), list(set(test_tup2) - set(test_tup1)))\n",
        "num_ids": 87
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tuple = ()\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar_tuple = dissimilar_tuple + (elem,)\n    for elem in test_tup2:\n        if elem not in test_tup1:\n            dissimilar_tuple = dissimilar_tuple + (elem,)\n    return dissimilar_tuple\n",
        "num_ids": 108
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # your code goes here\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Your code goes here\n",
        "num_ids": 9
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [i for i in test_tup1 if i not in test_tup2]\n",
        "num_ids": 25
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_ele = ()\n    dissimilar_ele = [item for item in test_tup1 + test_tup2 if item not in test_tup1 or item not in test_tup2]\n    print(dissimilar_ele)\n    return dissimilar_ele\n",
        "num_ids": 71
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n        elif isinstance(test_tuple[i], list):\n            test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n        elif isinstance(test_tuple[i], set):\n            test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n        elif isinstance(test_tuple[i], dict):\n            test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n        elif isinstance(test_tuple[i], int):\n            if test_tuple[i] % 2 == 0:\n                test_tuple[i] = even_fnc(test_tuple[i])\n            else:\n                test_tuple[i] = test_tuple[i]\n        elif isinstance(test_tuple[i], float):\n            if test_tuple[i] % 2 == 0:\n                test_tuple[i] = even_fnc(test_tuple[i])\n            else:\n                test_tuple[i] = test_tuple[i]\n        elif isinstance(test_tuple[i], str):\n            if test_tuple[i].isdigit():\n                if int(test_tuple[i]) % 2 == 0:\n                    test_tuple[i] = even_fnc(test_tuple[i])\n                else:\n                    test_tuple[i] = test_tuple[i]\n            else:\n                if test_tuple[i].isdecimal():\n                    if int(test_tuple[i]) % 2 == 0:\n                        test_tuple[i] = even_fnc(test_tuple[i])\n                    else:\n                        test_tuple[i] = test_tuple[i]\n                else:\n                    test_tuple[i] = test_tuple[i]\n    return test_tuple\n",
        "num_ids": 528
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return list(filter(even_fnc, test_tuple)) \n",
        "num_ids": 20
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = ()\n    for i in test_tuple: \n        if type(i) is tuple: \n            if len(i) > 0: \n                even_tuple += even_ele(i, even_fnc)\n        elif len(i) > 0: \n            if even_fnc(i): \n                even_tuple += (i,)\n    return even_tuple\n",
        "num_ids": 101
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [i for i in test_tuple if even_fnc(i)]\n",
        "num_ids": 22
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for i in test_tuple:\n        if len(i) % 2 == 0:\n            new_tuple = new_tuple + (i,)\n    return new_tuple\n",
        "num_ids": 54
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    try:\n        res = [value for sublist in test_tuple for value in sublist if even_fnc(value)]\n        return tuple(res)\n    except TypeError:\n        print('Incorrect type')\n        return None\n",
        "num_ids": 58
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_list = list(test_tuple)\n    test_list = [even_fnc(i) if i % 2 == 0 else i for i in test_list]\n    return tuple(test_list)\n",
        "num_ids": 53
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        for j in i:\n            if j%2!=0:\n                i.remove(j)\n        test_tuple.remove(i)\n    return test_tuple\n",
        "num_ids": 55
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if not isinstance(i, tuple):\n            if even_fnc(i):\n                test_tuple = tuple(filter(even_fnc, test_tuple))\n        else:\n            even_ele(i, even_fnc)\n",
        "num_ids": 71
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(test_tuple)\n    # pass\n",
        "num_ids": 19
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = (1/2) * b * s\n    return a\n",
        "num_ids": 19
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = ((b*s)/2)*b\n    return A\n",
        "num_ids": 18
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area= (1/2) * (b * b) * (s * s + (s * s))\n    return surface_area\n",
        "num_ids": 36
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sa = 2*b**2 + 2*b*s\n    print('Surface Area: ',sa)\n    return\n",
        "num_ids": 31
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return(2*b*s+b*b)\n",
        "num_ids": 16
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_Area = 0.5 * b * s\n    return surface_Area\n",
        "num_ids": 21
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area=b*b*s\n    return area\n",
        "num_ids": 15
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sa=b*s*(2/3)\n    return(sa)\n",
        "num_ids": 21
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if b>=0 and s>=0:\n        area = b*s*0.5\n    else:\n        area = 'Error'\n    return area\n",
        "num_ids": 41
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print('Not empty')\n    else:\n        print('Empty')\n    \nmy_dict({})\n",
        "num_ids": 33
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False\n        \n    \ndef check_empty_dictionary():\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    d = {}\n    if not d:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print('The dictionary is empty')\n        return True\n    else:\n        print('The dictionary is not empty')\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1.keys())!= 0:\n        return True\n    return False\n    \ndef my_dict(dict1):\n    '''\n    Write a function to check if a dictionary has a value\n    '''\n    if dict1:\n        return True\n    return False\n    \ndef my_dict(dict1):\n    '''\n    Write a function to find the smallest value in a dictionary\n    '''\n    smallest_value = None\n    for key,value in dict1.items():\n        if smallest_value == None:\n            smallest_value = value\n        elif value < smallest_value:\n            smallest_value = value\n    return smallest_value\n    \ndef my_dict(dict1):\n    '''\n    Write a function to combine two dictionaries\n    '''\n    dict2 = {'a':'b'}\n    dict1.update(dict2)\n    return dict1\n    \ndef my_dict(dict1):\n    '''\n    Write a function to get a dictionary from an object\n    '''\n    return dict1.__dict__\n    \ndef my_dict(dict1):\n    '''\n    Write a function to remove duplicates from a dictionary\n    '''\n    dict1 = {'a':1,'b':1,'c':1}\n    return dict(dict1)\n",
        "num_ids": 29
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Empty Dictionary\")\n    else:\n        print(\"Dictionary is not empty\")\n",
        "num_ids": 30
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False\n",
        "num_ids": 20
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return \"The dict is empty\"\n    else:\n        return \"Not empty\"\n",
        "num_ids": 33
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return \"The Dictionary is empty\"\n    else:\n        return \"The Dictionary is not empty\"\n",
        "num_ids": 36
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n",
        "num_ids": 9
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return int((1/2)*(math.pow(2*num, num+1) - math.pow(2*num, num))/(math.factorial(num+1)))\n",
        "num_ids": 47
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def num_catalan(n):\n        cat = [0 for i in range(n+1)]\n        cat[0] = 1\n        cat[1] = 1\n        for i in range(2, n+1):\n            cat[i] = 0\n            for j in range(i):\n                cat[i] += cat[j] * cat[i-j-1]\n        return cat[n]\n",
        "num_ids": 100
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Base case\n    if num == 0 or num == 1:\n        return 1\n    # Recursive case\n    return catalan_number(num - 1) * (4 * catalan_number(num - 1) - 2 * (num - 1))\n",
        "num_ids": 61
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n",
        "num_ids": 13
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return sum([catalan_number(i) * catalan_number(num-i-1) for i in range(num)])\n",
        "num_ids": 61
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    result = 0\n    for n in range(num):\n        result += catalan_number(n) * catalan_number(num-n-1)\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n",
        "num_ids": 50
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    a = 1\n    b = 1\n    c = 0\n    for i in range(num):\n        c = a + b\n        a = b\n        b = c\n    return c\n",
        "num_ids": 47
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # catalan[n] = catalan[n-1] * (2n - 1) / (n + 1)\n    catalan = [0 for _ in range(num+1)]\n    catalan[0] = 1\n    for n in range(1, num+1):\n        catalan[n] = catalan[n-1] * (2*n - 1) // (n+1)\n    return catalan[num]\n",
        "num_ids": 106
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    result = 0\n    for i in range(num):\n        result += catalan_number(i) * catalan_number(num-i-1)\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #find adverb ending with ly\n    #find adverb ending with ly\n    pattern = re.compile('[-]\\s?[a-zA-Z]+[a-zA-Z0-9]*[a-zA-Z]+ly')\n    matched = pattern.finditer(text)\n    #[-]\\s?[a-zA-Z]+[a-zA-Z0-9]*[a-zA-Z]+ly\n    for match in matched:\n        print(match)\n    #print('Number of adverb is :', len(matched))\n    #print(matched)\n",
        "num_ids": 150
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.search(\"\\w*ly$\", text)\n    if result is None:\n        return None\n    return result.group(0)\n",
        "num_ids": 38
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result=re.findall(r'(\\w*ly\\w*)', text)\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # p = re.compile('[^a-zA-Z0-9]ly$')\n    # p = re.compile('ly$')\n    p = re.compile('ly$')\n    # p = re.compile('[^a-zA-Z0-9]ly$')\n    # p = re.compile('[a-zA-Z0-9]ly$')\n    result = p.findall(text)\n    print(result)\n",
        "num_ids": 118
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #  The example of adverbs:\n    #  'The sky is blue, the sun is bright.'\n    #  'The sun is bright, the sun is the best.'\n    #  'The sun is bright, the sky is the best.'\n    #  'The sun is bright, The sky is the best.'\n    #  'The sun is bright, the sky is the best. The sun is the best.'\n    #  'The sun is bright, the sky is the best. The sun is the best.'\n    #  'The sun is bright, the sky is the best. The sun is the best.'\n    #  'The sun is bright, the sky is the best. The sky is the best.'\n    #  'The sky is blue, the sky is the best.'\n",
        "num_ids": 179
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] == 'ly':\n            if text[i-1] =='':\n                return text[i-1], i-1\n    return None\n",
        "num_ids": 53
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    try:\n        words = text.split()\n        for word in words:\n            if re.search(r'(ly)+$', word):\n                return re.search(r'(ly)+$', word).group()\n    except:\n        return\n",
        "num_ids": 62
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    x = re.findall(r'\\bly\\b', text)\n    return x\ndef find_adverbs_end(text):\n    '''\n    Write a function to find all the adverbs ending with ly and its positions in a given string.\n    '''\n    x = re.findall(r'\\bly\\b', text)\n    return x\ndef find_adverb_ly(text):\n    '''\n    Write a function to find the first adverb ending with ly and its position in a given string.\n    '''\n    x = re.findall(r'\\bly\\b', text)\n    return x[0]\ndef find_adverb_ly_end(text):\n    '''\n    Write a function to find all the adverbs ending with ly and its position in a given string.\n    '''\n    x = re.findall(r'\\bly\\b', text)\n    return x[-1]\ndef find_first_adverb_ly(text):\n    '''\n    Write a function to find the first adverb ending with ly and its position in a given string.\n    '''\n    x = re.findall(r'\\bly\\b', text)\n    return x[0]\ndef find_first_adverb_ly_end(text):\n    '''\n    Write a function to find all the adverbs ending with ly and its position in a given string.\n    '''\n    x = re.findall(r'\\bly\\b', text)\n    return x[-1]\ndef first_adverb_ly(text):\n    '''\n    Write a function to find the first adverb ending with ly and its position in a given string.\n    '''\n    x = re.findall(r'\\bly\\b', text)\n    return x[0]\ndef first_adverb_ly_end(text):\n    '''\n    Write a function to find all the adverbs ending with ly and its position in a given string.\n    '''\n    x = re.findall(r'\\bly\\b', text)\n    return x[-1]\ndef is_word_in_text(word, text):\n    '''\n    Write a function to check if a given word is present in a given text.\n    '''\n    text = text.lower()\n    word = word.lower()\n    if word in text:\n        return True\n    return False\ndef is_word_in_text_r(word, text):\n    '''\n    Write a function to check if a given word is present in a given text.\n    '''\n    word = word.lower()\n    text = text.lower()\n    x = re.search(word, text)\n    return x\ndef is_word_in_text_l(word, text):\n    '''\n    Write a function to check if a given word is present in a given text.\n    '''\n    word = word.lower()\n    text = text.lower()\n    x = re.search(r'\\b'+word+r'\\b', text)\n    return x\ndef is_word_in_text_n(word, text):\n    '''\n    Write a function to check if a given word is present in a given text.\n    '''\n    word = word.lower()\n    text = text.lower()\n    x = re.search(r'\\b'+word+r'\\b', text)\n    return x\ndef count_word_in_text(word, text):\n    '''\n    Write a function to count a given word in a text.\n    '''\n    text = text.lower()\n    word = word.lower()\n    x = text.count(word)\n    return x\ndef count_word_in_text_r(word, text):\n    '''\n    Write a function to count a given word in a text.\n    '''\n    word = word.lower()\n    text = text.lower()\n    x = re.findall(r'\\b'+word+r'\\b', text)\n    return len(x)\ndef count_word_in_text_l(word, text):\n    '''\n    Write a function to count a given word in a text.\n    '''\n    word = word.lower()\n    text = text.lower()\n    x = re.findall(r'\\b'+word+r'\\b', text)\n    return len(x)\ndef count_word_in_text_n(word, text):\n    '''\n    Write a function to count a given word in a text.\n    '''\n    word = word.lower()\n    text = text.lower()\n    x = re.findall(r'\\b'+word+r'\\b', text)\n    return len(x)\ndef find_all_words_end(text):\n    '''\n    Write a function to find all the words in a given text that ends with a specific character.\n    '''\n    x = re.findall(r'\\w+[\\s\\S]*[\\w+\\']', text)\n    return x\ndef find_all_words_end_n(text):\n    '''\n    Write a function to find all the words in a given text that ends with a specific character.\n    '''\n    x = re.findall(r'\\w+[\\s\\S]*[\\w+\\']', text)\n    return x\ndef find_all_words_end_y(text):\n    '''\n    Write a function to find all the words in a given text that ends with a specific character.\n    '''\n    x = re.findall(r'\\w+[\\s\\S]*[\\w+\\']', text)\n    return x\ndef find_all_words_end_s(text):\n    '''\n    Write a function to find all the words in a given text that ends with a specific character.\n    '''\n    x = re.findall(r'\\w+[\\s\\S]*[\\w+\\']', text)\n    return x\ndef find_all_words_end_n_r(text):\n    '''\n    Write a function to find all the words in a given text that ends with a specific character.\n    '''\n    x = re.findall(r'\\w+[\\s\\S]*[\\w+\\']', text)\n    return x\ndef find_all_words_end_y_r(text):\n    '''\n    Write a function to find all the words in a given text that ends with a specific character.\n    '''\n    x = re.findall(r'\\w+[\\s\\S]*[\\w+\\']', text)\n    return x\ndef find_all_words_end_s_r(text):\n    '''\n    Write a function to find all the words in a given text that ends with a specific character.\n    '''\n    x = re.findall(r'\\w+[\\s\\S]*[\\w+\\']', text)\n    return x\ndef find_all_words_end_n_l(text):\n    '''\n    Write a function to find all the words in a given text that ends with a specific character.\n    '''\n    x = re.findall(r'\\w+[\\s\\S]*[\\w+\\']', text)\n    return x\ndef find_all_words_end_y_l(text):\n    '''\n    Write a function to find all the words in a given text that ends with a specific character.\n    '''\n    x = re.findall(r'\\w+[\\s\\S]*[\\w+\\']', text)\n    return x\ndef find_all_words_end_s_l(text):\n    '''\n    Write a function to find all the words in a given text that ends with a specific character.\n    '''\n    x = re.findall(r'\\w+[\\s\\S]*[\\w+\\']', text)\n    return x\ndef find_all_words_end_n_n(text):\n    '''\n    Write a function to find all the words in a given text that ends with a specific character.\n    '''\n    x = re.findall(r'\\w+[\\s\\S]*[\\w+\\']', text)\n    return x\ndef find_all_words_end_y_n(text):\n",
        "num_ids": 52
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    p=re.compile('ly$')\n    m=p.findall(text)\n    if m:\n        return(m[0],m.span(0)[0])\n    else:\n        return(None,None)\n    \nif __name__ == '__main__':\n    print(find_adverbs(\"Today is a good day\"))\n    print(find_adverbs(\"Today is a bad day\"))\n",
        "num_ids": 101
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r\"ly\\b\", text, flags = re.I)\n",
        "num_ids": 24
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(-1 * item[1],item[0]))\n        if len(heap) == n:\n            heapq.heappop(heap)\n    return [item[1] for item in heap]\n    \ndef max_in_sliding_window(items,n):\n    '''\n    Write a function that takes in an array of integers and returns the maximum sum of the array of integers,\n    sliding across all possible windows in the array.\n    '''\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum,sum(items[i:n]))\n    return max_sum\n    \ndef find_subarrays(arr,target):\n    '''\n    Write a function that takes in an array of integers and returns an array of all the contiguous subarrays of the array that equal the target.\n    '''\n    result = []\n    for i in range(len(arr)):\n        total = 0\n        for j in range(i,len(arr)):\n            total += arr[j]\n            if total == target:\n                result.append(arr[i:j+1])\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n >= len(items):\n        return items\n    # TODO: Write the function here\n    print('\\n'.join(map(str,heapq.nlargest(n,items,key=lambda x: x[1]))))\n    return heapq.nlargest(n,items,key=lambda x: x[1])\n",
        "num_ids": 81
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #items is a dictionary of items and their prices\n    #n is the number of items to select\n    #Return a list of the n most expensive items\n    if n == 0:\n        return []\n    d = dict()\n    for item in items:\n        if item in d:\n            d[item] += items[item]\n        else:\n            d[item] = items[item]\n    heap = []\n    for item in d:\n        heapq.heappush(heap, (-d[item], item))\n    return [item for (price, item) in heapq.nlargest(n, heap)]\n",
        "num_ids": 149
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for x,y in items:\n        heapq.heappush(heap,(y,x))\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return [x[1] for x in heap]\n",
        "num_ids": 72
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #Heap to store the top n most expensive items\n    heap = []\n    #Array to store the indices of the heap\n    heap_indices = []\n    for i in range(n):\n        #Add the index of the element to the heap\n        heapq.heappush(heap,(-1*items[i][1],i))\n        heap_indices.append(i)\n    #Iterate through the heap\n    while(heap):\n        #Pop the first element\n        item = heapq.heappop(heap)\n        #Pop the index of the first element\n        index = item[1]\n        #Append the popped index to the heap_indices array\n        heap_indices.append(index)\n        #If there are less than n elements in the heap\n        if(len(heap) < n):\n            break\n    #Iterate through the heap_indices array\n    for i in range(len(heap_indices)):\n        #Pop the index of the ith element\n        item = heap_indices.pop(i)\n        #Return the popped element\n        yield items[item]\n",
        "num_ids": 274
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n, items, key=lambda x: x[1])\n",
        "num_ids": 24
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    top_n_expensive = []\n    heap = []\n    for key,value in items.items():\n        heapq.heappush(heap,(value,key))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    print(heap)\n    while heap:\n        top_n_expensive.append(heapq.heappop(heap)[1])\n    return top_n_expensive\n",
        "num_ids": 113
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(items))\n    return result\ndef swap_priority(priorities, i, j):\n    priorities[i], priorities[j] = priorities[j], priorities[i]\n    return priorities\ndef heap_sort(numbers):\n    '''\n    Given an array of numbers, sort them in ascending order using a heap.\n    '''\n    heapq.heapify(numbers)\n    heap = []\n    while numbers:\n        heapq.heappush(heap, numbers.pop())\n    return [heapq.heappop(heap) for i in range(len(heap))]\ndef heap_sort_without_sorting(numbers):\n    '''\n    Given an array of numbers, sort them in ascending order using a heap.\n    '''\n    heap = []\n    for num in numbers:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for i in range(len(heap))]\ndef top_n(items,n):\n    '''\n    Return the top n items in an array, in descending order.\n    '''\n    items.sort(reverse = True)\n    result = []\n    for i in range(n):\n        result.append(items[i])\n    return result\ndef top_n_no_sort(items,n):\n    '''\n    Return the top n items in an array, in descending order, without using any sorting algoritms.\n    '''\n    items.sort(reverse = True)\n    return items[:n]\ndef identity(item):\n    '''\n    Return the item passed in.\n    '''\n    return item\ndef is_empty(item):\n    '''\n    Return true if the item passed in is empty and false otherwise.\n    '''\n    return len(item) == 0\ndef partition(items,pivot,key):\n    '''\n    Partition the items in the array according to a pivot.\n    '''\n    small_items = []\n    big_items = []\n    for item in items:\n        if key(item) < key(pivot):\n            small_items.append(item)\n        else:\n            big_items.append(item)\n    return small_items + [pivot] + big_items\ndef quick_sort(items,key=identity):\n    '''\n    Sort the items in the array using a quicksort algorithm.\n    '''\n    if is_empty(items):\n        return []\n    if len(items) == 1:\n        return items\n    pivot = items[0]\n    smaller_items = quick_sort([i for i in items[1:] if key(i) < key(pivot)])\n    larger_items = quick_sort([i for i in items[1:] if key(i) > key(pivot)])\n    return smaller_items + [pivot] + larger_items\ndef max_filter(items,key=identity):\n    '''\n    Return the items in the array that have the largest key values.\n    '''\n    max_key = key(max(items,key=key))\n    return [item for item in items if key(item) == max_key]\ndef min_filter(items,key=identity):\n    '''\n    Return the items in the array that have the smallest key values.\n    '''\n    min_key = key(min(items,key=key))\n    return [item for item in items if key(item) == min_key]\ndef pivot_sort(items,key=identity):\n    '''\n    Sort the items in the array using a quick sort algorithm.\n    '''\n    pivot = random.choice(items)\n    left_items = [item for item in items if key(item) < key(pivot)]\n    pivot_items = [item for item in items if key(item) == key(pivot)]\n    right_items = [item for item in items if key(item) > key(pivot)]\n    return left_items + pivot_items + right_items\ndef quick_sort_in_place(items,key=identity):\n    '''\n    Sort the items in the array using a quicksort algorithm.\n    '''\n    def _quick_sort(items,key=identity):\n        if len(items) < 2:\n            return items\n        pivot = items[0]\n        left = [i for i in items[1:] if key(i) < key(pivot)]\n        right = [i for i in items[1:] if key(i) >= key(pivot)]\n        return _quick_sort(left,key) + [pivot] + _quick_sort(right,key)\n    _quick_sort(items,key)\ndef quick_sort_in_place_no_sorting(items,key=identity):\n    '''\n    Sort the items in the array using a quicksort algorithm.\n    '''\n    def _quick_sort(items,key=identity):\n        if len(items) < 2:\n            return items\n        pivot = items[0]\n        left = [i for i in items[1:] if key(i) < key(pivot)]\n        right = [i for i in items[1:] if key(i) >= key(pivot)]\n        return _quick_sort(left,key) + [pivot] + _quick_sort(right,key)\n    _quick_sort(items,key)\ndef merge_sort(items,key=identity):\n    '''\n    Sort the items in the array using a merge sort algorithm.\n    '''\n    def _merge_sort(items,key=identity):\n        if len(items) < 2:\n            return items\n        mid = len(items)//2\n        left = _merge_sort(items[:mid],key)\n        right = _merge_sort(items[mid:],key)\n        return _merge(left,right,key)\n    return _merge_sort(items,key)\ndef _merge(left,right,key=identity):\n    result = []\n    while len(left) > 0 and len(right) > 0:\n        if key(left[0]) < key(right[0]):\n            result.append(left[0])\n            left = left[1:]\n        else:\n            result.append(right[0])\n            right = right[1:]\n    if len(left) > 0:\n        result += left\n    if len(right) > 0:\n        result += right\n    return result\ndef max_heap(items,key=identity):\n    '''\n    Return the items in the array that have the largest key values, using a max heap.\n    '''\n    def _max_heap(items,n,i,key=identity):\n        left = 2*i + 1\n        right = 2*i + 2\n        largest = i\n        if left < n and key(items[left]) > key(items[largest]):\n            largest = left\n        if right < n and key(items[right]) > key(items[largest]):\n            largest = right\n        if largest!= i:\n            items[i],items[largest] = items[largest],items[i]\n            _max_heap(items,n,largest,key)\n    if is_empty(items):\n        return items\n    n = len(items)\n    for i in range(n//2 - 1, -1, -1):\n        _max_heap(items,n,i,key)\n    for i in range(n-1,0,-1):\n        items[0],items[i] = items[i],items[0]\n        _max_heap(items,i,0,key)\n    return items\ndef min_heap(items,key=identity):\n    '''\n    Return the items in the array that have the smallest key values, using a min heap.\n    '''\n    def _min_heap(items,n,i,key=identity):\n        left = 2*i + 1\n        right = 2*i + 2\n        smallest = i\n        if left < n and key(items[left]) < key(items[smallest]):\n            smallest = left\n        if righ",
        "num_ids": 78
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq._heapify_max(items)\n    return [heapq._heappop_max(items) for i in range(n)]\n    \n",
        "num_ids": 41
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    n=len(items) if n>len(items) else n\n    dic={}\n    for item in items:\n        if item[0] in dic:\n            dic[item[0]]=dic[item[0]]+item[1]\n        else:\n            dic[item[0]]=item[1]\n",
        "num_ids": 83
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[:n]\n    b = l[n:]\n    a.extend(b)\n    return a\n",
        "num_ids": 32
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split = l[:n]\n    print(split)\n    l.extend(split)\n",
        "num_ids": 26
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(0, len(l), n):\n        yield l[i:i + n]\n    \ndef _hex(byte_array):\n    return ''.join('{:02x}'.format(x) for x in byte_array)\n",
        "num_ids": 64
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    print(tuplex)\n",
        "num_ids": 21
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    pass # replace with your code\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "num_ids": 19
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    x = tuple(listx)\n    return x\n    \n",
        "num_ids": 17
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return(tuplex)\n",
        "num_ids": 21
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if not isinstance(listx, list):\n        raise TypeError('Not a list.')\n    return tuple(listx)\n",
        "num_ids": 33
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums = [int(i) for i in nums.split(',')]\n    return max(nums) - min(nums)\n",
        "num_ids": 37
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest - smallest\n",
        "num_ids": 61
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the minimum and maximum numbers in the list\n    minimum = min(nums)\n    maximum = max(nums)\n    # return the difference\n    return maximum - minimum\n",
        "num_ids": 44
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return (nums[-1]-nums[0])\n    \n    \ndef palindrome(nums):\n    '''\n    Write a python function to check if the given list is a palindrome. Return true or false.\n    '''\n    nums.sort()\n    if nums == nums[::-1]:\n        return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return(max(nums)-min(nums))\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    biggest = 0\n    smallest = 0\n    diff = 0\n    for num in nums:\n        if num > biggest:\n            biggest = num\n        if num < smallest:\n            smallest = num\n    diff = biggest - smallest\n    return diff\n",
        "num_ids": 64
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print(max(nums) - min(nums))\n",
        "num_ids": 17
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # can't find a square if the square of x is less than y\n    if a**2 < b:\n        return None\n    # try each possible number\n    for num in range(a**2,b+1):\n        # can't find a square if the square of x is greater than y\n        if num**2 > b:\n            return None\n        # if the number is a perfect square, return it\n        if num**0.5 == int(num**0.5):\n            return num\n    return None\n",
        "num_ids": 122
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares\n",
        "num_ids": 51
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    i = a\n    while i <= b:\n        squares.append(i * i)\n        i += 1\n    return squares\n",
        "num_ids": 40
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sqrt_b = int(b**0.5)\n    sqrt_a = int(a**0.5)\n    return list(range(sqrt_a, sqrt_b+1))\n",
        "num_ids": 51
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Your code here\n    arr = []\n    for i in range(a,b):\n        if i**2 < b:\n            arr.append(i**2)\n    return arr\n",
        "num_ids": 47
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    print(\"Perfect squares between\", a, \"and\", b, \"are: \")\n    for i in range(a,b+1):\n        if i*i < b:\n            print(i*i)\n        else:\n            print(i*i)\n            break\n    return \n",
        "num_ids": 71
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    l = []\n    i = 0\n    while i**2 <= b:\n        l.append(i**2)\n        i+=1\n    m = []\n    for each in l:\n        if each >= a and each <= b:\n            m.append(each)\n    return m\n",
        "num_ids": 71
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b + 1):\n        if num ** 0.5 == int(num ** 0.5):\n            print(num)\n",
        "num_ids": 38
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    #store the solution in a list\n    list_of_perfect_squares = []\n    #we assume that a is the smallest number\n    for num in range(a, b+1):\n        #if we can divide by the current number by \n        #the following equations and \n        #we obtain no remainder then it is a perfect square\n        if (num%(num**2) == 0) and (num%(num**3) == 0):\n            list_of_perfect_squares.append(num)\n    #return the list\n    return list_of_perfect_squares\n",
        "num_ids": 139
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if (a**2 < b and b < (a+1)**2):\n        return b-a**2\n    elif (a > b):\n        return 0\n    else:\n        return b-a\n",
        "num_ids": 53
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.rect(1,y)\n",
        "num_ids": 16
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_rect,y_rect=complex(x,y),complex(0,0)\n    print(\"The Cartesian coordinates of the complex number\", x,\" is: \",x_rect)\n    print(\"The Cartesian coordinates of the complex number\", y,\" is: \",y_rect)\n",
        "num_ids": 68
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    phi = y\n    return r*complex(cos(phi),sin(phi)),phi\n",
        "num_ids": 28
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x * cmath.cos(y)\n    if r.imag == 0:\n        return float(r.real)\n    else:\n        return float(r.real) + 1j*float(r.imag)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    if type(x) == float:\n        r = abs(x)\n        if r == 0:\n            return 0, 0\n        else:\n            theta = cmath.phase(x)\n            return r, theta\n    elif type(x) == complex:\n        r = abs(x)\n        if r == 0:\n            return 0, 0\n        else:\n            theta = cmath.phase(x)\n            return r, theta\n    else:\n        raise Exception(\"x must be float or complex\")\ndef identity(x,y):\n    '''\n    Write a function to return x if x is nonzero, otherwise return y.\n    '''\n    if x!= 0:\n        return x\n    else:\n        return y\ndef polar_add(x,y):\n    '''\n    Write a function to add two polar coordinates.\n    '''\n    if type(x) == complex or type(y) == complex:\n        raise Exception(\"polar coordinates must be real.\")\n    elif x == 0 and y == 0:\n        return 0\n    elif x == 0 and y!= 0:\n        return y\n    else:\n        r = x * cmath.cos(y)\n        theta = y + x\n        return r, theta\ndef polar_subtract(x,y):\n    '''\n    Write a function to subtract two polar coordinates.\n    '''\n    if type(x) == complex or type(y) == complex:\n        raise Exception(\"polar coordinates must be real.\")\n    elif x == 0 and y == 0:\n        return 0\n    elif x == 0 and y!= 0:\n        return y\n    elif x!= 0 and y == 0:\n        return x\n    else:\n        r = x * cmath.cos(y)\n        theta = y - x\n        return r, theta\ndef polar_multiply(x,y):\n    '''\n    Write a function to multiply two polar coordinates.\n    '''\n    if type(x) == complex or type(y) == complex:\n        raise Exception(\"polar coordinates must be real.\")\n    elif x == 0 and y == 0:\n        return 0\n    elif x == 0 and y!= 0:\n        return y\n    elif x!= 0 and y == 0:\n        return x\n    elif x!= 0 and y!= 0:\n        r = x * cmath.cos(y)\n        theta = y + x\n        return r, theta\ndef polar_divide(x,y):\n    '''\n    Write a function to divide two polar coordinates.\n    '''\n    if type(x) == complex or type(y) == complex:\n        raise Exception(\"polar coordinates must be real.\")\n    elif x == 0 and y == 0:\n        return 0\n    elif x == 0 and y!= 0:\n        return y\n    elif x!= 0 and y == 0:\n        return x\n    elif x!= 0 and y!= 0:\n        r = x * cmath.cos(y)\n        theta = y - x\n        return r, theta\ndef polar_modulus(x):\n    '''\n    Write a function to return the modulus of the polar coordinates.\n    '''\n    if type(x) == complex:\n        raise Exception(\"polar coordinates must be real.\")\n    elif x == 0:\n        return 0\n    else:\n        return abs(x)\ndef polar_conjugate(x):\n    '''\n    Write a function to return the conjugate of the polar coordinates.\n    '''\n    if type(x) == complex:\n        raise Exception(\"polar coordinates must be real.\")\n    elif x == 0:\n        return 0\n    else:\n        return x.conjugate()\ndef polar_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x * cmath.cos(y)\n    if r.imag == 0:\n        return float(r.real)\n    else:\n        return float(r.real) + 1j*float(r.imag)\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    if type(x) == float or type(y) == float:\n        raise Exception(\"input must be complex.\")\n    elif x.imag == 0:\n        return abs(x), 0\n    else:\n        return cmath.polar(x)\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    if type(x) == float or type(y) == float:\n        raise Exception(\"input must be complex.\")\n    elif x.imag == 0:\n        return abs(x), 0\n    else:\n        return cmath.polar(x)\ndef polar_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x * cmath.cos(y)\n    if r.imag == 0:\n        return float(r.real)\n    else:\n        return float(r.real) + 1j*float(r.imag)\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    if type(x) == float or type(y) == float:\n        raise Exception(\"input must be complex.\")\n    elif x.imag == 0:\n        return abs(x), 0\n    else:\n        return cmath.polar(x)\ndef complex_add(x,y):\n    '''\n    Write a function to add complex numbers.\n    '''\n    return x+y\ndef complex_subtract(x,y):\n    '''\n    Write a function to subtract complex numbers.\n    '''\n    return x-y\ndef complex_multiply(x,y):\n    '''\n    Write a function to multiply complex numbers.\n    '''\n    return x*y\ndef complex_divide(x,y):\n    '''\n    Write a function to divide complex numbers.\n    '''\n    return x/y\ndef complex_modulus(x):\n    '''\n    Write a function to return the modulus of the complex numbers.\n    '''\n    return abs(x)\ndef complex_conjugate(x):\n    '''\n    Write a function to return the conjugate of the complex numbers.\n    '''\n    return x.conjugate()\ndef complex_to_polar(x,y):\n    '''\n    Write a function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef complex_to_rect(x,y):\n    '''\n    Write a function to convert complex numbers to rectangular coordinates.\n    '''\n    return float(x.real)+float(x.imag)*1j\ndef complex_to_complex(x,y):\n    '''\n    Write a function to convert complex numbers to complex numbers.\n    '''\n    return x+y\ndef complex_to_polar(x,y):\n    '''\n    Write a function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef complex_to_rect(x,y):\n    '''\n    Write a function to convert complex numbers to rectangular coordinates.\n    '''\n    return float(x.real)+float(x.imag)*1j\ndef complex_to_complex(x,y):\n    '''\n    Write a function to convert complex numbers to complex numbers.\n    '''\n    return x+y\ndef complex_to_polar(",
        "num_ids": 16
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_real = x*cmath.cos(y)\n    x_imag = x*cmath.sin(y)\n    return x_real+x_imag\n",
        "num_ids": 42
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.exp(y)\n",
        "num_ids": 14
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Your code here\n    r=math.sqrt(x**2+y**2)\n    phi=math.atan(y/x)\n    return r, phi\n    \ndef rectangular_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    # Your code here\n    r=math.sqrt(x**2+y**2)\n    phi=math.atan(y/x)\n    return r, phi\n    \ndef polar_cartesian(r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Your code here\n    x=r*math.cos(phi)\n    y=r*math.sin(phi)\n    return x,y\n    \ndef cartesian_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    # Your code here\n    r=math.sqrt(x**2+y**2)\n    phi=math.atan(y/x)\n    return r, phi\n    \ndef polar_cartesian_conjugate(r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Your code here\n    x=r*math.cos(phi)\n    y=r*math.sin(phi)\n    return x,-y\n    \ndef cartesian_polar_conjugate(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    # Your code here\n    r=math.sqrt(x**2+y**2)\n    phi=math.atan(y/x)\n    return -r, phi\n",
        "num_ids": 45
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    \n    radius=int(input(\"enter radius:\"))\n    radius=float(radius)\n    \n    angle=int(input(\"enter angle:\"))\n    angle=float(angle)\n    \n    \n    x_rect=round(radius*cmath.cos(angle),2)\n    y_rect=round(radius*cmath.sin(angle),2)\n    \n    \n    print(\"x_rect =\",x_rect,\"\\n\"+\"y_rect =\",y_rect)\n    \n    \ndef polar_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    \n    \n    radius=int(input(\"enter radius:\"))\n    radius=float(radius)\n    \n    angle=int(input(\"enter angle:\"))\n    angle=float(angle)\n    \n    \n    x_polar=round(cmath.sqrt(radius**2+angle**2),2)\n    y_polar=round(2*cmath.atan(angle/radius),2)\n    \n    print(\"x_polar =\",x_polar,\"\\n\"+\"y_polar =\",y_polar)\n    \n    \ndef polar_cart(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    \n    \n    radius=int(input(\"enter radius:\"))\n    radius=float(radius)\n    \n    angle=int(input(\"enter angle:\"))\n    angle=float(angle)\n    \n    \n    x_cart=round(radius*cmath.cos(angle),2)\n    y_cart=round(radius*cmath.sin(angle),2)\n    \n    \n    print(\"x_cart =\",x_cart,\"\\n\"+\"y_cart =\",y_cart)\n    \n    \ndef cart_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    \n    radius=int(input(\"enter radius:\"))\n    radius=float(radius)\n    \n    angle=int(input(\"enter angle:\"))\n    angle=float(angle)\n    \n    \n    x_rect=round(radius*cmath.cos(angle),2)\n    y_rect=round(radius*cmath.sin(angle),2)\n    \n    \n    print(\"x_rect =\",x_rect,\"\\n\"+\"y_rect =\",y_rect)\n    \n    \ndef cart_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    \n    \n    radius=int(input(\"enter radius:\"))\n    radius=float(radius)\n    \n    angle=int(input(\"enter angle:\"))\n    angle=float(angle)\n    \n    \n    x_polar=round(cmath.sqrt(radius**2+angle**2),2)\n    y_polar=round(2*cmath.atan(angle/radius),2)\n    \n    print(\"x_polar =\",x_polar,\"\\n\"+\"y_polar =\",y_polar)\n    \n    \ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    \n    \n    radius=int(input(\"enter radius:\"))\n    radius=float(radius)\n    \n    angle=int(input(\"enter angle:\"))\n    angle=float(angle)\n    \n    \n    x_polar=round(cmath.sqrt(radius**2+angle**2),2)\n    y_polar=round(2*cmath.atan(angle/radius),2)\n    \n    print(\"x_polar =\",x_polar,\"\\n\"+\"y_polar =\",y_polar)\n    \n    \ndef cart_cart(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    \n    \n    radius=int(input(\"enter radius:\"))\n    radius=float(radius)\n    \n    angle=int(input(\"enter angle:\"))\n    angle=float(angle)\n    \n    \n    x_cart=round(radius*cmath.cos(angle),2)\n    y_cart=round(radius*cmath.sin(angle),2)\n    \n    \n    print(\"x_cart =\",x_cart,\"\\n\"+\"y_cart =\",y_cart)\n    \n    \ndef polar_cart(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    \n    radius=int(input(\"enter radius:\"))\n    radius=float(radius)\n    \n    angle=int(input(\"enter angle:\"))\n    angle=float(angle)\n    \n    \n    x_cart=round(radius*cmath.cos(angle),2)\n    y_cart=round(radius*cmath.sin(angle),2)\n    \n    \n    print(\"x_cart =\",x_cart,\"\\n\"+\"y_cart =\",y_cart)\n    \n    \ndef cart_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    \n    radius=int(input(\"enter radius:\"))\n    radius=float(radius)\n    \n    angle=int(input(\"enter angle:\"))\n    angle=float(angle)\n    \n    \n    x_rect=round(radius*cmath.cos(angle),2)\n    y_rect=round(radius*cmath.sin(angle),2)\n    \n    \n    print(\"x_rect =\",x_rect,\"\\n\"+\"y_rect =\",y_rect)\n    \n    \ndef polar_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    \n    \n    radius=int(input(\"enter radius:\"))\n    radius=float(radius)\n    \n    angle=int(input(\"enter angle:\"))\n    angle=float(angle)\n    \n    \n    x_polar=round(cmath.sqrt(radius**2+angle**2),2)\n    y_polar=round(2*cmath.atan(angle/radius),2)\n    \n    print(\"x_polar =\",x_polar,\"\\n\"+\"y_polar =\",y_polar)\n    \n    \ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    \n    \n    radius=int(input(\"enter radius:\"))\n    radius=float(radius)\n    \n    angle=int(input(\"enter angle:\"))\n    angle=float(angle)\n    \n    \n    x_polar=round(cmath.sqrt(radius**2+angle**2),2)\n    y_polar=round(2*cmath.atan(angle/radius),2)\n    \n    print(\"x_polar =\",x_polar,\"\\n\"+\"y_polar =\",y_polar)\n    \n    \ndef cart_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    \n    \n    radius=int(input(\"enter radius:\"))\n    radius=float(radius)\n    \n    angle=int(input(\"enter angle:\"))\n    angle=float(angle)\n    \n    \n    x_polar=round(cmath.sqrt(radius**2+angle**2),2)\n    y_polar=round(2*cmath.atan(angle/radius),2)\n    \n    print(\"x_polar =\",x_polar,\"\\n\"+\"y_polar =\",y_polar)\n    \n    \ndef rect_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    \n    radius=int(input(\"enter radius:\"))\n    radius=float(radius)\n    \n    angle=int(input(\"enter angle:\"))\n    angle=float(angle)\n    \n    \n    x_rect=round(radius*cmath.cos(angle),2)\n    y_rect=round(radius*cmath.sin(angle),2)\n    \n    \n",
        "num_ids": 94
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0 and y==0:\n        return x,y\n    else:\n        r=pow(x,2)+pow(y,2)\n        r=r.sqrt()\n        theta=cmath.phase(x+y*1j)\n        print theta\n        if theta>=0:\n            theta=theta\n        elif theta<0:\n            theta=2*3.14+theta\n        return r,theta\ndef rectangle_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    if x==0 and y==0:\n        return x,y\n    else:\n        r=pow(x,2)+pow(y,2)\n        r=r.sqrt()\n        theta=cmath.phase(x+y*1j)\n        if theta>=0:\n            theta=theta\n        elif theta<0:\n            theta=2*3.14+theta\n        return r,theta\n        \ndef add_vectors(vector_a,vector_b):\n    '''\n    Write a function that takes two lists of coordinates and returns the sum of them\n    '''\n    x1=vector_a[0]\n    y1=vector_a[1]\n    x2=vector_b[0]\n    y2=vector_b[1]\n    x=x1+x2\n    y=y1+y2\n    print x,y\ndef scale_vector(vector,factor):\n    '''\n    Write a function that scales a vector by a factor.\n    '''\n    x1=vector[0]\n    y1=vector[1]\n    x=x1*factor\n    y=y1*factor\n    return x,y\ndef magnitude(vector):\n    '''\n    Write a function to compute the magnitude of a vector.\n    '''\n    x1=vector[0]\n    y1=vector[1]\n    x=pow(x1,2)\n    y=pow(y1,2)\n    r=x+y\n    r=r.sqrt()\n    return r\ndef unit_vector(vector):\n    '''\n    Write a function to return the unit vector of a vector.\n    '''\n    x1=vector[0]\n    y1=vector[1]\n    x=x1/magnitude(vector)\n    y=y1/magnitude(vector)\n    return x,y\ndef dot_product(vector_a,vector_b):\n    '''\n    Write a function to compute the dot product of two vectors.\n    '''\n    x1=vector_a[0]\n    y1=vector_a[1]\n    x2=vector_b[0]\n    y2=vector_b[1]\n    x=x1*x2\n    y=y1*y2\n    r=x+y\n    return r\ndef vector_subtract(vector_a,vector_b):\n    '''\n    Write a function to compute the difference between two vectors.\n    '''\n    x1=vector_a[0]\n    y1=vector_a[1]\n    x2=vector_b[0]\n    y2=vector_b[1]\n    x=x1-x2\n    y=y1-y2\n    return x,y\ndef cross_product(vector_a,vector_b):\n    '''\n    Write a function to compute the cross product of two vectors.\n    '''\n    x1=vector_a[0]\n    y1=vector_a[1]\n    x2=vector_b[0]\n    y2=vector_b[1]\n    x=y1*x2-x1*y2\n    y=x1*y2-x2*y1\n    return x,y\ndef get_adjacent(x1,y1,x2,y2):\n    '''\n    Write a function that takes in two coordinates and returns the adjacent\n    coordinates of the point in the complex plane.\n    '''\n    x=x1+1\n    y=y1+1\n    x1=complex(x,y)\n    x=x1+1\n    y=y1+1\n    y1=complex(x,y)\n    x1=x2-1\n    y1=y2-1\n    x2=complex(x1,y1)\n    x1=x2+1\n    y1=y2-1\n    y2=complex(x1,y1)\n    return x1,y1,x2,y2\ndef get_hypotenuse(x1,y1,x2,y2):\n    '''\n    Write a function that takes in two coordinates and returns the hypotenuse\n    of the right triangle that has those two coordinates as opposite ends.\n    '''\n    x=pow(x1,2)+pow(y1,2)\n    x1=x.sqrt()\n    y=pow(x2,2)+pow(y2,2)\n    y1=y.sqrt()\n    return x1,y1\ndef get_opposite(x1,y1,x2,y2):\n    '''\n    Write a function that takes in two coordinates and returns the opposite\n    coordinates of the point in the complex plane.\n    '''\n    x=x1-x2\n    y=y1-y2\n    return x,y\ndef get_opposite_adjacent(x1,y1,x2,y2):\n    '''\n    Write a function that takes in two coordinates and returns the opposite\n    coordinates of the point in the complex plane, but also the adjacent\n    coordinates of the point in the complex plane.\n    '''\n    x=x1-1\n    y=y1-1\n    x1=complex(x,y)\n    x=x1+1\n    y=y1-1\n    y1=complex(x,y)\n    x1=x2-1\n    y1=y2-1\n    x2=complex(x1,y1)\n    x1=x2+1\n    y1=y2-1\n    y2=complex(x1,y1)\n    return x1,y1,x2,y2\ndef get_adjacent_hypotenuse(x1,y1,x2,y2):\n    '''\n    Write a function that takes in two coordinates and returns the adjacent\n    coordinates of the point in the complex plane, but also the hypotenuse\n    of the right triangle that has those two coordinates as opposite ends.\n    '''\n    x=pow(x1,2)+pow(y1,2)\n    x1=x.sqrt()\n    y=pow(x2,2)+pow(y2,2)\n    y1=y.sqrt()\n    x1,y1,x2,y2=get_opposite_adjacent(x1,y1,x2,y2)\n    return x1,y1,x2,y2\ndef get_opposite_adjacent_hypotenuse(x1,y1,x2,y2):\n    '''\n    Write a function that takes in two coordinates and returns the opposite\n    coordinates of the point in the complex plane, but also the hypotenuse\n    of the right triangle that has those two coordinates as opposite ends.\n    '''\n    x=x1-1\n    y=y1-1\n    x1=complex(x,y)\n    x=x1+1\n    y=y1-1\n    y1=complex(x,y)\n    x1=x2-1\n    y1=y2-1\n    x2=complex(x1,y1)\n    x1=x2+1\n    y1=y2-1\n    y2=complex(x1,y1)\n    x1,y1,x2,y2=get_opposite_adjacent(x1,y1,x2,y2)\n    return x1,y1,x2,y2\ndef get_right_triangle_hypotenuse(x1,y1,x2,y2):\n    '''\n    Write a function that takes in two coordinates and returns the hypotenuse\n    of the right triangle that ha",
        "num_ids": 25
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*cmath.exp(complex(0,y)),y)\n",
        "num_ids": 21
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    listLen = len(newList)\n    temp = newList[0]\n    newList[0] = newList[listLen-1]\n    newList[listLen-1] = temp\n    return newList\n",
        "num_ids": 54
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n    \n    \ndef move_element_to_end(newList, num): \n    '''\n    Write a python function to move the given element to the end of the list.\n    '''\n    for i in range(newList.count(num)): \n        newList.remove(num) \n    newList.append(num)\n    return newList\n    \n    \ndef remove_element(newList, num): \n    '''\n    Write a python function to remove the given element from a list.\n    '''\n    newList.remove(num) \n    return newList\n    \n",
        "num_ids": 19
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    l = len(newList)\n    first = newList[0]\n    last = newList[l-1]\n    newList[0] = last\n    newList[l-1] = first\n    print(newList)\n",
        "num_ids": 58
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList) \n    newList[0], newList[size - 1] = newList[size - 1], newList[0] \n    return newList\n",
        "num_ids": 45
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(f\"swapping the list {newList}\")\n    newList[0],newList[-1] = newList[-1],newList[0]\n    print(f\"the new list after swapping the first and last element is {newList}\")\n",
        "num_ids": 64
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \nswap_List(List)\n",
        "num_ids": 42
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList \n",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList)\n    print(newList[0])\n    print(newList[-1])\n    \n    temp=newList[0]\n    newList[0]=newList[-1]\n    newList[-1]=temp\n",
        "num_ids": 61
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(\"Original list: \")\n    print(newList)\n    \n    size = len(newList) \n    print(\"Size of list: \",size)\n",
        "num_ids": 41
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k > n):\n        return 0\n    elif(k == 0 or k == n):\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n",
        "num_ids": 67
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    # BASE CASE\n    if k == 1 or k == n:\n        return 1\n    \n    # RECURSIVE CASE\n    # Return the sum of all the binomial coefficients\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n",
        "num_ids": 78
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #initialize result\n    res = 0\n    #loop over all possible values of n and k\n    for i in range(n+1):\n        for j in range(i+1):\n            #calculate and store the product\n            #print(f'{j} {i} {n}')\n            res += C(i,j) * C(n,k)\n    #return result\n    return res\n",
        "num_ids": 100
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for i in range(k+1)] for i in range(n+1)] \n    for i in range(n+1): \n        for j in range(min(i,k)+1): \n            if j == 0 or j == i: \n                C[i][j] = 1\n            else: \n                C[i][j] = (C[i-1][j-1] + C[i-1][j]) \n    return C[n][k] \n",
        "num_ids": 122
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for i in range(k+1)] for j in range(n+1)] \n    for i in range(n+1): \n        for j in range(min(i,k)+1): \n            if j == 0 or j == i: \n                C[i][j] = 1\n",
        "num_ids": 77
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    # Create an empty dictionary to store the coefficients \n    binomial_coeff = {}\n",
        "num_ids": 25
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    list_of_coefficients = [0]*(n+1) \n    list_of_coefficients[0] = 1\n    list_of_coefficients[1] = 1\n    for i in range(2,n+1):\n        for j in range(k,0,-1):\n            if j > i-1:\n                break\n            list_of_coefficients[i] += list_of_coefficients[i-j]*list_of_coefficients[j]\n    return list_of_coefficients[n]\n",
        "num_ids": 130
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = [0] * (n + 1)\n    res[0] = 1\n    res[1] = 1\n    for i in range(2, n + 1):\n        res[i] = res[i - 1] + res[i - 2]\n    return res[n] - res[k]\n",
        "num_ids": 76
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n >= k: \n        return int((factorial(n) / (factorial(k) * factorial(n - k))) * (10**9))\n    else:\n        return 0\n",
        "num_ids": 49
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n",
        "num_ids": 65
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"^0+\\.\", \".\", ip)\n",
        "num_ids": 20
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    my_ip = ip\n    #replace all zeroes with a single zero\n    new_ip = re.sub('(\\.0{3,})', '', my_ip)\n    return new_ip\n",
        "num_ids": 51
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+(?P<ip>\\d+)\\.', r'\\g<ip>.', ip)\n",
        "num_ids": 36
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\.0+', '.', ip)\n",
        "num_ids": 20
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^[0]+', '', ip)\n",
        "num_ids": 20
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    string = ip.split('.')\n    new_string = []\n    for item in string:\n        if len(item) > 1:\n            new_string.append(item)\n        else:\n            new_string.append(str(int(item)))\n    ip = '.'.join(new_string)\n    return ip\n",
        "num_ids": 81
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = list(ip)\n    # for i in range(len(ip)):\n    #     if ip[i] == '0':\n    #         ip.pop(i)\n    #         break\n",
        "num_ids": 51
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    for i in ip.split(\".\"):\n        if i[0]==\"0\":\n            return removezero_ip(re.sub(r\"^0+\",\"\",i))\n    return ip\n",
        "num_ids": 49
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    for i in range(4):\n        if ip[i]=='0':\n            ip = ip[i+1:]\n            break\n    return ip\n",
        "num_ids": 39
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    for i in range(len(ip)):\n        if ip[i]!=0:\n            return ip[i:]\n    return \"0\"\n",
        "num_ids": 38
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1.sort()\n    odd=list1[1::2]\n    even=list1[::2]\n    print(even[0]-odd[0])\ndiff_even_odd([1,2,3,4,5,6,7]",
        "num_ids": 62
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1 = [1,2,3,4,5,6,7,8,9,10]\n    #list1 = [10,11,12,13,14,15,16]\n    count = 0\n    for i in list1:\n        if count % 2 == 0:\n            even = i\n            count = count + 1\n        elif count % 2!= 0:\n            odd = i\n            count = count + 1\n        else:\n            count = count + 1\n    diff = even - odd\n    return diff\n",
        "num_ids": 128
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[0]\n    for x in list1:\n        if x % 2 == 0:\n            even_num = x\n        else:\n            odd_num = x\n    diff = even_num - odd_num\n    return diff\n",
        "num_ids": 74
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # split the list into even and odd integers\n    odd_list = list1[1::2]\n    even_list = list1[::2]\n    # return the difference of the even and odd values\n    return even_list[0] - odd_list[0]\n",
        "num_ids": 66
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_even_list = list1[::2]\n    odd_even_list.sort()\n    odd_even_list.append(list1[-1])\n    first_odd = odd_even_list[0]\n    first_even = odd_even_list[1]\n    return(first_odd - first_even)\n",
        "num_ids": 82
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    try:\n        even = 0\n        odd = 0\n        for i in list1:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        return(even - odd)\n    except (TypeError, ZeroDivisionError):\n        return \"Invalid input!\"\n",
        "num_ids": 74
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    result = 0\n    for i, n in enumerate(list1):\n        if i % 2 == 0:\n            result = n\n        else:\n            result = n\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # expected result = 10\n    even_count, odd_count = 0, 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count - odd_count\n",
        "num_ids": 92
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    i = 0\n    for x in list1:\n        if i%2 == 0:\n            return x\n            break\n        else:\n            i += 1\n",
        "num_ids": 40
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    for i in range(0, len(list1)):\n        if i % 2 == 0:\n            list2.append(list1[i])\n",
        "num_ids": 44
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    if (n1!= n2) : \n        print('invalid input')\n        return -1\n    count = 0;\n    temp = 0;\n    i = 0;\n    while(i < n1) : \n        if (str1[i]!= str2[i]) : \n            temp = str1[i];\n            str1[i] = str2[i];\n            str2[i] = temp;\n            count+=1;\n        i+=1;\n    return count;\n",
        "num_ids": 144
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    dict = {}\n    for i in range(len(str1)):\n        dict[str1[i]] = i\n    for i in range(len(str2)):\n        if str2[i] in dict:\n            dict[str2[i]] = dict[str2[i]]\n        else:\n            dict[str2[i]] = -1\n    count = 0\n    for i in range(len(str1)):\n        if dict[str1[i]]!= -1:\n            count += abs(i - dict[str1[i]])\n    return count\n",
        "num_ids": 141
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count_1, count_0 = 0, 0\n    for i in str1:\n        if i == '1':\n            count_1 += 1\n        else:\n            count_0 += 1\n    for j in str2:\n        if j == '1':\n            count_1 -= 1\n        else:\n            count_0 -= 1\n    return count_1 + count_0 \n",
        "num_ids": 94
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    n1 = len(str1)\n    n2 = len(str2)\n    \n    if n1 < n2:\n        return min_Swaps(str2,str1)\n    \n    n = min(n1, n2)\n    \n    dp = [0 for i in range(n+1)]\n    \n    for i in range(1,n+1):\n        \n        if str1[i-1]!= str2[i-1]:\n            if str1[i-1] == '1' and str2[i-1] == '0':\n                dp[i] = 1 + dp[i-1]\n            else:\n                dp[i] = min(dp[i-1] + 1, dp[i])\n        else:\n            dp[i] = dp[i-1]\n    \n    print(dp)\n    return dp[n]\n",
        "num_ids": 219
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1=list(str1)\n    str2=list(str2)\n    i=0\n    while(i<len(str1)):\n        if str1[i]!= str2[i]:\n            str1[i],str1[i+1]=str1[i+1],str1[i]\n            i=i+2\n        else:\n            i=i+1\n    print(str1)\n    return i\n",
        "num_ids": 109
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def str_to_array(str1) :\n        return [int(x) for x in str1]\n    \n    def array_to_str(arr) :\n        return ''.join([str(x) for x in arr])\n    \n    def array_to_str_swap(arr,str1) :\n        i = 0\n        while i<len(arr) and arr[i]!=0 :\n            i+=1\n        str = ''\n        for j in range(i,len(arr)) :\n            if arr[j]==1 :\n                str+=str1[j]\n        return str\n",
        "num_ids": 149
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def f(s1,s2):\n        dp = [[0 for i in range(len(s2)+1)]for j in range(len(s1)+1)]\n        for i in range(len(s1)+1):\n            for j in range(len(s2)+1):\n                if i==0:\n                    dp[i][j] = j\n                elif j==0:\n                    dp[i][j] = i\n                elif s1[i-1]==s2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = 1+min(dp[i][j-1],dp[i-1][j],dp[i-1][j-1])\n        return dp[-1][-1]\n    return f(str1,str2)\n",
        "num_ids": 211
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    '''\n    Input: str1 = \"11010\", str2 = \"10111\"\n    Output: 2\n    Explanation: Swapping a 0 to a 1 or vice versa costs 1.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = int(str1,2)\n    n2 = int(str2,2)\n    count = 0\n    while n1!= n2 :\n        if n1 > n2 :\n            n1 = n1 - 1\n            n1 = n1 ^ n2\n            n2 = n2 ^ n1\n            count = count + 1\n        elif n1 < n2 :\n            n2 = n2 - 1\n            n2 = n2 ^ n1\n            n1 = n1 ^ n2\n            count = count + 1\n    return count\n",
        "num_ids": 136
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    \n    # check if str1 or str2 is shorter\n    if n1 > n2 : \n        return min_Swaps(str2,str1)\n    # When the input strings are of equal length\n    # initialize a matrix of size nxn to store the count of\n    # transitions from s1[0] to s2[0]\n    count_mat = [[0]*n1 for i in range(n2)]\n    \n    # fill the matrix \n    for i in range(n1): \n        for j in range(n2):\n            if i == 0 and j == 0:\n                count_mat[i][j] = 0\n            elif str1[i] == str2[j]:\n                count_mat[i][j] = count_mat[i-1][j-1]\n            else:\n                count_mat[i][j] = 1 + min(count_mat[i][j-1],\n                                            count_mat[i-1][j],\n                                            count_mat[i-1][j-1])\n    \n    return count_mat[n1-1][n2-1]\n",
        "num_ids": 290
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for elem in tuple_list:\n        if type(elem) == int:\n            size = size + sys.getsizeof(elem)\n        elif type(elem) == list:\n            size = size + tuple_size(elem)\n        elif type(elem) == tuple:\n            size = size + tuple_size(elem)\n    return size\ndef tuple_max(tuple_list):\n    '''\n    Write a function to find the maximum value in the tuple.\n    '''\n    max_val = tuple_list[0]\n    for elem in tuple_list:\n        if elem > max_val:\n            max_val = elem\n    return max_val\ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to reverse the tuple.\n    '''\n    reverse_list = []\n    for elem in tuple_list:\n        reverse_list.append(elem)\n    reverse_list.reverse()\n    return tuple(reverse_list)\ndef tuple_sorted(tuple_list):\n    '''\n    Write a function to sort the tuple.\n    '''\n    sorted_list = []\n    for elem in tuple_list:\n        sorted_list.append(elem)\n    sorted_list.sort()\n    return tuple(sorted_list)\ndef tuple_count(tuple_list, elem):\n    '''\n    Write a function to count the number of occurrences of the given element in the tuple.\n    '''\n    count = 0\n    for elem in tuple_list:\n        if elem == elem:\n            count += 1\n    return count\ndef tuple_mul(tuple_list, num):\n    '''\n    Write a function to multiply all the values in the tuple by the given number and return a tuple.\n    '''\n    mult_list = []\n    for elem in tuple_list:\n        mult_list.append(elem * num)\n    return tuple(mult_list)\ndef tuple_div(tuple_list, num):\n    '''\n    Write a function to divide all the values in the tuple by the given number and return a tuple.\n    '''\n    div_list = []\n    for elem in tuple_list:\n        div_list.append(elem / num)\n    return tuple(div_list)\ndef tuple_index(tuple_list, elem):\n    '''\n    Write a function that takes a tuple as a parameter, and return the index of the given element.\n    '''\n    count = 0\n    for elem in tuple_list:\n        if elem == elem:\n            return count\n        count += 1\ndef tuple_index_list(tuple_list, index_list):\n    '''\n    Write a function that takes a tuple as a parameter, and return the value of the tuple elements at the given index numbers.\n    '''\n    tuple_index_list = []\n    for elem in index_list:\n        tuple_index_list.append(tuple_list[elem])\n    return tuple(tuple_index_list)\ndef tuple_remove(tuple_list, elem):\n    '''\n    Write a function to remove all the occurrences of the given element in the tuple.\n    '''\n    new_list = []\n    for elem in tuple_list:\n        if elem!= elem:\n            new_list.append(elem)\n    return tuple(new_list)\ndef tuple_pop(tuple_list):\n    '''\n    Write a function to remove the last element of the tuple and return the tuple.\n    '''\n    tuple_list.pop()\n    return tuple(tuple_list)\ndef tuple_insert(tuple_list, index_list, new_elem):\n    '''\n    Write a function that inserts the given element at the given index numbers in the tuple.\n    '''\n    for elem in index_list:\n        tuple_list.insert(elem, new_elem)\n    return tuple(tuple_list)\ndef tuple_copy(tuple_list):\n    '''\n    Write a function to copy the tuple.\n    '''\n    return tuple(tuple_list)\ndef tuple_join(tuple_list, sep):\n    '''\n    Write a function to join all the elements of the tuple into a string, and return a string.\n    '''\n    return sep.join(tuple_list)\ndef tuple_map(tuple_list, map_fn):\n    '''\n    Write a function to map the given function to each element in the tuple.\n    '''\n    map_list = []\n    for elem in tuple_list:\n        map_list.append(map_fn(elem))\n    return tuple(map_list)\ndef tuple_reduce(tuple_list, reduce_fn):\n    '''\n    Write a function to reduce the given function to a single value in the tuple.\n    '''\n    reduce_list = []\n    for elem in tuple_list:\n        reduce_list.append(reduce_fn(elem))\n    return tuple(reduce_list)\ndef tuple_filter(tuple_list, filter_fn):\n    '''\n    Write a function to filter the given function from the tuple.\n    '''\n    filter_list = []\n    for elem in tuple_list:\n        if filter_fn(elem):\n            filter_list.append(elem)\n    return tuple(filter_list)\ndef get_tuple_list_str(tuple_list):\n    '''\n    Write a function to convert the given tuple into a string.\n    '''\n    str_list = []\n    for elem in tuple_list:\n        str_list.append(str(elem))\n    return''.join(str_list)\ndef test_tuple_size():\n    assert sys.getsizeof(tuple_size((1, 2, 3))) == sys.getsizeof(1)\n    assert sys.getsizeof(tuple_size((1,))) == sys.getsizeof(1) * tuple_size(())\n    assert sys.getsizeof(tuple_size(('a', 'b', 'c'))) == sys.getsizeof('a') * sys.getsizeof('b') * sys.getsizeof('c')\ndef test_tuple_max():\n    assert tuple_max((1, 2, 3)) == 3\n    assert tuple_max((1, 2, 3, 4)) == 4\n    assert tuple_max((1,)) == 1\ndef test_tuple_reverse():\n    assert tuple_reverse((1, 2, 3, 4, 5)) == (5, 4, 3, 2, 1)\ndef test_tuple_sorted():\n    assert tuple_sorted((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\n    assert tuple_sorted((1, 2, 3, 5, 4)) == (1, 2, 3, 4, 5)\n    assert tuple_sorted((5, 3, 2, 1, 4)) == (1, 2, 3, 4, 5)\n    assert tuple_sorted((1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11)) == (1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11)\ndef test_tuple_count():\n    assert tuple_count((1, 2, 3, 1), 1) == 2\n    assert tuple_count((1, 2, 3, 1, 1), 1) == 3\n    assert tuple_count((1, 2, 3, 1, 1), 2) == 0\ndef test_tuple_mul():\n    assert tuple_mul((1, 2, 3, 4), 3) == (1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4)\n    assert tuple_mul((1, 2, 3, 4), 2) == (1, 2, 3, 4, 1, 2, 3, 4)\ndef test_tuple_div():\n    assert tuple_div((2, 4, 6, 8), 2) == (1, 2, 3, 4)\n    assert tuple_div((2, 4, 6, 8), 3) == (1, 2, 3, 4)\n    assert tupl",
        "num_ids": 655
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        if type(item) == int:\n            size += sys.getsizeof(item)\n        else:\n            size += sys.getsizeof(tuple(item))\n",
        "num_ids": 57
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if(len(tuple_list)!=0):\n        return sys.getsizeof(tuple_list)\n    else:\n        return 0\n",
        "num_ids": 38
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size=0\n    for tuple_el in tuple_list:\n        tuple_el=str(tuple_el)\n        tuple_el=tuple_el.replace(\",\",\"\")\n        total_size+=len(tuple_el)\n    print(total_size)\n    \n    return\n    \n    \ndef tuple_sort(tuple_list,i):\n    '''\n    Write a function to sort the tuple using the i\u2019th index element as the key for sorting.\n    '''\n    l=sorted(tuple_list,key=lambda x:x[i])\n    print(l)\n    \n    return\n    \n    \ndef tuple_slicing(tuple_list):\n    '''\n    Write a function that returns a tuple containing all the elements of the tuple_list, except for the first and last ones.\n    '''\n    tuple_list=tuple(tuple_list)\n    print(tuple_list[1:len(tuple_list)-1])\n    \n    return\n    \ndef tuple_cycle(tuple_list):\n    '''\n    Write a function that prints each element of the tuple_list in a new line.\n    '''\n    for tuple_el in tuple_list:\n        print(tuple_el)\n    \n    return\n    \ndef convert_tuple_into_list(tuple_list):\n    '''\n    Write a function to convert the tuple_list into a list.\n    '''\n    print(list(tuple_list))\n    return\n    \n    \ndef tuple_in(tuple_list):\n    '''\n    Write a function to check whether the tuple_list contains a tuple with the specified values.\n    '''\n    print(\"YES\" if (8,9,10) in tuple_list else \"NO\")\n    return\n    \n    \ndef tuple_count(tuple_list):\n    '''\n    Write a function to count the occurrences of the specified element in the tuple_list.\n    '''\n    print(tuple_list.count((2,3,4)))\n    return\n    \ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to reverse the tuple_list.\n    '''\n    print(tuple_list[::-1])\n    return\n    \ndef tuple_index(tuple_list):\n    '''\n    Write a function to find the index of the tuple_list with the specified values.\n    '''\n    print(tuple_list.index((2,3,4)))\n    return\n    \ndef tuple_index_count(tuple_list):\n    '''\n    Write a function to check whether the tuple_list contains a tuple with the specified values. If it does, then return a list containing the index of that tuple in the tuple_list, and its count. If it does not, then return a list containing a single tuple with a message to that effect.\n    '''\n    print(tuple_list.index((2,3,4)))\n    print(tuple_list.count((2,3,4)))\n    return\n    \ndef tuple_concatenation(tuple_list):\n    '''\n    Write a function that concatenates the tuple_list with another list.\n    '''\n    list2=[4,5,6]\n    tuple_list=tuple(tuple_list)\n    print(tuple_list + tuple(list2))\n    return\n    \ndef tuple_from_string(string):\n    '''\n    Write a function to convert a string into a tuple.\n    '''\n    print(tuple(string))\n    return\n    \ndef tuple_unique(tuple_list):\n    '''\n    Write a function to find the unique elements of the tuple_list.\n    '''\n    print(list(set(tuple_list)))\n    return\n    \ndef tuple_unique_ordered(tuple_list):\n    '''\n    Write a function to find the unique elements of the tuple_list, but preserve the ordering.\n    '''\n    print(list(set(tuple_list)))\n    return\n    \ndef tuple_unique_set(tuple_list):\n    '''\n    Write a function to find the unique elements of the tuple_list, but in a set.\n    '''\n    print(set(tuple_list))\n    return\n    \ndef tuple_unique_set_ordered(tuple_list):\n    '''\n    Write a function to find the unique elements of the tuple_list, but in a set, preserving the ordering.\n    '''\n    print(set(tuple_list))\n    return\n    \ndef sort_tuple(tuple_list):\n    '''\n    Write a function to sort the tuple_list using the key as the index of the tuple_list.\n    '''\n    print(sorted(tuple_list,key=lambda x:x[1]))\n    return\n    \ndef sort_tuple_in_descending_order(tuple_list):\n    '''\n    Write a function to sort the tuple_list in descending order using the key as the index of the tuple_list.\n    '''\n    print(sorted(tuple_list,key=lambda x:x[1],reverse=True))\n    return\n    \ndef sort_tuple_reverse_sorted(tuple_list):\n    '''\n    Write a function to sort the tuple_list in descending order using the key as the index of the tuple_list.\n    '''\n    print(sorted(tuple_list,key=lambda x:x[1],reverse=True)[::-1])\n    return\n    \ndef tuple_remove_item(tuple_list,item):\n    '''\n    Write a function to remove the specified item from the tuple_list.\n    '''\n    print(tuple_list.remove(item))\n    return\n    \ndef tuple_remove_item_index(tuple_list,item,index):\n    '''\n    Write a function to remove the specified item from the tuple_list.\n    '''\n    print(tuple_list.pop(index))\n    return\n    \ndef tuple_remove_item_index_while(tuple_list,item,index):\n    '''\n    Write a function to remove the specified item from the tuple_list.\n    '''\n    while index < len(tuple_list):\n        if tuple_list[index]==item:\n            del tuple_list[index]\n        else:\n            index+=1\n    print(tuple_list)\n    return\n    \ndef tuple_remove_item_index_while_2(tuple_list,item,index):\n    '''\n    Write a function to remove the specified item from the tuple_list.\n    '''\n    index=0\n    while index < len(tuple_list):\n        if tuple_list[index]==item:\n            del tuple_list[index]\n            break\n        index+=1\n    print(tuple_list)\n    return\n    \ndef tuple_is_sublist(tuple_list,sublist):\n    '''\n    Write a function that checks whether the tuple_list is a sublist of the specified list.\n    '''\n    print(all(item in sublist for item in tuple_list))\n    return\n    \ndef tuple_remove_sublist(tuple_list,sublist):\n    '''\n    Write a function that removes all the sublists of the specified list from the tuple_list.\n    '''\n    print(tuple_list.difference(sublist))\n    return\n    \ndef tuple_remove_sublist_index(tuple_list,sublist,index):\n    '''\n    Write a function that removes all the sublists of the specified list from the tuple_list.\n    '''\n    tuple_list=tuple(tuple_list)\n    sublist=tuple(sublist)\n    while index < len(tuple_list):\n        if tuple_list[index:index+len(sublist)]==sublist:\n            del tuple_list[index:index+len(sublist)]\n        else:\n            index+=1\n    print(tuple_list)\n    return\n    \ndef tuple_remove_sublist_index_2(tuple_list,sublist,index):\n    '''\n    Write a function that removes all the sublists of the specified list from the tuple_list.\n    '''\n    tuple_list=tuple(tuple_list)\n",
        "num_ids": 17
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(\"The size in bytes of given tuple:\", sys.getsizeof(tuple_list))\n",
        "num_ids": 26
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if isinstance(tuple_list, tuple) == False:\n        raise TypeError('Input must be a tuple')\n",
        "num_ids": 30
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(sys.getsizeof(tuple_list))\n",
        "num_ids": 17
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for e in tuple_list:\n        size += sys.getsizeof(e)\n    return size\n",
        "num_ids": 32
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    \n    '''\n    Kth element from two arrays\n    \n    Given an array arr1[] of length n and another array arr2[] of length n, write a function to find the kth element in the merged array.\n",
        "num_ids": 47
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return find_kth_helper(arr1, arr2, 0, len(arr1) - 1, k)\n",
        "num_ids": 31
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[k-1] < arr2[k-1]:\n        return arr1[k-1]\n    elif arr1[k-1] > arr2[k-1]:\n        return arr2[k-1]\n    else:\n        return arr1[k-1]\n",
        "num_ids": 73
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    m, n = len(arr1), len(arr2)\n    while True:\n        if i == m or j == n:\n            return None\n        if k <= m + n:\n            if i < m and j < n:\n                if k == m + n:\n                    return min(arr1[i], arr2[j])\n                k -= m + n\n                i += 1\n                j += 1\n            elif i < m:\n                k -= m + n\n                i += 1\n            else:\n                k -= m + n\n                j += 1\n        else:\n            return None\n",
        "num_ids": 150
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1.extend(arr2)\n    arr1.sort()\n    return arr1[k-1]\n",
        "num_ids": 30
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return find_kth_rec(arr1, arr2, k, 0, 0)\n",
        "num_ids": 24
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return find_kth(arr1, arr2, k, 0, 0, len(arr1)-1, len(arr2)-1)\n",
        "num_ids": 36
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n    if len1 == 0:\n        return arr2[k - 1]\n    elif len2 == 0:\n        return arr1[k - 1]\n    if k > len1 + len2:\n        raise Exception('k is greater than the sum of the length of the two sorted arrays')\n    else:\n        if k <= len1:\n            return find_kth(arr1[:k], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:k - len1], k - len1)\n",
        "num_ids": 150
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    if m == 0 and n == 0:\n        return None\n    elif m == 0:\n        return arr2[k-1]\n    elif n == 0:\n        return arr1[k-1]\n    else:\n        if k < m+n:\n            if k <= m:\n                return find_kth(arr1[:k], arr2, k)\n            else:\n                return find_kth(arr1, arr2[:k-m], k-m)\n        else:\n            return None\n",
        "num_ids": 145
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if k < n1:\n        return arr1[k]\n    if k < n1+n2:\n        if k-n1 < n2:\n            return arr2[k-n1]\n        else:\n            return arr1[k-n1-n2]\n    return -1\n",
        "num_ids": 94
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num=number\n    length=len(str(number))\n    sum=0\n    for i in range(0,length):\n        sum+=((num%10)**length)\n        num=num//10\n    if(sum==number):\n        print(\"Given number is armstrong number\")\n    else:\n        print(\"Given number is not armstrong number\")\n    return\n",
        "num_ids": 91
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return sum(int(i)**len(str(number)) for i in str(number)) == number\n",
        "num_ids": 27
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum_of_numbers = 0\n    number_copy = number\n    # get sum of digits\n    while number_copy >= 1:\n        sum_of_numbers = sum_of_numbers + (number_copy % 10) ** 3\n        number_copy = int(number_copy / 10)\n    # check if sum of digits of number is equal to number\n    return sum_of_numbers == number\n",
        "num_ids": 99
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    length = len(number)\n    sum = 0\n    for char in number:\n        sum += int(char)**length\n    return sum == int(number)\n",
        "num_ids": 49
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    total = 0\n    while temp!= 0:\n        total += (temp % 10) ** 3\n        temp //= 10\n    if total == number:\n        print(f\"{number} is an Armstrong Number\")\n    else:\n        print(f\"{number} is not an Armstrong Number\")\n",
        "num_ids": 77
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return number == sum([int(i)**len(str(number)) for i in str(number)])\n",
        "num_ids": 28
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Converting given number to string to make it easier to iterate over it\n    num_str = str(number)\n",
        "num_ids": 30
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    l = len(str(number))\n    s = 0\n    \n    while(number>0):\n        num = number%10\n        number = number//10\n        s = s+num**l\n    \n    if(s == number):\n        return True\n    else:\n        return False\n    \ndef check_armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    l = len(str(number))\n    s = 0\n    \n    for i in str(number):\n        s = s+int(i)**l\n    \n    if(s == number):\n        return True\n    else:\n        return False\n    \ndef palindrome_number(number):\n    '''\n    Write a function to check whether the given number is palindrome or not.\n    '''\n    \n    return number == number[::-1]\n",
        "num_ids": 15
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num=number\n    sum=0\n    while num>0:\n        digit=num%10\n        sum+=digit**3\n        num=num//10\n    if sum==number:\n        print(\"{} is armstrong number.\".format(number))\n    else:\n        print(\"{} is not armstrong number.\".format(number))\n",
        "num_ids": 84
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    string_num = str(number)\n    sum = 0\n    for i in string_num:\n        sum += pow(int(i), len(string_num))\n    return sum == number\n",
        "num_ids": 48
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(number + 1):\n        s += i\n    return s, s / number\n",
        "num_ids": 31
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    return(sum, sum/number)\n",
        "num_ids": 35
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    count = 0\n    sum = 0\n    while count < number:\n        count += 1\n        sum += count\n    print(f\"The sum of first {number} numbers is {sum}\")\n    print(f\"The average of first {number} numbers is {sum / number}\")\n",
        "num_ids": 69
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= number:\n        sum += i\n        i += 1\n    average = sum/number\n    return sum, average\n",
        "num_ids": 42
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if type(number)!= int or number < 1:\n        return 'Invalid Input'\n    else:\n        total = 0\n        for i in range(number):\n            total += i + 1\n        average = total / number\n        return (total, average)\n",
        "num_ids": 63
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # d = dict()\n    sum = 0\n    for i in range(1,number + 1):\n        sum += i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    average=0\n    for i in range(number+1):\n        sum+=i\n    average=sum/number\n    print(\"Sum: \", sum)\n    print(\"Average: \", average)\n    return\n",
        "num_ids": 56
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if (number >= 0):\n        sum = 0\n        count = 0\n        while (count < number):\n            sum = sum + (count + 1)\n            count = count + 1\n        average = sum / number\n        print(f\"The sum of the first {number} natural numbers is: {sum}\")\n        print(f\"The average of the first {number} natural numbers is: {average}\")\n    else:\n        print(\"Please enter a number greater than 0\")\n    \n    \ndef run():\n    print(\"Run!\")\n    while (True):\n        print(\"1. Sum and average of n numbers: \")\n        print(\"2. Exit\")\n        option = int(input(\"Select one option: \"))\n        if (option == 1):\n            number = int(input(\"Enter the number: \"))\n            sum_average(number)\n        elif (option == 2):\n            break\n        else:\n            print(\"Invalid option!\")\n    \n    \nif __name__ == \"__main__\":\n    run()",
        "num_ids": 243
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number + 1):\n        sum = sum + i\n    avg = sum / number\n    return sum, avg\n",
        "num_ids": 39
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    n = number\n    if (number < 0):\n        print(\"Please enter a positive number\")\n    elif number == 0:\n        print(\"Sum is 0\")\n    else:\n        for i in range(n):\n            sum += (i + 1)\n        avg = sum / n\n    return sum,avg\n",
        "num_ids": 89
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        print(\"The given number is even.\")\n    else :\n        print(\"The given number is odd.\")\n",
        "num_ids": 35
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        print(n,\" is even number\") \n    else : \n        print(n,\" is odd number\") \n    return;\nis_Even(30) \nis_Even(24) \n",
        "num_ids": 61
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    for i in range(2,n//2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return(is_Even(n))\ndef is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0) :\n        return True\n    else :\n        return False\ndef Check_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '",
        "num_ids": 21
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    return False\n",
        "num_ids": 19
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #method 1\n    dict1 = {}\n    for x in str1:\n        if x in dict1:\n            return x\n        else:\n            dict1[x] = 1\n",
        "num_ids": 46
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict_count = dict()\n    for i in str1:\n        if i not in dict_count:\n            dict_count[i] = 1\n        else:\n            dict_count[i] += 1\n    for i in dict_count:\n        if dict_count[i] > 1:\n            return i\n    return \"No repeated character\"\n",
        "num_ids": 85
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for s in str1:\n        if s in d:\n            return s\n        else:\n            d[s] = 0\n    return 'None'\n",
        "num_ids": 44
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i] in str1[i+1:] and str1[i] in str1[:i]:\n            return str1[i]\n        else:\n            return \"No repetitions\"\n",
        "num_ids": 66
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for index in range(len(str1)):\n        if str1[index] in str1[index+1:]:\n            return str1[index]\n    return None\n",
        "num_ids": 44
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    chars = {}\n    for c in str1:\n        if c in chars:\n            return c\n        chars[c] = 1\n    return None\n",
        "num_ids": 40
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in range(len(str1)):\n        if str1[i] not in dict1.keys():\n            dict1[str1[i]] = 1\n        else:\n            return str1[i]\n    return -1\n",
        "num_ids": 65
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    chars = set()\n    str1 = list(str1)\n    for c in str1:\n        if c in chars:\n            return c\n        chars.add(c)\n    return '_'\n",
        "num_ids": 53
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    store_chars = dict()\n    for c in str1:\n        if c in store_chars:\n            return c\n        store_chars[c] = 1\n    return None\n",
        "num_ids": 58
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # loop through the string and keep track of the characters we have seen\n    # compare this to the rest of the string\n    chars_seen = set()\n    for char in str1:\n        if char in chars_seen:\n            return char\n        chars_seen.add(char)\n    return None\n",
        "num_ids": 74
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 43
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    ludic.append(2)\n    ludic.append(3)\n    ludic.append(5)\n    ludic.append(7)\n    ludic.append(11)\n    ludic.append(13)\n    for i in range(n):\n        next_ludic = []\n        for n in ludic:\n            next_ludic.append(2*n)\n            next_ludic.append(3*n)\n            next_ludic.append(5*n)\n            next_ludic.append(7*n)\n            next_ludic.append(11*n)\n            next_ludic.append(13*n)\n            if n not in next_ludic:\n                next_ludic.append(n)\n        ludic = next_ludic\n    return ludic\n",
        "num_ids": 201
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n        for x in range(1, i):\n            ludic.append(x*i)\n    return list(set(ludic))\n",
        "num_ids": 62
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    ludic_list = []\n    for i in range(n):\n        ludic.append(i)\n    for i in range(n):\n        if i % 1 == 0:\n            ludic_list.append(i)\n    return ludic_list\n",
        "num_ids": 70
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def get_ludic_rec(n, num):\n        if num < 10:\n            return [[num]]\n        res = []\n        for i in range(len(str(num))):\n            for j in get_ludic_rec(n, int(str(num)[i:])):\n                if num >= 10 and int(str(num)[:i]) not in j:\n                    j.append(int(str(num)[:i]))\n                if num >= 100 and int(str(num)[:i]) not in j:\n                    j.append(int(str(num)[:i]))\n                if num >= 1000 and int(str(num)[:i]) not in j:\n                    j.append(int(str(num)[:i]))\n                if num >= 10000 and int(str(num)[:i]) not in j:\n                    j.append(int(str(num)[:i]))\n                res.append(j)\n        return res\n",
        "num_ids": 228
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # return [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687",
        "num_ids": 2013
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 45
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 43
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    def get_ludic_rec(n):\n        if len(ludic) > 0 and ludic[-1] >= n:\n            return\n        if len(ludic) == n:\n            ludic.append(n)\n            return\n        for i in range(10):\n            get_ludic_rec(n*10+i)\n    get_ludic_rec(n)\n    return ludic\n",
        "num_ids": 106
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n    return ludic\n",
        "num_ids": 35
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    return''.join(words[::-1])\n",
        "num_ids": 24
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    a = s.split()\n    a.reverse()\n    return \" \".join(a)\n",
        "num_ids": 25
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    return''.join(reversed(words))\n",
        "num_ids": 24
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    return \" \".join(s[::-1])\n",
        "num_ids": 23
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Step 1. Split the input by space\n    # Step 2. Reverse the split words\n    # Step 3. Join the reversed words\n",
        "num_ids": 33
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # put all the words into an array\n    words = []\n    i = 0\n    # split the string\n    for j in range(len(s)):\n        if s[j] =='':\n            words.append(s[i:j])\n            i = j + 1\n    # put all the words into an array\n    words = []\n    i = 0\n    # split the string\n    for j in range(len(s)):\n        if s[j] =='':\n            words.append(s[i:j])\n            i = j + 1\n    # reverse each word\n    rev_word = []\n    for i in range(len(words)):\n        rev_word.append(words[i][::-1])\n    # put each word back into the string\n    new_str = ''\n    for i in range(len(words)):\n        new_str += rev_word[i]\n        new_str +=''\n    # remove the last space\n    new_str = new_str[:-1]\n    return new_str\n",
        "num_ids": 251
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip()\n    l = s.split(' ')\n    s =''.join(l[::-1])\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])",
        "num_ids": 16
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_list = s.split()\n    return''.join(s_list[::-1])\n",
        "num_ids": 26
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split(' ')))\n",
        "num_ids": 18
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for x in range(2, num):\n        if num % x == 0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num > 1:\n        for i in range(2, int(num/2)+1):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    elif num > 2:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Your code here\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Assume num is an integer\n    # if num is less than 2, return False\n    if num < 2:\n        return False\n    # If num is divisible by 2, check if it is divisible by another number\n    # If yes, return False\n    if num % 2 == 0:\n        return False\n    # If num is not divisible by 2, it is a prime number\n    # If there is another number which can divide it, return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 145
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    import math\n    if num < 2:\n        return False\n    for i in range(2,int(math.sqrt(num)+1)):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n",
        "num_ids": 80
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num % 2 == 0 and num!= 2:\n        return False\n    else:\n        for i in range(3, num//2+1, 2):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 70
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\ndef cm_inch(cm):\n    '''\n    Write a function to convert cm to inches.\n    '''\n    inch = cm / 2.54\n    return inch\ndef f_to_c(fahrenheit):\n    '''\n    Write a function to convert fahrenheit to centigrade.\n    '''\n    centigrade = (fahrenheit - 32) / 1.8\n    return centigrade\ndef c_to_f(centigrade):\n    '''\n    Write a function to convert centigrade to fahrenheit.\n    '''\n    fahrenheit = centigrade * 1.8 + 32\n    return fahrenheit\ndef pound_kg(pound):\n    '''\n    Write a function to convert pound to kg.\n    '''\n    kg = pound / 2.2\n    return kg\ndef kg_pound(kg):\n    '''\n    Write a function to convert kg to pound.\n    '''\n    pound = kg * 2.2\n    return pound\ndef m_ft(meters):\n    '''\n    Write a function to convert meters to feet.\n    '''\n    feet = meters * 3.28084\n    return feet\ndef ft_m(feet):\n    '''\n    Write a function to convert feet to meters.\n    '''\n    meters = feet / 3.28084\n    return meters\ndef gal_l(gallons):\n    '''\n    Write a function to convert gallons to liters.\n    '''\n    liters = gallons * 3.78541\n    return liters\ndef l_gal(liters):\n    '''\n    Write a function to convert liters to gallons.\n    '''\n    gallons = liters / 3.78541\n    return gallons\ndef m_s(meters):\n    '''\n    Write a function to convert meters per second to miles per hour.\n    '''\n    mph = meters / 3600\n    return mph\ndef mps_mph(mps):\n    '''\n    Write a function to convert miles per hour to meters per second.\n    '''\n    meters = mps * 3600\n    return meters\ndef mph_mps(mph):\n    '''\n    Write a function to convert miles per hour to meters per second.\n    '''\n    meters = mph * 3600\n    return meters\ndef kph_mph(kph):\n    '''\n    Write a function to convert kilometers per hour to miles per hour.\n    '''\n    mph = kph / 1.60934\n    return mph\ndef mph_kph(mph):\n    '''\n    Write a function to convert miles per hour to kilometers per hour.\n    '''\n    kph = mph * 1.60934\n    return kph\ndef km_mile(km):\n    '''\n    Write a function to convert kilometers to miles.\n    '''\n    mile = km / 1.609\n    return mile\ndef mile_km(mile):\n    '''\n    Write a function to convert miles to kilometers.\n    '''\n    km = mile * 1.609\n    return km\ndef kpa_pascal(kpa):\n    '''\n    Write a function to convert kilopascals to pascals.\n    '''\n    pascal = kpa * 1000\n    return pascal\ndef pascal_kpa(pascal):\n    '''\n    Write a function to convert pascals to kilopascals.\n    '''\n    kpa = pascal / 1000\n    return kpa\ndef bar_psi(bar):\n    '''\n    Write a function to convert bars to pounds per square inch.\n    '''\n    psi = bar * 14.50377\n    return psi\ndef psi_bar(psi):\n    '''\n    Write a function to convert pounds per square inch to bars.\n    '''\n    bar = psi / 14.50377\n    return bar\ndef ua_cm(uas):\n    '''\n    Write a function to convert microamperes to centi-microamperes.\n    '''\n    cm = uas * 10**-6\n    return cm\ndef cm_ua(cm):\n    '''\n    Write a function to convert centi-microamperes to microamperes.\n    '''\n    uas = cm * 10**6\n    return uas\ndef mhz_khz(mhz):\n    '''\n    Write a function to convert megahertz to kilohertz.\n    '''\n    khz = mhz / 1000\n    return khz\ndef khz_mhz(khz):\n    '''\n    Write a function to convert kilohertz to megahertz.\n    '''\n    mhz = khz * 1000\n    return mhz\ndef m_s2(meters):\n    '''\n    Write a function to convert meters per second to square meters per second.\n    '''\n    m2s = meters**2\n    return m2s\ndef m2s_m_s(m2s):\n    '''\n    Write a function to convert square meters per second to meters per second.\n    '''\n    m_s = m2s**.5\n    return m_s\ndef m3_ft3(meters):\n    '''\n    Write a function to convert meters cubed to feet cubed.\n    '''\n    ft3 = meters**3\n    return ft3\ndef ft3_m3(ft3):\n    '''\n    Write a function to convert feet cubed to meters cubed.\n    '''\n    m3 = ft3**(1/3)\n    return m3\ndef m2_ft2(meters):\n    '''\n    Write a function to convert meters squared to feet squared.\n    '''\n    ft2 = meters**2 / 10.7639104\n    return ft2\ndef ft2_m2(ft2):\n    '''\n    Write a function to convert feet squared to meters squared.\n    '''\n    m2 = ft2 * 10.7639104\n    return m2\ndef m2_in2(meters):\n    '''\n    Write a function to convert meters squared to inches squared.\n    '''\n    in2 = meters**2 / 6.4516\n    return in2\ndef in2_m2(in2):\n    '''\n    Write a function to convert inches squared to meters squared.\n    '''\n    m2 = in2 * 6.4516\n    return m2\ndef ft_cm(feet):\n    '''\n    Write a function to convert feet to centimeters.\n    '''\n    cm = feet * 30.48\n    return cm\ndef cm_ft(cm):\n    '''\n    Write a function to convert centimeters to feet.\n    '''\n    feet = cm / 30.48\n    return feet\ndef m_m(meters):\n    '''\n    Write a function to convert meters to meters.\n    '''\n    return meters\ndef m_km(meters):\n    '''\n    Write a function to convert meters to kilometers.\n    '''\n    km = meters / 1000\n    return km\ndef km_m(km):\n    '''\n    Write a function to convert kilometers to meters.\n    '''\n    meters = km * 1000\n    return meters\ndef ua_m2s(uas):\n    '''\n    Write a function to convert microamperes to square meters per second.\n    '''\n    m2s = uas * 10**-6\n    return m2s\ndef m2s_ua(m2s):\n    '''\n    Write a function to convert square meters per second to microamperes.\n    '''\n    uas = m2s * 10**6\n    return uas\ndef ua_s(uas):\n    '''\n    Write a function to convert microamperes to seconds.\n    '''\n    s = uas / 10**-6\n    return s\ndef s_ua(s):\n    '''\n    Write a function to convert seconds to microamperes.\n    '''\n    uas = s * 10**-6\n    return uas\ndef m3_km3(m3):\n    '''\n    Write a function to convert cubic meters to cubic kilometers.\n    '''\n    km3 = m3 * 10**-9\n    return km3\ndef km3_m3(km3):\n    '''\n    Write a function to convert cubic kilometers to cubic meters.\n    '''\n    m3 = km3 * 1000\n",
        "num_ids": 11
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    #I need to convert the degrees to radians.\n    #I need to use the math module.\n    #I need to return the value of the radians.\n    #I need to create the function called radian_degree(degree)\n    #I need to have the parameter called degree.\n    #I need to give the function the number of degrees.\n    #I need to call the function to return the value of radians.\n    #I need to use the math module.\n    #I need to import math.\n    #I need to use math.radians(degree)\n    #I need to return the value of the radians.\n",
        "num_ids": 148
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\ndef distance_on_earth(lat1, lon1, lat2, lon2):\n    '''\n    Write a function that calculates the distance between two points on Earth.\n    '''\n    lat1_rad = radian_degree(lat1)\n    lat2_rad = radian_degree(lat2)\n    lon1_rad = radian_degree(lon1)\n    lon2_rad = radian_degree(lon2)\n    radius = 6371\n    dlat = lat2_rad - lat1_rad\n    dlon = lon2_rad - lon1_rad\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    distance = radius * c\n    return distance\ndef create_function(function_name, arguments):\n    '''\n    Write a function that creates a function based on input from a dictionary.\n    '''\n    def func():\n        return function_name(arguments)\n    return func\ndef add_two_numbers(x):\n    return x + 2\ndef multiply_by_two(x):\n    return x * 2\ndef create_adder(x):\n    def add(y):\n        return x + y\n    return add\ndef add_by_increment(x):\n    def add_by_increment(y):\n        return x + y\n    return add_by_increment\ndef is_it_a_dog(pet_name):\n    '''\n    Write a function that accepts a pet name and returns True if it is a dog, False if it is not a dog.\n    '''\n    if pet_name[0] == 'b':\n        return True\n    else:\n        return False\ndef is_it_a_dog_or_cat(pet_name):\n    '''\n    Write a function that accepts a pet name and returns True if it is a dog or a cat, False if it is neither.\n    '''\n    if pet_name[0] == 'b' or pet_name[0] == 'c':\n        return True\n    else:\n        return False\ndef create_dictionary(keys, values):\n    '''\n    Write a function that creates a dictionary given two lists or arrays.\n    '''\n    dictionary = {}\n    for i in range(0, len(keys)):\n        dictionary[keys[i]] = values[i]\n    return dictionary\ndef add_dictionaries(d1, d2):\n    '''\n    Write a function that adds two dictionaries together and returns the sum.\n    '''\n    d3 = {}\n    for key in d1:\n        d3[key] = d1[key]\n    for key in d2:\n        if key in d3:\n            d3[key] = d3[key] + d2[key]\n        else:\n            d3[key] = d2[key]\n    return d3\ndef create_dict(keys, values):\n    '''\n    Write a function that creates a dictionary using two lists or arrays.\n    '''\n    dictionary = {}\n    for i in range(0, len(keys)):\n        dictionary[keys[i]] = values[i]\n    return dictionary\ndef create_dict_with_list(keys, values):\n    '''\n    Write a function that creates a dictionary using two lists or arrays.\n    '''\n    dictionary = {}\n    for i in range(0, len(keys)):\n        dictionary[keys[i]] = values[i]\n    return dictionary\ndef add_dicts(d1, d2):\n    '''\n    Write a function that adds two dictionaries together and returns the sum.\n    '''\n    d3 = {}\n    for key in d1:\n        d3[key] = d1[key]\n    for key in d2:\n        if key in d3:\n            d3[key] = d3[key] + d2[key]\n        else:\n            d3[key] = d2[key]\n    return d3\ndef create_dictionary_from_lists(keys, values):\n    '''\n    Write a function that creates a dictionary using two lists or arrays.\n    '''\n    dictionary = {}\n    for i in range(0, len(keys)):\n        dictionary[keys[i]] = values[i]\n    return dictionary\ndef calculate_age_in_dog_years(pet_age, human_age):\n    '''\n    Write a function that calculates the human age in dog years.\n    '''\n    return (human_age * 7) + (pet_age * 6)\ndef build_person_info(first_name, last_name, age):\n    '''\n    Write a function that builds a dictionary for a person.\n    '''\n    person = {'first': first_name, 'last': last_name, 'age': age}\n    return person\ndef build_person_info_from_dict(person_info):\n    '''\n    Write a function that builds a dictionary for a person.\n    '''\n    person = {}\n    person['first'] = person_info['first']\n    person['last'] = person_info['last']\n    person['age'] = person_info['age']\n    return person\ndef get_min_value(lst):\n    '''\n    Write a function that returns the minimum value in a list.\n    '''\n    min_val = lst[0]\n    for i in range(1, len(lst)):\n        if min_val > lst[i]:\n            min_val = lst[i]\n    return min_val\ndef get_max_value(lst):\n    '''\n    Write a function that returns the maximum value in a list.\n    '''\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if max_val < lst[i]:\n            max_val = lst[i]\n    return max_val\ndef get_max_index(lst):\n    '''\n    Write a function that returns the maximum value in a list.\n    '''\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return max_index\ndef get_min_index(lst):\n    '''\n    Write a function that returns the minimum value in a list.\n    '''\n    min_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] < lst[min_index]:\n            min_index = i\n    return min_index\ndef get_middle_index(lst):\n    '''\n    Write a function that returns the middle value in a list.\n    '''\n    min_index = 0\n    max_index = len(lst) - 1\n    mid_index = 0\n    if len(lst) % 2 == 0:\n        mid_index = (min_index + max_index) / 2\n    else:\n        mid_index = (min_index + max_index + 1) / 2\n    return int(mid_index)\ndef get_first_and_last_index(lst):\n    '''\n    Write a function that returns the first and last index for a list.\n    '''\n    min_index = 0\n    max_index = len(lst) - 1\n    return min_index, max_index\ndef get_sum_of_even_numbers(lst):\n    '''\n    Write a function that returns the sum of all even numbers in a list.\n    '''\n    sum_of_evens = 0\n    for i in range(0, len(lst)):\n        if lst[i] % 2 == 0:\n            sum_of_evens += lst[i]\n    return sum_of_evens\ndef get_sum_of_odd_numbers(lst):\n    '''\n    Write a function that returns the sum of all odd numbers in a list.\n    '''\n    sum_of_odds = 0\n    for i in range(0, len(lst)):\n        if lst[",
        "num_ids": 32
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi*degree/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi/180 * degree\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_to_degree(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef convert_to_radians(degree):\n    ''",
        "num_ids": 26
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    for match in re.finditer(pattern, text):\n        start, end = match.span()\n        substring = text[start:end]\n        print(substring)\n",
        "num_ids": 44
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    return match.group() if match else ''\n",
        "num_ids": 34
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    # Initializing index variables\n    index = 0\n    pattern_index = 0\n    literals_matches = []\n    \n    # Traverse the text string character by character\n    while index < len(text):\n        # Get the next character in the text string\n        char = text[index]\n        # Get the next character in the pattern string\n        pattern_char = pattern[pattern_index]\n        # Increment the index for both strings\n        index += 1\n        pattern_index += 1\n        \n        # When we encounter a literal\n        if pattern_char in 'Ll':\n            # Match the character with the next character in the text string\n            if text[index] == pattern[pattern_index]:\n                # If the characters match, increment the index for both strings\n                index += 1\n                pattern_index += 1\n                # Append the matching substring to the matches list\n                literals_matches.append(text[index - 1])\n            # When we encounter a mismatch\n            else:\n                # Break out of the loop\n                break\n        # When we encounter a non-literal character\n        else:\n            # Match the character with the next character in the text string\n            if text[index] == pattern[pattern_index]:\n                # If the characters match, increment the index for both strings\n                index += 1\n                pattern_index += 1\n            # When we encounter a mismatch\n            else:\n                # Break out of the loop\n                break\n    \n    return literals_matches\n",
        "num_ids": 348
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return text[start:end], start, end\n    else:\n        return None, None, None\n",
        "num_ids": 59
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    print(re.findall(pattern, text))\n    print(text.find(pattern))\n",
        "num_ids": 25
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    print(regex.search(text))\n",
        "num_ids": 25
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match == None:\n        return None\n    start = match.start()\n    end = match.end()\n    return text[start:end], start, end\n",
        "num_ids": 53
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    return result\n",
        "num_ids": 18
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        return match.group()\n    return None\n",
        "num_ids": 40
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #regex = re.compile(pattern)\n    #for match in re.finditer(pattern, text):\n    #    print(match)\n    #return re.finditer(pattern, text)\n    match = re.search(pattern, text)\n    return match.start(), match.end()\n",
        "num_ids": 74
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0,1,1]\n    for i in range(3, n+1):\n        bell.append(i*bell[i-1])\n    return bell[n]\n",
        "num_ids": 47
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    if(n == 0):\n        return bell[0]\n    else:\n        for i in range(1, n+1):\n            bell.append(i*bell[i-1])\n        return bell[n]\n",
        "num_ids": 62
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass\ndef no_of_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    pass\ndef sum_of_divisors(n): \n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    pass\ndef sum_of_divisors_list(n):\n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    pass\ndef sum_of_divisors_list_primes(n):\n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    pass\ndef is_prime(n):\n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    pass\ndef is_prime_list(n):\n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    pass\ndef is_prime_list_primes(n):\n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    pass\ndef sum_of_all_prime_numbers(n):\n    '''\n    Write a python function to find the sum of all prime numbers.\n    '''\n    pass\ndef sum_of_all_prime_numbers_list(n):\n    '''\n    Write a python function to find the sum of all prime numbers.\n    '''\n    pass\ndef sum_of_all_prime_numbers_list_primes(n):\n    '''\n    Write a python function to find the sum of all prime numbers.\n    '''\n    pass\ndef sum_of_prime_divisors(n):\n    '''\n    Write a python function to find the sum of prime divisors of a number.\n    '''\n    pass\ndef sum_of_prime_divisors_list(n):\n    '''\n    Write a python function to find the sum of prime divisors of a number.\n    '''\n    pass\ndef sum_of_prime_divisors_list_primes(n):\n    '''\n    Write a python function to find the sum of prime divisors of a number.\n    '''\n    pass\ndef prime_divisors(n):\n    '''\n    Write a python function to find prime divisors of a number.\n    '''\n    pass\ndef prime_divisors_list(n):\n    '''\n    Write a python function to find prime divisors of a number.\n    '''\n    pass\ndef prime_divisors_list_primes(n):\n    '''\n    Write a python function to find prime divisors of a number.\n    '''\n    pass\ndef prime_factors(n):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    pass\ndef prime_factors_list(n):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    pass\ndef prime_factors_list_primes(n):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    pass\ndef prime_factors_dict(n):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    pass\ndef prime_factors_dict_primes(n):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    pass\ndef euler_totient(n):\n    '''\n    Write a python function to find Euler totient of a number.\n    '''\n    pass\ndef euler_totient_list(n):\n    '''\n    Write a python function to find Euler totient of a number.\n    '''\n    pass\ndef euler_totient_list_primes(n):\n    '''\n    Write a python function to find Euler totient of a number.\n    '''\n    pass\ndef euler_totient_dict(n):\n    '''\n    Write a python function to find Euler totient of a number.\n    '''\n    pass\ndef euler_totient_dict_primes(n):\n    '''\n    Write a python function to find Euler totient of a number.\n    '''\n    pass\ndef divisor_count(n):\n    '''\n    Write a python function to find divisor count of a number.\n    '''\n    pass\ndef divisor_count_list(n):\n    '''\n    Write a python function to find divisor count of a number.\n    '''\n    pass\ndef divisor_count_list_primes(n):\n    '''\n    Write a python function to find divisor count of a number.\n    '''\n    pass\ndef divisor_count_dict(n):\n    '''\n    Write a python function to find divisor count of a number.\n    '''\n    pass\ndef divisor_count_dict_primes(n):\n    '''\n    Write a python function to find divisor count of a number.\n    '''\n    pass\ndef totient_count(n):\n    '''\n    Write a python function to find totient count of a number.\n    '''\n    pass\ndef totient_count_list(n):\n    '''\n    Write a python function to find totient count of a number.\n    '''\n    pass\ndef totient_count_list_primes(n):\n    '''\n    Write a python function to find totient count of a number.\n    '''\n    pass\ndef totient_count_dict(n):\n    '''\n    Write a python function to find totient count of a number.\n    '''\n    pass\ndef totient_count_dict_primes(n):\n    '''\n    Write a python function to find totient count of a number.\n    '''\n    pass\ndef divisor_sum(n):\n    '''\n    Write a python function to find divisor sum of a number.\n    '''\n    pass\ndef divisor_sum_list(n):\n    '''\n    Write a python function to find divisor sum of a number.\n    '''\n    pass\ndef divisor_sum_list_primes(n):\n    '''\n    Write a python function to find divisor sum of a number.\n    '''\n    pass\ndef divisor_sum_dict(n):\n    '''\n    Write a python function to find divisor sum of a number.\n    '''\n    pass\ndef divisor_sum_dict_primes(n):\n    '''\n    Write a python function to find divisor sum of a number.\n    '''\n    pass\ndef digit_sum(n):\n    '''\n    Write a python function to find the digit sum of a number.\n    '''\n    pass\ndef digit_sum_list(n):\n    '''\n    Write a python function to find the digit sum of a number.\n    '''\n    pass\ndef digit_sum_list_primes(n):\n    '''\n    Write a python function to find the digit sum of a number.\n    '''\n    pass\ndef digit_sum_dict(n):\n    '''\n    Write a python function to find the digit sum of a number.\n    '''\n    pass\ndef digit_sum_dict_primes(n):\n    '''\n    Write a python function to find the digit sum of a number.\n    '''\n    pass\ndef digital_root(n):\n    '''\n    Write a python function to find the digital root of a number.\n    '''\n    pass\ndef digital_root_list(n):\n    '''\n    Write a python function to find the digital root of a number.\n    '''\n    pass\ndef digital_root_list_primes(n):\n    '''\n    Write a python function to find the digital root of a number.\n    '''\n    pass\ndef digital_root_dict(n):\n    '''\n    Write a python function to find the digital root of a number.\n    '''\n    pass\ndef digital_root_dict_primes(n):\n    '''\n    Write a python function to find the digital root of a number.\n    '''\n    pass",
        "num_ids": 4
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0, 1, 2]\n    for i in range(3, n+1):\n        bell.append(bell[i-1]+bell[i-2])\n    return bell[n]\n    \ndef move_to_End(n, k, L):\n    '''\n    Write a function to move kth element to the end of list L.\n    '''\n    n_list = list(L)\n    n_list.append(n_list.pop(k-1))\n    return n_list\n",
        "num_ids": 36
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[0 for x in range(n)] for x in range(n)]\n    bell[0][0] = 1\n    for i in range(1, n):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        bell[i][i] = bell[i-1][i-1]\n    return bell[n-1][0]\n",
        "num_ids": 131
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]\n    bell[0] = 1\n    for i in range(2, n+1):\n        bell.append(bell[i-2] + bell[i-1])\n    return bell[n]\n    \nprint (bell_Number(6)",
        "num_ids": 66
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1, n + 1): \n        bell.append(bell[i - 1] + bell[i - 1] * i)\n    return bell[n]\n",
        "num_ids": 52
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[0]*(n+1) for i in range(n+1)] \n",
        "num_ids": 25
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0] * 100\n",
        "num_ids": 11
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1 \n    for i in range(n): \n        bell = bell*(i+1) \n    return bell \n",
        "num_ids": 35
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    l = L\n    for i in range(l):\n        list1.pop(l - 1)\n    return list1\n    \nprint(remove_kth_element(list1,l))\nprint(list1)\n",
        "num_ids": 57
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        print('The list is smaller than the number k that you have entered')\n    else:\n        temp = list1[:L] + list1[L+1:]\n        return temp\n",
        "num_ids": 55
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in list1:\n        if i!= L:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L.remove(list1[L[0]])\n    return L\n",
        "num_ids": 20
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    print(list1[:k] + list1[k+1:])\n    \nremove_kth_element([1,2,3,4,5,6], 2)\n",
        "num_ids": 45
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(list1[L])\n    return list1\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Your Code Here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k] + list1[k+1:]\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L = L - 1\n    return [list1[i] for i in range(len(list1)) if i!= L]\n",
        "num_ids": 34
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    print(list1[:L])\n    print(list1[L+1:])\n    return list1[:L] + list1[L+1:]\n",
        "num_ids": 41
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n",
        "num_ids": 18
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return test_list[0][N]\n",
        "num_ids": 13
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for i in test_list:\n        max_list.append(max(i))\n    return max_list[N-1]\n",
        "num_ids": 41
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([test_list[i][N-1] for i in range(len(test_list))])\n",
        "num_ids": 29
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list):\n        print(\"ERROR\")\n    elif N == 1:\n        return max(test_list[0])\n    else:\n        return max(max_of_nth(test_list, N-1) for _ in test_list)\n",
        "num_ids": 69
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) > 0:\n        # Check that we are getting a list of lists\n        if isinstance(test_list, list):\n            # Check we are getting a list of lists\n            if isinstance(test_list[0], list):\n                # Check the column we want is in the list\n                if N < len(test_list[0]):\n                    # Call the helper function to return the list of lists\n                    return max_of_nth(list(map(lambda x: x[N], test_list)), N)\n                else:\n                    return None\n            else:\n                return None\n        else:\n            return None\n    else:\n        return None\n",
        "num_ids": 161
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([element[N] for element in test_list])\n",
        "num_ids": 18
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([item[N] for item in test_list])\n",
        "num_ids": 18
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n",
        "num_ids": 18
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    if N < 1 or N > len(test_list[0]):\n        return 'N is out of range'\n    for sublist in test_list:\n        max_list.append(max(sublist))\n    return max_list[N - 1]\n",
        "num_ids": 71
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    a=[]\n    b=[]\n    for i in range(len(lst)):\n        a.append(lst[i][0])\n        b.append(lst[i][1])\n    return [a,b]\n",
        "num_ids": 59
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for i in range(len(lst)):\n        a = lst[i]\n        b = []\n        b.append(a[0])\n        b.append(a[1])\n        new_list.append(b)\n",
        "num_ids": 66
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst, key = lambda x: x[0])\n    #print(lst)\n    first = []\n    second = []\n    for i in range(len(lst)):\n        first.append(lst[i][0])\n        second.append(lst[i][1])\n    #print(first, second)\n    return [first, second]\n",
        "num_ids": 95
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    newlst = []\n    for sublst in lst:\n        newlst.append([sublst[0], sublst[1]])\n    return newlst\n",
        "num_ids": 46
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    new = []\n    for x in lst:\n        new.append(x[0])\n        new.append(x[1])\n    return new\n    \n    \ndef ekstraksi_kata(list):\n    '''\n    Write a function that takes a list of words and returns a list of words where each word is a tuple in the following format: (word, length of word).\n    '''\n    \n    new = []\n    for x in list:\n        new.append((x, len(x)))\n    return new\n    \n    \ndef sort_tuples(tuple_list):\n    '''\n    Write a function that takes a list of tuples and returns a list of sorted tuples, first by length of the second element, then lexicographically.\n    '''\n    \n    return sorted(tuple_list, key=lambda x: (x[1], x[0]))\n    \n    \ndef konversi_kata(list, mode):\n    '''\n    Write a function that takes a list of words and a string. If the string is \"upcase\", return a list of the words where the first letter of each word is uppercase. If the string is \"downcase\", return a list of the words where the first letter of each word is lowercase. If the string is \"title\", return a list of the words where the first letter of each word is the first letter of the next word in the list.\n    '''\n    \n    new = []\n    for x in list:\n        if mode == \"upcase\":\n            new.append(x.upper())\n        elif mode == \"downcase\":\n            new.append(x.lower())\n        elif mode == \"title\":\n            new.append(x.title())\n    return new\n    \n    \ndef ke_dua_satu(lst):\n    '''\n    Write a function which takes a list of strings and returns the number of unique strings.\n    '''\n    \n    return len(set(lst))\n    \n    \ndef ke_dua_dua(lst):\n    '''\n    Write a function which takes a list of strings and returns a list of 2-tuples containing the string and its length.\n    '''\n    \n    new = []\n    for x in lst:\n        new.append((x, len(x)))\n    return new\n    \n    \ndef konversi_kata(list, mode):\n    '''\n    Write a function that takes a list of words and a string. If the string is \"upcase\", return a list of the words where the first letter of each word is uppercase. If the string is \"downcase\", return a list of the words where the first letter of each word is lowercase. If the string is \"title\", return a list of the words where the first letter of each word is the first letter of the next word in the list.\n    '''\n    \n    new = []\n    for x in list:\n        if mode == \"upcase\":\n            new.append(x.upper())\n        elif mode == \"downcase\":\n            new.append(x.lower())\n        elif mode == \"title\":\n            new.append(x.title())\n    return new\n    \n    \ndef simpan_fungsi(func):\n    '''\n    Write a decorator that takes a function and returns another function. The function returned by the decorator will have the same name and documentation as the original function.\n    '''\n    \n    def decorator(func):\n        def wrapper():\n            return func()\n        return wrapper\n    return decorator\n    \n    \ndef merosialisasi(list):\n    '''\n    Write a function that takes a list of tuples and returns a list of lists containing the data of each tuple.\n    '''\n    \n    new = []\n    for x in list:\n        new.append(list(x))\n    return new\n    \n    \ndef konversi_kata(list, mode):\n    '''\n    Write a function that takes a list of words and a string. If the string is \"upcase\", return a list of the words where the first letter of each word is uppercase. If the string is \"downcase\", return a list of the words where the first letter of each word is lowercase. If the string is \"title\", return a list of the words where the first letter of each word is the first letter of the next word in the list.\n    '''\n    \n    new = []\n    for x in list:\n        if mode == \"upcase\":\n            new.append(x.upper())\n        elif mode == \"downcase\":\n            new.append(x.lower())\n        elif mode == \"title\":\n            new.append(x.title())\n    return new\n    \n    \ndef selesaikan_list(list):\n    '''\n    Write a function that takes a list of lists and returns a new list of tuples. Each tuple will contain two elements: the first element will be the first element of the list, and the second element will be the second element of the list.\n    '''\n    \n    new = []\n    for x in list:\n        new.append((x[0], x[1]))\n    return new\n    \n    \ndef teladan_biasa(lst):\n    '''\n    Write a function that takes a list of numbers and returns a new list of tuples with each element being the quotient and remainder of the division by 4.\n    '''\n    \n    new = []\n    for x in lst:\n        new.append(str(x // 4))\n        new.append(str(x % 4))\n    return new\n    \n    \ndef selesaikan_list(list):\n    '''\n    Write a function that takes a list of numbers and returns a list of tuples. Each tuple will contain two elements: the first element will be the first element of the list, and the second element will be the second element of the list.\n    '''\n    \n    new = []\n    for x in list:\n        new.append((x[0], x[1]))\n    return new\n    \n    \ndef ke_dua_satu(lst):\n    '''\n    Write a function that takes a list of 2-tuples and returns a list of 2-tuples.\n    '''\n    \n    new = []\n    for x in lst:\n        new.append((x[0], x[1]))\n    return new\n    \n    \ndef konversi_kata(list, mode):\n    '''\n    Write a function that takes a list of words and a string. If the string is \"upcase\", return a list of the words where the first letter of each word is uppercase. If the string is \"downcase\", return a list of the words where the first letter of each word is lowercase. If the string is \"title\", return a list of the words where the first letter of each word is the first letter of the next word in the list.\n    '''\n    \n    new = []\n    for x in list:\n        if mode == \"upcase\":\n            new.append(x.upper())\n        elif mode == \"downcase\":\n            new.append(x.lower())\n        elif mode == \"title\":\n            new.append(x.title())\n    return new\n    \n    \ndef konversi_kata(list, mode):\n    '''\n    Write a function that takes a list of words and a string. If the string is \"upcase\", return a list of the words where the first letter of each word is uppercase. If the string is \"downcase\", return a list of the words where the first letter of each word is lowercase. If the string is \"title\", return a list of the words where the first letter of each word is the first letter of the next word in the list.\n    '''\n    \n    new = []\n    for x in list:\n        if mode == \"upcase\":\n            new.append(x.upper())\n        elif mode == \"downcase\":\n            new.append(x.lower())\n        elif mode == \"title\":\n            new.append(x.title())\n    return new\n    \n    \ndef ke_dua_satu(lst):\n    '''\n    Write a function that takes a list of 2-tuples and returns a list of 2-tuples.\n    '''\n    \n    new = []\n    for x in lst:\n        new.append((x",
        "num_ids": 23
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst.sort()\n    print (lst)\n    merged = []\n    while lst:\n        merged.append(lst[0])\n        lst.pop(0)\n    print (merged)\n",
        "num_ids": 56
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    x = [[x[0], x[1]] for x in lst]\n    return x\n",
        "num_ids": 25
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return list(map(list, zip(*lst)))\n",
        "num_ids": 16
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst2 = []\n    for i in range(len(lst)):\n        lst2.append([lst[i][0], lst[i][1]])\n    return(lst2)\n",
        "num_ids": 53
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for x in test_list:\n        cum_sum += x\n    return cum_sum\n",
        "num_ids": 31
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    sum = 0\n    for num in test_list:\n        sum += num\n        cum_sum.append(sum)\n    print(cum_sum)\n    return cum_sum\n",
        "num_ids": 52
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum_list = []\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum += i\n        cummulative_sum_list.append(cummulative_sum)\n    return cummulative_sum_list\n",
        "num_ids": 68
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    list_sum=0\n    for item in test_list:\n        list_sum+=item\n    return list_sum\n",
        "num_ids": 31
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n",
        "num_ids": 11
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if type(test_list)!= list:\n        raise TypeError(\"Invalid type of input\")\n    else:\n        cumulative = 0\n        for i in range(len(test_list)):\n            cumulative = cumulative + test_list[i]\n            test_list[i] = cumulative\n        print(test_list)\n",
        "num_ids": 80
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i])!= int:\n            raise Exception('Wrong format of input data.')\n    new_list = []\n    for i in range(len(test_list)):\n        cumul = 0\n        for j in range(i+1):\n            cumul += test_list[j]\n        new_list.append(cumul)\n    return new_list\n",
        "num_ids": 110
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    #base case\n    if test_list == []:\n        return 0\n",
        "num_ids": 20
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum=[]\n    for i in range(len(test_list)):\n        cumulative_sum.append(sum(test_list[:i+1]))\n    return cumulative_sum\nprint(cummulative_sum([1,2,3,4,5,6]))\n",
        "num_ids": 73
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:i+1]) for i, x in enumerate(test_list)]\n",
        "num_ids": 29
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    for num in nums:\n        total += num[0] + num[1]\n    return [round(total/len(nums), 1), round(total/(len(nums)*2), 1)]\n",
        "num_ids": 56
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # 1st try\n    # my_list = []\n    # for num in nums:\n    #     for i in range(len(num)):\n    #         my_list.append(num[i])\n    # avg = []\n    # for i in range(len(my_list)):\n    #     avg.append(sum(my_list) / len(my_list))\n    # return avg\n",
        "num_ids": 101
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num in nums:\n        average_list.append(sum(num)/len(num))\n    return average_list\n",
        "num_ids": 39
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for nums in nums:\n        average = sum(nums) / len(nums)\n        averages.append(average)\n",
        "num_ids": 41
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums_list = []\n    for tup in nums:\n        tup_sum = 0\n        for i in tup:\n            tup_sum += i\n        nums_list.append(tup_sum / len(tup))\n    return nums_list\n",
        "num_ids": 69
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return sum(tuple(map(lambda x: sum(x)/len(x), nums)))\n    \n",
        "num_ids": 28
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    def average_tuple_helper(nums):\n        if not nums:\n            return []\n        \n        else:\n            # Average for the first tuple\n            average = sum(nums[0])/len(nums[0])\n            \n            # Average for the remaining tuples\n            return [average] + average_tuple_helper(nums[1:])\n    \n    return average_tuple_helper(nums)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2007
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # for i in nums:\n    #     avg_list.append(sum(i) / len(i))\n    # return avg_list\n",
        "num_ids": 38
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Need to loop over the tuples to get the average for each tuple\n    avgs = []\n    # index variable to get values in tuple\n    for i in range(len(nums[0])):\n        # sum for each tuple\n        total = 0\n        for tup in nums:\n            total += tup[i]\n        # divide by the number of tuples\n        avgs.append(total / len(nums))\n    return avgs\n",
        "num_ids": 109
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(nums) / len(nums)]\n",
        "num_ids": 17
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for index in range(0, len(test_tup1)):\n        result += (test_tup1[index] % test_tup2[index], )\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(el % test_tup2[i] for i, el in enumerate(test_tup1))\n",
        "num_ids": 31
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    try:\n        if len(test_tup1)!= len(test_tup2):\n            raise Exception('Test tuples are not the same length')\n        else:\n            new_tuple = []\n            for i in range(len(test_tup1)):\n                new_tuple.append(test_tup1[i] % test_tup2[i])\n            return tuple(new_tuple)\n    except Exception as e:\n        print(str(e))\n",
        "num_ids": 119
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # your code goes here\n    return tuple([int(x) % int(y) for x, y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 43
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tup1)):\n        new_tuple += ((test_tup1[i] % test_tup2[i]),)\n    return new_tuple\n",
        "num_ids": 59
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x,y: x % y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    current_position = [0, 0]\n    num_jumps = 0\n    for step in steps:\n        if step == 'L':\n            current_position[0] -= 1\n        elif step == 'R':\n            current_position[0] += 1\n        elif step == 'U':\n            current_position[1] += 1\n        else:\n            current_position[1] -= 1\n        if current_position[0] < 0 or current_position[1] < 0:\n            return -1\n        elif current_position[0] == d and current_position[1] == 0:\n            break\n        num_jumps += 1\n    return num_jumps\n",
        "num_ids": 164
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    if n < 2:\n        return False\n    count = 0 \n    jumps = 0 \n    for i in range(n):\n        if d == 0:\n            count += 1 \n        elif d < 0:\n            count += 1 \n            d = d + steps[i]\n        else:\n            count += 1 \n            d = d - steps[i]\n        if d == 0:\n            jumps += 1\n        if d < 0:\n            d = d + steps[i]\n    return jumps\n",
        "num_ids": 134
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 0\n    if d == steps[-1]: \n        return 1\n    if steps[-1] < d: \n        return 0\n",
        "num_ids": 45
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # We initialize our dp array of length n with the value of n+1\n    dp = [n+1] * (steps+1)\n",
        "num_ids": 36
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps<=0:\n        return 0\n    if steps==1:\n        return 1\n    if steps==2:\n        return 2\n    if steps==3:\n        return 3\n    if steps==d:\n        return 1\n    if steps==(d*2):\n        return 2\n    if steps==(d*3):\n        return 3\n    return min_Jumps(d, steps-d) + min_Jumps(steps-d, d)\n",
        "num_ids": 112
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #base case for d==0\n    if d == 0:\n        return 0\n    #base case for d==1\n    if d == 1:\n        return 1\n    #if d==2\n    if d == 2:\n        #count for d==2\n        count = 0\n        #iterate from 0 to the steps(number of steps)\n        for i in range(0, steps+1):\n            #check if i+d is less than or equal to steps\n            if i+d <= steps:\n                #check if i+d+d is greater than or equal to steps\n                if i+d+d > steps:\n                    #increment count\n                    count += 1\n                #check if i+d+d+d is greater than steps\n                if i+d+d+d > steps:\n                    #check if i+d+d+d-steps is less than or equal to steps\n                    if i+d+d+d-steps <= steps:\n                        #increment count\n                        count += 1\n        #return the count\n        return count\n",
        "num_ids": 246
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    max_step = 1\n    for i in range(steps):\n        if (d < 0) or (d > max_step):\n            return -1\n        d -= 1\n        max_step += 1\n    return max_step\n",
        "num_ids": 57
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_position = [0,0]\n    while(current_position[0] < d):\n        next_position = next_position_calculator(current_position, steps)\n        if next_position[0] > d:\n            break\n        current_position = next_position\n        jumps = jumps + 1\n    return jumps\n",
        "num_ids": 88
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    \n    current_position = (0,0)\n    \n    while current_position[0]!= d:\n        if current_position[1] >= steps:\n            return \"Impossible\"\n        elif current_position[0] > d:\n            current_position[0] -= 1\n            current_position[1] += 1\n            jumps += 1\n        elif current_position[0] < d:\n            current_position[0] += 1\n            current_position[1] += 1\n            jumps += 1\n        elif current_position[0] == d:\n            current_position[1] += 1\n            jumps += 1\n        \n    return jumps\n    \n    \ndef n_sum(n): \n    '''\n    Write a function to return a list of all unique n-sum combinations from a list of numbers.\n    '''\n    def add_to_list(target, list, list_so_far, combos):\n        if target == 0:\n            combos.append(list_so_far.copy())\n        for x in list:\n            if x <= target:\n                new_target = target - x\n                new_list = list.copy()\n                new_list.remove(x)\n                new_list_so_far = list_so_far.copy()\n                new_list_so_far.append(x)\n                add_to_list(new_target, new_list, new_list_so_far, combos)\n    \n    combos = []\n    add_to_list(n, range(1,n+1), [], combos)\n    return combos\n    \n    \ndef sort_list(list, d):\n    '''\n    Write a function to check whether a given list of integers can be sorted into non-decreasing order by removing at most one element from the list.\n    '''\n    target_list = sorted(list.copy())\n    \n    for i in range(len(list)):\n        list_copy = list.copy()\n        list_copy.remove(list_copy[i])\n        if sorted(list_copy) == target_list:\n            return True\n    return False\n    \n    \ndef get_missing(list):\n    '''\n    Write a function to find the smallest positive integer that is not in a given list of integers.\n    '''\n    for x in range(1, max(list)+1):\n        if x not in list:\n            return x\n    \n    \ndef make_table(string):\n    '''\n    Write a function to return the number of words of given length in a string.\n    '''\n    split = string.split(\" \")\n    table = {}\n    for x in split:\n        if len(x) in table:\n            table[len(x)] += 1\n        else:\n            table[len(x)] = 1\n    return table\n    \n    \ndef split_at_first_occ(word, dictionary):\n    '''\n    Write a function to split a word into 2 halves such that each letter is present in the two halves.\n    '''\n    for x in dictionary:\n        if len(x) == 1 or len(x) == 2:\n            continue\n        if x in word[:len(x)//2] and x in word[len(x)//2:]:\n            return x\n    return None\n    \n    \ndef one_away(string_1, string_2):\n    '''\n    Write a function to check if two strings are one edit away.\n    '''\n    if len(string_1) == len(string_2):\n        differences = 0\n        for x in range(len(string_1)):\n            if string_1[x]!= string_2[x]:\n                differences += 1\n        return True if differences == 1 else False\n    if len(string_1) == len(string_2) + 1:\n        if string_2[0] == string_1[-1]:\n            if one_away(string_1[:-1], string_2[1:]):\n                return True\n    if len(string_1) == len(string_2) - 1:\n        if string_2[-1] == string_1[0]:\n            if one_away(string_1[1:], string_2[:-1]):\n                return True\n    return False\n    \n    \ndef all_subsets(s):\n    '''\n    Write a function to return all the subsets of a set.\n    '''\n    subsets = [[]]\n    for x in s:\n        new_subsets = []\n        for y in subsets:\n            new_subsets.append(y.copy())\n            new_subsets[-1].append(x)\n        subsets.extend(new_subsets)\n    return subsets\n    \n    \ndef longest_subset_prefix(s):\n    '''\n    Write a function to return the longest prefix common to all elements of a given set.\n    '''\n    def longest_subset_prefix_helper(subset_list):\n        if len(subset_list) == 2:\n            return True if subset_list[0][0] == subset_list[1][0] else False\n        prefix = subset_list[0][0]\n        is_prefix = True\n        for x in subset_list[1:]:\n            is_prefix = is_prefix and (prefix in x)\n        return is_prefix\n        \n    subsets = all_subsets(s)\n    prefixes = []\n    for x in subsets:\n        if longest_subset_prefix_helper(x):\n            prefixes.append(x[0])\n    return max(prefixes, key = len)\n    \n    \ndef combination_sum(n, target):\n    '''\n    Write a function to return the number of possible combinations of n distinct objects that sum to a given target value.\n    '''\n    def helper(target, nums, path, result):\n        if target == 0:\n            result[0] += 1\n        elif target > 0:\n            for i in range(len(nums)):\n                new_target = target - nums[i]\n                new_nums = nums.copy()\n                new_nums.remove(nums[i])\n                helper(new_target, new_nums, path + [nums[i]], result)\n    \n    nums = [x for x in range(1, n+1)]\n    result = [0]\n    helper(target, nums, [], result)\n    return result[0]\n    \n    \ndef count_strings(n):\n    '''\n    Write a function to return the total number of possible strings of length n, with no more than 3 identical consecutive characters.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 3\n    if n == 2:\n        return 4\n    if n == 3:\n        return 7\n    return 2 * count_strings(n-1) + count_strings(n-2)\n    \n    \ndef all_substrings(string):\n    '''\n    Write a function to return all the substrings of a given string.\n    '''\n    substrings = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substrings.append(string[i:j])\n    return substrings\n    \n    \ndef all_distinct_substrings(string):\n    '''\n    Write a function to return all the substrings of a given string in order of their lexicographic value.\n    '''\n    distinct_substrings = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if len(substring) == len(set(substring)):\n                distinct_substrings.append(substring)\n    return distinct_substrings\n    \n    \ndef get_shortest_unique_substring(s):\n    '''\n    Write a function to return the shortest unique substring of a given string.\n    '''\n    substrings = all_substrings(s)\n    distinct_substrings = all_distinct_substrings(s)\n    for x in distinct_substrings:\n        if x in substrings:\n            return x\n",
        "num_ids": 54
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Compute the max number of steps that can be taken before reaching the destination\n    # we will need to count steps from current position\n    # We can either move to next position or we can just jump at max\n    # There are only 2 ways to get to destination\n    # The idea is to start from the destination, we are only allowed to move to right and down\n    # Calculate the max number of steps we can take\n    \n    # Approach 1:\n    # Let us start from destination\n    # Let us assume that we can take one step at a time\n    # We will be taking 1 step at a time.\n    # The max possible number of steps is the number of steps we can take to reach the origin\n    # As we are taking 1 step at a time, we can reach the origin in max'steps' steps.\n    # Let us then store this value in a variable\n    # Now let us start from destination and the we can take steps from destination\n    # If we have reached the destination then we will reach the origin in max'steps'\n    # Steps taken to reach origin is (2*steps)\n    # If we have not reached the origin then we will again take steps from destination\n    # If we reach the origin, then we will return the value of the variable\n    \n    # Approach 2:\n    # We can take 'd' steps at a time.\n    # Let us check if we can jump to destination\n    # If we can jump to destination then we will again take 'd' steps at a time\n    # If we can not jump to destination then we will take 1 step at a time\n    \n    # Lets consider the worst case\n    # If we take d steps at a time then we will reach the destination\n    # This is not the case and we will have to take at least d steps \n    # Let us consider the steps which we have to take to reach the destination\n    # d + 2(d-1) + 3(d-2) +..... + d(d-1) + d\n    # 2d^2 - 2d + 1\n    # If the number of steps is a perfect square then we can jump to the destination \n    # but if it is not a perfect square then we will have to take at least d steps to reach the destination\n    \n    # Approach 3:\n    # We can take 'd' steps at a time.\n    # Let us check if we can jump to destination\n    # If we can jump to destination then we will again take 'd' steps at a time\n    # If we can not jump to destination then we will take 1 step at a time\n    \n    # We can have two cases\n    # If steps is less than d then we can jump to the destination in max steps\n    # If steps is greater than d then we have to take at least d steps\n    # We will have to return the min of the two cases\n    \n    # We can reduce the steps to a single step\n    # If we take d steps at a time then we will have to take d steps at a time if we can jump to the destination\n    # If we cannot jump to the destination then we will have to take at least d steps\n    \n    # We can take steps = 2^x for x >= 0\n    # Then if we have to take at least d steps then we will take at least (2^d - 1) steps\n    # Now if we have to take at least d steps then we will have to take at least'steps' steps to reach the destination\n    \n    # We can do binary search\n    # We can check if the steps is less than d or not\n    # If the steps is less than d then we can take d steps\n    # If the steps is greater than d then we can take at least d steps\n    # We will use binary search to find the min steps required\n    \n    # Time complexity of this solution is O(log(steps))\n    # Space complexity is O(1)\n    \n    max_steps = int((2**(d-1)) - 1)\n    print(\"Max Steps\", max_steps)\n    if steps > max_steps:\n        steps = max_steps\n    steps = int(steps)\n    if steps == 0:\n        return 0\n    elif steps == 1:\n        return 1\n    \n    if steps < d:\n        return steps\n    \n    # We will use binary search to find the min steps required\n    low = 0\n    high = steps\n    mid = (low + high) // 2\n    while low < high:\n        if mid < d - 1:\n            low = mid\n        elif mid > d - 1:\n            high = mid\n        else:\n            return mid\n        mid = (low + high) // 2\n    \n    return low\n    \n    # Let us look at the approach 2\n    # We can take 'd' steps at a time.\n    # Let us check if we can jump to destination\n    # If we can jump to destination then we will again take 'd' steps at a time\n    # If we can not jump to destination then we will take 1 step at a time\n    \n    # Steps taken to reach destination is (2*steps)\n    # If we have not reached the origin then we will again take steps from destination\n    # If we reach the origin then we will return the value of the variable\n    \n    # Approach 4:\n    # We can take 'd' steps at a time.\n    # Let us check if we can jump to destination\n    # If we can jump to destination then we will again take 'd' steps at a time\n    # If we can not jump to destination then we will take 1 step at a time\n    \n    # We can have two cases\n    # If steps is less than d then we can jump to the destination in max steps\n    # If steps is greater than d then we have to take at least d steps\n    # We will have to return the min of the two cases\n    \n    # We can reduce the steps to a single step\n    # If we take d steps at a time then we will have to take d steps at a time if we can jump to the destination\n    # If we cannot jump to the destination then we will have to take at least d steps\n    \n    # We can take steps = 2^x for x >= 0\n    # Then if we have to take at least d steps then we will take at least (2^d - 1) steps\n    # Now if we have to take at least d steps then we will have to take at least'steps' steps to reach the destination\n    \n    # We can do binary search\n    # We can check if the steps is less than d or not\n    # If the steps is less than d then we can take d steps\n    # If the steps is greater than d then we can take at least d steps\n    # We will use binary search to find the min steps required\n    \n    # Time complexity of this solution is O(log(steps))\n    # Space complexity is O(1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1997
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1//num2 for num1,num2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    try:\n        list_res=[]\n        for i in range(len(nums1)):\n            list_res.append(nums1[i]/nums2[i])\n    except ZeroDivisionError:\n        print('ZeroDivisionError')\n    else:\n        print('No Error')\n    finally:\n        print('Division Completed')\n    return list_res\n",
        "num_ids": 95
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i] / nums2[i])\n    return new_list\n",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result=[]\n    for x in nums1:\n        for y in nums2:\n            result.append(x/y)\n    return result\n    \n",
        "num_ids": 41
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    try:\n        if len(nums1) == len(nums2):\n            for i in range(len(nums1)):\n                div_list.append(nums1[i]/nums2[i])\n    except ZeroDivisionError as e:\n        print(\"Error : \", e)\n    finally:\n        print(\"Div List: \", div_list)\n",
        "num_ids": 100
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1,n2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [divide(n1, n2) for n1, n2 in zip(nums1, nums2)]\n",
        "num_ids": 32
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for x in range(len(nums1)):\n        div_list.append(nums1[x]/nums2[x])\n    return div_list\n",
        "num_ids": 50
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for i in range(0, len(test_str)):\n        if test_str[i].isdigit():\n            new_str += test_str[i]\n    return new_str + test_str\n",
        "num_ids": 60
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #startswith() and endswith() methods are built in functions in python.\n    #These methods are used to search for the string and returning true or false depending on the result.\n",
        "num_ids": 44
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return \" \".join([str(i) for i in test_str.split() if i.isdigit()])\n",
        "num_ids": 30
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''.join(i for i in test_str if not i.isdigit())\n    return new_str+''.join(i for i in test_str if i.isdigit())\n",
        "num_ids": 51
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s = [i for i in test_str if i.isdigit()]\n    return \"\".join(s) + ''.join(set(test_str) - set(s))\n",
        "num_ids": 47
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    count_num = 0\n    for char in test_str:\n        if char.isdigit():\n            count_num += 1\n    for char in test_str:\n        if char.isdigit():\n            test_str = test_str[:count_num] + test_str[count_num+1:]\n            test_str += char\n    return test_str\n",
        "num_ids": 91
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    import re\n    #'\\d+' means [0-9]+\n    num_list = re.findall('\\d+', test_str)\n    for num in num_list:\n        test_str = test_str.replace(num, '')\n    #move the nums to the end\n    return test_str + ''.join(num_list)\n",
        "num_ids": 89
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # TODO: Write the function\n    \n    \ndef text_match(test_str1, test_str2):\n    '''\n    Write a function to determine if two strings are a match in a \n    certain position\n    '''\n    # TODO: Write the function\n    \n    \ndef palindrome(test_str):\n    '''\n    Write a function to determine if the given string is a palindrome.\n    '''\n    # TODO: Write the function\n    \n    \ndef remove_vowels(test_str):\n    '''\n    Write a function to remove all vowels from a string.\n    '''\n    # TODO: Write the function\n    \n    \ndef remove_consonants(test_str):\n    '''\n    Write a function to remove all consonants from a string.\n    '''\n    # TODO: Write the function\n    \n    \ndef main():\n    '''\n    Write a function that prompts the user to input two strings and \n    then call the other functions to test them.\n    '''\n    # TODO: Write the function\n    \n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 29
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num = [i for i in test_str if i.isdigit()]\n    str_list = [i for i in test_str if not i.isdigit()]\n    str_list.extend(num)\n    return ''.join(str_list)\n",
        "num_ids": 67
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for i in range(len(test_str)):\n        if test_str[i].isnumeric():\n            result += test_str[i]\n    return result + test_str\n",
        "num_ids": 52
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    p = list(range(1,len(a)+1))\n    print(p)\n    return print(a[p[0]]%a[p[1]])\n",
        "num_ids": 43
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_count = 0\n    for i in range(len(a)):\n        count = 0\n        for j in range(i, len(a)):\n            if (a[j] % a[i] == 0):\n                count += 1\n        if (count > max_count):\n            max_count = count\n    return max_count\n",
        "num_ids": 84
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0: return 0\n    if len(a) == 1: return 1\n    max_subset = 0\n    while len(a)!= 0:\n        a = remove_multiples(a)\n        max_subset = max(max_subset, largest_subset(a))\n    return max_subset\n",
        "num_ids": 83
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return sum(largest_subsets_recursive(a))\n",
        "num_ids": 17
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    d = {}\n    d[a[0]] = 1\n    for i in range(1,len(a)):\n        d[a[i]] = 1\n        for k in range(i):\n            if a[i] % a[k] == 0 and d.get(a[k],0) + 1 > d.get(a[i],0):\n                d[a[i]] = d.get(a[k],0) + 1\n    return max(d.values())\n",
        "num_ids": 124
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    return(len(find_largest_subset(a)))\n",
        "num_ids": 19
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    for i in range(n):\n        a[i] = a[i] % 200\n    a.sort()\n    dp = [1]*n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n    return max(dp)\n",
        "num_ids": 114
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    length = len(a)\n    \n    if length % 2 == 0:\n        return largest_subsets_even(a)\n    else:\n        return largest_subsets_odd(a)\n",
        "num_ids": 49
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    result = []\n    sorted_a = sorted(a)\n    for i in range(len(sorted_a)):\n        for j in range(i+1, len(sorted_a)):\n            if sorted_a[i]*sorted_a[j] % gcd(sorted_a[i], sorted_a[j]) == 0:\n                result.append(sorted_a[i]*sorted_a[j])\n    return len(max(result, key=len))\n",
        "num_ids": 123
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    \n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2 - 1]) / 2\n    else:\n        return arr1[n//2]\n",
        "num_ids": 64
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        return \"List size mismatch!\"\n    \n    low = 0\n    high = len(arr1) - 1\n    while low <= high:\n        mid = (low+high)//2\n        if arr1[mid] == arr2[mid]:\n            return arr1[mid]\n        elif arr1[mid] < arr2[mid]:\n            low = mid + 1\n        elif arr1[mid] > arr2[mid]:\n            high = mid - 1\n        \n    \n    \n    \ndef find_max_pair(arr1, arr2):\n    '''\n    Write a function that takes in two sorted arrays and returns an array that\n    contains their intersection. The output array should be sorted in ascending order.\n    '''\n    output = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            output.append(arr1[i])\n            i += 1\n            j += 1\n    return output\n    \n    \n    \ndef find_max_pair(arr1, arr2):\n    '''\n    Write a function that takes in two sorted arrays and returns an array that\n    contains their intersection. The output array should be sorted in ascending order.\n    '''\n    output = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            output.append(arr1[i])\n            i += 1\n            j += 1\n    return output\n    \n    \n    \ndef merge_sorted_arrays(arr1, arr2):\n    '''\n    Write a function that takes in two sorted arrays and returns an array that\n    contains their intersection. The output array should be sorted in ascending order.\n    '''\n    output = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            output.append(arr1[i])\n            i += 1\n        elif arr1[i] > arr2[j]:\n            output.append(arr2[j])\n            j += 1\n        else:\n            output.append(arr1[i])\n            output.append(arr2[j])\n            i += 1\n            j += 1\n            \n    if i == len(arr1):\n        output += arr2[j:]\n    elif j == len(arr2):\n        output += arr1[i:]\n    return output\n    \n    \ndef merge_sorted_arrays(arr1, arr2):\n    '''\n    Write a function that takes in two sorted arrays and returns an array that\n    contains their intersection. The output array should be sorted in ascending order.\n    '''\n    output = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            output.append(arr1[i])\n            i += 1\n        elif arr1[i] > arr2[j]:\n            output.append(arr2[j])\n            j += 1\n        else:\n            output.append(arr1[i])\n            output.append(arr2[j])\n            i += 1\n            j += 1\n            \n    if i == len(arr1):\n        output += arr2[j:]\n    elif j == len(arr2):\n        output += arr1[i:]\n    return output\n    \n    \n    \ndef merge_sorted_arrays(arr1, arr2):\n    '''\n    Write a function that takes in two sorted arrays and returns an array that\n    contains their intersection. The output array should be sorted in ascending order.\n    '''\n    output = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            output.append(arr1[i])\n            i += 1\n        elif arr1[i] > arr2[j]:\n            output.append(arr2[j])\n            j += 1\n        else:\n            output.append(arr1[i])\n            output.append(arr2[j])\n            i += 1\n            j += 1\n            \n    if i == len(arr1):\n        output += arr2[j:]\n    elif j == len(arr2):\n        output += arr1[i:]\n    return output\n    \n    \n    \ndef remove_duplicates(arr):\n    '''\n    Write a function that takes in an array and returns a new array\n    with the same elements but no duplicates. The output array should be sorted in ascending order.\n    '''\n    output = []\n    i = 0\n    while i < len(arr):\n        if arr[i] not in output:\n            output.append(arr[i])\n        i += 1\n    return output\n    \n    \n    \ndef remove_duplicates(arr):\n    '''\n    Write a function that takes in an array and returns a new array\n    with the same elements but no duplicates. The output array should be sorted in ascending order.\n    '''\n    output = []\n    i = 0\n    while i < len(arr):\n        if arr[i] not in output:\n            output.append(arr[i])\n        i += 1\n    return output\n    \n    \n    \ndef remove_duplicates(arr):\n    '''\n    Write a function that takes in an array and returns a new array\n    with the same elements but no duplicates. The output array should be sorted in ascending order.\n    '''\n    output = []\n    i = 0\n    while i < len(arr):\n        if arr[i] not in output:\n            output.append(arr[i])\n        i += 1\n    return output\n    \n    \n    \ndef remove_duplicates(arr):\n    '''\n    Write a function that takes in an array and returns a new array\n    with the same elements but no duplicates. The output array should be sorted in ascending order.\n    '''\n    output = []\n    i = 0\n    while i < len(arr):\n        if arr[i] not in output:\n            output.append(arr[i])\n        i += 1\n    return output\n    \n    \n    \ndef remove_duplicates(arr):\n    '''\n    Write a function that takes in an array and returns a new array\n    with the same elements but no duplicates. The output array should be sorted in ascending order.\n    '''\n    output = []\n    i = 0\n    while i < len(arr):\n        if arr[i] not in output:\n            output.append(arr[i])\n        i += 1\n    return output\n    \n    \n    \ndef remove_duplicates(arr):\n    '''\n    Write a function that takes in an array and returns a new array\n    with the same elements but no duplicates. The output array should be sorted in ascending order.\n    '''\n    output = []\n    i = 0\n    while i < len(arr):\n        if arr[i] not in output:\n            output.append(arr[i])\n        i += 1\n    return output\n    \n    \n    \ndef remove_duplicates(arr):\n    '''\n    Write a function that takes in an array and returns a new array\n    with the same elements but no duplicates. The output array should be sorted in ascending order.\n    '''\n    output = []\n    i = 0\n    while i < len(arr):\n        if arr[i] not in output:\n            output.append(arr[i])\n        i += 1\n    return output\n    \n    \n    \ndef remove_duplicates(arr):\n    '''\n    Write a function that takes in an array and returns a new array\n    with the same elements but no duplicates. The output array should be sorted in ascending order.\n    '''\n    output = []\n    i = 0\n    while i < len(arr):\n        if arr[i] not in output:\n            output.append(arr[",
        "num_ids": 39
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr1[mid] + arr2[mid]) / 2\n    else:\n        return arr1[mid]\n",
        "num_ids": 47
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    cnt = 0\n    while(i < n and j < n):\n        if arr1[i] <= arr2[j]:\n            arr1[k] = arr1[i]\n            i += 1\n            k += 1\n        else:\n            arr1[k] = arr2[j]\n            j += 1\n            k += 1\n        cnt += 1\n    while i < n:\n        arr1[k] = arr1[i]\n        i += 1\n        k += 1\n    while j < n:\n        arr1[k] = arr2[j]\n        j += 1\n        k += 1\n    return arr1[n//2]\n",
        "num_ids": 175
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # TODO: Write your code here\n    return None\n",
        "num_ids": 16
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m = n//2\n",
        "num_ids": 9
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    return n / 2\n",
        "num_ids": 8
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    if n == 2:\n        return (arr1[0] + arr1[1]) / 2\n    if n % 2 == 0:\n        return (get_median(arr1, arr2, int(n/2)) + get_median(arr1, arr2, int(n/2)-1)) / 2\n    else:\n        return get_median(arr1, arr2, int(n/2) + 1)\n",
        "num_ids": 120
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)\n    arr1.sort()\n    if n % 2 == 0:\n        print(arr1[int(n/2)])\n    else:\n        print((arr1[int((n-1)/2)]+arr1[int((n+1)/2)])/2)\n",
        "num_ids": 78
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    if n % 2 == 1:\n        return arr[n // 2]\n    else:\n        return (arr[n // 2] + arr[n // 2 - 1]) / 2\n",
        "num_ids": 60
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result=[]\n    for i in range(len(nums)):\n        result.append(nums[i]**n)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n",
        "num_ids": 35
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #return [number**n for number in nums]\n    \n    return [number**n for number in nums if number % 2 == 0]\n    \n    \ndef square_of_even_nums(nums):\n    return [number**2 for number in nums if number % 2 == 0]\n    \n    \ndef square_of_even_nums2(nums):\n    '''\n    Write a function to compute the square of each number in a list.\n    '''\n    return [number**2 for number in nums if number % 2 == 0]\n    \n    \ndef square_of_even_nums3(nums):\n    '''\n    Write a function to compute the square of each number in a list.\n    '''\n    return [number * number for number in nums if number % 2 == 0]\n    \n    \ndef square_of_even_nums4(nums):\n    '''\n    Write a function to compute the square of each number in a list.\n    '''\n    return list(map(lambda x: x*x, filter(lambda x: x % 2 == 0, nums)))\n    \n    \ndef square_of_even_nums5(nums):\n    '''\n    Write a function to compute the square of each number in a list.\n    '''\n    return [x * x for x in nums if x % 2 == 0]\n    \n    \ndef square_of_even_nums6(nums):\n    '''\n    Write a function to compute the square of each number in a list.\n    '''\n    return [number**2 for number in nums if number % 2 == 0]\n    \n    \ndef square_of_even_nums7(nums):\n    '''\n    Write a function to compute the square of each number in a list.\n    '''\n    return [number**2 for number in nums if number % 2 == 0]\n    \n    \n    \ndef square_of_even_nums8(nums):\n    '''\n    Write a function to compute the square of each number in a list.\n    '''\n    return [number * number for number in nums if number % 2 == 0]\n    \n    \ndef square_of_even_nums9(nums):\n    '''\n    Write a function to compute the square of each number in a list.\n    '''\n    return [x * x for x in nums if x % 2 == 0]\n    \n    \ndef square_of_even_nums10(nums):\n    '''\n    Write a function to compute the square of each number in a list.\n    '''\n    return [number**2 for number in nums if number % 2 == 0]\n    \n    \n    \n    \n    \n    \ndef sum_of_even_nums(nums):\n    '''\n    Write a function to compute the sum of each number in a list.\n    '''\n    return [number for number in nums if number % 2 == 0]\n    \n    \ndef sum_of_even_nums2(nums):\n    '''\n    Write a function to compute the sum of each number in a list.\n    '''\n    return sum([number for number in nums if number % 2 == 0])\n    \n    \ndef sum_of_even_nums3(nums):\n    '''\n    Write a function to compute the sum of each number in a list.\n    '''\n    return sum(filter(lambda x: x % 2 == 0, nums))\n    \n    \ndef sum_of_even_nums4(nums):\n    '''\n    Write a function to compute the sum of each number in a list.\n    '''\n    return sum(list(filter(lambda x: x % 2 == 0, nums)))\n    \n    \n    \ndef sum_of_even_nums5(nums):\n    '''\n    Write a function to compute the sum of each number in a list.\n    '''\n    return sum(filter(lambda x: x % 2 == 0, nums))\n    \n    \ndef sum_of_even_nums6(nums):\n    '''\n    Write a function to compute the sum of each number in a list.\n    '''\n    return sum([number for number in nums if number % 2 == 0])\n    \n    \n    \ndef sum_of_even_nums7(nums):\n    '''\n    Write a function to compute the sum of each number in a list.\n    '''\n    return sum([number for number in nums if number % 2 == 0])\n    \n    \n    \ndef sum_of_even_nums8(nums):\n    '''\n    Write a function to compute the sum of each number in a list.\n    '''\n    return sum(filter(lambda x: x % 2 == 0, nums))\n    \n    \ndef sum_of_even_nums9(nums):\n    '''\n    Write a function to compute the sum of each number in a list.\n    '''\n    return sum([x for x in nums if x % 2 == 0])\n    \n    \ndef sum_of_even_nums10(nums):\n    '''\n    Write a function to compute the sum of each number in a list.\n    '''\n    return sum([number for number in nums if number % 2 == 0])\n    \n    \ndef test_nth_nums():\n    print(nth_nums([1,2,3,4],2))\n    print(nth_nums([1,2,3,4],3))\n    print(nth_nums([1,2,3,4],4))\n    print(nth_nums([1,2,3,4],5))\n    \n    \ndef test_square_of_even_nums():\n    print(square_of_even_nums([1,2,3,4]))\n    print(square_of_even_nums2([1,2,3,4]))\n    print(square_of_even_nums3([1,2,3,4]))\n    print(square_of_even_nums4([1,2,3,4]))\n    print(square_of_even_nums5([1,2,3,4]))\n    print(square_of_even_nums6([1,2,3,4]))\n    print(square_of_even_nums7([1,2,3,4]))\n    print(square_of_even_nums8([1,2,3,4]))\n    print(square_of_even_nums9([1,2,3,4]))\n    print(square_of_even_nums10([1,2,3,4]))\n    \ndef test_sum_of_even_nums():\n    print(sum_of_even_nums([1,2,3,4]))\n    print(sum_of_even_nums2([1,2,3,4]))\n    print(sum_of_even_nums3([1,2,3,4]))\n    print(sum_of_even_nums4([1,2,3,4]))\n    print(sum_of_even_nums5([1,2,3,4]))\n    print(sum_of_even_nums6([1,2,3,4]))\n    print(sum_of_even_nums7([1,2,3,4]))\n    print(sum_of_even_nums8([1,2,3,4]))\n    print(sum_of_even_nums9([1,2,3,4]))\n    print(sum_of_even_nums10([1,2,3,4]))\n    \n    \ndef test_sum_of_even_nums2():\n    print(sum_of_even_nums([1,2,3,4]))\n    print(sum_of_even_nums2([1,2,3,4]))\n    print(sum_of_even_nums3([1,2,3,4]))\n    print(sum_of_even_nums4([1,2,3,4]))\n    print(sum_of_even_nums5([1,2,3,4]))\n    print(sum_of_even_nums6([1,2,3,4]))",
        "num_ids": 758
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    results = []\n    for num in nums:\n        results.append(num**n)\n    return results\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    l=[]\n    for i in nums:\n        l.append(i**n)\n    return l\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [pow(x,n) for x in nums]\n",
        "num_ids": 19
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if type(string) == str:\n        return string.upper()\n    return \"Invalid input\"\n",
        "num_ids": 26
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    \n    pass\n",
        "num_ids": 7
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \ndef is_lower(string):\n    '''\n    Write a python function to convert a given string to lowercase.\n    '''\n    return string.lower()\n    \ndef is_title(string):\n    '''\n    Write a python function to convert a given string to titlecase.\n    '''\n    return string.title()\n    \ndef is_reverse(string):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    return string[::-1]\n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if the given string is a palindrome.\n    Palindrome are words which read the same backward or forward.\n    '''\n    return string == string[::-1]\n    \ndef is_pangram(string):\n    '''\n    Write a python function to check if the given string is a pangram.\n    A pangram is a sentence containing every letter of the alphabet.\n    '''\n    # The solution below is very good and does not require any additional data structures.\n    # The solution below is an improvement on the below solution.\n    # Note that the solution above assumes that the string is all lowercase.\n    # This solution assumes that the string is all uppercase.\n    # The solution above could be written in the following way:\n    #return string == string.lower().replace(' ', '').replace('.', '').replace(',', '').replace('\\'', '').replace('\\'', '').replace('-', '').replace('?', '').replace('!', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '')\n    return set(string) == set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    \ndef is_anagram(string_one, string_two):\n    '''\n    Write a python function to check if the given strings are anagrams.\n    An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n    '''\n    # I will use the built-in function'sorted' for this solution.\n    # The solution below uses two for loops and is significantly slower.\n    # The solution above is an improvement on the below solution.\n    # Note that the solution above assumes that the string is all lowercase.\n    # This solution assumes that the string is all uppercase.\n    return ''.join(sorted(string_one)) == ''.join(sorted(string_two))\n    \ndef is_isogram(string):\n    '''\n    Write a python function to check if the given string is an isogram.\n    An isogram is a word without a repeating letter.\n    '''\n    # I will use a set.\n    return len(set(string)) == len(string)\n    \ndef is_histogram(string):\n    '''\n    Write a python function to check if the given string is a histogram.\n    A histogram is a word that contains every integer from 0 to the number of characters in the string exactly once.\n    '''\n    # Use a dictionary to keep track of the frequency of each character.\n    # The solution below does not assume that the string is all lowercase.\n    # This solution assumes that the string is all uppercase.\n    histogram = {}\n    for character in string:\n        if character not in histogram:\n            histogram[character] = 1\n        else:\n            histogram[character] += 1\n    return histogram\n    \ndef is_pangram_string(string):\n    '''\n    Write a python function to check if the given string is a pangram.\n    A pangram is a sentence containing every letter of the alphabet.\n    '''\n    # I will use the built-in function'sorted' for this solution.\n    # The solution below uses a set and is significantly faster.\n    # The solution above assumes that the string is all lowercase.\n    # This solution assumes that the string is all uppercase.\n    return set(string) == set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    \ndef is_anagram_string(string_one, string_two):\n    '''\n    Write a python function to check if the given strings are anagrams.\n    An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n    '''\n    # I will use the built-in function'sorted' for this solution.\n    # The solution below uses two for loops and is significantly slower.\n    # The solution above is an improvement on the below solution.\n    # Note that the solution above assumes that the string is all lowercase.\n    # This solution assumes that the string is all uppercase.\n    return ''.join(sorted(string_one)) == ''.join(sorted(string_two))\n    \ndef is_isogram_string(string):\n    '''\n    Write a python function to check if the given string is an isogram.\n    An isogram is a word without a repeating letter.\n    '''\n    # I will use a set.\n    return len(set(string)) == len(string)\n    \ndef is_histogram_string(string):\n    '''\n    Write a python function to check if the given string is a histogram.\n    A histogram is a word that contains every integer from 0 to the number of characters in the string exactly once.\n    '''\n    # Use a dictionary to keep track of the frequency of each character.\n    # The solution below does not assume that the string is all lowercase.\n    # This solution assumes that the string is all uppercase.\n    histogram = {}\n    for character in string:\n        if character not in histogram:\n            histogram[character] = 1\n        else:\n            histogram[character] += 1\n    return histogram\n    \ndef is_pangram_string_v2(string):\n    '''\n    Write a python function to check if the given string is a pangram.\n    A pangram is a sentence containing every letter of the alphabet.\n    '''\n    # I will use the built-in function'sorted' for this solution.\n    # The solution below uses a set and is significantly faster.\n    # The solution above assumes that the string is all lowercase.\n    # This solution assumes that the string is all uppercase.\n    return set(string) == set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    \ndef is_anagram_string_v2(string_one, string_two):\n    '''\n    Write a python function to check if the given strings are anagrams.\n    An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n    '''\n    # I will use the built-in function'sorted' for this solution.\n    # The solution below uses two for loops and is significantly slower.\n    # The solution above is an improvement on the below solution.\n    # Note that the solution above assumes that the string is all lowercase.\n    # This solution assumes that the string is all uppercase.\n    return ''.join(sorted(string_one)) == ''.join(sorted(string_two))\n    \ndef is_isogram_string_v2(string):\n    '''\n    Write a python function to check if the given string is an isogram.\n    An isogram is a word without a repeating letter.\n    '''\n    # I will use a set.\n    return len(set(string)) == len(string)\n    \ndef is_histogram_string_v2(string):\n    '''\n    Write a python function to check if the given string is a histogram.\n    A histogram is a word that contains every integer from 0 to the number of characters in the string exactly once.\n    '''\n    # Use a dictionary to keep track of the frequency of each character.\n    # The solution below does not assume that the string is all lowercase.\n    # This solution assumes that the string is all uppercase.\n    histogram = {}\n    for character in string:\n        if character not in histogram:\n            histogram[character] = 1\n        else:\n            histogram[character] += 1\n    return histogram\n    \ndef is_pan",
        "num_ids": 105
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    #if string.isupper():\n    #    return True\n    #else:\n    #    return False\n    return string.upper() == string\n",
        "num_ids": 37
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = ''\n    for char in string:\n        if ord(char) >= ord('a') and ord(char) <= ord('z'):\n            result = result + chr(ord(char) - 32)\n        else:\n            result = result + char\n    return result\n",
        "num_ids": 68
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "num_ids": 33
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    listLen = len(newList)\n    temp = newList[0]\n    newList[0] = newList[listLen-1]\n    newList[listLen-1] = temp\n    return newList\n",
        "num_ids": 54
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n",
        "num_ids": 31
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n",
        "num_ids": 48
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    print(newList)\n    \ndef find_frequency(newList): \n    '''\n    Write a python function to find the number of occurrences of a specific element in a given list.\n    '''\n    print(newList.count(7))\n    \ndef find_min(newList): \n    '''\n    Write a python function to find the minimum element in a given list.\n    '''\n    print(min(newList))\n    \ndef find_max(newList): \n    '''\n    Write a python function to find the maximum element in a given list.\n    '''\n    print(max(newList))\n    \ndef sum_list(newList): \n    '''\n    Write a python function to sum all the elements in a given list.\n    '''\n    print(sum(newList))\n    \ndef sort_list(newList): \n    '''\n    Write a python function to sort a given list in ascending order.\n    '''\n    newList.sort()\n    print(newList)\n    \ndef reverse_list(newList): \n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    print(newList)\n    \ndef average_list(newList): \n    '''\n    Write a python function to find the average value of the list elements.\n    '''\n    avg = sum(newList) / len(newList)\n    print(avg)\n    \ndef main(): \n    newList = [10,20,30,40,50]\n    swap_List(newList)\n    find_frequency(newList)\n    find_min(newList)\n    find_max(newList)\n    sum_list(newList)\n    sort_list(newList)\n    reverse_list(newList)\n    average_list(newList)\n",
        "num_ids": 121
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size-1]\n    newList[size-1] = temp\n    return newList\n",
        "num_ids": 51
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    l = len(newList)\n    newList[0], newList[l-1] = newList[l-1], newList[0]\n    return newList\n",
        "num_ids": 43
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = r * r * math.acos(r / math.sqrt(2 * r * r + r * r))\n    return area\n",
        "num_ids": 36
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi, acos, sin, cos\n    def find_theta(r) :\n        theta = acos(r / (2 * sin(pi / 3)))\n        theta = theta * 180 / pi\n        theta = 360 - theta\n        return theta\n",
        "num_ids": 70
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass # Write your code here\n",
        "num_ids": 10
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    a = 2 * r * math.sin(math.pi / 3)\n    return(a)\n",
        "num_ids": 30
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    h = 2 * r * math.sin(math.pi / 3)\n    area = (math.pi * r ** 2) / 2 - (math.pi * r ** 2) / h\n    return area\n",
        "num_ids": 51
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # O(1)\n    import math\n    def area(r) :\n        return math.pi*r**2*(math.sqrt(1-4*(r**2)/(math.pi*r**2)))\n    return area\n",
        "num_ids": 60
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3*(r**2))/2\n",
        "num_ids": 15
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import acos, pi\n    return (3*r*r*acos(1/3))/2\n",
        "num_ids": 30
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = 0\n    for i in range(1,r) :\n        area += (math.pi*(i**2))/2\n    return area\nprint(triangle_area(3))\nprint(triangle_area(4))\nprint(triangle_area(5))\n",
        "num_ids": 73
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Area = 2*pi*r^2\n    # if r >= 0 :\n    #     area = pi*r**2\n    # else:\n    #     return None\n    # return area\n",
        "num_ids": 49
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    array.sort()\n    if end == None:\n        end = len(array)\n    else:\n        end = end\n    for i in range(start,end):\n        if array[i]!= i:\n            return i\n    return len(array)\n",
        "num_ids": 65
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n",
        "num_ids": 17
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    length = len(array)\n    if length <= 1:\n        return 1\n    if end is None:\n        end = length\n    \n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n",
        "num_ids": 65
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i] == (i+1):\n            return (i+1)\n        if array[i]!= i+1:\n            continue\n    return end + 1\n",
        "num_ids": 71
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n    if end==None:\n        end=len(array)\n    i=start\n    j=end\n    while(i<=j):\n        mid=(i+j)//2\n        if array[mid]==mid:\n            i=mid+1\n        else:\n            j=mid-1\n    return i\n",
        "num_ids": 88
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Handle the default value for end\n    if end is None:\n        end = len(array)\n",
        "num_ids": 26
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    \n    # if the start value is > end value, swap them\n    if start > end:\n        start,end = end,start\n",
        "num_ids": 49
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    else:\n        end = end\n    if end < start:\n        return -1\n    else:\n        for i in range(start,end):\n            if array[i] == i+1:\n                pass\n            elif array[i] == i:\n                pass\n            elif array[i] == array[i-1]:\n                pass\n            else:\n                return i\n        return end\n",
        "num_ids": 112
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if start<=end:\n        mid=(start+end)//2\n        if array[mid]==mid:\n            return find_First_Missing(array,mid+1,end)\n        elif array[mid]<mid:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            return find_First_Missing(array,start,mid-1)\n    return start\n",
        "num_ids": 116
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    #implement binary search to find the smallest missing number.\n    #start and end are the bounds of the input array.\n    #return the first missing element in the list\n    \n    if end == None:\n        end = len(array)\n    \n    return find_Missing(array,start,end)\n",
        "num_ids": 75
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return(string.replace(\" \", \"%20\"))\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    for x in range(0,len(string)):\n        if string[x]==\" \":\n            string=string[:x]+'%20'+string[x+1:]\n    return string\n",
        "num_ids": 51
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for char in string:\n        if char =='':\n            new_string += '%20'\n        else:\n            new_string += char\n    return new_string\n",
        "num_ids": 50
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n    \n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function that will find all the anagrams of a string\n    within a list. You will be given two strings, and you \n    should return a list of all the anagrams or an empty list\n    if there are none. For example:\n    >>> is_anagram(\"listen\", \"silent\")\n    ['silent']\n    >>> is_anagram(\"A gentleman\", \"Elegant men\")\n    ['Elegant men']\n    >>> is_anagram(\"time\", \"play\")\n    []\n    '''\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    if s1 == s2:\n        return [s2]\n    return []\n    \n    \ndef find_anagrams(s, s_list):\n    '''\n    Write a function that will take two strings, s and s_list,\n    and return a list of all the anagrams of s within s_list.\n    You should ignore case. For example:\n",
        "num_ids": 48
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    for i in range(len(string)):\n        if string[i] =='':\n            string = string[:i] + '%20' + string[i+1:]\n    return string\n",
        "num_ids": 49
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        if string[i] =='':\n            new_string += '%20'\n        else:\n            new_string += string[i]\n    return new_string\n",
        "num_ids": 61
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n",
        "num_ids": 14
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    i, o = [], []\n    for item in list:\n        if item % 2 == 0:\n            i.append(item)\n        else:\n            o.append(item)\n    return [i, o]\n",
        "num_ids": 55
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = [] \n    for i in list: \n        if i%2 == 0: \n            even_num.append(i) \n    return even_num\n",
        "num_ids": 45
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(0, len(list)):\n        if list[i] % 2 == 0:\n            list1.append(list[i])\n        else:\n            list2.append(list[i])\n    return list1, list2\n",
        "num_ids": 74
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    odd = []\n    even = []\n    for num in list:\n        if num % 2!= 0:\n            odd.append(num)\n        else:\n            even.append(num)\n    return odd,even\n",
        "num_ids": 55
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    print(\"Even numbers in the list are: \")\n    for x in list:\n        if x % 2 == 0:\n            print(x)\n",
        "num_ids": 37
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # return [i for i in list if i % 2 == 0]\n    evenlist = []\n    for i in list:\n        if i % 2 == 0:\n            evenlist.append(i)\n    return evenlist\n",
        "num_ids": 55
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # split the list\n    even = []\n    odd = []\n    for i in list:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even,odd\n",
        "num_ids": 60
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    print(\"Even numbers in the list are : \")\n    for x in list:\n        if x % 2 == 0:\n            print(x, end=\" \")\n    print()\n    return\n",
        "num_ids": 48
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = [] \n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n    return even_list\n",
        "num_ids": 42
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in range(0, len(list)):\n        if (list[i] % 2 == 0):\n            even.append(list[i])\n    return even\n",
        "num_ids": 48
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    for i in range(len(ele)):\n        x = (ele[0] + i - 1, ele[1] + i - 1)\n        y = (ele[0] + i, ele[1] + i)\n        z = (ele[0] + i + 1, ele[1] + i - 1)\n        w = (ele[0] + i - 1, ele[1] + i + 1)\n        if x not in sub:\n            sub.append(x)\n        if y not in sub:\n            sub.append(y)\n        if z not in sub:\n            sub.append(z)\n        if w not in sub:\n            sub.append(w)\n    \n    return sub\n",
        "num_ids": 174
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacents = []\n    for x_off in range(-1, 2):\n        for y_off in range(-1, 2):\n            if x_off == 0 and y_off == 0:\n                continue\n            adjacents.append((ele[0] + x_off, ele[1] + y_off))\n    if sub:\n        return [x for x in adjacents if x not in sub]\n    else:\n        return adjacents\n",
        "num_ids": 111
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for n in range(len(ele)):\n        if n+1 < len(ele):\n            sub.append((ele[n], ele[n+1]))\n            sub = adjac(ele[n+1], sub)\n    return sub\n",
        "num_ids": 61
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    a = [ele[0]+1, ele[0]-1, ele[1]+1, ele[1]-1, ele[0]+1, ele[1]+1, ele[0]-1, ele[1]-1]\n    a = [i for i in a if 0 <= i <= max(dim)]\n    if sub:\n        a = [i for i in a if i not in sub]\n    return a\n",
        "num_ids": 99
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [tuple(map(sum, zip(ele, i))) for i in [(-1, 0), (0, 1), (1, 0), (0, -1)]]\n",
        "num_ids": 45
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if (len(ele) == 0):\n        return sub\n    else:\n        if ((len(ele) - 1) > 0):\n            for i in range(len(ele)):\n                if i == 0:\n                    sub.append((ele[i] - 1, ele[i]))\n                    sub.append((ele[i], ele[i] + 1))\n                    sub.append((ele[i], ele[i]))\n                elif i == (len(ele) - 1):\n                    sub.append((ele[i], ele[i] - 1))\n                    sub.append((ele[i] + 1, ele[i]))\n                    sub.append((ele[i], ele[i]))\n                else:\n                    sub.append((ele[i] - 1, ele[i]))\n                    sub.append((ele[i], ele[i] + 1))\n                    sub.append((ele[i], ele[i] - 1))\n                    sub.append((ele[i], ele[i] + 1))\n        else:\n            if (len(ele) == 1):\n                sub.append((ele[0], ele[0]))\n            else:\n                sub.append((ele[0], ele[0]))\n        return adjac(sub, sub)\n",
        "num_ids": 300
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    ans = [ele]\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i == 0 and j == 0):\n                continue\n            ans.append((ele[0]+i, ele[1]+j))\n    return ans\n",
        "num_ids": 68
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y, z = ele\n    return [(x+1, y, z), (x-1, y, z), (x, y+1, z), (x, y-1, z), (x, y, z+1), (x, y, z-1)]\n",
        "num_ids": 68
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n    for i in range(len(ele)):\n        if i == 0:\n            if ele[0] - 1 >= 0:\n                sub.append((ele[0] - 1, ele[1]))\n        elif i == 1:\n            if ele[1] + 1 < 3:\n                sub.append((ele[0], ele[1] + 1))\n        elif i == 2:\n            if ele[2] + 1 < 3:\n                sub.append((ele[0], ele[1]))\n                sub.append((ele[0] + 1, ele[1]))\n    return sub\n",
        "num_ids": 163
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 2:\n        return [[sub[0]+1, sub[1]], [sub[0]-1, sub[1]], [sub[0], sub[1]+1], [sub[0], sub[1]-1]]\n    for coord in sub:\n        new = adjac(ele, sub = sub+[coord])\n        sub = new[:]\n    return sub\n",
        "num_ids": 95
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_replacement = ''\n    for character in text:\n        if character =='':\n            text_replacement += '_'\n        else:\n            text_replacement += character\n    return text_replacement\n",
        "num_ids": 53
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_lower = text.lower()\n    \n    text_list = []\n    \n    for character in text_lower:\n        if character == \" \":\n            text_list.append(\"_\")\n        else:\n            text_list.append(character)\n            \n    return \"\".join(text_list)\n    \n    \ndef censor_vowels(text):\n    '''\n    Write a function to censor any vowels in a given string.\n    '''\n    text_lower = text.lower()\n    \n    text_list = []\n    \n    for character in text_lower:\n        if character in \"aeiou\":\n            text_list.append(\"*\")\n        else:\n            text_list.append(character)\n            \n    return \"\".join(text_list)\n    \n    \ndef reverse(text):\n    '''\n    Write a function to reverse a string\n    '''\n    text_list = list(text)\n    \n    text_list.reverse()\n    \n    return \"\".join(text_list)\n    \n    \ndef is_palindrome(text):\n    '''\n    Write a function to check if a string is a palindrome\n    '''\n    text_lower = text.lower()\n    \n    text_list = []\n    \n    for character in text_lower:\n        if character in \"abcdefghijklmnopqrstuvwxyz\":\n            text_list.append(character)\n            \n    text_list.reverse()\n    \n    return \"\".join(text_list) == text_lower\n    \n    \ndef contains_duplicate(text):\n    '''\n    Write a function to check if a string contains any duplicate characters\n    '''\n    text_lower = text.lower()\n    \n    text_list = []\n    \n    for character in text_lower:\n        if character not in text_list:\n            text_list.append(character)\n        else:\n            return True\n            \n    return False\n    \n    \ndef find_substring(text, sub):\n    '''\n    Write a function to find a substring in a given string.\n    '''\n    text_lower = text.lower()\n    sub_lower = sub.lower()\n    \n    text_list = []\n    \n    for character in text_lower:\n        text_list.append(character)\n    \n    #print(text_list)\n    \n    index_list = []\n    \n    for index, character in enumerate(text_list):\n        if character == sub_lower[0]:\n            index_list.append(index)\n            \n    #print(index_list)\n    \n    for index in index_list:\n        #print(index)\n        if sub_lower in \"\".join(text_list[index:index+len(sub_lower)]):\n            return True\n            \n    return False\n    \n    \ndef run_tests():\n    '''\n    Run tests on each function to ensure that they behave as expected.\n    '''\n    #test_list = [1, 2, 3]\n    \n    #print(test_list[0])\n    \n    #print(test_list[1])\n    \n    #print(test_list[2])\n    \n    #print(test_list[3])\n    \n    \n    text = \"The quick brown fox jumps over the lazy dog\"\n    \n    print(replace_spaces(text))\n    \n    print(censor_vowels(text))\n    \n    print(reverse(text))\n    \n    print(is_palindrome(text))\n    \n    print(contains_duplicate(text))\n    \n    sub = \"the\"\n    \n    print(find_substring(text, sub))\n    \n    \nif __name__ == \"__main__\":\n    run_tests(",
        "num_ids": 198
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \",\"_\")\n    text = text.replace(\"_\",\" \")\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    #Your code here\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n",
        "num_ids": 32
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for i in range(len(text)):\n        if text[i] =='':\n            new_text += '_'\n        elif text[i] == '_':\n            new_text +=''\n        else:\n            new_text += text[i]\n    return new_text\n",
        "num_ids": 79
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for c in text:\n        if c =='':\n            new_text += '_'\n        else:\n            new_text += c\n    return new_text\n",
        "num_ids": 49
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n",
        "num_ids": 13
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    moved_list = []\n    for i in num_list:\n        if i == 0:\n            moved_list.append(i)\n        else:\n            moved_list.append(i)\n    return moved_list\n",
        "num_ids": 58
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #return num_list.sort(key=lambda x: x == 0)\n",
        "num_ids": 21
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n            num_list.append(0)\n    print(num_list)\n",
        "num_ids": 46
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    idx = 0\n    l = len(num_list)\n    for i in range(l):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list\n",
        "num_ids": 65
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return num_list.sort(key=lambda x: x!= 0)\n    \n",
        "num_ids": 23
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    for zero in num_list:\n        if zero == 0:\n            new_list.append(zero)\n    return new_list\n",
        "num_ids": 68
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #while 0 in num_list:\n        #num_list.remove(0)\n        #num_list.append(0)\n    #return num_list\n    return [x for x in num_list if x!=0] + [x for x in num_list if x==0]\n    \n    \n    \ndef sum_of_two_values(num_list):\n    '''\n    Write a python function to sum all values from the given list.\n    '''\n    return sum(num_list)\n    \n    \ndef largest_num(num_list):\n    '''\n    Write a python function to return the largest number from the given list.\n    '''\n    return max(num_list)\n    \n    \ndef second_largest_num(num_list):\n    '''\n    Write a python function to return the second largest number from the given list.\n    '''\n    if len(num_list) == 0:\n        return \"List is empty\"\n    elif len(num_list) == 1:\n        return num_list[0]\n    else:\n        num_list = sorted(num_list)\n        num_list.pop()\n        return num_list[0]\n    \n    \n    \ndef even_num(num_list):\n    '''\n    Write a python function to return all even numbers from the given list.\n    '''\n    return [x for x in num_list if x % 2 == 0]\n    \n    \n    \ndef odd_num(num_list):\n    '''\n    Write a python function to return all odd numbers from the given list.\n    '''\n    return [x for x in num_list if x % 2!= 0]\n    \n    \ndef num_of_occurance(num_list, val):\n    '''\n    Write a python function to count the number of occurances of a given number in a list.\n    '''\n    return num_list.count(val)\n    \n    \ndef min_max_num_in_list(num_list):\n    '''\n    Write a python function to return the minimum and maximum number from the given list.\n    '''\n    num_list = sorted(num_list)\n    return num_list[0], num_list[-1]\n    \n    \n    \ndef sum_of_list(num_list):\n    '''\n    Write a python function to return the sum of all numbers in the given list.\n    '''\n    return sum(num_list)\n    \n    \n    \ndef num_of_even_even(num_list):\n    '''\n    Write a python function to return the number of even numbers in the given list, which occurs even number of times in the list.\n    '''\n    return len([x for x in num_list if num_list.count(x) % 2 == 0])\n    \n    \ndef even_sum(num_list):\n    '''\n    Write a python function to return the sum of all even numbers in the given list.\n    '''\n    return sum([x for x in num_list if num_list.count(x) % 2 == 0])\n    \n    \ndef reverse_list(num_list):\n    '''\n    Write a python function to return the reverse of the given list.\n    '''\n    return num_list[::-1]\n    \n    \ndef split_list(num_list):\n    '''\n    Write a python function to split the given list into two separate lists. \n    '''\n    a,b = num_list[0:int(len(num_list)/2)], num_list[int(len(num_list)/2):]\n    return a,b\n    \n    \ndef common_elements(num_list1, num_list2):\n    '''\n    Write a python function to return the common elements in two given lists.\n    '''\n    return [x for x in num_list1 if x in num_list2]\n    \n    \n    \ndef nested_list(num_list):\n    '''\n    Write a python function to return all numbers in the given list, which occur in a nested list.\n    '''\n    return [x for x in num_list if isinstance(x, list)]\n    \n    \ndef num_of_occurance_nested(num_list):\n    '''\n    Write a python function to return the number of occurances of a given number in a nested list.\n    '''\n    count = 0\n    for x in num_list:\n        if isinstance(x, list):\n            count += 1\n    return count\n    \n    \ndef merge_list(num_list1, num_list2):\n    '''\n    Write a python function to merge two given lists into one list.\n    '''\n    return num_list1 + num_list2\n    \n    \ndef sort_list(num_list):\n    '''\n    Write a python function to sort the given list in ascending order.\n    '''\n    return sorted(num_list)\n    \n    \ndef remove_duplicate(num_list):\n    '''\n    Write a python function to remove duplicated numbers in the given list.\n    '''\n    return list(dict.fromkeys(num_list))\n    \n    \ndef rotate_list(num_list):\n    '''\n    Write a python function to rotate the given list by a specified amount.\n    '''\n    if len(num_list) > 1:\n        num_list = num_list[-1:] + num_list[:-1]\n    return num_list\n    \n    \ndef smallest_and_largest(num_list):\n    '''\n    Write a python function to return the smallest and largest numbers from the given list.\n    '''\n    return min(num_list), max(num_list)\n    \n    \n    \ndef greatest_num(num_list):\n    '''\n    Write a python function to return the greatest number from the given list.\n    '''\n    return max(num_list)\n    \n    \ndef second_greatest_num(num_list):\n    '''\n    Write a python function to return the second greatest number from the given list.\n    '''\n    num_list = sorted(num_list)\n    num_list.pop()\n    return num_list[0]\n    \n    \ndef get_common_num_from_list(num_list1, num_list2):\n    '''\n    Write a python function to return common numbers between two given lists.\n    '''\n    return [x for x in num_list1 if x in num_list2]\n    \n    \ndef get_unique_num_from_list(num_list):\n    '''\n    Write a python function to return unique numbers from the given list.\n    '''\n    return list(dict.fromkeys(num_list))\n    \n    \ndef get_unique_sum_num_from_list(num_list):\n    '''\n    Write a python function to return the sum of unique numbers from the given list.\n    '''\n    return sum(set(num_list))\n    \n    \ndef get_unique_sum_num_from_list_set(num_list):\n    '''\n    Write a python function to return the sum of unique numbers from the given list.\n    '''\n    return sum(set(num_list))\n    \n    \ndef multiply_each_num_in_list(num_list):\n    '''\n    Write a python function to multiply all the numbers in the given list.\n    '''\n    return functools.reduce(lambda x,y:x*y, num_list)\n    \n    \n    \ndef get_num_in_list(num_list, val):\n    '''\n    Write a python function to return the index of a given number from the given list.\n    '''\n    return num_list.index(val)\n    \n    \ndef get_num_count_in_list(num_list, val):\n    '''\n    Write a python function to return the count of a given number from the given list.\n    '''\n    return num_list.count(val)\n    \n    \ndef min_max_num_in_list(num_list):\n    '''\n    Write a python function to return the minimum and maximum numbers from the given list.\n    '''\n    return min(num_list), max(num_list)\n    \n    \ndef duplicate_num_in_list(num_list):\n    '''\n    Write a python functio",
        "num_ids": 9
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n            num_list.append(i)\n    print(num_list)\n    \ndef move_zero_sol1(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    non_zero_list = []\n    \n    for i in num_list:\n        if i == 0:\n            zero_list.append(i)\n        else:\n            non_zero_list.append(i)\n    \n    return non_zero_list+zero_list\n    \nmove_zero([0,5,0,2,0,1,3])\n",
        "num_ids": 97
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count_zeros = 0\n    for elem in num_list:\n        if elem == 0:\n            count_zeros += 1\n    for i in range(count_zeros):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n",
        "num_ids": 74
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for num in num_list:\n        if num == 0:\n            num_list.remove(num)\n            num_list.append(num)\n",
        "num_ids": 38
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum\n",
        "num_ids": 50
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(0,n):\n        for j in range(0,n):\n            if(i!=j):\n                sum+=arr[i]^arr[j]\n    return sum\n",
        "num_ids": 55
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    import functools as fn\n    xor_sum = fn.reduce(lambda x, y : x^y, arr)\n    return xor_sum \n",
        "num_ids": 41
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pair_sum = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            pair_sum += arr[i] ^ arr[j]\n    return pair_sum\n",
        "num_ids": 54
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total_sum = 0\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            total_sum += arr[i] ^ arr[j]\n    return total_sum\n",
        "num_ids": 58
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n<=0 : \n        return 0\n    sum_ = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            sum_ += (arr[i] ^ arr[j]) \n    return sum_ \n",
        "num_ids": 69
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    result = 0\n    for i in range(n-1):\n        result = result ^ arr[i] ^ arr[i+1]\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(0,n) :\n        for j in range(i+1,n) :\n            s = s ^ (arr[i]^arr[j])\n    return s\ndef check_pallindrome(arr,n):\n    '''\n    Write a python function to check whether the given list is a pallindrome or not.\n    '''\n    i = 0\n    j = n-1\n    while i < j :\n        if arr[i]!= arr[j] :\n            return False\n        i = i+1\n        j = j-1\n    return True\ndef sum_Of_Arr(arr,n):\n    '''\n    Write a python function to find the sum of all elements in the given array.\n    '''\n    s = 0\n    for i in range(0,n) :\n        s = s+arr[i]\n    return s\ndef check_prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    for i in range(2,n) :\n        if n%i == 0 :\n            return False\n    return True\ndef check_fib(n):\n    '''\n    Write a python function to check whether the given number is in the Fibonacci series or not.\n    '''\n    fib_list = [0,1]\n    while True :\n        if fib_list[-1] > n :\n            return False\n        if fib_list[-2] + fib_list[-1] == n :\n            return True\n        fib_list.append(fib_list[-2] + fib_list[-1])\ndef check_prime_sum(n):\n    '''\n    Write a python function to check whether the given number can be written as the sum of two primes or not.\n    '''\n    i = 2\n    j = n\n    while i < j :\n        if check_prime(i) :\n            if check_prime(j-i) :\n                return True\n        i = i+1\n    return False\ndef count_of_prime(arr,n):\n    '''\n    Write a python function to count the number of prime numbers in the given array.\n    '''\n    count = 0\n    for i in range(0,n) :\n        if check_prime(arr[i]) :\n            count = count+1\n    return count\ndef reverse_string(arr,n):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    i = 0\n    j = n-1\n    while i < j :\n        arr[i],arr[j] = arr[j],arr[i]\n        i = i+1\n        j = j-1\n    return arr\ndef palindrome_permutation(str1,n):\n    '''\n    Write a python function to check whether the given string is a permutation of a palindrome or not.\n    '''\n    freq = dict()\n    for i in range(n) :\n        if str1[i] in freq :\n            freq[str1[i]] = freq[str1[i]]+1\n        else :\n            freq[str1[i]] = 1\n    if 2 in freq.values() :\n        return True\n    return False\ndef max_char_count(str1,n):\n    '''\n    Write a python function to find the maximum occurring character in the given string.\n    '''\n    freq = dict()\n    for i in range(n) :\n        if str1[i] in freq :\n            freq[str1[i]] = freq[str1[i]]+1\n        else :\n            freq[str1[i]] = 1\n    max_ch = -1\n    for i in freq :\n        if max_ch < freq[i] :\n            max_ch = freq[i]\n    return max_ch\ndef unique_chars(str1,n):\n    '''\n    Write a python function to find the number of unique characters in the given string.\n    '''\n    freq = dict()\n    for i in range(n) :\n        if str1[i] in freq :\n            freq[str1[i]] = freq[str1[i]]+1\n        else :\n            freq[str1[i]] = 1\n    return len(freq)\ndef reverse_string_k(str1,k):\n    '''\n    Write a python function to reverse the given string upto the kth character.\n    '''\n    str2 = str1[0:k]\n    i = 0\n    j = k-1\n    while i < j :\n        str2[i],str2[j] = str2[j],str2[i]\n        i = i+1\n        j = j-1\n    return str2\ndef palindrome_perm_count(str1,n):\n    '''\n    Write a python function to find the number of permutations of a string which is palindrome or not.\n    '''\n    if palindrome_permutation(str1,n) :\n        return 2**n\n    return 0\ndef count_of_subset(arr,n) :\n    '''\n    Write a python function to find the count of subsets of the given array.\n    '''\n    return 2**n\ndef palindrome_perm_count_dp(str1,n):\n    '''\n    Write a python function to find the number of permutations of a string which is palindrome or not.\n    '''\n    if palindrome_permutation(str1,n) :\n        return 1\n    if n == 0 :\n        return 0\n    if n == 1 :\n        if palindrome_permutation(str1,n) :\n            return 1\n        return 0\n    else :\n        return palindrome_perm_count_dp(str1,n-1) + palindrome_perm_count_dp(str1,n-2)\ndef subset_sum(arr,n) :\n    '''\n    Write a python function to find the number of subsets of a set with the sum equal to sum(arr).\n    '''\n    if sum(arr)%2 == 1 :\n        return 0\n    if n == 0 :\n        return 1\n    else :\n        return subset_sum(arr,n-1) + subset_sum(arr,n)\ndef subset_sum_dp(arr,n) :\n    '''\n    Write a python function to find the number of subsets of a set with the sum equal to sum(arr).\n    '''\n    dp = [[0 for i in range(sum(arr)+1)] for j in range(n+1)]\n    for i in range(n+1) :\n        for j in range(sum(arr)+1) :\n            if i == 0 and j!= 0 :\n                dp[i][j] = 0\n            elif j == 0 :\n                dp[i][j] = 1\n            elif arr[i-1] <= j :\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-arr[i-1]]\n            else :\n                dp[i][j] = dp[i-1][j]\n    return dp[n][sum(arr)]\ndef longest_substring_without_rep(str1,n):\n    '''\n    Write a python function to find the longest substring without repeating characters.\n    '''\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    m = 0\n    for i in range(n) :\n        for j in range(i+1,n+1) :\n            if str1[i] == str1[j] :\n                break\n            else :\n                m = max(m,j-i)\n    return m\ndef longest_substring_without_rep_dp(str1,n) :\n    '''\n    Write a python function to find the longest substring without repeating characters.\n    '''\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(n+1) :\n        for j in range(n+1) :\n            if i == 0 or j == 0 :\n                dp[i][j] = 0\n            elif str",
        "num_ids": 75
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            sum += (arr[i] ^ arr[j]) \n    return sum\n    \ndef prime(n) : \n    '''\n    Write a python function to check the given number is prime or not.\n    '''\n    if n < 2 : \n        return False\n    for i in range(2, n // 2 + 1) : \n        if n % i == 0 : \n            return False\n    return True\n        \ndef num_of_digits(n) : \n    '''\n    Write a python function to count the number of digits in a given number.\n    '''\n    count = 0\n    while(n!= 0) : \n        n //= 10\n        count += 1\n    return count\n    \ndef first_non_repeating_char(arr, n) : \n    '''\n    Write a python function to find the first non-repeating character in a given string.\n    '''\n    for i in range(n) : \n        if arr.count(arr[i]) == 1 : \n            return arr[i]\n    return -1\n",
        "num_ids": 40
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s=0\n    for i in range(n):\n        for j in range(n):\n            if(i<j):\n                s=s^arr[i]^arr[j]\n    return s\narr=[1,3,4,5,6]\nn=len(arr)\nprint(pair_xor_Sum(arr,n))\n",
        "num_ids": 86
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for x in iterable:\n        hq.heappush(h,x)\n    return [hq.heappop(h) for _ in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    while len(iterable) > 1:\n        iterable[0], iterable[-1] = iterable[-1], iterable[0]\n        hq.heappop(iterable)\n        hq.heappush(iterable, iterable[0])\n        hq.heapify(iterable)\n",
        "num_ids": 91
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    return [hq.heappop(heap) for i in range(len(heap))]\n",
        "num_ids": 55
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        hq.heappush(heap,i)\n    while heap:\n        yield hq.heappop(heap)\n        \na = [10, 1, 5, 7, 6, 9, 2, 3]\nprint(heap_sort(a))\n",
        "num_ids": 81
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for val in iterable:\n        hq.heappush(heap, val)\n    return [hq.heappop(heap) for i in range(len(heap))]\n",
        "num_ids": 55
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #create a heap of the iterable\n    h=iterable[:]\n    hq.heapify(h)\n",
        "num_ids": 31
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Initilize the heap\n    heap = []\n    \n    # Converts the iterable into a list\n    list_a = list(iterable)\n    \n    # Adding elements to the heap\n    for item in list_a:\n        hq.heappush(heap, item)\n",
        "num_ids": 73
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (actual_cost==sale_amount):\n        print(\"Your profit is zero and no loss\")\n    else:\n        print(\"Your loss is zero and no profit\")\n",
        "num_ids": 42
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print(f\"no profit, actual cost {actual_cost} sale amount {sale_amount}\")\n    elif actual_cost == sale_amount:\n        print(f\"no profit, no loss, actual cost {actual_cost} sale amount {sale_amount}\")\n    else:\n        print(f\"loss, actual cost {actual_cost} sale amount {sale_amount}\")\n",
        "num_ids": 103
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount>actual_cost:\n        return 1\n    return 0\n",
        "num_ids": 21
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return sale_amount==actual_cost\n",
        "num_ids": 12
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost<sale_amount:\n        print(\"loss\")\n    else:\n        print(\"profit\")\n",
        "num_ids": 29
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 29
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost>=sale_amount:\n        return \"Profit\"\n    else:\n        return \"Loss\"\n",
        "num_ids": 32
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n        \ndef noprofit_withloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False\n        \ndef noloss_withprofit(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no loss and profit\n    '''\n    if actual_cost < sale_amount:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + (0.6215*t) - (11.37*math.pow(v,0.16)) + (0.3965*t*math.pow(v,0.16))\n    return round(wci)\n",
        "num_ids": 64
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 3:\n        return 0\n    elif t < 11:\n        return 0\n    elif v < 13:\n        return round(35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16),0)\n    elif v < 18:\n        return round(35.75 + 0.4275*t*(v**0.16) - 35.75*(v**0.16),0)\n    else:\n        return round(35.75 + 0.4275*t*(v**0.16),0)\n",
        "num_ids": 151
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + (0.6215*t) - (11.37 * pow(v,0.16)) + (0.3965*t*pow(v,0.16))\n    return math.ceil(wci)\n",
        "num_ids": 62
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci= 13.12 + (0.6215*t) - (11.37*v**0.16) + (0.3965*t*v**0.16)\n    wci_rounded = round(wci,0)\n    print(f\"{wci_rounded}\")\n    \n    \n    \nwind_chill(12, 22)\n",
        "num_ids": 89
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Complete this function\n    import math\n    wci = 13.12 + 0.6215*t - 11.37*math.pow(v,0.16) + 0.3965*t*math.pow(v,0.16)\n    return int(wci)\n",
        "num_ids": 70
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(13.12 + 0.621*t - 11.3*v**0.16 + 0.3965*t*v**0.16)\n",
        "num_ids": 41
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Convert wind speed from km/h to m/s\n    speed = v * 0.2777777777777778\n    \n    # Convert temperature from celsius to fahrenheit\n    temperature = (t * 1.8) + 32\n    \n    # Calculate wind chill\n    wind_chill = 35.74 + (0.6215 * temperature) - (35.75 * speed**0.16) + (0.4275 * temperature * speed**0.16)\n    return int(wind_chill)\n    \n    \n    \ndef test_round_trip():\n    assert math.isclose(wind_chill(22, 15), 13, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(32, 45), 31, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(22.5, 15), 15, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(15.5, 15), 16, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(25, 15), 20, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(25.5, 15), 18, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(33.5, 15), 19, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(55, 15), 39, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(66, 15), 40, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(77, 15), 43, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(55, 60), 47, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(25, 30), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(25, 15), 13, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(25, 60), 39, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(24, 60), 38, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 60), 37, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 55), 36, rel_tol=1e-4, abs_tol=1e-4)\n    assert math.isclose(wind_chill(23, 5",
        "num_ids": 1997
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + 0.6215*t - 11.37*(v**0.16) + 0.3965*t*(v**0.16)\n    return math.floor(wci)\n",
        "num_ids": 54
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <3.0 or t<-45 or t>45:\n        return(\"Invalid input\")\n    else:\n        wind_chill=13.12 + (0.6215*t) - (11.37*(v**0.16)) + (0.3965*(t**1.16))\n        return(round(wind_chill))\nprint(wind_chill(10,30))\n",
        "num_ids": 100
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    print(\"Wind Chill: \", int(round(35.74 + 0.6215 * t - 35.75 * (math.pow(v,0.16)) + 0.4275 * t * (math.pow(v,0.16)))))\n",
        "num_ids": 62
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def remove_lowercase(sample_names):\n        remove_lowercase_list = []\n        for index in range(len(sample_names)):\n            if sample_names[index][0] not in 'qwertyuiopasdfghjklzxcvbnm':\n                remove_lowercase_list.append(sample_names[index])\n        return remove_lowercase_list\n    \n    sample_names = remove_lowercase(sample_names)\n    \n    return sum([len(sample_names[index]) for index in range(len(sample_names))])\n",
        "num_ids": 138
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import re\n    for name in sample_names:\n        if not name.startswith(\"(\") and not name.startswith(\"(.\") and not name.startswith(\")\"):\n            pass\n        else:\n            sample_names.remove(name)\n    return(len(\"\".join(sample_names)))\n",
        "num_ids": 78
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['bob', 'rick', 'diego', 'cow', 'joe', 'panda','sue']\n    print(sample_names)\n    print(len(sample_names))\n    new_sample_names = [i for i in sample_names if i[0].isupper()]\n    print(new_sample_names)\n    print(len(new_sample_names))\n",
        "num_ids": 98
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    #print(sample_names[0])\n    #print(len(sample_names[0]))\n    #print(sample_names[0][0])\n    sample_names_c = [x for x in sample_names if x[0].isupper()]\n    #print(sample_names_c)\n    #print(sum([len(x) for x in sample_names_c]))\n    return sum([len(x) for x in sample_names_c])\n    \n    \ndef count_names(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    '''\n    \n    #print(name_list)\n    counter = 0\n    for name in name_list:\n        #print(name)\n        if name[0].lower() == \"a\":\n            counter += 1\n    return counter\n    \ndef count_names2(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    '''\n    \n    #print(name_list)\n    counter = 0\n    for name in name_list:\n        #print(name)\n        if name[0].lower() == \"a\":\n            counter += 1\n    return counter\n    \ndef sum_name(name_list):\n    '''\n    Write a function to sum the length of the names of a given list of names.\n    '''\n    \n    #print(name_list)\n    #print(len(name_list))\n    return sum([len(x) for x in name_list])\n    \ndef sum_name2(name_list):\n    '''\n    Write a function to sum the length of the names of a given list of names.\n    '''\n    \n    #print(name_list)\n    #print(len(name_list))\n    return sum([len(x) for x in name_list])\n    \ndef sum_name3(name_list):\n    '''\n    Write a function to sum the length of the names of a given list of names.\n    '''\n    \n    #print(name_list)\n    #print(len(name_list))\n    return sum([len(x) for x in name_list])\n    \ndef sum_name4(name_list):\n    '''\n    Write a function to sum the length of the names of a given list of names.\n    '''\n    \n    #print(name_list)\n    #print(len(name_list))\n    return sum([len(x) for x in name_list])\n    \ndef sum_name5(name_list):\n    '''\n    Write a function to sum the length of the names of a given list of names.\n    '''\n    \n    #print(name_list)\n    #print(len(name_list))\n    return sum([len(x) for x in name_list])\n    \ndef sum_name6(name_list):\n    '''\n    Write a function to sum the length of the names of a given list of names.\n    '''\n    \n    #print(name_list)\n    #print(len(name_list))\n    return sum([len(x) for x in name_list])\n    \ndef count_names3(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    '''\n    \n    #print(name_list)\n    counter = 0\n    for name in name_list:\n        #print(name)\n        if name[0].lower() == \"a\":\n            counter += 1\n    return counter\n    \ndef count_names4(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    '''\n    \n    #print(name_list)\n    counter = 0\n    for name in name_list:\n        #print(name)\n        if name[0].lower() == \"a\":\n            counter += 1\n    return counter\n    \ndef count_names5(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    '''\n    \n    #print(name_list)\n    counter = 0\n    for name in name_list:\n        #print(name)\n        if name[0].lower() == \"a\":\n            counter += 1\n    return counter\n    \ndef count_names6(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    '''\n    \n    #print(name_list)\n    counter = 0\n    for name in name_list:\n        #print(name)\n        if name[0].lower() == \"a\":\n            counter += 1\n    return counter\n    \ndef count_names7(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    '''\n    \n    #print(name_list)\n    counter = 0\n    for name in name_list:\n        #print(name)\n        if name[0].lower() == \"a\":\n            counter += 1\n    return counter\n    \ndef count_names8(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    '''\n    \n    #print(name_list)\n    counter = 0\n    for name in name_list:\n        #print(name)\n        if name[0].lower() == \"a\":\n            counter += 1\n    return counter\n    \ndef count_names9(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    '''\n    \n    #print(name_list)\n    counter = 0\n    for name in name_list:\n        #print(name)\n        if name[0].lower() == \"a\":\n            counter += 1\n    return counter\n    \ndef count_names10(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    '''\n    \n    #print(name_list)\n    counter = 0\n    for name in name_list:\n        #print(name)\n        if name[0].lower() == \"a\":\n            counter += 1\n    return counter\n    \ndef count_names11(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    '''\n    \n    #print(name_list)\n    counter = 0\n    for name in name_list:\n        #print(name)\n        if name[0].lower() == \"a\":\n            counter += 1\n    return counter\n    \ndef count_names12(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    '''\n    \n    #print(name_list)\n    counter = 0\n    for name in name_list:\n        #print(name)\n        if name[0].lower() == \"a\":\n            counter += 1\n    return counter\n    \ndef count_names13(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    '''\n    \n    #print(name_list)\n    counter = 0\n    for name in name_list:\n        #print(name)\n        if name[0].lower() == \"a\":\n            counter += 1\n    return counter\n    \ndef count_names14(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    '''\n    \n    #print(name_list)\n    counter = 0\n    for name in name_list:\n        #print(name)\n        if name[0].lower() == \"a\":\n            counter += 1\n    return counter\n    \ndef count_names15(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    '''\n    \n    #print(name_list)\n    counter = 0\n    for name in name_list:\n        #print(name)\n        if name[0].lower() == \"a\":\n            counter += 1\n    return counter\n    \ndef count_names16(name_list):\n    '''\n    Write a function to count the number of names starting with a particular letter.\n    ''",
        "num_ids": 21
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_list = []\n    for i in sample_names:\n        if i[0].isupper():\n            new_list.append(i)\n    return len(new_list)\n",
        "num_ids": 47
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    \n    return sum([i.count(' ') + 1 for i in sample_names if i[0].isupper()])\n    \n",
        "num_ids": 36
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count=0\n    for i in sample_names:\n        if i[0].isupper():\n            count+=len(i)\n    print(count)\n",
        "num_ids": 40
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def sum_names(sample_names):\n        '''\n        Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n        '''\n        total_length = 0\n        for sample in sample_names:\n            if sample.isupper():\n                total_length += len(sample)\n        return total_length\n",
        "num_ids": 42
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    i = 1\n    while i < len(sample_names):\n        if sample_names[i][0].islower():\n            sample_names.pop(i)\n        else:\n            i+=1\n    for name in sample_names:\n        names.append(len(name))\n    print(names)\n",
        "num_ids": 81
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for i in sample_names:\n        if i[0].isupper():\n            i.lower()\n        else:\n            i.upper()\n    return sum(len(i) for i in sample_names)\n",
        "num_ids": 53
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile(r'\\([^)]*\\)')\n    result = regex.findall(items)\n    for item in result:\n        items = re.sub(item, \"\", items)\n    return items\n",
        "num_ids": 57
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for item in items:\n        item = re.sub('[\\(\\)]', '', item)\n        result.append(item)\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('\\([^)]*\\)', '', items)\n",
        "num_ids": 20
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_list = []\n    for item in items:\n        new_list.append(re.sub(r'[(][^)]*[)]', '', item))\n    return new_list\n",
        "num_ids": 49
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        temp = item.replace('(', '')\n        temp = temp.replace(')', '')\n        temp = temp.replace('|', '')\n        temp = temp.replace('&', '')\n        print(temp)\n",
        "num_ids": 63
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace('(','').replace(')','')\n    return items\n",
        "num_ids": 24
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = re.sub(\"[\\(\\)]\", \"\", items)\n    return result\n",
        "num_ids": 23
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    string = ''.join(items)\n    string = string.replace('(','')\n    string = string.replace(')','')\n    string = string.replace('{','')\n    string = string.replace('}','')\n    string = string.replace('[','')\n    string = string.replace(']','')\n    return string\n",
        "num_ids": 88
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace('(','').replace(')','').replace('(',' ').replace(')',' ').replace(',','').strip()\n    return items\n",
        "num_ids": 44
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = r'\\((.*?)\\)'\n    result = []\n    for item in items:\n        match = re.findall(regex, item)\n        if match:\n            for i in match:\n                item = item.replace(i, '')\n        result.append(item)\n    return result\n",
        "num_ids": 77
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i * ((i + 1) ** 2)\n    return s\n",
        "num_ids": 38
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    t = 1\n    s = 1\n    i = 0\n    while i < n:\n        t = s\n        s += 2 * t\n        i += 1\n    return s\n",
        "num_ids": 45
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n*(n+1)/2)\n",
        "num_ids": 16
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n==0):\n        return 0\n    return n*(n+1)\n",
        "num_ids": 24
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)//2\n",
        "num_ids": 14
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*n + n) / 2\n",
        "num_ids": 14
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n_squared = n*(n+1)\n    if n % 2 == 0:\n        n_squared -= 1\n    else:\n        n_squared += 1\n    return n_squared\n",
        "num_ids": 52
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    #n=int(input(\"Enter the number of the nonagonal number : \"))\n    \n    num=1\n    for i in range(1,n+1):\n        #print(num)\n        num=i*(i+1)\n    return num\ndef is_diagonal(n):\n    '''\n    Write a function to find the nth diagonal number.\n    '''\n    num=n\n    for i in range(1,n+1):\n        #print(num)\n        num=i*(n-i)\n    return num\n",
        "num_ids": 42
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = int(n)\n    return n*(n+1)/2\n",
        "num_ids": 21
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Your code here\n    return 0\n    \ndef test_is_nonagonal():\n    print('Test #1:')\n    print('Expected: 2')\n    print('Actual:   ',is_nonagonal(2))\n    print('Expected: 5')\n    print('Actual:   ',is_nonagonal(5))\n    print('Expected: 9')\n    print('Actual:   ',is_nonagonal(9))\n    print('Expected: 15')\n    print('Actual:   ',is_nonagonal(15))\n    print('Expected: 42')\n    print('Actual:   ',is_nonagonal(42))\n    \ntest_is_nonagonal()\nprint()\n",
        "num_ids": 170
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    test_list = re.findall(r'z+',text)\n    if test_list == []:\n        return False\n    else:\n        return True\n",
        "num_ids": 41
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.startswith('z') and text.endswith('z'):\n        return 'Found two z\\'s!'\n    elif text.startswith('z') and not text.endswith('z'):\n        return 'Found one z\\'!'\n    elif text.endswith('z') and not text.startswith('z'):\n        return 'Found one z\\'!'\n    else:\n        return 'No z\\'s were found'\n",
        "num_ids": 112
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) == 0:\n        return False\n    #Check the first and last character to see if they are letters\n    if len(text) == 1:\n        return False\n    #check first letter\n    if text[0] == 'z':\n        return False\n    #check last letter\n    if text[-1] == 'z':\n        return False\n    #Check if letter is not the start or end of the word\n    if text[0]!= 'z' and text[-1]!= 'z':\n        return True\n    return False\n",
        "num_ids": 134
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if re.match(r'[^z]+z[^z]', text):\n        print('Yes')\n    else:\n        print('No')\n",
        "num_ids": 47
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    text = text.lower()\n    \n    # if re.search(r'[a-z]z', text):\n    #     return True\n    \n    if text[0] == 'z':\n        text = text[1:]\n    if text[-1] == 'z':\n        text = text[:-1]\n    \n    if text.find('z') == -1:\n        return False\n    else:\n        return True\n",
        "num_ids": 108
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'z.{1,}z', text)!= None\n",
        "num_ids": 23
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0:2] == 'z.' or text[0:2] == 'z,':\n        return False\n    elif text[0:3] == 'z-':\n        return False\n    elif text[-1:] == 'z.' or text[-1:] == 'z,':\n        return False\n    elif text[-2:] == 'z-' or text[-2:] == 'z.':\n        return False\n    elif text[0:2] == 'z-' or text[0:2] == 'z.':\n        return False\n    elif text[-1:] == 'z-' or text[-1:] == 'z.':\n        return False\n    elif text[0:3] == 'z-.' or text[0:3] == 'z-,':\n        return False\n    else:\n        return True\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0:2] == 'z.' or text[0:2] == 'z,':\n        return False\n    elif text[0:3] == 'z-':\n        return False\n    elif text[-1:] == 'z.' or text[-1:] == 'z,':\n        return False\n    elif text[-2:] == 'z-' or text[-2:] == 'z.':\n        return False\n    elif text[0:2] == 'z-' or text[0:2] == 'z.':\n        return False\n    elif text[-1:] == 'z-' or text[-1:] == 'z.':\n        return False\n    elif text[0:3] == 'z-.' or text[0:3] == 'z-,':\n        return False\n    else:\n        return True\n",
        "num_ids": 204
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z.*z', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z.*z', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z.*?z', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'^z.*z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z.*?z', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z.*?z', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z.*?z', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'^z.*?z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'^z.*?z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'^z.*z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = \"Hello zz zz\"\n    match = re.findall(r'z$', text)\n    print(match)\n    '''\n    '''\n    text = ",
        "num_ids": 6
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # if re.search(r'[^A-Za-z]z[A-Za-z]', text):\n    #     return False\n    # if re.search(r'z[A-Za-z]', text):\n    #     return False\n    # if re.search(r'[A-Za-z]z$', text):\n    #     return False\n    # if re.search(r'^[A-Za-z]z', text):\n    #     return False\n    if re.search(r'[A-Za-z]z[A-Za-z]', text):\n        return True\n    elif re.search(r'z[A-Za-z]', text):\n        return True\n    elif re.search(r'[A-Za-z]z$', text):\n        return True\n    elif re.search(r'^[A-Za-z]z', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 246
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #SOLUTION 1\n    # return 'z' in text and not text.startswith('z') and not text.endswith('z')\n    # SOLUTION 2\n    return bool(re.search(r'(?<![\\w\\d]z)(?<!z[\\w\\d])(z)(?![\\w\\d])', text))\n    # SOLUTION 3\n    # return re.search(r'(?<![\\w\\d]z)(?<!z[\\w\\d])(z)(?![\\w\\d])', text) is not None\n    # SOLUTION 4\n    # return text.find('z') == 0 or text.find('z') == len(text) -1\n    # SOLUTION 5\n    # return text.startswith('z') or text.endswith('z')\n    # SOLUTION 6\n    # return 'z' in text\n",
        "num_ids": 218
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) <= 1:\n        return input\n    result = input[:k]\n    result.extend(reversed(input[k:]))\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverse_Upto_K(input, k):\n        start = 0\n        end = k - 1\n        while start < end:\n            input[start], input[end] = input[end], input[start]\n            start += 1\n            end -= 1\n    \n    if not isinstance(input, list):\n        return 'Input should be a list'\n    \n    if not isinstance(k, int) or k < 0 or k > len(input):\n        return 'Invalid input'\n    \n    reverse_Upto_K(input, k)\n    return input\n    \n    \n    \nprint(reverse_Array_Upto_K([1,2,3,4,5,6,7], 4))\nprint(reverse_Array_Upto_K([1,2,3,4,5,6,7], 3))\nprint(reverse_Array_Upto_K([1,2,3,4,5,6,7], 1))\nprint(reverse_Array_Upto_K([1,2,3,4,5,6,7], 8))\nprint(reverse_Array_Upto_K(['a','b','c'], 2))\nprint(reverse_Array_Upto_K([], 2))\n",
        "num_ids": 300
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    if(k > length):\n        return input\n    return input[:k][::-1] + input[k:]\n",
        "num_ids": 39
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input\n",
        "num_ids": 7
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = list(input)\n    for i in range(k):\n        input.append(input.pop(0))\n    return input\n",
        "num_ids": 35
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_list = list(input)\n    k = len(input_list)-k\n    input_list = input_list[:k]\n    input_list.reverse()\n    input_list.extend(input_list[:k])\n    input_list.reverse()\n    return input_list\n",
        "num_ids": 74
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # revese an array of length n by recursively reversing an array of length n-1\n    def reverse(a, low, high):\n        if (low < high):\n            a[low], a[high] = a[high], a[low]\n            reverse(a, low+1, high-1)\n        return a\n    \n    # revese an array of length n by looping from 0 to n-1\n    def reverse_loop(a, n):\n        start = 0\n        end = n-1\n        while(start < end):\n            a[start], a[end] = a[end], a[start]\n            start += 1\n            end -= 1\n        return a\n    \n    # reverse the array given an index k\n    def reverse_upto_k(a, k):\n        # a[:k] first k elements\n        # a[k:] last n-k elements\n        return reverse(a, 0, k-1) + reverse(a, k, n-1)\n    \n    if k > len(input):\n        print('Invalid')\n    else:\n        # initialise the array\n        a = [0] * len(input)\n        # initialise the array\n        for i in range(0, len(input)):\n            a[i] = input[i]\n        # return the reversed array\n        return reverse_loop(a, len(input))\n        # return the reversed array upto k\n        return reverse_upto_k(a, k)\n    \n",
        "num_ids": 360
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input)\n    if (l == 1):\n        return input\n    else:\n        if(k<l):\n            input[0:k] = reversed(input[0:k])\n            return input\n        else:\n            return input\n            \n",
        "num_ids": 65
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #code here\n",
        "num_ids": 7
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    print(\"Input array is: \", input)\n    reversed_array = []\n    for i in range(k+1, len(input)+1):\n        reversed_array.append(input[i - 1])\n    reversed_array.extend(input[k:])\n    print(\"Reversed array upto {} is: {}\".format(k, reversed_array))\n",
        "num_ids": 94
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict,)\n    return test_tup\n",
        "num_ids": 21
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)):\n        result_tup += (test_tup[i], test_dict.get(i, None))\n    return result_tup\n",
        "num_ids": 57
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict.update(test_tup)\n    return tuple(test_dict.values())\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tuple_as_list = list(test_tup)\n    tuple_as_list.append(test_dict)\n    return tuple(tuple_as_list)\n",
        "num_ids": 45
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict, )\n    return test_tup\n",
        "num_ids": 22
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        return\n",
        "num_ids": 19
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict,)\n    print(test_tup)\n    \nadd_dict_to_tuple(('a', 'b', 'c', 'd'), {'a': 'apple', 'b': 'banana', 'c': 'carrot', 'd': 'durian'})\n",
        "num_ids": 77
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_path_len = 0\n    for i in range(n):\n        for j in range(n):\n            if j+1<n:\n                cost[i][j] += min(cost[i][j+1], cost[i+1][j])\n            if i+1<n:\n                cost[i][j] += min(cost[i+1][j], cost[i][j])\n            max_path_len = max(max_path_len, cost[i][j])\n    return max_path_len/(n*n)\n",
        "num_ids": 142
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for i in range(N)] for j in range(N)]\n    dp[0][0] = cost[0][0]\n",
        "num_ids": 45
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_value = -1\n    max_avg = 0\n    paths = []\n    rows = len(cost)\n    columns = len(cost[0])\n    for i in range(rows):\n        for j in range(columns):\n            current_cell = cost[i][j]\n            if current_cell == 0 or i == 0 or j == 0:\n                continue\n            if i > 0:\n                left_cell = cost[i-1][j]\n                if left_cell!= 0:\n                    paths.append(left_cell + current_cell)\n            if j > 0:\n                up_cell = cost[i][j-1]\n                if up_cell!= 0:\n                    paths.append(up_cell + current_cell)\n            if i > 0 and j > 0:\n                left_up_cell = cost[i-1][j-1]\n                if left_up_cell!= 0:\n                    paths.append(left_up_cell + current_cell)\n",
        "num_ids": 244
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Please write your code here\n",
        "num_ids": 10
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 1 and len(cost[0]) == 1:\n        return cost[0][0]\n    n = len(cost)\n    m = len(cost[0])\n    dp = [[None]*m for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1,m):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    for i in range(1,n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1,n):\n        for j in range(1,m):\n            dp[i][j] = max(dp[i-1][j] + cost[i][j], dp[i][j-1] + cost[i][j])\n    return max(dp[n-1][m-1], dp[n-1][m-2])/2\n",
        "num_ids": 243
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def recursion(i,j):\n        # base case\n        if i == n-1 and j == n-1:\n            return matrix[i][j]\n        # base case\n        elif i == n-1 and j < n-1:\n            return matrix[i][j] + recursion(i,j+1)\n        elif i < n-1 and j == n-1:\n            return matrix[i][j] + recursion(i+1,j)\n        else:\n            return matrix[i][j] + max(recursion(i+1,j), recursion(i,j+1))\n    if not cost:\n        return 0\n    n = len(cost)\n    matrix = []\n    for i in range(n):\n        matrix.append([0]*n)\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = cost[i][j]\n    return max(recursion(0,0), recursion(0,1))\n",
        "num_ids": 248
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Write your code here\n    # grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n    # # grid = [[0, 3, 4], [3, 2, 1], [0, 4, 0]]\n    # n = 3\n    # k = 3\n    # # [[0, 3, 4], [3, 2, 1], [0, 4, 0]]\n",
        "num_ids": 99
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if n == 0:\n        return 0\n    if n == 1:\n        return min(cost[0])\n    dp = [[0] * n for _ in range(n)]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n",
        "num_ids": 101
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost[0])\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = cost[i][j]\n    maxSum = -1\n    for i in range(n):\n        for j in range(n):\n            if i+1 < n:\n                dp[i+1][j] += dp[i][j]\n                maxSum = max(maxSum, dp[i+1][j])\n            if j+1 < n:\n                dp[i][j+1] += dp[i][j]\n                maxSum = max(maxSum, dp[i][j+1])\n    return maxSum\n",
        "num_ids": 187
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def solve(cost, m, n):\n        # print(cost, m, n)\n        res = [[0 for i in range(n)] for j in range(m)]\n",
        "num_ids": 44
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    print(students)\n    #check for minimal height\n    filtered_students = {}\n    for key in students:\n        height = students[key][0]\n        weight = students[key][1]\n        if height >= h and weight >= w:\n            filtered_students[key] = (height,weight)\n    print(filtered_students)\n    return filtered_students\n",
        "num_ids": 96
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filter_list=[]\n    for student in students:\n        if students[student][0]<=h and students[student][1]<=w:\n            filter_list.append(student)\n    return filter_list\n    ",
        "num_ids": 58
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = {}\n    for name in students.keys():\n        if students[name][0] > h and students[name][1] > w:\n            filtered[name] = students[name]\n    return filtered\n",
        "num_ids": 54
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_students={}\n    for name in students:\n        if (students[name][0]>=h and students[name][1]>=w):\n            filter_students[name]=students[name]\n    return filter_students\n",
        "num_ids": 63
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0]>=h and v[1]>=w}\n",
        "num_ids": 35
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    list_of_names = students.keys()\n    list_of_heights = [i[0] for i in students.values()]\n    list_of_weights = [i[1] for i in students.values()]\n    \n    \n    final_list = []\n    for i in range(len(list_of_names)):\n        if list_of_heights[i]>=h and list_of_weights[i]>=w:\n            final_list.append(list_of_names[i])\n    return final_list\n    \n",
        "num_ids": 138
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        if students[student] > h and students[student] < w:\n            print(\"Student : {} | height : {} | weight : {}\".format(student,students[student][0],students[student][1]))\n",
        "num_ids": 61
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {student:student_data for student,student_data in students.items() if student_data[0]>h and student_data[1]>w}\n",
        "num_ids": 41
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for i in students.keys():\n        if h <= students[i][0] and w <= students[i][1]:\n            new_students[i] = students[i]\n    return new_students\n",
        "num_ids": 60
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if len(students) == 0:\n        return \"Dictionary is empty.\"\n    else:\n        for x in students.keys():\n            if students[x][0]<=h and students[x][1]<=w:\n                print(x,students[x])\n    return students\n",
        "num_ids": 73
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    indices = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            indices.append(i)\n    return indices\n    \ndef count_same_pair_1(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    indices = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            indices.append(i)\n    return len(indices)\n",
        "num_ids": 55
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_count += 1\n    return same_count\n",
        "num_ids": 52
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1) == 0:\n        return 0\n    else:\n        #initialize a dictionary with value 0\n        d = dict.fromkeys(nums1, 0)\n        #loop through the list\n        for i in nums1:\n            if d[i] == 0:\n                d[i] += 1\n                #if the value is already in the dict, then just increment it.\n                for j in nums2:\n                    if eq(i, j):\n                        d[i] += 1\n        return sum(d.values())\n",
        "num_ids": 133
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # start with base\n    \n    # multiply by base\n    \n    # add together\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        sum = sum + int(base ** power)\n        power -= 1\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(0, power + 1):\n        result += base ** i\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        base_sum += base\n        power -= 1\n    return base_sum\n",
        "num_ids": 34
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in str(base**power):\n        total += int(i)\n    return total\n",
        "num_ids": 30
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(1, power+1):\n        sum += base ** i\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in str(base**power):\n        sum += int(i)\n    return sum\n",
        "num_ids": 30
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        total += base\n        power -= 1\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base)\n    if power <= 0:\n        raise ValueError('The power must be positive integer')\n    elif type(base)!= str:\n        raise ValueError('The base must be a positive integer')\n    elif int(base) <= 0:\n        raise ValueError('The base must be a positive integer')\n    else:\n        power = int(power)\n    sum_of_digits = 0\n    for i in base:\n        sum_of_digits += int(i) ** power\n    return sum_of_digits\n",
        "num_ids": 133
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        result += base**i\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text=text1.replace('\"','')\n    return re.findall(r'\"[^\"]*\"',text)\n    \ndef file_append(nums):\n    '''\n    Write a function to append a list of items into a file.\n    '''\n    with open('employee.txt','a') as f:\n        for i in nums:\n            f.write(str(i)+'\\n')\n        print('appended...')\n        \ndef file_read(nums):\n    '''\n    Write a function to read from a file and print its content.\n    '''\n    with open('employee.txt','r') as f:\n        for i in f:\n            print(i,end='')\n    \ndef file_create(nums):\n    '''\n    Write a function to create a file and write a list of items into it.\n    '''\n    with open('employee.txt','w') as f:\n        for i in nums:\n            f.write(str(i)+'\\n')\n        print('created...')\n        \ndef file_copy(nums):\n    '''\n    Write a function to copy a file contents into another file.\n    '''\n    with open('employee.txt','r') as f1,open('employee_copy.txt','w') as f2:\n        for i in f1:\n            f2.write(i)\n        print('copied...')\n",
        "num_ids": 58
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    print(\"\\n************* Question 1 **************\")\n    text = text1\n    # Write a pattern to match a complete sentence and extract the sentence.\n    pattern = re.compile(r'\"(.*)\"')\n    results = pattern.findall(text)\n    #print(results)\n    # Write a pattern to match any quotation marks \" \".\n    pattern1 = re.compile(r'\"(.*?)\"')\n    results1 = pattern1.findall(text)\n    #print(results1)\n    print(\"\\n************* Question 1 **************\")\n    # Write a pattern to match any quotation marks \" \" and any character until the next quotation mark.\n    pattern2 = re.compile(r'\"(.*?)\"(.*)')\n    results2 = pattern2.findall(text)\n    print(results2)\n    print(\"\\n************* Question 1 **************\")\n    # Write a pattern to match any quotation marks \" \" and any character until the next quotation mark.\n    pattern3 = re.compile(r'\"(.*?)\"')\n    results3 = pattern3.findall(text)\n    #print(results3)\n    return results\n",
        "num_ids": 275
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\\\"(.*?)\\\"', text1)\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = re.compile(r\"\\\"(.*)\\\"\")\n    matches = regex.findall(text1)\n    return matches\n",
        "num_ids": 37
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        pattern = '\\\"([^\"]+)\\\"'\n        text1 = re.findall(pattern, text1)\n        return text1\n    except:\n        return \"Please enter a valid string\"\n",
        "num_ids": 52
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    '''\n    Output=[\"The quick brown fox jumps over the lazy dog\"]\n    '''\n    regex = re.compile(r'\"(.*?)\"')\n    result = regex.findall(text1)\n    print(result)\n",
        "num_ids": 37
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # r'\\\"[^\\\"]*\\\"'\n    pattern = re.compile(r'\\\"[^\\\"]*\\\"')\n    match = pattern.search(text1)\n    print(match)\n    return match.group()\n",
        "num_ids": 58
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    a = re.findall(\"\\\".+?\\\"\",text1)\n    print(\"Given string is {}\".format(a))\n    return\n",
        "num_ids": 36
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #code here\n",
        "num_ids": 7
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\".+?\"', text1)\n",
        "num_ids": 17
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i*j for i,j in zip(test_tup,test_tup[1:]))\n",
        "num_ids": 30
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Solve the problem using a loop and an if statement\n    # Time O(n) | Space O(n)\n    tup = test_tup[0]\n    for i in range(len(test_tup)-1):\n        tup *= test_tup[i+1]\n    return tup\n",
        "num_ids": 78
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_list = []\n    for i in range(len(test_tup) - 1):\n        result_list.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_list)\n",
        "num_ids": 60
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return_tup = ()\n    for i in range(0, len(test_tup) - 1):\n        return_tup = return_tup + (test_tup[i] * test_tup[i + 1],)\n",
        "num_ids": 60
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tuple_len = len(test_tup)\n    new_tuple = tuple([test_tup[i] * test_tup[i + 1] for i in range(0, tuple_len - 1)])\n    new_tuple = new_tuple + test_tup[-1]\n    return new_tuple\n",
        "num_ids": 83
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            new_tuple = new_tuple + (test_tup[i],)\n        else:\n            new_tuple = new_tuple + (test_tup[i]*test_tup[i+1],)\n    return new_tuple\n",
        "num_ids": 102
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tuple_to_return = ()\n    for i in range(len(test_tup)-1):\n        tuple_to_return += (test_tup[i] * test_tup[i+1],)\n    return tuple_to_return\n",
        "num_ids": 64
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    print(\"-\"*40)\n    print(\"Problem #7\")\n    print(\"-\"*40)\n    \n
        "num_ids": 1976
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup) - 1):\n        result += ((test_tup[i], test_tup[i + 1]),)\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t_i * t_{i+1} for t_i, t_{i+1} in zip(test_tup, test_tup[1:]))\n",
        "num_ids": 44
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(x) for x in zip(lst1,lst2)]\n",
        "num_ids": 23
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(0,len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new = []\n    for i in range(len(lst1)):\n        new.append(lst1[i] + lst2[i])\n    return new\n",
        "num_ids": 44
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum([lst1[i]+lst2[i] for i in range(len(lst1))])\n",
        "num_ids": 31
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3=[]\n    for i in range(len(lst1)):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n",
        "num_ids": 49
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]\n",
        "num_ids": 31
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3=[]\n    for i in range(len(lst1)):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n",
        "num_ids": 49
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #your code here\n    #sum_list([1,2,3],[4,5,6])\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n",
        "num_ids": 55
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        return None\n    else:\n        return [x+y for x,y in zip(lst1,lst2)]\n",
        "num_ids": 48
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1) == len(lst2):\n        return [sum(x) for x in zip(lst1,lst2)]\n    elif len(lst1) < len(lst2):\n        return [sum(x) for x in zip(lst1,lst2[0:len(lst1)])]\n    elif len(lst2) < len(lst1):\n        return [sum(x) for x in zip(lst1[0:len(lst2)],lst2)]\n",
        "num_ids": 134
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    return [key for key, group in groupby(nums)]\n",
        "num_ids": 20
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return []\n    new_list = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i]!= nums[i - 1]:\n            new_list.append(nums[i])\n    return new_list\n",
        "num_ids": 80
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    dups = list(groupby(nums))\n    # print(dups)\n    # nums.clear()\n    # for group in dups:\n    #     if len(group[1]) > 1:\n    #         nums.append(group[0])\n    #     else:\n    #         pass\n    for group in dups:\n        nums.append(group[0])\n    # print(nums)\n    # print(len(nums))\n    return len(nums)\n    # return nums\n",
        "num_ids": 129
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    count = 0\n    for i in nums:\n        if count == 0:\n            result = i\n            count += 1\n        else:\n            if result == i:\n                count += 1\n            else:\n                count = 1\n                result = i\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # new_nums = []\n    # for i, j in groupby(nums):\n    #     new_nums.append(i)\n    # return new_nums\n    return list(filter(lambda x:len(list(x[1])) > 0, groupby(nums)))\n",
        "num_ids": 74
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    l = []\n    for key,group in groupby(nums):\n        l.append(key)\n    return l\n",
        "num_ids": 32
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n",
        "num_ids": 18
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [item for item, group in groupby(nums)]\n    \ndef consecutive_duplicates1(nums):\n    nums = set(nums)\n    return [num for num in nums]\n    \n    \n    \n    \ndef consecutive_duplicates2(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return set(nums)\n    \n    \n    \ndef consecutive_duplicates3(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))\n    \n    \ndef consecutive_duplicates4(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))\n    \n    \n    \n    \n    \n    \ndef consecutive_duplicates5(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums[:] = [x for x in nums if x in nums[:i]]\n    return nums\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1758
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, _ in groupby(nums)]\n",
        "num_ids": 18
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums]\n    nums_in_list = list(map(list, nums))\n    nums_in_list = [[*group] for _, group in groupby(nums_in_list, key = lambda x: x[0])]\n    print(nums_in_list)\n    return nums_in_list\n",
        "num_ids": 107
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pass\ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given radius r.\n    '''\n    pass\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    pass\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    pass\ndef volume_cone_recursive(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    pass\ndef volume_cylinder_recursive(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    pass\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube given side s.\n    '''\n    pass\ndef volume_cube_recursive(s):\n    '''\n    Write a function to find the volume of a cube given side s.\n    '''\n    pass\ndef main():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_2():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_3():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_4():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_5():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_6():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_7():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_8():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_9():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_10():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_11():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_12():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_13():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_14():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_15():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_16():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_17():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_18():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_19():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_20():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_21():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_22():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_23():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_24():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_25():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_26():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_27():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_28():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_29():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_30():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_31():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_32():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_33():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_34():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_35():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_36():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_37():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_38():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_39():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_40():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_41():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_42():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_43():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_44():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_45():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_46():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_47():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_48():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\ndef main_49():\n    '''\n    Write a function to find the area of a triangle given the base and height.\n    '''\n    pass\nde",
        "num_ids": 6
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2) * (h/3)\n",
        "num_ids": 20
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r + math.pi*r*r*h\n    #return (math.pi*r*r+math.pi*r*r*h)/2\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return 2*math.pi*r*h + 2*math.pi*r*r\n    #return (2*math.pi*r*h+2*math.pi*r*r)/2\n    \ndef lateralsurface_circular_cone(r):\n    '''\n    Write a function to find the lateral surface area of a circular cone given radius r.\n    '''\n    return math.pi*r*r + math.pi*r*r\n    #return (math.pi*r*r+math.pi*r*r)/2\n    \ndef lateralsurface_rectangular_prism(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism given its length, width and height.\n    '''\n    return 2*l*w+2*l*h+2*w*h\n    #return (2*l*w+2*l*h+2*w*h)/2\n    \ndef lateralsurface_rectangular_pyramid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular pyramid given its length, width and height.\n    '''\n    return l*w+l*h+w*h\n    #return (l*w+l*h+w*h)/2\n",
        "num_ids": 34
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r>= 0 and h>=0:\n        return 1/3*math.pi*r**2*h\n    else:\n        return None\n",
        "num_ids": 39
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.14*r*r + 3.14*r*h\ndef lateralsurface_pyramid(a,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given base a and the height h.\n    '''\n    return (a*a)*h/3\ndef lateral_surface(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone, pyramid or rectangle given radius r and the height h.\n    '''\n    if type(r) == float or type(r) == int:\n        if r <= 0:\n            return 'invalid'\n        elif r == 0:\n            return 3.14*h\n        elif h <= 0:\n            return 'invalid'\n        else:\n            return lateralsurface_cone(r,h)\n    elif type(r) == list:\n        if any(x <= 0 for x in r):\n            return 'invalid'\n        elif len(r) > 2:\n            return 'invalid'\n        elif len(r) == 2:\n            if r[0] == 0:\n                return 3.14*r[1]\n            elif r[1] == 0:\n                return 3.14*r[0]\n            else:\n                return lateralsurface_cone(r[0],r[1])\n        else:\n            if r[0] == 0:\n                return 3.14*h\n            elif h <= 0:\n                return 'invalid'\n            else:\n                return lateralsurface_cone(r[0],h)\n    else:\n        return 'invalid'\ndef lateral_surface_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone, pyramid or rectangle given radius r and the height h.\n    '''\n    if type(r) == float or type(r) == int:\n        if r <= 0:\n            return 'invalid'\n        elif r == 0:\n            return 3.14*h\n        elif h <= 0:\n            return 'invalid'\n        else:\n            return lateralsurface_cone(r,h)\n    elif type(r) == list:\n        if any(x <= 0 for x in r):\n            return 'invalid'\n        elif len(r) > 2:\n            return 'invalid'\n        elif len(r) == 2:\n            if r[0] == 0:\n                return 3.14*r[1]\n            elif r[1] == 0:\n                return 3.14*r[0]\n            else:\n                return lateralsurface_cone(r[0],r[1])\n        else:\n            if r[0] == 0:\n                return 3.14*h\n            elif h <= 0:\n                return 'invalid'\n            else:\n                return lateralsurface_cone(r[0],h)\n    else:\n        return 'invalid'\ndef area_of_trapezium(a,b,h):\n    '''\n    Write a function to find the area of a trapezium given the base a, the base b and the height h.\n    '''\n    if type(a) == float or type(a) == int:\n        if a <= 0:\n            return 'invalid'\n        elif b <= 0:\n            return 'invalid'\n        elif h <= 0:\n            return 'invalid'\n        else:\n            return ((a + b)*h)/2\n    elif type(a) == list:\n        if any(x <= 0 for x in a):\n            return 'invalid'\n        elif len(a) > 2:\n            return 'invalid'\n        elif len(a) == 2:\n            if a[0] == 0:\n                return 3.14*a[1]\n            elif a[1] == 0:\n                return 3.14*a[0]\n            else:\n                return area_of_trapezium(a[0],a[1],h)\n        else:\n            if a[0] == 0:\n                return 3.14*h\n            elif h <= 0:\n                return 'invalid'\n            else:\n                return area_of_trapezium(a[0],h,b)\n    else:\n        return 'invalid'\ndef area_of_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram given the base a and the base b.\n    '''\n    if type(a) == float or type(a) == int:\n        if a <= 0:\n            return 'invalid'\n        elif b <= 0:\n            return 'invalid'\n        else:\n            return a*b\n    elif type(a) == list:\n        if any(x <= 0 for x in a):\n            return 'invalid'\n        elif len(a) > 2:\n            return 'invalid'\n        elif len(a) == 2:\n            if a[0] == 0:\n                return 3.14*a[1]\n            elif a[1] == 0:\n                return 3.14*a[0]\n            else:\n                return area_of_parallelogram(a[0],a[1])\n        else:\n            if a[0] == 0:\n                return 3.14*b\n            elif b <= 0:\n                return 'invalid'\n            else:\n                return area_of_parallelogram(a[0],b)\n    else:\n        return 'invalid'\ndef area_of_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle given the base a and the base b.\n    '''\n    if type(a) == float or type(a) == int:\n        if a <= 0:\n            return 'invalid'\n        elif b <= 0:\n            return 'invalid'\n        else:\n            return a*b\n    elif type(a) == list:\n        if any(x <= 0 for x in a):\n            return 'invalid'\n        elif len(a) > 2:\n            return 'invalid'\n        elif len(a) == 2:\n            if a[0] == 0:\n                return 3.14*a[1]\n            elif a[1] == 0:\n                return 3.14*a[0]\n            else:\n                return area_of_rectangle(a[0],a[1])\n        else:\n            if a[0] == 0:\n                return 3.14*b\n            elif b <= 0:\n                return 'invalid'\n            else:\n                return area_of_rectangle(a[0],b)\n    else:\n        return 'invalid'\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle given the side a, side b and side c.\n    '''\n    if type(a) == float or type(a) == int:\n        if a <= 0:\n            return 'invalid'\n        elif b <= 0:\n            return 'invalid'\n        elif c <= 0:\n            return 'invalid'\n        else:\n            return (a*b*c)/2\n    elif type(a) == list:\n        if any(x <= 0 for x in a):\n            return 'invalid'\n        elif len(a) > 3:\n            return 'invalid'\n        elif len(a) == 3:\n            if a[0] == 0:\n                return area_of_triangle(a[1],a[2],c)\n            elif a[1] == 0:\n                return area_of_triangle(a[0],a[2],c)\n            elif a[2] == 0:\n                return area_of_triangle(a[0],a[1],c)\n            else:\n                return area_of_triangle(a[0],a[1],a[2])\n        else:\n            if a[0] == 0:\n                return area_of_triangle(a[1],c,b)\n            elif a[1] == 0:\n                return area_of_triangle(a[0],c,b)\n            elif a[2] == 0:\n                return area_of_triangl",
        "num_ids": 337
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=3.14*r*r\n    b=3.14*r*h\n    return a+b\ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given radius r.\n    '''\n    a=3.14*r*r\n    return a\ndef lateralvolume_cone(r,h):\n    '''\n    Write a function to find the lateral volume of a cone given radius r and the height h.\n    '''\n    a=3.14*r*r\n    b=3.14*r*h\n    c=a*h\n    return c\ndef lateralvolume_circle(r):\n    '''\n    Write a function to find the lateral volume of a circle given radius r.\n    '''\n    a=3.14*r*r\n    c=a*3.14*r\n    return c\ndef lateral_surface_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=3.14*r*r\n    b=3.14*r*h\n    c=a+b\n    return c\ndef lateral_surface_area_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given radius r.\n    '''\n    a=3.14*r*r\n    c=a*2\n    return c\ndef lateral_volume_cone(r,h):\n    '''\n    Write a function to find the lateral volume of a cone given radius r and the height h.\n    '''\n    a=3.14*r*r\n    b=3.14*r*h\n    c=a*b\n    return c\ndef lateral_volume_circle(r):\n    '''\n    Write a function to find the lateral volume of a circle given radius r.\n    '''\n    a=3.14*r*r\n    c=a*3.14*r\n    return c\ndef lateral_surface_area_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the base a1, base a2 and the height h.\n    '''\n    a=b1+b2\n    b=(b1+b2)*h/2\n    return a+b\ndef lateral_surface_area_rectangle(b1,b2):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the base a1, base a2.\n    '''\n    a=b1+b2\n    b=b1*b2\n    return a+b\ndef lateral_surface_area_triangle(a1,a2,a3):\n    '''\n    Write a function to find the lateral surface area of a triangle given the side a1, side a2 and side a3.\n    '''\n    a=a1+a2+a3\n    b=(a1+a2)*a3/2\n    return a+b\ndef lateral_volume_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the lateral volume of a trapezoid given the base a1, base a2 and the height h.\n    '''\n    a=b1+b2\n    b=(a1+a2)*h/2\n    return a*b\ndef lateral_volume_rectangle(b1,b2):\n    '''\n    Write a function to find the lateral volume of a rectangle given the base a1, base a2.\n    '''\n    a=b1+b2\n    b=b1*b2\n    return a*b\ndef lateral_volume_triangle(a1,a2,a3):\n    '''\n    Write a function to find the lateral volume of a triangle given the side a1, side a2 and side a3.\n    '''\n    a=a1+a2+a3\n    b=a1*a2/2\n    c=a*a3/2\n    return a*b*c\ndef lateral_surface_area_cube(a):\n    '''\n    Write a function to find the lateral surface area of a cube given the side length a.\n    '''\n    b=6*a\n    return b\ndef lateral_volume_cube(a):\n    '''\n    Write a function to find the lateral volume of a cube given the side length a.\n    '''\n    b=6*a**2\n    return b\ndef lateral_surface_area_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r.\n    '''\n    a=4*3.14*r**2\n    return a\ndef lateral_volume_sphere(r):\n    '''\n    Write a function to find the lateral volume of a sphere given the radius r.\n    '''\n    a=4*3.14*r**3\n    return a\ndef lateral_surface_area_cube(a):\n    '''\n    Write a function to find the lateral surface area of a cube given the side length a.\n    '''\n    b=6*a**2\n    return b\ndef lateral_volume_cube(a):\n    '''\n    Write a function to find the lateral volume of a cube given the side length a.\n    '''\n    b=6*a**3\n    return b\ndef lateral_surface_area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius r and the height h.\n    '''\n    a=2*3.14*r*(r+h)\n    return a\ndef lateral_volume_cylinder(r,h):\n    '''\n    Write a function to find the lateral volume of a cylinder given the radius r and the height h.\n    '''\n    a=3.14*r**2*h\n    return a\ndef lateral_surface_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    a=3.14*r*(r+h)\n    return a\ndef lateral_volume_cone(r,h):\n    '''\n    Write a function to find the lateral volume of a cone given the radius r and the height h.\n    '''\n    a=3.14*r**2*h/3\n    return a\ndef lateral_surface_area_hemisphere(r):\n    '''\n    Write a function to find the lateral surface area of a hemisphere given the radius r.\n    '''\n    a=2*3.14*r**2\n    return a\ndef lateral_volume_hemisphere(r):\n    '''\n    Write a function to find the lateral volume of a hemisphere given the radius r.\n    '''\n    a=3.14*r**3/3\n    return a\ndef lateral_surface_area_kite(a1,a2,a3,a4):\n    '''\n    Write a function to find the lateral surface area of a kite given the side a1, side a2, side a3 and side a4.\n    '''\n    b=3*a1*(a1+a2+a3+a4)\n    return b\ndef lateral_volume_kite(a1,a2,a3,a4):\n    '''\n    Write a function to find the lateral volume of a kite given the side a1, side a2, side a3 and side a4.\n    '''\n    b=3*a1*(a1+a2+a3+a4)**2/6\n    return b\ndef lateral_surface_area_parallelogram(a,b):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given the side a and the base b.\n    '''\n    a=a*b\n    return a\ndef lateral_volume_parallelogram(a,b):\n    '''\n    Write a function to find the lateral volume of a parallelogram given the side a and the base b.\n    '''\n    a=a*b\n    b=a*4\n    return a+b\ndef lateral_surface_area_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the side a and th",
        "num_ids": 21
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def lateral_surface_area(r,h):\n        return math.pi*r*(r+math.sqrt(h**2+r**2))\n    return lateral_surface_area(r,h)\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder given the radius and the height.\n    '''\n    def volume(r,h):\n        return math.pi*r*r*h\n    return volume(r,h)\ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def lateral_surface_area(r,h):\n        return math.pi*r*(r+math.sqrt(h**2+r**2))\n    return lateral_surface_area(r,h)\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and the height.\n    '''\n    def area_cylinder(r,h):\n        return math.pi*r*r\n    return area_cylinder(r,h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and the height.\n    '''\n    def volume_cylinder(r,h):\n        return math.pi*r*r*h\n    return volume_cylinder(r,h)\ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def lateral_surface_area(r,h):\n        return math.pi*r*(r+math.sqrt(h**2+r**2))\n    return lateral_surface_area(r,h)\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and the height.\n    '''\n    def area_cylinder(r,h):\n        return math.pi*r*r\n    return area_cylinder(r,h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and the height.\n    '''\n    def volume_cylinder(r,h):\n        return math.pi*r*r*h\n    return volume_cylinder(r,h)\ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def lateral_surface_area(r,h):\n        return math.pi*r*(r+math.sqrt(h**2+r**2))\n    return lateral_surface_area(r,h)\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and the height.\n    '''\n    def area_cylinder(r,h):\n        return math.pi*r*r\n    return area_cylinder(r,h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and the height.\n    '''\n    def volume_cylinder(r,h):\n        return math.pi*r*r*h\n    return volume_cylinder(r,h)\ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def lateral_surface_area(r,h):\n        return math.pi*r*(r+math.sqrt(h**2+r**2))\n    return lateral_surface_area(r,h)\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and the height.\n    '''\n    def area_cylinder(r,h):\n        return math.pi*r*r\n    return area_cylinder(r,h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and the height.\n    '''\n    def volume_cylinder(r,h):\n        return math.pi*r*r*h\n    return volume_cylinder(r,h)\ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def lateral_surface_area(r,h):\n        return math.pi*r*(r+math.sqrt(h**2+r**2))\n    return lateral_surface_area(r,h)\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and the height.\n    '''\n    def area_cylinder(r,h):\n        return math.pi*r*r\n    return area_cylinder(r,h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and the height.\n    '''\n    def volume_cylinder(r,h):\n        return math.pi*r*r*h\n    return volume_cylinder(r,h)\ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def lateral_surface_area(r,h):\n        return math.pi*r*(r+math.sqrt(h**2+r**2))\n    return lateral_surface_area(r,h)\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and the height.\n    '''\n    def area_cylinder(r,h):\n        return math.pi*r*r\n    return area_cylinder(r,h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and the height.\n    '''\n    def volume_cylinder(r,h):\n        return math.pi*r*r*h\n    return volume_cylinder(r,h)\ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def lateral_surface_area(r,h):\n        return math.pi*r*(r+math.sqrt(h**2+r**2))\n    return lateral_surface_area(r,h)\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and the height.\n    '''\n    def area_cylinder(r,h):\n        return math.pi*r*r\n    return area_cylinder(r,h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and the height.\n    '''\n    def volume_cylinder(r,h):\n        return math.pi*r*r*h\n    return volume_cylinder(r,h)\ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def lateral_surface_area(r,h):\n        return math.pi*r*(r+math.sqrt(h**2+r**2))\n    return lateral_surface_area(r,h)\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and the height.\n    '''\n    def area_cylinder(r,h):\n        return math.pi*r*r\n    return area_cylinder(r,h)\ndef volume_cylinder(r,h):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def lateral_surface_area_cone(r,h):\n        if r ==0:\n            return math.pi*(r**2)\n        else:\n            return math.pi*(r**2)+(math.pi*r*h)\n    lateral_surface_area = lateral_surface_area_cone(r,h)\n    return lateral_surface_area\n",
        "num_ids": 90
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)\ndef lateral_surface_rectangular_prism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism given the length l, breadth b, and the height h.\n    '''\n    return 2*(l*b+b*h)\ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)\ndef lateral_surface_rectangular_prism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism given the length l, breadth b, and the height h.\n    '''\n    return 2*(l*b+b*h)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return (1/3)*math.pi*r*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    return math.pi*r**2*h\ndef volume_rectangular_prism(l,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism given the length l, breadth b, and the height h.\n    '''\n    return l*b*h\ndef volume_triangular_prism(a,b,h):\n    '''\n    Write a function to find the volume of a triangular prism given the side a, side b, and the height h.\n    '''\n    return (1/2)*a*b*h\ndef volume_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a triangular prism given the side a, side b, and the height h.\n    '''\n    return (1/3)*a*b*h\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube given the side a.\n    '''\n    return a**3\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    return math.pi*(r**2)*h\ndef volume_rectangular_prism(l,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism given the length l, breadth b, and the height h.\n    '''\n    return l*b*h\ndef volume_triangular_prism(a,b,h):\n    '''\n    Write a function to find the volume of a triangular prism given the side a, side b, and the height h.\n    '''\n    return (1/2)*a*b*h\ndef volume_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a triangular prism given the side a, side b, and the height h.\n    '''\n    return (1/3)*a*b*h\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube given the side a.\n    '''\n    return a**3\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    return (4/3)*math.pi*r**3\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle given the base b and the height h.\n    '''\n    return (b*h)/2\ndef area_rectangular_prism(l,b):\n    '''\n    Write a function to find the area of a rectangular prism given the length l and the base b.\n    '''\n    return l*b\ndef area_triangular_prism(a,b):\n    '''\n    Write a function to find the area of a triangular prism given the side a and the base b.\n    '''\n    return (1/2)*a*b\ndef area_square(l):\n    '''\n    Write a function to find the area of a square given the length l.\n    '''\n    return l**2\ndef area_cone(r):\n    '''\n    Write a function to find the area of a cone given radius r.\n    '''\n    return (1/3)*math.pi*r**2\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder given radius r and the height h.\n    '''\n    return math.pi*r**2\ndef area_rectangular_prism(l,b,h):\n    '''\n    Write a function to find the area of a rectangular prism given the length l, breadth b, and the height h.\n    '''\n    return l*b\ndef area_pyramid(a,h):\n    '''\n    Write a function to find the area of a triangular prism given the side a, height h.\n    '''\n    return (1/2)*a*h\ndef area_cube(a):\n    '''\n    Write a function to find the area of a cube given the side a.\n    '''\n    return 6*a**2\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere given radius r.\n    '''\n    return (4/3)*math.pi*r**3\ndef area_parallelogram(l,b):\n    '''\n    Write a function to find the area of a parallelogram given the length l and the base b.\n    '''\n    return l*b\ndef area_trapezium(l,b,h):\n    '''\n    Write a function to find the area of a trapezium given the length l, base b, and the height h.\n    '''\n    return (1/2)*(l+b)*h\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle given radius r.\n    '''\n    return math.pi*r**2\ndef area_ellipse(a,b):\n    '''\n    Write a function to find the area of an ellipse given the width a and height b.\n    '''\n    return math.pi*a*b\ndef area_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus given the width a and height b.\n    '''\n    return (1/2)*a*b\ndef area_kite(a,b,h):\n    '''\n    Write a function to find the area of a kite given the side a, the side b, and the height h.\n    '''\n    return (1/2)*a*b*h\ndef area_proportion(a,b,h):\n    '''\n    Write a function to find the area of a trapezium given the side a, the base b, and the height h.\n    '''\n    return ((h*a)/2)+(a*b/2)\ndef area_percentage(a,b,h):\n    '''\n    Write a function to find the area of a trapezium given the side a, the base b, and the height h.\n    '''\n    return ((h*a)/2)+(a*b/2)\ndef area_acute_angle(a,b):\n    '''\n    Write a function to find the area of an acute angle given the side a, and the side b.\n",
        "num_ids": 25
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r + math.pi*r*h\n",
        "num_ids": 20
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"\\s\", \":\", text)\n    text = re.sub(r\"\\.\", \":\", text)\n    text = re.sub(r\",\", \":\", text)\n    return text\n",
        "num_ids": 57
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #Replace all occurrences of space, comma, dot\n    # text = text.replace(\" \",\":\").replace(\",\",\":\").replace(\".\",\":\")\n    #Replace all occurrences of space, comma, dot\n    text = text.replace(\" \",\"\").replace(\",\",\"\").replace(\".\",\"\")\n    return text\n",
        "num_ids": 76
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace('.',':').replace(',',':').replace(' ',':')\n",
        "num_ids": 25
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # text = text.replace(' ', ':')\n    text = re.sub(r'\\s+', ':', text)\n    # text = text.replace(',', ':')\n    text = re.sub(r'[.]', ':', text)\n    return text\n",
        "num_ids": 70
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(',',':').replace('.',':').replace(' ',':')\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    import re\n    text = re.sub(r\"[.\\s]*\", \":\", text)\n    return text\n",
        "num_ids": 31
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(',','')\n    text = text.replace('.','')\n    text = text.replace(' ', ':')\n    return text\n",
        "num_ids": 41
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_1 = text.replace(' ', ':')\n    text_2 = text_1.replace(',', ':')\n    text_3 = text_2.replace('.', ':')\n    return text_3\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_1 = text.replace(' ', ':')\n    text_2 = text_1.replace(',', ':')\n    text_3 = text_2.replace('.', ':')\n    return text_3",
        "num_ids": 55
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n    text = text.replace(\" \",\":\")\n    return text\ndef strip_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(\"[,.]\", \":\", text)\n    text = re.sub(\"\\s+\", \":\", text)\n    return text\ndef write_cols_to_file(f, outfile_name):\n    '''\n    Write column names to output file\n    '''\n    f = open(outfile_name, 'w')\n    f.write(\"accession,protein_name,cluster_no,cog,cog_id,cog_name,cog_rank,protein_size,protein_seq,cog_seq\\n\")\n    f.close()\ndef write_to_file(accession, protein_name, cluster_no, cog, cog_id, cog_name, cog_rank, protein_size, protein_seq, cog_seq, outfile_name):\n    '''\n    Write the extracted data to output file\n    '''\n    f = open(outfile_name, 'a')\n    f.write(accession +\",\"+ protein_name +\",\"+ cluster_no +\",\"+ cog +\",\"+ cog_id +\",\"+ cog_name +\",\"+ cog_rank +\",\"+ protein_size +\",\"+ protein_seq +\",\"+ cog_seq +\"\\n\")\n    f.close()\ndef concat_text_file(file_name, outfile_name):\n    '''\n    Concatenate all the text data in the file\n    '''\n    f = open(file_name, 'r')\n    data = f.read()\n    f.close()\n    data = re.sub(\"[,.]\", \":\", data)\n    data = re.sub(\"\\s+\", \":\", data)\n    f = open(outfile_name, 'w')\n    f.write(data)\n    f.close()\ndef cluster_2_cluster_text_files(file1, file2, outfile_name):\n    '''\n    Write cluster information of file1 to output file\n    Write cluster information of file2 to output file\n    '''\n    f = open(outfile_name, 'w')\n    f.write(\"accession,protein_name,cluster_no,cog,cog_id,cog_name,cog_rank,protein_size,protein_seq,cog_seq\\n\")\n    f.close()\n    concat_text_file(file1, \"file1\")\n    concat_text_file(file2, \"file2\")\n    f = open(\"file1\", 'r')\n    file1_data = f.read()\n    f.close()\n    f = open(\"file2\", 'r')\n    file2_data = f.read()\n    f.close()\n    file1_data = re.sub(\"[,.]\", \":\", file1_data)\n    file1_data = re.sub(\"\\s+\", \":\", file1_data)\n    file2_data = re.sub(\"[,.]\", \":\", file2_data)\n    file2_data = re.sub(\"\\s+\", \":\", file2_data)\n    f = open(outfile_name, 'a')\n    f.write(file1_data)\n    f.write(file2_data)\n    f.close()\ndef text_file_to_dictionary(file_name):\n    '''\n    Write cluster information of file to dictionary\n    '''\n    f = open(file_name, 'r')\n    data = f.read()\n    f.close()\n    data = re.sub(\"[,.]\", \":\", data)\n    data = re.sub(\"\\s+\", \":\", data)\n    f = open(file_name, 'w')\n    f.write(data)\n    f.close()\n    f = open(file_name, 'r')\n    data = f.read()\n    f.close()\n    data = re.split(\":\", data)\n    data.remove(data[len(data)-1])\n    data.remove(data[0])\n    dict = {}\n    for i in data:\n        dict[i] = data.count(i)\n    return dict\ndef read_from_file(file_name):\n    '''\n    Read cluster information from file\n    '''\n    f = open(file_name, 'r')\n    data = f.read()\n    f.close()\n    data = re.sub(\"[,.]\", \":\", data)\n    data = re.sub(\"\\s+\", \":\", data)\n    f = open(file_name, 'w')\n    f.write(data)\n    f.close()\n    f = open(file_name, 'r')\n    data = f.read()\n    f.close()\n    data = re.split(\":\", data)\n    data.remove(data[len(data)-1])\n    data.remove(data[0])\n    dict = {}\n    for i in data:\n        dict[i] = data.count(i)\n    return dict\ndef write_row_to_csv(row, csv_file):\n    '''\n    Write the row to CSV file\n    '''\n    f = open(csv_file, 'a')\n    f.write(row)\n    f.close()\ndef cluster_dict_to_csv_file(dictionary, csv_file):\n    '''\n    Write the cluster information of dictionary to csv file\n    '''\n    data = []\n    for key, value in dictionary.items():\n        data.append(key + \",\" + str(value))\n    f = open(csv_file, 'w')\n    f.write(\"cluster,count\\n\")\n    for i in data:\n        f.write(i + \"\\n\")\n    f.close()\ndef read_from_csv_file(csv_file):\n    '''\n    Read cluster information from CSV file\n    '''\n    f = open(csv_file, 'r')\n    data = f.read()\n    f.close()\n    data = re.split(\",\", data)\n    dict = {}\n    for i in data:\n        dict[i[0]] = i[1]\n    return dict\ndef cluster_dictionaries_to_csv_file(dict1, dict2, csv_file):\n    '''\n    Write cluster information of 2 dictionaries to csv file\n    '''\n    data = []\n    for key, value in dict1.items():\n        if key in dict2:\n            data.append(key + \",\" + str(value) + \",\" + str(dict2[key]))\n    f = open(csv_file, 'w')\n    f.write(\"cluster,count,count\\n\")\n    for i in data:\n        f.write(i + \"\\n\")\n    f.close()\ndef csv_file_to_cluster_dictionary(csv_file):\n    '''\n    Write cluster information of CSV file to dictionary\n    '''\n    f = open(csv_file, 'r')\n    data = f.read()\n    f.close()\n    data = re.split(\",\", data)\n    dict = {}\n    for i in data:\n        dict[i[0]] = i[1]\n    return dict\ndef csv_file_to_cluster_dictionaries(csv_file):\n    '''\n    Write cluster information of CSV file to 2 dictionaries\n    '''\n    f = open(csv_file, 'r')\n    data = f.read()\n    f.close()\n    data = re.split(\",\", data)\n    dict1 = {}\n    dict2 = {}\n    for i in data:\n        dict1[i[0]] = i[1]\n        dict2[i[0]] = i[2]\n    return dict1, dict2\ndef cluster_dict_to_csv_file_with_header(dictionary, csv_file):\n    '''\n    Write the cluster information of dictionary to CSV file with header\n    '''\n    f = open(csv_file, 'w')\n    f.write(\"cluster,count\\n\")",
        "num_ids": 27
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('\\.', ':', text)\n    text = re.sub('\\s', ':', text)\n    text = re.sub('\\,', ':', text)\n    return text\n",
        "num_ids": 54
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    result = -1\n",
        "num_ids": 23
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == A[mid]:\n            if mid == 0 or x!= A[mid - 1]:\n                return mid\n            high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n",
        "num_ids": 104
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    # binary search\n    left = 0\n    right = n-1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if x < A[mid]:\n            right = mid - 1\n        elif x > A[mid]:\n            left = mid + 1\n        else:\n            if mid - 1 < 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1\n",
        "num_ids": 123
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return binary_search(A, x, 0, len(A)-1)\n",
        "num_ids": 21
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start, end = 0, len(A)-1\n    while start <= end:\n        mid = start + (end - start)//2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                end = mid - 1\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n",
        "num_ids": 111
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l, r = 0, len(A) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if x > A[mid]:\n            l = mid + 1\n        elif x < A[mid]:\n            r = mid - 1\n        else:\n            if mid == 0 or x!= A[mid - 1]:\n                return mid\n            else:\n                r = mid - 1\n    return -1\n    \ndef find_first_occurrence_bin_search(A, x):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if x > A[mid]:\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            if mid == 0 or x!= A[mid - 1]:\n                return mid\n            else:\n                left = mid + 1\n    return -1\n        \ndef find_first_and_last_occurrence(A, x):\n    '''\n    Write a function to find the first and last occurrences of a number in sorted array. Return empty list if the number is not found.\n    '''\n    first_occurrence = find_first_occurrence(A, x)\n    last_occurrence = find_first_occurrence(A, x + 1) - 1\n    return [first_occurrence, last_occurrence] if first_occurrence!= -1 else []\n    \ndef find_first_and_last_occurrence_bin_search(A, x):\n    left, right = 0, len(A) - 1\n    first_occurrence, last_occurrence = -1, -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if x > A[mid]:\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            if mid == 0 or x!= A[mid - 1]:\n                first_occurrence = mid\n                break\n            else:\n                left = mid + 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if x < A[mid]:\n            right = mid - 1\n        elif x > A[mid]:\n            left = mid + 1\n        else:\n            if mid == len(A) - 1 or x!= A[mid + 1]:\n                last_occurrence = mid\n                break\n            else:\n                right = mid - 1\n    return [first_occurrence, last_occurrence]\n    \ndef find_first_and_last_occurrence_2(A, x):\n    '''\n    Write a function to find the first and last occurrences of a number in sorted array. Return empty list if the number is not found.\n    '''\n    first_occurrence = find_first_occurrence(A, x)\n    last_occurrence = find_first_occurrence(A, x + 1) - 1\n    return [first_occurrence, last_occurrence] if first_occurrence!= -1 else []\n    \ndef find_first_and_last_occurrence_2_bin_search(A, x):\n    left, right = 0, len(A) - 1\n    first_occurrence, last_occurrence = -1, -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if x > A[mid]:\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            if mid == 0 or x!= A[mid - 1]:\n                first_occurrence = mid\n                break\n            else:\n                left = mid + 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if x < A[mid]:\n            right = mid - 1\n        elif x > A[mid]:\n            left = mid + 1\n        else:\n            if mid == len(A) - 1 or x!= A[mid + 1]:\n                last_occurrence = mid\n                break\n            else:\n                right = mid - 1\n    return [first_occurrence, last_occurrence]\n",
        "num_ids": 332
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = start + (end - start)//2\n        if A[mid] >= x:\n            if A[mid - 1] == x:\n                return mid\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n",
        "num_ids": 86
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n    while low <= high:\n        mid = (low + high)//2\n        if A[mid] < x:\n            low = mid+1\n        elif A[mid] > x:\n            high = mid-1\n        else:\n            if mid-1 < 0:\n                return mid\n            if A[mid-1]!= x:\n                return mid\n            high = mid-1\n    return -1\n",
        "num_ids": 115
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # check if A is empty or x is not in A.\n    if not A or x not in A:\n        return -1\n",
        "num_ids": 33
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    left, right = 0, len(A) - 1\n    \n    # first check if the number is in the array\n    if A[left] == x:\n        return left\n    if A[right] == x:\n        return right\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            right = mid\n        elif A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid\n    \n    if A[left] == x:\n        return left\n    return -1\n",
        "num_ids": 152
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    else:\n        prefix_prod = [1]\n        prefix_sum = [0]\n        for i in range(n):\n            prefix_prod.append(prefix_prod[i] * arr[i])\n            prefix_sum.append(prefix_sum[i] + prefix_prod[i+1])\n        result = 0\n        for i in range(n+1):\n            for j in range(i+1, n+1):\n                result += prefix_prod[j] * prefix_prod[i]\n                result -= prefix_sum[j] * prefix_sum[i]\n        return result\n",
        "num_ids": 169
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    \n    # Initialize all sublist sums to 0\n    sublist_sums = [0] * n\n    \n    # Iterate through the given array\n    for i in range(n):\n        \n        # Initialize left sublist sum and right sublist sum\n        # to current element\n        left_sum = arr[i]\n        right_sum = arr[i]\n        \n        # Traverse left and right sublists\n        for j in range(i):\n            \n            # Add previous left sublist sum\n            left_sum = left_sum * arr[j]\n            \n            # Add previous right sublist sum\n            right_sum = right_sum * arr[n - j - 1]\n            \n            # Update sum of current left and right sublist\n            sublist_sums[i] = left_sum + right_sum\n    \n    # Return sum of sublist sums\n    return max(sublist_sums)",
        "num_ids": 228
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sub = []\n    for i in range(1,n+1):\n        sub.extend([arr[j:j+i] for j in range(n)])\n    for i in range(n):\n        sub.append([arr[i]])\n    return sum([reduce(lambda x,y:x*y,sub[i]) for i in range(len(sub))])\n",
        "num_ids": 102
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    size=len(arr)\n    arr.sort()\n    # print(arr)\n    #print(arr[size-1]*arr[0])\n    #print(arr[0]*arr[1])\n    # print(arr[size-2])\n    # print(arr[size-3])\n    # print(arr[size-4])\n    # print(arr[size-5])\n    #print(arr[size-1]*arr[1]*arr[0])\n    #print(arr[size-1]*arr[0]*arr[1])\n    # print(arr[size-2]*arr[1]*arr[0])\n    # print(arr[size-2]*arr[0]*arr[1])\n    # print(arr[size-3]*arr[1]*arr[0])\n    # print(arr[size-3]*arr[0]*arr[1])\n    # print(arr[size-4]*arr[1]*arr[0])\n    # print(arr[size-4]*arr[0]*arr[1])\n    # print(arr[size-5]*arr[1]*arr[0])\n    #print(arr[size-5]*arr[0]*arr[1])\n    # print(arr[size-1]*arr[2]*arr[0])\n    # print(arr[size-2]*arr[1]*arr[0])\n    #print(arr[size-1]*arr[0]*arr[2])\n    # print(arr[size-1]*arr[1]*arr[2])\n    # print(arr[size-2]*arr[0]*arr[2])\n    # print(arr[size-2]*arr[1]*arr[2])\n    # print(arr[size-3]*arr[0]*arr[2])\n    # print(arr[size-3]*arr[1]*arr[2])\n    # print(arr[size-4]*arr[0]*arr[2])\n    # print(arr[size-4]*arr[1]*arr[2])\n    # print(arr[size-5]*arr[0]*arr[2])\n    #print(arr[size-5]*arr[1]*arr[2])\n    # print(arr[size-1]*arr[3]*arr[0])\n    # print(arr[size-1]*arr[2]*arr[0])\n    #print(arr[size-1]*arr[0]*arr[3])\n    # print(arr[size-1]*arr[1]*arr[3])\n    # print(arr[size-1]*arr[2]*arr[3])\n    # print(arr[size-1]*arr[0]*arr[3])\n    # print(arr[size-1]*arr[1]*arr[3])\n    # print(arr[size-1]*arr[2]*arr[3])\n    #print(arr[size-1]*arr[0]*arr[3])\n    #print(arr[size-1]*arr[1]*arr[3])\n    #print(arr[size-1]*arr[2]*arr[3])\n    # print(arr[size-2]*arr[3]*arr[0])\n    # print(arr[size-2]*arr[2]*arr[0])\n    #print(arr[size-2]*arr[0]*arr[3])\n    # print(arr[size-2]*arr[1]*arr[3])\n    # print(arr[size-2]*arr[2]*arr[3])\n    # print(arr[size-2]*arr[0]*arr[3])\n    # print(arr[size-2]*arr[1]*arr[3])\n    # print(arr[size-2]*arr[2]*arr[3])\n    # print(arr[size-3]*arr[3]*arr[0])\n    # print(arr[size-3]*arr[2]*arr[0])\n    # print(arr[size-3]*arr[0]*arr[3])\n    # print(arr[size-3]*arr[1]*arr[3])\n    # print(arr[size-3]*arr[2]*arr[3])\n    # print(arr[size-3]*arr[0]*arr[3])\n    # print(arr[size-3]*arr[1]*arr[3])\n    # print(arr[size-3]*arr[2]*arr[3])\n    # print(arr[size-4]*arr[3]*arr[0])\n    # print(arr[size-4]*arr[2]*arr[0])\n    # print(arr[size-4]*arr[0]*arr[3])\n    # print(arr[size-4]*arr[1]*arr[3])\n    # print(arr[size-4]*arr[2]*arr[3])\n    # print(arr[size-4]*arr[0]*arr[3])\n    # print(arr[size-4]*arr[1]*arr[3])\n    # print(arr[size-4]*arr[2]*arr[3])\n    # print(arr[size-5]*arr[3]*arr[0])\n    # print(arr[size-5]*arr[2]*arr[0])\n    # print(arr[size-5]*arr[0]*arr[3])\n    # print(arr[size-5]*arr[1]*arr[3])\n    # print(arr[size-5]*arr[2]*arr[3])\n    # print(arr[size-5]*arr[0]*arr[3])\n    # print(arr[size-5]*arr[1]*arr[3])\n    # print(arr[size-5]*arr[2]*arr[3])\n    # print(arr[size-1]*arr[4]*arr[0])\n    # print(arr[size-1]*arr[3]*arr[0])\n    # print(arr[size-1]*arr[0]*arr[4])\n    # print(arr[size-1]*arr[1]*arr[4])\n    # print(arr[size-1]*arr[2]*arr[4])\n    # print(arr[size-1]*arr[0]*arr[4])\n    # print(arr[size-1]*arr[1]*arr[4])\n    # print(arr[size-1]*arr[2]*arr[4])\n    # print(arr[size-1]*arr[0]*arr[4])\n    # print(arr[size-1]*arr[1]*arr[4])\n    # print(arr[size-1]*arr[2]*arr[4])\n    # print(arr[size-1]*arr[0]*arr[4])\n    # print(arr[size-1]*arr[1]*arr[4])\n    # print(arr[size-1]*arr[2]*arr[4])\n    # print(arr[size-2]*arr[4]*arr[0])\n    # print(arr[size-2]*arr[3]*arr[0])\n    # print(arr[size-2]*arr[0]*arr[4])\n    # print(arr[size-2]*arr[1]*arr[4])\n    # print(arr[size-2]*arr[2]*arr[4])\n    # print(arr[size-2]*arr[0]*arr[4])\n    # print(arr[size-2]*arr[1]*arr[4])\n    # print(arr[size-2]*arr[2]*arr[4])\n    # print(arr[size-3]*arr[4]*arr[0])\n    # print(arr[size-3]*arr[3]*arr[0])\n    # print(arr[size-3]*arr",
        "num_ids": 1978
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n=len(arr)\n    l=[]\n    def product(arr, i, j, n, l):\n        if j - i + 1 == n:\n            l.append(arr[i:j + 1])\n            return\n        product(arr, i, j + 1, n, l)\n        product(arr, i + 1, j, n, l)\n    product(arr, 0, 0, n, l)\n    print(l)\n",
        "num_ids": 110
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # arr1 is list of subarrays\n    arr1 = [0] * (n+1)\n    # arr2 is the final result\n    arr2 = [0] * (n+1)\n    # product is the variable to store the product of subarray\n    product = 1\n",
        "num_ids": 77
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)+1):\n            sum += arr[i:j]\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    temp_list = []\n    temp_sum = 1\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            for k in range(i, j+1):\n                temp_list.append(arr[k])\n            temp_sum *=sum(temp_list)\n            temp_list.clear()\n    return temp_sum\n",
        "num_ids": 94
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_subarray_prod = 0\n    for i in range(len(arr)):\n        left = i\n        right = i\n        left_prod = 1\n        right_prod = 1\n        while(left>=0 and right<len(arr)):\n            left_prod = left_prod * arr[left]\n            right_prod = right_prod * arr[right]\n            sum_of_subarray_prod = sum_of_subarray_prod + left_prod * right_prod\n            left = left - 1\n            right = right + 1\n    return sum_of_subarray_prod\n",
        "num_ids": 158
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Start writing your code here\n    # n = 3\n    n |= n >> 1\n    n &= ~(1 << 0)\n    n |= n >> 1\n    n &= ~(1 << 63)\n    return n\n    \ndef get_list_of_bits(n):\n    '''\n    Write a python function to get the list of bits for a number.\n    '''\n    # Start writing your code here\n    # n = 16\n    # List of bits for the number n is stored in bits[]\n    bits = []\n    for i in range(0,64):\n        if n & (1 << i):\n            bits.append(1)\n        else:\n            bits.append(0)\n    return bits\n",
        "num_ids": 81
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit_length = n.bit_length()\n    ones = (1 << bit_length) - 1\n    n = n ^ ones\n    return n\n",
        "num_ids": 38
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Store the first and last bit \n    # bits of number \n    f_bit = n & 1\n    l_bit = n & (1 << 1)\n",
        "num_ids": 41
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n &= 0x55555555\n    n |= 0x33333333\n    return n\n",
        "num_ids": 26
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle_bits(n):\n        return ((n & ~(1 << (len(bin(n))-2)))>>1)^(n & 1)\n",
        "num_ids": 40
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # using XOR operator to toggle bits\n    n ^= (n & 1) << 1   \n    n ^= (n & 1) << 2\n    n ^= (n & 1) << 3\n    n ^= (n & 1) << 4\n    n ^= (n & 1) << 5\n    n ^= (n & 1) << 6\n    n ^= (n & 1) << 7\n    n ^= (n & 1) << 8\n    n ^= (n & 1) << 9\n    n ^= (n & 1) << 10\n    n ^= (n & 1) << 11\n    n ^= (n & 1) << 12\n    n ^= (n & 1) << 13\n    n ^= (n & 1) << 14\n    n ^= (n & 1) << 15\n    return n\n    \ndef set_first_bits(n): \n    '''\n    Write a python function to set the first bit of a number. https://www.geeksforgeeks.org/set-first-bit-number/\n    '''\n    return (n & ~(n-1))\n",
        "num_ids": 14
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n^(n>>1)^(n<<1))\n",
        "num_ids": 19
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    for i in range(0,len(n)):\n        n = n | (1 << i)\n    return n\n",
        "num_ids": 31
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = n | (n>>1) | (n<<1)\n    return x&(x-1)\n",
        "num_ids": 29
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = -1\n    n = len(a)\n    if n < 1:\n        return left\n    right = n - 1\n    while(left <= right):\n        mid = (left + right) // 2\n        if a[mid] == x:\n            left = mid + 1\n        elif a[mid] > x:\n            right = mid - 1\n        elif a[mid] < x:\n            left = mid + 1\n    return left\n",
        "num_ids": 110
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # INSERTION SORT: https://www.geeksforgeeks.org/insertion-sort/\n    # also see https://www.geeksforgeeks.org/insertion-sort/\n    # using bisect from bisect library\n    # bisect.bisect(a,x)\n    # bisect.insort(a,x)\n    # a = [1,3,4,5,6]\n    # x = 4\n    # a.insert(bisect.bisect(a, x), x)\n    # print(a)\n    # bisect.insort(a, x)\n    # print(a)\n    # a = [1,3,4,5,6]\n    # x = 7\n    # bisect.insort(a, x)\n    # print(a)\n",
        "num_ids": 194
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #return bisect.bisect_left(a, x)\n    # bisect_left returns the first occurrence of x in a that is to the left of and at the left of a, if it is present.\n    # if not present, it returns the value after the last occurrence of x.\n    # bisect_left(a,x) = len(a) if no left insertion point for x in a.\n    a.insert(bisect.bisect(a,x),x)\n    return a\n",
        "num_ids": 118
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    y = bisect.bisect_left(a, x)\n    return y\n",
        "num_ids": 22
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return None\n",
        "num_ids": 44
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    else:\n        if a[0] > x:\n            return 0\n        else:\n            for i in range(1, n):\n                if a[i] < x:\n                    return i\n            return n\n",
        "num_ids": 72
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    return bisect.bisect_left(a, x)\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    return bisect.bisect_right(a, x)\n    \ndef binary_search(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    return bisect.bisect(a, x)\n    \ndef insert_by_binary_search(a, x, f):\n    '''\n    Write a function to insert a specified value in sorted order to a given array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    if f == 'left':\n        return binary_search(a, x)\n    else:\n        return left_insertion(a, x)\n        \ndef insert_by_binary_search_right(a, x, f):\n    '''\n    Write a function to insert a specified value in sorted order to a given array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    if f == 'left':\n        return right_insertion(a, x)\n    else:\n        return left_insertion(a, x)\n        \ndef test_left_insertion():\n    assert left_insertion([1,2,3,4,5], 4) == 3\n    assert left_insertion([1,2,3,4,5], 1) == 0\n    assert left_insertion([1,2,3,4,5], 6) == 5\n",
        "num_ids": 117
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    print(i)\n    if i!= len(a) and a[i] == x:\n        return i\n    return None\n",
        "num_ids": 50
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == []:\n        return -1\n    else:\n        return bisect.bisect_left(a, x)\n",
        "num_ids": 33
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return 'Starting with vowel'\n    else:\n        return 'Starting with consonant'\n",
        "num_ids": 35
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return 'Vowel'\n    else:\n        return 'Consonant'\n",
        "num_ids": 35
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        print(\"String is starting with a vowel\")\n    else: \n        print(\"String is not starting with a vowel\")\nif __name__ == \"__main__\": \n    string = input(\"Enter a string\\n\")\n    check_str(string)\n",
        "num_ids": 74
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pass \n    if re.match(regex, string) is None: \n        return False \n    else: \n        return True \n",
        "num_ids": 37
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        print(\"Yes, it is a valid string.\") \n    else: \n        print(\"No, it is an invalid string.\") \n",
        "num_ids": 46
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex,string)\n    if match:\n        return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matcher = re.fullmatch(regex,string)\n    if matcher:\n        return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string)\nprint(check_str(\"python\")) \nprint(check_str(\"trex\")) \nprint(check_str(\"Aye\")) \n",
        "num_ids": 46
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\nprint(check_str(\"cory\"))\nprint(check_str(\"k\"))\n",
        "num_ids": 35
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return (1/n)*(n-1) + geometric_sum(n-1)\n    \n",
        "num_ids": 37
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    #write code here\n",
        "num_ids": 8
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (1 + geometric_sum(n - 1))\n",
        "num_ids": 18
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * geometric_sum(n - 1) if n else 1\n",
        "num_ids": 19
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 1:\n        return 0\n    return n + geometric_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return n*geometric_sum(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return 2**(n-1) + geometric_sum(n-1)\n",
        "num_ids": 36
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n*(2**(n-1))\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        return (1 / n) + geometric_sum(n-1)\n    \n    \ndef power_of_two(n):\n    '''\n    Write a function to return true if n is a power of two.\n    '''\n    \n    if n == 1:\n        return True\n    elif n > 1:\n        if n % 2 == 0:\n            return power_of_two(n / 2)\n        else:\n            return False\n    \ndef power_of_three(n):\n    '''\n    Write a function to return true if n is a power of three.\n    '''\n    \n    if n == 1:\n        return True\n    elif n > 1:\n        if n % 3 == 0:\n            return power_of_three(n / 3)\n        else:\n            return False\n            \ndef power_of_k(k, n):\n    '''\n    Write a function to return true if n is a power of k, where k is an integer larger than 1.\n    '''\n    \n    if n == 1:\n        return True\n    elif n > 1:\n        if n % k == 0:\n            return power_of_k(k, n / k)\n        else:\n            return False\n            \n            \ndef get_strings():\n    '''\n    Write a function to generate a list of strings that contains all the letters of the English alphabet.\n    '''\n    \n    str_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    return str_list\n    \n    \ndef get_strings_recursive(k, n, str_list):\n    '''\n    Write a function to generate a list of strings that contains all the letters of the English alphabet.\n    This function is a recursive function and should call a base case and recursive case.\n    '''\n    \n    if n == 0:\n        return str_list\n    elif n == 1:\n        str_list.append(k)\n        return str_list\n    else:\n        str_list.append(k)\n        return get_strings_recursive(k, n - 1, str_list)\n        \ndef gcd(a, b):\n    '''\n    Write a function to find the greatest common divisor of two positive integers.\n    '''\n    \n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n        \n    \ndef gcd_recursive(a, b):\n    '''\n    Write a function to find the greatest common divisor of two positive integers.\n    This function is a recursive function.\n    '''\n    \n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n    \n    \ndef create_linked_list(n):\n    '''\n    Write a function to create a singly linked list of integers.\n    '''\n    \n    l = LinkedList()\n    for i in range(n):\n        l.add(i)\n    return l\n    \ndef create_linked_list_recursive(n):\n    '''\n    Write a function to create a singly linked list of integers.\n    This function is a recursive function.\n    '''\n    \n    if n == 0:\n        return None\n    else:\n        l = LinkedList()\n        l.add(n)\n        return create_linked_list_recursive(n - 1)\n        \ndef print_linked_list(l):\n    '''\n    Write a function to print a singly linked list of integers.\n    '''\n    \n    if l == None:\n        return\n    else:\n        print(l.get_value())\n        print_linked_list(l.get_next())\n        \ndef print_linked_list_recursive(l):\n    '''\n    Write a function to print a singly linked list of integers.\n    This function is a recursive function.\n    '''\n    \n    if l == None:\n        return\n    else:\n        print(l.get_value())\n        print_linked_list_recursive(l.get_next())\n        \ndef is_linked_list_palindrome(l):\n    '''\n    Write a function to check whether a singly linked list is palindrome or not.\n    '''\n    \n    if l == None or l.get_next() == None:\n        return True\n    else:\n        if l.get_value() == l.get_next().get_value():\n            return is_linked_list_palindrome(l.get_next().get_next())\n        else:\n            return False\n            \ndef is_linked_list_palindrome_recursive(l):\n    '''\n    Write a function to check whether a singly linked list is palindrome or not.\n    This function is a recursive function.\n    '''\n    \n    if l == None or l.get_next() == None:\n        return True\n    else:\n        if l.get_value() == l.get_next().get_value():\n            return is_linked_list_palindrome_recursive(l.get_next().get_next())\n        else:\n            return False\n            \ndef get_linked_list_sum(l):\n    '''\n    Write a function to get the sum of all integers in a singly linked list.\n    '''\n    \n    if l == None or l.get_next() == None:\n        return 0\n    else:\n        return l.get_value() + get_linked_list_sum(l.get_next())\n        \ndef get_linked_list_sum_recursive(l):\n    '''\n    Write a function to get the sum of all integers in a singly linked list.\n    This function is a recursive function.\n    '''\n    \n    if l == None or l.get_next() == None:\n        return 0\n    else:\n        return l.get_value() + get_linked_list_sum_recursive(l.get_next())\n            \ndef get_linked_list_max(l):\n    '''\n    Write a function to get the largest integer in a singly linked list.\n    '''\n    \n    if l == None or l.get_next() == None:\n        return l.get_value()\n    else:\n        if l.get_value() > get_linked_list_max(l.get_next()):\n            return l.get_value()\n        else:\n            return get_linked_list_max(l.get_next())\n            \ndef get_linked_list_max_recursive(l):\n    '''\n    Write a function to get the largest integer in a singly linked list.\n    This function is a recursive function.\n    '''\n    \n    if l == None or l.get_next() == None:\n        return l.get_value()\n    else:\n        if l.get_value() > get_linked_list_max_recursive(l.get_next()):\n            return l.get_value()\n        else:\n            return get_linked_list_max_recursive(l.get_next())\n        \n        \ndef delete_linked_list_element(l, x):\n    '''\n    Write a function to delete an element from a singly linked list of integers.\n    '''\n    \n    if l == None:\n        return None\n    else:\n        if l.get_value() == x:\n            return l.get_next()\n        else:\n            l.set_value(x)\n            return delete_linked_list_element(l.get_next(), x)\n        \ndef delete_linked_list_element_recursive(l, x):\n    '''\n    Write a function to delete an element from a singly linked list of integers.\n    This function is a recursive function.\n    '''\n    \n    if l == None:\n        return None\n    else:\n        if l.get_value() == x",
        "num_ids": 29
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # The triangular number can be calculated using the formula,\n    # T(n) = (n*(n+1))/2\n    # where, n represents the number of digits of the number.\n    # To calculate the index, the formula can be used.\n    # Let's implement the formula.\n    # Python program to find the index of smallest triangular number\n    # with n digits\n    n = int(n)\n    i = 1\n    while (1):\n        num = (i * (i + 1)) // 2\n        if (len(str(num)) == n):\n            print(\"The index of smallest triangular number with\", n, \"digits is\", i)\n            break\n        else:\n            i = i + 1\n",
        "num_ids": 171
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    sum = 0; \n    for i in range(1, n): \n        sum = sum + i; \n    return n + sum; \nn = int(input(\"enter the number of digits\"))\nprint(find_Index(n)) ",
        "num_ids": 60
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = []\n    i = 1\n    while True:\n        triangular_number.append(i * (i + 1) // 2)\n        i += 1\n        if len(str(triangular_number[-1])) == n:\n            break\n    return triangular_number[-1]\n",
        "num_ids": 76
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return n * (n + 1) / 2\ndef compute_N_digits(n):\n    '''\n    Write a python function to compute the number of digits of a triangular number. https://www.geeksforgeeks.org/count-digits-in-a-number-without-using-python-builtin-len-method/\n    '''\n    return (int)(math.log10(n) + 1)\ndef compute_Factorial(n):\n    '''\n    Write a python function to compute factorial of a number using recursion. https://www.geeksforgeeks.org/python-program-for-factorial-of-a-number-using-recursion/\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * compute_Factorial(n-1)\ndef compute_Factorial_iter(n):\n    '''\n    Write a python function to compute factorial of a number using iteration. https://www.geeksforgeeks.org/python-program-for-factorial-of-a-number-without-using-math-module/\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    return fact\ndef compute_GCD(a,b):\n    '''\n    Write a python function to compute the greatest common divisor of two numbers using recursion. https://www.geeksforgeeks.org/gcd-of-two-numbers-without-using-modulo/\n    '''\n    if b == 0:\n        return a\n    return compute_GCD(b,a%b)\ndef compute_GCD_iter(a,b):\n    '''\n    Write a python function to compute the greatest common divisor of two numbers using iteration. https://www.geeksforgeeks.org/gcd-of-two-numbers-without-using-modulo/\n    '''\n    while b!=0:\n        temp = b\n        b = a % b\n        a = temp\n    return a\ndef compute_LCM(a,b):\n    '''\n    Write a python function to compute the least common multiple of two numbers using recursion. https://www.geeksforgeeks.org/lcm-of-two-numbers-without-using-gcd-function/\n    '''\n    return a*b/compute_GCD(a,b)\ndef compute_LCM_iter(a,b):\n    '''\n    Write a python function to compute the least common multiple of two numbers using iteration. https://www.geeksforgeeks.org/lcm-of-two-numbers-without-using-gcd-function/\n    '''\n    lcm = (a*b) / compute_GCD_iter(a,b)\n    return int(lcm)\ndef compute_Power(a,b):\n    '''\n    Write a python function to compute the power of a number using recursion. https://www.geeksforgeeks.org/python-program-for-factorial-of-a-number-using-recursion/\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    return a*compute_Power(a,b-1)\ndef compute_Power_iter(a,b):\n    '''\n    Write a python function to compute the power of a number using iteration. https://www.geeksforgeeks.org/python-program-for-factorial-of-a-number-without-using-math-module/\n    '''\n    power = 1\n    while b > 0:\n        power = power * a\n        b = b - 1\n    return power\ndef compute_Combinations(n,r):\n    '''\n    Write a python function to compute the number of combinations of n objects taken r at a time using recursion. https://www.geeksforgeeks.org/count-possible-combinations-n-choose-r/\n    '''\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    return compute_Combinations(n-1,r) + compute_Combinations(n-1,r-1)\ndef compute_Combinations_iter(n,r):\n    '''\n    Write a python function to compute the number of combinations of n objects taken r at a time using iteration. https://www.geeksforgeeks.org/count-possible-combinations-n-choose-r/\n    '''\n    comb = 1\n    for i in range(n,r,-1):\n        comb = comb * i\n    for i in range(1,n-r+1):\n        comb = comb / i\n    return int(comb)\ndef compute_Pascal_row(n):\n    '''\n    Write a python function to compute the ith row of Pascal\u2019s Triangle using recursion. https://www.geeksforgeeks.org/printing-pascal-triangle/\n    '''\n    if n == 0:\n        return [1]\n    else:\n        return [1] + compute_Pascal_row(n-1)\ndef compute_Pascal_row_iter(n):\n    '''\n    Write a python function to compute the ith row of Pascal\u2019s Triangle using iteration. https://www.geeksforgeeks.org/printing-pascal-triangle/\n    '''\n    prev = [1]\n    for i in range(1,n):\n        new = [1]\n        for j in range(1,i):\n            new.append(prev[j] + prev[j-1])\n        new.append(1)\n        prev = new\n    return prev\ndef compute_Triangular_Number(n):\n    '''\n    Write a python function to compute the ith triangular number using recursion. https://www.geeksforgeeks.org/find-nth-triangular-number/\n    '''\n    return (n * (n+1))/2\ndef compute_Triangular_Number_iter(n):\n    '''\n    Write a python function to compute the ith triangular number using iteration. https://www.geeksforgeeks.org/find-nth-triangular-number/\n    '''\n    t = 0\n    for i in range(1,n+1):\n        t = t + i\n    return t\ndef compute_Sum_Digits(n):\n    '''\n    Write a python function to compute the sum of digits of a number using recursion. https://www.geeksforgeeks.org/count-possible-combinations-n-choose-r/\n    '''\n    if n == 0:\n        return 0\n    return (n%10 + compute_Sum_Digits(n//10))\ndef compute_Sum_Digits_iter(n):\n    '''\n    Write a python function to compute the sum of digits of a number using iteration. https://www.geeksforgeeks.org/count-possible-combinations-n-choose-r/\n    '''\n    sum = 0\n    while n!= 0:\n        sum = sum + n % 10\n        n = n//10\n    return sum\ndef compute_Binomial(n,k):\n    '''\n    Write a python function to compute the binomial coefficient using recursion. https://www.geeksforgeeks.org/python-program-for-factorial-of-a-number-without-using-math-module/\n    '''\n    if k == n:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return compute_Binomial(n-1,k-1) + compute_Binomial(n-1,k)\ndef compute_Binomial_iter(n,k):\n    '''\n    Write a python function to compute the binomial coefficient using iteration. https://www.geeksforgeeks.org/python-program-for-factorial-of-a-number-without-using-math-module/\n    '''\n    # Initialize result\n    binomialCoeff = 1\n",
        "num_ids": 17
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize starting number \n    i = 1\n    # Find the index \n    while True: \n        k = int(i * (i + 1) / 2) \n        if len(str(k)) == n: \n            return k\n        i += 1\n        \ndef check_number(number): \n    '''\n    Write a python function to check whether a number is a triangle number or not. https://www.geeksforgeeks.org/check-whether-a-number-is-a-triangle-number-or-not/\n    '''\n    while number > 0: \n        rem = number % 10\n        number = number // 10\n        if rem == 2: \n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    i = 0\n    while(1):\n        i = i + 1\n        tri = int((i * (i + 1)) / 2)\n        if len(str(tri)) == n:\n            return tri\n        else:\n            pass\n",
        "num_ids": 67
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l = []\n    for i in range(1,n+1):\n        a = (int(i * (i+1) / 2))\n        l.append(a)\n    l1 = sorted(set(l))\n    for i in l1:\n        if(l.count(i)==n):\n            return i\n",
        "num_ids": 81
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 10\n    if n == 3:\n        return 100\n    if n == 4:\n        return 1000\n    return ((n*(n+1))//2)\n",
        "num_ids": 60
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 1\n    return find_Index(n-1) + n\n",
        "num_ids": 27
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,10000):\n        if(len(str(i)) == n):\n            return i\ndef get_value(i):\n    '''\n    Write a python function to get the value of nth triangular number. https://www.geeksforgeeks.org/value-of-nth-triangular-number/\n    '''\n    return int(i*(i+1)/2)\ndef find_value(n):\n    '''\n    Write a python function to find the value of the smallest triangular number with n digits.\n    '''\n    return get_value(find_Index(n))\ndef get_digit(i):\n    '''\n    Write a python function to get the value of nth digit of a number. https://www.geeksforgeeks.org/get-the-nth-digit-of-a-number-in-python/\n    '''\n    return int(i/10**(int(math.log(i,10))-1))\ndef find_digit(i):\n    '''\n    Write a python function to get the index of the least significant digit of a number. https://www.geeksforgeeks.org/index-of-least-significant-digit-of-a-number/\n    '''\n    return int(math.log(i,10))\ndef sum_digits(i):\n    '''\n    Write a python function to sum the digits of a number. https://www.geeksforgeeks.org/sum-of-digits-of-a-number-in-python/\n    '''\n    if(i==0):\n        return 0\n    return int(i%10) + sum_digits(int(i/10))\ndef sum_digits_of_value(i):\n    '''\n    Write a python function to sum the digits of the value of a number. https://www.geeksforgeeks.org/sum-of-digits-of-a-number-in-python/\n    '''\n    return sum_digits(get_value(i))\ndef sum_digits_of_index(i):\n    '''\n    Write a python function to sum the digits of the index of a number. https://www.geeksforgeeks.org/sum-of-digits-of-a-number-in-python/\n    '''\n    return sum_digits(find_Index(i))\ndef count_digits(i):\n    '''\n    Write a python function to count the digits of a number. https://www.geeksforgeeks.org/count-of-digits-of-a-number-in-python/\n    '''\n    if(i==0):\n        return 1\n    return 1 + count_digits(int(i/10))\ndef count_digits_of_value(i):\n    '''\n    Write a python function to count the digits of the value of a number. https://www.geeksforgeeks.org/count-of-digits-of-a-number-in-python/\n    '''\n    return count_digits(get_value(i))\ndef count_digits_of_index(i):\n    '''\n    Write a python function to count the digits of the index of a number. https://www.geeksforgeeks.org/count-of-digits-of-a-number-in-python/\n    '''\n    return count_digits(find_Index(i))\ndef index_of_value(i,d):\n    '''\n    Write a python function to find the index of dth smallest number in a sequence. https://www.geeksforgeeks.org/index-of-nth-smallest-number-in-sequence/\n    '''\n    # return get_value(i)%10**d\n    return int(get_value(i)/10**d)\ndef index_of_value_of_index(i,d):\n    '''\n    Write a python function to find the index of dth smallest number in a sequence. https://www.geeksforgeeks.org/index-of-nth-smallest-number-in-sequence/\n    '''\n    return int(index_of_value(i,d)%10**d)\ndef index_of_value_of_value(i,d):\n    '''\n    Write a python function to find the index of dth smallest number in a sequence. https://www.geeksforgeeks.org/index-of-nth-smallest-number-in-sequence/\n    '''\n    return index_of_value(i,d)%10**d\ndef index_of_value_of_digit(i,d):\n    '''\n    Write a python function to find the index of dth smallest number in a sequence. https://www.geeksforgeeks.org/index-of-nth-smallest-number-in-sequence/\n    '''\n    return int(index_of_value(i,d)%10**(d+1))\ndef value_of_digit(i,d):\n    '''\n    Write a python function to find the value of dth smallest number in a sequence. https://www.geeksforgeeks.org/index-of-nth-smallest-number-in-sequence/\n    '''\n    return get_value(index_of_value(i,d))\ndef value_of_digit_of_value(i,d):\n    '''\n    Write a python function to find the value of dth smallest number in a sequence. https://www.geeksforgeeks.org/index-of-nth-smallest-number-in-sequence/\n    '''\n    return get_value(index_of_value(i,d))\ndef value_of_digit_of_index(i,d):\n    '''\n    Write a python function to find the value of dth smallest number in a sequence. https://www.geeksforgeeks.org/index-of-nth-smallest-number-in-sequence/\n    '''\n    return get_value(index_of_value(i,d))%10**d\ndef digit_of_index(i,d):\n    '''\n    Write a python function to find the value of dth smallest number in a sequence. https://www.geeksforgeeks.org/index-of-nth-smallest-number-in-sequence/\n    '''\n    return int(get_value(i)%10**d)\ndef digit_of_value(i,d):\n    '''\n    Write a python function to find the value of dth smallest number in a sequence. https://www.geeksforgeeks.org/index-of-nth-smallest-number-in-sequence/\n    '''\n    return int(get_value(i)%10**d)\ndef digit_of_value_of_value(i,d):\n    '''\n    Write a python function to find the value of dth smallest number in a sequence. https://www.geeksforgeeks.org/index-of-nth-smallest-number-in-sequence/\n    '''\n    return int(digit_of_value(i,d))\ndef digit_of_value_of_index(i,d):\n    '''\n    Write a python function to find the value of dth smallest number in a sequence. https://www.geeksforgeeks.org/index-of-nth-smallest-number-in-sequence/\n    '''\n    return int(digit_of_value(i,d))%10**(d+1)\ndef value_of_index(i,d):\n    '''\n    Write a python function to find the value of dth smallest number in a sequence. https://www.geeksforgeeks.org/index-of-nth-smallest-number-in-sequence/\n    '''\n    return get_value(index_of_value(i,d))\ndef value_of_index_of_value(i,d):\n    '''\n    Write a python function to find the value of dth smallest number in a sequence. https://www.geeksforgeeks.org/index-of-nth-smallest-number-in-sequence/\n    '''\n    return get_value(index_of_value(i,d))\ndef value_of_index_of_index(i,d):\n    '''\n    Write a python function to find the value of dth smallest numbe",
        "num_ids": 17
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = dict()\n    for i in range(len(test_tup)-1):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict\n",
        "num_ids": 55
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
        "num_ids": 27
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {i: test_tup[i] for i in range(0, len(test_tup))}\n",
        "num_ids": 30
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]:test_tup[i+1] for i in range(0,len(test_tup),2)}\n",
        "num_ids": 38
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2:\n        return Exception(\"Invalid Tuple\")\n    else:\n        d = {}\n        for i in range(0, len(test_tup), 2):\n            d[test_tup[i]] = test_tup[i+1]\n        return d\n",
        "num_ids": 76
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n",
        "num_ids": 22
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:] + test_tup[:1]))\n",
        "num_ids": 31
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print('Tuple to dictionary')\n    print('tuple : {}'.format(test_tup))\n    result_dict = {}\n    for i in range(len(test_tup)):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict\n",
        "num_ids": 78
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n",
        "num_ids": 58
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print(dict(zip(test_tup[::2], test_tup[1::2])))\n",
        "num_ids": 28
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0,len(s)-1):\n        if s[i]!=s[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Code here\n",
        "num_ids": 7
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n",
        "num_ids": 13
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    ch=s[0]\n    for i in range(len(s)):\n        if s[i]!=ch :\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s1 = list(s)\n    s2 = list(s)\n    s3 = list(s)\n    s4 = list(s)\n    \n    for i in range(len(s1)) :\n        if s1[i]!= s2[i] :\n            s3[i] = s1[i]\n        if s1[i]!= s4[i] :\n            s4[i] = s1[i]\n    return s3 == s4\n",
        "num_ids": 119
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s:\n        if i!= s[0]:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n",
        "num_ids": 13
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if(len(s) == 0):\n        return True\n    else:\n        return s[0] == s[len(s)-1]\n",
        "num_ids": 37
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s[0] == s[-1] :\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3*math.sqrt(3)/4\n",
        "num_ids": 17
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4 * math.sqrt(3) / 3 * side ** 3\n",
        "num_ids": 20
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side ** 2 * math.sqrt(2) * 4 / 3\n    \ndef test_area_tetrahedron():\n    assert math.isclose(area_tetrahedron(3), 12.780545885606055)\n    assert math.isclose(area_tetrahedron(1), 3.2981010852)\n    assert math.isclose(area_tetrahedron(2), 9.52573172722)\n    print('test passed')\n",
        "num_ids": 121
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (side**2)*(3**(1/2))/4\n    return area\n",
        "num_ids": 25
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3*math.sqrt(3)/4\n",
        "num_ids": 17
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    print(f\"Area of a tetrahedron with a side length of {side} is {(side**2)*(math.sqrt(2)/4)}\")\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    print(f\"Volume of a tetrahedron with a side length of {side} is {(side**3)*(1/6)}\")\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    print(f\"Area of a cube with a side length of {side} is {side**3}\")\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    print(f\"Volume of a cube with a side length of {side} is {side**3}\")\ndef area_rectangular_prism(width,length):\n    '''\n    Write a function to caluclate the area of a rectangular prism.\n    '''\n    print(f\"Area of a rectangular prism with a width of {width} and a length of {length} is {width*length}\")\ndef volume_rectangular_prism(width,length):\n    '''\n    Write a function to caluclate the volume of a rectangular prism.\n    '''\n    print(f\"Volume of a rectangular prism with a width of {width} and a length of {length} is {width*length}\")\ndef area_cone(radius,height):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    print(f\"Area of a cone with a radius of {radius} and a height of {height} is {(radius**2)*math.pi}\")\ndef volume_cone(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    print(f\"Volume of a cone with a radius of {radius} and a height of {height} is {(radius**2)*(math.pi)*height/3}\")\ndef area_circular_cylinder(radius,height):\n    '''\n    Write a function to caluclate the area of a circular cylinder.\n    '''\n    print(f\"Area of a circular cylinder with a radius of {radius} and a height of {height} is {(2*math.pi)*radius*(radius+height)}\")\ndef volume_circular_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a circular cylinder.\n    '''\n    print(f\"Volume of a circular cylinder with a radius of {radius} and a height of {height} is {(math.pi)*radius**2*height}\")\ndef area_ellipsoid(radius_a,radius_b,radius_c):\n    '''\n    Write a function to caluclate the area of an ellipsoid.\n    '''\n    print(f\"Area of an ellipsoid with radii a of {radius_a}, b of {radius_b} and c of {radius_c} is {4*math.pi*radius_a*radius_b*radius_c}\")\ndef volume_ellipsoid(radius_a,radius_b,radius_c):\n    '''\n    Write a function to caluclate the volume of an ellipsoid.\n    '''\n    print(f\"Volume of an ellipsoid with radii a of {radius_a}, b of {radius_b} and c of {radius_c} is {(4/3)*math.pi*radius_a*radius_b*radius_c}\")\ndef area_pyramid(base,height):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    print(f\"Area of a pyramid with a base of {base} and a height of {height} is {(base**2)*(height/3)}\")\ndef volume_pyramid(base,height):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    print(f\"Volume of a pyramid with a base of {base} and a height of {height} is {((base**2)*(height/3))/3}\")\ndef area_parallelepiped(side_a,side_b,side_c):\n    '''\n    Write a function to caluclate the area of a parallelepiped.\n    '''\n    print(f\"Area of a parallelepiped with sides of a of {side_a}, b of {side_b} and c of {side_c} is {2*(side_a*side_b+side_a*side_c+side_b*side_c)}\")\ndef volume_parallelepiped(side_a,side_b,side_c):\n    '''\n    Write a function to caluclate the volume of a parallelepiped.\n    '''\n    print(f\"Volume of a parallelepiped with sides of a of {side_a}, b of {side_b} and c of {side_c} is {(side_a*side_b*side_c)/3}\")\ndef area_sphere(radius):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    print(f\"Area of a sphere with a radius of {radius} is {4*math.pi*radius**2}\")\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    print(f\"Volume of a sphere with a radius of {radius} is {(4/3)*math.pi*radius**3}\")\ndef area_triangular_prism(width,length,height):\n    '''\n    Write a function to caluclate the area of a triangular prism.\n    '''\n    print(f\"Area of a triangular prism with a width of {width}, length of {length} and a height of {height} is {(width*length)+(length*height)+(width*height)}\")\ndef volume_triangular_prism(width,length,height):\n    '''\n    Write a function to caluclate the volume of a triangular prism.\n    '''\n    print(f\"Volume of a triangular prism with a width of {width}, length of {length} and a height of {height} is {(width*length*height)/6}\")\ndef area_square_pyramid(base,height):\n    '''\n    Write a function to caluclate the area of a square pyramid.\n    '''\n    print(f\"Area of a square pyramid with a base of {base} and a height of {height} is {base**2*(height/3)}\")\ndef volume_square_pyramid(base,height):\n    '''\n    Write a function to caluclate the volume of a square pyramid.\n    '''\n    print(f\"Volume of a square pyramid with a base of {base} and a height of {height} is {((base**2)*(height/3))/3}\")\ndef area_kite(side_a,side_b):\n    '''\n    Write a function to caluclate the area of a kite.\n    '''\n    print(f\"Area of a kite with sides of length a of {side_a} and b of {side_b} is {(1/2)*(side_a**2)+(1/2)*(side_b**2)}\")\ndef volume_kite(side_a,side_b):\n    '''\n    Write a function to caluclate the volume of a kite.\n    '''\n    print(f\"Volume of a kite with sides of length a of {side_a} and b of {side_b} is {(side_a*side_b)/3}\")\ndef area_dodecahedron(radius):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    print(f\"Area of a dodecahedron with a radius of {radius} is {((3**0.5)/2)*((5*(5+math.sqrt(5)))**2)}\")\ndef volume_dodecahedron(radius):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    print(f\"Volum",
        "num_ids": 9
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2*math.sqrt(3)/4\n",
        "num_ids": 17
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4)*(side**2)\n    return area\n",
        "num_ids": 25
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4/3*math.sqrt(3)*side**3\n",
        "num_ids": 19
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side * side) * (math.sqrt(2) / 2)\n",
        "num_ids": 22
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m < len(list):\n        n = len(list) - m\n        n = n % len(list)\n        return list[n:] + list[:n]\n    else:\n        return list\n",
        "num_ids": 52
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Rotate the list by m\n    # till the last m elements of list\n    # become the first elements of list.\n    # Use negative indexing (for right rotation)\n    # to handle the list indexing issue.\n    # m = len(list) - m\n    # for i in range(m):\n    #     list.append(list[i])\n    #     list.pop(0)\n    # return list\n    # print(list)\n    # for i in range(m):\n    #     list.append(list[i])\n    #     list.pop(0)\n    # return list\n    list_len = len(list)\n    rotation_list_len = list_len - m\n    for i in range(list_len - m, list_len):\n        list.append(list[i])\n    for i in range(list_len - m):\n        list.pop(0)\n    return list\n",
        "num_ids": 222
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[:]\n    for i in range(len(temp)-m, len(temp)):\n        list[i] = temp[i-(len(temp)-m)]\n    for i in range(0, len(temp)-m):\n        list[i] = temp[i]\n",
        "num_ids": 70
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    length = len(list)\n    if length < 1 or m < 0:\n        return\n    if m > length:\n        m %= length\n    last = list.pop()\n    list.insert(0, last)\n    return rotate_right(list, m-1)\n",
        "num_ids": 68
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    #for item in range(m):\n        #list.append(list[0])\n        #list.pop(0)\n    return list[m:] + list[0:m]\n",
        "num_ids": 46
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[len(list)-m:] + list[:len(list)-m]\n",
        "num_ids": 23
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list = list[m:] + list[:m]\n    return list\n",
        "num_ids": 20
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    first_m_elements = list[:m]\n    last_m_elements = list[m:]\n    last_m_elements.append(first_m_elements)\n    return last_m_elements\n",
        "num_ids": 56
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[len(list)-m:len(list)]\n    list[len(list)-m:len(list)] = list[0:len(list)-m]\n    list[0:len(list)-m] = temp\n",
        "num_ids": 57
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(not elem for elem in test_tup)\n",
        "num_ids": 19
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all(test_tup)\n",
        "num_ids": 12
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        print('Yes')\n    else:\n        print('No')\n",
        "num_ids": 28
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for x in test_tup:\n        if type(x) == type(None):\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all(type(ele) is not None for ele in test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup:\n        print(\"\\nAll values in tuple are not None\")\n    else:\n        print(\"\\nAll values in tuple are None\")\n",
        "num_ids": 41
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return False\n    else:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # Method 1\n    # for i in test_tup:\n    #     if i is None:\n    #         return True\n    #     else:\n    #         return False\n    # Method 2\n    return all(i is not None for i in test_tup)\n",
        "num_ids": 67
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem == None:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    end = endnum + 1\n    result = []\n    for x in range(startnum, end):\n        flag = True\n        for d in str(x):\n            if int(d) == 0:\n                flag = False\n                break\n            if x % int(d)!= 0:\n                flag = False\n                break\n        if flag == True:\n            result.append(x)\n    return result\n",
        "num_ids": 98
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum + 1) if divisible_by_digits_helper(i)]\n    \ndef divisible_by_digits_helper(number):\n    number_as_list = [int(i) for i in str(number)]\n    return all([True for i in number_as_list if i == 0])\n",
        "num_ids": 90
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print(\"\\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\\n\")\n    return [num for num in range(startnum, endnum+1) if list(filter(None, str(num)) == list(filter(None, str(num)[::-1])))]\n",
        "num_ids": 85
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n    return [num for num in range(startnum, endnum+1) if all(num % int(digit) == 0 for digit in str(num))]\n",
        "num_ids": 56
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum, endnum+1):\n        if is_divisible_by_digits(num):\n            print(num)\n",
        "num_ids": 38
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum+1) if all([int(j) == 0 or i % int(j) == 0 for j in str(i)])]\n",
        "num_ids": 47
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for i in range(startnum, endnum + 1):\n        if i % sum([int(num) for num in str(i)]) == 0:\n            result.append(i)\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    d = [int(i) for i in range(startnum, endnum+1)]\n    return [i for i in d if all(x % i == 0 for x in str(i))]\n",
        "num_ids": 49
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum + 1):\n        flag = True\n        for i in str(num):\n            if (int(i) == 0):\n                flag = False\n        if flag:\n            result.append(num)\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    mylist = []\n    for num in range(startnum, endnum+1):\n        # print(num)\n        if num == 0:\n            continue\n        else:\n            for digit in str(num):\n                if num % int(digit)!= 0:\n                    break\n                else:\n                    if num % int(digit) == 0:\n                        mylist.append(num)\n    return mylist\n",
        "num_ids": 98
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a=math.radians(a)\n    if(a<=360):\n        s=(r*r)*math.sin(a)\n        return s\n    else:\n        return None",
        "num_ids": 47
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n",
        "num_ids": 6
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a=a%360\n    if a<0:\n        a+=360\n    if a>360:\n        return None\n    return r**2*(a/360)\n",
        "num_ids": 44
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = math.radians(a)\n    area = (r ** 2) * angle\n    return(area)\n    \ndef add(a,b):\n    '''\n    Write a function to add two numbers. The function takes two numbers as input. Function should return None if the inputs are not numbers.\n    '''\n    try:\n        sum = a + b\n    except TypeError:\n        print('Inputs must be of type int or float!')\n    else:\n        return(sum)\n",
        "num_ids": 44
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n",
        "num_ids": 6
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * a/360\n    return area\n",
        "num_ids": 36
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a=math.radians(a)\n    return None if a>360 else math.pi*(r**2)*a",
        "num_ids": 31
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r * r * math.sin(a) / (a/360)\n",
        "num_ids": 36
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<360:\n        return (a/360)*(r**2)*(math.pi)\n    else:\n        return None",
        "num_ids": 34
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle=a\n    if angle>360:\n        return None\n    else:\n        area=r*r*math.acos(r/a)-r*math.sqrt(a*a-r*r)\n        return area\n",
        "num_ids": 58
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    # Create a table to store the longest common \n    # subsequence of three strings \n    L = [[[] for x in range(n + 1)] for y in range(m + 1)] \n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(l + 1): \n                \n                # If current character of all strings are equal \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j].append(0) \n                \n                # If the current character of all strings are not equal \n                elif X[i - 1] == Y[j - 1] == Z[k - 1]: \n                    L[i][j].append(L[i - 1][j - 1][k - 1] + 1) \n                \n                # If the current character of all strings are not equal \n                else: \n                    L[i][j].append(max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])) \n    return L[m][n][l] \n",
        "num_ids": 302
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    # declaring the array for storing the dp values \n    L = [[[None]*(o+1) for i in range(n+1)] for j in range(m+1)] \n    # code for the dynamic programming \n    # Following steps build L[m+1][n+1][o+1] in bottom up fashion \n    # L[i][j][k] contains length of LCS of X[0..i-1] \n    # and Y[0..j-1] and Z[0..k-1]  \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0 : \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1]+1\n                else: \n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n    return L[m][n][o]\n",
        "num_ids": 349
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lenX = len(X) \n    lenY = len(Y) \n    lenZ = len(Z) \n",
        "num_ids": 32
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    l = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)] \n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if(i == 0 or j == 0 or k == 0): \n                    l[i][j][k] = 0\n                elif(X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]): \n                    l[i][j][k] = l[i - 1][j - 1][k - 1] + 1\n                else: \n                    l[i][j][k] = max(l[i - 1][j][k], l[i][j - 1][k], l[i][j][k - 1]) \n    \n    index = l[m][n][o] \n    lcs = [\"\"] * (index) \n    lcs[index - 1] = \"\" \n    i = m\n    j = n\n    k = o\n    while(i > 0 and j > 0 and k > 0): \n        if(X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]): \n            lcs[index - 1] = X[i - 1] \n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n            \n        elif(l[i - 1][j][k] == l[i][j - 1][k]): \n            i -= 1\n        elif(l[i][j - 1][k] == l[i][j][k - 1]): \n            j -= 1\n        elif(l[i][j][k - 1] == l[i][j][k]): \n            k -= 1\n    return \"\".join(lcs) \n",
        "num_ids": 489
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[None]*(l + 1) for i in xrange(n + 1)] for j in xrange(m + 1)] \n    for i in xrange(m + 1): \n        for j in xrange(n + 1): \n            for k in xrange(l + 1): \n                if i == 0 or j == 0 or k == 0 : \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n",
        "num_ids": 239
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[None]*(l+1) for i in range(n+1)] for j in range(m+1)] \n    # L[i][j][k] stores the length of LIS of X[0..i-1], Y[0..j-1] and Z[0..k-1] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    # L[m][n][l] contains the length of LCS of X[0..n-1] and Y[0..m-1] \n    return L[m][n][l] \n",
        "num_ids": 325
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y)\n    l = len(Z)\n    L = [[[None for k in range(l + 1)] for j in range(n + 1)] for i in range(m + 1)]\n",
        "num_ids": 61
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n",
        "num_ids": 29
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    # Following 2D table, it stores the number of options in cell(i,j,k) of the table.\n    # for i in range(m+1): \n    #     for j in range(n+1): \n    #         for k in range(o+1): \n    #             print(i,j,k) \n",
        "num_ids": 110
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    X =''+X\n    Y =''+Y\n    Z =''+Z\n",
        "num_ids": 25
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # return re.sub(r'([A-Z][a-z]+)',r' \\1', str1)\n    return re.sub(r'([A-Z][a-z]+)',r' \\1', str1)\n",
        "num_ids": 59
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split()\n    for word in str1:\n        if word.istitle():\n            str1 = str1.replace(word, word+\" \")\n    return str1\n",
        "num_ids": 50
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if isinstance(str1, str) and str1!= '':\n        return re.sub(r'(?<=[a-z])([A-Z])', r' \\1', str1)\n    else:\n        return None\n    \ndef capital_words_list(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if isinstance(str1, str) and str1!= '':\n        lst = str1.split(' ')\n        new = []\n        for w in lst:\n            new.append(w[0].upper() + w[1:])\n        return''.join(new)\n    else:\n        return None\n    \ndef capital_words_re(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if isinstance(str1, str) and str1!= '':\n        return re.sub(r'(?<=\\w)([A-Z])', r' \\1', str1)\n    else:\n        return None\n",
        "num_ids": 58
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'\\w+(?=\\s[A-Z])', r' \\1', str1)\n",
        "num_ids": 32
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    #input1 = str1\n    #input2 = input1.title()\n    \n    #return input2\n    #print(input2)\n    input1 = str1\n    input2 = re.sub(r'(?<=\\w)([A-Z])', r' \\1', input1)\n    \n    return input2\n",
        "num_ids": 85
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    list1 = []\n    list2 = []\n    list3 = []\n    pattern = re.compile('(?<=\\w)([A-Z])\\w+')\n    for match in pattern.finditer(str1):\n        list1.append(match.start())\n        list1.append(match.group())\n    for index in range(0,len(list1),2):\n        list2.append(list1[index])\n        list2.append(' ')\n    list3 = ''.join(list2)\n    return list3\n",
        "num_ids": 134
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str_1=str1.split()\n    new_list=[]\n    for i in str_1:\n        if i[0].isupper():\n            new_list.append(' '+i)\n        else:\n            new_list.append(i)\n    return ''.join(new_list)\n",
        "num_ids": 76
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=\\w)([A-Z])', r' \\1', str1)\n",
        "num_ids": 32
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r\"([A-Z])\", r\" \\1\", str1)\n",
        "num_ids": 25
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    spaces=re.findall(r'[A-Z][^A-Z]*',str1)\n    result=''\n    for i in range(len(spaces)):\n        result+=spaces[i]+' '\n    return result.strip()\n",
        "num_ids": 65
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Method 1\n    # nums_str.sort(key=lambda x: x.lstrip('0').lstrip('-'))\n    \n    # Method 2\n    # nums = [int(i) for i in nums_str]\n    # nums.sort(reverse=True)\n    # nums_str = [str(i) for i in nums]\n    # nums_str.sort()\n    \n    # Method 3\n    nums_str.sort(key=lambda x: list(map(int, x.split('.'))))\n    return nums_str\n    \n    \ndef sort_numeric_strings_v2(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in nums_str:\n        for j in i.split('.'):\n            if j.isdigit():\n                nums.append(float(j))\n    nums.sort(reverse=True)\n    nums_str = [str(i) for i in nums]\n    nums_str.sort()\n    return nums_str\n    \n    \nif __name__ == '__main__':\n    print(sort_numeric_strings_v2(['11.11', '1.0', '10.10.10.10', '2', '0.5555', '7.7.7.7', '1']))\n    \n",
        "num_ids": 166
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: [int(i) if i.isdigit() else i for i in re.split('(\\d+)', x)])\n    return nums_str\n",
        "num_ids": 51
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n",
        "num_ids": 6
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x: int(x) if x.isdigit() else x)\n    return nums_str\n",
        "num_ids": 37
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = [x for x in nums_str if x.isdigit()]\n    nums_str = [int(x) for x in nums_str]\n    nums_str.sort()\n    nums_str = [str(x) for x in nums_str]\n    return nums_str\n",
        "num_ids": 82
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        nums_str[i] = int(nums_str[i])\n    return sorted(nums_str)\n    \n    \n    \n",
        "num_ids": 52
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x: int(x))\n    return nums_str\n",
        "num_ids": 27
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: int(x))\n    \ndef sort_numeric_strings_non_recursive(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Change numbers into numbers\n    for i, num_str in enumerate(nums_str):\n        try:\n            nums_str[i] = int(num_str)\n        except:\n            nums_str[i] = 0\n    nums_str = sorted(nums_str, key = lambda x: x)\n    # Change numbers back to strings\n    for i, num_str in enumerate(nums_str):\n        try:\n            nums_str[i] = str(num_str)\n        except:\n            nums_str[i] = '0'\n    return nums_str\n",
        "num_ids": 151
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x: [int(s) if s.isdigit() else s for s in x.split()])\n    return nums_str\n",
        "num_ids": 45
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = int(num_str)\n        except:\n            continue\n        nums.append(num)\n    nums.sort()\n    return nums\n",
        "num_ids": 62
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    print(test_list + test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    print(test_list)\n",
        "num_ids": 30
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return\n",
        "num_ids": 18
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    #print(test_list)\n    #print(test_tup)\n    #test_list.append(test_tup)\n    #return test_list\n    print(test_list)\n    print(test_tup)\n    for i in range(len(test_tup)):\n        test_list[i] += test_tup[i]\n    return test_list\n",
        "num_ids": 96
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    pass\n",
        "num_ids": 7
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n    \ndef sort_list(test_list):\n    '''\n    Write a function to sort the given list of tuples.\n    '''\n    test_list.sort()\n    return test_list\n    \ndef remove_tuple(test_list, test_tup):\n    '''\n    Write a function to remove the given tuple from the given list.\n    '''\n    test_list.remove(test_tup)\n    return test_list\n    \ndef remove_item(test_list, test_item):\n    '''\n    Write a function to remove the given item from the given list.\n    '''\n    test_list.remove(test_item)\n    return test_list\n    \ndef append_tuple(test_list, test_tup):\n    '''\n    Write a function to append the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n    \ndef reverse_list(test_list):\n    '''\n    Write a function to reverse the given list.\n    '''\n    test_list.reverse()\n    return test_list\n    \ndef delete_list(test_list):\n    '''\n    Write a function to delete the given list.\n    '''\n    del test_list\n    return test_list\n    \ndef combine_list(test_list1, test_list2):\n    '''\n    Write a function to combine two lists into a single list.\n    '''\n    test_list1.extend(test_list2)\n    return test_list1\n    \ndef search_list(test_list, test_item):\n    '''\n    Write a function to check if the given item is in the given list.\n    '''\n    if test_item in test_list:\n        return True\n    else:\n        return False\n        \ndef search_index(test_list, test_item):\n    '''\n    Write a function to check if the given item is in the given list at the given index.\n    '''\n    if test_item in test_list:\n        return test_list.index(test_item)\n    else:\n        return -1\n        \ndef replace_tuple(test_list, test_tup, new_tup):\n    '''\n    Write a function to replace the given tuple in the given list.\n    '''\n    test_list[test_list.index(test_tup)] = new_tup\n    return test_list\n    \ndef append_tuple_in_list(test_list, test_tup):\n    '''\n    Write a function to append the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n    \ndef sort_list_in_list(test_list):\n    '''\n    Write a function to sort the given list of lists.\n    '''\n    test_list.sort()\n    return test_list\n    \ndef combine_list_in_list(test_list1, test_list2):\n    '''\n    Write a function to combine two lists into a single list.\n    '''\n    test_list1.extend(test_list2)\n    return test_list1\n    \ndef add_item_in_list(test_list, test_item):\n    '''\n    Write a function to add the given item to the given list.\n    '''\n    test_list.append(test_item)\n    return test_list\n    \ndef remove_item_in_list(test_list, test_item):\n    '''\n    Write a function to remove the given item from the given list.\n    '''\n    test_list.remove(test_item)\n    return test_list\n    \ndef remove_list_in_list(test_list):\n    '''\n    Write a function to delete the given list.\n    '''\n    del test_list\n    return test_list\n    \ndef check_list_in_list(test_list1, test_list2):\n    '''\n    Write a function to check if the given list is in the given list.\n    '''\n    if test_list1 in test_list2:\n        return True\n    else:\n        return False\n        \ndef check_index_in_list(test_list1, test_list2, test_index):\n    '''\n    Write a function to check if the given index is in the given list.\n    '''\n    if test_index in test_list1:\n        return True\n    else:\n        return False\n        \ndef get_index_list_in_list(test_list1, test_list2):\n    '''\n    Write a function to check if the given list is in the given list.\n    '''\n    if test_list1 in test_list2:\n        return test_list2.index(test_list1)\n    else:\n        return -1\n        \ndef replace_item_in_list(test_list1, test_item, new_item):\n    '''\n    Write a function to replace the given item in the given list.\n    '''\n    test_list1[test_list1.index(test_item)] = new_item\n    return test_list1\n    \ndef get_length_list(test_list):\n    '''\n    Write a function to get the length of the given list.\n    '''\n    return len(test_list)\n    \ndef list_from_string(test_string):\n    '''\n    Write a function to convert the given string into a list.\n    '''\n    return test_string.split(',')\n    \ndef string_from_list(test_list):\n    '''\n    Write a function to convert the given list into a string.\n    '''\n    return ''.join(test_list)\n    \ndef sort_list_from_string(test_string):\n    '''\n    Write a function to sort the given string into a list.\n    '''\n    test_list = list_from_string(test_string)\n    test_list.sort()\n    return test_list\n    \ndef remove_list_from_string(test_string):\n    '''\n    Write a function to remove the given list from the given string.\n    '''\n    test_list = list_from_string(test_string)\n    del test_list\n    return test_list\n    \ndef combine_string(test_string1, test_string2):\n    '''\n    Write a function to combine two strings into one string.\n    '''\n    return test_string1 + test_string2\n    \ndef add_string(test_string1, test_string2):\n    '''\n    Write a function to add two strings together.\n    '''\n    return test_string1 + test_string2\n    \ndef remove_string(test_string1, test_string2):\n    '''\n    Write a function to remove a string from another string.\n    '''\n    return test_string1.replace(test_string2, '')\n    \ndef split_string(test_string):\n    '''\n    Write a function to split a string into a list.\n    '''\n    return test_string.split()\n    \ndef count_string(test_string, test_item):\n    '''\n    Write a function to count the number of times an item appears in a string.\n    '''\n    return test_string.count(test_item)\n    \ndef slice_string(test_string, start, end):\n    '''\n    Write a function to slice a string.\n    '''\n    return test_string[start:end]\n    \ndef is_uppercase_string(test_string):\n    '''\n    Write a function to check if a string is all uppercase.\n    '''\n    return test_string.isupper()\n    \ndef is_lowercase_string(test_string):\n    '''\n    Write a function to check if a string is all lowercase.\n    '''\n    return test_string.islower()\n    \ndef is_title_string(test_string):\n    '''\n    Write a function to check if a string follows the rules of a title.\n    '''\n    if test_string.istitle() == True:\n        return True\n    else:\n        return False\n    \ndef is",
        "num_ids": 31
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    #check if left child of node at index i is smaller than its parent\n    if (i*2+1 < n) and arr[i] > arr[i*2+1]:\n        return False\n    #check if right child of node at index i is smaller than its parent\n    if (i*2+2 < n) and arr[i] > arr[i*2+2]:\n        return False\n    #if the above two cases are not met, then there is a problem\n    if i*2+1 < n and i*2+2 < n:\n        return False\n    #if we reach here, then all the checks pass\n    return True\n",
        "num_ids": 183
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Returns true if a binary tree is a min heap\n    # false otherwise\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left >= len(arr):\n        return True\n    if right >= len(arr):\n        if arr[i] < arr[left]:\n            return False\n    else:\n        if arr[i] < arr[left] or arr[i] < arr[right]:\n            return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n",
        "num_ids": 138
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr)//2:\n        return True\n    if arr[i] > arr[2*i + 1]:\n        return False\n    return check_min_heap_helper(arr, 2*i + 1)\n",
        "num_ids": 59
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if 2 * i + 1 < len(arr) and arr[i] > arr[2 * i + 1]:\n        return False\n    if 2 * i + 2 < len(arr) and arr[i] > arr[2 * i + 2]:\n        return False\n    return check_min_heap_helper(arr, i+1)\n",
        "num_ids": 99
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    length = len(arr)\n    if length <= 0:\n        return False\n    if i >= length:\n        return True\n",
        "num_ids": 32
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n or i < 0:\n        return False\n    if i * 2 + 1 >= n:\n        return True\n    if arr[i] > arr[2*i+1] and arr[i] > arr[2*i+2]:\n        return True\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Return true if subtree rooted at i fulfills property, else return false\n    if i >= len(arr):\n        return True\n    if (i * 2) + 1 >= len(arr):\n        return True\n    if (i * 2) + 2 >= len(arr):\n        return True\n    return arr[i] <= arr[(i * 2) + 1] and arr[i] <= arr[(i * 2) + 2] and check_min_heap_helper(arr, (i * 2) + 1) and check_min_heap_helper(arr, (i * 2) + 2)\n",
        "num_ids": 147
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent = i\n    left_child = (2*i)+1\n    right_child = (2*i)+2\n    #check if the index is valid\n    if i>=len(arr) or arr[i]==-math.inf:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child = arr[i] * 2 + 1\n    right_child = arr[i] * 2 + 2\n    min_index = i\n    if left_child < len(arr) and arr[left_child] < arr[min_index]:\n        min_index = left_child\n    if right_child < len(arr) and arr[right_child] < arr[min_index]:\n        min_index = right_child\n    if min_index!= i:\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        check_min_heap_helper(arr, min_index)\n",
        "num_ids": 156
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] > arr[int((i-1)/2)]:\n        return False\n    if 2*i + 1 < len(arr) and arr[i] > arr[2*i + 1]:\n        return False\n    if 2*i + 2 < len(arr) and arr[i] > arr[2*i + 2]:\n        return False\n    return True\n",
        "num_ids": 91
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def sum_digits(num):\n        '''\n        Write a function to sum all the digits of a number. \n        '''\n        result = 0\n        for digit in str(num):\n            result += int(digit)\n        return result\n    \n    # check for n == 0\n    if n == 0:\n        return 0\n    \n    # check for n == 1\n    if n == 1:\n        return 1\n    \n    # otherwise we want the sum of the digits of (2^n - 1)\n    return 2**n - 1 - sum_digits(2**n - 1)\n",
        "num_ids": 111
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n == 0: \n        return 0\n    \n    # Initialize result \n    jacobsthal = 1\n    \n    # Find all factorials \n    fact = 1\n    i = 2\n    while i * i <= n: \n        fact = fact * i \n        i = i + 1\n    \n    # Find all powers of two \n    i = 1\n    while (n - i * i)!= 0: \n        j = i * i \n        while j <= n: \n            n = n - j \n            jacobsthal = jacobsthal + 1\n            j = j + i * i \n        i = i + 1\n    \n    # Add remaining powers of two \n    while n!= 0: \n        jacobsthal = jacobsthal + 1\n        n = n - 1\n    \n    return jacobsthal\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1950
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal_number(n):\n        '''\n        Write a function to find the nth jacobsthal number.\n        '''\n        a = 1\n        b = 1\n        for i in range(n):\n            a,b = b,(a+b)\n        return a\n        \n    if __name__ == '__main__': \n        n = int(input())\n        print(jacobsthal_number(n))\n    return n\n        \ndef zebra_puzzle(colors):\n    '''\n    A Zebra puzzle is a mathematical game that consists of a grid of squares arranged in a grid with two colors in each square. The objective of the puzzle is to place the colored tiles on the grid so that each row, column, and diagonal has a single color. The program should output \"YES\" if it can solve the puzzle and \"NO\" if it cannot.\n    '''\n    \n    def zebra_puzzle(colors):\n        '''\n        Write a program that solves the Zebra puzzle.\n        '''\n        grid = [None] * len(colors)\n        for i in range(len(colors)):\n            if i % 2 == 0:\n                grid[i] = \"W\"\n            else:\n                grid[i] = \"B\"\n        print(\"YES\" if check(grid) else \"NO\")\n    \n    def check(grid):\n        '''\n        Write a function that checks the grid to see if it's a solution.\n        '''\n        for col in range(len(grid)):\n            if grid[col]!= \"W\" and grid[col]!= \"B\":\n                return False\n        return True\n    \n    if __name__ == '__main__': \n        colors = input().split()\n        zebra_puzzle(colors)\n    return colors\n        \ndef max_key(value):\n    '''\n    A key is a value that could be used to sort a dictionary of data. Write a function that takes a dictionary of values and returns the key with the largest value in the dictionary.\n    '''\n    \n    def max_key(value):\n        '''\n        Write a function that takes a dictionary of values and returns the key with the largest value in the dictionary.\n        '''\n        return max(value, key=value.get)\n    \n    if __name__ == '__main__': \n        value = {'a': 1, 'b': 2, 'c': 3}\n        max_key(value)\n        \ndef max_list(values):\n    '''\n    Write a function that takes a list and returns the largest value in that list.\n    '''\n    \n    def max_list(values):\n        '''\n        Write a function that takes a list and returns the largest value in that list.\n        '''\n        return max(values)\n    \n    if __name__ == '__main__': \n        values = [2, 3, 1, 5, -3, 2]\n        max_list(values)\n    return values\n        \ndef order_people(ages):\n    '''\n    Write a program that takes as input a list of integers, and then prints that list in order from oldest to youngest.\n    '''\n    \n    def order_people(ages):\n        '''\n        Write a program that takes as input a list of integers, and then prints that list in order from oldest to youngest.\n        '''\n        oldest = None\n        youngest = None\n        for age in ages:\n            if oldest == None:\n                oldest = age\n            elif age < oldest:\n                oldest = age\n            if youngest == None:\n                youngest = age\n            elif age > youngest:\n                youngest = age\n        print(oldest, youngest)\n    \n    if __name__ == '__main__': \n        ages = [5, 10, 15, 20, 25]\n        order_people(ages)\n    return ages\n        \ndef word_break(s, words):\n    '''\n    Write a program that takes as input a string and a list of strings and checks if the string can be broken into words from the list of words. For example, the string \"barfoothefoobarman\" can be broken into two words \"bar\" and \"foo\" and therefore \"barfoothefoobarman\" is a valid string for the list of words, [\"bar\",\"foo\"].\n    '''\n    \n    def word_break(s, words):\n        '''\n        Write a program that takes as input a string and a list of strings and checks if the string can be broken into words from the list of words. For example, the string \"barfoothefoobarman\" can be broken into two words \"bar\" and \"foo\" and therefore \"barfoothefoobarman\" is a valid string for the list of words, [\"bar\",\"foo\"].\n        '''\n        for word in words:\n            if s.startswith(word):\n                if len(word) == len(s):\n                    return True\n                else:\n                    if word_break(s[len(word):], words):\n                        return True\n        return False\n    \n    if __name__ == '__main__': \n        s = \"barfoothefoobarman\"\n        words = [\"foo\", \"bar\"]\n        word_break(s, words)\n    return s, words\n        \ndef longest_substring(s):\n    '''\n    Write a program that takes as input a string and returns the longest substring of that string that is a palindrome.\n    '''\n    \n    def longest_substring(s):\n        '''\n        Write a program that takes as input a string and returns the longest substring of that string that is a palindrome.\n        '''\n        \n        def palindrome(s):\n            '''\n            Write a function that checks whether a string is a palindrome.\n            '''\n            return s == s[::-1]\n    \n        longest = ''\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                substring = s[i:j+1]\n                if palindrome(substring) and len(substring) > len(longest):\n                    longest = substring\n        return longest\n    \n    if __name__ == '__main__': \n        s = 'racecarannakayak'\n        longest_substring(s)\n    return s\n        \ndef get_max(n):\n    '''\n    Write a program that takes as input an integer n, and prints the nth row of Pascal's triangle.\n    '''\n    \n    def get_max(n):\n        '''\n        Write a program that takes as input an integer n, and prints the nth row of Pascal's triangle.\n        '''\n        row = [1]\n        while len(row) <= n:\n            print(row)\n            row = [x + y for x, y in zip([0] + row, row + [0])]\n        return row[:n]\n    \n    if __name__ == '__main__': \n        n = int(input())\n        get_max(n)\n    return n\n        \ndef rotate_matrix(matrix):\n    '''\n    Write a program to rotate a matrix by 90 degrees. For example, given the following matrix:\n    [\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9]\n    ]\n    rotate it in the following way:\n    [\n      [7, 4, 1],\n      [8, 5, 2],\n      [9, 6, 3]\n    ]\n    '''\n    \n    def rotate_matrix(matrix):\n        '''\n        Write a program to rotate a matrix by 90 degrees. For example, give",
        "num_ids": 18
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==0: return 0\n    if n==1: return 1\n    if n==2: return 1\n    return jacobsthal_num(n-1)+jacobsthal_num(n-2)\n",
        "num_ids": 55
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # Initialize the variables a and b to zero\n    a = 0\n    b = 1\n    # To store the results\n    jacobsthal = 0\n    # Loop till the number n is reached\n    while jacobsthal <= n:\n        # Store the value of b in a\n        a = b\n        # Keep the value of b as it is for the first iteration\n        b = a + b\n        # For the second iteration, b = a + b\n        if jacobsthal == 1:\n            jacobsthal = b\n        # For the rest of the iterations, b = a + b + a\n        else:\n            jacobsthal = b + a\n        jacobsthal += 1\n    # Return the result\n    return b\n",
        "num_ids": 178
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1: \n        return 0\n    else:\n        return (4 * jacobsthal_num(n - 1) + 2)\n",
        "num_ids": 39
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n_mod2 = n%2\n    n_mod_3 = n%3\n    if n_mod2 == 0:\n        return n//2\n    elif n_mod_3 == 0:\n        return 3*n + 1\n    elif n_mod_3 == 1:\n        return n + 1\n    else:\n        return n//2\n",
        "num_ids": 87
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j_list = []\n    for i in range(n):\n        j_list.append(1 + (i * 3))\n",
        "num_ids": 33
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return sum(1 for j in range(1,n+1) if j%2==0)\n",
        "num_ids": 26
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = 1\n    if (n == 0):\n        return 0\n    for i in range(n):\n        a = a + 2\n        if (a % 3 == 0):\n            a = a + 1\n    return a\n",
        "num_ids": 56
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    i = 0\n    k = K\n    test_list.sort()\n    return test_list[i:k]\n",
        "num_ids": 31
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    try:\n        if not isinstance(test_list, list):\n            return print(\"Please pass list as a arg\")\n        if not isinstance(K, int):\n            return print(\"Please pass integer value for K as a arg\")\n        if len(test_list) < K:\n            return print(\"Please pass K as a positive integer\")\n        return print(sorted(test_list, key=lambda x: x[1])[:K])\n    except TypeError as e:\n        return print(e)\n",
        "num_ids": 122
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Time - O(N log K)\n    # Space - O(K)\n    # Create a Heap of size K\n    # Traverse the List and push - (tuple_list[i], index) to the heap.\n",
        "num_ids": 56
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n",
        "num_ids": 20
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    l = len(test_list)\n",
        "num_ids": 19
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #sort list\n    test_list.sort(key=lambda x: x[1])\n    \n    # return list of first k elements\n    return test_list[:K]\n    \ndef main():\n    test_list = [(1, 2), (2, 3), (4, 1), (4, 2), (5, 3)]\n    K = 2\n    result = min_k(test_list, K)\n    print(result)\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 123
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        return test_list\n    min_k = []\n    for _ in range(K):\n        min_k.append(min(test_list, key = lambda x: x[1]))\n        test_list.remove(min_k[-1])\n    return min_k\n",
        "num_ids": 80
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    from heapq import heappop, heappush\n",
        "num_ids": 15
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    if(K > n):\n        return test_list\n    \n    test_list.sort()\n    return test_list[:K]\n",
        "num_ids": 46
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    l = len(test_list)\n    if K <= l:\n        min_K_records = tuple(sorted(test_list[:K]))\n        return min_K_records\n    else:\n        return None\n",
        "num_ids": 58
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #list_x = []\n    #for i in range(min(l1,l2,l3)):\n    #    if l1[i] == l2[i] == l3[i]:\n    #        list_x.append(l1[i])\n    #return list_x\n    \n    \n    return [i for i in l1 if i in l2 and i in l3]\n",
        "num_ids": 99
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for index in range(len(l1)):\n        if l1[index] == l2[index] == l3[index]:\n            result.append(l1[index])\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] == l3[i]:\n            index_list.append(i)\n    return index_list\n",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n",
        "num_ids": 23
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # TODO: Implement function\n    i1 = 0\n    i2 = 0\n    i3 = 0\n    i = 0\n    n1 = len(l1)\n    n2 = len(l2)\n    n3 = len(l3)\n    return_list = []\n    \n    while i1 < n1 and i2 < n2 and i3 < n3:\n        if l1[i1] == l2[i2] and l2[i2] == l3[i3]:\n            return_list.append(l1[i1])\n            i1 += 1\n            i2 += 1\n            i3 += 1\n            continue\n        else:\n            i1 += 1\n            i2 += 1\n            i3 += 1\n    \n    return return_list\n",
        "num_ids": 188
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_dict = {}\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] not in index_dict:\n            index_dict[l1[i]] = i\n    for i in range(len(l2)):\n        if l2[i] in index_dict:\n            if l2[i] not in common_list:\n                common_list.append(l2[i])\n    for i in range(len(l3)):\n        if l3[i] in index_dict:\n            if l3[i] not in common_list:\n                common_list.append(l3[i])\n    return common_list\n",
        "num_ids": 168
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            result.append(l1[i])\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [i for i in l1 if i in l2 and i in l3]\n",
        "num_ids": 23
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n",
        "num_ids": 23
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # For example, if l1 = [2, 3, 1, 4, 7], l2 = [3, 1, 4, 5, 6], and l3 = [1, 4, 7, 8, 9], then the function should return [1, 4, 7].\n    \n    a = set(l1).intersection(l2).intersection(l3)\n    return list(a)",
        "num_ids": 93
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return(numbers[1])\n",
        "num_ids": 18
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 1:\n        return None\n    if len(numbers) == 2:\n        return min(numbers)\n    else:\n        return sorted(numbers)[1]\n",
        "num_ids": 50
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min1 = float('inf')\n    min2 = float('inf')\n    for x in numbers:\n        if x < min1:\n            min2 = min1\n            min1 = x\n        elif x < min2:\n            min2 = x\n    return min2\n",
        "num_ids": 68
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if numbers:\n        first_number = numbers[0]\n        for num in numbers:\n            if num < first_number:\n                second_number = first_number\n                first_number = num\n            elif num > first_number and num < second_number:\n                second_number = num\n        return second_number\n    return None\n",
        "num_ids": 82
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 2:\n        return numbers[0]\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 34
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #sorting the list to get the smallest number in the list\n    numbers.sort()\n    #getting the index of the second smallest number\n    second_smallest_num = numbers.index(numbers[1])\n    return second_smallest_num\n    \n    ",
        "num_ids": 65
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min_number = min(numbers)\n    numbers.remove(min_number)\n    second_min = min(numbers)\n    return second_min\n",
        "num_ids": 41
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # for i in numbers:\n    #     print(i)\n    #     break\n    # x = numbers[0]\n    # for i in range(len(numbers)):\n    #     if x < numbers[i]:\n    #         x = numbers[i]\n    #     if i == 0:\n    #         x = numbers[0]\n    #         print('x is', x)\n    #         print(numbers.index(x))\n    #     if x < numbers[i]:\n    #         print('x is', x)\n    #         print(numbers.index(x))\n    #         break\n    #     print('i is', i)\n    # return numbers[numbers.index(x)+1]\n    # print('this is the largest element', x)\n    # numbers.remove(x)\n    # print('this is the rest of the numbers', numbers)\n    # for i in range(len(numbers)):\n    #     if x < numbers[i]:\n    #         return numbers[i]\n    #     if i == 0:\n    #         return numbers[0]\n    # return numbers[0]\n    # print('this is the largest element', x)\n    # numbers.remove(x)\n    # print('this is the rest of the numbers', numbers)\n    # for i in range(len(numbers)):\n    #     if x < numbers[i]:\n    #         return numbers[i]\n    #     if i == 0:\n    #         return numbers[0]\n    # return numbers[0]\n    # for i in range(len(numbers)):\n    #     if x < numbers[i]:\n    #         return numbers[i]\n    #     if i == 0:\n    #         return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # if len(numbers) == 2:\n    #     return numbers[0]\n    # print('this is the largest element', x)\n    # numbers.remove(x)\n    # print('this is the rest of the numbers', numbers)\n    # for i in range(len(numbers)):\n    #     if x < numbers[i]:\n    #         return numbers[i]\n    #     if i == 0:\n    #         return numbers[0]\n    # return numbers[0]\n    # if len(numbers) == 2:\n    #     return numbers[0]\n    # print('this is the largest element', x)\n    # numbers.remove(x)\n    # print('this is the rest of the numbers', numbers)\n    # for i in range(len(numbers)):\n    #     if x < numbers[i]:\n    #         return numbers[i]\n    #     if i == 0:\n    #         return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # if len(numbers) == 2:\n    #     return numbers[0]\n    # print('this is the largest element', x)\n    # numbers.remove(x)\n    # print('this is the rest of the numbers', numbers)\n    # for i in range(len(numbers)):\n    #     if x < numbers[i]:\n    #         return numbers[i]\n    #     if i == 0:\n    #         return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # if len(numbers) == 2:\n    #     return numbers[0]\n    # print('this is the largest element', x)\n    # numbers.remove(x)\n    # print('this is the rest of the numbers', numbers)\n    # for i in range(len(numbers)):\n    #     if x < numbers[i]:\n    #         return numbers[i]\n    #     if i == 0:\n    #         return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # if len(numbers) == 2:\n    #     return numbers[0]\n    # print('this is the largest element', x)\n    # numbers.remove(x)\n    # print('this is the rest of the numbers', numbers)\n    # for i in range(len(numbers)):\n    #     if x < numbers[i]:\n    #         return numbers[i]\n    #     if i == 0:\n    #         return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # if len(numbers) == 2:\n    #     return numbers[0]\n    # print('this is the largest element', x)\n    # numbers.remove(x)\n    # print('this is the rest of the numbers', numbers)\n    # for i in range(len(numbers)):\n    #     if x < numbers[i]:\n    #         return numbers[i]\n    #     if i == 0:\n    #         return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # if len(numbers) == 2:\n    #     return numbers[0]\n    # print('this is the largest element', x)\n    # numbers.remove(x)\n    # print('this is the rest of the numbers', numbers)\n    # for i in range(len(numbers)):\n    #     if x < numbers[i]:\n    #         return numbers[i]\n    #     if i == 0:\n    #         return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # if len(numbers) == 2:\n    #     return numbers[0]\n    # print('this is the largest element', x)\n    # numbers.remove(x)\n    # print('this is the rest of the numbers', numbers)\n    # for i in range(len(numbers)):\n    #     if x < numbers[i]:\n    #         return numbers[i]\n    #     if i == 0:\n    #         return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # if len(numbers) == 2:\n    #     return numbers[0]\n    # print('this is the largest element', x)\n    # numbers.remove(x)\n    # print('this is the rest of the numbers', numbers)\n    # for i in range(len(numbers)):\n    #     if x < numbers[i]:\n    #         return numbers[i]\n    #     if i == 0:\n    #         return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # return numbers[0]\n    # if len(number",
        "num_ids": 1946
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #sort the list\n    numbers.sort()\n    #get the second index\n    second_index = 1\n    #return the second index\n    return numbers[second_index]\n",
        "num_ids": 45
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'(ab)+?(?=[\\w])')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    return None\n",
        "num_ids": 50
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.match(r\"(a)+b*\", text)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    p=re.compile(r'ab+')\n    if p.search(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # return re.findall(r'ab*',text)\n    text=text.lower()\n    x=re.findall(r'\\b[ab]*a\\b',text)\n    if x:\n        return len(x)\n    else:\n        return 0\ndef text_match_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text=text.lower()\n    x=re.findall(r'\\b[ab]*?a\\b',text)\n    if x:\n        return len(x)\n    else:\n        return 0\ndef text_match_one_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text=text.lower()\n    x=re.findall(r'\\b[ab]*?a?\\b',text)\n    if x:\n        return len(x)\n    else:\n        return 0\ndef text_match_one_zero_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text=text.lower()\n    x=re.findall(r'\\b[ab]*?a{0,1}b\\b',text)\n    if x:\n        return len(x)\n    else:\n        return 0\ndef text_match_one_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text=text.lower()\n    x=re.findall(r'\\b[ab]*a{1}b\\b',text)\n    if x:\n        return len(x)\n    else:\n        return 0\ndef text_match_one_two_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text=text.lower()\n    x=re.findall(r'\\b[ab]*a{0,1}b\\b',text)\n    if x:\n        return len(x)\n    else:\n        return 0\ndef text_match_one_two_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text=text.lower()\n    x=re.findall(r'\\b[ab]*a{1,2}b\\b',text)\n    if x:\n        return len(x)\n    else:\n        return 0\ndef text_match_one_two_three(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text=text.lower()\n    x=re.findall(r'\\b[ab]*a{1,3}b\\b',text)\n    if x:\n        return len(x)\n    else:\n        return 0\ndef text_match_one_two_four(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text=text.lower()\n    x=re.findall(r'\\b[ab]*a{1,4}b\\b',text)\n    if x:\n        return len(x)\n    else:\n        return 0\ndef text_match_one_two_five(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text=text.lower()\n    x=re.findall(r'\\b[ab]*a{1,5}b\\b',text)\n    if x:\n        return len(x)\n    else:\n        return 0\ndef text_match_one_two_six(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text=text.lower()\n    x=re.findall(r'\\b[ab]*a{1,6}b\\b',text)\n    if x:\n        return len(x)\n    else:\n        return 0\ndef text_match_one_two_seven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text=text.lower()\n    x=re.findall(r'\\b[ab]*a{1,7}b\\b',text)\n    if x:\n        return len(x)\n    else:\n        return 0\ndef text_match_one_two_eight(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text=text.lower()\n    x=re.findall(r'\\b[ab]*a{1,8}b\\b',text)\n    if x:\n        return len(x)\n    else:\n        return 0\ndef text_match_one_two_nine(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text=text.lower()\n    x=re.findall(r'\\b[ab]*a{1,9}b\\b',text)\n    if x:\n        return len(x)\n    else:\n        return 0\ndef text_match_one_two_ten(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text=text.lower()\n    x=re.findall(r'\\b[ab]*a{1,10}b\\b',text)\n    if x:\n        return len(x)\n    else:\n        return 0\ndef text_match_one_two_eleven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text=text.lower()\n    x",
        "num_ids": 12
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = '[ab]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    return('Not matched')\n",
        "num_ids": 36
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'a.*?b'\n    if re.search(pattern, text):\n        return('Found a match!')\n    else:\n        return('Not matched!')\n",
        "num_ids": 44
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"([a-z]+)b([a-z]*)\", text)\n",
        "num_ids": 28
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a\\bb*')\n    if pattern.search(text):\n        return \"Match\"\n    else:\n        return \"No match\"\n",
        "num_ids": 44
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(\"ab+\",text)\n    return result\n",
        "num_ids": 20
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(\"ab\", text):\n        return \"Pattern found\"\n    else:\n        return \"Pattern not found\"\n",
        "num_ids": 32
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # use a set to store all the words\n    words = set()\n    # use a dictionary to store the count of each word\n    word_count = {}\n    for word in test_list:\n        # add the words to the set\n        words.add(word)\n        # if the word is in the dictionary\n        if word_count.get(word) is not None:\n            # increase the count of the word\n            word_count[word] = word_count[word] + 1\n        else:\n            # else add it to the dictionary\n            word_count[word] = 1\n    # store the count of all the words in a list\n    count = []\n    for word in words:\n        count.append(word_count[word])\n    print(\"count of all the words in the list: \", count)\n    # make an empty list to store the reverse pairs\n    reverse_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # if the words are reverse strings\n            if test_list[i] == test_list[j][::-1]:\n                # add the reverse string as a tuple to the list\n                reverse_pairs.append((test_list[i], test_list[j]))\n    return reverse_pairs\n",
        "num_ids": 315
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    hash_map = {}\n",
        "num_ids": 9
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                counter += 1\n    return counter\n",
        "num_ids": 68
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Python program to count the pairs of reverse strings\n    def CountReversePairs(test_list):\n        count = 0\n        for i in range(len(test_list)):\n            for j in range(i + 1, len(test_list)):\n                if (test_list[i] == test_list[j][::-1]):\n                    count += 1\n        return count\n",
        "num_ids": 96
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dictionary = {}\n    for test_string in test_list:\n        reverse_string = test_string[::-1]\n        if reverse_string in dictionary:\n            dictionary[reverse_string] = dictionary[reverse_string] + 1\n        else:\n            dictionary[reverse_string] = 1\n    count_pairs = 0\n    for key in dictionary:\n        count_pairs = count_pairs + dictionary[key]//2\n    return count_pairs\n",
        "num_ids": 115
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #list of all strings\n    rev_list = [''.join(reversed(x)) for x in test_list]\n",
        "num_ids": 32
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if test_list == []:\n        return 0\n    reverse_list = []\n    for i in range(len(test_list)):\n        reverse_list.append(test_list[i][::-1])\n    return len(set(test_list) & set(reverse_list))\n",
        "num_ids": 72
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    list_length = len(test_list)\n    count = 0\n    for i in range(list_length):\n        for j in range(i+1, list_length):\n            if test_list[i] == test_list[j][::-1]:\n                count+=1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    my_list = [str(i) for i in test_list]\n    result = 0\n    for i in range(len(my_list)):\n        for j in range(i, len(my_list)):\n            if my_list[i] == my_list[j][::-1] :\n                result += 1\n    return result\n",
        "num_ids": 85
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for string in test_list:\n        if string[::-1] in dict:\n            dict[string] = dict[string[::-1]] + 1\n        else:\n            dict[string] = 1\n    return dict\n",
        "num_ids": 61
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    a = [ [1,2], [1,2,3], [1,2,3], [4,5,6], [1,2] ]\n    b = [ [2,5], [1,6], [3,4] ]\n    #a = [ [1,2], [1,2], [3,4] ]\n    #b = [ [2,5], [1,6], [3,4] ]\n    c = []\n    \n    for x in a:\n        if x not in c:\n            c.append(x)\n    \n    for x in b:\n        if x not in c:\n            c.append(x)\n    \n    d = []\n    for x in c:\n        d.append(tuple(x))\n    \n    dic = {}\n    for x in d:\n        dic[x] = d.count(x)\n    \n    return dic\n",
        "num_ids": 220
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = dict()\n    for sublist in list1:\n        count[tuple(sublist)] = count.get(tuple(sublist), 0) + 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return dict((tuple(sublist),list1.count(sublist)) for sublist in list1)\n",
        "num_ids": 28
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for list_ in list1:\n        if tuple(list_) in result:\n            result[tuple(list_)] = result[tuple(list_)] + 1\n        else:\n            result[tuple(list_)] = 1\n    return result\n    ",
        "num_ids": 69
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if len(list1) == 0:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1_set = set(tuple(sublist) for sublist in list1)\n    list2_set = set(tuple(sublist) for sublist in list2)\n    dictionary = dict((tuple(sublist), list1.count(sublist)) for sublist in list1_set & list2_set)\n    return dictionary\n",
        "num_ids": 85
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return list(map(lambda x: tuple(x), list1))\n",
        "num_ids": 19
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    output = []\n    for i in list1:\n        output.append(tuple(i))\n    uniq_list = set(output)\n    unique_list = list(uniq_list)\n    # print(uniq_list)\n    # print(unique_list)\n    dictionary = {}\n    for i in unique_list:\n        dictionary[i] = output.count(i)\n    return dictionary\n    # return dictionary\n",
        "num_ids": 107
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    tup = tuple(list1)\n    tuplist = list(tup)\n    uniquelist = []\n    for i in tuplist:\n        if i not in uniquelist:\n            uniquelist.append(i)\n    uniquedict = {}\n    for i in uniquelist:\n        uniquedict[i] = uniquelist.count(i)\n    return uniquedict\n    \ndef primes_list(n):\n    '''\n    Write a function that returns a list of all primes between 1 and n (inclusive).\n    '''\n    list_of_primes = []\n    for i in range(2,n+1):\n        prime = True\n        if i == 2:\n            list_of_primes.append(i)\n        else:\n            for j in range(2,i):\n                if i%j == 0:\n                    prime = False\n        if prime == True:\n            list_of_primes.append(i)\n    return list_of_primes\n    \ndef listsum(numlist):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the numbers.\n    '''\n    sum_of_list = 0\n    for i in numlist:\n        sum_of_list += i\n    return sum_of_list\n    \ndef listintersection(list1, list2):\n    '''\n    Write a function that takes two lists and returns a new list that contains only the elements that are common between the two lists.\n    '''\n    list3 = []\n    for i in list1:\n        if i in list2:\n            list3.append(i)\n    return list3\n    \ndef listunion(list1, list2):\n    '''\n    Write a function that takes two lists and returns a new list that contains all the elements from both lists without duplicates.\n    '''\n    list3 = list1 + list2\n    return list(dict.fromkeys(list3))\n    \ndef listdifference(list1, list2):\n    '''\n    Write a function that takes two lists and returns a new list that contains only the elements that are not common between the two lists.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    for i in list2:\n        if i not in list1:\n            list3.append(i)\n    return list3\n    \ndef fibonacci(n):\n    '''\n    Write a function that takes a number n as an argument and returns the sum of the even Fibonacci numbers up to and including n.\n    '''\n    fiblist = [0, 1]\n    for i in range(2, n+1):\n        new_fib = fiblist[i-1] + fiblist[i-2]\n        if new_fib % 2 == 0:\n            fiblist.append(new_fib)\n    return fiblist[n]\n",
        "num_ids": 81
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return_dict = {}\n    for sublist in list1:\n        sublist_tup = tuple(sublist)\n        if sublist_tup in return_dict:\n            return_dict[sublist_tup] += 1\n        else:\n            return_dict[sublist_tup] = 1\n    return return_dict\n",
        "num_ids": 82
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return False\n",
        "num_ids": 6
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \ndef is_decimal_v2(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \ndef is_decimal_v3(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef is_decimal_v4(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef is_decimal_v5(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \ndef is_decimal_v6(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef is_decimal_v7(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \ndef is_decimal_v8(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef is_decimal_v9(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \ndef is_decimal_v10(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \ndef is_decimal_v11(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef is_decimal_v12(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef is_decimal_v13(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef is_decimal_v14(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef is_decimal_v15(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef is_decimal_v16(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef is_decimal_v17(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?[0-9]\\.[0-9]{2}$',num)\n    if m!= None:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef is_decimal_v18(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    n = float(num)\n    m = re.match(r'^(\\-)?",
        "num_ids": 27
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    import math\n    def check(s):\n        return len(s) > 2 and s[0] == '0' and (s[-1] == '.' or s[-1] == '0')\n    return check(str(num))\n",
        "num_ids": 64
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    return bool(re.match(r'^(-)?(\\d+\\.\\d{2})$', num))\n",
        "num_ids": 33
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if (num[0]=='-' and len(num) == 3) or (num[0]!='-' and num[0]!='+' and num[1]=='.' and len(num) == 3):\n        if '.' in num and num.index('.')==1:\n            num = num[0]+num[1:]\n        elif num.index('.')==2 and num[2]=='.':\n            num = num[:2]+num[3:]\n        elif num.index('.')==1:\n            num = num[0]+num[1:]\n        num = num+'0'*(2-len(num.split('.')[1]))\n        return True\n    else:\n        return False\n",
        "num_ids": 179
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, str):\n        return False\n    if num.startswith('.'):\n        num = num[1:]\n    for i in num:\n        if not i in '0123456789':\n            return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    assert isinstance(num, str)\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return len(num.split('.')[1]) < 2\n",
        "num_ids": 47
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = [8, 3, 7, 2, 9, 8, 4, 6, 7, 4, 6, 3, 1, 2, 3, 4, 5]\n    unique_elem = []\n    for i in arr:\n        if i not in unique_elem:\n            unique_elem.append(i)\n        else:\n            print(\"List contains unique elements\")\n    if(len(unique_elem)>len(arr)):\n        print(\"list contains duplicates\")\n    else:\n        print(\"list contains unique elements\")\n",
        "num_ids": 130
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    print(len(set(arr)))\n    print(len(arr))\n",
        "num_ids": 20
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr_dict = {}\n    for i in arr:\n        if i in arr_dict:\n            arr_dict[i] += 1\n        else:\n            arr_dict[i] = 1\n    # print(arr_dict)\n    # print(len(arr_dict.values()))\n    if len(arr_dict.values()) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 98
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    print(len(set(arr))==1)\n",
        "num_ids": 15
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    s = set()\n    for i in arr:\n        s.add(i)\n    if len(s) == 1:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 49
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    x = set(arr)\n    if len(x)==1:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 32
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = []\n    for i in arr:\n        if i in unique:\n            return False\n        else:\n            unique.append(i)\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    list_ele = []\n    for element in arr:\n        if element in list_ele:\n            return False\n        else:\n            list_ele.append(element)\n    return True\n    \n    # OR\n",
        "num_ids": 53
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = False\n    arr_set = set(arr)\n    if len(arr) == len(arr_set):\n        unique = True\n    return unique\n",
        "num_ids": 40
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        print('Month has 30 days')\n    else:\n        print('Month has 31 days')\n",
        "num_ids": 45
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return(28)\n    elif monthnum3 in [1,3,5,7,8,10,12]:\n        return(30)\n    else:\n        return(31)\n",
        "num_ids": 56
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = [1,3,5,7,8,10,12]\n    if monthnum3 in months:\n        print(\"30 days\")\n    else:\n        print(\"31 days\")\n",
        "num_ids": 48
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "num_ids": 40
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return 31\n    elif monthnum3 == 2:\n        return 28\n    elif monthnum3 == 3:\n        return 31\n    elif monthnum3 == 4:\n        return 30\n    elif monthnum3 == 5:\n        return 31\n    elif monthnum3 == 6:\n        return 30\n    elif monthnum3 == 7:\n        return 31\n    elif monthnum3 == 8:\n        return 31\n    elif monthnum3 == 9:\n        return 30\n    elif monthnum3 == 10:\n        return 31\n    elif monthnum3 == 11:\n        return 30\n    elif monthnum3 == 12:\n        return 31\n    else:\n        return -1\n",
        "num_ids": 178
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        print('Given month number contains 30 days.')\n    else:\n        print('Given month number does not contain 30 days.')\n        \ncheck_monthnumber_number(monthnum3)\n    \n    ",
        "num_ids": 65
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in (1,3,5,7,8,10,12):\n        return 30\n    elif monthnum3 in (4,6,9,11):\n        return 31\n    elif monthnum3==2:\n        return 29\n    else:\n        return -1\n",
        "num_ids": 72
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in month_number_30_days:\n        return 1\n    else:\n        return 0\n        \nprint('\\nTask 7.2:')\nprint(check_monthnumber_number(monthnum3))\n",
        "num_ids": 56
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return 30\n    elif monthnum3 in [4,6,9,11]:\n        return 30\n    else:\n        return 28\n",
        "num_ids": 57
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in (4, 6, 9, 11):\n        return 30\n    else:\n        return 31\n",
        "num_ids": 30
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 10000000000\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if(arr[j]-arr[i] < min_diff):\n                min_diff = arr[j] - arr[i]\n    return min_diff\n",
        "num_ids": 72
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    print(arr)\n    diff = abs(arr[0] - arr[1]) \n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if (abs(arr[i] - arr[j]) < diff): \n                diff = abs(arr[i] - arr[j]) \n    return(diff) \n",
        "num_ids": 99
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    return min(arr) - max(arr)\n",
        "num_ids": 14
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n - 1): \n        if (arr[i+1] - arr[i]) < min_diff: \n            min_diff = arr[i+1] - arr[i] \n    return min_diff\n",
        "num_ids": 80
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array \n    arr.sort() \n    # initialize difference as arr[n-1] - arr[0] \n    diff = arr[n-1] - arr[0] \n    for i in range(0, n-1): \n        # update difference if arr[i+1] - arr[i] is smaller than diff \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i] \n    return diff\n",
        "num_ids": 124
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    mini = arr[1] - arr[0] \n    for i in range(1,n): \n        if (arr[i] - arr[i-1] < mini): \n            mini = arr[i] - arr[i-1] \n    return mini\n",
        "num_ids": 74
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    mini = arr[1] - arr[0] \n    for i in range(1, n): \n        if (arr[i] - arr[i-1] < mini): \n            mini = arr[i] - arr[i-1] \n    return mini \n",
        "num_ids": 75
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    return min(arr[i] - arr[j] for i in range(n) for j in range(n))\n",
        "num_ids": 30
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    return min(arr) - max(arr)\n",
        "num_ids": 14
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    if (n == 1):\n        print(arr[0],arr[1])\n        return abs(arr[1]-arr[0])\n    else:\n        min_diff = arr[1] - arr[0]\n        for i in range(1,n):\n            if ((arr[i]-arr[i-1]) < min_diff):\n                min_diff = arr[i] - arr[i-1]\n        return min_diff\n",
        "num_ids": 113
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for i in str if i.isdigit())\n",
        "num_ids": 19
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digit_count = 0\n    for i in str:\n        if i.isdigit():\n            digit_count = digit_count + 1\n",
        "num_ids": 36
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for ch in str:\n        if ch.isdigit():\n            ctr+=1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 0:\n        return False\n    polite_list = [1,2,3,4,5,6]\n    print(polite_list)\n    if n <= len(polite_list):\n        return polite_list[n-1]\n    n = n - len(polite_list)\n    c = 1\n    while True:\n        if n%c == 0:\n            break\n        c += 1\n    return c\n",
        "num_ids": 109
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # if n == 0:\n    #     return 1\n    # else:\n    #     if n == 1:\n    #         return 2\n    #     else:\n    #         return 2*(n-1) + 1\n",
        "num_ids": 56
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    x = 1 \n    if(n < 1):\n        return 0\n    else: \n        for i in range(1,n+1):\n            x = x*(i+1)\n        return x\n",
        "num_ids": 53
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    number = 1\n    while count < n: \n        number += 2\n        if is_prime(number): \n            count += 1\n    return number\n",
        "num_ids": 44
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # start with 1 \n    i,count = 1,0 \n    while (count<n): \n        i = i + 1\n        # check for 6k+1 pattern in i. \n        # i.e. 6k + 1 = (k + 2) * (k + 3) \n        # 6k + 1 = 3k + 2 \n        if (i % 6 == 0): \n            continue \n        # if above conditions fails then we check for \n        # 7k + 1 and 11k + 1 pattern \n        elif (i % 7 == 0): \n            continue \n        elif (i % 11 == 0): \n            continue \n        # if all above conditions fail then we return it \n        else: \n            count = count + 1\n    return i \n",
        "num_ids": 189
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    \n    k = 1\n    while True: \n        if (2*k*(k+1)) >= n: \n            return 2*k*(k+1) - 1\n        k += 1\n",
        "num_ids": 76
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=3:\n        return n\n    else:\n        if (n%2 == 0):\n            return n//2\n        else:\n            return ((n//2)+1)\n",
        "num_ids": 48
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    d = 0\n    num = 1\n    while (d!= n-1):\n        d = 0\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if (num % i == 0):\n                d = d + 1\n        if (d == 0):\n            num = num + 1\n        else:\n            num = num + 1\n    return num\n",
        "num_ids": 96
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return math.factorial(n)%n\n",
        "num_ids": 14
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # number of loops = log(n,2)\n    # if n = 1, then we are done, we return the 1st number.\n    if n == 1:\n        return 1\n    # if n = 2, then we return the 2nd number\n    if n == 2:\n        return 2\n    else:\n        # for all the numbers after 2, we are iterating by a factor of 2\n        for i in range(3,n+1):\n            result = 2 * is_polite(i-1)\n            # if result is a multiple of 3, then the number is not polite.\n            if result % 3 == 0:\n                result = result // 3 +1\n            # if the result is a multiple of 2, then the number is not polite.\n            if result % 2 == 0:\n                result = result // 2 +1\n        return result\ndef get_largest_polite(n):\n    '''\n    Write a function to find nth largest polite number\n    '''\n    # same as is_polite, except we are finding the largest polite number.\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        for i in range(3,n+1):\n            result = 2 * get_largest_polite(i-1)\n            if result % 3 == 0:\n                result = result // 3 +1\n            if result % 2 == 0:\n                result = result // 2 +1\n        return result\ndef count_is_polite(n):\n    '''\n    Write a function to count the number of polite numbers less than n\n    '''\n    # same as is_polite, except we are counting the number of polite numbers\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        for i in range(3,n+1):\n            result = 2 * count_is_polite(i-1)\n            if result % 3 == 0:\n                result = result // 3 +1\n            if result % 2 == 0:\n                result = result // 2 +1\n        return result\ndef is_prime(n):\n    '''\n    Write a function to check whether a given number is prime or not\n    '''\n    # if n = 1, it is not prime.\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    # if n is greater than 2, we check if it is divisible by 2 or not.\n    # if yes, then it is not prime.\n    if n > 2:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n    return False\ndef get_primes(n):\n    '''\n    Write a function to print all the prime numbers less than n\n    '''\n    # if n = 1, there are no primes.\n    if n == 1:\n        return []\n    if n == 2:\n        return [2]\n    # if n is greater than 2, we will check if it is prime or not.\n    # if it is prime, then we will print it.\n    # else, we ignore it.\n    primes = [2]\n    for i in range(3,n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef get_sum_of_primes(n):\n    '''\n    Write a function to print the sum of all the prime numbers less than n.\n    '''\n    # if n = 1, there are no primes.\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    # if n is greater than 2, we will check if it is prime or not.\n    # if it is prime, then we will add it to the sum.\n    # else, we ignore it.\n    sum = 2\n    for i in range(3,n+1):\n        if is_prime(i):\n            sum += i\n    return sum\ndef sum_of_digits(n):\n    '''\n    Write a function to print the sum of digits of a given number\n    '''\n    # if n = 0, there are no digits.\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    # if n = 12, then its sum of digits is 2.\n    if n == 12:\n        return 2\n    # if n = 123, then its sum of digits is 6.\n    if n == 123:\n        return 6\n    # if n = 1234, then its sum of digits is 10.\n    if n == 1234:\n        return 10\n    # if n = 12345, then its sum of digits is 15.\n    if n == 12345:\n        return 15\n    # if n = 123456, then its sum of digits is 21.\n    if n == 123456:\n        return 21\n    # if n = 1234567, then its sum of digits is 28.\n    if n == 1234567:\n        return 28\n    # if n = 12345678, then its sum of digits is 36.\n    if n == 12345678:\n        return 36\n    # if n = 123456789, then its sum of digits is 45.\n    if n == 123456789:\n        return 45\n    # if n = 1234567890, then its sum of digits is 54.\n    if n == 1234567890:\n        return 54\n    # if n = 12345678901, then its sum of digits is 65.\n    if n == 12345678901:\n        return 65\n    # if n = 123456789012, then its sum of digits is 76.\n    if n == 123456789012:\n        return 76\n    # if n = 1234567890123, then its sum of digits is 87.\n    if n == 1234567890123:\n        return 87\n    # if n = 12345678901234, then its sum of digits is 98.\n    if n == 12345678901234:\n        return 98\n    # if n = 123456789012345, then its sum of digits is 109.\n    if n == 123456789012345:\n        return 109\n    # if n = 1234567890123456, then its sum of digits is 120.\n    if n == 1234567890123456:\n        return 120\n    # if n = 12345678901234567, then its sum of digits is 141.\n    if n == 12345678901234567:\n        return 141\n    # if n = 123456789012345678, then its sum of digits is 142.\n    if n == 123456789012345678:\n        return 142\n    # if n = 1234567890123456789, then its sum of digits is 143.\n    if n == 1234567890123456789:\n        return 143\n    # if n = 12345678901234567891, then its sum of digits is 144.\n    if n == 12345678901234567891:\n        return 144\n    # if n = 123456789012345678912, then its sum of digits is 145.\n    if n == 123456789012345678912:\n        return 145\n    # if n = 1234567890123456789123, then its sum of digits is 146.\n    if n == 1234567890123456789123:\n        return 146\n    # if n = 12345678901234567891234, then its sum of digits is 147.\n    if n == 12345678901234567891234:\n        return 147\n    # if n = 123456789012345678912345, then its sum of digits is 148.\n    if n == 123456789012345678912345:\n        return 148\n    # if n = 1234567890123456789123456, then its sum of digits is 149.\n    if n == 1234567890123456789123456:\n        return 149\n    # if n = 12345678901234567891234567, then its sum of digits is 150.\n    if n == 12345678901234567891234567:\n        return 150\n    # if n = 123456789012345678912345678, then its sum of digits is 151.\n    if n == 1234",
        "num_ids": 1011
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        if i+1 <= len(l1)-1:\n            l2.append((l1[i], l1[i+1]))\n    return l2\n",
        "num_ids": 60
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    #return [i for i in zip(l1,l1[1:])]\n    #return [i for i in zip(l1,l1[1:])]\n    #return [(l1[i],l1[i+1]) for i in range(0,len(l1)-1)]\n    #return [(l1[i],l1[i+1]) for i in range(0,len(l1)-1)]\n    #return [(l1[i],l1[i+1]) for i in range(0,len(l1)-1)]\n    return [(l1[i],l1[i+1]) for i in range(0,len(l1)-1) if i % 2 == 0]\n    \n    \ndef find_pairs(l1):\n    '''\n    Write a function to return the count of pairs of items from a given list whose sum is equal to a given number.\n    '''\n    l1.sort()\n    c=0\n    for i in range(0,len(l1)-1):\n        for j in range(i+1,len(l1)):\n            if l1[i]+l1[j]==n:\n                c+=1\n    return c\n    \n    \ndef find_pairs_optimal(l1):\n    '''\n    Write an efficient program to count number of pairs of items from a given list whose sum is equal to a given number.\n    '''\n    d={}\n    for i in l1:\n        if n-i in d:\n            return d[n-i],i\n        else:\n            d[i]=1\n    return 0,0\n    \n    \ndef fibonacci_sequence(n):\n    '''\n    Write a recursive function to generate the nth fibonacci number in the sequence.\n    '''\n    if n<0:\n        return -1\n    elif n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci_sequence(n-1)+fibonacci_sequence(n-2)\n    \ndef fibonacci_sequence_memoization(n,d={}):\n    '''\n    Write an iterative function to generate the nth fibonacci number in the sequence.\n    '''\n    if n<0:\n        return -1\n    elif n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        if n not in d:\n            d[n]=fibonacci_sequence_memoization(n-1,d)+fibonacci_sequence_memoization(n-2,d)\n        return d[n]\n        \n        \ndef fibonacci_sequence_tabulation(n):\n    '''\n    Write an iterative function to generate the nth fibonacci number in the sequence.\n    '''\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n    return a\n    \n    \ndef fibonacci_sequence_tabulation_memoization(n,d={}):\n    '''\n    Write an iterative function to generate the nth fibonacci number in the sequence.\n    '''\n    if n<0:\n        return -1\n    elif n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        if n not in d:\n            d[n]=fibonacci_sequence_tabulation_memoization(n-1,d)+fibonacci_sequence_tabulation_memoization(n-2,d)\n        return d[n]\n        \n        \ndef longest_consecutive_sequence(l1):\n    '''\n    Write a function to return the length of the longest consecutive sequence from the given list.\n    '''\n    l1.sort()\n    c=0\n    c1=0\n    for i in range(0,len(l1)-1):\n        if l1[i+1]-l1[i]==1:\n            c1+=1\n        else:\n            if c1>c:\n                c=c1\n            c1=0\n    if c1>c:\n        c=c1\n    return c\n    \n    \ndef longest_consecutive_sequence_memoization(l1):\n    '''\n    Write a function to return the length of the longest consecutive sequence from the given list.\n    '''\n    d={}\n    for i in l1:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    c=0\n    for i in d:\n        if d[i]>c:\n            c=d[i]\n    return c\n    \n    \ndef find_prime_factors(n):\n    '''\n    Write a function to return a list of prime factors of a given number.\n    '''\n    if n<0:\n        return -1\n    if n==0 or n==1:\n        return []\n    l=[]\n    i=2\n    while i<=n//2:\n        if n%i==0:\n            l.append(i)\n            n=n//i\n            i=2\n        else:\n            i+=1\n    l.append(n)\n    return l\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    if n<2:\n        return 0\n    if n==2 or n==3:\n        return 1\n    if n%2==0 or n%3==0:\n        return 0\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return 0\n        i+=6\n    return 1\n    \ndef is_prime_optimised(n):\n    '''\n    Write an efficient function to check whether a given number is prime or not.\n    '''\n    if n<2:\n        return 0\n    if n==2 or n==3:\n        return 1\n    if n%2==0 or n%3==0:\n        return 0\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return 0\n        i+=6\n    return 1\n    \ndef is_prime_sieve_of_eratosthenes(n):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    l=[1]*(n+1)\n    l[0]=0\n    l[1]=0\n    for i in range(2,int(n**0.5)+1):\n        if l[i]==1:\n            for j in range(i*i,n+1,i):\n                l[j]=0\n    for i in range(len(l)):\n        if l[i]==1:\n            return 1\n    return 0\n    \ndef find_perfect_squares(l1):\n    '''\n    Write a function to find all the perfect squares from a given list of integers.\n    '''\n    l1.sort()\n    l2=[]\n    for i in range(0,len(l1)):\n        if l1[i]*l1[i]==l1[i]:\n            l2.append(l1[i])\n    return l2\n    \ndef find_perfect_squares_optimal(l1):\n    '''\n    Write an efficient function to find all the perfect squares from a given list of integers.\n    '''\n    l1.sort()\n    l2=[]\n    i,j=0,len(l1)\n    while i<=j:\n        if i*i==l1[i]:\n            l2.append(l1[i])\n            j=j-1\n        else:\n            i=i+1\n    return l2\n    \ndef find_reverse_of_number(n):\n    '''\n    Write a function to return the reverse of a given number.\n    '''\n    return int(str(n)[::-1])\n    \ndef find_reverse_of_number_optimal(n):\n    '''\n    Write an efficient function to return the reverse of a given number.\n    '''\n    rev=0\n    while n",
        "num_ids": 10
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    if n < 2:\n        return []\n    l2 = []\n    for i in range(n - 1):\n        l2.append(l1[i : i + 2])\n    return l2\n",
        "num_ids": 60
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(0, len(l1)-1):\n        pairs.append([l1[i],l1[i+1]])\n    return pairs\n",
        "num_ids": 48
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [ [l1[i],l1[i+1]] for i in range(0,len(l1)-1) ]\n",
        "num_ids": 34
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        l.append([l1[i], l1[i+1]])\n    return l\n",
        "num_ids": 44
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = len(l1)\n    if l<2:\n        return \"Invalid Input\"\n    else:\n        l2 = []\n        for i in range(l-1):\n            l2.append((l1[i],l1[i+1]))\n        return l2\n",
        "num_ids": 71
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        return [l1[i:i+2] for i in range(len(l1)-1)]\n",
        "num_ids": 46
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(0, len(l1) - 1):\n        l.append((l1[i], l1[i+1]))\n    return l\n",
        "num_ids": 47
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(0,len(l1)-1)]\n    #OR\n    '''\n    return [(l1[i],l1[i+1]) for i in range(0,len(l1)-1)]\n    #OR\n    #return map(lambda x: (x,x+1),l1[0:-1])\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # Write your code here\n    arr.sort()\n    i = 0\n    j = len(arr)-1\n    count = 0\n    while i < j:\n        if arr[i] + arr[j] == sum:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] + arr[j] < sum:\n            i += 1\n        else:\n            j -= 1\n    return count\n",
        "num_ids": 105
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i] + arr[j]) == sum:\n                return [arr[i],arr[j]]\n    return None\n",
        "num_ids": 62
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    num_pairs = 0\n",
        "num_ids": 10
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    n = len(arr)\n    s = set()\n    for i in range(0, n):\n        y = sum - arr[i]\n        if arr[i] in s:\n            print(\"The pair is\", arr[i], \"and\", y)\n        else:\n            s.add(y)\n    return -1\n",
        "num_ids": 83
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    d = dict()\n    for i in arr:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    print(d)\n    count = 0\n    for i in arr:\n        if sum - i in d:\n            count = count + d[sum - i]\n    return count\n",
        "num_ids": 90
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    dict = {}\n",
        "num_ids": 7
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    count = 0\n",
        "num_ids": 15
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n    pass\n",
        "num_ids": 42
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    list1=set(li1)\n    list2=set(li2)\n    new_list=list1.difference(list2)\n    return new_list\n",
        "num_ids": 43
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i in li1 and i not in li2]\n    return li_dif\n",
        "num_ids": 38
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n    ",
        "num_ids": 34
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n",
        "num_ids": 17
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n",
        "num_ids": 33
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(list(set(li1) - set(li2)) + list(set(li2) - set(li1)))\n",
        "num_ids": 34
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i in li1 and i not in li2]\n    return li_dif\n",
        "num_ids": 38
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n",
        "num_ids": 33
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    num = 1\n    sum = 0\n    while (num <= n) : \n        if (num % 2!= 0) : \n            sum += num ** 4\n        num += 1\n    return sum\n",
        "num_ids": 53
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(n) :\n        s += (i * i * i * i + 1)\n    return s\n",
        "num_ids": 36
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = []\n    for i in range(n+1) :\n        if (i % 2 == 1) :\n            odd_nums.append(i**4)\n    return sum(odd_nums)\n",
        "num_ids": 56
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1) :\n        sum += pow(i, 4)\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if(i%2==1):\n            sum = sum+i**4\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(input(\"Input a positive integer to find the sum of the first n odd natural numbers:\"))\n    ans = (n*(2*n-1))/6\n    return ans\n",
        "num_ids": 47
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    ans = 0\n    for i in range(1,n+1) : \n        if i % 2!= 0 : \n            ans += pow(i,4)\n    return ans",
        "num_ids": 46
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum( [x**4 for x in range(1,n+1) if x%2!= 0])\n",
        "num_ids": 30
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            sum += i ** 4\n    return sum\n    \ndef generate_all_substrings(str) :\n    '''\n    Write a python program to generate all possible substrings of a given string.\n    '''\n    substring_list = []\n    for i in range(len(str)) :\n        for j in range(i, len(str)) :\n            substring_list.append(str[i:j+1])\n    return substring_list\n",
        "num_ids": 60
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if (i % 2!= 0) :\n            sum += i**4\n    return sum\n    # Don't change this return statement.\n    return sum\n",
        "num_ids": 58
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # exp = '(a+b)*(c+d)'\n    open_braces = deque()\n    for brace in exp:\n        if brace == '(':\n            open_braces.append(brace)\n        elif brace == ')':\n            if len(open_braces) == 0:\n                return False\n            else:\n                open_braces.pop()\n    if len(open_braces) == 0:\n        return True\n    return False\n",
        "num_ids": 112
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    par_map = {'}':'{', ']':'[',')':'('}\n    open_brackets = '({['\n    queue = deque()\n    for char in exp:\n        if char in open_brackets:\n            queue.append(char)\n        elif char in par_map:\n            if not queue or queue[-1]!= par_map[char]:\n                return False\n            queue.pop()\n    return not queue\n",
        "num_ids": 112
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_set = ['(', '{', '[', '<', ')', '}', ']', '>']\n    close_set = [')', '}', ']', '>']\n    \n    # Traversing the expression\n    for i in exp:\n        if i in open_set:\n            stack.append(i)\n        elif i in close_set:\n            pos = close_set.index(i)\n            if len(stack) > 0 and open_set[pos] == stack[len(stack) - 1]:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 174
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    bracket_pairs = {\n    ')':'(',\n    ']':'[',\n    '}':'{'\n    }\n",
        "num_ids": 36
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    l = []\n    for i in exp:\n        if i in ['(', '{', '[']:\n            l.append(i)\n        else:\n            if not l:\n                return False\n            current_char = l.pop()\n            if current_char == '(':\n                if i!= ')':\n                    return False\n            if current_char == '{':\n                if i!= '}':\n                    return False\n            if current_char == '[':\n                if i!= ']':\n                    return False\n    if l:\n        return False\n    else:\n        return True\n",
        "num_ids": 144
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch in ['(', '{', '[']:\n            stack.append(ch)\n        if ch in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if ch == ')' and top!= '(':\n                return False\n            if ch == '}' and top!= '{':\n                return False\n            if ch == ']' and top!= '[':\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n",
        "num_ids": 145
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_set = ['(', '[', '{']\n    close_set = [')', ']', '}']\n    for i in exp:\n        if i in open_set:\n            stack.append(i)\n        elif i in close_set:\n            if len(stack) == 0:\n                return False\n            elif i == close_set[close_set.index(stack[-1])]:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 144
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if not exp:\n        return False\n    \n    parenthesis_dict = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n",
        "num_ids": 48
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_chars = {'(', '{', '['}\n    close_chars = {')':'(', '}':'{', ']':'['}\n    stack = deque()\n    for ch in exp:\n        if ch in open_chars:\n            stack.append(ch)\n        elif ch in close_chars:\n            if len(stack) == 0:\n                return False\n            x = stack.pop()\n            if close_chars[ch]!= x:\n                return False\n    return len(stack) == 0\n",
        "num_ids": 136
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch in \"({[\":\n            stack.append(ch)\n        elif ch in \")}]\":\n            if len(stack) == 0:\n                return False\n            if ch == ')' and stack[-1]!= '(':\n                return False\n            if ch == '}' and stack[-1]!= '{':\n                return False\n            if ch == ']' and stack[-1]!= '[':\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 150
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = \"\"\n    for word in test_str.split():\n        if len(word)!= K:\n            new_str += word + \" \"\n    return new_str\n",
        "num_ids": 46
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if not test_str:\n        return ''\n    words = test_str.split()\n    if len(words) == 0:\n        return ''\n    #this will contain all the words with length less than K\n    less_than_k_words = []\n    for word in words:\n        if len(word) < K:\n            less_than_k_words.append(word)\n",
        "num_ids": 94
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for k in range(K):\n        test_str = test_str.replace(test_str[k*K:k*K+K], '')\n    return test_str\n",
        "num_ids": 45
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split(' ')\n    print(test_list)\n    result = []\n    for i in test_list:\n        if len(i)!= K:\n            result.append(i)\n    print(result)\n",
        "num_ids": 62
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_list = test_str.split(\" \")\n    \n    for i in range(len(str_list)-1,-1,-1):\n        if len(str_list[i]) == K:\n            del str_list[i]\n    \n    return \" \".join(str_list)\n",
        "num_ids": 73
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split(\" \")\n    new_list = []\n    for item in test_list:\n        if len(item) == K:\n            continue\n        else:\n            new_list.append(item)\n    return \" \".join(new_list)\n",
        "num_ids": 70
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    output = []\n    for word in test_str.split(' '):\n        if len(word) == K:\n            continue\n        else:\n            output.append(word)\n    return''.join(output)\n",
        "num_ids": 53
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words_list = test_str.split(\" \")\n    new_str = \" \".join([word for word in words_list if len(word)!= K])\n    return new_str\n",
        "num_ids": 47
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if not test_str:\n        return test_str\n    \n    words = test_str.split(\" \")\n    words = [w for w in words if len(w)!= K]\n    return \" \".join(words)\n",
        "num_ids": 57
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    l = []\n    for i in test_str.split():\n        if len(i) == K:\n            l.append(i)\n    for i in l:\n        test_str = test_str.replace(i, \"\")\n    return test_str\n",
        "num_ids": 65
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return (re.search(pattern,text),re.findall(pattern,text),len(re.findall(pattern,text)))\n",
        "num_ids": 34
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text) < len(pattern):\n        return None\n    match = re.search(pattern,text)\n    if match:\n        return match.group()\n    return None\n",
        "num_ids": 46
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text,re.MULTILINE)\n    result = []\n    for match in matches:\n        result.append((match.group(),match.start(),match.end()))\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern == '':\n        return text\n    else:\n        return pattern in text\n",
        "num_ids": 23
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern, text)\n    if m is not None:\n        print('Occurance of substring {} is {}'.format(pattern, text.count(pattern)))\n        print('Occurance of substring {} is {}'.format(pattern, m.start()))\n    else:\n        print('Occurance of substring {} is None'.format(pattern))\n        return\n    return\n",
        "num_ids": 94
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        print('Number of occurrences is ', match.count())\n        print('The position of the first occurrence is', match.start())\n    else:\n        print('Not found!')\ndef find_index(text,pattern,start=0):\n    '''\n    Write a function to find all the occurrences of a pattern in a string. Return a list of all occurrences.\n    '''\n    match = re.search(pattern,text,start)\n    if match:\n        return match.start()\n    else:\n        return None\ndef find_all(text,pattern):\n    '''\n    Write a function to find all the occurrences of a pattern in a string. Return a list of all occurrences.\n    '''\n    match = re.findall(pattern,text)\n    if match:\n        return match\n    else:\n        return None\ndef find_iter(text,pattern):\n    '''\n    Write a function to find all the occurrences of a pattern in a string. Return a list of all occurrences.\n    '''\n    match = re.finditer(pattern,text)\n    if match:\n        return match\n    else:\n        return None\ndef print_match_iter(match):\n    '''\n    Write a function to find all the occurrences of a pattern in a string. Return a list of all occurrences.\n    '''\n    if match:\n        print(match.group())\n        return match\n    else:\n        print('No match')\n        return None\ndef print_match(match):\n    '''\n    Write a function to find all the occurrences of a pattern in a string. Return a list of all occurrences.\n    '''\n    if match:\n        print(match.group())\n        return match\n    else:\n        print('No match')\n        return None\ndef sub_count(text,pattern):\n    '''\n    Write a function to substitute a pattern in a string with another string. Return the number of substitutions.\n    '''\n    return re.sub(pattern,'something', text, count=0)\ndef sub_all(text,pattern,replace):\n    '''\n    Write a function to substitute a pattern in a string with another string. Return the number of substitutions.\n    '''\n    return re.sub(pattern, replace, text, count=0)\ndef sub_iter(text,pattern,replace):\n    '''\n    Write a function to substitute a pattern in a string with another string. Return the number of substitutions.\n    '''\n    return re.sub(pattern, replace, text, count=0, flags=re.I)\ndef subn_count(text,pattern,replace):\n    '''\n    Write a function to substitute a pattern in a string with another string. Return the number of substitutions.\n    '''\n    return re.subn(pattern, replace, text, count=0)\ndef subn_all(text,pattern,replace):\n    '''\n    Write a function to substitute a pattern in a string with another string. Return the number of substitutions.\n    '''\n    return re.subn(pattern, replace, text, count=0)\ndef subn_iter(text,pattern,replace):\n    '''\n    Write a function to substitute a pattern in a string with another string. Return the number of substitutions.\n    '''\n    return re.subn(pattern, replace, text, count=0, flags=re.I)\ndef split_find(text,pattern,maxsplit=0):\n    '''\n    Write a function to split a string with multiple delimiters and return the index of last occurrence of the pattern.\n    '''\n    return re.split(pattern, text, maxsplit)\ndef split_all(text,pattern,maxsplit=0):\n    '''\n    Write a function to split a string with multiple delimiters and return the index of last occurrence of the pattern.\n    '''\n    return re.split(pattern, text, maxsplit)\ndef split_iter(text,pattern,maxsplit=0):\n    '''\n    Write a function to split a string with multiple delimiters and return the index of last occurrence of the pattern.\n    '''\n    return re.split(pattern, text, maxsplit)\ndef split_maxsplit(text,maxsplit=0):\n    '''\n    Write a function to split a string with multiple delimiters and return the index of last occurrence of the pattern.\n    '''\n    return re.split(r'\\s+', text, maxsplit)\ndef split_maxsplit_iter(text):\n    '''\n    Write a function to split a string with multiple delimiters and return the index of last occurrence of the pattern.\n    '''\n    return re.split(r'\\s+', text, maxsplit=0)\ndef split_finditer(text,pattern,maxsplit=0):\n    '''\n    Write a function to split a string with multiple delimiters and return the index of last occurrence of the pattern.\n    '''\n    return re.finditer(pattern, text, maxsplit)\ndef split_finditer_all(text,pattern,maxsplit=0):\n    '''\n    Write a function to split a string with multiple delimiters and return the index of last occurrence of the pattern.\n    '''\n    return re.finditer(pattern, text, maxsplit)\ndef split_findall(text,pattern,maxsplit=0):\n    '''\n    Write a function to split a string with multiple delimiters and return the index of last occurrence of the pattern.\n    '''\n    return re.findall(pattern, text, maxsplit)\ndef split_findall_iter(text,pattern,maxsplit=0):\n    '''\n    Write a function to split a string with multiple delimiters and return the index of last occurrence of the pattern.\n    '''\n    return re.finditer(pattern, text, maxsplit)\ndef split_findall_all(text,pattern,maxsplit=0):\n    '''\n    Write a function to split a string with multiple delimiters and return the index of last occurrence of the pattern.\n    '''\n    return re.findall(pattern, text, maxsplit)\ndef split_iter_all(text,pattern,maxsplit=0):\n    '''\n    Write a function to split a string with multiple delimiters and return the index of last occurrence of the pattern.\n    '''\n    return re.split(pattern, text, maxsplit)\ndef split_sub_all(text,pattern,replace,maxsplit=0):\n    '''\n    Write a function to split a string with multiple delimiters and substitute a pattern with another string.\n    '''\n    return re.subn(pattern, replace, text, maxsplit)\ndef split_sub_iter(text,pattern,replace,maxsplit=0):\n    '''\n    Write a function to split a string with multiple delimiters and substitute a pattern with another string.\n    '''\n    return re.subn(pattern, replace, text, maxsplit)\ndef split_sub_count(text,pattern,replace,maxsplit=0):\n    '''\n    Write a function to split a string with multiple delimiters and substitute a pattern with another string.\n    '''\n    return re.subn(pattern, replace, text, maxsplit)\ndef find_all_iter(text,pattern):\n    '''\n    Write a function to find all the occurrences of a pattern in a string. Return a list of all occurrences.\n    '''\n    return re.finditer(pattern, text)\ndef find_all_iter_all(text,pattern):\n    '''\n    Write a function to find all the occurrences of a pattern in a string. Return a list of all occurrences.\n    '''\n    return re.finditer(pattern, text)\ndef find_all_iter_count(text,pattern):\n    '''\n    Write a function to find all the occurrences of a pattern in a string. Return a list of all occurrences.\n    '''\n    return re.finditer(pattern, text, re.I)\ndef find_all_iter_count_all(text,pattern):\n    '''\n    Write a function to find all the occurrences of a pattern in a string. Return a list of all occurrences.\n    '''\n    return re.finditer(pattern, text, re.I)\ndef find_iter(text,pattern):\n    '''\n    Write a function to find all the occurrences of a pattern in a string. Return a list of all occurrences.\n    '''\n    return re.finditer(patter",
        "num_ids": 11
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return re.findall(pattern, text)\n    \ndef capital_replace(text):\n    '''\n    Write a function that takes a string and returns a string where every occurrence of its first char has been changed to '*'.\n    '''\n    result=text[0].lower()+text[1:]\n    return result\n    \ndef first_replace(text,letters):\n    '''\n    Write a function that takes a string and returns a string where every occurrence of a character other than the first has been changed to '*'.\n    '''\n    result = text[0]\n    for i in range(len(text)):\n        if text[i] not in letters:\n            result = result[0:i]+'*'+result[i+1:]\n    return result\n    \ndef first_replace_v2(text,letters):\n    '''\n    Write a function that takes a string and returns a string where every occurrence of a character other than the first has been changed to '*'.\n    '''\n    result = text[0]\n    for i in range(1,len(text)):\n        if text[i] not in letters:\n            result = result[0:i-1]+'*'+result[i:]\n    return result\n    \ndef split_string(text):\n    '''\n    Write a function that takes a string and returns a list of all the words in the string, while removing all whitespace and punctuation.\n    '''\n    result=text.split(' ')\n    for i in range(len(result)):\n        result[i]=result[i].strip('.,!?')\n    return result\n    \ndef remove_vowels(text):\n    '''\n    Write a function that takes a string and returns a string with all the vowels removed.\n    '''\n    vowel_list=['a','e','i','o','u','A','E','I','O','U']\n    result = ''\n    for i in range(len(text)):\n        if text[i] not in vowel_list:\n            result += text[i]\n    return result\n    \ndef replace_with_stars(text,letter_list):\n    '''\n    Write a function that takes a string and a list of characters. It should return a string with all characters other than the ones in the list replaced with '*'.\n    '''\n    result = ''\n    for i in range(len(text)):\n        if text[i] not in letter_list:\n            result += text[i]\n        else:\n            result += '*'\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print(re.search(pattern,text))\n    # print(text.find(pattern))\n",
        "num_ids": 25
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        return pattern, re.findall(pattern,text)\n    else:\n        return None\n    \ndef character_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        return pattern, re.findall(pattern,text)\n    else:\n        return None\n    \ndef find_substrings(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        return re.findall(pattern,text)\n    else:\n        return None\n        \ndef count_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return len(re.findall(pattern,text))\n    \ndef count_substrings(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return len(re.findall(pattern,text))\n",
        "num_ids": 16
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # return index of the pattern occurence in the text \n    if text.find(pattern)!= -1:\n        return [1,text.find(pattern)]\n    else:\n        return [0,0]\n",
        "num_ids": 54
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    result = 0\n    for index, value in enumerate(nums):\n        if (index % 2)!= 0:\n            if value % 2!= 0:\n                result += 1\n    if result == len(nums):\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_list=[]\n    for i in nums:\n        if (nums.index(i)%2==0):\n            odd_list.append(i)\n    if (len(odd_list)==len(nums)):\n        return True\n    else:\n        return False\n",
        "num_ids": 72
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(1, len(nums), 2):\n        if nums[index] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return False\n        elif i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n    \nnums1 = [23, 14, 56, 12, 19, 9, 15, 25, 31, 42, 43]\nprint(odd_position(nums1))\n",
        "num_ids": 109
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = nums[::2]\n    odd_number = [x for x in odd_index if x % 2 == 1]\n    if len(odd_number) == len(odd_index):\n        return True\n    else:\n        return False\n    \ndef test_odd_position():\n    assert(odd_position([3,2,5,6,7,8])) == True\n    assert(odd_position([4,5,6,8,9])) == False\n    assert(odd_position([1,2,3,4,5])) == False\n    assert(odd_position([2,4,6,8,10])) == True\n    assert(odd_position([2,4,6,8,10,12])) == False\n    assert(odd_position([1,2,3,4,5,6,7,8,9,10])) == True\n    assert(odd_position([2,4,6,8,10,12])) == True\n    assert(odd_position([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32])) == True\n    assert(odd_position([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34])) == False\n    assert(odd_position([1,2,3,4,5,6,7,8,9,10])) == True\n    assert(odd_position([2,3,4,5,6,7,8,9,10])) == False\n    assert(odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])) == True\n    assert(odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])) == False\n    assert(odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])) == True\n    assert(odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])) == False\n    assert(odd_position([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])) == False\n    assert(odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500])) == True\n    assert(odd_position([1,2,3,4,5,6,7,8",
        "num_ids": 2012
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if not nums:\n        return True\n    else:\n        if nums[0] % 2 == 0:\n            return False\n        else:\n            return odd_position(nums[1:])\n",
        "num_ids": 51
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    assert nums[0] % 2!= 0, 'First element should be odd'\n    odd_number_list = [nums[i] % 2!= 0 for i in range(0, len(nums))]\n    return odd_number_list\n",
        "num_ids": 63
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums)+1):\n        if i % 2!= 0 and nums[i-1] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # TODO: Write code to count vowels in given string\n    # HINT: Use python string methods\n",
        "num_ids": 27
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    result = 0\n    for i in range(len(test_str)):\n        if test_str[i] == \"a\" or test_str[i] == \"e\" or test_str[i] == \"i\" or test_str[i] == \"o\" or test_str[i] == \"u\":\n            if test_str[i-1] == \"a\" or test_str[i-1] == \"e\" or test_str[i-1] == \"i\" or test_str[i-1] == \"o\" or test_str[i-1] == \"u\" or test_str[i-1] == \"A\" or test_str[i-1] == \"E\" or test_str[i-1] == \"I\" or test_str[i-1] == \"O\" or test_str[i-1] == \"U\":\n                result += 1\n            if test_str[i+1] == \"a\" or test_str[i+1] == \"e\" or test_str[i+1] == \"i\" or test_str[i+1] == \"o\" or test_str[i+1] == \"u\" or test_str[i+1] == \"A\" or test_str[i+1] == \"E\" or test_str[i+1] == \"I\" or test_str[i+1] == \"O\" or test_str[i+1] == \"U\":\n                result += 1\n        elif test_str[i] == \"A\" or test_str[i] == \"E\" or test_str[i] == \"I\" or test_str[i] == \"O\" or test_str[i] == \"U\":\n            if test_str[i-1] == \"a\" or test_str[i-1] == \"e\" or test_str[i-1] == \"i\" or test_str[i-1] == \"o\" or test_str[i-1] == \"u\" or test_str[i-1] == \"A\" or test_str[i-1] == \"E\" or test_str[i-1] == \"I\" or test_str[i-1] == \"O\" or test_str[i-1] == \"U\":\n                result += 1\n            if test_str[i+1] == \"a\" or test_str[i+1] == \"e\" or test_str[i+1] == \"i\" or test_str[i+1] == \"o\" or test_str[i+1] == \"u\" or test_str[i+1] == \"A\" or test_str[i+1] == \"E\" or test_str[i+1] == \"I\" or test_str[i+1] == \"O\" or test_str[i+1] == \"U\":\n                result += 1\n    return result\n",
        "num_ids": 688
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_nbr = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in 'aeiouAEIOU' and test_str[i + 1] in 'aeiouAEIOU':\n            vowel_nbr += 1\n",
        "num_ids": 74
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    count = 0\n    for i in range(0, len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count = count + 1\n    return count\n",
        "num_ids": 77
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    num_vowels = 0\n    for i, char in enumerate(test_str):\n        if char in vowels:\n            if i!= 0:\n                if test_str[i-1] in vowels:\n                    num_vowels += 1\n            if i!= len(test_str)-1:\n                if test_str[i+1] in vowels:\n                    num_vowels += 1\n    return num_vowels\n",
        "num_ids": 122
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = \"abcd\"\n    #print(test_str.index(\"a\"))\n    #print(test_str[0])\n    #print(test_str[0][0])\n    result = 0\n    for i in range(len(test_str)):\n        if test_str[i][0] in \"aeiouAEIOU\":\n            if test_str[i][1] in \"aeiouAEIOU\":\n                result += 1\n    return result\n",
        "num_ids": 117
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u' or test_str[i] == 'A' or test_str[i] == 'E' or test_str[i] == 'I' or test_str[i] == 'O' or test_str[i] == 'U':\n            if i!= len(test_str)-1:\n                if test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u' or test_str[i+1] == 'A' or test_str[i+1] == 'E' or test_str[i+1] == 'I' or test_str[i+1] == 'O' or test_str[i+1] == 'U':\n                    count += 1\n                if test_str[i-1] == 'a' or test_str[i-1] == 'e' or test_str[i-1] == 'i' or test_str[i-1] == 'o' or test_str[i-1] == 'u' or test_str[i-1] == 'A' or test_str[i-1] == 'E' or test_str[i-1] == 'I' or test_str[i-1] == 'O' or test_str[i-1] == 'U':\n                    count += 1\n    return count\n",
        "num_ids": 425
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    str_len = len(test_str)\n    vowel_count = 0\n",
        "num_ids": 34
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiouAEIOU')\n    return sum(1 for c in test_str if c in vowels)\n    \nprint(count_vowels('apple'))\nprint(count_vowels('aardvark'))\nprint(count_vowels('a'))\nprint(count_vowels('aeiou'))\nprint(count_vowels('hippopotamus'))\n",
        "num_ids": 105
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return sum([1 for i in range(len(test_str)) if test_str[i] in \"aeiouAEIOU\"])\n    \ndef is_valid_parenthese(test_str):\n    '''\n    Write a function to determine if a given string is valid. Valid strings have matching pairs of characters, like \"{}\", \"()\" and \"[]\", as well as not containing any other characters other than '{', '[' or ']'\n    '''\n    open_p = '([{'\n    close_p = ')]}'\n    valid = True\n    i = 0\n    while i < len(test_str) and valid:\n        if test_str[i] in open_p:\n            index = open_p.index(test_str[i])\n            if close_p[index]!= test_str[i]:\n                valid = False\n            i+=1\n        elif test_str[i] in close_p:\n            valid = False\n            i+=1\n        else:\n            valid = False\n            i+=1\n    return valid\n",
        "num_ids": 146
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    result = 0\n    seen = set()\n    for x in arr:\n        if x not in seen:\n            result += x\n            seen.add(x)\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return (sum(set(arr))) \n",
        "num_ids": 13
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in arr:\n        if i not in arr[arr.index(i)+1:]:\n            sum+=i\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for num in arr:\n        if arr.count(num)>1:\n            pass\n        else:\n            sum=sum+num\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sums = 0\n    for i in range(len(arr)): \n        if arr[abs(arr[i]) - 1] > 0: \n            arr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1] \n        else: \n            sums += abs(arr[i]) \n    return sums \n",
        "num_ids": 88
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[abs(arr[i]) - 1] >= 0:\n            arr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1]\n        else:\n            sum += abs(arr[i])\n    return sum\n",
        "num_ids": 80
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in set(arr):\n        sum += i \n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for x in arr:\n        if arr.count(x) == 1:\n            sum += x\n    return sum\n    # Code here\n",
        "num_ids": 40
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # arr = [1, 2, 3, 4, 2, 3, 4, 1, 6, 7, 8]\n    \n    # dictionary to store value and frequency\n    my_dict = {}\n    for i in arr:\n        if i not in my_dict:\n            my_dict[i] = 1\n        else:\n            my_dict[i] += 1\n    \n    # list to store keys with frequency equal to 1\n    my_list = []\n    \n    for key, value in my_dict.items():\n        if value == 1:\n            my_list.append(key)\n    \n    # sum of elements of list\n    return sum(my_list)\n    \n    \nprint(find_sum([1, 2, 3, 4, 2, 3, 4, 1, 6, 7, 8]))\n",
        "num_ids": 195
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # List to store the non-repeated elements\n    non_repeated = [] \n    # Traverse the list\n    for i in range(0, len(arr)): \n        # If the element is not already present in the non_repeated list, append it.\n        if arr[i] not in non_repeated: \n            non_repeated.append(arr[i]) \n    # Return the sum of the non-repeated elements\n    return sum(non_repeated) \n",
        "num_ids": 119
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    out = [[k, len(list(g))] for k, g in groupby(list1)]\n    print(out)\n    return out\ndef pack_consecutive_duplicates(list1):\n    # using list comprehension\n    from itertools import groupby\n    out = [len(list(g)) for k, g in groupby(list1)]\n    print(out)\n    return out\npack_consecutive_duplicates([1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 6])\n",
        "num_ids": 142
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n        else:\n            list2[list2.index(i)] = [i] + list2[list2.index(i)][:]\n            list2[list2.index(i)] = list(list2[list2.index(i)])[1]\n    return list2\n",
        "num_ids": 101
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n",
        "num_ids": 21
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = sorted(list1)\n    new_list = []\n    for i,j in groupby(list1):\n        new_list.append(list(j))\n    print(new_list)\n",
        "num_ids": 52
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        print list(group)\ndef print_stars(n):\n    '''\n    Write a Python program to print all positive integers with more than one digit,\n    such that all digits are exactly the same, in ascending order.\n    '''\n    i=1\n    while i<10:\n        for j in range(1,10):\n            if j==i:\n                print i,\n            i=i+1\n        print\ndef nth_prime(n):\n    '''\n    Write a Python program to find the Nth prime number\n    '''\n    prime=[]\n    for num in range(1,1000):\n        flag=1\n        for i in range(2,num):\n            if num%i==0:\n                flag=0\n        if flag:\n            prime.append(num)\n    return prime[n-1]\ndef lcm(x,y):\n    '''\n    Write a Python program to compute the LCM of two numbers.\n    '''\n    a=max(x,y)\n    while True:\n        if a%x==0 and a%y==0:\n            return a\n        else:\n            a+=1\ndef prime_factors(n):\n    '''\n    Write a Python program to print the prime factors of a given number.\n    '''\n    while n % 2 == 0:\n        print 2\n        n = n / 2\n    for i in range(3, int(n), 2):\n        while n % i == 0:\n            print i\n            n = n / i\ndef print_fibonacci(n):\n    '''\n    Write a Python program to print the first n terms of the fibonacci sequence.\n    '''\n    x, y = 0, 1\n    while True:\n        if x>n:\n            break\n        print(x)\n        x, y = y, x+y\ndef swap_case(s):\n    '''\n    Write a Python function to swap cases.\n    '''\n    return s.swapcase()\ndef digital_root(n):\n    '''\n    Write a Python function to get the digital root of a number.\n    '''\n    sum=0\n    temp=n\n    while temp>0:\n        sum+=temp%10\n        temp=temp/10\n    return sum\ndef palindrome_number(n):\n    '''\n    Write a Python program to check whether a number is palindrome or not.\n    '''\n    temp=n\n    rev=0\n    while temp>0:\n        rev=rev*10+temp%10\n        temp=temp/10\n    if n==rev:\n        return True\n    else:\n        return False\ndef check_pandigital(n):\n    '''\n    Write a Python program to check whether a string is pandigital or not.\n    '''\n    temp=n\n    temp=temp.split(\"\")\n    if len(temp)==len(set(temp)):\n        return True\n    else:\n        return False\ndef longest_consec(str, n):\n    '''\n    Write a Python function to print the longest substring of consecutive characters.\n    '''\n    i=0\n    j=0\n    temp=str[0]\n    while True:\n        if j==len(str)-1:\n            break\n        else:\n            if str[j]==str[j+1]:\n                temp=temp+str[j+1]\n                j+=1\n            else:\n                if len(temp)>len(str[i:j+1]):\n                    str=str[i:j+1]\n                break\n        i+=1\n    return temp\ndef single_letter_count(str, ch):\n    '''\n    Write a Python function to count the number of times a given letter occurs in a string.\n    '''\n    count=0\n    for i in str:\n        if i==ch:\n            count+=1\n    return count\ndef double_letters(str):\n    '''\n    Write a Python function to count the number of times a letter occurs in a given word (case-insensitively).\n    '''\n    count={}\n    for i in str:\n        if i not in count:\n            count[i]=1\n        else:\n            count[i]+=1\n    return count\ndef balanced(str):\n    '''\n    Write a Python function to check whether a string is balanced or not.\n    '''\n    open_list=[\"[\",\"{\",\"(\"]\n    close_list=[\"]\",\"}\",\")\"]\n    stack=[]\n    for i in str:\n        if i in open_list:\n            stack.append(i)\n        elif i in close_list:\n            pos=close_list.index(i)\n            if (len(stack)>0) and (open_list[pos]==stack[len(stack)-1]):\n                stack.pop()\n            else:\n                return False\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef reverse_vowels(str):\n    '''\n    Write a Python function to reverse vowels of a string.\n    '''\n    vowels=[\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"]\n    str=list(str)\n    i=0\n    j=len(str)-1\n    while i<j:\n        if str[i] in vowels and str[j] in vowels:\n            str[i],str[j]=str[j],str[i]\n            i+=1\n            j-=1\n        elif str[i] in vowels:\n            j-=1\n        elif str[j] in vowels:\n            i+=1\n        else:\n            i+=1\n            j-=1\n    return \"\".join(str)\ndef make_readable(seconds):\n    '''\n    Write a Python function to convert a given number of seconds into days, hours, minutes, and seconds.\n    '''\n    day=0\n    hour=0\n    minute=0\n    second=0\n    while seconds>=86400:\n        day+=1\n        seconds-=86400\n    while seconds>=3600:\n        hour+=1\n        seconds-=3600\n    while seconds>=60:\n        minute+=1\n        seconds-=60\n    return [day,hour,minute,second]\ndef find_the_duplicate(nums):\n    '''\n    Write a Python function to find the duplicate number in a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] in nums[i+1:]:\n            return nums[i]\ndef find_outlier(integers):\n    '''\n    Write a Python function to find the outlier in a given list of integers.\n    '''\n    odds=0\n    evens=0\n    for i in integers:\n        if i%2==0:\n            evens+=1\n        else:\n            odds+=1\n    if odds>evens:\n        for i in integers:\n            if i%2==0:\n                return i\n    elif evens>odds:\n        for i in integers:\n            if i%2==1:\n                return i\n    else:\n        return integers\ndef last_occurrence(str,ch):\n    '''\n    Write a Python function to find the index of the last occurrence of a character in a given string.\n    '''\n    temp=str\n    i=len(str)-1\n    j=0\n    while True:\n        if j==i:\n            break\n        else:\n            if ch==temp[i]:\n                j=i\n                i-=1\n            else:\n                i-=1\n    return j\ndef rotate_matrix(m):\n    '''\n    Write a Python function to rotate the given square matrix 90 degrees clockwise.\n    '''\n    n=len(m)\n    for i in range(n):\n        for j in range(i,n):\n            m[i][j],m[j][i]=m[j][i],m[i][j]\n    for i in range(n):\n        m[i]=m[i][::-1]\n    return m\ndef has_unique_chars(str):\n    '''\n    Write a Python function to chec",
        "num_ids": 10
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    l=list1\n    l1=[]\n    for k, v in groupby(l):\n        l1.append(list(v))\n    return l1\n",
        "num_ids": 42
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list=[]\n    for item,group in groupby(list1):\n        new_list.append(list(group))\n    return new_list\n",
        "num_ids": 40
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n",
        "num_ids": 21
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for ele, group in groupby(list1)]\n",
        "num_ids": 21
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = [1,2,3,4,5,6,7,4,5,6,7]\n    list2 = [1,2,3,4,5,6,7,8,9,10,11,12]\n    list3 = [0,0,0,0,0,0,0,0,0,0,0,0]\n    i = 0\n    list3[i] = list1[0]\n    while i < len(list1) - 1:\n        if list1[i] == list1[i+1]:\n            list3[i] = list1[i]\n            i = i + 1\n        else:\n            list3[i] = list1[i]\n            i = i + 1\n    i = 0\n    list3[i] = list2[0]\n    while i < len(list2) - 1:\n        if list2[i] == list2[i+1]:\n            list3[i] = list2[i]\n            i = i + 1\n        else:\n            list3[i] = list2[i]\n            i = i + 1\n    list3.sort()\n    return list3\n",
        "num_ids": 284
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1.sort()\n    sub_list_dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)-i-1):\n            if list1[j] == list1[j+1]:\n                continue\n            else:\n                list1[j],list1[j+1] = tuple(list1[j]),tuple(list1[j+1])\n                sub_list_dict[list1[j]] = sub_list_dict.get(list1[j],0)+1\n                sub_list_dict[list1[j+1]] = sub_list_dict.get(list1[j+1],0)+1\n                break\n    return sub_list_dict\n",
        "num_ids": 177
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        result[tuple(sublist)] = list1.count(sublist)\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dict = {}\n    for i in range(len(list1)):\n        temp = tuple(list1[i])\n        if temp not in list_dict:\n            list_dict[temp] = 1\n        else:\n            list_dict[temp] += 1\n    return list_dict\n",
        "num_ids": 73
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1.sort()\n    i=0\n    for x in list1:\n        if x == list1[i]:\n            i += 1\n            print(i)\n    \n    #unique = set(list1)\n    #print(unique)\n    #x = len(list1)\n    #print(x)\n    #y = sum(list1)\n    #print(y)\n    #dict1 = {}\n    #dict1[tuple(list1)] = x\n    #print(dict1)\n    \n",
        "num_ids": 127
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            sublists.append(tuple(list1[i:j+1]))\n    sublists = set(sublists)\n    return dict((x, sublists.count(x)) for x in sublists)\n",
        "num_ids": 86
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def unique_list(list1):\n        unique = []\n        for i in list1:\n            if i not in unique:\n                unique.append(i)\n        return tuple(unique)\n    def list_count(list1):\n        tuple_list = []\n        for i in unique_list(list1):\n            tuple_list.append((i, list1.count(i)))\n        return tuple(tuple_list)\n    return list_count(list1)\n",
        "num_ids": 116
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(tuple(list1[i]))\n",
        "num_ids": 37
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #initialise a dictionary with a list of length 1 as the key and value 0 as the key\n    d = {tuple([list1[0]]):0}\n    for i in range(1,len(list1)):\n        #create a copy of the dictionary\n        d_copy = d.copy()\n        #iterate through the dictionary\n        for j in d_copy:\n            #if the list is the same as another list in the dictionary, add 1 to the value of the list\n            if list1[i] in j:\n                d[j] += 1\n            #if the list is not the same as another list in the dictionary, create a new key in the dictionary for the new list\n            else:\n                d[tuple(list1[i])] = 1\n    #return the dictionary\n    return d\n",
        "num_ids": 191
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_uniques = []\n    for item in list1:\n        if item not in list_uniques:\n            list_uniques.append(item)\n    uniques = tuple(list_uniques)\n    print(uniques)\n    counter = 0\n    list_of_tuples = []\n    for item in list1:\n        list_of_tuples.append(tuple(item))\n    print(list_of_tuples)\n    for item in uniques:\n        for list_item in list_of_tuples:\n            if item == list_item:\n                counter += 1\n        tuple_item = (item,counter)\n        counter = 0\n        list_of_tuples = []\n        list_of_tuples.append(tuple_item)\n    print(list_of_tuples)\n    return dict(list_of_tuples)\n",
        "num_ids": 211
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #Turning every sublist into a tuple\n    list1 = [tuple(x) for x in list1]\n    #A dictionary to count all the sublists\n    dictionary = {}\n    #iterating through every sublist\n    for lst in list1:\n        #If the sublist is already in the dictionary\n        if lst in dictionary:\n            #Incrementing the value of the sublist\n            dictionary[lst] += 1\n        else:\n            #If the sublist is not in the dictionary\n            dictionary[lst] = 1\n    return dictionary\n",
        "num_ids": 137
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Find all combinations of sum in a list of tuple\n    # using itertools.combinations()\n    # hint: combination() with itertools.permutations()\n    com = combinations(test_list, 2)\n    for i in com:\n        print(i)\n",
        "num_ids": 66
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for x in test_list:\n        if sum(x) == 10:\n            return x\n    return 0\n",
        "num_ids": 29
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    length_of_test_list = len(test_list)\n    for i in range(length_of_test_list):\n        first_item = test_list[i]\n        for j in range(i+1,length_of_test_list):\n            second_item = test_list[j]\n            for k in range(j+1,length_of_test_list):\n                third_item = test_list[k]\n                if (first_item+second_item) == third_item:\n                    result.append((first_item,second_item,third_item))\n    return result\ndef find_triplets(test_list):\n    '''\n    Write a function to find the triplets of numbers in a list that add up to a particular sum\n    '''\n    result = []\n    length_of_test_list = len(test_list)\n    for i in range(length_of_test_list):\n        first_item = test_list[i]\n        for j in range(i+1,length_of_test_list):\n            second_item = test_list[j]\n            for k in range(j+1,length_of_test_list):\n                third_item = test_list[k]\n                if first_item+second_item == third_item:\n                    result.append((first_item,second_item,third_item))\n    return result\ndef find_all_combinations(test_list,sum):\n    '''\n    Write a function to find all the combinations of a list that adds to a specific sum\n    '''\n    result = []\n    length_of_test_list = len(test_list)\n    for i in range(length_of_test_list):\n        first_item = test_list[i]\n        for j in range(i+1,length_of_test_list):\n            second_item = test_list[j]\n            if first_item+second_item == sum:\n                result.append((first_item,second_item))\n    return result\ndef find_all_possible_combinations(test_list):\n    '''\n    Write a function to find all the possible combinations of a list\n    '''\n    result = []\n    length_of_test_list = len(test_list)\n    for i in range(length_of_test_list):\n        first_item = test_list[i]\n        for j in range(i+1,length_of_test_list):\n            second_item = test_list[j]\n            result.append((first_item,second_item))\n    return result\ndef find_subsets(test_list):\n    '''\n    Write a function to find all the possible subsets of a list\n    '''\n    result = []\n    for i in range(len(test_list)+1):\n        result.extend(combinations(test_list,i))\n    return result\ndef find_all_subsets(test_list):\n    '''\n    Write a function to find all the possible subsets of a list\n    '''\n    result = []\n    for i in range(len(test_list)+1):\n        result.extend(combinations(test_list,i))\n    return result\ndef find_all_permutations(test_list):\n    '''\n    Write a function to find all the possible permutations of a list\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.extend(permutations(test_list,i+1))\n    return result\ndef find_sum_of_list(test_list):\n    '''\n    Write a function to find the sum of all the elements in a list\n    '''\n    sum = 0\n    for item in test_list:\n        sum = sum + item\n    return sum\ndef find_sum_of_subset(test_list,subset):\n    '''\n    Write a function to find the sum of all the elements in a subset\n    '''\n    sum = 0\n    for item in subset:\n        sum = sum + item\n    return sum\ndef find_sum_of_list_without_repetitions(test_list):\n    '''\n    Write a function to find the sum of all the elements in a list without repetitions\n    '''\n    sum = 0\n    temp_list = []\n    for item in test_list:\n        if item not in temp_list:\n            sum = sum + item\n            temp_list.append(item)\n    return sum\ndef find_factorial(test_number):\n    '''\n    Write a function to find the factorial of a number\n    '''\n    result = 1\n    for i in range(1,test_number+1):\n        result = result*i\n    return result\ndef find_all_subsets_without_repetition(test_list):\n    '''\n    Write a function to find all the possible subsets of a list without repetition\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.extend(combinations(test_list,i))\n    return result\ndef find_all_permutations_without_repetition(test_list):\n    '''\n    Write a function to find all the possible permutations of a list without repetition\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.extend(permutations(test_list,i+1))\n    return result\ndef find_all_possible_combinations_without_repetition(test_list):\n    '''\n    Write a function to find all the possible combinations of a list without repetition\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.extend(combinations(test_list,i+1))\n    return result\ndef find_greatest_product_of_three(test_list):\n    '''\n    Write a function to find the greatest product of three numbers in a list\n    '''\n    max = 0\n    for i in range(len(test_list)-2):\n        for j in range(i+1,len(test_list)-1):\n            for k in range(j+1,len(test_list)):\n                if test_list[i]*test_list[j]*test_list[k] > max:\n                    max = test_list[i]*test_list[j]*test_list[k]\n    return max\ndef find_unique_elements(test_list):\n    '''\n    Write a function to find the unique elements in a list\n    '''\n    temp_list = []\n    for item in test_list:\n        if item not in temp_list:\n            temp_list.append(item)\n    return temp_list\ndef find_all_sublists(test_list):\n    '''\n    Write a function to find all the possible sublists of a list\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.extend(combinations(test_list,i))\n    return result\ndef find_max_elements_in_list(test_list):\n    '''\n    Write a function to find the max number in a list\n    '''\n    max = test_list[0]\n    for i in range(1,len(test_list)):\n        if test_list[i] > max:\n            max = test_list[i]\n    return max\ndef find_min_elements_in_list(test_list):\n    '''\n    Write a function to find the min number in a list\n    '''\n    min = test_list[0]\n    for i in range(1,len(test_list)):\n        if test_list[i] < min:\n            min = test_list[i]\n    return min\ndef find_common_elements_in_lists(list1,list2):\n    '''\n    Write a function to find common elements in two lists\n    '''\n    temp_list = []\n    for item in list1:\n        if item in list2:\n            temp_list.append(item)\n    return temp_list\ndef find_max_elements_in_list",
        "num_ids": 52
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # set comprehension to set all the combinations of two numbers\n    comb = {sum(i) for i in combinations(test_list, 2)}\n    print(comb)\n    print(sum(comb))\n",
        "num_ids": 49
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = []\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list)):\n            if i!= j:\n                sums.append(test_list[i] + test_list[j])\n    return sums\n    ",
        "num_ids": 73
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [sum(i) for i in combinations(test_list, 2)] \n",
        "num_ids": 22
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = list(combinations(test_list, 2))\n    #print(comb_list)\n    return comb_list\n",
        "num_ids": 34
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for subset in combinations(test_list, 2):\n        if sum(subset) in test_list:\n            if (subset[0] + subset[1]) not in sum_list:\n                sum_list.append(subset[0] + subset[1])\n    return sum_list\n",
        "num_ids": 79
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_sums = set()\n    # Create a set of all the sums (tuples)\n    for i in test_list:\n        for j in i:\n            all_sums.add(j)\n    # Print the set\n    return all_sums\n",
        "num_ids": 65
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [sum(t) for t in combinations(test_list, 2) if sum(t) == 2020]\n",
        "num_ids": 29
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0 :\n            count = count+1\n    if count % 2 == 0:\n        return True\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1): \n        if (n % i == 0) : \n            \n            if (n / i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return(count)\n",
        "num_ids": 80
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    for i in range(1, n + 1) : \n        if (n % i == 0) : \n            divisors_count += 1\n    if (divisors_count % 2 == 0) : \n        return True\n    else : \n        return False\ndef is_prime(n) : \n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if (n <= 1) : \n        return False\n    if (n == 2) : \n        return True\n    if (n % 2 == 0) : \n        return False\n    max_divisor = math.floor(math.sqrt(n))\n    for i in range(3, 1 + max_divisor, 2) : \n        if (n % i == 0) : \n            return False\n    return True\ndef is_perfect(n) : \n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (sum_of_divisors == n) : \n        return True\n    else : \n        return False\ndef is_abundant(n) : \n    '''\n    Write a python function to check whether the number is abundant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (sum_of_divisors > n) : \n        return True\n    else : \n        return False\ndef is_super_abundant(n) : \n    '''\n    Write a python function to check whether the number is super abundant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (sum_of_divisors > n) : \n        return True\n    if (is_abundant(n)) : \n        return False\n    else : \n        return True\ndef is_deficient(n) : \n    '''\n    Write a python function to check whether the number is deficient or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (sum_of_divisors < n) : \n        return True\n    else : \n        return False\ndef is_transient(n) : \n    '''\n    Write a python function to check whether the number is transient or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (is_perfect(n)) : \n        return False\n    if (is_deficient(n)) : \n        return False\n    if (sum_of_divisors > n) : \n        return True\n    else : \n        return False\ndef is_twin_transient(n) : \n    '''\n    Write a python function to check whether the number is twin_transient or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (is_transient(n)) : \n        return False\n    if (is_transient(sum_of_divisors)) : \n        return True\n    else : \n        return False\ndef is_triangular(n) : \n    '''\n    Write a python function to check whether the number is triangular or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if (is_prime(n)) : \n        return False\n    else : \n        sum_of_divisors = 0\n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum_of_divisors += i\n        if ((sum_of_divisors * 2) == n) : \n            return True\n        else : \n            return False\ndef is_pentagonal(n) : \n    '''\n    Write a python function to check whether the number is pentagonal or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if (is_prime(n)) : \n        return False\n    else : \n        sum_of_divisors = 0\n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum_of_divisors += i\n        if (((24 * sum_of_divisors) + 1) == n) : \n            return True\n        else : \n            return False\ndef is_hexagonal(n) : \n    '''\n    Write a python function to check whether the number is hexagonal or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if (is_prime(n)) : \n        return False\n    else : \n        sum_of_divisors = 0\n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum_of_divisors += i\n        if (((8 * sum_of_divisors) + 1) == n) : \n            return True\n        else : \n            return False\ndef is_heptagonal(n) : \n    '''\n    Write a python function to check whether the number is heptagonal or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    if (is_prime(n)) : \n        return False\n    else : \n        sum_of_divisors = 0\n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum_of_divisors += i\n        if (((55 * sum_of_divisors) + 1) == n) : \n            return True\n        else : \n            return False\ndef is_octagonal(n) : \n    '''\n    Write a python function to check whether the number is octagonal or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    if (is_prime(n)) : \n        return False\n    else : \n        sum_of_divisors = 0\n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum_of_divi",
        "num_ids": 66
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    count = 0\n    while i <= math.sqrt(n):\n        if n%i == 0 :\n            if n/i == i :\n                count += 1\n            else :\n                count += 2\n        i += 1\n    if count%2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count \n",
        "num_ids": 78
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    i = 1\n    count = 0\n    while i < n : \n        if (n%i == 0) :\n            count = count + 1\n        i = i + 1\n    if (count%2 == 0) : \n        return True\n    else : \n        return False\n",
        "num_ids": 72
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    count = 0\n    while i <= n : \n        if n % i == 0 : \n            count = count + 1\n        i = i + 1\n    if count % 2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 67
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n % i ==0:\n            count+=1\n    if count%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # counter variable\n    cnt = 0\n    # prime number\n    for i in range(1, n + 1):\n        if n % i == 0:\n            cnt += 1\n    return cnt\n",
        "num_ids": 51
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) : \n        if n%i == 0 : \n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([arr[i:i+odd_len] for odd_len in range(1, len(arr)+1, 2) for i in range(len(arr)-odd_len+1)])\n",
        "num_ids": 50
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sums = []\n    for i in range(len(arr)):\n        sums.append(0)\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if j - i + 1 % 2 == 1:\n                sums[i] += arr[j]\n    print(sums)\n",
        "num_ids": 85
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sub_sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if (i < j) and (j-i+1)%2!=0:\n                sub_sum = sub_sum + sum(arr[i:j+1])\n    return sub_sum\n",
        "num_ids": 81
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    length = len(arr)\n    if length % 2 == 0:\n        length -= 1\n",
        "num_ids": 24
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    length = len(arr)\n    sum = 0\n    for i in range(length):\n        for j in range(i,length):\n            sum += arr[j]\n    return sum\n",
        "num_ids": 47
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n",
        "num_ids": 33
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    length = len(arr)\n    odd_sum = 0\n    for i in range(length):\n        #if (length - i) % 2!= 0:\n        if (length - i) % 2!= 0:\n            for j in range(i, length):\n                odd_sum += arr[j]\n    return odd_sum\n",
        "num_ids": 82
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if(j - i + 1) % 2!= 0:\n                sum += sum(arr[i:j+1])\n    return sum\n",
        "num_ids": 67
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            odd_length_sum += sum(arr[i:j+1])\n    return odd_length_sum\n",
        "num_ids": 64
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # arr = [1, 2, 2, 3, 5, 5, 6]\n    # expected_output = [9, 9, 11, 11, 13, 13, 16, 16, 18, 18]\n    # arr = [1,2,3,4,5,6]\n    # expected_output = [15, 15, 15, 15, 15, 15]\n    # arr = [1,2,3,4,5]\n    # expected_output = [11, 11, 11, 11, 11]\n    # arr = [1,2,3]\n    # expected_output = [9, 9, 9]\n    # arr = [1, 2, 3]\n    # expected_output = [9, 9]\n    # arr = [1, 1, 1]\n    # expected_output = [9, 9]\n",
        "num_ids": 196
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    h = round(h, 2)\n    s = round(s, 2)\n    v = round(v, 2)\n    return h, s, v\n",
        "num_ids": 230
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return int(h), s, v\n",
        "num_ids": 202
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "num_ids": 196
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    diff = max_color - min_color\n    if max_color == min_color:\n        h = 0\n    elif max_color == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif max_color == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    elif max_color == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n    s = 0 if max_color == 0 else diff / max_color\n    v = max_color\n    return h, s, v\n",
        "num_ids": 179
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    v = max_val\n    if max_val == min_val:\n        h = 0\n        s = 0\n    elif max_val == r:\n        h = 60.0 * ((g - b) / (max_val - min_val))\n        s = ((max_val - min_val) / max_val) * 255\n    elif max_val == g:\n        h = 60.0 * ((b - r) / (max_val - min_val)) + 120\n        s = ((max_val - min_val) / max_val) * 255\n    else:\n        h = 60.0 * ((r - g) / (max_val - min_val)) + 240.0\n        s = ((max_val - min_val) / max_val) * 255\n    return h, s, v\n",
        "num_ids": 250
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    v = max_color\n    if v == 0:\n        return (0, 0, 0)\n    s = (max_color-min_color)/max_color\n    if max_color == r:\n        h = (60*(g-b)/(max_color-min_color))+360\n    elif max_color == g:\n        h = (60*(b-r)/(max_color-min_color))+120\n    elif max_color == b:\n        h = (60*(r-g)/(max_color-min_color))+240\n    return (round(h,2), round(s,2), round(v,2))\n",
        "num_ids": 190
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    for index, value in enumerate(list1):\n        if value % 2 == 0:\n            even = value\n        else:\n            odd = value\n    return even, odd\n",
        "num_ids": 44
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n    return product\n",
        "num_ids": 34
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    #if len(list1)<=1:\n    #    return 0\n    if not list1:\n        return 0\n    \n    odd_list = []\n    even_list = []\n    even_product = 1\n    odd_product = 1\n",
        "num_ids": 62
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    pass\n    total = 1\n    for x in list1:\n        if x % 2 == 0:\n            total *= x\n    return total\n    \n    \ndef name_score(names):\n    '''\n    Write a function to find the sum of ASCII values of each name.\n    '''\n    pass\n    total = 0\n    for x in names:\n        total += sum([ord(y) for y in x])\n    return total\n    \n    \ndef prime(n):\n    '''\n    Write a function to find whether a given number is a prime number or not.\n    '''\n    pass\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n    \n    \ndef rotate(n, d):\n    '''\n    Write a function to rotate a list of n elements to the left by d units.\n    '''\n    pass\n    n = list(n)\n    return n[d:] + n[:d]\n    \n    \ndef remove_dups(s):\n    '''\n    Write a function to remove duplicates from a given string.\n    '''\n    pass\n    s = list(s)\n    new_s = []\n    for x in s:\n        if x not in new_s:\n            new_s.append(x)\n    return new_s\n    \n    \ndef list_overlap(l1, l2):\n    '''\n    Write a function to return the common elements from two lists.\n    '''\n    pass\n    for x in l1:\n        if x in l2:\n            print(x)\n            \n            \ndef sec_biggest(nums):\n    '''\n    Write a function to return the second largest number in a list.\n    '''\n    pass\n    nums = list(nums)\n    nums.sort()\n    return nums[-2]\n    \n    \ndef balance(s):\n    '''\n    Write a function to check whether a given string is balanced or not. A string is said to be balanced if it has as many opening brackets as closing brackets.\n    '''\n    pass\n    stack = []\n    for x in s:\n        if x == '(' or x == '{' or x == '[':\n            stack.append(x)\n        if x == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n        if x == '}':\n            if not stack or stack.pop()!= '{':\n                return False\n        if x == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    if stack:\n        return False\n    return True\n    \n    \ndef brackets(s):\n    '''\n    Write a function to check whether a given string has balanced set of brackets.\n    '''\n    pass\n    stack = []\n    for x in s:\n        if x == '(' or x == '{' or x == '[':\n            stack.append(x)\n        if x == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n        if x == '}':\n            if not stack or stack.pop()!= '{':\n                return False\n        if x == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    if stack:\n        return False\n    return True\n    \n    \ndef missing_char(s, n):\n    '''\n    Write a function to find the missing character in a string.\n    '''\n    pass\n    if n == 1:\n        return chr(ord(s[0]) + 1)\n    i = 0\n    while i < len(s):\n        if ord(s[i]) == ord(s[0]) + n:\n            i += n\n        else:\n            return chr(ord(s[i]) + 1)\n    return chr(ord(s[0]) + n)\n    \n    \ndef add_prefix(prefix, s):\n    '''\n    Write a function to add prefix to every string in a list.\n    '''\n    pass\n    new_list = []\n    for x in s:\n        new_list.append(prefix + x)\n    return new_list\n    \n    \ndef longest_prefix(s1, s2):\n    '''\n    Write a function to find the longest common prefix between two strings.\n    '''\n    pass\n    i = 0\n    while i < min(len(s1), len(s2)):\n        if s1[i] == s2[i]:\n            i += 1\n        else:\n            break\n    return s1[:i]\n    \n    \ndef majority_count(items):\n    '''\n    Write a function to return the majority element in a list.\n    '''\n    pass\n    count = {}\n    for x in items:\n        if x not in count:\n            count[x] = 1\n        else:\n            count[x] += 1\n    return max(count, key = count.get)\n    \n    \ndef list_combo(n):\n    '''\n    Write a function to return all combinations of n elements from the list.\n    '''\n    pass\n    result = []\n    for x in range(n):\n        for y in range(x + 1, n):\n            result.append([x, y])\n    return result\n    \n    \ndef next_bigger(n):\n    '''\n    Write a function to find the next bigger number with the same digits as a given number.\n    '''\n    pass\n    n = list(str(n))\n    i = len(n) - 1\n    while i > 0 and n[i - 1] <= n[i]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(n) - 1\n    while n[j] <= n[i - 1]:\n        j -= 1\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = reversed(n[i:])\n    n = ''.join(n)\n    return int(n)\n    \n    \ndef min_factor(n):\n    '''\n    Write a function to find the smallest number which is evenly divisible by all numbers from 1 to n.\n    '''\n    pass\n    result = 1\n    for x in range(2, n + 1):\n        if result % x!= 0:\n            result = int(result * x / gcd(x, result))\n    return result\n    \n    \ndef spiral_order(matrix):\n    '''\n    Write a function to return the spiral order traversal of a matrix.\n    '''\n    pass\n    m = len(matrix)\n    if m == 0:\n        return []\n    n = len(matrix[0])\n    if n == 0:\n        return []\n    result = []\n    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    row, col = 0, 0\n    i = 0\n    while len(result) < m * n:\n        result.append(matrix[row][col])\n        matrix[row][col] = None\n        if row == 0 and col == n - 1:\n            i = 0\n            move = moves[i]\n            row += move[0]\n            col += move[1]\n        elif row == m - 1 and col == 0:\n            i = 1\n            move = moves[i]\n            row += move[0]\n            col += move[1]\n        elif row == m - 1 and col == n - 1:\n            i = 2\n            move = moves[i]\n            row += move[0]\n            col += move[1]\n        elif row == 0 and col == 0:\n            i = 3\n            move = moves[i]\n            row += move[0]\n            col += move[1]\n        elif col == n - 1:\n            i = (i + 1) % 4\n            move = moves[i]\n            row += move[0]\n            col += move[1]\n        elif row == m - 1:\n            i = (i + 1) % 4\n            move = moves[i]\n            row += move[0]\n            col += move[1]\n        elif col == 0:\n            i = (",
        "num_ids": 401
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    prod = 1\n    for i in list1:\n        if i%2 == 0:\n            prod*=i\n        else:\n            pass\n    return prod\n",
        "num_ids": 45
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    p=1\n    for i in list1:\n        if i%2==0:\n            p=p*i\n        else:\n            p=p*i\n    return p\n    \nprint(mul_even_odd([1,2,3,4,5,6]))\n",
        "num_ids": 71
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product1 = 1\n    product2 = 1\n    for i in list1:\n        if i % 2 == 0:\n            product1 *= i\n        else:\n            product2 *= i\n    return product1, product2\n    ",
        "num_ids": 58
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # This function multiply the first even number with the first odd number.\n    # list1= list(map(int, input().split()))\n    i=0\n    result=1\n    for num in list1:\n        if i%2==0:\n            result=result*num\n        i=i+1\n    return result",
        "num_ids": 79
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    even = []\n    odd = []\n    \n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return(even, odd)\n        \ndef mul_even_odd_v2(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    even = [list1[i] for i in range(len(list1)) if i % 2 == 0]\n    odd = [list1[i] for i in range(len(list1)) if i % 2!= 0]\n    return(even, odd)\n",
        "num_ids": 67
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for index, num in enumerate(list1):\n        if index % 2 == 0:\n            prod = prod * num\n        else:\n            prod = prod * num\n    return prod\n",
        "num_ids": 54
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(item) for item in test_str.split(',')])\n",
        "num_ids": 23
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.split(',')\n    return tuple(map(int, test_str))\n",
        "num_ids": 29
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not isinstance(test_str, str):\n        return None\n    return tuple(int(item) for item in test_str[1:-1].split(','))\n",
        "num_ids": 43
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_int_tuple = (int(num) for num in test_str.split(','))\n    return str_int_tuple\n",
        "num_ids": 36
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n    pass\n    \nprint(tuple_str_int('1,2,3,4')",
        "num_ids": 44
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    list_str = test_str.split(', ')\n    return tuple(map(int, list_str))\n",
        "num_ids": 30
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_tuple = []\n    for i in range(len(test_str)):\n        if i == 0:\n            new_tuple.append(int(test_str[i]))\n        else:\n            new_tuple.append(int(test_str[i]))\n    return tuple(new_tuple)\n    \n    \ndef tuple_int_str(test_tuple):\n    '''\n    Write a function to convert integer tuple to string tuple.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tuple)):\n        if i == 0:\n            new_tuple += test_tuple[i]\n        else:\n            new_tuple += test_tuple[i]\n    return new_tuple\n    \n    \ndef tuple_add(test_tuple1, test_tuple2):\n    '''\n    Write a function to add two tuple.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tuple1)):\n        if i == 0:\n            new_tuple += (test_tuple1[i] + test_tuple2[i], )\n        else:\n            new_tuple += (test_tuple1[i] + test_tuple2[i], )\n    return new_tuple\n    \n    \ndef tuple_max(test_tuple):\n    '''\n    Write a function to find the max value in tuple.\n    '''\n    max_value = test_tuple[0]\n    for i in range(len(test_tuple)):\n        if max_value < test_tuple[i]:\n            max_value = test_tuple[i]\n    return max_value\n    \n    \ndef tuple_min(test_tuple):\n    '''\n    Write a function to find the min value in tuple.\n    '''\n    min_value = test_tuple[0]\n    for i in range(len(test_tuple)):\n        if min_value > test_tuple[i]:\n            min_value = test_tuple[i]\n    return min_value\n    \n    \ndef tuple_size(test_tuple):\n    '''\n    Write a function to find the size of tuple.\n    '''\n    return len(test_tuple)\n    \n    \ndef tuple_concatenate(test_tuple1, test_tuple2):\n    '''\n    Write a function to concatenate two tuple.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tuple1)):\n        if i == 0:\n            new_tuple += (test_tuple1[i], test_tuple2[i], )\n        else:\n            new_tuple += (test_tuple1[i], test_tuple2[i], )\n    return new_tuple\n    \n    \ndef tuple_multiply(test_tuple1, test_tuple2):\n    '''\n    Write a function to multiply two tuple.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tuple1)):\n        if i == 0:\n            new_tuple += (test_tuple1[i] * test_tuple2[i], )\n        else:\n            new_tuple += (test_tuple1[i] * test_tuple2[i], )\n    return new_tuple\n    \n    \ndef tuple_reverse(test_tuple):\n    '''\n    Write a function to reverse tuple.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tuple)):\n        if i == 0:\n            new_tuple += (test_tuple[i], )\n        else:\n            new_tuple += (test_tuple[len(test_tuple) - 1 - i], )\n    return new_tuple\n    \n    \ndef tuple_count(test_tuple, test_item):\n    '''\n    Write a function to count the number of times a tuple appears in the tuple.\n    '''\n    count = 0\n    for i in range(len(test_tuple)):\n        if test_tuple[i] == test_item:\n            count += 1\n    return count\n    \n    \ndef tuple_index(test_tuple, test_item):\n    '''\n    Write a function to find the index of tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if test_tuple[i] == test_item:\n            return i\n    return None\n    \n    \ndef tuple_all_index(test_tuple, test_item):\n    '''\n    Write a function to find all index of tuple.\n    '''\n    index_list = []\n    for i in range(len(test_tuple)):\n        if test_tuple[i] == test_item:\n            index_list.append(i)\n    return index_list\n    \n    \ndef tuple_any_index(test_tuple, test_item):\n    '''\n    Write a function to find any index of tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if test_tuple[i] == test_item:\n            return i\n    return None\n    \n    \ndef tuple_index_list(test_tuple, test_item):\n    '''\n    Write a function to find the index of tuple in the list.\n    '''\n    index_list = []\n    for i in range(len(test_tuple)):\n        if test_tuple[i] == test_item:\n            index_list.append(i)\n    return index_list\n    \n    \ndef tuple_index_list_all(test_tuple, test_item):\n    '''\n    Write a function to find the index of tuple in the list.\n    '''\n    index_list = []\n    for i in range(len(test_tuple)):\n        if test_tuple[i] == test_item:\n            index_list.append(i)\n    return index_list\n    \n    \ndef tuple_index_list_any(test_tuple, test_item):\n    '''\n    Write a function to find the index of tuple in the list.\n    '''\n    for i in range(len(test_tuple)):\n        if test_tuple[i] == test_item:\n            return i\n    return None\n    \n    \ndef tuple_sort(test_tuple):\n    '''\n    Write a function to sort tuple.\n    '''\n    return tuple(sorted(test_tuple))\n    \n    \ndef tuple_sort_reverse(test_tuple):\n    '''\n    Write a function to sort tuple in reverse.\n    '''\n    return tuple(sorted(test_tuple, reverse=True))\n    \n    \ndef tuple_reverse_sort(test_tuple):\n    '''\n    Write a function to reverse sort tuple.\n    '''\n    return tuple(sorted(test_tuple, reverse=False))\n    \n    \ndef tuple_reverse_sort_reverse(test_tuple):\n    '''\n    Write a function to reverse sort tuple in reverse.\n    '''\n    return tuple(sorted(test_tuple, reverse=True))\n    \n    \ndef tuple_unique(test_tuple):\n    '''\n    Write a function to remove duplicate element in tuple.\n    '''\n    return tuple(set(test_tuple))\n    \n    \ndef tuple_unique_sort(test_tuple):\n    '''\n    Write a function to sort the tuple and remove duplicate element in tuple.\n    '''\n    return tuple(sorted(tuple(set(test_tuple))))\n    \n    \ndef tuple_unique_sort_reverse(test_tuple):\n    '''\n    Write a function to sort the tuple and remove duplicate element in tuple in reverse.\n    '''\n    return tuple(sorted(tuple(set(test_tuple)), reverse=True))\n    \n    \ndef tuple_unique_sort_reverse_unique(test_tuple):\n    '''\n    Write a function to sort the tuple, remove duplicate element in tuple, and sort the tuple in reverse and remove duplicate element in tuple in reverse.\n    '''\n    return tuple(sorted(tuple",
        "num_ids": 11
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tup_str = test_str.replace('(', '').replace(')', '').split(',')\n    tup_int = [int(i) for i in tup_str]\n    return tuple(tup_int)\n",
        "num_ids": 59
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # return tuple([int(i) for i in test_str.split(\",\")])\n    return tuple([i for i in test_str.split(\",\")])\n",
        "num_ids": 42
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(num) for num in test_str[1:-1].split(','))\n",
        "num_ids": 26
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a)-1\n    while l <= r:\n        mid = (l+r)/2\n        if x > a[mid]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\n",
        "num_ids": 64
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    for i in range(l):\n        if x <= a[i]:\n            return i\n    return l\n",
        "num_ids": 36
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    i = bisect.bisect(a,x)\n    if x < a[i-1]:\n        return i\n    else:\n        return i-1\n",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = -1\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n",
        "num_ids": 64
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    for i in range(n):\n        if x < a[i]:\n            return i\n    return n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    for i in range(n):\n        if x > a[i]:\n            return i\n    return n\ndef right_insertion_wrapper(a, x):\n    return right_insertion(a, x)\ndef left_insertion_wrapper(a, x):\n    return left_insertion(a, x)\ndef right_insertion_wrapper_wrapper(a, x):\n    return right_insertion_wrapper(a, x)\ndef left_insertion_wrapper_wrapper(a, x):\n    return left_insertion_wrapper(a, x)\ndef first_element(a):\n    return a[0]\ndef last_element(a):\n    return a[-1]\ndef is_sorted(a):\n    '''\n    Write a function to determine whether a specified array of integers is sorted.\n    '''\n    for i in range(len(a) - 1):\n        if a[i] > a[i + 1]:\n            return False\n    return True\ndef is_sorted_wrapper(a):\n    return is_sorted(a)\ndef merge_sort(a, compare = first_element):\n    '''\n    Implement the merge sort algorithm, which sorts an array.\n    '''\n    n = len(a)\n    if n < 2:\n        return a\n    m = int(n / 2)\n    b = merge_sort(a[:m])\n    c = merge_sort(a[m:])\n    d = merge(b, c, compare)\n    return d\ndef merge(a, b, compare = first_element):\n    '''\n    Write a function to merge two sorted arrays.\n    '''\n    m = len(a)\n    n = len(b)\n    d = []\n    i = 0\n    j = 0\n    while i < m and j < n:\n        if compare(a[i], b[j]) < 0:\n            d.append(a[i])\n            i += 1\n        else:\n            d.append(b[j])\n            j += 1\n    while i < m:\n        d.append(a[i])\n        i += 1\n    while j < n:\n        d.append(b[j])\n        j += 1\n    return d\ndef merge_sort_wrapper(a, compare = first_element):\n    return merge_sort(a, compare)\ndef quick_sort(a, compare = first_element):\n    '''\n    Implement the quick sort algorithm, which sorts an array.\n    '''\n    n = len(a)\n    if n < 2:\n        return a\n    p = a[0]\n    b = []\n    c = []\n    for i in range(1, n):\n        if compare(a[i], p) < 0:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    d = quick_sort(b, compare) + [p] + quick_sort(c, compare)\n    return d\ndef quick_sort_wrapper(a, compare = first_element):\n    return quick_sort(a, compare)\ndef is_prime(n):\n    '''\n    Write a function to determine whether a specified number is prime.\n    '''\n    if n <= 3:\n        return n > 1\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef is_prime_wrapper(n):\n    return is_prime(n)\ndef prime_factors(n):\n    '''\n    Write a function to determine all the prime factors of a specified number.\n    '''\n    d = 2\n    p = []\n    while n >= d * d:\n        if n % d == 0:\n            n //= d\n            p.append(d)\n        else:\n            d += 1\n    p.append(n)\n    return p\ndef prime_factors_wrapper(n):\n    return prime_factors(n)\ndef is_palindrome(s):\n    '''\n    Write a function to determine whether a specified string is a palindrome.\n    '''\n    s = s.lower()\n    n = len(s)\n    for i in range(n // 2):\n        if s[i]!= s[n - 1 - i]:\n            return False\n    return True\ndef is_palindrome_wrapper(s):\n    return is_palindrome(s)\ndef reverse(s):\n    '''\n    Write a function to reverse a specified string.\n    '''\n    n = len(s)\n    for i in range(n // 2):\n        s[i], s[n - 1 - i] = s[n - 1 - i], s[i]\n    return s\ndef reverse_wrapper(s):\n    return reverse(s)\ndef is_anagram(s, t):\n    '''\n    Write a function to determine whether two specified strings are anagrams.\n    '''\n    s = s.lower()\n    t = t.lower()\n    n = len(s)\n    m = len(t)\n    if n!= m:\n        return False\n    d = {}\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    for c in t:\n        if c in d:\n            d[c] -= 1\n        else:\n            d[c] = 1\n    for k in d.keys():\n        if d[k]!= 0:\n            return False\n    return True\ndef is_anagram_wrapper(s, t):\n    return is_anagram(s, t)\ndef get_max_product(a):\n    '''\n    Write a function to get the product of the largest and second largest values in an array.\n    '''\n    m1 = m2 = m3 = float('-inf')\n    for i in range(len(a)):\n        if a[i] > m1:\n            m3 = m2\n            m2 = m1\n            m1 = a[i]\n        elif a[i] > m2:\n            m3 = m2\n            m2 = a[i]\n        elif a[i] > m3:\n            m3 = a[i]\n    return m1 * m2 * m3\ndef get_max_product_wrapper(a):\n    return get_max_product(a)\ndef get_sum_product(a):\n    '''\n    Write a function to get the product of the sum of all the values in an array.\n    '''\n    m = 0\n    for i in range(len(a)):\n        m += a[i]\n    return m * get_sum_product(a)\ndef get_sum_product_wrapper(a):\n    return get_sum_product(a)\ndef get_sum_of_squares(a):\n    '''\n    Write a function to get the sum of the squares of all the values in an array.\n    '''\n    m = 0\n    for i in range(len(a)):\n        m += a[i] * a[i]\n    return m\ndef get_sum_of_squares_wrapper(a):\n    return get_sum_of_squares(a)\ndef get_sum_of_even_values(a):\n    '''\n    Write a function to get the sum of all the even values in an array.\n    '''\n    m = 0\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            m += a[i]\n    return m\ndef get_sum_of_even_values_wrapper(a):\n    return get_sum_of_even_values(a)\ndef get_sum_of_odd_values(a):\n    '''\n    Write a function to get the sum of all the odd values in an array.\n    '''\n    ",
        "num_ids": 3
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a):\n        return i\n    else:\n        return len(a)\n",
        "num_ids": 43
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if x < a[mid]:\n            right = mid - 1\n        elif x > a[mid]:\n            left = mid + 1\n        else:\n            return mid\n    return left\n",
        "num_ids": 85
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if x in a:\n        return a.index(x)\n    elif x > a[n-1]:\n        return n\n    elif x < a[0]:\n        return 0\n    else:\n        for i in range(n):\n            if a[i] > x and a[i-1] < x:\n                return i\n",
        "num_ids": 92
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi)//2\n        if x < a[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n",
        "num_ids": 62
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n    \ndef right_insertion_recursive(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = 0\n    while index < len(a) and x > a[index]:\n        index += 1\n    return index\n    \ndef find_rotation_point(a):\n    '''\n    Write a function that finds the point at which a rotation of a sorted list of numbers starts.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return 0\n    if len(a) == 2:\n        return 0\n    pivot = len(a) // 2\n    if a[pivot] > a[pivot + 1]:\n        return pivot + 1\n    left = find_rotation_point(a[:pivot])\n    right = find_rotation_point(a[pivot:])\n    return left + right\n",
        "num_ids": 117
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = 'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n",
        "num_ids": 43
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = \"ab{3}a\"\n    if re.search(pattern, text):\n        return \"match\"\n    else:\n        return \"no match\"\n    \n    # return'match' if text.find('ab{3}a')!= -1 else 'no match'\n",
        "num_ids": 70
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    return result!= None\n",
        "num_ids": 35
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r\"ab{3}\", text)\n",
        "num_ids": 18
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    return result!= None\n",
        "num_ids": 35
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return bool(re.search(r\"\\ba.{3}b\\b\",text))\n",
        "num_ids": 25
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    def text_match_three(text):\n      patterns = 'ab{3}'\n      if re.search(patterns, text):\n          return('Found a match!')\n      else:\n          return('Not matched!')\n      return('Done!')\n    print(text_match_three(text))\n",
        "num_ids": 76
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"ab{3}a\")\n    result = pattern.search(text)\n    return result!= None\n",
        "num_ids": 36
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.findall(r\"ab{3}\", text)\n    if result:\n        return \"Match!\"\n    else:\n        return \"No Match!\"\n",
        "num_ids": 42
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    return('Not matched!')\n",
        "num_ids": 40
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n",
        "num_ids": 15
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)\n",
        "num_ids": 15
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return(tuple(test_list), tuple(test_str))\n",
        "num_ids": 19
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n",
        "num_ids": 16
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list.append(test_str)\n    return tuple(test_list)\n",
        "num_ids": 23
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Make sure there is a string and list provided in the function\n    if len(test_str) == 0 or len(test_list) == 0:\n        return 'No string or list provided.'\n    # Try to join the string and list with a comma\n    try:\n        new_tup = test_str.join(test_list)\n    # Raise exception if the join fails\n    except:\n        raise Exception('The join process failed.')\n    # Return the joined string or list\n    return new_tup\n",
        "num_ids": 122
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n",
        "num_ids": 16
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # def new_tuple(test_str, test_list):\n    #     return tuple(test_list), tuple(test_str)\n",
        "num_ids": 36
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for num in nums:\n        if (nums.index(num) % 2 == 1) and (num % 2!= 0):\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if not i % 2 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if type(nums) == list:\n        return all(n % 2 == 0 for n in nums[::2])\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    odd_index = []\n    for i, num in enumerate(nums):\n        if i % 2!= 0 and num % 2!= 0:\n            odd_index.append(i)\n    if len(odd_index) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2==0:\n            if nums[i]%2!=0:\n                return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    i = 0\n    while i < len(nums):\n        if i % 2 == 0 and nums[i] % 2 == 1:\n            return False\n        i = i + 1\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for x in range(0, len(nums), 2):\n        if nums[x] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    \n    even_position = False\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_position = True\n            else:\n                even_position = False\n                break\n    return even_position\n",
        "num_ids": 75
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #print('input tuples:', test_tup)\n    #print('\\n')\n    count = 0\n    while count < len(test_tup):\n        if isinstance(test_tup[count], tuple):\n            #print('is a tuple:', test_tup[count])\n            test_tup.remove(test_tup[count])\n        else:\n            count += 1\n    #print('\\n')\n    #print('final result:', test_tup)\n    return test_tup\n",
        "num_ids": 128
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for tup in test_tup:\n        if type(tup)!= tuple:\n            new_tup = new_tup + (tup,)\n        else:\n            new_tup = new_tup + remove_nested(tup)\n    return new_tup\n",
        "num_ids": 79
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for sub in test_tup:\n        if type(sub) == tuple:\n            for item in sub:\n                new_tup.append(item)\n        else:\n            new_tup.append(sub)\n    return new_tup\n",
        "num_ids": 70
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in test_tup:\n        if type(i) == tuple:\n            test_tup.remove(i)\n    return test_tup\n",
        "num_ids": 40
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        return test_tup\n    elif len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        return test_tup[0] if test_tup[0]!= tuple else remove_nested(test_tup[1:])\n",
        "num_ids": 86
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for tup in test_tup:\n        if type(tup) == tuple:\n            new_tup += (tuple,)\n        else:\n            new_tup += (tup,)\n    return new_tup\n",
        "num_ids": 65
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    return_list = []\n    for tuple in test_tup:\n        if tuple not in return_list:\n            return_list.append(tuple)\n    return tuple(return_list)\n",
        "num_ids": 51
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    nested_removed = list(filter(lambda tup: any(not isinstance(i, tuple) for i in tup), test_tup))\n    return tuple(nested_removed)\n",
        "num_ids": 52
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda t: isinstance(t, tuple), test_tup))\n",
        "num_ids": 24
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) == list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in input_list:\n        if isinstance(i, list):\n            counter += 1\n",
        "num_ids": 31
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    result = 0\n    for i in input_list:\n        if type(i) == list:\n            result += 1\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) == list:\n            count += 1\n",
        "num_ids": 31
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count=0\n    for i in input_list:\n        if isinstance(i, list):\n            count+=1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list: \n        if isinstance(i, list): \n            count = count + 1\n    return count \n",
        "num_ids": 40
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count=0\n    for i in input_list:\n        if type(i) == type([]):\n            count+=1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count +=1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = start + (end - start)//2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or arr[mid+1]!= x:\n                return mid\n            else:\n                start = mid+1\n        elif x > arr[mid]:\n            start = mid+1\n        else:\n            end = mid-1\n",
        "num_ids": 110
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Solution 1:\n    if not arr or len(arr) == 0:\n        return -1\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start+end) // 2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or x!= arr[mid+1]:\n                return mid\n            else:\n                start = mid + 1\n        elif arr[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n",
        "num_ids": 133
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left=0\n    right=len(arr)-1\n    while left<=right:\n        mid=left+(right-left)//2\n        if arr[mid]==x:\n            if mid==right or arr[mid+1]!=x:\n                return mid\n            else:\n                left=mid+1\n        elif arr[mid]>x:\n            right=mid-1\n        else:\n            left=mid+1\n",
        "num_ids": 107
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]<x:\n            low=mid+1\n        elif arr[mid]>x:\n            high=mid-1\n        else:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                low=mid+1\n    return -1\n",
        "num_ids": 114
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    while(low<=high):\n        mid=(low+high)//2\n        if(arr[mid]>x):\n            high=mid-1\n        elif(arr[mid]<x):\n            low=mid+1\n        else:\n            if(mid==0 or arr[mid-1]!=arr[mid]):\n                return mid\n            else:\n                high=mid-1\n    return None\narr=[1,2,2,2,3,4,7,9,9]\nx=2\nprint(last(arr,x))\n",
        "num_ids": 150
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if x < arr[mid]:\n            high = mid - 1\n        elif x > arr[mid]:\n            low = mid + 1\n        else:\n            if mid == n-1 or x!= arr[mid+1]:\n                return mid\n            else:\n                low = mid + 1\n    return -1\n",
        "num_ids": 117
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    l,r = 0,n-1\n    while l<=r:\n        m = l+(r-l)//2\n        if arr[m]<x:\n            l = m+1\n        elif arr[m]>x:\n            r = m-1\n        else:\n            if m==n-1 or arr[m+1]!=arr[m]:\n                return m\n            else:\n                r = m-1\n    return -1\n    \ndef last_elem(arr):\n    n = len(arr)\n    if n==0:\n        return -1\n    if n==1:\n        return 0\n    return last(arr, arr[n-1])\n    \nprint(last_elem([1,2,3,3,3,3,4,7,8,9]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 10, 10]))\nprint(last_elem([1,2,3,3,3,3,4,7,8,9, 1",
        "num_ids": 2015
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    first = 0\n    last = len(arr) - 1\n    while (first <= last):\n        mid = (first + last)//2\n        if arr[mid] == x:\n            if (mid == len(arr) - 1) or (arr[mid + 1] > x):\n                return mid\n            else:\n                first = mid + 1\n        elif arr[mid] > x:\n            last = mid - 1\n        else:\n            first = mid + 1\n    return -1\n",
        "num_ids": 119
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return False\n    start=0\n    end=len(arr)-1\n    while start<=end:\n        mid=(start+end)//2\n        if x==arr[mid]:\n            if mid==len(arr)-1:\n                return mid\n            elif x==arr[mid+1]:\n                return mid+1\n            else:\n                return mid\n        elif x>arr[mid]:\n            start=mid+1\n        else:\n            end=mid-1\n    return False\n",
        "num_ids": 130
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] == x and arr[mid-1]!= x:\n            return mid\n        elif arr[mid] <= x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n",
        "num_ids": 94
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = 'a.*b$'\n    if re.search(pattern, text):\n        print('Matched')\n    else:\n        print('Not matched')\n    return\ntext_starta_endb('aaabbbb')\ntext_starta_endb('accbbb')\ntext_starta_endb('aabababa')\n",
        "num_ids": 84
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = pattern.search(text)\n    return result.group() if result else None\n",
        "num_ids": 38
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return text.startswith('a') and text.endswith('b')\n",
        "num_ids": 22
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'a.*b')\n    mo = regex.search(text)\n    if mo!= None:\n        print(mo.group())\n    else:\n        print('None')\n",
        "num_ids": 54
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = \"a.*?b\"\n    if re.search(regex, text):\n        print('YES! We have a match!')\n    else:\n        print('No match')\n",
        "num_ids": 48
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a.*b$', text)\n",
        "num_ids": 18
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # match = re.search(r'a[\\w]*b$', text)\n    # if match:\n    #     print(match)\n    #     print(match.group())\n    # else:\n    #     print(\"Nincs\")\n    # match = re.findall(r'a[\\w]*b$', text)\n    # if match:\n    #     print(match)\n    #     print(match[0])\n    # else:\n    #     print(\"Nincs\")\n    match = re.findall(r'^.*?a.*?b$', text, flags=re.I)\n    if match:\n        print(match)\n    else:\n        print(\"Nincs\")\n",
        "num_ids": 176
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    p = re.compile(r\"a.*b$\")\n    m = p.match(text)\n    if m:\n        return m.group()\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"a.+?b$\")\n    result = pattern.search(text)\n    if result:\n        return result.group()\n    return \"Nothing found!\"\nprint(text_starta_endb('bla-bla'))\nprint(text_starta_endb('bla-blabla'))\nprint(text_starta_endb('bla-bla-bla-bla-bla-b'))\n",
        "num_ids": 115
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a.b$',text)\n",
        "num_ids": 18
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k,v in dict.items():\n        total = total + v\n    return total\n",
        "num_ids": 29
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    tot = 0\n    for v in dict.values():\n        tot += v\n    return tot\n",
        "num_ids": 27
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for num in dict.values():\n        total += num\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for num in dict.values():\n        sum += num\n    return sum\n    \n",
        "num_ids": 27
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for key, value in dict.items():\n        sum +=value\n    print(sum)\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([x for x in range(n) if x % 2 == 1])\n",
        "num_ids": 22
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n):\n        if i % 2 == 1:\n            s = s + i\n    return s\n",
        "num_ids": 36
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n > 0 and n < 10000:\n        if n % 2 == 0:\n            return 0\n        else:\n            return n - 1\n    else:\n        return \"invalid input\"\n    \ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    if n > 0 and n < 10000:\n        if n % 2 == 1:\n            return 0\n        else:\n            return n - 1\n    else:\n        return \"invalid input\"\n    \ndef average(n): \n    '''\n    Write a python function to find the average of all natural numbers within the range l and r.\n    '''\n    if n > 0 and n < 10000:\n        return n / 2\n    else:\n        return \"invalid input\"\n",
        "num_ids": 31
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    if n < 0:\n        return \"Enter valid range\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    return n + sum_odd(n-2)\n",
        "num_ids": 56
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter lower limit: \"))\n    r = int(input(\"Enter upper limit: \"))\n    s = 0\n    for i in range(l,r+1):\n        if i%2!= 0:\n            s += i\n    print(s)\n    return s\n",
        "num_ids": 73
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd_number=0\n    for i in range(n):\n        if i%2!=0:\n            sum_odd_number=sum_odd_number+i\n    return sum_odd_number\n",
        "num_ids": 53
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # n = int(input(\"enter your number: \"))\n    l = int(input(\"enter your start number: \"))\n    r = int(input(\"enter your end number: \"))\n    n = r - l\n    print(n)\n    sum = 0\n    if l % 2 == 1:\n        for i in range(l+1,r+1):\n            sum = sum + i\n    else:\n        for i in range(l+1,r+1):\n            sum = sum + i\n    print(\"sum = \",sum)\n",
        "num_ids": 131
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(n) if i%2==1])\n",
        "num_ids": 22
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    assert type(n) == int, \"Input must be an integer\"\n    assert n > 0, \"Input must be greater than 0\"\n",
        "num_ids": 34
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(n+1):\n        if i % 2!= 0:\n            sum_odd += i\n    return sum_odd\n",
        "num_ids": 43
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n    \ndef _product(arr):\n    '''\n    Write a python function to find the product of an array.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product\n",
        "num_ids": 32
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for num in arr:\n        s += num\n    return s\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    total = 0\n    for i in arr:\n        total += i\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not arr:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n",
        "num_ids": 32
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #Add code here\n    sum=0\n    for i in arr:\n        sum+=i\n    return sum",
        "num_ids": 28
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        sum += arr[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    return arr[0] + _sum(arr[1:])\n",
        "num_ids": 32
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    left_rotate_result = 0\n    mask = 0b11111111 << (32 - d)\n    left_rotate_result = n & mask\n    return left_rotate_result\n",
        "num_ids": 47
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d)|(n >> (32-d)))&0xffffffff\n",
        "num_ids": 23
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if(n==0):\n        return 0\n    n = (n << d)|(n >> (32-d))\n    return n\n",
        "num_ids": 35
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff\n",
        "num_ids": 24
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32\n    n = n >> d\n    n = (n << 32) | (n >> (32-d))\n    return n & 0xffffffff\n",
        "num_ids": 43
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF >> (32 - d)\n    return (n << d) | (n >> (32 - d)) & mask\n",
        "num_ids": 35
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # one way:\n    return ((n << d)|(n >> (32 - d))) & 0xffffffff\n",
        "num_ids": 29
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    left_mask = 0b11100011 # 0b11111111111111101\n    right_mask = 0b11100110 # 0b1111111111101110\n    n_left = n & left_mask\n    n_right = n & right_mask\n    left_rotate_d = n_left >> d\n    return n_right | left_rotate_d\n",
        "num_ids": 89
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF >> (32 - d)\n    return (n << d) | (n >> (32 - d)) & mask\n",
        "num_ids": 35
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0b1 << d\n    return (n & mask) | (n << 32 - d)\n",
        "num_ids": 27
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n",
        "num_ids": 13
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\" \", \"\")\n    return text\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = r'\\s'\n    text = re.sub(pattern, '', text)\n    return text\n",
        "num_ids": 29
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r\"\\s+\", \"\", text)\n    return text\n",
        "num_ids": 24
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n",
        "num_ids": 13
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"[\\s]+\", \"\", text)\n",
        "num_ids": 18
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n",
        "num_ids": 14
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "num_ids": 9
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)\n",
        "num_ids": 19
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y and y == z\n",
        "num_ids": 12
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    def three_equal(x,y,z):\n        if x == y == z:\n            return 3\n        elif x == y or x == z or y == z:\n            return 2\n        else:\n            return 0\n",
        "num_ids": 58
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or z == x:\n        count = 2\n    elif (x == y and z!= x) or (y == z and x!= y) or (z == x and y!= z):\n        count = 1\n    else:\n        count = 0\n    return count\n",
        "num_ids": 91
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 3\n    elif x == y:\n        return 2\n    elif y == z:\n        return 2\n    elif x == z:\n        return 2\n    else:\n        return 0\n",
        "num_ids": 61
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n",
        "num_ids": 43
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    return 0\n",
        "num_ids": 39
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    if x == y and x == z:\n        count = 3\n    elif x == y or x == z:\n        count = 2\n    elif y == z:\n        count = 2\n    else:\n        count = 0\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return sum([x==y,y==z,z==x])-1\n",
        "num_ids": 21
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return(int(x==y==z))\n",
        "num_ids": 14
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    cnt = 0\n    for i in range(0, len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            cnt += 1\n    return cnt\n",
        "num_ids": 49
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    num_rotations=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]>arr[j]:\n                num_rotations+=1\n    return num_rotations\n",
        "num_ids": 65
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # count the number of swaps required\n    c = 0\n",
        "num_ids": 16
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    a=arr[0]\n    b=arr[1]\n    count=0\n    for i in range(n):\n        if i==0:\n            pass\n        elif arr[i]>a:\n            if b>=a:\n                pass\n            else:\n                count+=1\n            a=b\n            b=arr[i]\n        else:\n            if arr[i]>=b:\n                pass\n            else:\n                count+=1\n            b=arr[i]\n    count+=1\n    print(count)\n    return count\n",
        "num_ids": 144
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if not arr:\n        return -1\n    n = len(arr)\n    low = 0\n    high = n-1\n    mid = 0\n    while low < high:\n        mid = low + (high-low)//2\n        if arr[mid] < arr[high]:\n            high = mid\n        elif arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = high - 1\n    mid = low\n    left = 0\n    right = mid\n    rotations = 0\n    while left <= right and right < n:\n        if arr[left] <= arr[right]:\n            left += 1\n            rotations += 1\n        else:\n            right += 1\n    return rotations\n",
        "num_ids": 175
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    low = 0\n    high = n-1\n",
        "num_ids": 22
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #  (4, 3, 1, 2)\n",
        "num_ids": 15
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) <= 1:\n        return 0\n    i = 0\n    while i < len(arr):\n        if arr[i] > arr[i + 1]:\n            return i + 1\n        i = i + 1\n    return 0\n",
        "num_ids": 61
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Initialize the array\n    sorted_array = arr\n    n = len(arr)\n",
        "num_ids": 25
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    low = 0\n    high = n - 1\n    while(low < high):\n        if arr[low] > arr[high]:\n            return low\n        mid = (low + high)//2\n        if arr[mid] > arr[mid + 1]:\n            return mid + 1\n        if arr[low] <= arr[mid]:\n            low = mid + 1\n        else:\n            high = mid\n",
        "num_ids": 105
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n;  \n    y = int(math.sqrt(n)) \n    if (y * y == x) : \n        return True\n    else : \n        return False\n",
        "num_ids": 48
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2 :\n        return False\n    \n    start = 2\n    end = n // 2\n    while start <= end :\n        mid = (end + start) // 2\n        if mid * mid == n :\n            return True\n        if mid * mid < n :\n            start = mid + 1\n        else :\n            end = mid - 1\n    return False\n",
        "num_ids": 89
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    for i in range(n) :\n        if i*i == n :\n            return True\n        else :\n            return False\n    \n    \ndef is_perfect_square_b(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n // 2\n    while x * x > n :\n        x = (x + (n // x)) // 2\n    return x * x == n\n    \n    \n    \n    \ndef main():\n    \n    print('Testing is_perfect_square()...')\n    \n    for i in range(100) :\n        num = random.randint(1, 100)\n        if is_perfect_square(num)!= is_perfect_square_b(num) :\n            raise Exception('FAILED. Output of is_perfect_square() does not match that of is_perfect_square_b().')\n            \n    print('PASSED')\n    \n    \nif __name__ == '__main__':\n    main()\n    \n    ",
        "num_ids": 177
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n ** 0.5\n    return (int(sqrt) ** 2 == n)\n",
        "num_ids": 26
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n;\n    # Find binary representation of x\n    y = int(x % (1 << 32))\n    # Initialize result\n    ans = -1;\n",
        "num_ids": 42
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n ** 0.5\n    if (x - int(x) == 0) :\n        return True\n    else :\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    if x == 1:\n        return True\n",
        "num_ids": 18
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    x = int(math.sqrt(n))\n    return x * x == n\n",
        "num_ids": 34
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n;\n    y = 0\n    # Find odd and even factors\n    # of n\n    while ((x % 2) == 0):\n        y = 2\n        x = x / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while ((x % i) == 0):\n            y = i\n            x = x / i\n    # If n is a perfect square then\n    # y*y will be equal to x\n    if ((y * y) == n):\n        return 1\n    return 0\n",
        "num_ids": 135
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    if n == 0 :\n        return True\n    \n    if n <= 3:\n        return True\n    \n    if (n % 2 == 0) :\n        return False\n    \n    i = 3\n    while(i*i <= n) :\n        if (n % i == 0) :\n            return False\n        \n        i += 2\n    return True\n",
        "num_ids": 89
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for num in arr:\n        prod *= num\n    return prod % 2 == 0\n",
        "num_ids": 30
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n",
        "num_ids": 7
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product = product * num\n    if product % 2 == 0:\n        return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return (reduce(lambda x,y: x*y,arr)%2 == 0)\n",
        "num_ids": 25
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    result = 1\n    for i in arr:\n        result *= i\n",
        "num_ids": 20
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for x in arr:\n        product = product * x\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "num_ids": 28
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if (arr[0] % 2 == 0): \n        return True\n    else: \n        return False\n",
        "num_ids": 29
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(0, len(arr)):\n        if i==0:\n            if arr[i]%2==0:\n                return True\n            else:\n                return False\n        else:\n            if arr[i]%2==0:\n                continue\n            else:\n                return False\n",
        "num_ids": 74
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    newlist = []\n    for i in lists:\n        newlist.append(sum(i))\n    max_val = 0\n    for i in newlist:\n        if i > max_val:\n            max_val = i\n    print(max_val)\n    newlist = []\n    for i in lists:\n        if sum(i) == max_val:\n            newlist.append(i)\n    print(newlist)\n    return newlist\nmax_sum_list([[1, 2], [3], [3, 4]])\n",
        "num_ids": 132
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return None\n    else:\n        return max(lists, key = lambda x: sum(x))\n",
        "num_ids": 36
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_list = l\n            max_sum = sum(l)\n    return max_list\n",
        "num_ids": 58
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    else:\n        #temp = list(lists[0])\n        temp = lists[0]\n        #print(temp)\n        max_sum_list = [temp]\n        #print(max_sum_list)\n        max_sum = sum(temp)\n        for i in range(1,len(lists)):\n            for j in range(len(lists[i])):\n                if lists[i][j] >= lists[i-1][j]:\n                    temp[j] = lists[i][j]\n                else:\n                    temp[j] = lists[i-1][j]\n            if sum(temp) > max_sum:\n                max_sum = sum(temp)\n                max_sum_list = [temp]\n            elif sum(temp) == max_sum:\n                max_sum_list.append(temp)\n        #print(max_sum)\n        #print(max_sum_list)\n        return max_sum_list\n",
        "num_ids": 242
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    index_of_max_sum = 0\n    for list in lists:\n        if sum(list) > max_sum:\n            max_sum = sum(list)\n            index_of_max_sum = lists.index(list)\n    print(\"Index of maximum sum:\", index_of_max_sum)\n    return list\n",
        "num_ids": 87
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n    for list in lists:\n        if sum(list) == max([sum(list) for list in lists]):\n            result.append(list)\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max = 0\n    for i in range(len(lists)):\n        sum = 0\n        for j in range(len(lists[i])):\n            sum += lists[i][j]\n        if max < sum:\n            max = sum\n            index = i\n    return lists[index]\n    \n",
        "num_ids": 74
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        if sum(i) >= max_sum:\n            max_sum = sum(i)\n            max_list = i\n    return max_list\n",
        "num_ids": 58
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    final_list = []\n    # Solution 1\n    # best_sum = 0\n    # best_list = []\n    # for l in lists:\n    #     sum_l = sum(l)\n    #     if sum_l >= best_sum:\n    #         best_sum = sum_l\n    #         best_list = l\n    # print(best_list)\n",
        "num_ids": 92
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sorted_lists = sorted(lists, reverse = True)\n    return sorted_lists[0]\n",
        "num_ids": 26
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    max_count_char = \"\"\n",
        "num_ids": 18
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    count_max = 0\n    \n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            count += 1\n            if count > count_max:\n                count_max = count\n        else:\n            count = 1\n",
        "num_ids": 80
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # last_char = ''\n    # max_count = 0\n    # for char in test_str:\n    #     if char.isupper():\n    #         last_char = char\n    #         if char.isupper():\n    #             count = 1\n    #     else:\n    #         if last_char.isupper():\n    #             count += 1\n    #             if count > max_count:\n    #                 max_count = count\n    #         last_char = char\n    #         count = 0\n    # return max_count\n",
        "num_ids": 132
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n",
        "num_ids": 16
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_len = 0\n    for i in range(len(test_str)):\n        c = test_str[i]\n        if c.isupper():\n            max_len = max(max_len, 1)\n        elif c.islower():\n            max_len = max(max_len, 0)\n        else:\n            pass\n    return max_len\n",
        "num_ids": 91
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n    #return max([len([i for i in test_str if i.isupper()])])\n",
        "num_ids": 90
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    str_list = list(test_str)\n    max_length = 0\n    #since it can contain alphabets as well, we have to remove them\n    for i in range(len(str_list)):\n        if str_list[i].isalpha():\n            str_list[i] = None\n    #remove all the None items in the list\n    str_list = [ele for ele in str_list if ele]\n    print(str_list)\n    #now we have to iterate through the list and find the longest run of uppercase\n    for i in range(len(str_list)):\n        if str_list[i].isupper():\n            count = 0\n            for j in range(i,len(str_list)):\n                if str_list[j].isupper():\n                    count += 1\n                else:\n                    break\n            if count > max_length:\n                max_length = count\n    return max_length\n",
        "num_ids": 226
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    current_count = 0\n    for letter in test_str:\n        if letter.isupper():\n            current_count += 1\n        else:\n            current_count = 0\n        max_count = max(current_count,max_count)\n    return max_count\n",
        "num_ids": 73
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count = count + 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n    \n    \ntest_str = \"This is a test string\"\nprint(\"The maximum number of uppercase characters in the string is {}\".format(max_run_uppercase(test_str)))\n",
        "num_ids": 125
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run = 0\n    for i in test_str:\n        if i.isupper():\n            run += 1\n        else:\n            run = 0\n        if run > run_max:\n            run_max = run\n    return run_max\n    ",
        "num_ids": 61
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    def is_odd(num):\n        if num % 2 == 0:\n            return False\n        else:\n            return True\n    \n    return next((x for x in nums if is_odd(x)), None)\n",
        "num_ids": 56
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return 'No odd numbers in the list.'\n",
        "num_ids": 34
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odds = [num for num in nums if num % 2!= 0]\n    return odds[0] if len(odds) > 0 else None\n",
        "num_ids": 39
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    cnt = 0\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup[i])):\n            if test_tup[i][j] == K:\n                cnt += 1\n    return cnt\n",
        "num_ids": 66
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(K):\n        if test_tup[i] == 0:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for item in test_tup:\n        if item[1] == K:\n            return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in K:\n        if i in test_tup:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup = tuple(test_tup)\n    if test_tup in K:\n        return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for element in test_tup:\n        if element[0] == K:\n            return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K > len(test_tup):\n        return False\n    else:\n        return True\n",
        "num_ids": 26
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # YOUR CODE HERE\n    if(test_tup[0]==K[0] or test_tup[1]==K[1]):\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1] and test_tup1[2] < test_tup2[2]:\n        return True\n    elif test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1] and test_tup1[2] > test_tup2[2]:\n        return True\n    else:\n        return False\n",
        "num_ids": 131
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return False\n    elif test_tup1[1] > test_tup2[1]:\n        return False\n    elif test_tup1[2] > test_tup2[2]:\n        return False\n    else:\n        return True\n",
        "num_ids": 84
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # todo\n    # need to get index of each tuple then use index to check tuple 2\n    # index 1 in tuple 1 is greater than index 1 in tuple 2\n    # index 2 in tuple 1 is greater than index 2 in tuple 2\n",
        "num_ids": 56
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup2[0] > test_tup1[0]:\n        return False\n    elif test_tup2[0] < test_tup1[0]:\n        return True\n    elif test_tup2[1] > test_tup1[1]:\n        return False\n    elif test_tup2[1] < test_tup1[1]:\n        return True\n    elif test_tup2[2] > test_tup1[2]:\n        return False\n    elif test_tup2[2] < test_tup1[2]:\n        return True\n    else:\n        return False\n        \ndef check_tup(tup1, tup2):\n    '''\n    Write a function that takes two tuples and returns a tuple of booleans. \n    Each boolean represents whether the corresponding element in the first tuple is greater than the corresponding element in the second tuple.\n    '''\n    check_list = []\n    for x in tup1:\n        if x > tup2[0]:\n            check_list.append(True)\n        elif x < tup2[0]:\n            check_list.append(False)\n        else:\n            check_list.append(None)\n    for x in tup2:\n        if x > tup1[0]:\n            check_list.append(True)\n        elif x < tup1[0]:\n            check_list.append(False)\n        else:\n            check_list.append(None)\n    if None not in check_list:\n        return check_list\n    else:\n        return None\n    \ndef count_tup(tup, elem):\n    '''\n    Write a function to count the number of occurrences of a given element in a tuple.\n    '''\n    count = 0\n    for x in tup:\n        if x == elem:\n            count = count + 1\n    return count\n        \ndef mix_tup(tup1, tup2):\n    '''\n    Write a function to combine two tuples of the same size. \n    Each element in the output tuple is the pair from the two respective input tuples.\n    '''\n    new_tup = ()\n    for x in range(len(tup1)):\n        new_tup = new_tup + ((tup1[x], tup2[x]))\n    return new_tup\n    \ndef split_tup(tup):\n    '''\n    Write a function to split a tuple into two tuples. The first tuple should have all the even indexed elements, and the second all the odd indexed elements.\n    '''\n    even_tup = ()\n    odd_tup = ()\n    for x in range(len(tup)):\n        if x % 2 == 0:\n            even_tup = even_tup + (tup[x],)\n        else:\n            odd_tup = odd_tup + (tup[x],)\n    return even_tup, odd_tup\n    \ndef tuple_copy(tup):\n    '''\n    Write a function that returns a copy of a tuple.\n    '''\n    tup_copy = ()\n    for x in tup:\n        tup_copy = tup_copy + (x,)\n    return tup_copy\n    \ndef tuple_count(tup, elem):\n    '''\n    Write a function to return the number of times an element appears in a tuple.\n    '''\n    count = 0\n    for x in tup:\n        if x == elem:\n            count = count + 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[i] < test_tup2[i]:\n        return True\n    else:\n        return False\n    pass\n    \ndef list_tup_smaller(tup1, tup2):\n    '''\n    Write a function to find the total number of elements in the second tuple which are smaller than their corresponding element in the first tuple.\n    '''\n    smaller = 0\n    for i in range(len(tup1)):\n        if check_smaller(tup1, tup2):\n            smaller += 1\n        else:\n            pass\n    return smaller\n    pass\n    \ndef min_max(tup1):\n    '''\n    Write a function to find the minimum and maximum numbers in a tuple.\n    '''\n    max_num = 0\n    min_num = 1000\n    for i in range(len(tup1)):\n        if tup1[i] > max_num:\n            max_num = tup1[i]\n        elif tup1[i] < min_num:\n            min_num = tup1[i]\n        else:\n            pass\n    return (min_num, max_num)\n    pass\n    \ndef min_max_avg(tup1):\n    '''\n    Write a function to find the minimum, maximum and average numbers in a tuple.\n    '''\n    min_num = tup1[0]\n    max_num = tup1[0]\n    avg = 0\n    total = 0\n    for i in range(len(tup1)):\n        if tup1[i] > max_num:\n            max_num = tup1[i]\n        elif tup1[i] < min_num:\n            min_num = tup1[i]\n        else:\n            pass\n        total += tup1[i]\n    avg = total / len(tup1)\n    return (min_num, max_num, avg)\n    pass\n    \ndef int_tuple(tup1):\n    '''\n    Write a function to convert a tuple of strings to a tuple of integers.\n    '''\n    new_tup = ()\n    for i in range(len(tup1)):\n        new_tup += (int(tup1[i]),)\n    return new_tup\n    pass\n    \ndef math_operations(*args):\n    '''\n    Write a function that does three math operations in a tuple.\n    '''\n    res = ()\n    for i in range(len(args)):\n        if i == 0:\n            res = (args[i] + args[i+1] + args[i+2],)\n        elif i == 1:\n            res = (args[i] - args[i-1] - args[i+1],)\n        elif i == 2:\n            res = (args[i] * args[i-1] * args[i+1],)\n    return res\n    pass\n    \ndef math_operations2(*args):\n    '''\n    Write a function that does three math operations in a tuple.\n    '''\n    res = ()\n    for i in range(len(args)):\n        if i == 0:\n            res = (args[i] + args[i+1] + args[i+2],)\n        elif i == 1:\n            res = (args[i] - args[i-1] - args[i+1],)\n        elif i == 2:\n            res = (args[i] * args[i-1] * args[i+1],)\n    return res\n    pass\n",
        "num_ids": 121
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1 < test_tup2:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] >= test_tup2[0] and test_tup1[1] >= test_tup2[1] and test_tup1[2] >= test_tup2[2]:\n        return True\n    else:\n        return False\n",
        "num_ids": 70
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    #return all(test_tup2[i] < test_tup1[i] for i in range(len(test_tup2)))\n",
        "num_ids": 38
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # todo\n    #print(test_tup1)\n    #print(test_tup2)\n    #print(len(test_tup1))\n    #print(len(test_tup2))\n    for index in range(len(test_tup1)):\n        #print(test_tup2[index])\n        if test_tup2[index]>test_tup1[index]:\n            return False\n    return True\n",
        "num_ids": 112
    }
]