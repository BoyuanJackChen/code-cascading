[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the test tuple to sets and compare\n    return list(set(test_tup1).intersection(set(test_tup2)))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # initialize an empty list\n    shared = []\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [x for x in test_tup1 if x in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared.append(i)\n    return shared\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1).intersection(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            if tup1 == tup2:\n                print(tup1)\n                break\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = list(set(test_tup1).intersection(test_tup2))\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    common = []\n    for i in test_tup1:\n        if i in test_tup2:\n            common.append(i)\n    return common\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            similar_elements.append(item)\n    return similar_elements\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n == 3:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    is_prime = True\n    if n==1:\n        return is_prime\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            is_prime=False\n            break\n    return is_prime\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return True\n    else:\n        if n==2:\n            return False\n        else:\n            for i in range(2,math.ceil(math.sqrt(n))+1):\n                if n%i==0:\n                    return True\n            return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return False\n    elif n % 2 == 0:\n        return True\n    elif n % 3 == 0:\n        return True\n    else:\n        i = 5\n        while i*i <= n:\n            if n % i == 0 or n % (i+2) == 0:\n                return True\n            i += 6\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return True\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return True\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    sqr = int(math.sqrt(n))\n    for i in range(2, sqr+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)<n:\n        print(\"The list is too small.\")\n        return None\n    \n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,(-nums[i],i))\n    result=[]\n    for i in range(n):\n        result.append(nums[hq.heappop(heap)[1]])\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for i in range(n):\n        hq.heappush(max_heap, -nums[i])\n    for j in range(n,len(nums)):\n        max_heap.remove(-nums[j])\n        hq.heappush(max_heap, -nums[j])\n    return [-n for n in max_heap]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return None\n    hq.heapify(nums)\n    sorted_nums = []\n    for _ in range(n):\n        sorted_nums.append(hq.heappop(nums))\n    return sorted_nums[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap,(-num,num))\n    largest = []\n    while heap:\n        largest.append(hq.heappop(heap)[1])\n    return largest[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return []\n    \n    # Create a min heap\n    min_heap = []\n    for i in nums:\n        if len(min_heap) < n:\n            hq.heappush(min_heap,i)\n        else:\n            if i > min_heap[0]:\n                hq.heappop(min_heap)\n                hq.heappush(min_heap,i)\n    \n    # Return the heap\n    return min_heap\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for j in range(n,len(nums)):\n        if heap[0]<nums[j]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[j])\n    return list(heap)\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for j in range(n,len(nums)):\n        if heap[0]>nums[j]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[j])\n    return list(heap)\n    \ndef heap_queue_nlargest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    return list(heap)\n    \ndef heap_queue_nsmallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    return list(heap)\n    \ndef heap_queue_maxheap(nums,n):\n    '''\n    Write a function that takes in an array of integers and returns a max-heap.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    return heap\n    \ndef heap_queue_minheap(nums,n):\n    '''\n    Write a function that takes in an array of integers and returns a min-heap.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    return heap\n    \ndef heap_queue_nlargest_maxheap(nums,n):\n    '''\n    Write a function that takes in an array of integers and returns a max-heap with the largest n integers.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    return heap\n    \ndef heap_queue_nsmallest_minheap(nums,n):\n    '''\n    Write a function that takes in an array of integers and returns a min-heap with the smallest n integers.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    return heap\n    \ndef heap_queue_median(nums,n):\n    '''\n    Write a function to find the median of a given list of numbers.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    if len(heap)%2!=0:\n        return int(heap[len(heap)//2])\n    else:\n        return (int(heap[len(heap)//2])+int(heap[len(heap)//2-1]))/2\n    \ndef heap_queue_median_kth_largest(nums,k):\n    '''\n    Write a function to find the kth largest element in a given list of numbers.\n    '''\n    heap = []\n    for i in range(k):\n        hq.heappush(heap,nums[i])\n    for j in range(k,len(nums)):\n        if nums[j]>heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[j])\n    return heap[0]\n    \ndef heap_queue_median_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth smallest element in a given list of numbers.\n    '''\n    heap = []\n    for i in range(k):\n        hq.heappush(heap,nums[i])\n    for j in range(k,len(nums)):\n        if nums[j]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[j])\n    return heap[0]\n    \ndef heap_queue_median_kth_largest_kth_smallest(nums,k):\n    '''\n    Write a function to find the kth largest and kth smallest element in a given list of numbers.\n    '''\n    heap = []\n    kth_largest = []\n    kth_smallest = []\n    for i in range(k):\n        hq.heappush(heap,nums[i])\n    for j in range(k,len(nums)):\n        if nums[j]>heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[j])\n    while len(heap)!=0:\n        kth_largest.append(heap[0])\n        hq.heappop(heap)\n    for i in range(k):\n        hq.heappush(heap,nums[i])\n    for j in range(k,len(nums)):\n        if nums[j]<heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[j])\n    while len(heap)!=0:\n        kth_smallest.append(heap[0])\n        hq.heappop(heap)\n    return (kth_largest[len(kth_largest)//2],kth_smallest[len(kth_smallest)//2])\n    \ndef heap_queue_median_kth_largest_kth_smallest_without_heap(nums,k):\n    '''\n    Write a function to find the kth largest and kth smallest element in a given list of numbers.\n    '''\n    nums.sort()\n    return (nums[len(nums)//2],nums[len(nums)-(len(nums)//2)])\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    minheap = []\n    for i in range(n):\n        hq.heappush(minheap,-nums[i])\n    for i in range(n,len(nums)):\n        if nums[i] < -minheap[0]:\n            hq.heapreplace(minheap, -nums[i])\n    result = []\n    while minheap:\n        result.append(-hq.heappop(minheap))\n    return result[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap,num)\n        else:\n            if num > heap[0]:\n                hq.heappushpop(heap,num)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in nums:\n        hq.heappush(heap,i)\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(heap))\n    return res[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    print(hq.nlargest(n,nums))\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==0:\n        return False\n    while x > 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x&(x-1))==0: \n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True\n    while x!= 1: \n        if x % 2!= 0: \n            return False\n        x /= 2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 0): \n        return False; \n    while (x): \n        if (x & 1): \n            break; \n        x = x >> 1; \n    if (x == 1): \n        return True; \n    return False; \n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # If number is negative, return False\n    if x < 0:\n        return False\n    # If number is positive and does not have any 1s in its binary representation, return False\n    if x == 0:\n        return False\n    while x > 0:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    num = x\n    while x!=0:\n        if x & 1!= num & 1:\n            return False\n        x >>= 1\n        num >>= 1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    num = x \n    while (x > 0): \n        if (x % 10 == 1) or (x % 10 == 2): \n            return False\n        x = x // 10\n    if (num == 1): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x&(x-1) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: \n        return 1\n    else: \n        return 0\ndef is_Power_Of_Two_2 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    results = []\n    for word in text.split():\n        if len(word) >= 4:\n            results.append(word)\n    return results\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #text = \"lakshmi\"\n    #output = ['laksh', 'lakshmi']\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # pattern = re.compile(r'\\w{4,}')\n    # print(pattern.findall(text))\n    # print(len(pattern.findall(text)))\n    \n    matches = re.findall(r'.{4,}', text)\n    # for match in matches:\n        # print(match)\n        \n    return matches\n    "
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    find = re.findall(r'\\w{4,}', text)\n    return find\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = re.findall('\\w+', text)\n    final_list = []\n    for word in word_list:\n        if len(word) >= 4:\n            final_list.append(word)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    reg = re.compile(r'\\b\\w{4,}\\b')\n    output = reg.findall(text)\n    return output\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    print('\\n\\tFunction 1.\\n')\n    char_long = []\n    if type(text) is not str:\n        print(\"String expected\")\n        return\n    text = text.replace(',', '').replace('.', '')\n    for word in text.split():\n        if len(word) >= 4:\n            char_long.append(word)\n    return char_long\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = []\n    for word in text.split():\n        if len(word) >= 4:\n            char_long.append(word)\n    return char_long\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    l = list(text.split())\n    l2 = list(filter(lambda x: len(x) > 3, l))\n    print(l2)\n    return(l2)\n    \ndef test_find_char_long():\n    assert find_char_long('abc de fghi') == ['de', 'fghi']\n    assert find_char_long('abc') == []\n    assert find_char_long('I wish I wish with all my heart to fly with dragons in a land apart') == ['wish', 'fly', 'apart']\n    assert find_char_long('') == []\n    assert find_char_long('2 cats') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = re.findall(r'\\w{4,}', text)\n    return char_long\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i ** 2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x ** 2, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num * num for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda num: num ** 2, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return str[1:] + str[0]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_length = len(str)\n    for i in range(0, str_length): \n        if str[i:] + str[:i] == str: \n            return i \n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:]+str[:i] == str:\n            return i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    if len(str) < 1:\n        return 0\n    count = 0\n    i = 0\n    j = len(str) - 1\n    while i < j:\n        if str[i]!= str[j]:\n            break\n        i += 1\n        j -= 1\n    if i == j:\n        return 0\n    count = j - i + 1\n    return count\n    \nprint(find_Rotations('abcd'))\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    lps = [0] * n \n    cnt = 0\n    longest = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    \n    # if the string is a palindrome\n    if (str == str[::-1]): \n        return 0\n    else: \n        # start out the rotations at 0\n        rotations = 0\n        # loop over the input string\n        for i in range(n):\n            # if the ith and (i + 1)th characters don't match\n            if (str[i]!= str[n - i - 1]):\n                # add 1 to the rotations\n                rotations += 1\n        # return the rotations\n        return rotations\n    \ndef find_Rotations_opt(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    \n    # if the string is a palindrome\n    if (str == str[::-1]): \n        return 0\n    else: \n        # start out the rotations at 0\n        rotations = 0\n        # loop over the input string\n        for i in range(n):\n            # if the ith and (i + 1)th characters don't match\n            if (str[i]!= str[n - i - 1]):\n                # add 1 to the rotations\n                rotations += 1\n                # swap the ith and (i + 1)th characters\n                str = str[:i] + str[i + 1] + str[i] + str[i + 2:]\n        # return the rotations\n        return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    print(f'rotations of {str} :{min(len(str)-str.count(\"A\"),str.count(\"A\"))}')\n    \ndef is_Palindrome(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    str = str.lower()\n    return str[::-1] == str\n    \ndef make_Unique_Digits(str):\n    '''\n    Write a python function to create a string from given string where each character is repeated based on its frequency\n    '''\n    for i in set(str):\n        print(str.count(i) * i, end = \"\")\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    if(n==0):\n        return 0\n    rotations=0\n    for i in range(0,n):\n        if(str[i:]+str[:i]==str):\n            rotations+=1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    current = str\n    result = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize result and counter\n    result = 0\n    counter = 0\n    # Store the first element\n    first_element = str[0]\n    # Loop through the string\n    for char in str:\n        # Check if the element is the same as the one we previously recorded\n        if char!= first_element:\n            # Add 1 to the result\n            result += 1\n            # Set the first element to the current element\n            first_element = char\n            # Increment the counter by 1\n            counter = 1\n        elif char == first_element:\n            # Increment the counter by 1\n            counter += 1\n            # If the counter is greater than 1, we found a number of rotations greater than 1\n            if counter > 1:\n                # Add 1 to the result\n                result += 1\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_s = s[:s.find(ch)] + s[s.rfind(ch)+1:]\n    return new_s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\",1).replace(ch,\"\",-1)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    sub = s.replace(ch, \"\")\n    return sub\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch = ch.lower()\n    s = s.lower()\n    l = len(s)\n    if ch in s:\n        s = s[:s.find(ch)] + s[s.find(ch)+1:]\n        print(s[:s.find(ch)] + s[s.find(ch)+1:])\n    else:\n        print(\"Occurrences not found\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n    \ndef replace_Occ(s,ch1,ch2): \n    '''\n    Write a python function to replace first and last occurrence of a given character with another given character.\n    '''\n    return s.replace(ch1,ch2)\n    \ndef replace_Occ_Counter(s,ch1,ch2):\n    '''\n    Write a python function to replace first and last occurrence of a given character with another given character using Counter method.\n    '''\n    x = Counter(s)\n    y = x[ch1]\n    z = x[ch2]\n    \n    s = s.replace(ch1,ch2)\n    x[ch1] = y+z\n    x[ch2] = y+z\n    return s\n    \ndef count_Occ(s,ch): \n    '''\n    Write a python function to count how many times a given character occurs in the given string.\n    '''\n    return s.count(ch)\n    \ndef count_Occ_Counter(s,ch): \n    '''\n    Write a python function to count how many times a given character occurs in the given string using Counter method.\n    '''\n    x = Counter(s)\n    y = x[ch]\n    return y\n    \ndef is_Palindrome(s): \n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    s = s.replace(' ', '').lower()\n    s = list(s)\n    i = 0\n    j = len(s)-1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef is_Palindrome_Counter(s): \n    '''\n    Write a python function to check whether the given string is a palindrome or not using Counter method.\n    '''\n    x = Counter(s)\n    y = x[0]\n    if y%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 2)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return(s.replace(ch,'',1))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_s = s[0:s.find(ch)]+s[s.rfind(ch)+1:]\n    return new_s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    if ch in s:\n        s.remove(ch)\n    return ''.join(s)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        M[i] = sorted(M[i], key = sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=sum)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Your code here\n    list = []\n    for i in range(len(M)):\n        list.append(sum(M[i]))\n    list.sort()\n    res = []\n    for i in range(len(list)):\n        for j in range(len(M)):\n            if list[i] == sum(M[j]):\n                res.append(M[j])\n    return res\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    new_matrix = []\n    for i in range(len(M)):\n        sum_of_rows = sum(M[i])\n        new_matrix.append(sum_of_rows)\n    return new_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    length = len(M)\n    for i in range(0, length):\n        for j in range(0, length-i-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # print(M)\n    # return M\n    a = []\n    for x in M:\n        a.append(sum(x))\n    a.sort()\n    # print(a)\n    for i in range(len(a)):\n        for j in range(len(M)):\n            if a[i] == sum(M[j]):\n                return M[j]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    K = len(M[0])\n    sum_list = [sum(x) for x in M]\n    # sum_list = []\n    # for x in M:\n    #     sum_list.append(sum(x))\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = np.array(M)\n    N = len(M[0])\n    M.shape = (N, N)\n    M = np.array(sorted(M, key=sum))\n    M.shape = (N, N)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # convert to array of rows\n    M = M.tolist()\n    # sort the array by sum of each row\n    M.sort(key = sum)\n    return np.array(M)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/2)*(l*b)*h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*(l*b*h) \n    return V \n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/3\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/3\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h \n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume \n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5*b*h*l \n    return volume \n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return round((l*b*h)/2,3)\ndef main() : \n    '''\n    Write a python program to take inputs as length, breadth and height of the triangular prism and print the volume of the same.\n    '''\n    l = float(input(\"Enter length : \"))\n    b = float(input(\"Enter breadth : \"))\n    h = float(input(\"Enter height : \"))\n    print(\"Volume of the triangular prism =\", find_Volume(l,b,h))\nmain("
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'_[a-z]*_', text.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.findall(r'[a-z]_[a-z]', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.search('[_]+[a-z]+[a-z]*', text) else False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_[a-z]+', text))\n    # return True\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('_+[a-z]', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'\\w+(_\\w+)+', text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    string = re.findall('_+[a-z]', text)\n    return True if string else False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(\"_[a-z]_\",text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.match(r'[a-z]+_[a-z]+', text) is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    p = 4 * a\n    return p\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    p = 4 * a\n    return p\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()\n    length = len(string)\n    string_list = [0 for i in range(length)]\n    new_string_list = [0 for i in range(length)]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str = [c for c in string]\n    for i in string:\n        for j in list_str:\n            if(i == j):\n                list_str.remove(j)\n                break\n    return list_str\n    \ndef find_missing_string(str1, str2): \n    list1 = str_to_list(str1)\n    list2 = str_to_list(str2)\n    #print(list1)\n    #print(list2)\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return(list2)\n    \nprint(find_missing_string(\"ABCDEFGHIJK\", \"CDEFGHIJK\"))"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    array_string = [0]*NO_OF_CHARS\n    for i in string:\n        array_string[ord(i)] += 1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in string:\n        if i in string2:\n            string = string.replace(i,\"\")\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = []\n    for i in string:\n        string_list.append(ord(i))\n    return string_list\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = string.strip()\n    string2 = list(string1)\n    # print(string2)\n    for char in string2:\n        if char not in string2:\n            string2.remove(char)\n    return string2\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = string[0]\n    string2 = string[1]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = string[0]\n    string2 = string[1]\n    flag = 0\n    list1 = [0]*NO_OF_CHARS\n    list2 = [0]*NO_OF_CHARS\n    for i in range(len(string1)):\n        list1[ord(string1[i])] += 1\n    for i in range(len(string2)):\n        list2[ord(string2[i])] += 1\n    for i in range(len(string2)):\n        if(list1[ord(string2[i])] > 0):\n            string1 = string1.replace(string2[i], '', 1)\n            flag = 1\n    if flag == 0:\n        return None\n    print(string1)\n    return [string1, string2]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.replace(\" \",\"\")\n    string = string.replace(\".\",\"\")\n    string = string.replace(\"?\",\"\")\n    string = string.replace(\",\",\"\")\n    string = string.replace(\"!\",\"\")\n    string = string.replace(\"'\",\"\")\n    string = string.replace(\"-\",\"\")\n    string = string.replace(\"_\",\"\")\n    string = string.replace(\"\\n\",\"\")\n    string = string.lower()\n    return list(string)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    temp = list(string) \n    for i in temp:\n        if i in string2:\n            temp.remove(i)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_set = set(arraynums)\n    if len(unique_set) == len(arraynums):\n        print('No duplicates')\n    else:\n        print('Duplicates found')\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return all(elem in arraynums for elem in arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return True if len(set(arraynums)) < len(arraynums) else False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arr = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]\n    # arr = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    result = contains_duplicate(arr)\n    print(\"result is \", result)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # print(f\"Input: {arraynums}\")\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums)) == len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    result = False\n    for i in range(len(arraynums)):\n        for j in range(i + 1, len(arraynums)):\n            if (arraynums[i] == arraynums[j]):\n                result = True\n                break\n    return result\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x%7==0) or (x%9==0) or (x%15==0): \n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x in range(2,5):\n        return True\n    elif x % 2 == 1 and x in range(6,10):\n        return True\n    else:\n        return False\n    \nis_woodall(5)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x = str(x)\n    if x[0] == 'w' and x[1] == 'o' and x[2] == 'o' and x[3] == 'l':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 2 or x == 3 or x == 4 or x == 5 or x == 6:\n        return False\n    elif x == 7 or x == 8 or x == 9 or x == 10 or x == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    sum = 0\n    a = x//1000\n    sum = sum + a\n    x = x - 1000*a\n    b = x//100\n    sum = sum + b\n    x = x - 100*b\n    c = x//10\n    sum = sum + c\n    x = x - 10*c\n    d = x//1\n    sum = sum + d\n    if sum == 3:\n        return True\n    else:\n        return False\n    \ndef is_isogram(string):\n    '''\n    Write a function to check whether the given string is an isogram or not.\n    '''\n    return not any(string.lower().count(c) > 1 for c in string.lower())\n    \ndef is_num_of_chars(string):\n    '''\n    Write a function to check if the given string is a number of characters or not.\n    '''\n    return string.isdigit()\n    \ndef is_num_of_words(string):\n    '''\n    Write a function to check if the given string is a number of words or not.\n    '''\n    return string.isspace()\n    \ndef is_num_of_vowels(string):\n    '''\n    Write a function to check if the given string is a number of vowels or not.\n    '''\n    vowels = 0\n    for i in string:\n        if i in 'aeiou':\n            vowels = vowels + 1\n    return vowels\n    \ndef is_num_of_consonants(string):\n    '''\n    Write a function to check if the given string is a number of consonants or not.\n    '''\n    vowels = 0\n    for i in string:\n        if i not in 'aeiou':\n            vowels = vowels + 1\n    return vowels\n    \ndef is_num_of_numbers(string):\n    '''\n    Write a function to check if the given string is a number of numbers or not.\n    '''\n    return string.isdigit()\n    \ndef is_num_of_alphabets(string):\n    '''\n    Write a function to check if the given string is a number of alphabets or not.\n    '''\n    return string.isalpha()\n    \ndef is_num_of_uppercase(string):\n    '''\n    Write a function to check if the given string is a number of uppercase alphabets or not.\n    '''\n    return string.isupper()\n    \ndef is_num_of_lowercase(string):\n    '''\n    Write a function to check if the given string is a number of lowercase alphabets or not.\n    '''\n    return string.islower()\n    \ndef is_all_upper_case(string):\n    '''\n    Write a function to check if the given string is a string of all upper case letters or not.\n    '''\n    return string.isupper()\n    \ndef is_all_lower_case(string):\n    '''\n    Write a function to check if the given string is a string of all lower case letters or not.\n    '''\n    return string.islower()\n    \ndef is_all_num(string):\n    '''\n    Write a function to check if the given string is a string of all numeric characters or not.\n    '''\n    return string.isnumeric()\n    \ndef is_all_alpha(string):\n    '''\n    Write a function to check if the given string is a string of all alphabetic characters or not.\n    '''\n    return string.isalpha()\n    \ndef is_all_upper(string):\n    '''\n    Write a function to check if the given string is a string of all uppercase alphabetic characters or not.\n    '''\n    return string.isupper()\n    \ndef is_all_lower(string):\n    '''\n    Write a function to check if the given string is a string of all lowercase alphabetic characters or not.\n    '''\n    return string.islower()\n    \ndef is_even(number):\n    '''\n    Write a function to check if the given number is even or not.\n    '''\n    return number % 2 == 0\n    \ndef is_odd(number):\n    '''\n    Write a function to check if the given number is odd or not.\n    '''\n    return number % 2!= 0\n    \ndef is_prime(number):\n    '''\n    Write a function to check if the given number is prime or not.\n    '''\n    return number > 1 and all(number % i for i in range(2, number))\n    \ndef is_palindrome(number):\n    '''\n    Write a function to check if the given number is a palindrome or not.\n    '''\n    return str(number) == str(number)[::-1]\n    \ndef is_perfect(number):\n    '''\n    Write a function to check if the given number is perfect or not.\n    '''\n    return sum(i for i in range(1, number) if number % i == 0) == number\n    \ndef is_armstrong(number):\n    '''\n    Write a function to check if the given number is armstrong or not.\n    '''\n    return sum(int(i)**len(str(number)) for i in str(number)) == number\n    \ndef is_super(number):\n    '''\n    Write a function to check if the given number is super or not.\n    '''\n    return sum(int(i) for i in str(number)) == number\n    \ndef is_perfect_square(number):\n    '''\n    Write a function to check if the given number is a perfect square or not.\n    '''\n    return number**0.5 == int(number**0.5)\n    \ndef is_antipalindrome(number):\n    '''\n    Write a function to check if the given number is antipalindrome or not.\n    '''\n    return str(number) == str(number)[::-1]\n    \ndef is_lucky(number):\n    '''\n    Write a function to check if the given number is lucky or not.\n    '''\n    return sum(int(i) for i in str(number) if int(i) % 2 == 0) == sum(int(i) for i in str(number) if int(i) % 2!= 0)\n    \ndef is_magic(number):\n    '''\n    Write a function to check if the given number is magic or not.\n    '''\n    if number > 0:\n        return sum(int(i) for i in str(number)) == number**2\n    else:\n        return False\n        \ndef is_prime_number(number):\n    '''\n    Write a function to check if the given number is prime or not.\n    '''\n    return number > 1 and all(number % i for i in range(2, number))\n    \ndef is_armstrong_number(number):\n    '''\n    Write a function to check if the given number is armstrong or not.\n    '''\n    return sum(int(i)**len(str(number)) for i in str(number)) == number\n    \ndef is_super_number(number):\n    '''\n    Write a function to check if the given number is super or not.\n    '''\n    return sum(int(i) for i in str(number)) == number\n    \ndef is_antipalindrome_number(number):\n    '''\n    Write a function to check if the given number is antipalindrome or not.\n    '''\n    return str(number) == str(number)[::-1]\n    \ndef is_lucky_number(number):\n    '''\n    Write a function to check if the given number is lucky or not.\n    '''\n    return sum(int(i) for i in str(number) if int(i) % 2 == 0) == sum(int(i) for i in str(number) if int(i) % 2!= 0)\n    \ndef is_magic_number(number):\n    '''\n    Write a function to check if the given number is magic or not.\n    '''\n    if number > 0:\n        return sum(int(i) for i in str(number)) == number**2\n    else:\n        return False\n        \ndef is_perfect_number(number):\n    '''\n    Write a function to check if the given number is perfect or no"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0 and x % 3 == 0:\n        print('woodall')\n    elif x % 5 == 0 and x % 3!= 0:\n        print('woodball')\n    elif x % 3 == 0 and x % 5!= 0:\n        print('ball')\n    else:\n        print('not woodall or ball')\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    def is_positive_int(x):\n        if x>=0:\n            return True\n        else:\n            return False\n    def is_square(x):\n        a = x**0.5\n        if int(a)==a:\n            return True\n        else:\n            return False\n    if is_positive_int(x)==True and is_square(x)==True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return sum(int(i) for i in str(x)) == int(x)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%3==0\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return True\n    elif x % 5 == 0:\n        return is_woodall(x//5)\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = str(num)[::-1]\n    if str(num) == (rev[::-1]):\n        return True\n    else:\n        return False\n        \ndef d(n):\n    '''\n    Write a python function to check if a given number is the sum of its own digits squared.\n    '''\n    sum = 0\n    for i in str(n):\n        sum += int(i)**2\n    if sum == n:\n        return True\n    else:\n        return False\n        \ndef f(n):\n    '''\n    Write a python function to check if a given number is prime.\n    '''\n    flag = False\n    if n > 1:\n        for i in range(2, n):\n            if n%i == 0:\n                flag = True\n                break\n        if not flag:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef e(n):\n    '''\n    Write a python function to check if a given number has exactly 9 divisors.\n    '''\n    c = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            c += 1\n    if c == 9:\n        return True\n    else:\n        return False\n    \ndef s(n):\n    '''\n    Write a python function to check if a given number has the same digits when reversed.\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    else:\n        return False\n        \ndef f(n):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    flag = False\n    if n > 0:\n        s = str(n)\n        if s == s[::-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef t(n):\n    '''\n    Write a python function to check if a given number is a truncatable prime.\n    '''\n    flag = False\n    if f(n) == True:\n        if s(n) == True:\n            if d(n) == True:\n                if e(n) == True:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    try:\n        rev_num = int(str(num)[::-1])\n        if (rev_num+1) == num*2:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%1e8) == num - 1    \ndef rev_1e8(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_reg(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_reg_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_reg_re_reg(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_reg(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_reg_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_reg_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_reg(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_reg_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_reg(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_reg(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_reg_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_reg(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return 2*(num%(1e8)) == num - 1    \n    \ndef rev_1e8_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re_re(num):\n    '''\n    Write a python function to check if "
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])*2\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    def reverse(num):\n        a = []\n        while num>0:\n            a.append(num%10)\n            num = num//10\n        return a\n    num = list(str(num))\n    reverse_num = reverse(num)\n    n = len(num)\n    if n > 0:\n        reverse_num.append(0)\n    for i in range(n):\n        if int(num[i])!= int(reverse_num[n-i-1])*2:\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = (rev*10) + num % 10\n        num = int(num / 10)\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = int(num / 10)\n    if num == rev_num - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = str(num)[::-1]\n    rev_num = int(reverse_num)\n    \n    if (num - rev_num) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])*2\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if (num <=0):\n        return False\n    elif num == 1:\n        return False\n    else:\n        res = 0\n        num = str(num)\n        for i in num:\n            res = res * 10 + int(i)\n        return res == num * 2 - 1"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr) \n    max_num = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            num = arr[i] * 10 + arr[j] \n            if num > max_num : \n                max_num = num \n                print(\"Max num = \", max_num) \n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = max(arr)\n    return max_num\n    \ndef find_Max_Num_2(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = []\n    for i in arr : \n        max_num.append(int(i))\n    max_num.sort()\n    max_num = max_num[::-1]\n    return max_num[0]\n    \ndef find_Max_Num_3(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    numbers = [str(x) for x in arr]\n    number_list = \"\".join(numbers)\n    return max(map(int,number_list))\n    "
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr) \n    arr.sort(reverse = True) \n    # Sort the array in the descending order \n    print(arr) \n    max_num = int(\"\".join(map(str, arr))) \n    # Join the array to form the number \n    return max_num \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = int(''.join(str(i) for i in arr))\n    for i in range(n) :\n        for j in range(i, n) :\n            new_num = int(''.join(str(k) for k in arr[i:j+1]))\n            if new_num > max_num :\n                max_num = new_num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return int(''.join(map(str, arr[::-1])))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Find length of arr\n    # The maximum number of digits can be len(arr)\n    # We create an arr of len(arr) and then fill it with 0\n    # We then traverse through the array and check if the number is greater than the number formed by the digits till that index\n    # If it is, then we assign the value to the corresponding index of the array\n    # At the end of the program, return the largest number formed in the arr\n    \n    length_arr = len(arr)\n    # print(length_arr)\n    \n    max_num = [0 for i in range(length_arr)]\n    \n    for i in range(length_arr):\n        for j in range(length_arr):\n            if (arr[i]*10**j > arr[j]*10**i):\n                max_num[i] = j\n                break\n            else:\n                max_num[i] = length_arr-1\n                \n    num = 0\n    for i in range(length_arr):\n        num += arr[i]*10**(max_num[i])\n        \n    return num\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    print(\"\\n\\n\\n\")\n    print(\"----------------------------------------------------------------------------------------------------------------\")\n    print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = [0]*len(arr)\n    find_Max_Num_util(arr, max_num, 0)\n    return max_num\n    \ndef find_Max_Num_util(arr, max_num, curr_index) : \n    '''\n    Utility function for find_Max_Num function\n    '''\n    if curr_index == len(max_num) :\n        return \n        \n    max_num[curr_index] = arr[curr_index]\n    find_Max_Num_util(arr, max_num, curr_index+1)\n    \n    if curr_index == 0 :\n        max_num[curr_index] = arr[curr_index]\n        find_Max_Num_util(arr, max_num, curr_index+1)\n    else : \n        max_num[curr_index] = max_num[curr_index-1] + arr[curr_index]\n        find_Max_Num_util(arr, max_num, curr_index+1)\n    \n    return \n    \ndef find_Max_Num_Tabulation(arr) : \n    '''\n    Tabulation solution.\n    '''\n    n = len(arr)\n    m = [0]*n\n    \n    m[0] = arr[0]\n    m[1] = max(arr[0], arr[1])\n    for i in range(2, n) : \n        m[i] = max(m[i-1], m[i-2] + arr[i])\n    \n    return m[n-1]\n    \nif __name__ == '__main__' : \n    arr = [13, 4, 6, 5]\n    print(find_Max_Num(arr))\n    print(find_Max_Num_Tabulation(arr))"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    if x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False\n    \ndef prime(x):\n    '''\n    Write a python function to check whether the given integer is prime or not.\n    '''\n    if x < 2:\n        return False\n    for i in range(2,x//2+1):\n        if x%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x,y = int(x),int(y)\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    return False\ndef Overlap_Intervals(x,y):\n    '''\n    Write a python function to find whether two intervals overlap or not. Two intervals overlap if they share some common point.\n    '''\n    x,y = [int(i) for i in x.split(\"-\")],[int(i) for i in y.split(\"-\")]\n    if x[0] <= y[1] and y[0] <= x[1]:\n        return True\n    return False\ndef Sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    n = int(n)\n    return sum([int(i) for i in str(n)])\ndef String_XOR(s1,s2):\n    '''\n    Write a python function to find the string XOR of two strings. The string XOR of two strings is a string that has all the characters of the two strings but the characters do not repeat.\n    '''\n    return \"\".join([chr(ord(i) ^ ord(j)) for i,j in zip(s1,s2)])\ndef Reverse_Int(n):\n    '''\n    Write a python function to reverse a number.\n    '''\n    return int(str(n)[::-1])\ndef List_Overlap(l1,l2):\n    '''\n    Write a python function to check whether two lists contain the same elements or not.\n    '''\n    return set(l1) & set(l2)\ndef Repeating_Elements(n):\n    '''\n    Write a python function to check whether a number has all repeating digits or not.\n    '''\n    return len(set([int(i) for i in str(n)])) == 1\ndef Merge_Lists(l1,l2):\n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    l1,l2 = sorted(l1),sorted(l2)\n    return sorted(l1+l2)\ndef Is_Substring(s1,s2):\n    '''\n    Write a python function to check whether a given string is a substring of another string.\n    '''\n    return s2 in s1\ndef Is_Same_String(s1,s2):\n    '''\n    Write a python function to check whether two strings are identical or not.\n    '''\n    return s1 == s2\ndef Prime_Factor(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    return [i for i in range(1,int(n)+1) if n%i == 0 and i in primes]\ndef Prime_Factors(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    return [i for i in range(1,int(n)+1) if n%i == 0 and i in primes]\ndef Find_Min_Diff(l1,l2):\n    '''\n    Write a python function to find the minimum difference between any pair in two lists.\n    '''\n    return min([abs(i-j) for i,j in zip(l1,l2)])\ndef Is_Number_Prime(n):\n    '''\n    Write a python function to check whether a number is a prime number or not.\n    '''\n    if n in [1,0]:\n        return False\n    if n in primes:\n        return True\n    return False\ndef Is_Palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    return s[::-1] == s\ndef Is_Rotate_String(s1,s2):\n    '''\n    Write a python function to check whether a string is a rotate string of another string.\n    '''\n    return s1 in s2+s2\ndef Replace_String_Character(s1,s2,s3):\n    '''\n    Write a python function to replace all occurrences of a character in a string with another character.\n    '''\n    return s1.replace(s2,s3)\ndef Reverse_Words_In_String(s):\n    '''\n    Write a python function to reverse all the words in a given string.\n    '''\n    return \" \".join([i[::-1] for i in s.split()])\ndef Compare_Strings_Length(s1,s2):\n    '''\n    Write a python function to compare two strings based on the number of characters in them.\n    '''\n    return len(s1) == len(s2)\ndef Reverse_String_K_Character(s,k):\n    '''\n    Write a python function to reverse a string in groups of k characters.\n    '''\n    return s[::-1][:k][::-1]\ndef Convert_To_Integer(s):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    return int(\"\".join([i for i in s if i.isdigit()]))\ndef Convert_To_String(n):\n    '''\n    Write a python function to convert a number to a string.\n    '''\n    return \"\".join([i for i in str(n) if i.isdigit()])\ndef Convert_To_String_Max_Length(n,s):\n    '''\n    Write a python function to convert a number to a string but the string should have at most a given length.\n    '''\n    return s.join([\"0\"*(len(str(n)) - len(s)) + s for s in str(n)])\ndef Longest_Substring_Without_Repeating_Characters(s):\n    '''\n    Write a python function to find the longest substring in a given string that does not have repeating characters.\n    '''\n    l = [s[i:j] for i in range(len(s)) for j in range(i+1,len(s)+1)]\n    return max([i for i in l if len(set(i)) == len(i)],key=len)\ndef Find_Longest_Word_Length(l):\n    '''\n    Write a python function to find the length of the longest word in a given list.\n    '''\n    return len(max(l,key=len))\ndef Remove_Duplicates(s):\n    '''\n    Write a python function to remove duplicates from a string.\n    '''\n    return \"\".join(set(s))\ndef Minimum_Possible_Integer(n,d):\n    '''\n    Write a python function to find the minimum possible integer which has d digits (at least one).\n    '''\n    return int(round(n,-d))\ndef Maximum_Possible_Integer(n,d):\n    '''\n    Write a python function to find the maximum possible integer which has d digits (at most one).\n    '''\n    return int(round(n,d))\ndef Read_File(file_name):\n    '''\n    Write a python function to read all the contents from a given file.\n    '''\n    with open(file_name, \"r\") as file:\n        return file.read()\ndef Write_File(file_name,s):\n    '''\n    Write a python function to write a given string into a given file.\n    '''\n    with open(file_name, \"w\") as file:\n        file.write(s)\ndef Find_In_Nested_List(l,n):\n    '''\n    Write a python function to find a given number in a given nested list.\n    '''\n    return any([i == n for i in l])\ndef Remove_All_Duplicates(l):\n    '''\n    Write a python function to remove all duplicates from a given list.\n    '''\n    return list(set(l))\ndef Sort_List(l):\n    '''\n    Write a python function to sort a given list.\n    '''\n    return sorted(l)\ndef Sort_String_In_Number_Order(s):\n    '''\n    Write a python function to sort a given string in number order.\n    '''\n    return \"\".join([str(ord(i)) for i in s])\ndef Is_It_A"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<0 and y>0) or (x>0 and y<0):\n        return True\n    else:\n        return False\nopposite_Signs(1,2)\nopposite_Signs(-2,-3)\nopposite_Signs(10,3)\nopposite_Signs(-7,3)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x > 0 and y > 0) or (x < 0 and y < 0): \n        print(\"The given integers have opposite signs\") \n    else: \n        print(\"The given integers have same signs\") \n    return\ndef power(x,n): \n    '''\n    Write a python function which takes two integers x and n.\n    Print x raised to the power n (i.e. x^n).\n    '''\n    result = 1; \n    for i in range(0,abs(n)): \n        result = result * x; \n    if n>=0: \n        print(\"x^n =\",result); \n    else: \n        print(\"(1/x)^n =\",1/result); \n    return\ndef num_digits(x): \n    '''\n    Write a python function to print number of digits in a given integer.\n    '''\n    if x < 0: \n        x = -x; \n    count = 0; \n    while (x!= 0): \n        count = count + 1; \n        x = x // 10; \n    print(\"number of digits in a given integer =\",count); \n    return\ndef is_even(n): \n    '''\n    Write a python function to check whether a given number is even or not. Print \"The number is even\" if the given number is even, and \"The number is odd\" if the given number is odd.\n    '''\n    if n%2 == 0: \n        print(\"The number is even\"); \n    else: \n        print(\"The number is odd\"); \n    return\ndef check_int_float(x): \n    '''\n    Write a python function to check whether a given number is an integer or not. If the given number is an integer, print \"The number is integer\" otherwise print \"The number is not an integer\".\n    '''\n    if isinstance(x, int): \n        print(\"The number is integer\"); \n    else: \n        print(\"The number is not an integer\"); \n    return\ndef find_max_digit(n): \n    '''\n    Write a python function to find the maximum digit from a given number.\n    '''\n    max_digit = 0; \n    while(n!= 0): \n        temp = n%10; \n        if temp > max_digit: \n            max_digit = temp; \n        n = n//10; \n    print(\"Maximum digit from a given number =\",max_digit); \n    return\ndef check_perfect_number(x): \n    '''\n    Write a python function to check whether a given number is perfect or not. A perfect number is a positive integer that is equal to the sum of its proper positive divisors, that is, the sum of its positive divisors excluding the number itself (also known as its aliquot sum). \n    For example, the first perfect number is 6, because 1, 2 and 3 are its proper positive divisors, and 1 + 2 + 3 = 6. Equivalently, the number 6 is equal to half of 24 (the sum of all its positive divisors). The next perfect number is 28 = 1 + 2 + 4 + 7 + 14. This is followed by the perfect numbers 496 and 8128.\n    '''\n    sum = 0; \n    for i in range(1,x//2+1): \n        if x % i == 0: \n            sum = sum + i; \n    if sum == x: \n        print(x,\"is a perfect number\"); \n    else: \n        print(x,\"is not a perfect number\"); \n    return\ndef find_duplicate(lst): \n    '''\n    Write a python function to find any duplicate element from a given list of integers. If no duplicate is found, print \"There are no duplicate elements in the list\".\n    '''\n    for i in range(len(lst)): \n        for j in range(i+1,len(lst)): \n            if(lst[i] == lst[j]): \n                print(lst[i],\"is a duplicate element in the list\"); \n                return\n    print(\"There are no duplicate elements in the list\"); \n    return\ndef find_sum_of_list(lst): \n    '''\n    Write a python function to find the sum of all elements in a given list.\n    '''\n    sum = 0; \n    for i in range(len(lst)): \n        sum = sum + lst[i]; \n    print(\"Sum of all elements in a given list =\",sum); \n    return\ndef find_prime_factors(n): \n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    for i in range(2,n): \n        if n % i == 0: \n            print(i); \n    return\ndef find_hcf(x,y): \n    '''\n    Write a python function to find the HCF (highest common factor) of two given integers.\n    '''\n    if x > y: \n        smaller = y; \n    else: \n        smaller = x; \n    for i in range(1,smaller+1): \n        if(x % i == 0) and (y % i == 0): \n            hcf = i; \n    print(\"HCF =\",hcf); \n    return\ndef find_gcd(x,y): \n    '''\n    Write a python function to find the GCD (greatest common divisor) of two given integers.\n    '''\n    if y == 0: \n        return x; \n    else: \n        return find_gcd(y,x%y)\ndef find_pythagorean_triplets(n): \n    '''\n    Write a python function to print all the sets of three integers such that their sum is equal to a given integer n, and such that the difference between the largest and the smallest integers in the triplet is less than or equal to a given integer m. The program should print all such sets of integers.\n    '''\n    for i in range(1,n): \n        for j in range(1,n): \n            for k in range(1,n): \n                if(i+j+k == n): \n                    if(abs(i-j) <= m) and (abs(i-k) <= m) and (abs(j-k) <= m): \n                        print(i,j,k); \n    return\ndef print_pattern(x): \n    '''\n    Write a python function to print the following pattern\n    '''\n    for i in range(0,x): \n        for j in range(0,x): \n            print(\"*\",end=\" \"); \n        print(); \n    for i in range(x-1,-1,-1): \n        for j in range(0,x): \n            print(\"*\",end=\" \"); \n        print(); \n    return\ndef find_LCM(x,y): \n    '''\n    Write a python function to find the LCM (Least common multiple) of two given integers.\n    '''\n    if x > y: \n        greater = x; \n    else: \n        greater = y; \n    while(True): \n        if(greater % x == 0) and (greater % y == 0): \n            lcm = greater; \n            break; \n        greater += 1; \n    print(\"LCM =\",lcm); \n    return\ndef find_LCM_of_list(lst): \n    '''\n    Write a python function to find the LCM (Least common multiple) of all the numbers in a given list of integers.\n    '''\n    greater = lst[0]; \n    for i in range(1,len(lst)): \n        if lst[i] > greater: \n            greater = lst[i]; \n    print(\"LCM of all numbers in a given list =\",greater); \n    for i in range(0,len(lst)): \n        find_LCM(greater,lst[i]); \n    return\ndef is_prime(n): \n    '''\n    Write a python function to check whether a given number is prime or not. Print \"The number is prime\" if the given number is a prime number, and \"The number is not prime\" if the given number is no"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x*y<0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # base case \n    if n < 1: \n        return False \n    # first and last number of an octagonal number \n    a = 1\n    b = 2 \n    # remaining numbers of the octagonal number \n    c = 1 \n    # base value \n    base = 3 \n    while c < n: \n        # if even number of digits \n        if base % 2 == 0: \n            a += 2 \n            b += 2 \n            c += 1 \n            base += 4 \n        # if odd number of digits \n        else: \n            a += 1 \n            b += 1 \n            c += 1 \n            base += 3 \n    # if nth number is odd \n    if c % 2 == 1: \n        return True \n    # if nth number is even \n    else: \n        return False \n    # return a, b, c, base\n    # return base\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*n + n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # we could also do this with a loop\n    # since we know the formula for nth octagonal number\n    # we can use that to find it faster\n    x = 3*n**2 - n + 1\n    return x\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return 0\n    else:\n        n -= 1\n        return n**2 + n + 2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    assert n >= 0, \"Positive integers only please!\"\n    return n*((3*n) - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # 1\n    nth_oct = (n - 1) * 3 + 2\n    # 2\n    nth_oct = 2 * (n ** 2 - n) + 1\n    # 3\n    nth_oct = 2 * n ** 2 - n + 1\n    # 4\n    nth_oct = n ** 3 + n ** 2 + n + 1\n    return nth_oct\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n - 1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_sub(s):\n        count = 0\n        n = len(s)\n        for i in range(n):\n            for j in range(i, n):\n                sub = s[i:j+1]\n                sub_sum = sum([int(x) for x in sub])\n                if sub_sum == len(sub):\n                    count += 1\n        return count\n    return count_sub(s)\ndef count_Substrings_DP(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    DP approch.\n    '''\n    n = len(s)\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i==j:\n                dp[i][j] = 1\n            elif j==i+1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = s[i-1]==s[j-1] and dp[i-1][j-1]\n            if dp[i][j]:\n                count+=1\n    return count\ndef count_Substrings_DP_Opt(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    DP approch with optimization.\n    '''\n    n = len(s)\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    dp[0][0] = 1\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            if s[j]==s[i-1] and dp[j+1][i-1]==1:\n                dp[j][i]=1\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    substring = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring.append(s[i:j])\n    \n    dict = {}\n    for item in substring:\n        if len(item) == len(set(item)):\n            dict[item] = len(item)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    d = defaultdict(int)\n    d[0] = 1\n    running_sum = 0\n    ans = 0\n    for i in range(l):\n        running_sum += int(s[i])\n        ans += d[running_sum - l]\n        d[running_sum] += 1\n    return ans\n    \nprint(count_Substrings('101'))\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    s_len = len(s)\n    for i in range(s_len):\n        for j in range(i, s_len):\n            temp_sum = sum([int(x) for x in s[i:j+1]])\n            if temp_sum == len(s[i:j+1]):\n                result += 1\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[False for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    for j in range(1,n):\n        for i in range(j):\n            if s[i] == s[j]:\n                if j - i == 1:\n                    dp[i][j] = True\n                else:\n                    dp[i][j] = dp[i+1][j-1]\n            else:\n                if j - i > 1 and dp[i+1][j-1]:\n                    dp[i][j] = True\n    return sum(map(sum, dp))\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    str_len = len(s)\n    res = 0\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(map(int, s[i:j+1])) == len(s[i:j+1]):\n                ans += 1\n    return ans\ndef count_Substrings_opt(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    Optimized version.\n    '''\n    substr_map = defaultdict(int)\n    cur_sum = 0\n    ans = 0\n    for i in range(len(s)):\n        cur_sum += int(s[i])\n        if cur_sum == len(s[i:]):\n            ans += 1\n        for substr_len in range(1, len(s[i:])):\n            if cur_sum - substr_len in substr_map:\n                ans += substr_map[cur_sum - substr_len]\n        substr_map[cur_sum] += 1\n    return ans\ndef print_Substrings(s):\n    '''\n    Write a python function to print all the substrings with the sum of digits equal to their length.\n    '''\n    ans = []\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(map(int, s[i:j+1])) == len(s[i:j+1]):\n                ans.append(s[i:j+1])\n    return ans\ndef print_Substrings_opt(s):\n    '''\n    Write a python function to print all the substrings with the sum of digits equal to their length.\n    Optimized version.\n    '''\n    substr_map = defaultdict(int)\n    cur_sum = 0\n    ans = []\n    for i in range(len(s)):\n        cur_sum += int(s[i])\n        if cur_sum == len(s[i:]):\n            ans.append(s[i:])\n        for substr_len in range(1, len(s[i:])):\n            if cur_sum - substr_len in substr_map:\n                ans.append(s[i:i+substr_len])\n        substr_map[cur_sum] += 1\n    return ans\ndef is_Power_of_Two(num):\n    '''\n    Write a python function to check whether an input number is a power of two.\n    '''\n    if num == 0:\n        return False\n    return num & num-1 == 0\ndef is_Power_of_Two_opt(num):\n    '''\n    Write a python function to check whether an input number is a power of two.\n    Optimized version.\n    '''\n    return num!= 0 and num & (num - 1) == 0\ndef count_Substrings_using_power_two(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    This function uses the number 1 to check whether a number is a power of two.\n    '''\n    ans = 0\n    for i in range(len(s)):\n        cur_power_of_two = 1\n        for j in range(i, len(s)):\n            if cur_power_of_two == 0:\n                break\n            if sum(map(int, s[i:j+1])) == len(s[i:j+1]):\n                ans += 1\n            cur_power_of_two = cur_power_of_two << 1\n    return ans\ndef count_Substrings_using_power_two_opt(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    This function uses the number 1 to check whether a number is a power of two.\n    Optimized version.\n    '''\n    ans = 0\n    cur_power_of_two = 1\n    for i in range(len(s)):\n        if cur_power_of_two == 0:\n            break\n        if sum(map(int, s[i:])) == len(s[i:]):\n            ans += 1\n        cur_power_of_two = cur_power_of_two << 1\n    return ans\ndef count_Substrings_using_power_two_approx(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    This function uses the number 1 to check whether a number is a power of two.\n    Approximation: This function counts each substrings twice: Once with +1 and once with -1.\n    '''\n    ans = 0\n    cur_power_of_two = 1\n    for i in range(len(s)):\n        if cur_power_of_two == 0:\n            break\n        if sum(map(int, s[i:])) == len(s[i:]):\n            ans += 1\n        if (cur_power_of_two + 1) & (cur_power_of_two + 1) == cur_power_of_two:\n            ans += 1\n        cur_power_of_two = cur_power_of_two << 1\n    return ans\ndef is_Subsequence(s, t):\n    '''\n    Write a python function to check whether the string t is a subsequence of s.\n    '''\n    i = 0\n    for j in range(len(s)):\n        if i == len(t):\n            return True\n        if s[j] == t[i]:\n            i += 1\n    return i == len(t)\ndef is_Subsequence_opt(s, t):\n    '''\n    Write a python function to check whether the string t is a subsequence of s.\n    Optimized version.\n    '''\n    i = j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n        j += 1\n    return i == len(s)\ndef get_Max_Diff(arr):\n    '''\n    Write a python function to get the maximum difference of the elements in a list.\n    '''\n    ans = None\n    min_val = min(arr)\n    max_val = max(arr)\n    if max_val - min_val == 0:\n        return 0\n    for i in range(len(arr)):\n        ans = max(ans, max_val - arr[i])\n    return ans\ndef get_Max_Diff_opt(arr):\n    '''\n    Write a python function to get the maximum difference of the elements in a list.\n    Optimized version.\n    '''\n    ans = 0\n    min_val = min(arr)\n    max_val = max(arr)\n    if max_val - min_val == 0:\n        return 0\n    for i in range(len(arr)):\n        ans = max(ans, max_val - arr[i])\n    return ans\ndef count_Substrings_using_prefix_sums(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    This function uses the prefix sums to check whether a number is a power of two.\n    '''\n    ans = 0\n    prefix_sums = []\n    for i in range(len(s)):\n        cur_sum = 0\n        for j in range(i, len(s)):\n            cur_sum += int(s[j])\n            prefix_sums.append(cur_sum)\n    prefix_sums.sort()\n    for i in range(len(prefix_sums) - 1):\n        if prefix_sums[i+1] - prefix_sums[i] == 1:\n            ans += 1\n    return ans\ndef count_Substrings_using_prefix_sums_opt(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    This function uses the prefix sums to check whether a number is a power of two.\n    Optimized version.\n    '''\n    ans = 0\n    prefix_sums = []\n    for i in range(len(s)):\n        cur_sum = 0\n        for j in range(i, len(s)):\n            cur_sum +"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            substring = s[i:j+1]\n            substrings.append(substring)\n    return substrings\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            temp = 0\n            for k in range(i, j+1):\n                temp += int(s[k])\n            if temp == j-i+1:\n                res += 1\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # left,right=0,len(s)-1\n    # sum=0\n    # while left<=right:\n    #     if s[left]==s[right]:\n    #         sum=sum+1\n    #         left=left+1\n    #         right=right-1\n    #     else:\n    #         left=left+1\n    #         right=right-1\n    # return sum\n    total=0\n    sum=0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            sum=0\n            for k in range(i,j+1):\n                sum=sum+int(s[k])\n            if sum==j-i+1:\n                total=total+1\n    return total\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Compute min using sort\n    xs.sort()\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < min:\n            min = xs[i]\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #pass\n    s=sorted(xs)\n    return s[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # TODO:\n    # num1 = xs[0]\n    # for i in range(1, len(xs)):\n    #     if num1 > xs[i]:\n    #         num1 = xs[i]\n    # return num1\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs is None:\n        return None\n    \n    #Find the smallest value in the list\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for num in xs:\n            if num < smallest:\n                smallest = num\n        return smallest\n        \n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = 0\n    for x in xs:\n        if x < smallest_num:\n            smallest_num = x\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    l = []\n    for x in test_list:\n        for y in test_list:\n            if (y - x) not in l:\n                l.append(y - x)\n    return max(l)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    list_length = len(test_list)\n    if list_length < 2:\n        return 0\n    \n    temp_list = []\n    for i in range(list_length-1):\n        for j in range(i+1, list_length):\n            temp_list.append((test_list[i], test_list[j]))\n    \n    temp_list.sort(key=lambda x: abs(x[0]-x[1]))\n    return abs(temp_list[-1][0] - temp_list[-1][1])\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    current_max = test_list[1] - test_list[0]\n    for index in range(len(test_list)):\n        current_max = max(current_max, test_list[index + 1] - test_list[index])\n    return current_max\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        if len(i) > 1:\n            new_list.append(i)\n    if len(new_list) >= 2:\n        min_diff = abs(new_list[0][0] - new_list[0][1])\n        for i in range(0, len(new_list) - 1):\n            if abs(new_list[i][0] - new_list[i + 1][1]) < min_diff:\n                min_diff = abs(new_list[i][0] - new_list[i + 1][1])\n        return min_diff\n    else:\n        return \"Error\"\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = None\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] - test_list[j] > max_diff:\n                max_diff = test_list[i] - test_list[j]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 1:\n        return None\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print('\\n'.join(sorted(subjectmarks, key=lambda x: x[1], reverse=True)))\n    return\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1], reverse=True)\n    \ndef extract_marks(subject):\n    '''\n    Write a function to extract marks from a dictionary.\n    '''\n    return dict(subject)['marks']\n    \ndef extract_subjects(subjectmarks):\n    '''\n    Write a function to extract the subjects from a list of tuples.\n    '''\n    return list(map(lambda x: x[0], subjectmarks))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    newlist=list()\n    for i in range(len(subjectmarks)):\n        minpos=i\n        for j in range(i,len(subjectmarks)):\n            if subjectmarks[j][1]<subjectmarks[minpos][1]:\n                minpos=j\n        temp=subjectmarks[i]\n        subjectmarks[i]=subjectmarks[minpos]\n        subjectmarks[minpos]=temp\n    return subjectmarks\nif __name__ == '__main__':\n    print(subject_marks([('phy', 70), ('che', 82), ('math', 75), ('bio', 65)])"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key = lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #return sorted(subjectmarks, key=lambda x: x[1])\n    return sorted(subjectmarks, key=operator.itemgetter(-1))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1], reverse=True)\n    return subjectmarks\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    new_list = []\n    total = 0\n    if isinstance(data_list, list):\n        for sublist in data_list:\n            if isinstance(sublist, list):\n                new_list.extend(sublist)\n            else:\n                total += sublist\n    else:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        if data_list == []:\n            return 0\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            sum += recursive_list_sum(item)\n        else:\n            sum += item\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_total = 0\n    if data_list == []:\n        return 0\n    else:\n        for x in range(len(data_list)):\n            if type(data_list[x]) == list:\n                sum_total += recursive_list_sum(data_list[x])\n            else:\n                sum_total += data_list[x]\n        return sum_total\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data_sum = 0\n    for item in data_list:\n        if type(item) == type([]):\n            data_sum += recursive_list_sum(item)\n        else:\n            data_sum += item\n    return data_sum\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_data = 0\n    for item in data_list:\n        if type(item) is list:\n            sum_data = sum_data + recursive_list_sum(item)\n        else:\n            sum_data = sum_data + item\n    return sum_data\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for data in data_list:\n        if isinstance(data, list):\n            result += recursive_list_sum(data)\n        else:\n            result += data\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for elem in data_list:\n        if type(elem) == list:\n            result = result + recursive_list_sum(elem)\n        else:\n            result = result + elem\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if(i > 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print(\"Positive number count in the list:\", count)\n    \n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for x in list:\n        if x>0:\n            count+=1\n    return count\n    \n    \n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if(list[i] >= 0):\n            count+=1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1]\n    for i in range(1, n+1):\n        bells.append(0)\n        for j in range(i+1):\n            bells[i] += bell(j) * bell(i-j)\n    return bells[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    bell = {0:1, 1:1, 2:2, 3:5, 4:14, 5:42, 6:132, 7:429, 8:1430, 9:4368, 10:14600}\n    \n    if n in bell:\n        return bell[n]\n    else:\n        if n%2==0:\n            return bell_number(n//2)*bell_number(n//2+1)\n        else:\n            return bell_number(n//2)*bell_number(n//2+1)*3\n    \ndef non_trivial_partitions(n):\n    '''\n    Write a function to find the number of ways to partition a set of numbers.\n    '''\n    \n    def partition(n, k):\n        '''\n        Write a function to find the number of ways to partition a set of numbers.\n        '''\n        nonlocal n, k, memo\n        if k == 1:\n            return n\n        if n == 0:\n            return 0\n        if k == n:\n            return 1\n        if (n, k) in memo:\n            return memo[(n, k)]\n        result = partition(n-k, k)\n        result += partition(n, k-1)\n        memo[(n, k)] = result\n        return result\n    \n    if n<=0:\n        return 0\n    memo = {}\n    return partition(n, n)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Compute the Bell number (n,k)\n    bell = bell_number_helper(n)\n    # If the number of partition is even, the number of ways to partition is divisible by 2.\n    if n % 2 == 0:\n        return bell // 2\n    else:\n        # Else, the number of ways to partition is odd, so we can add 1 to the number of ways.\n        return bell // 2 + 1\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    total = 0\n    for i in range(1, n):\n        total += bell_number(i) * bell_number(n-i)\n    return total\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [0]*(n+1)\n    bells[0] = 1\n    for i in range(1,n+1):\n        bells[i] = bell(i)\n    print(bells)\n    print(sum([bells[i] for i in range(n+1)]))\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2) * n\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = []\n    for n in range(1, n + 1):\n        bell_numbers.append(bell(n))\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3) + bell_number(n-4)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = bell_list(n)\n    return bell[0]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = []\n    for i in range(0, n):\n        bell_numbers.append(bell(i+1))\n    return bell_numbers\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if(A[i]<=A[i+1]):\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    if(len(A) <= 2): \n        return True\n    else:\n        if(A[1] > A[0] and A[1] > A[2]): \n            for i in range(2, len(A)): \n                if(A[i] < A[i-1]): \n                    return False\n            return True\n        elif(A[1] < A[0] and A[1] < A[2]): \n            for i in range(2, len(A)): \n                if(A[i] > A[i-1]): \n                    return False\n            return True\n        else: \n            return False\n        \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\nA = [6, 5, 4, 4] \nprint(is_Monotonic(A)) \n  \nA = [1, 1, 1] \nprint(is_Monotonic(A)) \n  \nA = [1, 3, 2] \nprint(is_Monotonic(A)) \n  \nA = [2, 3, 4, 5] \nprint(is_Monotonic(A)) \n  \nA = [1, 1, 2, 3, 4, 5] \nprint(is_Monotonic(A)) \n  \nA = [1, 1, 1, 1] \nprint(is_Monotonic(A)) "
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if(A[i] >= A[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in xrange(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in xrange(len(A) - 1))) \n    \ndef test_is_Monotonic():\n    assert is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([1, -5, 10, 1100, 1101, 1102, 9001]) == True\n    assert is_Monotonic([1, -5, 10, -1100, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([1, 5, 10, -1100, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([1, 5, 10, 1100, 1101, 1102, 9001]) == True\n    assert is_Monotonic([-1, 5, 10, 1100, 1101, 1102, 9001]) == True\n    assert is_Monotonic([-1, -5, 10, 1100, 1101, 1102, 9001]) == True\n    assert is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, 5, 10, -1100, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, 5, 10, 1100, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, 5, 10, 1100, 1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, 5, 10, 1100, 1101, 1102, -9001]) == True\n    assert is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, 5, -10, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, 5, -10, 1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, 5, -10, 1100, 1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, -5, -10, 1100, 1101, -1102, -9001]) == True\n    assert is_Monotonic([-1, -5, -10, -1100, -1101, -1102, -9001]) == True\n    assert is_Monotonic([1, 5, 10, 1101, 1102, 9001]) == False\n    assert is_Monotonic([1, -5, 10, 1101, 1102, 9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, 1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, 1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, 1100, 1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, 1100, 1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, 1101, 1102, 9001]) == False\n    assert is_Monotonic([1, 5, 10, 1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, -10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, -10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, 5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10, -1100, -1101, -1102, -9001]) == False\n    assert is_Monotonic([1, -5, 10"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n        \ndef main():\n    A = [6, 5, 4, 4]\n    print(is_Monotonic(A))\n    \n    A = [6, 5, 5]\n    print(is_Monotonic(A))\n    \n    A = [1, 2, 4, 5]\n    print(is_Monotonic(A))\n    \n    A = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]\n    print(is_Monotonic(A))\n    \n    A = [-6, -5, -5, -4]\n    print(is_Monotonic(A))\n    \n    A = [1, 3, 2]\n    print(is_Monotonic(A))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0, len(A)-1):\n        if A[i] < A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<2:\n        return True\n    direction = A[1] - A[0]\n    for i in range(2,len(A)):\n        if direction==0:\n            direction = A[i]-A[i-1]\n            continue\n        if direction*(A[i]-A[i-1])<0:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n==1:\n        return True\n    return all(A[i] <= A[i+1] for i in range(n-1)) or all(A[i] >= A[i+1] for i in range(n-1))\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    def is_sublist_aux(l, s, ind, l_ind):\n        '''\n        Takes as input a list, a sublist, and a starting index for the sublist.\n        Returns whether the sublist is actually a sublist of the list.\n        '''\n        if l_ind == len(s):\n            return True\n        elif ind == len(l):\n            return False\n        elif s[l_ind] == l[ind]:\n            return is_sublist_aux(l, s, ind + 1, l_ind + 1)\n        else:\n            return is_sublist_aux(l, s, ind, l_ind)\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    return is_sublist(l[1:], s) if s[0] == l[0] else is_sublist(l[1:], s[1:])\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l or any(sublist == s for i, sublist in enumerate(l))\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    print(\"-----------------------\")\n    print(\"\\n\".join(map(str, l)))\n    print(\"-----------------------\")\n    print(s)\n    print(\"-----------------------\")\n    for i in range(len(l)):\n        if s == l[i]:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if len(l) < len(s):\n        return False\n    if len(l) == len(s) and l!= s:\n        return False\n    i = 0\n    j = 0\n    while i < len(l) and j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    if j == len(s):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    l1 = []\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            l1 = l[i:j]\n            if l1 == s:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l_len = len(l)\n    s_len = len(s)\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n                \n                if n == len(s):\n                    sub_set = True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    #using set\n    if (set(l) <= set(s)):\n        return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i = 0\n    for j in range(len(l)):\n        # print (l[j],s[i])\n        if l[j] == s[i]:\n            i += 1\n            if i == len(s):\n                return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    len_all = [len(i) for i in Input]\n    if len(set(len_all)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Tuple = []\n    for i in Input:\n        Tuple.append(len(i))\n    if(Tuple.count(Tuple[0]) == len(Tuple)):\n        print(\"All the given tuples are of same length.\")\n    else:\n        print(\"All the given tuples are not of same length.\")\n    return\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Your code goes here\n    if(len(Input)==1):\n        return True\n    else:\n        if(len(Input[0])!=len(Input[1])):\n            return False\n        else:\n            for i in range(1,len(Input)):\n                if(len(Input[i])!=len(Input[0])):\n                    return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #return True if all tuples are equal in length else False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) < 2:\n        return False\n    else:\n        for i in range(1,len(Input)):\n            if len(Input[i])!= len(Input[0]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = []\n    n = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i]) == n:\n            Output.append(Input[i])\n        else:\n            pass\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    return all(len(Input[0]) == len(Input[j]) for j in range(n))\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    len_nums = len(nums)\n    gap = len_nums\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    def sort(nums, begin, end):\n        if end <= begin:\n            return\n        pivot = begin\n        for i in range(begin + 1, end + 1):\n            if nums[i] <= nums[pivot]:\n                pivot += 1\n                swap(nums, i, pivot)\n        sort(nums, begin, pivot - 1)\n        sort(nums, pivot + 1, end)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    gap = size\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        gap = max(1, gap)\n        swapped = False\n        i = 0\n        while i+gap < size:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n            i += 1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(len(nums) - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                swapped = True\n                nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums_len = len(nums)\n    gap = nums_len\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap!=1 or swapped == True:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        gap = int(gap)\n        swapped = False\n        for i in range(len(nums)-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # make a copy of the list so that you can see the original list\n    nums_cp = nums.copy()\n    # initialize a list for tracking the swap positions\n    swap_list = []\n    # initialize the number of comparisons and swap positions\n    comparisons = 0\n    swaps = 0\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # If the list is so small that sorting it is not needed, just return it\n    if len(nums) <= 1:\n        return nums\n    \n    # Call comb sort on the list (with a gap of 1)\n    return comb_sort(nums, 1)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0,n+1):\n        for j in range(0,n+1):\n            if i*i + j*j == n:\n                return 1\n    return 0\nprint dif_Square(15)\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            x = i*i\n            y = j*j\n            if x + y == n:\n                return \"Yes! {} =/= {} + {}\".format(x,y,x)\n            elif x - y == n:\n                return \"Yes! {} =/= {} - {}\".format(x,y,x)\n    return \"No!\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt = int(n**0.5)\n    if (n**0.5 == sqrt): \n        return (sqrt * sqrt == n)\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0, n):\n        for j in range(0, n):\n            if i*i + j*j == n:\n                return True\n    return False\n    \nif __name__ == \"__main__\":\n    print(dif_Square(121))"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 4 == 1:\n        return False\n    elif n % 4 == 3:\n        return True\n    else:\n        return n % 4\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n ** 0.5) + 1):\n        if n == i ** 2 + (i + 1) ** 2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s = int(n ** 0.5)\n    for x in range(s, 0, -1):\n        for y in range(s, 0, -1):\n            if (x**2 + y**2) == n:\n                print(x, y)\n                break\n            if (x**2 + y**2) > n:\n                break\ndif_Square(22)\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if ((n & (n - 1)) == 0) and ((n & 0x55555555) == 0): \n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_nums = [i**2 for i in range(n) if i**2 <= n]\n    # print(square_nums)\n    for i in square_nums:\n        if n - i in square_nums:\n            return 1\n    return 0\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sq=0\n    i=1\n    while(i*i<=n):\n        sq=i*i\n        i+=1\n    print(sq)\n    if (sq*2)==n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # O(len(colors))\n    count = [0]*len(patterns)\n    for color in colors:\n        for i, pattern in enumerate(patterns):\n            if color in pattern:\n                count[i] += 1\n    return count == [1]*len(patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_pattern_map = {}\n    for idx,color in enumerate(colors):\n        if color in color_pattern_map:\n            if color_pattern_map[color]!= patterns[idx]:\n                return False\n        else:\n            color_pattern_map[color] = patterns[idx]\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        if color not in patterns:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for col in colors:\n        # if it is the first color, it must be white\n        if colors.index(col) == 0:\n            if col!= 'W':\n                return False\n        # if it is not the first color, it must be the color that follows the pattern\n        elif colors.index(col) % 2 == patterns[colors.index(col)//2]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return False\n    \n    if len(patterns) == 0:\n        return True\n    \n    if len(colors) < len(patterns):\n        return False\n    \n    dic = {}\n    for color in colors:\n        if color not in dic:\n            dic[color] = 1\n        else:\n            dic[color] += 1\n            \n    for pattern in patterns:\n        if pattern not in dic:\n            return False\n        elif dic[pattern] == 0:\n            return False\n        else:\n            dic[pattern] -= 1\n            \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    patterns = [\n        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == len(patterns):\n        for i in range(len(colors)):\n            if patterns[i] == colors[i]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] in patterns[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) < 1 or len(patterns) < 1:\n        return False\n    for i in range(0, len(patterns) - 1):\n        if patterns[i] == patterns[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #find the indices of the tuples with all elements divisible by k\n    indices = [i for i in range(len(test_list)) if all([i%k==0 for i in test_list[i]])]\n    tuples = [test_list[i] for i in indices]\n    return tuples\n    \ndef find_tuples2(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [i for i in test_list if all([i%k==0 for i in i])]\n    "
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [t for t in test_list if all(i%K==0 for i in t)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if (i[0] % K == 0) and (i[1] % K == 0):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if (all(i % K == 0 for i in t)):\n            result.append(t)\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for num in test_list:\n        if num[0] % K == 0 and num[1] % K == 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for tup in test_list:\n        if sum(list(map(lambda x: x % K, tup))) == 0:\n            result_list.append(tup)\n    return result_list\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tuple(i for i in tup if i%K==0) for tup in test_list]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    a = []\n    for i in range(len(test_list)):\n        if all(map(lambda x: x % K == 0, test_list[i])):\n            a.append(test_list[i])\n    return a\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [t for t in test_list if all(x % K == 0 for x in t)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in test_list:\n        # print(i)\n        if i[0] % K == 0 and i[1] % K == 0:\n            res.append(i)\n    return res\n    # return [i for i in test_list if i[0] % K == 0 and i[1] % K == 0]\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        print(\"Number is divisible by 11.\")\n    else:\n        print(\"Number is not divisible by 11.\") \n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\nn=int(input('Enter a number:'))\nprint(is_Diff(n))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    try:\n        if n % 11 == 0:\n            return True\n        else:\n            return False\n    except ValueError:\n        print(\"Invalid Input\")\n        \ndef is_Diff_2(n):\n    '''\n    Write a python function to check whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    return False\nprint(is_Diff(int(input(\"Enter a number \"))))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n    \nis_Diff(56)\nis_Diff(11)\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11 == 0): \n        return True\n    else: \n        return False\nn = int(input(\"Enter a number: \"))\nif(is_Diff(n) == True): \n    print(\"Number is divisible by 11\") \nelse: \n    print(\"Number is not divisible by 11\") \n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if(len(s)%2==0):\n        return \"False\"\n    else:\n        return \"True\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2 == 0:\n        return \"The length of the word is even\"\n    else:\n        return \"The length of the word is odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return \"N must be greater than 0\"\n    elif n == 1:\n        return 1\n    else:\n        return n * (n-1) // 2 + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)*(n+3)//24 \ndef pentagonal_number(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return n*(3*n-1)//2 \ndef hexagonal_number(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1) \ndef heptagonal_number(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    return n*(5*n-3)//2 \ndef octagonal_number(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-2) \ndef is_perfect_number(n): \n    '''\n    Write a function to check whether a number is a perfect number or not.\n    '''\n    sum_divisors = 1 \n    for i in range(2, int(sqrt(n))+1): \n        if n % i == 0: \n            if n//i == i: \n                sum_divisors += i \n            else: \n                sum_divisors += i \n                sum_divisors += n//i \n    return sum_divisors == n \ndef is_palindromic_number(n): \n    '''\n    Write a function to check whether a number is a palindromic number or not.\n    '''\n    str_n = str(n) \n    return str_n == str_n[::-1] \ndef is_prime_number(n): \n    '''\n    Write a function to check whether a number is a prime number or not.\n    '''\n    for i in range(2, int(sqrt(n))+1): \n        if n % i == 0: \n            return False \n    return True \ndef is_super_prime_number(n): \n    '''\n    Write a function to check whether a number is a super prime number or not.\n    '''\n    if is_prime_number(n): \n        if n == 2: \n            return True \n        return False \n    for i in range(2, int(sqrt(n))+1): \n        if n % i == 0: \n            if is_prime_number(n//i): \n                return True \n    return False \ndef is_powerful_number(n): \n    '''\n    Write a function to check whether a number is a powerful number or not.\n    '''\n    for i in range(2, int(sqrt(n))+1): \n        if n % i == 0: \n            if is_prime_number(i) and is_prime_number(n//i): \n                return True \n    return False \ndef is_mersenne_prime_number(n): \n    '''\n    Write a function to check whether a number is a Mersenne prime number or not.\n    '''\n    return is_prime_number(2**n - 1) \ndef is_amicable_number(n): \n    '''\n    Write a function to check whether a number is an amicable number or not.\n    '''\n    sum_divisors = 0 \n    for i in range(2, int(sqrt(n))+1): \n        if n % i == 0: \n            if n//i == i: \n                sum_divisors += i \n            else: \n                sum_divisors += i \n                sum_divisors += n//i \n    return sum_divisors == n and is_perfect_number(sum_divisors) \ndef print_triangle_numbers(n): \n    '''\n    Write a function to print the first n triangle numbers.\n    '''\n    for i in range(n): \n        print(tetrahedral_number(i)) \ndef print_pentagonal_numbers(n): \n    '''\n    Write a function to print the first n pentagonal numbers.\n    '''\n    for i in range(n): \n        print(pentagonal_number(i)) \ndef print_hexagonal_numbers(n): \n    '''\n    Write a function to print the first n hexagonal numbers.\n    '''\n    for i in range(n): \n        print(hexagonal_number(i)) \ndef print_heptagonal_numbers(n): \n    '''\n    Write a function to print the first n heptagonal numbers.\n    '''\n    for i in range(n): \n        print(heptagonal_number(i)) \ndef print_octagonal_numbers(n): \n    '''\n    Write a function to print the first n octagonal numbers.\n    '''\n    for i in range(n): \n        print(octagonal_number(i)) \ndef print_perfect_numbers(n): \n    '''\n    Write a function to print the first n perfect numbers.\n    '''\n    for i in range(n): \n        print(i) \n        if is_perfect_number(i): \n            print(i) \ndef print_super_prime_numbers(n): \n    '''\n    Write a function to print the first n super prime numbers.\n    '''\n    for i in range(n): \n        print(i) \n        if is_super_prime_number(i): \n            print(i) \ndef print_prime_numbers(n): \n    '''\n    Write a function to print the first n prime numbers.\n    '''\n    for i in range(n): \n        print(i) \n        if is_prime_number(i): \n            print(i) \ndef print_mersenne_prime_numbers(n): \n    '''\n    Write a function to print the first n Mersenne prime numbers.\n    '''\n    for i in range(n): \n        print(2**i - 1) \n        if is_mersenne_prime_number(i): \n            print(2**i - 1) \ndef print_amicable_numbers(n): \n    '''\n    Write a function to print the first n amicable numbers.\n    '''\n    for i in range(n): \n        print(i) \n        if is_amicable_number(i): \n            print(i) \ndef print_powerful_numbers(n): \n    '''\n    Write a function to print the first n powerful numbers.\n    '''\n    for i in range(n): \n        print(i) \n        if is_powerful_number(i): \n            print(i) \ndef print_triangle_divisors(n): \n    '''\n    Write a function to print the divisors of the first n triangle numbers.\n    '''\n    for i in range(n): \n        print(tetrahedral_number(i), end='\\t') \n        for j in range(1, int(sqrt(tetrahedral_number(i)))+1): \n            if tetrahedral_number(i) % j == 0: \n                print(j, end=' ') \n        print() \ndef print_pentagonal_divisors(n): \n    '''\n    Write a function to print the divisors of the first n pentagonal numbers.\n    '''\n    for i in range(n): \n        print(pentagonal_number(i), end='\\t') \n        for j in range(1, int(sqrt(pentagonal_number(i)))+1): \n            if pentagonal_number(i) % j == 0: \n                print(j, end=' ') \n        print() \ndef print_hexagonal_divisors(n): \n    '''\n    Write a function to print the divisors of the first n hexagonal numbers.\n    '''\n    for i in range(n): \n        print(hexagonal_number(i), end='\\t') \n        for j in range(1, int(sqrt(hexagonal_number(i)))+1): \n            if hexagonal_number(i) % j == 0: \n                print(j, en"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += (-1) ** (i + 1) * (i ** 3) / (3 ** i)\n    return int(result)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(3*n - 1)/2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n*(n+1)*(n+2))/6)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==1:\n        return n\n    if n==2:\n        return 3\n    if n==3:\n        return 6\n    return n*(n+1)//2 + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 0\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # import numpy as np\n    # import matplotlib.pyplot as plt\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r=float(input(\"Enter the radius of the sphere : \"))\n    \n    V=4/3*math.pi*r**3\n    \n    print(\"The volume of the sphere is : %.2f\" %V)\n    return None\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = int(r)\n    vol = (4/3)*math.pi*(r**3)\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*(math.pi)*(r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4.0/3.0) * math.pi * (r**3)\n    \n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi) * (r**2) * h\ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return l * w * h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * (r**2) * h\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (l**3)\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (1/2) * b * h\ndef area_rectangle(b,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return b * h\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return (math.pi) * (r**2)\ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return b * h\ndef area_trapezium(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    return ((b1+b2)/2) * h\ndef area_ellipse(a,b):\n    '''\n    Write a function to find the area of an ellipse.\n    '''\n    return (math.pi) * (a * b)\ndef area_rhombus(b,h):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return (1/2) * b * h\ndef area_kite(b,h):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    return (1/2) * b * h\ndef area_hexagon(b):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return (3**(1/2)) * b**2\ndef area_octagon(b):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    return 2 * (1+(5**(1/2)) * b)\ndef area_isosceles_triangle(b,h):\n    '''\n    Write a function to find the area of an isosceles triangle.\n    '''\n    return (1/2) * b * h\ndef area_equilateral_triangle(b):\n    '''\n    Write a function to find the area of an equilateral triangle.\n    '''\n    return (1/4) * b**2\ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (1/2) * b * h\ndef area_trapezium(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    return ((b1+b2)/2) * h\ndef area_ellipse(a,b):\n    '''\n    Write a function to find the area of an ellipse.\n    '''\n    return (math.pi) * (a * b)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return (math.pi) * (r**2)\ndef area_sector(r,h):\n    '''\n    Write a function to find the area of a sector.\n    '''\n    return (1/2) * r * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    return (1/2) * r**2 * h\ndef area_circle_sector(r,h):\n    '''\n    Write a function t"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)\n    return sum%26\n    \n    "
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    for i in strr:\n        print(i,end=\"\")\n    c=0\n    for i in strr:\n        c+=ord(i)\n    # print(c%26)\n    return c%26\n    \n    # def get_Char(strr):\n    #     import string\n    #     lst=[]\n    #     for i in strr:\n    #         lst.append(ord(i))\n    #     a=sum(lst)\n    #     return a%26\n    \nprint(get_Char('sdw'))\n    \n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)\n    return sum%26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    temp = 0\n    for i in strr:\n        temp += ord(i)\n    print(chr(temp%26))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 1:\n        return ord(strr[0])\n    else:\n        return ord(strr[0])+get_Char(strr[1:])%26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    sum1 = 0\n    for i in strr:\n        sum1 = sum1 + ord(i)\n    return sum1 % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    i = 0\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr(sum % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def check_if_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2,num):\n            if num%i == 0:\n                return False\n        return True\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return check_if_prime(sum)\n    #sum = 0\n    #for i in strr:\n    #    sum += ord(i)\n    #if sum <= 26:\n    #    return False\n    #return check_if_prime(sum)\n    "
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr(sum % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return sum%26\n    \ndef main():\n    strr = input(\"Enter a string: \")\n    print(\"The char of the given string is: \", get_Char(strr))\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return sequence(n-1) + sequence(n-2)\n        "
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # base case:\n    if n == 0:\n        return 0\n    # recursive case:\n    else:\n        return n + sequence(n - 1)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    numbers = {1: [1]}\n    for i in range(2, n):\n        temp_list = [1]\n        for j in range(len(numbers[i - 1]) - 1):\n            temp_list.append(numbers[i - 1][j] + numbers[i - 1][j + 1])\n        temp_list.append(1)\n        numbers[i] = temp_list\n    return numbers[n - 1]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #initialize sequence array\n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    if n < len(sequence):\n        return sequence[n]\n    else:\n        for i in range(len(sequence), n):\n            sequence.append(sequence[i-1] + sequence[i-2])\n        return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def func(x):\n        return x*x - x*x*x + x*x*x*x + x*x*x*x*x + x*x*x*x*x*x\n    return newton(n,func)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: return 0\n    if n == 1: return 2\n    if n == 2: return 3\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def number_finder(n, curr_index):\n        '''\n        Given a current index and an input number, return the next index in the sequence.\n        '''\n        if curr_index == 0:\n            return 1\n        if curr_index == 1:\n            return 2\n        return number_finder(n, curr_index-1) + number_finder(n, curr_index-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #Create a list\n    newman_conway_sequence = []\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea=4*math.pi*r**2\n    print(\"The Surface area of a sphere is {}\".format(surfacearea))\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=4*math.pi*r**3/3\n    print(\"The volume of a sphere is {}\".format(volume))\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea=2*math.pi*r*h\n    print(\"The Surface area of a cylinder is {}\".format(surfacearea))\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume=math.pi*r**2*h\n    print(\"The volume of a cylinder is {}\".format(volume))\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surfacearea=math.pi*r*h\n    print(\"The Surface area of a cone is {}\".format(surfacearea))\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=1/3*math.pi*r**2*h\n    print(\"The volume of a cone is {}\".format(volume))\ndef surfacearea_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfacearea=6*s**2\n    print(\"The Surface area of a cube is {}\".format(surfacearea))\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume=s**3\n    print(\"The volume of a cube is {}\".format(volume))\ndef surfacearea_rectangle(l,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    surfacearea=l*b\n    print(\"The Surface area of a rectangle is {}\".format(surfacearea))\ndef volume_rectangle(l,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    volume=l*b\n    print(\"The volume of a rectangle is {}\".format(volume))\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    s=(a+b+c)/2\n    surfacearea=math.sqrt(s*(s-a)*(s-b)*(s-c))\n    print(\"The Surface area of a triangle is {}\".format(surfacearea))\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    s=(a+b+c)/2\n    volume=math.sqrt(s*(s-a)*(s-b)*(s-c))/3\n    print(\"The volume of a triangle is {}\".format(volume))\ndef surfacearea_parallelogram(l,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    surfacearea=l*b\n    print(\"The Surface area of a parallelogram is {}\".format(surfacearea))\ndef volume_parallelogram(l,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    volume=l*b\n    print(\"The volume of a parallelogram is {}\".format(volume))\ndef surfacearea_square(s):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    surfacearea=s**2\n    print(\"The Surface area of a square is {}\".format(surfacearea))\ndef volume_square(s):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    volume=s**2\n    print(\"The volume of a square is {}\".format(volume))\ndef surfacearea_rectangle_triangle_trapezoid(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangle, triangle, or trapezoid.\n    '''\n    print(\"The Surface area of a rectangle, triangle, or trapezoid is {}\".format(a+b+c))\ndef volume_rectangle_triangle_trapezoid(a,b,c):\n    '''\n    Write a function to find the volume of a rectangle, triangle, or trapezoid.\n    '''\n    print(\"The volume of a rectangle, triangle, or trapezoid is {}\".format((a*b*c)/2))\ndef surfacearea_parallelogram_square_trapezoid(l,b,h):\n    '''\n    Write a function to find the surface area of a parallelogram, square, or trapezoid.\n    '''\n    print(\"The Surface area of a parallelogram, square, or trapezoid is {}\".format(l*b+b*h))\ndef volume_parallelogram_square_trapezoid(l,b,h):\n    '''\n    Write a function to find the volume of a parallelogram, square, or trapezoid.\n    '''\n    print(\"The volume of a parallelogram, square, or trapezoid is {}\".format((l*b*h)/3))\ndef surfacearea_circle_square_trapezoid(r):\n    '''\n    Write a function to find the surface area of a circle, square, or trapezoid.\n    '''\n    print(\"The Surface area of a circle, square, or trapezoid is {}\".format(2*math.pi*r))\ndef volume_circle_square_trapezoid(r):\n    '''\n    Write a function to find the volume of a circle, square, or trapezoid.\n    '''\n    print(\"The volume of a circle, square, or trapezoid is {}\".format(math.pi*r**2))\ndef surfacearea_sphere_triangle_trapezoid(r):\n    '''\n    Write a function to find the surface area of a sphere, triangle, or trapezoid.\n    '''\n    print(\"The Surface area of a sphere, triangle, or trapezoid is {}\".format(4*math.pi*r**2))\ndef volume_sphere_triangle_trapezoid(r):\n    '''\n    Write a function to find the volume of a sphere, triangle, or trapezoid.\n    '''\n    print(\"The volume of a sphere, triangle, or trapezoid is {}\".format((4*math.pi*r**3)/3))\ndef surfacearea_cylinder_square_trapezoid(r,h):\n    '''\n    Write a function to find the surface area of a cylinder, square, or trapezoid.\n    '''\n    print(\"The Surface area of a cylinder, square, or trapezoid is {}\".format(2*math.pi*r*h))\ndef volume_cylinder_square_trapezoid(r,h):\n    '''\n    Write a function to find the volume of a cylinder, square, or trapezoid.\n    '''\n    print(\"The volume of a cylinder, square, or trapezoid is {}\".format(math.pi*r**2*h))\ndef surfacearea_cone_square_trapezoid(r,h):\n    '''\n    Write a function to find the surface area of a cone, square, or trapezoid.\n    '''\n    print(\"The Surface area of a cone, square, or trapezoid is {}\".format(math.pi*r*h))\ndef volume_cone_square_trapezoid(r,h):\n    '''\n    Write a function to find the volume of a cone, square, or trapezoid.\n    '''\n    print(\"The volume of a cone, square, or trapezoid is {}\".format((1/3)*math.pi*r**2*h))\ndef surfacearea_cube_rectangle_trapezoid(s):\n    '''\n    Write a function to find the surface area of a cube, rectangle, or trapezoid.\n    '''\n    print(\"The Surface area of a cube, rectangle, or trapezoid is {}\".format(6*s**2))\ndef volume_cube_rectangle_trapezoid(s):\n    '''\n    Write "
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return sa\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa=2*math.pi*r*h+2*math.pi*r**2\n    return sa\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    sa=math.pi*r**2+math.pi*r*h\n    return sa\ndef surfacearea_prism(l,w,h):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    sa=2*l*w+2*l*h+2*w*h\n    return sa\ndef surfacearea_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    sa=6*s**2\n    return sa\ndef surfacearea_tetrahedron(s):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    sa=4*math.sqrt(3)*s**2\n    return sa\ndef surfacearea_hexagon(s):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    sa=6*math.sqrt(3)*s**2/2\n    return sa\ndef surfacearea_rectangle(s,l):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    sa=2*s*l\n    return sa\ndef surfacearea_triangle(s,b):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    sa=s*b/2\n    return sa\ndef surfacearea_rhombus(s,b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    sa=s*b\n    return sa\ndef surfacearea_squarepyramid(s,b):\n    '''\n    Write a function to find the surface area of a square pyramid.\n    '''\n    sa=2*(s*b+s**2)**(1/2)\n    return sa\ndef surfacearea_parallelogram(s,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    sa=s*b\n    return sa\ndef surfacearea_triangularprism(s,b,h):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    sa=(s*b**2+s*h**2)**(1/2)\n    return sa\ndef surfacearea_rectangularprism(s,b,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    sa=2*(s*b+s*h)\n    return sa\ndef surfacearea_spheretriangularprism(r,h):\n    '''\n    Write a function to find the surface area of a sphere triangular prism.\n    '''\n    sa=2*(math.pi*r**2*h)\n    return sa\ndef surfacearea_cubictriangularprism(s,b,h):\n    '''\n    Write a function to find the surface area of a cube triangular prism.\n    '''\n    sa=3*(s*b**2+s*h**2)\n    return sa\ndef surfacearea_cubehexagonalprism(s,h):\n    '''\n    Write a function to find the surface area of a cube hexagonal prism.\n    '''\n    sa=6*s*h\n    return sa\ndef surfacearea_pyramidalhexagonalprism(s,h):\n    '''\n    Write a function to find the surface area of a pyramidal hexagonal prism.\n    '''\n    sa=2*s*(math.sqrt(2)*h+h/math.sqrt(6))\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=4/3*math.pi*r**3\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=math.pi*r**2*h\n    return v\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=1/3*math.pi*r**2*h\n    return v\ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    v=l*w*h\n    return v\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v=s**3\n    return v\ndef volume_tetrahedron(s):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    v=1/4*math.sqrt(3)*s**3\n    return v\ndef volume_hexagon(s):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    v=1/2*math.sqrt(3)*s**2\n    return v\ndef volume_rectangle(s,l):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    v=s*l\n    return v\ndef volume_triangle(s,b):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    v=s/2*b\n    return v\ndef volume_rhombus(s,b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    v=s*b/2\n    return v\ndef volume_squarepyramid(s,b):\n    '''\n    Write a function to find the volume of a square pyramid.\n    '''\n    v=s*b**2/3\n    return v\ndef volume_parallelogram(s,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    v=s*b\n    return v\ndef volume_triangularprism(s,b,h):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    v=s*b*h/3\n    return v\ndef volume_rectangularprism(s,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    v=s*b*h\n    return v\ndef volume_spheretriangularprism(r,h):\n    '''\n    Write a function to find the volume of a sphere triangular prism.\n    '''\n    v=1/3*math.pi*r**2*h\n    return v\ndef volume_cubictriangularprism(s,b,h):\n    '''\n    Write a function to find the volume of a cube triangular prism.\n    '''\n    v=s*b**2*h/3\n    return v\ndef volume_cubehexagonalprism(s,h):\n    '''\n    Write a function to find the volume of a cube hexagonal prism.\n    '''\n    v=s*h**3/3\n    return v\ndef volume_pyramidalhexagonalprism(s,h):\n    '''\n    Write a function to find the volume of a pyramidal hexagonal prism.\n    '''\n    v=s*(math.sqrt(2)*h**2+h/math.sqrt(6))\n    return v\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * (r**2)\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea_sphere = 4 * math.pi * r**2\n    return surfacearea_sphere\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4*math.pi*r**2\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * r ** 3\ndef circumference_cylinder(r, h):\n    '''\n    Write a function to find the circumference of a cylinder.\n    '''\n    return 2 * math.pi * r + 2 * math.pi * r * h\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h + 2 * math.pi * r ** 2\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r ** 2 * h\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * r * (r + h)\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1 / 3 * math.pi * r ** 2 * h\ndef surfacearea_prism(a, b, c):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    return 2 * (a * b + a * c + b * c)\ndef volume_prism(a, b, c):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return a * b * c\ndef surfacearea_triangle(a, b, c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (a + b + c) / 2\ndef volume_triangle(a, b, c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (a * b * c) ** (1 / 2)\ndef surfacearea_rhombus(a, b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    return 4 * a * b\ndef volume_rhombus(a, b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return a * b / 2\ndef surfacearea_rectangle(a, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a * b\ndef volume_rectangle(a, b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return a * b\ndef surfacearea_square(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return 4 * a ** 2\ndef volume_square(a):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return a ** 2\ndef surfacearea_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * a ** 2\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a ** 3\ndef surfacearea_cube_mesh(d, h):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return d ** 2 * 6\ndef volume_cube_mesh(d, h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return d ** 3\ndef surfacearea_rectangular_prism(a, b, c):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2 * (a * b + a * c + b * c)\ndef volume_rectangular_prism(a, b, c):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return a * b * c\ndef surfacearea_circular_prism(a, b):\n    '''\n    Write a function to find the surface area of a circular prism.\n    '''\n    return 2 * math.pi * a * b\ndef volume_circular_prism(a, b):\n    '''\n    Write a function to find the volume of a circular prism.\n    '''\n    return math.pi * a ** 2 * b\ndef surfacearea_conical_frustum(r, h):\n    '''\n    Write a function to find the surface area of a conical frustum.\n    '''\n    return math.pi * r * (r + h)\ndef volume_conical_frustum(r, h):\n    '''\n    Write a function to find the volume of a conical frustum.\n    '''\n    return math.pi / 3 * r ** 2 * h\ndef surfacearea_cylinder_with_hole(r, h):\n    '''\n    Write a function to find the surface area of a cylinder with a hole.\n    '''\n    return 2 * (math.pi * r * (r + h) - math.pi * (r ** 2 + r * h) + math.pi * r * h)\ndef volume_cylinder_with_hole(r, h):\n    '''\n    Write a function to find the volume of a cylinder with a hole.\n    '''\n    return math.pi * r ** 2 * h\ndef surfacearea_cone_with_hole(r, h):\n    '''\n    Write a function to find the surface area of a cone with a hole.\n    '''\n    return math.pi * r * (r + h)\ndef volume_cone_with_hole(r, h):\n    '''\n    Write a function to find the volume of a cone with a hole.\n    '''\n    return math.pi / 3 * r ** 2 * h\ndef surfacearea_hemisphere(r):\n    '''\n    Write a function to find the surface area of a hemisphere.\n    '''\n    return 2 * math.pi * r ** 2\ndef volume_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    return 1 / 3 * math.pi * r ** 3\ndef surfacearea_sphere_with_hole(r):\n    '''\n    Write a function to find the surface area of a sphere with a hole.\n    '''\n    return 4 * math.pi * r * (r - r / 10)\ndef volume_sphere_with_hole(r):\n    '''\n    Write a function to find the volume of a sphere with a hole.\n    '''\n    return 4 / 3 * math.pi * r ** 3 * (r - r / 10)\ndef surfacearea_parallelopiped(a, b, c):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    return 2 * (a * b + a * c + b * c)\ndef volume_parallelopiped(a, b, c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    return a * b * c\ndef surfacearea_ellipsoid(a, b, c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    return 4 * math.pi * a * b * c\ndef volume_ellipsoid(a, b, c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return (4 / 3) * math.pi * a * b * c\ndef surfacearea_rhombus_with_hole(a, b):\n    '''\n    Write a function to find the surface area of a rhombus with a hole.\n    '''\n    return 4 * a * b\ndef volume_rhombus_with_hole(a, b):\n    '''\n    Write a function to find the volume of a rhombus with a hole.\n    '''\n    return (1 / 3) * a ** 2 * b\ndef surfacearea_rectangular_prism_with_hole(a, b, c):\n    '''\n    Write a function to find the surface area of a rectangular prism with a hol"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    sa = 4*pi*(r**2)\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula for surface area of a sphere = 4 * 3.14 * r**2\n    # 3.14 = pi \n    # radius = r\n    # r**2 = radius**2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4*math.pi*r*r\n    return surfacearea\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def nth_centered_hexagonal_number(n):\n        return 1/2 * (n * ((2 * n) - 1))\n    return nth_centered_hexagonal_number(n)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # p = n / 2\n    # if n % 2 == 0:\n    #     return ((p + 1) * p) / 2\n    # else:\n    #     return (p + 1) * p / 2 + p\n    # n = n % 6\n    n = n % 5\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 0:\n        return hexagonal_number(n//2)\n    else:\n        return hexagonal_number(n//2) + 2 * (hexagonal_number(n//2 + 1) - hexagonal_number(n//2 - 1))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # https://en.wikipedia.org/wiki/Hexagonal_number\n    # https://en.wikipedia.org/wiki/Centered_hexagonal_number\n    # https://www.math.ucla.edu/~mgshu/Math110F13Labs/lecture_10.pdf\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (-1) ** (n + 1) * n ** 2\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a, b = 1, 0\n    n = n - 1\n    while n > 0:\n        a, b = b, a + b\n        n = n - 1\n    return a\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # make a list\n    hexagonal = []\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n) - hexagonal_number(n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (centered_hexagonal_number(n-1) + 1)**2 - 1\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def f(n, m):\n        if n == 0:\n            return 1\n        return m * f(n - 1, m + 1)\n    if n == 0:\n        return 1\n    return f(n, 1)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not dict1:\n        return dict2\n    elif not dict2:\n        return dict1\n    elif not dict3:\n        return dict2\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1,**dict2,**dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict2:\n        if key in dict1:\n            dict1[key] += dict2[key]\n        else:\n            dict1[key] = dict2[key]\n    for key in dict3:\n        if key in dict1:\n            dict1[key] += dict3[key]\n        else:\n            dict1[key] = dict3[key]\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2)\ndef remove_key_from_dictionary(dict, key):\n    '''\n    Write a function to remove a key from a dictionary.\n    '''\n    dict.pop(key)\ndef remove_key_from_dictionary_two(dict, key):\n    '''\n    Write a function to remove a key from a dictionary.\n    '''\n    del dict[key]\ndef get_value_from_dictionary(dict, key):\n    '''\n    Write a function to get a value from a dictionary using a key.\n    '''\n    return dict[key]\ndef get_value_from_dictionary_two(dict, key):\n    '''\n    Write a function to get a value from a dictionary using a key.\n    '''\n    return dict.get(key)\ndef dictionary_length(dict):\n    '''\n    Write a function to determine the length of a dictionary.\n    '''\n    return len(dict)\ndef dictionary_contains_key(dict, key):\n    '''\n    Write a function to determine whether a dictionary contains a specific key.\n    '''\n    return key in dict\ndef dictionary_contains_key_two(dict, key):\n    '''\n    Write a function to determine whether a dictionary contains a specific key.\n    '''\n    return dict.__contains__(key)\ndef get_dictionary_keys(dict):\n    '''\n    Write a function to return all keys from a dictionary.\n    '''\n    return list(dict.keys())\ndef get_dictionary_keys_two(dict):\n    '''\n    Write a function to return all keys from a dictionary.\n    '''\n    return dict.keys()\ndef get_dictionary_values(dict):\n    '''\n    Write a function to return all values from a dictionary.\n    '''\n    return list(dict.values())\ndef get_dictionary_values_two(dict):\n    '''\n    Write a function to return all values from a dictionary.\n    '''\n    return dict.values()\ndef get_dictionary_items(dict):\n    '''\n    Write a function to return all items from a dictionary.\n    '''\n    return dict.items()\ndef get_dictionary_items_two(dict):\n    '''\n    Write a function to return all items from a dictionary.\n    '''\n    return dict.items()\ndef dictionary_update_value(dict, key, value):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_two(dict, key, value):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_two(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_three(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_four(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_five(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_six(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_seven(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_eight(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_nine(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_ten(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_eleven(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twelve(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_thirteen(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_fourteen(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_fifteen(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_sixteen(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_seventeen(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_eighteen(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_nineteen(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty_one(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty_two(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty_three(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty_four(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty_five(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty_six(dict, key, value, dict2):\n    '''\n    Write a function to update a value in a dictionary.\n    '''\n    dict[key] = value\ndef dictionary_update_value_three_twenty_seven(dict, ke"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_new = dict1.copy()\n    for key,value in dict2.items():\n        if key in dict_new.keys():\n            dict_new[key] = dict_new[key] + value\n        else:\n            dict_new[key] = value\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}))\ndef merge_dictionaries_four(dict1,dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_four({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, 'j': 10}))\ndef merge_dictionaries_five(dict1, dict2, dict3, dict4, dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4, dict5):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_five({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, 'j': 10}, {'k': 11, 'l': 12,'m': 13}))\ndef merge_dictionaries_six(dict1, dict2, dict3, dict4, dict5, dict6):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_six({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, 'j': 10}, {'k': 11, 'l': 12,'m': 13}, {'n': 14, 'o': 15, 'p': 16}))\ndef merge_dictionaries_seven(dict1, dict2, dict3, dict4, dict5, dict6, dict7):\n    '''\n    Write a function to merge seven dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_seven({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, 'j': 10}, {'k': 11, 'l': 12,'m': 13}, {'n': 14, 'o': 15, 'p': 16}, {'q': 17, 'r': 18,'s': 19}))\ndef merge_dictionaries_eight(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_eight({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, 'j': 10}, {'k': 11, 'l': 12,'m': 13}, {'n': 14, 'o': 15, 'p': 16}, {'q': 17, 'r': 18,'s': 19}, {'t': 20, 'u': 21, 'v': 22}))\ndef merge_dictionaries_nine(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9):\n    '''\n    Write a function to merge nine dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_nine({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, 'j': 10}, {'k': 11, 'l': 12,'m': 13}, {'n': 14, 'o': 15, 'p': 16}, {'q': 17, 'r': 18,'s': 19}, {'t': 20, 'u': 21, 'v': 22}, {'w': 23, 'x': 24, 'y': 25, 'z': 26}))\ndef merge_dictionaries_ten(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10):\n    '''\n    Write a function to merge ten dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_ten({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, 'j': 10}, {'k': 11, 'l': 12,'m': 13}, {'n': 14, 'o': 15, 'p': 16}, {'q': 17, 'r': 18,'s': 19}, {'t': 20, 'u': 21, 'v': 22}, {'w': 23, 'x': 24, 'y': 25, 'z': 26}, {'a': 27, 'b': 28, 'c': 29, 'd': 30}))\ndef merge_dictionaries_eleven(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11):\n    '''\n    Write a function to merge eleven dictionaries into a single dictionary.\n    '''\n    my_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11):\n        for key, value in d.items():\n            my_dict[key].append(value)\n    return my_dict\nprint(merge_dictionaries_eleven({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}, {'h': 8, 'i': 9, '"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_new = dict1.copy()\n    dict_new.update(dict2)\n    dict_new.update(dict3)\n    return dict_new\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_res = {**dict1, **dict2, **dict3}\n    return dict_res\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_res = dict1.copy()\n    dict_res.update(dict2)\n    dict_res.update(dict3)\n    return dict_res\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = dict()\n    for x in list1:\n        freq_dict[x] = list1.count(x)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = dict()\n    for i in list1:\n        if i not in freq_dict:\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # list1 = [12, 45, 54, 45, 12, 12, 45, 54, 45, 45, 12, 12, 45, 54, 45, 45, 45]\n    dict1 = collections.Counter(list1)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_count = {}\n    for x in list1:\n        if x in freq_count:\n            freq_count[x] += 1\n        else:\n            freq_count[x] = 1\n    return freq_count\nprint(freq_count([1, 1, 1, 3, 3, 3, 5, 5, 6, 6]))\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for e in list1:\n        if e in count.keys():\n            count[e] += 1\n        else:\n            count[e] = 1\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = collections.Counter(list1)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_count = {}\n    for num in list1:\n        if num not in freq_count.keys():\n            freq_count[num] = 1\n        else:\n            freq_count[num] += 1\n    return freq_count\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #frequency = collections.Counter(list1)\n    #return frequency\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        print(\"Invalid Number!\")\n        return\n    \n    print(closest_smaller_num(N))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # index of smallest element in array\n    # if n is smallest, return -1\n    # else return the index of the smallest element\n    def find_closest(arr, n):\n        smallest = float('inf')\n        index = 0\n        for i, num in enumerate(arr):\n            if num < smallest:\n                smallest = num\n                index = i\n        if n == smallest:\n            return -1\n        else:\n            return index\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    n = 9\n    index = find_closest(arr, n)\n    print(index)\n    print(arr[index])\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    import math\n    def find_closest(n):\n        if n % 2 == 0:\n            return n - 1\n        else:\n            return n + 1\n    num = 0\n    print(find_closest(N))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 10:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # close = lambda x, y: (x-y, y) if x-y < 0 else (y-x, x)\n    close = lambda x, y: y if x-y < 0 else x\n    for y in range(N-1, -1, -1):\n        if N-y == close(N, y+1)[0]:\n            return y\n    return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = len(str(N))\n    output = 10**(l-1)\n    for i in range(l-2, -1, -1):\n        if (N//(10**i))%10 >= N%10:\n            output = N//(10**i) + 10**i\n            break\n        elif (N//(10**i))%10 < N%10:\n            output = N//(10**i)\n            break\n    return output\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # we want to do a binary search to find the closest number\n    # we can define the lower bound as 0 and upper bound as N\n    # if N > 0, then we take a closer bound, and vice versa\n    lower_bound = 0\n    upper_bound = N\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 6:\n        return N + 1\n    else:\n        N = str(N)\n        N = list(N)\n        for i in range(len(N)-1,0,-1):\n            if int(N[i]) < int(N[i-1]):\n                N[i] = str(int(N[i]) + 1)\n                for j in range(i+1, len(N)):\n                    N[j] = '0'\n                N = ''.join(N)\n                return int(N)\n        return int(''.join(N))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n    smallest = N\n    for i in range(0,N):\n        if N - i < N - smallest:\n            smallest = N - i\n    return smallest\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def is_smaller(n, b):\n        return n < b\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list=[]\n    for i in list1:\n        len_list.append(len(i))\n    return len_list\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length_list = []\n    for i in list1:\n        length_list.append(len(i))\n    return max(length_list)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word=max(list1,key=len)\n    return len(word)\nprint(len_log(['shivam','shyam','niket']))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_len = []\n    for item in list1:\n        word_len.append(len(item))\n    return word_len\n    \ndef longest_word(list1):\n    '''\n    Write a python function to find the longest word.\n    '''\n    word_len = []\n    for item in list1:\n        word_len.append(len(item))\n    return max(word_len)\n    \ndef unique_words(list1):\n    '''\n    Write a python function to find the unique words in a sentence.\n    '''\n    unique = []\n    for item in list1:\n        if item not in unique:\n            unique.append(item)\n    return unique\n    \ndef frequency(list1):\n    '''\n    Write a python function to find the frequency of words in a sentence.\n    '''\n    unique = []\n    for item in list1:\n        if item not in unique:\n            unique.append(item)\n    frequency = []\n    for item in unique:\n        count = 0\n        for word in list1:\n            if word == item:\n                count += 1\n        frequency.append(count)\n    return frequency\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length=0\n    for i in list1:\n        if len(i)>length:\n            length=len(i)\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(len(i))\n    return list2\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = str(list1).replace('[','').replace(']','').replace(\"'\",\"\").split(',')\n    len_word = 0\n    for i in list1:\n        if len(i) > len_word:\n            len_word = len(i)\n    return len_word\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n            length = i\n    return (max,length)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    length = 0\n    for i in list1:\n        if len(i) > length:\n            longest_word = i\n            length = len(i)\n    print(\"The longest word is : \", longest_word)\n    print(\"Length of the longest word is : \", length)\n    \nlist1 = ['grapes','carrot','potato','peas']\nlen_log(list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # split words\n    # find length of each word\n    # print max length\n    return max([len(word) for word in list1])\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    if sub_str in str1:\n        return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    result = False\n    \n    for word in str1:\n        if sub_str in word:\n            result = True\n            break\n        else:\n            result = False\n            \n    return result\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        if sub_str in str1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for x in str1:\n        if sub_str in x:\n            print(\"Yes, it's present in the given list\")\n            return\n    print(\"No, not present in the given list\")\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1_len = len(str1)\n    sub_str_len = len(sub_str)\n    if(str1_len < sub_str_len):\n        return False\n    str1_list = list(str1)\n    sub_str_list = list(sub_str)\n    for i in range(str1_len - sub_str_len + 1):\n        if (str1_list[i: i + sub_str_len] == sub_str_list):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    flag=0\n    for i in str1:\n        if i == sub_str:\n            flag+=1\n    if flag >0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        print('Found a match!')\n    else:\n        print('No match!')\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = list(sub_str)\n    for i in range(len(str1)):\n        check_str = str1[i: i+len(sub_str)]\n        if check_str == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    for i in range(len(str1)):\n        if str1[i:i+sub_str_len] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    n = n - int(n)\n    if n == 0:\n        return True\n    elif n > 0:\n        return False\n    else:\n        return is_undulating(n)\nprint(is_undulating(0))\nprint(is_undulating(1))\nprint(is_undulating(0.1))\nprint(is_undulating(-0.1))\nprint(is_undulating(0.0))\nprint(is_undulating(-0.0))\nprint(is_undulating(0.5))\nprint(is_undulating(-0.5))\nprint(is_undulating(0.49999999999999996))\nprint(is_undulating(-0.49999999999999996))\nprint(is_undulating(0.50000000000000001))\nprint(is_undulating(-0.50000000000000001))\nprint(is_undulating(0.59999999999999998))\nprint(is_undulating(-0.59999999999999998))\nprint(is_undulating(0.60000000000000001))\nprint(is_undulating(-0.60000000000000001))\nprint(is_undulating(0.69999999999999996))\nprint(is_undulating(-0.69999999999999996))\nprint(is_undulating(0.79999999999999997))\nprint(is_undulating(-0.79999999999999997))\nprint(is_undulating(0.89999999999999996))\nprint(is_undulating(-0.89999999999999996))\nprint(is_undulating(0.90000000000000001))\nprint(is_undulating(-0.90000000000000001))\nprint(is_undulating(1.0000000000000002))\nprint(is_undulating(-1.0000000000000002))\nprint(is_undulating(1.0000000000000003))\nprint(is_undulating(-1.0000000000000003))\nprint(is_undulating(1.0000000000000004))\nprint(is_undulating(-1.0000000000000004))\nprint(is_undulating(1.0000000000000005))\nprint(is_undulating(-1.0000000000000005))\nprint(is_undulating(1.0000000000000006))\nprint(is_undulating(-1.0000000000000006))\nprint(is_undulating(1.0000000000000007))\nprint(is_undulating(-1.0000000000000007))\nprint(is_undulating(1.0000000000000008))\nprint(is_undulating(-1.0000000000000008))\nprint(is_undulating(1.0000000000000009))\nprint(is_undulating(-1.0000000000000009))\nprint(is_undulating(1.0000000000000010))\nprint(is_undulating(-1.0000000000000010))\nprint(is_undulating(1.0000000000000011))\nprint(is_undulating(-1.0000000000000011))\nprint(is_undulating(1.0000000000000012))\nprint(is_undulating(-1.0000000000000012))\nprint(is_undulating(1.0000000000000013))\nprint(is_undulating(-1.0000000000000013))\nprint(is_undulating(1.0000000000000014))\nprint(is_undulating(-1.0000000000000014))\nprint(is_undulating(1.0000000000000015))\nprint(is_undulating(-1.0000000000000015))\nprint(is_undulating(1.0000000000000016))\nprint(is_undulating(-1.0000000000000016))\nprint(is_undulating(1.0000000000000017))\nprint(is_undulating(-1.0000000000000017))\nprint(is_undulating(1.0000000000000018))\nprint(is_undulating(-1.0000000000000018))\nprint(is_undulating(1.0000000000000019))\nprint(is_undulating(-1.0000000000000019))\nprint(is_undulating(1.0000000000000020))\nprint(is_undulating(-1.0000000000000020))\nprint(is_undulating(1.0000000000000021))\nprint(is_undulating(-1.0000000000000021))\nprint(is_undulating(1.0000000000000022))\nprint(is_undulating(-1.0000000000000022))\nprint(is_undulating(1.0000000000000023))\nprint(is_undulating(-1.0000000000000023))\nprint(is_undulating(1.0000000000000024))\nprint(is_undulating(-1.0000000000000024))\nprint(is_undulating(1.0000000000000025))\nprint(is_undulating(-1.0000000000000025))\nprint(is_undulating(1.0000000000000026))\nprint(is_undulating(-1.0000000000000026))\nprint(is_undulating(1.0000000000000027))\nprint(is_undulating(-1.0000000000000027))\nprint(is_undulating(1.0000000000000028))\nprint(is_undulating(-1.0000000000000028))\nprint(is_undulating(1.0000000000000029))\nprint(is_undulating(-1.0000000000000029))\nprint(is_undulating(1.0000000000000030))\nprint(is_undulating(-1.0000000000000030))\nprint(is_undulating(1.0000000000000031))\nprint(is_undulating(-1.0000000000000031))\nprint(is_undulating(1.0000000000000032))\nprint(is_undulating(-1.0000000000000032))\nprint(is_undulating(1.0000000000000033))\nprint(is_undulating(-1.0000000000000033))\nprint(is_undulating(1.0000000000000034))\nprint(is_undulating(-1.0000000000000034))\nprint(is_undulating(1.0000000000000035))\nprint(is_undulating(-1.0000000000000035))\nprint(is_undulating(1.0000000000000036))\nprint(is_undulating(-1.0000000000000036))\nprint(is_undulating(1.0000000000000037))\nprint(is_undulating(-1.0000000000000037))\nprint(is_undulating(1.0000000000000038))\nprint(is_undulating(-1.0000000000000038))\nprint(is_undulating(1.0000000000000039))\nprint(is_undulating(-1.0000000000000039))\nprint(is_undulating(1.0000000000000040))\nprint(is_undulating(-1.0000000000000040))\nprint(is_undulating(1.0000000000000041))\nprint(is_undulating(-1.0000000000000041))\nprint(is_undulating(1.0000000000000042))\nprint(is_undulating(-1.0000000000000042))\nprint(is_undulating(1.0000000000000043))\nprint(is_undulating(-1.0000000000000043))\nprint(is_undulating(1.0000000000000044))\nprint(is_undulating(-1.0000000000000044))\nprint(is_undulating(1.0000000000000045))\nprint(is_undulating(-1.0000000000000045))\nprint(is_undulating(1.0000000000000046))\nprint(is_undulating(-1.0000000000000046))\nprint(is_undulating(1.0000000000000047))\nprint(is_undulating(-1.0000000000000047))\nprint(is_undulating(1.0000000000000048))\nprint(is_undulating(-1.0000000000000048))\nprint(is_undulating(1.0000000000000049))\nprint(is_undulating(-1.0000000000000049))\nprint(is_undulating(1.0000000000000050))\nprint(is_undulating(-1.0000000000000050))\nprint(is_undulating(1.0000000000000051))\nprint(is_undulating(-1.0000000000000051))\nprint(is_undulating(1.0000000000000052))\nprint(is_undulating(-1.0000000000000052))\nprint(is_undulating(1.0000000000000053))\nprint(is_undulating(-1.0000000000000053))\nprint(is_undulating(1.0000000000000054))\nprint(is_undulating(-1.0000000000000054))\nprint(is_undulating(1.0000000000000055))\nprint(is_undulating(-1.0000000000000055))\nprint(is_undulating(1.0000000000000056))\nprint(is_undulating(-1.0000000000000056))\nprint(is_undulating(1.0000000000000057))\nprint(is_undulating(-1.0000000000000057))\nprint(is_undulating(1.0000000000000058))\nprint(is_undulating(-1.0000000000000058))\nprint(is_undulating"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # your code here\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def check(s, n):\n        if s[0] == '1' and s[n - 1] == '1':\n            return True\n        elif s[0] == '0' and s[n - 1] == '0':\n            return True\n        else:\n            return False\n        return s\n    if n < 2:\n        return False\n    else:\n        s = str(n)\n        if check(s, len(s)):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    if n > 0:\n        return n % 2 == 1\n    else:\n        return n % 2 == 0\n    \n    \ndef is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    return n % 2 == 1 or n % 2 == 0\n    \ndef is_undulating(n):\n    if n > 0:\n        return n % 2 == 1\n    else:\n        return n % 2 == 0\n        \ndef is_undulating(n):\n    return n % 2 == 1 or n % 2 == 0\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_even(n): \n        '''\n        Write a function to check whether the given number is even or not.\n        '''\n        return n % 2 == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if (n%i == 0):\n            sum += i\n    return sum == 2*n\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = list(str(n))\n    for i in range(1, len(s)):\n        if abs(int(s[i]) - int(s[i-1]))!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return len(str(n)) % 2 == 1"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Write your code here\n    n = str(n)\n    m = len(n)\n    for i in range(m):\n        n = int(n)\n        d = n%10\n        n = n/10\n        n = str(n)\n        if d in [0,2,4,6,8]:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    n_len = len(n)\n    for i in range(n_len):\n        if (i == 0 or i == n_len-1) and int(n[i])%2 == 1:\n            return False\n        if int(n[i])%2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b>0:\n        return power(a,b-1)*a\n    if b<0:\n        return power(a,b+1)/a\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    try:\n        return a ** b\n    except:\n        return \"Sorry, you cannot calculate negative numbers\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # using math library\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b > 1:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b == 0):\n        return 1\n    elif(b%2 == 1):\n        return (a**b)*power(a,b-1)\n    else:\n        return (a**b)//2*power(a,b-2)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b > 1:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b>1:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list, key = itemgetter(1))[1]\n    for item in test_list:\n        if item[1] == min_value:\n            return item[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index = test_list[0][1]\n    for i in test_list:\n        if i[1] < index:\n            index = i[1]\n    return index\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if not test_list:\n        return None\n    else:\n        min_index = 0\n        for index in range(1, len(test_list)):\n            if test_list[index][1] < test_list[min_index][1]:\n                min_index = index\n        return test_list[min_index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = min(test_list, key=itemgetter(1))\n    return test_list.index(minimum)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list by the second element\n    # return the first element\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) > 1:\n        return sorted(test_list, key = itemgetter(1))[0][0]\n    else:\n        return test_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return itemgetter(0)(sorted(test_list, key = itemgetter(1))[0])\n"
    }
]