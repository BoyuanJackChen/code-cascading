[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return (list(set(test_tup1) & set(test_tup2)))\n",
        "num_ids": 25
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_elements = []\n    # for i in test_tup1:\n    #     if i in test_tup2:\n    #         similar_elements.append(i)\n    similar_elements = list(set(test_tup1) & set(test_tup2))\n    return similar_elements\n",
        "num_ids": 81
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Write your code here\n    s1 = set(test_tup1)\n    s2 = set(test_tup2)\n    #print(s1, s2)\n    return s1.intersection(s2)\n",
        "num_ids": 58
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    list3 = []\n    if len(list1) < len(list2):\n        min_list = list1\n        max_list = list2\n    else:\n        min_list = list2\n        max_list = list1\n    for i in range(len(min_list)):\n        for j in range(len(max_list)):\n            if min_list[i] == max_list[j]:\n                list3.append(min_list[i])\n    print(list3)\n",
        "num_ids": 148
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # TODO: complete this function\n    return tuple(set(test_tup1) & set(test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert to set and find common elements\n    return [x for x in test_tup1 if x in test_tup2]\n    \n    \ntest_tup1 = (5, 3, 8, 9, 1, 4, 2)\ntest_tup2 = (3, 4, 6, 7, 9, 2)\nprint(similar_elements(test_tup1, test_tup2))",
        "num_ids": 99
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                shared_elements.append(i)\n    print(shared_elements)\n    return shared_elements\n",
        "num_ids": 66
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    # check if items in list1 are present in list2\n    for i in test_tup1:\n        if i in test_tup2:\n            shared.append(i)\n    return shared\n",
        "num_ids": 55
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1).intersection(set(test_tup2)))\n",
        "num_ids": 26
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for x in range(2,int(math.sqrt(n))+1):\n        if n % x == 0:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return True\n    elif n==2:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return True\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n==1):\n        return False\n    elif (n==2):\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if (n%i==0):\n                return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\ndef primes(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    lst = []\n    for i in range(2,n+1):\n        if not is_not_prime(i):\n            lst.append(i)\n    return lst\ndef gcd(x,y):\n    '''\n    Write a python function to calculate the gcd.\n    '''\n    if y == 0:\n        return x\n    else:\n        return gcd(y,x%y)\ndef lcm(x,y):\n    '''\n    Write a python function to calculate the lcm.\n    '''\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while True:\n        if greater % x == 0 and greater % y == 0:\n            lcm = greater\n            break\n        greater += 1\n    return lcm\ndef is_cyclic(n):\n    '''\n    Write a python function to identify cyclic numbers.\n    '''\n    def f(x,y):\n        return (x*x + y) % n\n    h = int(math.sqrt(n))\n    if h**2 == n:\n        return False\n    l = []\n    l.append(h)\n    l.append(1)\n    x = f(h,l[1])\n    if x == 1:\n        return False\n    y = h\n    while y!= 1:\n        if x == 1:\n            return False\n        y = f(x,y)\n        x = f(x,l[1])\n        l.append(y)\n    return True\ndef get_phi(n):\n    '''\n    Write a python function to calculate the phi.\n    '''\n    phi = n\n    for i in range(2,n):\n        if gcd(i,n) == 1:\n            phi -= phi/i\n    return int(phi)\ndef encrypt(m,e,n):\n    '''\n    Write a python function to encrypt message m with public key (e,n).\n    '''\n    m = int(m,base = 16)\n    c = pow(m,e,n)\n    return c\ndef decrypt(c,d,n):\n    '''\n    Write a python function to decrypt cipher c with private key (d,n).\n    '''\n    c = int(c,base = 16)\n    m = pow(c,d,n)\n    return m\ndef generate_key(p,q):\n    '''\n    Write a python function to generate RSA public and private keys.\n    '''\n    n = p * q\n    phi = (p - 1) * (q - 1)\n    e = 2\n    d = 0\n    while True:\n        if math.gcd(e,phi) == 1:\n            break\n        else:\n            e += 1\n    d = int(phi/e)\n    return ((e,n),(d,n))\ndef encrypt_rsa(m,pub):\n    '''\n    Write a python function to encrypt a message with the given public key.\n    '''\n    c = pow(m,pub[0],pub[1])\n    return c\ndef decrypt_rsa(c,priv):\n    '''\n    Write a python function to decrypt a message with the given private key.\n    '''\n    m = pow(c,priv[0],priv[1])\n    return m\ndef primes_in_range(a,b):\n    '''\n    Write a python function to identify the prime numbers in the given range.\n    '''\n    lst = []\n    for i in range(a,b+1):\n        if is_not_prime(i):\n            pass\n        else:\n            lst.append(i)\n    return lst\ndef generate_prime(a,b):\n    '''\n    Write a python function to generate the prime numbers in the given range.\n    '''\n    lst = []\n    for i in range(a,b+1):\n        if is_not_prime(i):\n            pass\n        else:\n            lst.append(i)\n    return lst\ndef greatest_common_divisor(a,b):\n    '''\n    Write a python function to compute the greatest common divisor.\n    '''\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b,a % b)\ndef least_common_multiple(a,b):\n    '''\n    Write a python function to compute the least common multiple.\n    '''\n    return (a*b)/greatest_common_divisor(a,b)\ndef prime_factorize(n):\n    '''\n    Write a python function to factorize a number.\n    '''\n    lst = []\n    x = 2\n    while x <= int(math.sqrt(n)):\n        while n % x == 0:\n            n /= x\n            lst.append(x)\n        x += 1\n    if n > 1:\n        lst.append(n)\n    return lst\ndef prime_factors(n):\n    '''\n    Write a python function to list the prime factors of a number.\n    '''\n    lst = []\n    for i in range(2,n+1):\n        if is_not_prime(i):\n            pass\n        else:\n            if n % i == 0:\n                lst.append(i)\n    return lst\ndef count_prime_factors(n):\n    '''\n    Write a python function to count the number of prime factors of a number.\n    '''\n    prime_factors = prime_factors(n)\n    return len(prime_factors)\ndef dfs(graph, start, visited=None):\n    '''\n    Write a python function to perform a depth first search.\n    '''\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    print(start)\n    for next in graph[start] - visited:\n        dfs(graph, next, visited)\n    return visited\ndef bfs(graph, start):\n    '''\n    Write a python function to perform a breadth first search.\n    '''\n    visited = set()\n    queue = deque([start])\n    visited.add(start)\n    while queue:\n        vertex = queue.popleft()\n        print(vertex)\n        for next in graph[vertex] - visited:\n            visited.add(next)\n            queue.append(next)\n    return visited\ndef nth_fibonacci(n):\n    '''\n    Write a python function to calculate the nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return nth_fibonacci(n-1) + nth_fibonacci(n-2)\ndef generate_power_set(lst):\n    '''\n    Write a python function to generate all the power sets of a list.\n    '''\n    power_set = []\n    for i in range(2**len(lst)):\n        bin_str = bin(i)[2:]\n        power_set.append([lst[j] for j in range(len(lst)) if bin_str[j] == '1'])\n    return power_set\ndef generate_power_set_with_duplicates(lst):\n    '''\n    Write a python function to generate all the power sets of a list with duplicates.\n    '''\n    power_set = []\n    for i in range(2**len(lst)):\n        bin_str = bin(i)[2:]\n        power_set.append([lst[j] for j in range(len(lst)) if bin_str[j] == '1'])\n    return power_set\ndef generate_power_set_without_duplicates(lst):\n    '''\n    Write a python function to generate all the power sets of a list without duplicates.\n    '''\n    power_set = []\n    for i in range(2**len(lst)):\n        bin_str = bin(i)[",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    sqr = int(math.sqrt(n))\n    for i in range(2, sqr + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n",
        "num_ids": 77
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,math.ceil(math.sqrt(n))):\n        if n % i == 0:\n            return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i ==0:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i == 0:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    \n    for i in range(n,len(nums)):\n        if nums[i]>heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\n",
        "num_ids": 98
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #create an empty list\n    heap=[]\n    #using max heap, we can just insert the negative of the numbers\n    for i in nums:\n        hq.heappush(heap,-i)\n    #use list comprehension to get n largest elements from a list\n    result= [-x for x in heap[0:n]]\n    return result\n    \n",
        "num_ids": 88
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        print('n is greater than the length of the list')\n        return\n    # step 1: construct a min heap\n    h = []\n    for num in nums:\n        # hq.heappush(h, num)\n        hq.heappush(h,-num)\n    # step 2: pop n largest numbers from the min heap\n    largest_numbers = []\n    for _ in range(n):\n        largest_numbers.append(-hq.heappop(h))\n    # step 3: return largest numbers\n    return largest_numbers\n",
        "num_ids": 144
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in nums:\n        hq.heappush(heap,i)\n        if len(heap)>n:\n            hq.heappop(heap)\n    while len(heap)>0:\n        print(hq.heappop(heap))\n",
        "num_ids": 78
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    k=n\n    rst=[]\n    for i in range(n):\n        rst.append(hq.heappop(nums))\n    return rst[::-1]\n",
        "num_ids": 61
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    return heapq.nlargest(n, heap)\n",
        "num_ids": 43
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums=list(set(nums))\n    nums.sort(reverse=True)\n    if len(nums)<n:\n        return None\n    else:\n        return nums[:n]\n",
        "num_ids": 53
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap,num)\n    while len(heap) > n:\n        hq.heappop(heap)\n    return sorted(heap,reverse=True)\n",
        "num_ids": 65
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        print(hq.heappop(nums),end=\" \")\n",
        "num_ids": 41
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 0:\n        return []\n    if n == 1:\n        return [max(nums)]\n    hq.heapify(nums)\n    l = []\n    for i in range(n):\n        l.append(hq.heappop(nums))\n    return l[::-1]\n",
        "num_ids": 80
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x > 0): \n        while (x!= 0): \n            if (x % 2!= 0): \n                return 0\n            x = x // 2\n        return 1\n    else: \n        return 0\n",
        "num_ids": 57
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    if x == 1: \n        return True\n    while x!= 0: \n        if (x & 1) == 0: \n            return False\n        else: \n            return True\n        x = x >> 1\n    return False",
        "num_ids": 70
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 0): \n        return False\n    while (x % 2 == 0): \n        x = x / 2\n    if (x == 1): \n        return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    n = 0\n    while (x!= 0): \n        x = x & (x - 1) \n        n += 1\n    return n == 1\n  \ndef isPowerOfTwo (n): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (n and not (n & (n - 1))): \n        n = n & (n - 1) \n    return n == 0\n",
        "num_ids": 37
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 0:\n        if x % 2 == 0:\n            return False\n        x = x // 2\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    i = 1\n    while (i <= x): \n        if ((x & i) == i): \n            return True\n        i = i << 1\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    for i in range(32):\n        if (x & 1!= 0):\n            x >>= 1\n        else:\n            break\n    if x == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1) == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    return (x & (x - 1)) == 0\n",
        "num_ids": 17
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.split()\n    new_text = []\n    for i in text:\n        if len(i) >= 4:\n            new_text.append(i)\n    return''.join(new_text)\n",
        "num_ids": 54
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\b\\w{4,}\\b', text)\n    return result\n    \ndef find_non_repeating_char(text):\n    '''\n    Write a function to find the first character that is repeated a single time in a given string\n    '''\n    counter = {}\n    result = re.findall(r'\\b[a-zA-Z]{1}\\b', text)\n    for i in result:\n        if i in counter.keys():\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    for i in counter.keys():\n        if counter[i] == 1:\n            return i\n    \ndef find_sub_string_word(text):\n    '''\n    Write a function to find the first repeated word in a given string\n    '''\n    result = re.findall(r'\\b\\w+\\b', text)\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    result = pattern.findall(text)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #return re.findall(r'\\w{4,}', text)\n    return re.findall(r'\\w{4,}', text)\n",
        "num_ids": 41
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # pattern = re.compile(r'\\b\\w{4,}\\b')\n    # pattern = re.compile(r'\\b\\w{4,}\\b')\n    # pattern = re.compile(r'\\b\\w{4,}\\b', re.I)\n    # pattern = re.compile(r'\\b\\w{4,}\\b', re.I|re.A)\n    pattern = re.compile(r'\\b\\w{4,}\\b', re.I|re.A|re.S)\n    result = pattern.findall(text)\n    return result\n    \n",
        "num_ids": 152
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text)\n",
        "num_ids": 24
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pat = re.compile(r'\\b\\S{4,}\\b')\n    return pat.findall(text)\n",
        "num_ids": 33
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}', text)\n",
        "num_ids": 21
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.split(' ')\n    result = []\n    for word in text:\n        if len(word) >= 4:\n            result.append(word)\n    return''.join(result)\n",
        "num_ids": 50
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}', text)\n",
        "num_ids": 21
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        nums[i] = nums[i]**2\n    return nums\n",
        "num_ids": 30
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Method 1\n    # result = []\n    # for i in nums:\n    #     result.append(i**2)\n    # return result\n    # Method 2\n    return [i**2 for i in nums]\n    \n    # Method 3\n    # return map(lambda i: i**2, nums)\n    \n    # Method 4\n    # return [i**2 for i in nums]\n",
        "num_ids": 101
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums\n",
        "num_ids": 40
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num * num)\n",
        "num_ids": 33
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        yield i*i\n",
        "num_ids": 17
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        yield num ** 2\n",
        "num_ids": 17
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    no_rotations = 0\n    for i in range(len(str) - 1):\n        if (str[i]!= str[i + 1]):\n            no_rotations += 1\n",
        "num_ids": 49
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    n1 = len(set(str))\n    temp_str = str + str\n    n2 = len(set(temp_str))\n    rotations = n2 - n1\n    print(\"No. of rotations = %d \" %(rotations))\n    print(\"String after rotations is:\")\n    print(str[n:] + str[:n]) \n",
        "num_ids": 98
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    result = []\n    length = len(str)\n    i = 0\n    while(i < length): \n        if str[i] == str[(i + 1) % length]:\n            result.append(i)\n        i += 1\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    '''\n    Test Case 1\n    Input: \"AACDE\"\n    Output: 0\n    Explanation: \"AACDE\" is already a palindrome.\n    \n    Test Case 2\n    Input: \"ABCDE\"\n    Output: 1\n    Explanation: If we rotate the string to the right by 1, ABCDE becomes ABDEC.\n    \n    Test Case 3\n    Input: \"ABCDA\"\n    Output: 2\n    Explanation: Rotation of the string to the right by 1 will give us ABDCA.\n    \n    Test Case 4\n    Input: \"ABCDDA\"\n    Output: 2\n    Explanation: Rotation of the string to the right by 1 will give us ABDCA.\n    \n    Test Case 5\n    Input: \"ABCDD\"\n    Output: 3\n    Explanation: Rotation of the string to the right by 1 will give us ABDAC.\n    \n    Test Case 6\n    Input: \"AACDDA\"\n    Output: 3\n    Explanation: Rotation of the string to the right by 1 will give us ABDAC.\n    \n    Test Case 7\n    Input: \"AACDD\"\n    Output: 4\n    Explanation: Rotation of the string to the right by 1 will give us ABDACD.\n    \n    Test Case 8\n    Input: \"AACDDA\"\n    Output: 4\n    Explanation: Rotation of the string to the right by 1 will give us ABDACD.\n    '''\n    n = len(str)\n    if n <= 1:\n        return 0\n    str = list(str)\n    str.sort()\n    freq = [0] * 26\n    for i in range(n):\n        freq[ord(str[i]) - ord('A')] += 1\n    flag = 0\n    for i in freq:\n        if i % 2!= 0:\n            flag = 1\n            break\n    if flag == 1:\n        return -1\n    else:\n        return max(0, n - 2)\n    \n    \ndef check_Palindrome(str): \n    '''\n    Write a python function to check whether a string is palindrome or not. Return true if it is palindrome else return false.\n    Hint: Use slicing technique to get substrings.\n    \n    Test Case 1\n    Input: \"AACDDA\"\n    Output: True\n    Explanation: The string can be split into two palindromic substrings \"AACD\" and \"DA\".\n    \n    Test Case 2\n    Input: \"ABCDE\"\n    Output: False\n    Explanation: No possible palindromic substring.\n    \n    Test Case 3\n    Input: \"ABDAC\"\n    Output: True\n    Explanation: The string can be split into two palindromic substrings \"ABD\" and \"AC\".\n    \n    Test Case 4\n    Input: \"ABCDD\"\n    Output: False\n    Explanation: No possible palindromic substring.\n    \n    Test Case 5\n    Input: \"ABCDDA\"\n    Output: True\n    Explanation: The string can be split into two palindromic substrings \"ABCD\" and \"DA\".\n    \n    Test Case 6\n    Input: \"AACDDA\"\n    Output: True\n    Explanation: The string can be split into two palindromic substrings \"AACD\" and \"DA\".\n    \n    Test Case 7\n    Input: \"AACDD\"\n    Output: False\n    Explanation: No possible palindromic substring.\n    \n    Test Case 8\n    Input: \"ABCDAC\"\n    Output: True\n    Explanation: The string can be split into two palindromic substrings \"ABCD\" and \"AC\".\n    '''\n    # code here\n    str_list = list(str)\n    str_list.sort()\n    str_list = ''.join(str_list)\n    if str_list == str_list[::-1]:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 68
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    while(True):\n        if str == str[::-1]:\n            return rotations\n        else:\n            str = str[1:] + str[0]\n            rotations += 1\n            \nif __name__ == '__main__':\n    print(find_Rotations('ABC'))\n    print(find_Rotations('ABCBA'))\n    print(find_Rotations('ABBC'))\n    print(find_Rotations('ABCABC'))\n    print(find_Rotations('AGBCBA')",
        "num_ids": 129
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # return 0 if length of string is 0 or 1\n    if len(str)<=1:\n        return 0\n    \n    # counter to store the number of rotations\n    count = 0\n    \n    # boolean to check if all characters are same\n    check = 0\n    \n    # count the number of rotations required\n    for i in range(len(str)-1):\n        if str[i]!=str[i+1]:\n            count+=1\n            check = 1\n    \n    # if all characters are same, no rotations required\n    if check==0:\n        return 0\n    \n    # return count\n    return count\n    \n    \ndef find_Rotations_hash(str):\n    '''\n    Write a python program to find the minimum number of rotations (greater than 0) required to get the same string.\n    Use dictionary to store the counts of each character.\n    '''\n    \n    # return 0 if length of string is 0 or 1\n    if len(str)<=1:\n        return 0\n    \n    # get the count of each character\n    count = {}\n    for i in str:\n        if i in count:\n            count[i]+=1\n        else:\n            count[i]=1\n    \n    # count the number of rotations required\n    count_rotations = 0\n    \n    # check if all characters are same\n    check = 0\n    \n    # loop through the count of each character\n    for i in count:\n        \n        # if all characters are same, no rotations required\n        if count[i]>1:\n            check = 1\n        \n    if check==0:\n        return 0\n    \n    # return the minimum number of rotations\n    return len(str) - 1\n    \n    \ndef find_Rotations_using_XOR(str):\n    '''\n    Write a python program to find the minimum number of rotations (greater than 0) required to get the same string.\n    Use XOR to get the same string.\n    '''\n    \n    # return 0 if length of string is 0 or 1\n    if len(str)<=1:\n        return 0\n    \n    # initialize result\n    res = 0\n    \n    # loop through the string\n    for i in range(len(str)-1):\n        \n        # initialize a temp variable to store the current string\n        temp = str[i]\n        \n        # XOR the first character with the next character\n        for j in range(i+1, len(str)):\n            \n            # update the temp variable to XOR the current character with the next character\n            temp = temp ^ str[j]\n        \n        # update the result if temp variable has a different value\n        res = max(res, j-i)\n    \n    # return result\n    return res\n    \n    \ndef find_Rotations_using_XOR_simplified(str):\n    '''\n    Write a python program to find the minimum number of rotations (greater than 0) required to get the same string.\n    Use XOR to get the same string.\n    '''\n    \n    # return 0 if length of string is 0 or 1\n    if len(str)<=1:\n        return 0\n    \n    # initialize result\n    res = 0\n    \n    # loop through the string\n    for i in range(len(str)-1):\n        \n        # XOR the first character with the next character\n        res = max(res, find_Rotations_using_XOR(str[i+1:] + str[:i+1]))\n    \n    # return result\n    return res\n    \n    \ndef find_Rotations_using_XOR_simplified_2(str):\n    '''\n    Write a python program to find the minimum number of rotations (greater than 0) required to get the same string.\n    Use XOR to get the same string.\n    '''\n    \n    # return 0 if length of string is 0 or 1\n    if len(str)<=1:\n        return 0\n    \n    # initialize result\n    res = 0\n    \n    # loop through the string\n    for i in range(len(str)-1):\n        \n        # XOR the first character with the next character\n        res = max(res, len(str)-1 - find_Rotations_using_XOR(str[i+1:] + str[:i+1]))\n    \n    # return result\n    return res\n    \n    \ndef find_Rotations_using_XOR_simplified_3(str):\n    '''\n    Write a python program to find the minimum number of rotations (greater than 0) required to get the same string.\n    Use XOR to get the same string.\n    '''\n    \n    # return 0 if length of string is 0 or 1\n    if len(str)<=1:\n        return 0\n    \n    # initialize result\n    res = 0\n    \n    # loop through the string\n    for i in range(len(str)-1):\n        \n        # XOR the first character with the next character\n        res = max(res, len(str)-1 - find_Rotations_using_XOR(str[i:] + str[:i]))\n    \n    # return result\n    return res\n    \n    \ndef find_Rotations_using_XOR_simplified_4(str):\n    '''\n    Write a python program to find the minimum number of rotations (greater than 0) required to get the same string.\n    Use XOR to get the same string.\n    '''\n    \n    # return 0 if length of string is 0 or 1\n    if len(str)<=1:\n        return 0\n    \n    # initialize result\n    res = 0\n    \n    # loop through the string\n    for i in range(len(str)-1):\n        \n        # XOR the first character with the next character\n        res = max(res, len(str)-1 - find_Rotations_using_XOR(str[i+1:] + str[:i+1]))\n    \n    # return result\n    return res\n    \n    \ndef find_Rotations_using_XOR_simplified_5(str):\n    '''\n    Write a python program to find the minimum number of rotations (greater than 0) required to get the same string.\n    Use XOR to get the same string.\n    '''\n    \n    # return 0 if length of string is 0 or 1\n    if len(str)<=1:\n        return 0\n    \n    # initialize result\n    res = 0\n    \n    # loop through the string\n    for i in range(len(str)-1):\n        \n        # XOR the first character with the next character\n        res = max(res, len(str)-1 - find_Rotations_using_XOR(str[i+1:] + str[:i+1]))\n    \n    # return result\n    return res\n    \n    \ndef find_Rotations_using_XOR_simplified_6(str):\n    '''\n    Write a python program to find the minimum number of rotations (greater than 0) required to get the same string.\n    Use XOR to get the same string.\n    '''\n    \n    # return 0 if length of string is 0 or 1\n    if len(str)<=1:\n        return 0\n    \n    # initialize result\n    res = 0\n    \n    # loop through the string\n    for i in range(len(str)-1):\n        \n        # XOR the first character with the next character\n        res = max(res, len(str)-1 - find_Rotations_using_XOR(str[i:] + str[:i]))\n    \n    # return result\n    return res\n    \n    \ndef find_Rotations_using_XOR_simplified_7(str):\n    '''\n    Write a python program to find the minimum number of rotations (greater than 0) required to get the same string.\n    Use XOR to get the same string.\n    '''\n    \n    # return 0 if length of string is 0 or 1\n    if len(str)<=1:\n        return 0\n    \n    # initialize result\n    res = 0\n    \n    # loop through the string\n    for i in range(len(str)-1):\n        \n        # XOR the first character with the next character\n        res = max(res, len(str)-1 - find_Rotations_using_XOR",
        "num_ids": 102
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    new_str = str[len(str)::-1]\n    return str + new_str if new_str!= str else 0\n    \ndef find_Rotations_index(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) < 2:\n        return None\n    if str == str[::-1]:\n        return 0\n    for i in range(len(str)-1):\n        if str[i+1:]+str[:i+1] == str:\n            return i+1\n    return None\n",
        "num_ids": 74
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str1 = str\n    result = \"\"\n    \n    for i in range(len(str)):\n        result = str[i:] + result\n        if result == str1:\n            return i\n    \n    return \"not possible\"\n",
        "num_ids": 58
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1: \n        return 0\n    for i in range(len(str)-1,0,-1):\n        if str[i] == str[0]: \n            return i \n    return 0\n",
        "num_ids": 56
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    counter = 0\n    while(True):\n        if str == str[::-1]:\n            return counter\n        else:\n            str = str[1:] + str[0]\n            counter += 1\n",
        "num_ids": 58
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #lst = list(s)\n    #lst.remove(ch)\n    #res = ''.join(lst)\n    #return res\n    return ''.join(s.split(ch,1)[1].split(ch,1)[0])\n",
        "num_ids": 64
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, \"\")\n    print(s)\n    s = s.replace(ch, \"\")\n    print(s)\n    return s\n",
        "num_ids": 42
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_s = s.replace(ch,\"\")\n    new_s = new_s.replace(ch,\"\")\n    return new_s\n",
        "num_ids": 36
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1) \n",
        "num_ids": 16
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip()\n    if ch in s:\n        return s[:s.find(ch)]+s[s.find(ch)+1:s.rfind(ch)]+s[s.rfind(ch)+1:]\n    else:\n        return s\ndef count_substring(s,sub_s):\n    '''\n    Write a python function to count the number of occurrences of a substring in the given string.\n    '''\n    return s.count(sub_s)\n",
        "num_ids": 13
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    occurence = s.find(ch)\n    print(occurence)\n    new_s = s[0:occurence]+s[occurence+1:]\n    print(new_s)\n    \nremove_Occ('durga', 'r')\n",
        "num_ids": 67
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'')[:-1]\n",
        "num_ids": 23
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    for i in s:\n        if i == ch:\n            s = s.replace(i, '', 1)\n            break\n    return s\nprint(remove_Occ('hello iamsomuch', 'i'))\n",
        "num_ids": 54
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\", -1)\n",
        "num_ids": 24
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return 'No occurence'\n    else:\n        return s[0:s.find(ch)] + s[s.find(ch)+1:len(s)-1]\n",
        "num_ids": 53
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=lambda x: sum(x))\n",
        "num_ids": 18
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if not M or len(M) == 0 or len(M[0]) == 0:\n        return\n    M = [sum(row) for row in M]\n    M = zip(M, range(len(M)))\n    M.sort()\n    return [[row[1] // len(M) for row in M]]\n",
        "num_ids": 79
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = M.tolist()\n    M.sort(key = lambda x : sum(x))\n    return np.array(M)\n    \n    \nif __name__ == \"__main__\":\n    M = np.random.randint(1, 5, (3,3))\n    print('The original matrix is:', M)\n    print('The sorted matrix is:', sort_matrix(M))\n    ",
        "num_ids": 101
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # M[i][j] = i+1,j+1 (i+1,j+1 is 0-indexed)\n    # sorted according to M[i][j] = sum(M[i])\n",
        "num_ids": 52
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # return sorted(M, key=sum)\n    return sorted(M, key=sum_row)\n",
        "num_ids": 27
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    import math\n    M.sort(key=lambda x: sum(x))\n    return M\n",
        "num_ids": 25
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    m = len(M[0])\n    sum_row = [0] * n\n    for i in range(n):\n        for j in range(m):\n            sum_row[i] += M[i][j]\n    return [M[i] for i in sorted(range(n), key=lambda k: sum_row[k])]\n",
        "num_ids": 93
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-1-i):\n            if sum(M[j]) < sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M\n",
        "num_ids": 78
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    res = []\n    for i in M:\n        res.append(sum(i))\n    res = list(set(res))\n    res.sort()\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(0, n):\n        for j in range(0, n-i-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n",
        "num_ids": 78
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print (l*b*h)\n    return (l*b*h)\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n    \nl = float(input(\"Enter the length : \"))\nb = float(input(\"Enter the breadth : \"))\nh = float(input(\"Enter the height : \"))\n",
        "num_ids": 51
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n",
        "num_ids": 10
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(\"The volume of a triangular prism of length \",l,\", base \",b,\" and height \",h,\" is:\", ((l*b*h)/3))\n    return ((l*b*h)/3)\n",
        "num_ids": 51
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print('\\nVolume of a triangular prism is: ', l * b * h / 3)\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # l = 5\n    # b = 6\n    # h = 7\n    return l*b*h\n",
        "num_ids": 28
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Use the formula : Volume = (base x height x slant height) / 3\n    # Write your code here\n    volume = (l * b * h) / 3\n    return volume\n    \n",
        "num_ids": 48
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*l*b*h\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (1/3)*(l*b*h)\n    return Volume\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if (l == 0 or b == 0 or h == 0) :\n        return 0\n    else :\n        return (1/2) * l * b * h\n        \ndef find_Perimeter(side1,side2,side3) : \n    '''\n    Write a python function to find the perimeter of a triangle.\n    '''\n    if (side1 == 0 or side2 == 0 or side3 == 0) :\n        return 0\n    else :\n        return (side1+side2+side3)\n        \ndef find_Area(base,height) : \n    '''\n    Write a python function to find the area of a triangle.\n    '''\n    if (base == 0 or height == 0) :\n        return 0\n    else :\n        return base * height / 2\n        \ndef find_Circumference(side) : \n    '''\n    Write a python function to find the circumference of a triangle.\n    '''\n    if (side == 0) :\n        return 0\n    else :\n        return side * 3\n        \ndef find_Semi_Perimeter(side) : \n    '''\n    Write a python function to find the semi-perimeter of a triangle.\n    '''\n    if (side == 0) :\n        return 0\n    else :\n        return side * 2\n        \ndef find_Diagonal(side1,side2) : \n    '''\n    Write a python function to find the diagonal of a triangle.\n    '''\n    if (side1 == 0 or side2 == 0) :\n        return 0\n    else :\n        return math.sqrt(side1**2 + side2**2)\n    \ndef find_Hypotenuse(side1,side2) : \n    '''\n    Write a python function to find the hypotenuse of a triangle.\n    '''\n    if (side1 == 0 or side2 == 0) :\n        return 0\n    else :\n        return math.sqrt(side1**2 + side2**2)\n",
        "num_ids": 43
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not text:\n        return True\n    #convert all to lowercase and then split to the words\n    #return \"\".join(word.lower() for word in text.split())\n    return re.sub('[^a-z]+', '', text).replace(\"_\", \"\").replace(\" \", \"\").lower()\n",
        "num_ids": 77
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    print(re.findall(r'_+[a-z]', text))\n    print(re.findall(r'[_a-z]+', text))\n    print(re.findall(r'[a-z]_+', text))\n    print(re.findall(r'[a-z]+_+[a-z]+', text))\n    print(re.findall(r'[_a-z]+_+[a-z]+_+[a-z]+_+[a-z]+_+[a-z]+_+[a-z]+', text))\n",
        "num_ids": 143
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(re.findall('_+', text))>0:\n        return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'_[a-z]*_', text)\n",
        "num_ids": 22
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #use regular expression to match any of the characters in the list:\n    #lowercase letters\n    #underscore\n    #letter\n    #sequence\n    #space\n    if re.search(r'[a-z]+_[a-z]+', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 76
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.match(r\"^\\w+_+\\w*$\", text):\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'_[a-z]', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lower = []\n    for i in text:\n        if ord(i) == 95:\n            lower.append(i)\n        elif 97 <= ord(i) <= 122:\n            lower.append(i)\n        else:\n            continue\n    lower = ''.join(lower)\n    return '_' in lower\n",
        "num_ids": 78
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #\n    #code for regex\n    result = re.search('[a-z]+_[a-z]', text)\n    if result:\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    flag = True\n    if text is None or len(text)==0:\n        flag = False\n    else:\n        for character in text:\n            if character.isupper():\n                flag = False\n                break\n    return flag\n",
        "num_ids": 57
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str1 = list(string) \n    list_str2 = list(input(\"Enter String 2: \"))\n    for x in list_str1:\n        for y in list_str2:\n            if x == y:\n                list_str1.remove(x)\n                break\n    str1 = ''.join(list_str1)\n    print(str1)\n",
        "num_ids": 93
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result_string = list(string)\n    for char in string:\n        if char in result_string:\n            result_string.remove(char)\n    return result_string\n",
        "num_ids": 44
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return ''\n    list1 = [False]*NO_OF_CHARS\n    list2 = [False]*NO_OF_CHARS\n    for i in string:\n        list1[ord(i)] = True\n    for i in string:\n        list2[ord(i)] = True\n    for i in range(NO_OF_CHARS):\n        if list1[i] == True and list2[i] == False:\n            return string[:i]\n    return string\n",
        "num_ids": 127
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    for char in string_list:\n        if char in string_list:\n            string_list.remove(char)\n    return string_list\n",
        "num_ids": 46
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = string.replace(\" \",\"\")\n    string2 = string.replace(\" \",\"\")\n    for i in range(len(string1)):\n        if string1[i] in string2:\n            string1 = string1.replace(string1[i],'')\n            string2 = string2.replace(string2[i],'')\n    return string1,string2\n",
        "num_ids": 93
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #list = []\n    #for i in range(len(string)):\n    #    if string[i] not in list:\n    #        list.append(string[i])\n    list_string = list(string)\n    for i in range(len(list_string)):\n        if list_string[i] in string:\n            list_string[i] = '_'\n    list_string = ''.join(list_string)\n    return list_string\nprint(str_to_list(\"xyzabcd\"))\n",
        "num_ids": 128
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # for i in range(len(string)):\n    #     if string[i] in string[i+1:]:\n    #         string = string[:i] + string[i+1:]\n    # return string\n    \n    result = ''\n    for char in string:\n        if char not in result:\n            result+=char\n    return result\n",
        "num_ids": 86
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [x for x in string if x not in string]\ndef bwt(s): \n    '''\n    Write a function to sort a string lexicographically. \n    '''\n    # return ''.join(sorted(s))\n    # return ''.join(sorted(s,reverse=True))\n    return ''.join(sorted(s,reverse=True))\ndef suffix_array_to_suffix_tree(sa, lcp, start, end):\n    '''\n    Write a function to construct suffix tree from suffix array.\n    '''\n    # create output tree as a list\n    # root node will have node_id = 0, so it is root\n    tree = [None] * len(sa)\n    # initialize root node\n    root = tree[0] = {\n        'occ': [],\n        'start': start,\n        'end': end,\n        'node_id': 0\n    }\n    # go through all nodes and add them to the tree\n    for index in range(1,len(sa)):\n        # check if this is a leaf node\n        if lcp[index] == 0:\n            # get the current node\n            current = tree[index]\n            # find the parent node\n            while current['node_id']!= 0:\n                current = tree[current['node_id']]\n            # add the suffix to the parent node\n            current['occ'].append((start,end))\n        else:\n            # get the current node\n            current = tree[index]\n            # find the parent node\n            while current['node_id']!= 0:\n                current = tree[current['node_id']]\n            # create a new node\n            node = {\n                'occ': [],\n                'start': start,\n                'end': end,\n                'node_id': 0\n            }\n            # add the new node to the parent node\n            current['occ'].append((start,end))\n            current['node_id'] = len(tree)\n            # add the new node to the tree\n            tree.append(node)\n            # find the next node\n            next_index = index + lcp[index]\n            next_node = tree[next_index]\n            while next_node['node_id']!= 0:\n                current = next_node\n                next_node = tree[next_node['node_id']]\n            # add the new node as a child to the next node\n            next_node['occ'].append((start,end))\n            # increment the next node\n            current['node_id'] += 1\n    return tree\ndef suffix_tree_matching(text, tree, text_index):\n    '''\n    Write a function to search for a pattern in a string using suffix tree.\n    '''\n    current = tree[0]\n    pattern_index = 0\n    while current['node_id']!= 0:\n        # if we have matched all the characters in the pattern\n        if pattern_index == len(text_index):\n            # return the node_id of the matched pattern\n            return current['node_id']\n        current = tree[current['node_id']]\n        if text_index[pattern_index] in current['occ']:\n            # if the letter matched, move to the next letter in the pattern\n            pattern_index += 1\n    if pattern_index == len(text_index):\n        # return the node_id of the matched pattern\n        return current['node_id']\n    # if the pattern is not matched, return -1\n    return -1\ndef get_frequent_words(string,k):\n    '''\n    Write a function to get the top k frequent words from the string.\n    '''\n    # Get the last column of the Burrows-Wheeler matrix from BWT\n    bw_matrix = bwt(string)\n    bw_matrix_columns = [bw_matrix[i:i+len(string)] for i in range(len(string))]\n    # Get the frequency of each column\n    # save the count of the number of times a letter occurs in a column\n    # save the index of the column\n    # save the index and count as a tuple\n    # sort the list by count\n    frequency = {}\n    for index in range(len(string)):\n        column = bw_matrix_columns[index]\n        if column not in frequency:\n            frequency[column] = []\n        frequency[column].append(index)\n    for column in frequency:\n        frequency[column] = list(zip(frequency[column], [0] * len(frequency[column])))\n        frequency[column] = sorted(frequency[column], key=lambda x: x[1], reverse=True)\n    # Get the top k frequent words\n    # Save the top k frequent words and their count\n    words = []\n    for i in range(k):\n        column = frequency[bw_matrix_columns[frequency[bw_matrix_columns[0]][i][0]]]\n        words.append((bw_matrix[column[0][0]: column[0][0] + len(string)], column[0][1]))\n    # Sort the words\n    words.sort(key=lambda x: x[1], reverse=True)\n    return words\ndef get_kmers(string,k):\n    '''\n    Write a function to get all the k-mers from a string.\n    '''\n    # Get the last column of the Burrows-Wheeler matrix from BWT\n    bw_matrix = bwt(string)\n    bw_matrix_columns = [bw_matrix[i:i+len(string)] for i in range(len(string))]\n    # Get the frequency of each column\n    # save the count of the number of times a letter occurs in a column\n    # save the index of the column\n    # save the index and count as a tuple\n    # sort the list by count\n    frequency = {}\n    for index in range(len(string)):\n        column = bw_matrix_columns[index]\n        if column not in frequency:\n            frequency[column] = []\n        frequency[column].append(index)\n    for column in frequency:\n        frequency[column] = list(zip(frequency[column], [0] * len(frequency[column])))\n        frequency[column] = sorted(frequency[column], key=lambda x: x[1], reverse=True)\n    # Get the top k frequent words\n    # Save the top k frequent words and their count\n    kmers = []\n    for i in range(len(string) - k + 1):\n        column = frequency[bw_matrix_columns[frequency[bw_matrix_columns[0]][i][0]]]\n        kmers.append((bw_matrix[column[0][0]: column[0][0] + k], column[0][1]))\n    # Sort the words\n    kmers.sort(key=lambda x: x[1], reverse=True)\n    return kmers\ndef get_motifs(text,k,d):\n    '''\n    Write a function to get all the k-mers with a given Hamming distance from a string.\n    '''\n    # Create the last column of the Burrows-Wheeler matrix from BWT\n    bw_matrix = bwt(text)\n    bw_matrix_columns = [bw_matrix[i:i+len(text)] for i in range(len(text))]\n    # Save the frequency of each column\n    # Save the index of the column\n    # Save the index and count as a tuple\n    # Sort the list by count\n    frequency = {}\n    for index in range(len(text)):\n        column = bw_matrix_columns[index]\n        if column not in frequency:\n            frequency[column] = []\n        frequency[column].append(index)\n    for column in frequency:\n        frequency[column] = list(zip(frequency[column], [0] * len(frequency[column])))\n        frequency[column] = sorted(frequency[column], key=lambda x: x[1], reverse=True)\n    # Save the top d frequent words\n    # Save the top d frequent words and their count\n    motifs = []\n    for i in range(len(text) - k + 1):\n        column = frequency[bw_matrix_columns[frequency[bw_matrix_columns[0]][i][0]]]",
        "num_ids": 300
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output_string = []\n    if len(string) > len(string[0]):\n        return string\n    for i in range(len(string)):\n        # Check if the character is present in the string\n        if string[i] not in string[0:i] or string[i] not in string[i+1:]:\n            output_string.append(string[i])\n    return \"\".join(output_string)\n",
        "num_ids": 104
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    dup = 0\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                dup = 1\n    if dup == 1:\n        print('The array contains duplicate element.')\n    else:\n        print('The array does not contain duplicate element.')\n",
        "num_ids": 97
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # time complexity: O(n^2)\n    # space complexity: O(1)\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set from the arraynums, this will remove the duplicate elements\n    set_nums = set(arraynums)\n    # return the length of the set. If it is not equal to the length of the array then there are duplicates\n    return len(set_nums) == len(arraynums)\n",
        "num_ids": 76
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(set(arraynums)) == len(arraynums):\n        return False\n    else:\n        return True\n",
        "num_ids": 32
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    i = 0\n    while i < len(arraynums):\n        j = 0\n        while j < len(arraynums):\n            if arraynums[i] == arraynums[j] and i!= j:\n                return True\n            j = j + 1\n        i = i + 1\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert (any(arraynums.count(x) > 1 for x in arraynums)) == True\n",
        "num_ids": 27
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    test = set(arraynums)\n    if len(test) == len(arraynums):\n        return False\n    else:\n        return True\n",
        "num_ids": 38
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(len(arraynums)):\n            if arraynums[i] == arraynums[j] and i!= j:\n                return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # Take out the list of numbers (2, 3, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, ",
        "num_ids": 2015
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 5 == 0\n",
        "num_ids": 10
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in range(1, x):\n        if x % i == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    print(str(x))\n    x = str(x)\n    lst = x.split(\".\")\n    if len(lst) == 2:\n        if len(lst[0]) == len(lst[1]):\n            if int(lst[0]) % int(lst[1]) == 0:\n                return True\n    else:\n        return False\n",
        "num_ids": 91
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 6:\n        return \"woodall\"\n    else:\n        return \"not woodall\"\n",
        "num_ids": 28
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    l=len(str(x))\n    while x>0:\n        rem=x%10\n        if rem>=0 and rem<=6:\n            return False\n        x=x//10\n    return True\nprint(is_woodall(1212))\n",
        "num_ids": 65
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x%3==0 and x%5==0)\n",
        "num_ids": 18
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # if x%3==0 and x%5==0:\n    #     return True\n    # else:\n    #     return False\n    return x%3==0 and x%5==0\n",
        "num_ids": 49
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x % 3 == 0 or x % 5 == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%3==0\n",
        "num_ids": 10
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    result = 0\n    for i in range(0,num):\n        result += num-i\n    if result == 2*result:\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 50
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num1=str(num)\n    num2=str(num)[::-1]\n    num1=int(num1)\n    num2=int(num2)\n    if (num1-num2)==0:\n        return True\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    def reverse(num):\n        num1 = str(num)\n        num1 = num1[::-1]\n        return num1\n    return num - int(reverse(num))\n    \n",
        "num_ids": 48
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    str_num = str(num)\n    reverse_num = \"\"\n    for i in range(len(str_num)):\n        reverse_num += str_num[len(str_num)-1-i]\n    return int(reverse_num) == num-1\n",
        "num_ids": 66
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == 0 and (num - 1) == (num / 2) * 2\n",
        "num_ids": 22
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num=0\n    if(num>0):\n        while(num>0):\n            rev_num=rev_num*10+num%10\n            num=int(num/10)\n    else:\n        num=abs(num)\n        while(num>0):\n            rev_num=rev_num*10+num%10\n            num=int(num/10)\n        rev_num=-rev_num\n    return rev_num\n    \ndef is_one_less_twice_reverse(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return ((num-rev(num))==1 or (num-rev(num))==0)\n    \ndef main():\n    num=int(input(\"Enter the number: \"))\n    if(is_one_less_twice_reverse(num)):\n        print(num,\"is one less than twice its reverse\")\n    else:\n        print(num,\"is not one less than twice its reverse\")\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 112
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n = num\n    rev = 0\n    while num > 0:\n        rev = (rev * 10) + (num % 10)\n        num = num // 10\n    if n == (rev * 2):\n        return True\n    else:\n        return False",
        "num_ids": 62
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    reverse_num = int(num_str[::-1])\n    if (reverse_num + 1) == num:\n        return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_rev = int(str(num)[::-1])\n    if num_rev+1 == 2*num_rev:\n        return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # base case\n    if num == 0:\n        return True\n    # if num is even and reverse of num is even\n    if num % 2 == 0 and num // 2 % 2 == 0:\n        return True\n    # if num is even and reverse of num is odd\n    if num % 2 == 0 and num // 2 % 2!= 0:\n        return False\n    # if num is odd and reverse of num is even\n    if num % 2!= 0 and num // 2 % 2 == 0:\n        return False\n    # if num is odd and reverse of num is odd\n    if num % 2!= 0 and num // 2 % 2!= 0:\n        return True\n",
        "num_ids": 158
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest = 0\n    arr = list(set(arr))\n    for i in arr : \n        if i > largest : \n            largest = i\n    return largest\n",
        "num_ids": 42
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n    \n",
        "num_ids": 11
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # your code here\n    if len(arr) == 0 :\n        return -1\n    else :\n        max_num = 0\n        for i in range(len(arr)) : \n            if arr[i] > max_num : \n                max_num = arr[i]\n        return max_num\n",
        "num_ids": 76
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 :\n        return -1\n    max_num = 0\n    arr_sorted = sorted(arr,reverse=True)\n    #print(arr_sorted)\n    \n    for i in range(len(arr_sorted)) :\n        temp_num = arr_sorted[i] * 10**i\n        #print(temp_num)\n        if temp_num > max_num :\n            max_num = temp_num\n        \n    return max_num\n    \n    #return -1\n",
        "num_ids": 128
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # n is the number of elements in arr\n    n = len(arr)\n    # dp[i] stores the largest sum till arr[i]\n    dp = [0 for i in range(n)]\n    \n    for i in range(n) :\n        dp[i] = arr[i]\n        for j in range(i) : \n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i] :\n                dp[i] = dp[j] + arr[i]\n",
        "num_ids": 132
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    for i in range(len(arr)-1, -1, -1) : \n        print(arr[i])\n    \n    return arr\n",
        "num_ids": 43
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr)==0 :\n        return \"Invalid Input\"\n    else :\n        for i in range(0,len(arr)):\n            if int(arr[i])>9:\n                print('No such number can be formed')\n                return 0\n                break\n        else:\n            num = int(''.join(arr))\n            print('The largest number formed with the given list of digits is: ',num)\n            return num\n",
        "num_ids": 105
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # return sorted(arr)[len(arr)-1]\n    # return sorted(arr)[-1]\n",
        "num_ids": 27
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    print(arr[-1])\n",
        "num_ids": 17
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[-1]\n",
        "num_ids": 16
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0)\nopposite_Signs(-2,4)\nopposite_Signs(3,5)\n",
        "num_ids": 46
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<0 and y>0):\n        return True\n    if(x>0 and y<0):\n        return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n        \n        \n        \n        \n        ",
        "num_ids": 52
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0)\n    #another solution\n    #return x<0 and y>0 or x>0 and y<0\n    #another solution\n    #return x<0 and y>0 or x>0 and y<0\n    #another solution\n    #if (x>0 and y<0) or (x<0 and y>0):\n        #return True\n    #return False",
        "num_ids": 109
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x*y == 0):\n        print(\"The two integers have same sign\")\n    elif(x*y < 0):\n        print(\"The two integers have opposite signs\")\n    else:\n        print(\"The two integers have same sign\")\nopposite_Signs(10,10)\nopposite_Signs(-10,10)\nopposite_Signs(10,-10)\nopposite_Signs(-10,-10)\n",
        "num_ids": 104
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # This code will return True if the two numbers have opposite signs.\n    # False if they don't.\n    if (x*y) > 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 50
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    if x>0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x<0 and y>0 or x>0 and y<0\n",
        "num_ids": 20
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    if n % 2 == 0:\n        return n ** 2 + n\n    else:\n        return n * n + (n + 1)\n    \n    \ndef is_pandigital(n):\n    '''\n    Write a function to check whether a number is pandigital.\n    '''\n    \n    str_n = str(n)\n    num_of_digits = len(str_n)\n    \n    for i in range(1, num_of_digits + 1):\n        if str(i) not in str_n:\n            return False\n    return True\n    \n    \ndef get_largest_pandigital(limit):\n    '''\n    Find the largest pandigital number with more than two distinct digits.\n    '''\n    \n    # First set up an array to store all the pandigitals that we have found\n    # We are going to use a set to check whether a pandigital is already\n    # in our list, which will dramatically speed up the search time.\n    \n    pandigital_list = []\n    \n    # Define the starting and ending point of our range of pandigitals to check\n    start = 1\n    end = 9\n    \n    # Loop through all the possible pandigitals\n    for i in range(start, end + 1):\n        for j in range(start, end + 1):\n            # Define our pandigital by joining the number with the number of\n            # digits. This means our pandigital will be 123456789\n            pandigital = str(i) + str(j) + str(i * j)\n            \n            # Check if the pandigital is a valid pandigital\n            if is_pandigital(pandigital):\n                # If so, add it to our list of pandigitals\n                pandigital_list.append(int(pandigital))\n                \n    # Sort the pandigitals in ascending order\n    pandigital_list.sort()\n    \n    # Then, loop through the pandigitals to find the largest one\n    for i in range(len(pandigital_list) - 1, -1, -1):\n        # If we have found a pandigital, it will be the largest of our list\n        if len(str(pandigital_list[i])) == 9:\n            return pandigital_list[i]\n        \n        # Check to see if we have found a larger pandigital than the one we are\n        # currently looking for. If so, break out of the loop\n        if pandigital_list[i] > limit:\n            break\n    \n    return 0\n    \n    \ndef get_largest_pandigital_nonduplicates(limit):\n    '''\n    Find the largest pandigital number with distinct digits.\n    '''\n    \n    # First set up an array to store all the pandigitals that we have found\n    # We are going to use a set to check whether a pandigital is already\n    # in our list, which will dramatically speed up the search time.\n    \n    pandigital_list = []\n    \n    # Define the starting and ending point of our range of pandigitals to check\n    start = 1\n    end = 9\n    \n    # Loop through all the possible pandigitals\n    for i in range(start, end + 1):\n        for j in range(start, end + 1):\n            # Define our pandigital by joining the number with the number of\n            # digits. This means our pandigital will be 123456789\n            pandigital = str(i) + str(j) + str(i * j)\n            \n            # Check if the pandigital is a valid pandigital\n            if is_pandigital(pandigital) and len(set(str(pandigital))) == 9:\n                # If so, add it to our list of pandigitals\n                pandigital_list.append(int(pandigital))\n                \n    # Sort the pandigitals in ascending order\n    pandigital_list.sort()\n    \n    # Then, loop through the pandigitals to find the largest one\n    for i in range(len(pandigital_list) - 1, -1, -1):\n        # If we have found a pandigital, it will be the largest of our list\n        if len(str(pandigital_list[i])) == 9:\n            return pandigital_list[i]\n        \n        # Check to see if we have found a larger pandigital than the one we are\n        # currently looking for. If so, break out of the loop\n        if pandigital_list[i] > limit:\n            break\n    \n    return 0\n    \n    \ndef get_largest_pandigital_without_repetition(limit):\n    '''\n    Find the largest pandigital number with repeated digits.\n    '''\n    \n    # First set up an array to store all the pandigitals that we have found\n    # We are going to use a set to check whether a pandigital is already\n    # in our list, which will dramatically speed up the search time.\n    \n    pandigital_list = []\n    \n    # Define the starting and ending point of our range of pandigitals to check\n    start = 1\n    end = 9\n    \n    # Loop through all the possible pandigitals\n    for i in range(start, end + 1):\n        for j in range(start, end + 1):\n            # Define our pandigital by joining the number with the number of\n            # digits. This means our pandigital will be 123456789\n            pandigital = str(i) + str(j) + str(i * j)\n            \n            # Check if the pandigital is a valid pandigital\n            if is_pandigital(pandigital) and len(set(str(pandigital))) == 9:\n                # If so, add it to our list of pandigitals\n                pandigital_list.append(int(pandigital))\n                \n    # Sort the pandigitals in ascending order\n    pandigital_list.sort()\n    \n    # Then, loop through the pandigitals to find the largest one\n    for i in range(len(pandigital_list) - 1, -1, -1):\n        # If we have found a pandigital, it will be the largest of our list\n        if len(str(pandigital_list[i])) == 9:\n            return pandigital_list[i]\n        \n        # Check to see if we have found a larger pandigital than the one we are\n        # currently looking for. If so, break out of the loop\n        if pandigital_list[i] > limit:\n            break\n    \n    return 0\n    \n    \ndef main():\n    '''\n    This function will call all of the other functions to check if a\n    number is a pandigital or not.\n    '''\n    \n    # Print out the solution for the first problem\n    print('Problem 1:'+ str(get_largest_pandigital(987654321)))\n    \n    # Print out the solution for the second problem\n    print('Problem 2:'+ str(get_largest_pandigital_nonduplicates(987654321)))\n    \n    # Print out the solution for the third problem\n    print('Problem 3:'+ str(get_largest_pandigital_without_repetition(987654321)))\n    \n    \nif __name__ == '__main__':\n    main()\n    \n    ",
        "num_ids": 147
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 2)\n",
        "num_ids": 14
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    x = int((8*n + 1)**0.5)\n    y = int((8*n - 1)**0.5)\n    return (x*y == n)\n",
        "num_ids": 46
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3*n - 1) // 2\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Your code here\n    if n==1:\n        return 8\n    return 8*(n-1) + 1\n",
        "num_ids": 31
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)//2\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    nth_oct = 0\n    oct_num = 1\n    for i in range(1,n+1):\n        nth_oct += 1\n        oct_num = oct_num + (8 * nth_oct)\n    return oct_num\n",
        "num_ids": 62
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while i < n:\n        i += 1\n        n += 1\n    return n\n",
        "num_ids": 28
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n*(3*n-1)/2)\n",
        "num_ids": 18
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Compute the nth triangular number, and then\n    # subtract from it the sum of its digits.\n",
        "num_ids": 27
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub = []\n    subs = set()\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            sub.append(s[i:j + 1])\n    for i in sub:\n        if sum(list(map(int, i))) == len(i):\n            subs.add(i)\n    return len(subs)\n",
        "num_ids": 96
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def sum_of_digits_equal_to_length(string, length):\n        return len([1 for i in range(0,len(string)-length+1) if sum(map(int,string[i:i+length]))==length])\n    return sum_of_digits_equal_to_length(s,len(s))\n",
        "num_ids": 84
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if sum(int(i) for i in s[i:j]) == j-i:\n                count+=1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def dfs(s,i,j,l):\n        while i<=j and j<len(s):\n            if sum(int(i) for i in s[i:j+1])==l:\n                result.append(s[i:j+1])\n                i+=1\n                j+=1\n            else:\n                j+=1\n    def dfs2(s,i,j):\n        while i<=j and j<len(s):\n            if int(s[i:j+1])==0:\n                result.append(s[i:j+1])\n                i+=1\n                j+=1\n            else:\n                j+=1\n    result = []\n    for i in range(len(s)):\n        dfs(s,i,i,len(s)-i)\n    for i in range(len(s)):\n        dfs2(s,i,i)\n    return result\n",
        "num_ids": 224
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    cnt = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            cur_sum = 0\n            for k in range(i,j+1):\n                cur_sum += int(s[k])\n            if cur_sum == j-i+1:\n                cnt += 1\n    return cnt\n",
        "num_ids": 90
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l=len(s)\n    sub_str=0\n    for i in range(l):\n        for j in range(i,l):\n            temp=s[i:j+1]\n            if sum([int(x) for x in temp])==len(temp):\n                sub_str+=1\n    return sub_str\n",
        "num_ids": 81
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s)==0:\n        return 0\n    sLen=len(s)\n    dp=[[0 for i in range(10)] for j in range(sLen)]\n    ans=0\n    for i in range(sLen):\n        dp[i][0]=1\n        ans+=dp[i][0]\n    for i in range(1,sLen):\n        for j in range(10):\n            if i<=j:\n                dp[i][j]=(dp[i-1][j])\n            else:\n                if j-s[i-1]>=0:\n                    dp[i][j]=(dp[i-1][j]+(dp[i-1][j-s[i-1]] if (dp[i-1][j-s[i-1]]>0) else 0))\n                else:\n                    dp[i][j]=dp[i-1][j]\n            ans+=dp[i][j]\n    return ans\n",
        "num_ids": 233
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) < 1:\n        return 0\n    map_dict = defaultdict(int)\n    map_dict[0] = 1\n    left, right, total = 0, 1, 0\n    while right < len(s):\n        total += int(s[right])\n        map_dict[total] += 1\n        right += 1\n        while total > right - left:\n            total -= int(s[left])\n            map_dict[total] -= 1\n            left += 1\n    print(map_dict)\n    return sum([map_dict[i] for i in map_dict if i == len(s) - i])\n",
        "num_ids": 153
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n=len(s)\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    res=0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if(j>=i):\n                if(s[j-1]==\"0\"):\n                    dp[i][j]=dp[i][j-1]\n                else:\n                    dp[i][j]=(dp[i-1][j-1] or (dp[i][j-1] and int(s[j-1])<=6))\n                if(dp[i][j]==1):\n                    res+=1\n    return res\n",
        "num_ids": 173
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            sum_of_digits = 0\n            for k in range(i, j+1):\n                sum_of_digits += int(s[k])\n            if sum_of_digits == j - i + 1:\n                count += 1\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = xs[0]\n    for x in xs:\n        if x < smallest_number:\n            smallest_number = x\n    return smallest_number\n",
        "num_ids": 45
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # YOUR CODE HERE\n    return min(xs)\n",
        "num_ids": 15
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #0(n) time | O(n) space where n is the number of elements in the list\n    return min(xs)\n",
        "num_ids": 33
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for x in xs:\n        if x < min_num:\n            min_num = x\n    return min_num\n",
        "num_ids": 43
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n",
        "num_ids": 16
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # test_list = [\n    #     (1, 4), (2, 3), (3, 4), (3, 6), (1, 2), (2, 5), (3, 8)\n    # ]\n    max_diff = None\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            difference = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if not max_diff or difference > max_diff:\n                max_diff = difference\n    return max_diff\n",
        "num_ids": 165
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if test_list is None:\n        return \"Empty Tuple List\"\n    if len(test_list) < 2:\n        return \"Tuple List must be at least 2 element long\"\n    if len(test_list) == 2:\n        return abs(test_list[0] - test_list[1])\n    else:\n        return max([abs(x - y) for x, y in zip(test_list[0:-1], test_list[1:])])\n",
        "num_ids": 115
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = [(10, 20, 30), (40, 50, 60), (70, 80, 90), (100, 110, 120)]\n    if len(test_list) < 2:\n        return None\n    else:\n        return max(abs(test_list[i+1] - test_list[i]) for i in range(len(test_list)-1))\n",
        "num_ids": 91
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n",
        "num_ids": 92
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    min_val = test_list[0]\n    max_val = test_list[-1]\n    max_diff = max_val - min_val\n    print(max_diff)\n    return max_diff\n",
        "num_ids": 62
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not test_list:\n        return 0\n    else:\n        diff = 0\n        for i in range(0, len(test_list) - 1):\n            diff = max(diff, abs(test_list[i] - test_list[i + 1]))\n        return diff\n",
        "num_ids": 71
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            difference = abs(test_list[i] - test_list[j])\n            if difference > max_diff:\n                max_diff = difference\n    return max_diff\n",
        "num_ids": 83
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # checks for length of list to ensure that it is greater than 1\n    if len(test_list) >= 2:\n        # sets the max difference to the first difference in the list\n        max_difference = abs(test_list[0] - test_list[1])\n        # iterates through the list to compare the differences between every index\n        for index in range(len(test_list)):\n            # compares the next difference with the current difference\n            if abs(test_list[index] - test_list[index + 1]) > max_difference:\n                # if the current difference is greater than the max difference, the max difference becomes the current difference\n                max_difference = abs(test_list[index] - test_list[index + 1])\n    # returns the maximum difference between the available pairs\n    return max_difference\n",
        "num_ids": 195
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i]-test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 83
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x:x[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return(sorted(subjectmarks, key=lambda x: x[1], reverse=True))\n",
        "num_ids": 25
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(\"The sorted list of subject marks are:\", sorted(subjectmarks, key=lambda x: x[1]))\n    return\n",
        "num_ids": 33
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(len(subjectmarks)):\n        for j in range(i+1, len(subjectmarks)):\n            if subjectmarks[i][1] > subjectmarks[j][1]:\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n    return subjectmarks\n",
        "num_ids": 78
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = []\n    for i in subjectmarks:\n        sorted_list.append(i[1])\n    sorted_list = sorted(sorted_list)\n    return sorted_list\n",
        "num_ids": 51
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    lst = list(subjectmarks)\n    lst.sort(key = lambda x: x[1])\n    return lst\n",
        "num_ids": 33
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    if data_list == []:\n        return 0\n    \n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \ndef recursive_list_sum_test(data_list):\n    \n    return recursive_list_sum(data_list)\n    \n    \ndef main():\n    print(\"TESTING RECURSIVE LIST SUM\")\n    test_1 = [1,2,3,4]\n    test_2 = [[1,2,3], [4,5,6], [7,8,9]]\n    \n    assert recursive_list_sum_test(test_1) == sum(test_1), f\"recursive_list_sum_test failed on {test_1}\"\n    \n    assert recursive_list_sum_test(test_2) == sum(test_2[0]) + sum(test_2[1]) + sum(test_2[2]), f\"recursive_list_sum_test failed on {test_2}\"\n    \n    print(\"ALL TEST PASSED\")\n    \n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 315
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for el in data_list:\n        if isinstance(el, list):\n            result += recursive_list_sum(el)\n        else:\n            result += el\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for element in data_list:\n        if type(element) == list:\n            sum += recursive_list_sum(element)\n        else:\n            sum += element\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    if isinstance(data_list, list):\n        if len(data_list) == 0:\n            return 0\n        if len(data_list) == 1:\n            return data_list[0]\n        else:\n            total += data_list[0]\n            for data in data_list[1:]:\n                total += recursive_list_sum(data)\n    return total\n",
        "num_ids": 98
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_of_list = 0\n    for i in data_list:\n        if type(i) == type([]):\n            sum_of_list += recursive_list_sum(i)\n        else:\n            sum_of_list += i\n    return sum_of_list\n",
        "num_ids": 69
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for i in data_list:\n        if type(i) == type([]):\n            sum += recursive_list_sum(i)\n        else:\n            sum += i\n    return sum\n",
        "num_ids": 53
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 89
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            sum = sum + recursive_list_sum(item)\n        else:\n            sum = sum + item\n    return sum\n",
        "num_ids": 55
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for data in data_list:\n        if type(data) == list:\n            result = result + recursive_list_sum(data)\n        else:\n            result = result + data\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return sum(data_list)\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 50
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count=count+1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num >= 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count+=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count=0\n    for i in list:\n        if i>0:\n            pos_count+=1\n    return pos_count\n",
        "num_ids": 36
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for num in list:\n        if num > 0:\n            counter += 1\n    return counter\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for x in list:\n        if x>0:\n            count=count+1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for i in list:\n        if i > 0:\n            positive += 1\n    return positive\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = {0:1}\n    for i in range(1,n+1):\n        bell[i] = bell[i-1] * bell[i-1]\n    return bell[n]\n",
        "num_ids": 51
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = []\n    for num in range(1, n + 1):\n        bells.append(bell_numbers[num])\n    partitions = []\n    for m in range(0, len(bells)):\n        partitions.append([bells[m]])\n    for l in range(1, len(bells)):\n        for j in range(0, len(bells) - l):\n            for k in range(0, len(bells) - l):\n                if partitions[j][k] + partitions[j][k + 1] + partitions[j + 1][k] + partitions[j + 1][k + 1] == bells[j] + bells[j + 1] + bells[k] + bells[k + 1]:\n                    partitions.append(partitions[j] + partitions[j + 1] + [bells[j + 1]] + [bells[k]])\n    return partitions\n",
        "num_ids": 220
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3) + bell_number(n-4)\n",
        "num_ids": 84
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = bell_numbers()\n    i = 0\n    while bell[i] < n:\n        i += 1\n    return i\n",
        "num_ids": 35
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell_number_iter(n)\n",
        "num_ids": 13
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(i*bell_numbers[i-1])\n    bell_numbers.reverse()\n    return bell_numbers[n]\n",
        "num_ids": 64
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1]\n    for i in range(1, n):\n        bells.append(i*(i+1)//2)\n    bell_nums = [0] * (n+1)\n    bell_nums[0] = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            bell_nums[i] += bells[i-j-1] * bell_nums[j]\n    return bell_nums[n]\n",
        "num_ids": 123
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # dp[i] is the number of ways of partitioning a set of bell number of size i\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    # recursion: dp[n] = dp[n-1] + dp[n-2] + dp[n-3] +... + dp[1] + dp[0]\n    for i in range(n):\n        for j in range(i, -1, -1):\n            dp[i+1] += dp[j]\n    \n    return dp[-1]\n    \n",
        "num_ids": 151
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = bell_numbers()\n    bell_list = bell[0]\n    bell_list.insert(0, 0)\n    bell_list.append(0)\n    bell_list.append(0)\n    answer = 0\n    for i in range(n + 1):\n        count = 0\n        for j in range(len(bell_list) - 1):\n            if bell_list[j] == i and bell_list[j + 1] == i + 1:\n                count += 1\n        answer += count\n        answer %= 10 ** 9 + 7\n    return answer\n",
        "num_ids": 139
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    return sum(bell_number(n-k)*bell_number(k) for k in range(1,n+1))\n",
        "num_ids": 43
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # TODO: Write your code here\n    return None\n",
        "num_ids": 16
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "num_ids": 59
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i]<=A[i+1] for i in range(len(A)-1)) or all(A[i]>=A[i+1] for i in range(len(A)-1)))\n  ",
        "num_ids": 58
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A == sorted(A) or A == sorted(A,reverse=True):\n        return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n",
        "num_ids": 60
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A is None or len(A) < 2: \n        return True\n",
        "num_ids": 21
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i]<=A[i+1] for i in range(len(A)-1)) or all(A[i]>=A[i+1] for i in range(len(A)-1)))\n",
        "num_ids": 57
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (all(A[i] <= A[i + 1] for i in range(len(A)-1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A)-1))):\n        return True\n    return False\n",
        "num_ids": 66
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n",
        "num_ids": 60
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "num_ids": 59
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(0,len(l)):\n        if l[i]!= s[i]:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s_length = len(s)\n    l_length = len(l)\n    for i in range(l_length):\n        if l[i:i+s_length] == s:\n            return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l[i:i+len(s)] == s for i in range(len(l) - len(s)+1))\n",
        "num_ids": 35
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n",
        "num_ids": 8
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    def rec_check(sub, orig):\n        if not orig:\n            return True\n        elif sub and sub[0] == orig[0]:\n            return rec_check(sub[1:], orig[1:])\n        else:\n            return False\n",
        "num_ids": 63
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    print(l)\n    print(s)\n    return s in l\n",
        "num_ids": 20
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    result = False\n    sub_list = [i for i in s]\n    for i in range(len(l)):\n        if l[i:i+len(sub_list)] == sub_list:\n            result = True\n            break\n    return result\n    \ndef merge_sum(arr, l, m, r):\n    '''\n    Write a function that takes an array arr, an integer l and an integer m and an integer r and merges the sublists from l to m and m + 1 to r.\n    '''\n    n1 = m - l + 1\n    n2 = r - m\n    # lst1 and lst2 store the first and second sublist\n    lst1 = [0] * n1\n    lst2 = [0] * n2\n    # Copy data to lst1 and lst2\n    for i in range(0, n1):\n        lst1[i] = arr[l + i]\n    for j in range(0, n2):\n        lst2[j] = arr[m + 1 + j]\n    # Merge lst1 and lst2\n    i = 0    # Initial index of lst1\n    j = 0    # Initial index of lst2\n    k = l    # Initial index of merged sublist\n    while i < n1 and j < n2:\n        if lst1[i] <= lst2[j]:\n            arr[k] = lst1[i]\n            i += 1\n        else:\n            arr[k] = lst2[j]\n            j += 1\n        k += 1\n    # Copy the remaining elements of lst1, if there are any\n    while i < n1:\n        arr[k] = lst1[i]\n        i += 1\n        k += 1\n    # Copy the remaining elements of lst2, if there are any\n    while j < n2:\n        arr[k] = lst2[j]\n        j += 1\n        k += 1\n        \ndef merge_sort(arr, l, r):\n    '''\n    Write a function that takes an array arr, an integer l and an integer r and sorts the sublist from l to r.\n    '''\n    if l < r:\n        m = int((l + (r - 1)) / 2)\n        merge_sort(arr, l, m)\n        merge_sort(arr, m + 1, r)\n        merge_sum(arr, l, m, r)\n    \ndef copy_list(l1):\n    '''\n    Write a function that takes a list as input and returns a deep copy of that list.\n    '''\n    l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2\n    \ndef reverse_list(l):\n    '''\n    Write a function that takes a list as input and returns a reversed list.\n    '''\n    l.reverse()\n    return l\n",
        "num_ids": 12
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l2 = len(s)\n    if l == 0:\n        return False\n    if l2 > l:\n        return False\n    if s == l[0:l2]:\n        return True\n    return is_sublist(l[1:], s)\n",
        "num_ids": 65
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    if l == s:\n        return True\n    for i in range(len(l) - len(s)):\n        if l[i] == s[0]:\n            if l[i:i+len(s)] == s:\n                return True\n    return False\n",
        "num_ids": 82
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    res = []\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple1 = Input[0]\n    tuple2 = Input[1]\n    tuple3 = Input[2]\n    tuple4 = Input[3]\n    tuple5 = Input[4]\n    if len(tuple1) == len(tuple2) == len(tuple3) == len(tuple4) == len(tuple5):\n        return True\n    else:\n        return False\n",
        "num_ids": 101
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)>1:\n        if len(Input[0])==len(Input[1]):\n            print('True')\n        else:\n            print('False')\n    else:\n        print('False')\n",
        "num_ids": 55
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = \"The given tuple {} has equal tuple.\"\n    Output = Output.format(Input)\n    if len(Input)!= len(set(Input)):\n        Output = \"The given tuple {} has not equal tuple.\".format(Input)\n    return Output\n",
        "num_ids": 63
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    l = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= l:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set([len(x) for x in Input]))==1\n",
        "num_ids": 21
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)==0:\n        return False\n    else:\n        for i in Input:\n            if len(i)!=len(Input[0]):\n                return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def check_tuple(Input):\n        flag = True\n        for i in range(len(Input)-1):\n            if len(Input[i])!= len(Input[i+1]):\n                flag = False\n                break\n        return flag\n    return check_tuple(Input)\n",
        "num_ids": 72
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if(len(Input[0]) == len(Input[1])):\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n",
        "num_ids": 112
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "num_ids": 117
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n",
        "num_ids": 34
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums_len = len(nums)\n    gap = nums_len\n    swapped = True\n",
        "num_ids": 28
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combsort(nums, 0, len(nums)-1)\n    return nums\n",
        "num_ids": 25
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums_copy = nums[:]\n    gap = len(nums)\n    swaps = True\n    while gap!= 1 or swaps:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swaps = False\n        for i in range(0, len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                swaps = True\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return nums\n",
        "num_ids": 139
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n",
        "num_ids": 22
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list and create a list for the sorted version of the list\n    nums_len = len(nums)\n    sorted_nums = []\n    \n    # Repeat until all the elements are sorted\n    while nums_len > 0:\n        # Loop through the elements of the list\n        for index in range(0, nums_len-1):\n            # Check if the current index is greater than the next index\n            if nums[index] > nums[index+1]:\n                # If it is, switch the elements\n                nums[index], nums[index+1] = nums[index+1], nums[index]\n        # Add the element to the sorted list\n        sorted_nums.append(nums[-1])\n        # Remove the element from the list\n        nums.remove(nums[-1])\n        # Decrement the length of the list\n        nums_len -= 1\n    # Return the sorted list\n    return sorted_nums\n    \nif __name__ == \"__main__\":\n    print(comb_sort([1,2,4,3,5])",
        "num_ids": 268
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    comparisons = 0\n    swaps = 0\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            comparisons += 1\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swaps += 1\n            i += 1\n    return nums, comparisons, swaps\n",
        "num_ids": 161
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #start with a large gap, then reduce the gap\n    n = len(nums)\n    gap = n\n    swapped = True\n",
        "num_ids": 35
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if (x**2 + y**2 == n):\n                print(\"Sum of Squares: \",x**2+y**2)\n                print(\"Difference of Squares: \",x,y)\n                return True\n            else:\n                return False\n",
        "num_ids": 79
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0, n):\n        for j in range(i, n):\n            if ((i * i + j * j) == n):\n                print(i, \" \", j, \" \", n)\ndif_Square(13)\n",
        "num_ids": 61
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = []\n    for i in range(1, n):\n        if n**2 % i**2 == 0:\n            a.append(i)\n            a.append(n**2//i**2)\n    return a\n",
        "num_ids": 57
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if (i*i + j*j) == n:\n                print(i, j)\n                return 1\n    print(0)\n    return 0\n",
        "num_ids": 65
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0, n):\n        if i*i == n:\n            return 1\n            break\n        elif i*i > n:\n            return 0\n    return 1\n",
        "num_ids": 47
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    '''\n    INPUT: 5\n    OUTPUT: True, True, False\n    \n    INPUT: 1\n    OUTPUT: True, False\n    '''\n    \n    if n < 0:\n        return False\n    \n    sqrt = int(n ** 0.5)\n    \n    #Check if n is already a power of 2\n    if sqrt == n ** 0.5:\n        return False\n    \n    #Check if n is a perfect square\n    if sqrt ** 2 == n:\n        return False\n    \n    #Else, return True\n    return True\n    ",
        "num_ids": 100
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    while (n % 4 == 0):\n        n = n // 4\n    if n % 8 == 7:\n        return False\n    else:\n        return True\n",
        "num_ids": 51
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n>=0):\n        print(f'Given number {n} is positive')\n        if (n%4==0):\n            print(f'{n} is multiple of 4, therefore we can not form a difference of 2 squares')\n            return 0\n        else:\n            print(f'{n} is not multiple of 4, therefore we can form a difference of 2 squares')\n            return 1\n    else:\n        print(f'Given number {n} is negative')\n        if (n<-1):\n            print(f'{n} is less than -1, therefore we can not form a difference of 2 squares')\n            return 0\n        else:\n            print(f'{n} is greater than -1, therefore we can form a difference of 2 squares')\n            return 1\n",
        "num_ids": 187
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if int((math.sqrt(n))**2) == n: \n        return True\n    elif int((math.sqrt(n))**2+1) == n: \n        return True\n    else: \n        return False\n",
        "num_ids": 60
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i=1\n    while i*i <=n:\n        if n - i*i ==0:\n            return print(\"Given number is the sum of square\")\n            break\n        i+=1\n    return print(\"Not the sum of two squares\")\n",
        "num_ids": 60
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return all([colors[i] in patterns[i] for i in range(len(colors))])\n",
        "num_ids": 28
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    colors = [x for x in colors if x!= 'None']\n    colors.sort()\n    colors = ''.join(colors)\n    m = len(patterns)\n    count = 0\n    for i in range(m-1):\n        start = patterns[i]\n        end = patterns[i+1]\n        count += colors.count(start)\n        colors = colors.replace(start, 'None')\n        if count > n:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2010
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    color_array = [\"red\", \"orange\", \"green\", \"purple\", \"blue\", \"yellow\"]\n    colors_set = set(colors)\n    patterns_set = set(patterns)\n    \n    if colors_set == patterns_set:\n        return True\n    else:\n        return False\n        \n    \ndef is_anagram(word1, word2):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    word1 = word1.replace(\" \", \"\").lower()\n    word2 = word2.replace(\" \", \"\").lower()\n    \n    if sorted(word1) == sorted(word2):\n        return True\n    else:\n        return False\n        \n    \ndef is_pandigital(n):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(str(n)) == 9:\n        return True\n    else:\n        return False\n        \n        \ndef integer_to_string_rec(num):\n    if num < 10:\n        return str(num)\n    else:\n        return str(num % 10) + integer_to_string_rec(num // 10)\n        \n        \ndef integer_to_string(num):\n    string = ''\n    while num!= 0:\n        string += str(num % 10)\n        num = num // 10\n    return string[::-1]\n        \n        \ndef sum_of_digits(num):\n    total = 0\n    for digit in str(num):\n        total += int(digit)\n    return total\n        \n        \ndef sum_of_digits_recursive(num):\n    if num < 10:\n        return num\n    else:\n        return num % 10 + sum_of_digits_recursive(num // 10)\n        \n        \ndef number_of_divisors(num):\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count\n        \n        \ndef number_of_divisors_recursive(num):\n    if num == 1:\n        return 1\n    elif num == 0:\n        return 1\n    elif num % 2 == 0:\n        return 2 + number_of_divisors_recursive(num // 2)\n    else:\n        return 2 + number_of_divisors_recursive(num - 1)\n        \n        \ndef find_triplet(arr, target):\n    \n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return arr[i], arr[j], arr[k]\n                    \n                    \ndef find_triplet_rec(arr, target, curr_sum, i, j):\n    \n    if i == len(arr):\n        return -1\n        \n    if curr_sum == target:\n        return i, j\n        \n    if curr_sum + arr[i] + arr[j] == target:\n        return i, j\n    \n    elif curr_sum + arr[i] + arr[j] < target:\n        return find_triplet_rec(arr, target, curr_sum + arr[i] + arr[j], i + 1, j)\n    else:\n        return find_triplet_rec(arr, target, curr_sum + arr[i] + arr[j], i, j + 1)\n        \n        \ndef reverse(word):\n    return word[::-1]\n        \n        \ndef reverse_recursive(word):\n    if len(word) == 1:\n        return word\n    else:\n        return reverse_recursive(word[1:]) + word[0]\n        \n        \ndef my_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * my_factorial(n - 1)\n        \n        \ndef factorial_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial_recursive(n - 1)\n        \n        \ndef sum_of_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += i\n    return count\n        \n        \ndef sum_of_divisors_recursive(n):\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 2 + sum_of_divisors_recursive(n // 2)\n    else:\n        return 1 + sum_of_divisors_recursive(n - 1)\n        \n        \ndef number_of_steps(num):\n    if num < 0:\n        return -1\n    else:\n        return number_of_steps_recursive(num)\n        \ndef number_of_steps_recursive(num):\n    if num == 1:\n        return 0\n    elif num % 2 == 0:\n        return 1 + number_of_steps_recursive(num // 2)\n    else:\n        return 1 + number_of_steps_recursive(num - 1)\n        \n        \ndef number_of_steps_bottom_up(num):\n    arr = [0] * (num + 1)\n    for i in range(1, num + 1):\n        if i % 2 == 0:\n            arr[i] = 1 + arr[i // 2]\n        else:\n            arr[i] = 1 + arr[i - 1]\n    return arr[num]\n        \n        \ndef count_combinations(n, k):\n    if k == 1:\n        return n\n    else:\n        return count_combinations_recursive(n, k)\n        \ndef count_combinations_recursive(n, k):\n    if k == 1:\n        return 1\n    elif k == n:\n        return 1\n    else:\n        return count_combinations_recursive(n - 1, k) + count_combinations_recursive(n - 1, k - 1)\n        \n        \ndef count_combinations_bottom_up(n, k):\n    arr = [0] * (k + 1)\n    arr[1] = n\n    for i in range(2, k + 1):\n        arr[i] = arr[i - 1] * (n - i + 1) // i\n    return arr[k]\n        \n        \ndef combination_recursive(n, k):\n    if k == 1:\n        return n\n    else:\n        return combination_recursive(n - 1, k) + combination_recursive(n - 1, k - 1)\n        \n        \ndef combination_bottom_up(n, k):\n    arr = [0] * (k + 1)\n    arr[1] = n\n    for i in range(2, k + 1):\n        arr[i] = arr[i - 1] * (n - i + 1) // i\n    return arr[k]\n        \n        \ndef find_smallest(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return min(find_smallest(arr[1:]), arr[0])\n        \n        \ndef find_smallest_recursive(arr, i):\n    if i == 0:\n        return arr[i]\n    else:\n        return min(find_smallest_recursive(arr, i - 1), arr[i])\n        \n        \ndef max_sequence_recursive(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n    else:\n        return max(arr[0] + max_sequence_recursive(arr[2:]), max_sequence_recursive(arr[1:]), arr[0])\n        \n        \ndef max_sequence(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        sum_of_max_sequence = [arr[0]]\n        for i in range(1, len(arr)):\n        ",
        "num_ids": 1791
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return all(colors[index] == colors[index+1] for index in range(len(colors)-1)) and all(colors[index] in patterns[index] for index in range(len(colors)))\n    \ncolors = ['red', 'blue','red', 'green', 'blue', 'blue']\npatterns = [['red', 'green'], ['red', 'blue'], ['blue', 'green']]\nprint(is_samepatterns(colors, patterns))\n",
        "num_ids": 117
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return len(colors) == len(patterns) and all(map(lambda p,c:p==c or p==c+1,patterns,colors))\n",
        "num_ids": 42
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        for j in range(len(patterns)):\n            if i == len(colors) - 1:\n                return True\n            if colors[i] == patterns[j]:\n                colors = colors[i+1:]\n                patterns = patterns[j+1:]\n                break\n        else:\n            return False\n",
        "num_ids": 90
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Use a dictionary to store the patterns\n    dict_patterns = dict()\n    # Iterate through each pattern, if the pattern is not in the dictionary, add it\n    for i in patterns:\n        if i not in dict_patterns:\n            dict_patterns[i] = 1\n        else:\n            dict_patterns[i] += 1\n",
        "num_ids": 85
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    current_color = None\n    current_pattern = []\n    for i in range(len(colors)):\n        if current_color == None:\n            current_color = colors[i]\n            current_pattern = patterns[i]\n        elif current_color == colors[i]:\n            current_pattern.append(patterns[i][i])\n        else:\n            if current_color not in patterns[i]:\n                return False\n            current_color = colors[i]\n            current_pattern = patterns[i]\n    return True\n    \n    \ndef sort_pattern(pattern, colors):\n    '''\n    Write a function that takes in a pattern array and colors array and that returns a sorted version of the pattern array\n    using the colors array.\n    '''\n    i = 0\n    for j in range(len(colors)):\n        if i >= len(pattern):\n            break\n        while colors[j]!= pattern[i]:\n            i += 1\n        else:\n            if i == len(pattern)-1:\n                return pattern\n            else:\n                i += 1\n    return pattern\n",
        "num_ids": 82
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for p in patterns:\n        if p not in colors:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    # l = []\n    # for x in test_list:\n    #     if all(x % k == 0 for k in K):\n    #         l.append(x)\n    # return l\n",
        "num_ids": 52
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    k = K\n    result = []\n    for i in range(len(test_list)):\n        if test_list[i][0] % k == 0 and test_list[i][1] % k == 0:\n            result.append(test_list[i])\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_list = [(5, 3), (5, 2), (3, 4), (9, 1)]\n    K = 4\n    output = []\n    for tup in test_list:\n        if tup[0] % K == 0 and tup[1] % K == 0:\n            output.append(tup)\n    print(output)\n",
        "num_ids": 86
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return set([tuple(i) for i in test_list if all(j % K == 0 for j in i)])\n",
        "num_ids": 32
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for tup in test_list:\n        if all([x%K for x in tup]):\n            tuples.append(tup)\n    return tuples\n",
        "num_ids": 48
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    if test_list == [] or K == 0:\n        return []\n    elif K > 1:\n        for i in range(len(test_list)):\n            if test_list[i][0] % K == 0 and test_list[i][1] % K == 0 and test_list[i][2] % K == 0:\n                res.append(test_list[i])\n        return res\n    else:\n        for i in range(len(test_list)):\n            if test_list[i][0] % K == 0 and test_list[i][1] % K == 0 and test_list[i][2] % K == 0:\n                res.append(test_list[i])\n        return res\n",
        "num_ids": 180
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    tuple_list = []\n    \n    for i in test_list:\n        if sum(i) % K == 0:\n            tuple_list.append(i)\n    \n    return tuple_list\n",
        "num_ids": 54
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #result = []\n    result = []\n    for (a,b) in test_list:\n        if a%K==0 and b%K==0:\n            result.append((a,b))\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if sum([i%K for i in tup]) == 0:\n            result.append(tup)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    def test_list_gen(test_list):\n        for i in range(len(test_list)):\n            if len(test_list[i])%2==0:\n                for j in range(len(test_list[i])):\n                    if j%2==0:\n                        yield (test_list[i][j],test_list[i][j+1])\n                    else:\n                        yield (test_list[i][j+1],test_list[i][j])\n            else:\n                for j in range(len(test_list[i])):\n                    if j%2==0:\n                        yield (test_list[i][j],test_list[i][j+1])\n                    else:\n                        yield (test_list[i][j+1],test_list[i][j])\n            \n    def test_list_gen2(test_list):\n        for i in range(len(test_list)):\n            if len(test_list[i])%2==0:\n                for j in range(len(test_list[i])):\n                    if j%2==0:\n                        yield (test_list[i][j],test_list[i][j+1])\n                    else:\n                        yield (test_list[i][j+1],test_list[i][j])\n            else:\n                for j in range(len(test_list[i])):\n                    if j%2==0:\n                        yield (test_list[i][j],test_list[i][j+1])\n                    else:\n                        yield (test_list[i][j+1],test_list[i][j])\n            \n    def divisor_list(n):\n        return [i for i in range(1,n+1) if n%i==0]\n    \n    def filter_test_list(test_list, K):\n        for i in range(len(test_list)):\n            temp_list = []\n            for j in range(len(test_list[i])):\n                if divisor_list(test_list[i][j])==[K]:\n                    temp_list.append(test_list[i][j])\n                    temp_list.append(test_list[i][j+1])\n            if temp_list!=[]:\n                yield temp_list\n            else:\n                continue\n                \n    def filter_test_list2(test_list, K):\n        for i in range(len(test_list)):\n            temp_list = []\n            for j in range(len(test_list[i])):\n                if divisor_list(test_list[i][j])==[K]:\n                    temp_list.append(test_list[i][j])\n                    temp_list.append(test_list[i][j+1])\n            if temp_list!=[]:\n                yield temp_list\n            else:\n                continue\n    \n    def gen_k_tuples(test_list, K):\n        test_gen = test_list_gen(test_list)\n        for i in range(len(test_gen)):\n            if K>=max(test_list[i]):\n                test_list[i] = [test_gen[i]]\n                test_list[i].append(test_gen[i])\n                yield test_list[i]\n            else:\n                pass\n    \n    def gen_k_tuples2(test_list, K):\n        test_gen = test_list_gen2(test_list)\n        for i in range(len(test_gen)):\n            if K>=max(test_list[i]):\n                test_list[i] = [test_gen[i]]\n                test_list[i].append(test_gen[i])\n                yield test_list[i]\n            else:\n                pass\n    \n    def divisible_gen(test_list, K):\n        for i in range(len(test_list)):\n            for j in range(len(test_list[i])):\n                if divisor_list(test_list[i][j])==[K]:\n                    yield test_list[i][j], test_list[i][j+1]\n                else:\n                    pass\n    \n    def divisible_gen2(test_list, K):\n        for i in range(len(test_list)):\n            for j in range(len(test_list[i])):\n                if divisor_list(test_list[i][j])==[K]:\n                    yield test_list[i][j], test_list[i][j+1]\n                else:\n                    pass\n    \n    #test_list = [(1,2),(3,4),(5,6),(7,8)]\n    #K = 2\n    #print(divisible_gen(test_list, K))\n    \n    #print(list(filter_test_list(test_list, K)))\n    #print(list(filter_test_list2(test_list, K)))\n    \n    #for i in range(len(test_list)):\n    #    print(test_list[i])\n    \n    #print(gen_k_tuples(test_list, K))\n    \n    #print(list(divisible_gen2(test_list, K)))\n    \n    #print(list(gen_k_tuples2(test_list, K)))\n    \n    return list(filter_test_list2(test_list, K))\n    \nprint(find_tuples(test_list, K))\n",
        "num_ids": 1342
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    #pass\n    return n % 11 == 0\n",
        "num_ids": 14
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\nprint(is_Diff(110))",
        "num_ids": 31
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 0 :\n        return False\n    elif n%11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\nprint(is_Diff(11))\n",
        "num_ids": 19
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        print(n,'is divisible by 11')\n    else:\n        print(n,'is not divisible by 11')\n",
        "num_ids": 40
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return False\n    else: \n        return True\n",
        "num_ids": 28
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    len = len(s)\n    if len % 2 == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 31
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n    \n",
        "num_ids": 15
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print(s,'is not a word')\n    else:\n        print(s,'is a word')\n    return\n",
        "num_ids": 42
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0 \n",
        "num_ids": 14
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n    \n    \n",
        "num_ids": 30
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n",
        "num_ids": 14
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return -1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 6\n    if n == 4:\n        return 10\n    if n == 5:\n        return 15\n    return (tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + tetrahedral_number(n-4))\n",
        "num_ids": 117
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 3\n    return tetrahedral_number(n-1) + tetrahedral_number(n-2)\n",
        "num_ids": 62
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1) * ((n+1)*n) // 6\n",
        "num_ids": 22
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 2\n    elif n==2:\n        return 4\n    elif n==3:\n        return 7\n    else:\n        return tetrahedral_number(n-1)+tetrahedral_number(n-2)+tetrahedral_number(n-3)\n",
        "num_ids": 88
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # calculate n * (n + 1) * (n + 2) * (n + 3) / 6\n    return int(n * (n + 1) * (n + 2) * (n + 3) / 6) \n",
        "num_ids": 55
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_number_list = [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 56, 57, 57, 57, 58, 58, 58, 59, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 65, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 68, 69, 69, 69, 70, 70, 70, 71, 71, 71, 72, 72, 72, 73, 73, 73, 74, 74, 74, 75, 75, 75, 76, 76, 76, 77, 77, 77, 78, 78, 78, 79, 79, 79, 80, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84, 85, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 89, 89, 89, 90, 90, 90, 91, 91, 91, 92, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95, 95, 96, 96, 96, 97, 97, 97, 98, 98, 98, 99, 99, 99, 100, 100, 100, 101, 101, 101, 102, 102, 102, 103, 103, 103, 104, 104, 104, 105, 105, 105, 106, 106, 106, 107, 107, 107, 108, 108, 108, 109, 109, 109, 110, 110, 110, 111, 111, 111, 112, 112, 112, 113, 113, 113, 114, 114, 114, 115, 115, 115, 116, 116, 116, 117, 117, 117, 118, 118, 118, 119, 119, 119, 120, 120, 120, 121, 121, 121, 122, 122, 122, 123, 123, 123, 124, 124, 124, 125, 125, 125, 126, 126, 126, 127, 127, 127, 128, 128, 128, 129, 129, 129, 130, 130, 130, 131, 131, 131, 132, 132, 132, 133, 133, 133, 134, 134, 134, 135, 135, 135, 136, 136, 136, 137, 137, 137, 138, 138, 138, 139, 139, 139, 140, 140, 140, 141, 141, 141, 142, 142, 142, 143, 143, 143, 144, 144, 144, 145, 145, 145, 146, 146, 146, 147, 147, 147, 148, 148, 148, 149, 149, 149, 150, 150, 150, 151, 151, 151, 152, 152, 152, 153, 153, 153, 154, 154, 154, 155, 155, 155, 156, 156, 156, 157, 157, 157, 158, 158, 158, 159, 159, 159, 160, 160, 160, 161, 161, 161, 162, 162, 162, 163, 163, 163, 164, 164, 164, 165, 165, 165, 166, 166, 166, 167, 167, 167, 168, 168, 168, 169, 169, 169, 170, 170, 170, 171, 171, 171, 172, 172, 172, 173, 173, 173, 174, 174, 174, 175, 175, 175, 176, 176, 176, 177, 177, 177, 178, 178, 178, 179, 179, 179, 180, 180, 180, 181, 181, 181, 182, 182, 182, 183, 183, 183, 184, 184, 184, 185, 185, 185, 186, 186, 186, 187, 187, 187, 188, 188, 188, 189, 189, 189, 190, 190, 190, 191, 191, 191, 192, 192, 192, 193, 193, 193, 194, 194, 194, 195, 195, 195, 196, 196, 196, 197, 197, 197, 198, 198, 198, 199, 199, 199, 200, 200, 200, 201, 201, 201, 202, 202, 202, 203, 203, 203, 204, 204, 204, 205, 205, 205, 206, 206, 206, 207, 207, 207, 208, 208, 208, 209, 209, 209, 210, 210, 210, 211, 211, 211, 212, 212, 212, 213, 213, 213, 214, 214, 214, 215, 215, 215, 216, 216, 216, 217, 217, 217, 218, 218, 218, 219, 219, 219, 220, 220, 220, 221, 221, 221, 222, 222, 222, 223, 223, 223, 224, 224, 224, 225, 225, 225, 226, 226, 226, 227, 227, 227, 228, 228, 228, 229, 229, 229, 230, 230, 230, 231, 231, 231, 232, 232, 232, 233, 233, 233, 234, 234, 234, 235, 235, 235, 236, 236, 236, 237, 237, 237, 238, 238, 238, 239, 239, 239, 240, 240, 240, 241, 241, 241, 242, 242, 242, 243, 243, 243, 244, 244, 244, 245, 245, 245, 246, 246, 246, 247, 247, 247, 248, 248, 248, 249, 249, 249, 250, 250, 250, 251, 251, 251, 252, 252, 252, 253, 253, 253, 254, 254, 254, 255, 255, 255, 256, 256, 256, 257, 257, 257, 258, 258, 258, 259, 259, 259, 260, 260, 260, 261, 261, 261, 262, 262, 262, 263, 263, 263, 264, 264, 264, 265, 265, 265, 266, 266, 266, 267, 267, 267, 268, 268, 268, 269, 269, 269, 270, 270, 270, 271, 271, 271, 272, 272, 272, 273, 273, 273, 274, 274, 274, 275, 275, 275, 276, 276, 276, 277, 277, 277, 278, 278, 278, 279, 279, 279, 280, 280, 280, 281, 281, 281, 282, 282, 282, 283, 283, 283, 284, 284, 284, 285, 285, 285, 286, 286, 286, 287, 287, 287, 288, 288, 288, 289, 289, 289, 290, 290, 290, 291, 291, 291, 292, 292, 292, 293, 293, 293, 294, 294, 294, 295, 295, 295, 296, 296, 296, 297, 297, 297, 298, 298, 298, 299, 299, 299]\n    return tetrahedral_number_list[n]\n",
        "num_ids": 1827
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(((1 + math.sqrt(1 + 24*n))/6))\n",
        "num_ids": 24
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n+1) * (n+2) // 6\n",
        "num_ids": 20
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum([x for x in range(1, n+1)])\n",
        "num_ids": 20
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)*(n+3) // 24\n    \ndef tetrahedral_number_fast(n):\n    '''\n    Write a function to find the nth tetrahedral number using the formula n(n+1)(n+2)(n+3) / 24.\n    '''\n    return (n * (n + 1) * (n + 2) * (n + 3)) // 24\n",
        "num_ids": 27
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n",
        "num_ids": 25
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n",
        "num_ids": 19
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * math.pi * r**3\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h/3\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi * r**2 * h\n    return volume\ndef volume_rectangularprism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    volume = l*w*h\n    return volume\ndef volume_triangularprism(l,w,h):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    volume = (l*w*h)/2\n    return volume\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = l**3\n    return volume\ndef volume_octahedron(r):\n    '''\n    Write a function to find the volume of an octahedron.\n    '''\n    volume = (4/3)*math.pi**2 *r**3\n    return volume\ndef volume_rhombus(r,h):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    volume = 1/2 * math.pi * r**2 * h\n    return volume\ndef volume_trapezoid(w,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    volume = w*h/2\n    return volume\ndef volume_parallelepiped(l,w,h):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    volume = l*w*h\n    return volume\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = l*w*h\n    return volume\ndef volume_pyramid(l,w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = (l*w*h)/3\n    return volume\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = l*w*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h/3\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi * r**2 * h\n    return volume\ndef volume_rectangularprism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    volume = l*w*h\n    return volume\ndef volume_triangularprism(l,w,h):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    volume = (l*w*h)/2\n    return volume\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = l**3\n    return volume\ndef volume_octahedron(r):\n    '''\n    Write a function to find the volume of an octahedron.\n    '''\n    volume = (4/3)*math.pi**2 *r**3\n    return volume\ndef volume_rhombus(r,h):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    volume = 1/2 * math.pi * r**2 * h\n    return volume\ndef volume_trapezoid(w,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    volume = w*h/2\n    return volume\ndef volume_parallelepiped(l,w,h):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    volume = l*w*h\n    return volume\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = l*w*h\n    return volume\ndef volume_pyramid(l,w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = (l*w*h)/3\n    return volume\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = l*w*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h/3\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi * r**2 * h\n    return volume\ndef volume_rectangularprism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    volume = l*w*h\n    return volume\ndef volume_triangularprism(l,w,h):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    volume = (l*w*h)/2\n    return volume\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = l**3\n    return volume\ndef volume_octahedron(r):\n    '''\n    Write a function to find the volume of an octahedron.\n    '''\n    volume = (4/3)*math.pi**2 *r**3\n    return volume\ndef volume_rhombus(r,h):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    volume = 1/2 * math.pi * r**2 * h\n    return volume\ndef volume_trapezoid(w,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    volume = w*h/2\n    return volume\ndef volume_parallelepiped(l,w,h):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    volume = l*w*h\n    return volume\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = l*w*h\n    return volume\ndef volume_pyramid(l,w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = (l*w*h)/3\n    return volume\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = l*w*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h/3\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi * r**2 * h\n    return volume\ndef volume_rectangularprism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    volume = l*w*h\n    return volume\ndef volume_triangularprism(l,w,h):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n",
        "num_ids": 20
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4/3 * math.pi * (r**3)\n    return v\n",
        "num_ids": 23
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    print(r ** 3 * math.pi / 6)\n",
        "num_ids": 16
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol\ndef main():\n    r = 5\n    print('The volume of a sphere with radius 5 is', round(volume_sphere(r),2))\n    r = 10\n    print('The volume of a sphere with radius 10 is', round(volume_sphere(r),2))\n    r = 20\n    print('The volume of a sphere with radius 20 is', round(volume_sphere(r),2))\n    r = 30\n    print('The volume of a sphere with radius 30 is', round(volume_sphere(r),2))\nmain()\n",
        "num_ids": 150
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume_sphere = (4/3) * math.pi * r **3\n    return volume_sphere\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume_cylinder = (math.pi * r **2) * h\n    return volume_cylinder\n    \ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone = ((1/3) * math.pi * r **2 * h)\n    return volume_cone\n    \ndef volume_pyramid(b, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume_pyramid = ((1/3) * b **2) * h\n    return volume_pyramid\n    \ndef volume_rectangular_prism(b, h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    volume_rectangular_prism = b*h\n    return volume_rectangular_prism\n",
        "num_ids": 25
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4 / 3) * math.pi * (r ** 3)\n    return volume\n",
        "num_ids": 25
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r=int(input(\"enter the radius of the sphere\"))\n    V=4/3*math.pi*(r**3)\n    return V",
        "num_ids": 37
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    Sum = 0\n    for i in strr:\n        Sum += ord(i)\n    return Sum%26",
        "num_ids": 28
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum=sum+ord(i)\n    return sum%26\n",
        "num_ids": 31
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    sum=0\n    for i in strr:\n        sum+=ord(i)\n    return chr(sum%26)\n",
        "num_ids": 35
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char=0\n    for i in strr:\n        char=char+ord(i)\n        char=char%26\n    print(char)\n",
        "num_ids": 38
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x = 0\n    for i in strr:\n        x += ord(i)\n    return x%26\n",
        "num_ids": 29
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for x in strr:\n        result = (result + ord(x)) % 26\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    print(sum(map(ord,strr)) % 26)\n    \ndef get_String(n):\n    '''\n    Write a python function to return the string with the number of vowels in it.\n    '''\n    vowels = 'aeiou'\n    #num = 0\n    s = ''\n    for i in range(n):\n        s += 'a'\n    print(s)\n    for i in s:\n        if i in vowels:\n            #num += 1\n            print(i)\n            \ndef get_Number(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    n = 0\n    for i in s:\n        if i.isdigit():\n            n += int(i)\n    print(n)\n    \ndef get_Number_of_Vowels(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    vowels = 'aeiou'\n    num = 0\n    for i in s:\n        if i in vowels:\n            num += 1\n    return num\n    \ndef get_Vowels(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    vowels = 'aeiou'\n    for i in s:\n        if i in vowels:\n            print(i, end ='')\n            \ndef get_Vowels_from_String(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    print(''.join([i for i in s if i in 'aeiouAEIOU']))\n    \ndef get_Vowels_from_String_by_List_Comprehensions(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    print(''.join(list(filter(lambda x: x in 'aeiouAEIOU', s))))\n    \ndef get_String_length(s):\n    '''\n    Write a python function to return the length of the string.\n    '''\n    print(len(s))\n    \ndef get_String_length_by_Function(s):\n    '''\n    Write a python function to return the length of the string.\n    '''\n    print(len(s))\n    \ndef get_Number_of_Vowels_in_String(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    num = 0\n    for i in s:\n        if i in 'aeiouAEIOU':\n            num += 1\n    print(num)\n    \ndef get_Number_of_Vowels_in_String_by_List_Comprehensions(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    print(len(list(filter(lambda x: x in 'aeiouAEIOU', s))))\n    \ndef get_Number_of_Vowels_in_String_by_Map(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    print(sum(map(lambda x: 1 if x in 'aeiouAEIOU' else 0, s)))\n    \ndef get_Number_of_Vowels_in_String_by_List_Comprehensions_and_Map(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    print(sum(map(lambda x: 1 if x in 'aeiouAEIOU' else 0, s)))\n    \ndef get_Number_of_Vowels_in_String_by_List_Comprehensions_and_Map_With_lambda(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    print(sum(map(lambda x: 1 if x in 'aeiouAEIOU' else 0, s)))\n    \ndef get_Number_of_Vowels_in_String_by_Map_With_lambda(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    print(sum(map(lambda x: 1 if x in 'aeiouAEIOU' else 0, s)))\n    \ndef get_Number_of_Vowels_in_String_by_List_Comprehensions_and_Map_with_lambda(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    print(sum(map(lambda x: 1 if x in 'aeiouAEIOU' else 0, s)))\n    \ndef get_Number_of_Vowels_in_String_by_List_Comprehensions_and_Map_with_lambda_and_Filter(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    print(sum(list(filter(lambda x: x in 'aeiouAEIOU', map(lambda x: 1 if x in 'aeiouAEIOU' else 0, s)))))\n    \ndef get_Number_of_Vowels_in_String_by_Map_with_lambda_and_Filter(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    print(sum(map(lambda x: 1 if x in 'aeiouAEIOU' else 0, s)))\n    \ndef get_Number_of_Vowels_in_String_by_List_Comprehensions_and_Map_with_lambda_and_Filter(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    print(sum(list(filter(lambda x: x in 'aeiouAEIOU', map(lambda x: 1 if x in 'aeiouAEIOU' else 0, s)))))\n    \ndef get_Number_of_Vowels_in_String_by_Map_with_lambda_and_Filter(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    print(sum(map(lambda x: 1 if x in 'aeiouAEIOU' else 0, s)))\n    \ndef get_Number_of_Vowels_in_String_by_List_Comprehensions_and_Map_with_lambda_and_Filter_with_Lambda_Comprehensions(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    print(sum(list(filter(lambda x: x in 'aeiouAEIOU', map(lambda x: 1 if x in 'aeiouAEIOU' else 0, s)))))\n    \ndef get_Number_of_Vowels_in_String_by_Map_with_lambda_and_Filter_with_Lambda_Comprehensions(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    print(sum(map(lambda x: 1 if x in 'aeiouAEIOU' else 0, s)))\n    \ndef get_Number_of_Vowels_in_String_by_List_Comprehensions_and_Map_with_lambda_and_Filter_with_Lambda_Comprehensions_with_Map(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n    print(sum(list(map(lambda x: 1 if x in 'aeiouAEIOU' else 0, filter(lambda x: x in 'aeiouAEIOU', map(lambda x: 1 if x in 'aeiouAEIOU' else 0, s))))))\n    \ndef get_Number_of_Vowels_in_String_by_Map_with_lambda_and_Filter_with_Lambda_Comprehensions_with_Map(s):\n    '''\n    Write a python function to return the sum of all the digits in the string.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in range(len(strr)):\n        result += ord(strr[i]) % 26\n    return chr(result)\n",
        "num_ids": 41
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    #code here\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return sum%26\n",
        "num_ids": 38
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    list = [ord(char) for char in strr]\n    list = sum(list) % 26\n    return chr(list)\n    \ndef get_Letter(num):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given number modulo 26.\n    '''\n    list = [ord(num) for num in num]\n    list = sum(list) % 26\n    return chr(list)\n    \ndef get_Digit(num):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given number modulo 10.\n    '''\n    list = [int(num) for num in num]\n    list = sum(list) % 10\n    return str(list)\n    \ndef get_Word(num):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given number modulo 16.\n    '''\n    list = [ord(num) for num in num]\n    list = sum(list) % 16\n    return chr(list)\n    \ndef get_Punctuation(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string.\n    '''\n    list = [ord(char) for char in strr]\n    list = sum(list)\n    return chr(list)\n    \ndef get_All(num):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given number.\n    '''\n    list = [ord(num) for num in num]\n    list = sum(list)\n    return chr(list)\n    ",
        "num_ids": 33
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    p = [0,0,1,1]\n    if n<4:\n        return p[n]\n    else:\n        for i in range(4,n+1):\n            p.append(p[i-1]+p[i-2])\n        return p[n]\n    \n    \ndef nth_newman_conway_sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n<4:\n        return n\n    else:\n        return (sequence(n-1)+sequence(n-2))\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a given input string is a palindrome.\n    '''\n    s=s.lower()\n    n=len(s)\n    mid=n//2\n    for i in range(mid):\n        if s[i]!=s[n-i-1]:\n            return False\n    return True\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a given input string is a palindrome.\n    '''\n    s=s.lower()\n    n=len(s)\n    start=0\n    end=n-1\n    while start<end:\n        if s[start]!=s[end]:\n            return False\n        start+=1\n        end-=1\n    return True\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a given input string is a palindrome.\n    '''\n    s=s.lower()\n    n=len(s)\n    return all([s[i]==s[n-i-1] for i in range(n//2)])\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a given input string is a palindrome.\n    '''\n    s=s.lower()\n    n=len(s)\n    for i in range(n//2):\n        if s[i]!=s[n-i-1]:\n            return False\n    return True\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a given input string is a palindrome.\n    '''\n    s=s.lower()\n    n=len(s)\n    r=0\n    for i in range(n):\n        if s[i]==s[n-i-1]:\n            r+=1\n    return r==n\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    if n<10:\n        return True\n    return is_palindrome(str(n))\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return n==int(str(n)[::-1])\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    if n<10:\n        return True\n    return int(str(n)[::-1])==n\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return n%10==int(str(n)[::-1])%10\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return str(n)[::-1]==str(n)\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return int(str(n)[::-1])==n\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return int(str(n)[::-1])==n\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return n==int(str(n)[::-1])\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return n==int(str(n)[::-1])\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return n==int(str(n)[::-1])\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return n==int(str(n)[::-1])\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return int(str(n)[::-1])==n\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return int(str(n)[::-1])==n\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return int(str(n)[::-1])==n\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return int(str(n)[::-1])==n\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return int(str(n)[::-1])==n\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return int(str(n)[::-1])==n\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return int(str(n)[::-1])==n\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return int(str(n)[::-1])==n\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return int(str(n)[::-1])==n\n    \n    \ndef palindrome_number(n):\n    '''\n    Write a function that checks whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    return int(str(n)[::-1])==n\n",
        "num_ids": 28
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return(sum(newman_sequence(n-i,n,{1:2,3:1})))\n",
        "num_ids": 29
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + 2*sequence(n-2)\n        \ndef main(): \n    for x in range(1,10):\n        print(sequence(x))\n    \nmain()\n",
        "num_ids": 66
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    fib = [0, 1]\n    for i in range(n-1):\n        new = fib[-1] + fib[-2]\n        fib.append(new)\n    return fib[-1]\nprint(sequence(1))\nprint(sequence(2))\nprint(sequence(3))\nprint(sequence(4))\nprint(sequence(5))\nprint(sequence(6))\nprint(sequence(7))\nprint(sequence(8))\nprint(sequence(9))\nprint(sequence(10))\nprint(sequence(11))\nprint(sequence(12))\nprint(sequence(13))\nprint(sequence(14))\nprint(sequence(15))\nprint(sequence(16))\nprint(sequence(17))\nprint(sequence(18))\nprint(sequence(19))\nprint(sequence(20))\nprint(sequence(21))\nprint(sequence(22))\nprint(sequence(23))\nprint(sequence(24))\nprint(sequence(25))\nprint(sequence(26))\nprint(sequence(27))\nprint(sequence(28))\nprint(sequence(29))\nprint(sequence(30))\nprint(sequence(31))\nprint(sequence(32))\nprint(sequence(33))\nprint(sequence(34))\nprint(sequence(35))\nprint(sequence(36))\nprint(sequence(37))\nprint(sequence(38))\nprint(sequence(39))\nprint(sequence(40))\nprint(sequence(41))\nprint(sequence(42))\nprint(sequence(43))\nprint(sequence(44))\nprint(sequence(45))\nprint(sequence(46))\nprint(sequence(47))\nprint(sequence(48))\nprint(sequence(49))\nprint(sequence(50))\nprint(sequence(51))\nprint(sequence(52))\nprint(sequence(53))\nprint(sequence(54))\nprint(sequence(55))\nprint(sequence(56))\nprint(sequence(57))\nprint(sequence(58))\nprint(sequence(59))\nprint(sequence(60))\nprint(sequence(61))\nprint(sequence(62))\nprint(sequence(63))\nprint(sequence(64))\nprint(sequence(65))\nprint(sequence(66))\nprint(sequence(67))\nprint(sequence(68))\nprint(sequence(69))\nprint(sequence(70))\nprint(sequence(71))\nprint(sequence(72))\nprint(sequence(73))\nprint(sequence(74))\nprint(sequence(75))\nprint(sequence(76))\nprint(sequence(77))\nprint(sequence(78))\nprint(sequence(79))\nprint(sequence(80))\nprint(sequence(81))\nprint(sequence(82))\nprint(sequence(83))\nprint(sequence(84))\nprint(sequence(85))\nprint(sequence(86))\nprint(sequence(87))\nprint(sequence(88))\nprint(sequence(89))\nprint(sequence(90))\nprint(sequence(91))\nprint(sequence(92))\nprint(sequence(93))\nprint(sequence(94))\nprint(sequence(95))\nprint(sequence(96))\nprint(sequence(97))\nprint(sequence(98))\nprint(sequence(99))\nprint(sequence(100))\nprint(sequence(101))\nprint(sequence(102))\nprint(sequence(103))\nprint(sequence(104))\nprint(sequence(105))\nprint(sequence(106))\nprint(sequence(107))\nprint(sequence(108))\nprint(sequence(109))\nprint(sequence(110))\nprint(sequence(111))\nprint(sequence(112))\nprint(sequence(113))\nprint(sequence(114))\nprint(sequence(115))\nprint(sequence(116))\nprint(sequence(117))\nprint(sequence(118))\nprint(sequence(119))\nprint(sequence(120))\nprint(sequence(121))\nprint(sequence(122))\nprint(sequence(123))\nprint(sequence(124))\nprint(sequence(125))\nprint(sequence(126))\nprint(sequence(127))\nprint(sequence(128))\nprint(sequence(129))\nprint(sequence(130))\nprint(sequence(131))\nprint(sequence(132))\nprint(sequence(133))\nprint(sequence(134))\nprint(sequence(135))\nprint(sequence(136))\nprint(sequence(137))\nprint(sequence(138))\nprint(sequence(139))\nprint(sequence(140))\nprint(sequence(141))\nprint(sequence(142))\nprint(sequence(143))\nprint(sequence(144))\nprint(sequence(145))\nprint(sequence(146))\nprint(sequence(147))\nprint(sequence(148))\nprint(sequence(149))\nprint(sequence(150))\nprint(sequence(151))\nprint(sequence(152))\nprint(sequence(153))\nprint(sequence(154))\nprint(sequence(155))\nprint(sequence(156))\nprint(sequence(157))\nprint(sequence(158))\nprint(sequence(159))\nprint(sequence(160))\nprint(sequence(161))\nprint(sequence(162))\nprint(sequence(163))\nprint(sequence(164))\nprint(sequence(165))\nprint(sequence(166))\nprint(sequence(167))\nprint(sequence(168))\nprint(sequence(169))\nprint(sequence(170))\nprint(sequence(171))\nprint(sequence(172))\nprint(sequence(173))\nprint(sequence(174))\nprint(sequence(175))\nprint(sequence(176))\nprint(sequence(177))\nprint(sequence(178))\nprint(sequence(179))\nprint(sequence(180))\nprint(sequence(181))\nprint(sequence(182))\nprint(sequence(183))\nprint(sequence(184))\nprint(sequence(185))\nprint(sequence(186))\nprint(sequence(187))\nprint(sequence(188))\nprint(sequence(189))\nprint(sequence(190))\nprint(sequence(191))\nprint(sequence(192))\nprint(sequence(193))\nprint(sequence(194))\nprint(sequence(195))\nprint(sequence(196))\nprint(sequence(197))\nprint(sequence(198))\nprint(sequence(199))\nprint(sequence(200))\nprint(sequence(201))\nprint(sequence(202))\nprint(sequence(203))\nprint(sequence(204))\nprint(sequence(205))\nprint(sequence(206))\nprint(sequence(207))\nprint(sequence(208))\nprint(sequence(209))\nprint(sequence(210))\nprint(sequence(211))\nprint(sequence(212))\nprint(sequence(213))\nprint(sequence(214))\nprint(sequence(215))\nprint(sequence(216))\nprint(sequence(217))\nprint(sequence(218))\nprint(sequence(219))\nprint(sequence(220))\nprint(sequence(221))\nprint(sequence(222))\nprint(sequence(223))\nprint(sequence(224))\nprint(sequence(225))\nprint(sequence(226))\nprint(sequence(227))\nprint(sequence(228))\nprint(sequence(229))\nprint(sequence(230))\nprint(sequence(231))\nprint(sequence(232))\nprint(sequence(233))\nprint(sequence(234))\nprint(sequence(235))\nprint(sequence(236))\nprint(sequence(237))\nprint(sequence(238))\nprint(sequence(239))\nprint(sequence(240))\nprint(sequence(241))\nprint(sequence(242))\nprint(sequence(243))\nprint(sequence(244))\nprint(sequence(245))\nprint(sequence(246))\nprint(sequence(247))\nprint(sequence(248))\nprint(sequence(249))\nprint(sequence(250))\nprint(sequence(251))\nprint(sequence(252))\nprint(sequence(253))\nprint(sequence(254))\nprint(sequence(255))\nprint(sequence(256))\nprint(sequence(257))\nprint(sequence(258))\nprint(sequence(259))\nprint(sequence(260))\nprint(sequence(261))\nprint(sequence(262))\nprint(sequence(263))\nprint(sequence(264))\nprint(sequence(265))\nprint(sequence(266))\nprint(sequence(267))\nprint(sequence(268))\nprint(sequence(269))\nprint(sequence(270))\nprint(sequence(271))\nprint(sequence(272))\nprint(sequence(273))\nprint(sequence(274))\nprint(sequence(275))\nprint(sequence(276))\nprint(sequence(277))\nprint(sequence(278))\nprint(sequence(279))\nprint(sequence(280))\nprin",
        "num_ids": 2017
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # add the starting numbers\n    l = [0,1]\n    # all of the odd terms\n    for i in range(3, 2*n, 2):\n        l.append(l[i-2] + l[i-1])\n    return l[n]\n",
        "num_ids": 67
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return sequence(n-1)+sequence(n-2)\n    \ndef palindromes(s):\n    '''\n    Write a function to compute all the palindromes of the input string.\n    '''\n    if len(s)==0:\n        return []\n    else:\n        return palindromes(s[1:])+[s[0]+i for i in palindromes(s[1:]) if s[0]==i[0]]\n    \ndef multiplication_table(n):\n    '''\n    Write a function to create a multiplication table for numbers 1 through n.\n    '''\n    if n==1:\n        return [1]\n    else:\n        return [j*i for i in multiplication_table(n-1) for j in range(1,n+1)]\n",
        "num_ids": 48
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def n_in_sequence(n): \n        if n == 0: \n            return 1\n        elif n == 1: \n            return 2\n        else: \n            return sequence(n-1) + sequence(n-2)\n    return n_in_sequence(n)\n",
        "num_ids": 71
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return [0]\n    elif n == 2:\n        return [0,1]\n    else:\n        return [0,1] + sequence(n-1) + [sum(sequence(n-2))]\n",
        "num_ids": 61
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 33
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    count = 0\n    num = 0\n    \n    #initial conditions\n    ones = 1\n    tens = 2\n    \n    while count!= n:\n        num = ones + tens\n        \n        #two new rules to add\n        if num%2 == 0:\n            tens = num\n            ones = num\n        else:\n            tens = num\n            ones = num + 1\n        \n        count += 1\n    \n    return num\n",
        "num_ids": 107
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*(r*r)\n    return area\ndef surfacearea_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    area = 6*r*r\n    return area\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*math.pi*r*r + 2*math.pi*r*h\n    return area\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area = math.pi*r*r + math.pi*r*h\n    return area\ndef surfacearea_cone_slant(r,h):\n    '''\n    Write a function to find the surface area of a cone with a slanted base.\n    '''\n    area = math.pi*r*r + math.pi*r*h*0.5\n    return area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*(r*r*r)\n    return volume\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = r*r*r\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 1/3*math.pi*r*r*h\n    return volume\ndef volume_cone_slant(r,h):\n    '''\n    Write a function to find the volume of a cone with a slanted base.\n    '''\n    volume = 1/3*math.pi*r*r*h\n    return volume\ndef volume_cone_slanted_taper(r1,r2,h):\n    '''\n    Write a function to find the volume of a cone with a slanted base.\n    '''\n    volume = 1/3*math.pi*r1*r1*h + 1/3*math.pi*r1*r2*h\n    return volume\ndef volume_sphere_cone(r1,r2,h):\n    '''\n    Write a function to find the volume of a cone with a slanted base.\n    '''\n    volume = 1/3*math.pi*r1*r1*h + 1/3*math.pi*r1*r2*h\n    return volume\ndef volume_sphere_cube(r):\n    '''\n    Write a function to find the volume of a cube with a slanted base.\n    '''\n    volume = 1/6*math.pi*(r*r)**2\n    return volume\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cube with a slanted base.\n    '''\n    volume = 1/3*math.pi*(r*r)**2 + 1/2*math.pi*r*h\n    return volume\ndef area_of_parallelogram(base,height):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = base*height\n    return area\ndef area_of_triangle(base,height):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = base*height\n    return area\ndef area_of_trapezium(side1,side2,height):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    area = (side1+side2)*height/2\n    return area\ndef area_of_rhombus(d1,d2):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    area = 1/2*d1*d2\n    return area\ndef area_of_square(side):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = side*side\n    return area\ndef area_of_rectangle(length,width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length*width\n    return area\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = math.pi*(r*r)\n    return area\ndef area_of_ellipse(r1,r2):\n    '''\n    Write a function to find the area of an ellipse.\n    '''\n    area = math.pi*r1*r2\n    return area\ndef area_of_sector(r,angle):\n    '''\n    Write a function to find the area of a sector.\n    '''\n    area = 1/2*(r*r)*angle\n    return area\ndef area_of_triangle_with_three_sides(a,b,c):\n    '''\n    Write a function to find the area of a triangle with three sides.\n    '''\n    s = (a+b+c)/2\n    area = (s*(s-a)*(s-b)*(s-c))**0.5\n    return area\ndef area_of_triangle_with_sides(side1,side2,side3):\n    '''\n    Write a function to find the area of a triangle with three sides.\n    '''\n    s = (side1+side2+side3)/2\n    area = (s*(s-side1)*(s-side2)*(s-side3))**0.5\n    return area\ndef area_of_rectangular_prism_with_all_sides(s1,s2,s3,s4,s5,s6):\n    '''\n    Write a function to find the area of a rectangular prism with all six sides.\n    '''\n    area = 2*s1*s2 + 2*s2*s3 + 2*s3*s4 + 2*s4*s5 + 2*s5*s6 + 2*s6*s1\n    return area\ndef area_of_rectangular_prism_with_all_sides_including_diagonal(s1,s2,s3,s4,s5,s6):\n    '''\n    Write a function to find the area of a rectangular prism with all six sides.\n    '''\n    area = s1*s2 + s1*s3 + s1*s4 + s2*s3 + s2*s4 + s3*s4 + s1*s5 + s2*s5 + s3*s5 + s4*s5 + s1*s6 + s2*s6 + s3*s6 + s4*s6\n    return area\ndef area_of_rectangular_prism(side1,side2,side3):\n    '''\n    Write a function to find the area of a rectangular prism.\n    '''\n    area = side1*side2 + side1*side3 + side2*side3\n    return area\ndef area_of_parallelogram_with_all_sides(side1,side2,side3,side4):\n    '''\n    Write a function to find the area of a parallelogram with all four sides.\n    '''\n    area = side1*side2 + side2*side3 + side3*side4 + side4*side1\n    return area\ndef area_of_parallelogram_with_all_sides_including_diagonal(side1,side2,side3,side4):\n    '''\n    Write a function to find the area of a parallelogram with all four sides.\n    '''\n    area = side1*side2 + side2*side3 + side3*side4 + side4*side1\n    return area\ndef area_of_parallelogram_with_two_sides(side1,side2):\n    '''\n    Write a function to find the area of a parallelogram with two sides.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    print(\"Surface Area of sphere:\",4*math.pi*r**2)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    print(\"Volume of sphere:\",4/3*math.pi*r**3)\n    \ndef volume_cube(side):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    print(\"Volume of cube:\",side**3)\n    \ndef surfacearea_cube(side):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    print(\"Surface Area of cube:\",6*side**2)\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4 * math.pi * r ** 2\n    return surfacearea\n",
        "num_ids": 21
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r*r\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r * r)\n",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4 * math.pi * r * r\n    return surfacearea\n",
        "num_ids": 21
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4*math.pi*(r**2)\n    return sa\n",
        "num_ids": 21
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area\n",
        "num_ids": 23
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (2 * n - 1)\n",
        "num_ids": 29
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return(2*n-1)**2+(4*n**2-3*n+2)\n",
        "num_ids": 27
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if not isinstance(n, int) or n < 1:\n        raise ValueError('Input must be positive integer.')\n    \n    import math\n    \n    return int(math.sqrt(n + 1) * ((3 * n) + 1) / 2)\n    \nif __name__ == '__main__':\n    import sys\n    \n    if len(sys.argv) < 2:\n        print('No input file provided.')\n    else:\n        with open(sys.argv[1]) as f:\n            for line in f:\n                if len(line.strip()) > 0:\n                    print(centered_hexagonal_number(int(line.strip()))",
        "num_ids": 162
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def gcd(a, b):\n        '''\n        Return greatest common divisor of a and b.\n        '''\n        while b!= 0:\n            a, b = b, a % b\n        return a\n",
        "num_ids": 25
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    s = str(centered_hexagonal(n))\n    return int(s)\n    \ndef hexagonal_number(n):\n    '''\n    Write a function to find nth hexagonal number.\n    '''\n    s = str(hexagonal(n))\n    return int(s)\n    \ndef centered_hexagonal(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n    \ndef hexagonal(n):\n    '''\n    Write a function to find nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n    \ndef centered_hexagonal_number_solution(n):\n    return hexagonal_number(n) - centered_hexagonal(n)\n    \ndef hexagonal_number_solution(n):\n    return hexagonal_number(n) - (3 * n * n - n) // 2\n    \nif __name__ == \"__main__\":\n    print(centered_hexagonal_number(7))\n    print(hexagonal_number(7))\n    print(centered_hexagonal_number(7) == hexagonal_number(7))\n    print(centered_hexagonal_number_solution(7))\n    print(hexagonal_number_solution(7))\n    print(centered_hexagonal_number_solution(7) == hexagonal_number_solution(7))",
        "num_ids": 198
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def f(x, y):\n        '''\n        Return nth hexagonal number.\n        '''\n        return x * x * 3 + y * y * 2 + (x + y) * (x + y) + x\n    return f\n",
        "num_ids": 34
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0: return 'a'\n    i, j = 1, 1\n    while n > 0:\n        i, j = i+j, i\n        n -= 1\n    return i\n",
        "num_ids": 49
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # 1 + 2^0 = 3, 2 + 2^1 = 5, 3 + 2^2 = 7, 4 + 2^3 = 9, etc.\n    # base = 6\n    # exponent = 2\n",
        "num_ids": 51
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # dict1 = {'A': 1, 'B': 2}\n    # dict2 = {'C': 3, 'D': 4}\n    # dict3 = {'E': 5, 'F': 6}\n",
        "num_ids": 53
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict(dict1, **dict2)\n    for key, value in dict3.items():\n        if key in merged_dict:\n            merged_dict[key] = value\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict\n",
        "num_ids": 75
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key,value in dict1.items():\n        if key in dict2.keys():\n            if key in dict3.keys():\n                dict2[key] = [dict2[key], dict3[key]]\n            else:\n                dict2[key] = [value,dict2[key]]\n        else:\n            if key in dict3.keys():\n                dict2[key] = [dict3[key],]\n            else:\n                dict2[key] = [value,]\n    return dict2\n",
        "num_ids": 123
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key, value in dict2.items():\n        if key in dict1:\n            dict1[key].append(value)\n        else:\n            dict1[key] = [value]\n    for key, value in dict3.items():\n        if key in dict2:\n            dict2[key].append(value)\n        else:\n            dict2[key] = [value]\n    for key, value in dict3.items():\n        if key in dict1:\n            dict1[key].append(value)\n        else:\n            dict1[key] = [value]\n    return dict1\n",
        "num_ids": 145
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merge = {}\n    for d in (dict1, dict2, dict3):\n        dict_merge.update(d)\n    return dict_merge\n",
        "num_ids": 43
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #Initialize a blank dictionary\n    merged_dict = {}\n    #Populate the merged_dict with the values from dict1\n    merged_dict.update(dict1)\n    #Populate the merged_dict with the values from dict2\n    merged_dict.update(dict2)\n    #Populate the merged_dict with the values from dict3\n    merged_dict.update(dict3)\n    #Return the merged_dict\n    return merged_dict\n",
        "num_ids": 113
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if dict1 == {} and dict2 == {} and dict3 == {}:\n        return {}\n    elif dict1 == {} and dict2 == {}:\n        return dict3\n    elif dict1 == {} and dict3 == {}:\n        return dict2\n    elif dict2 == {} and dict3 == {}:\n        return dict1\n    elif dict1 == {}:\n        return dict3\n    elif dict2 == {}:\n        return dict1\n    elif dict3 == {}:\n        return dict2\n    else:\n        return dict1.copy()\n        return dict2.copy()\n        return dict3.copy()\n",
        "num_ids": 151
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # for d in dict1, dict2, dict3:\n    #     if type(d) == dict:\n    #         pass\n    #     else:\n    #         raise TypeError\n",
        "num_ids": 47
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    dict1.update(dict1)\n    print(dict1)\n",
        "num_ids": 39
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return {i:list1.count(i) for i in list1}\n",
        "num_ids": 21
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for num in list1:\n        if num not in freq_dict:\n            freq_dict[num] = 1\n        else:\n            freq_dict[num] += 1\n    print(freq_dict)\n",
        "num_ids": 64
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i not in freq_dict:\n            freq_dict[i] = list1.count(i)\n    return freq_dict\n",
        "num_ids": 53
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for x in list1:\n        freq[x] = freq.get(x,0) + 1\n    return freq\n",
        "num_ids": 40
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n",
        "num_ids": 12
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for x in list1:\n        freq[x] += 1\n    return freq\n",
        "num_ids": 36
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Implement your code here\n    dict1=collections.Counter(list1)\n    return dict1\n",
        "num_ids": 27
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    print(freq)\n",
        "num_ids": 21
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list_freq = {}\n    for i in list1:\n        if i not in list_freq:\n            list_freq[i] = 1\n        else:\n            list_freq[i] += 1\n    return list_freq\n",
        "num_ids": 62
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = dict()\n    for item in list1:\n        if(item in counts):\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    return counts\n",
        "num_ids": 51
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    print(N, max(set(range(1, N+1)) - set(sorted(list(range(1, N+1))[:N-1]))))\n",
        "num_ids": 43
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = abs(int(N))\n    a = 0\n    b = 1\n    while abs(b - a) > 1:\n        c = (a + b) // 2\n        if c > n:\n            b = c\n        else:\n            a = c\n    return a * (-1 if N < 0 else 1)\n",
        "num_ids": 80
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    N=int(N)\n    current=N-1\n    while current>0:\n        current=current-1\n    return current\n",
        "num_ids": 35
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    count = 0\n    smallest = None\n    for i in range(N, -1, -1):\n        if count == 0:\n            smallest = i\n        if i - 1 >= 0:\n            if abs(i - N) < abs(i - (i - 1)):\n                count += 1\n            else:\n                count -= 1\n    return smallest\n",
        "num_ids": 88
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # a=N-1\n    # print(a)\n    # while N%a!=0:\n    #     print(N%a,a)\n    #     a-=1\n    # print(a)\n    # return a\n    l=0\n    r=N\n    while l<=r:\n        mid=(l+r)//2\n        if mid<N and N%mid==0:\n            return mid\n        elif mid>N:\n            r=mid\n        else:\n            l=mid\n            \nprint(closest_num(17)",
        "num_ids": 139
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def is_smaller(n, m):\n        return (n < m) and (n!= m)\n",
        "num_ids": 29
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    list = [1,2,3,4,5,6,7,8,9]\n    for i in list:\n        if i>N:\n            return i\n            break\n",
        "num_ids": 46
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 2\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 2\n",
        "num_ids": 37
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 3:\n        return 2\n    prev = closest_num(N-1)\n    next = closest_num(N+1)\n    return next if abs(next-N) < abs(prev - N) else prev\n",
        "num_ids": 57
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    d = 1\n    while(True):\n        if N - d == N // 2:\n            return N - d\n        elif N - d < N // 2:\n            return N - d\n        d += 1\n",
        "num_ids": 53
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_len = 0\n    for i in list1:\n        if len(i) > longest_len:\n            longest_len = len(i)\n    print(f'The longest word has {longest_len} letters')\n    return longest_len\n",
        "num_ids": 65
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list=[]\n    for i in list1:\n        len_list.append(len(i))\n    return(len_list)\n    \ndef len_list(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list=[]\n    for i in list1:\n        len_list.append(len(i))\n    return(len_list)\n",
        "num_ids": 37
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l=[]\n    for word in list1:\n        l.append(len(word))\n    return(max(l))\n    ",
        "num_ids": 34
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l = []\n    for i in list1:\n        l.append(len(i))\n    return max(l)\n",
        "num_ids": 32
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for word in list1:\n        if(len(word) > max):\n            max = len(word)\n    return max\n",
        "num_ids": 38
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    # initialize variable to hold the longest word and its length\n    longest = ''\n    length = 0\n    # loop through each word in the list\n    for word in list1:\n        # if the length of the current word is greater than the current length\n        if len(word) > length:\n            # update the longest word and its length\n            longest = word\n            length = len(word)\n    # return the longest word and its length\n    return longest, length\n    ",
        "num_ids": 113
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n",
        "num_ids": 16
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(list1, key=len)\n",
        "num_ids": 14
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1=list(list1)\n    return(max(list1,key=len))\n",
        "num_ids": 25
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_len = []\n    for word in list1:\n        word_len.append((len(word), word))\n    word_len.sort()\n    return word_len[-1][0], word_len[-1][1]\n",
        "num_ids": 60
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # str_list = ['string1','string2','string3','string4','string5']\n    # sub_str ='str'\n",
        "num_ids": 35
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for item in str1:\n        if sub_str in item:\n            count += 1\n            print(\"Yes\", sub_str, \"is present in\", item)\n        else:\n            print(\"No\", sub_str, \"is not present in\", item)\n    print(\"Total count of\", sub_str, \"is\", count)\n",
        "num_ids": 85
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = [s for s in str1 if sub_str in s]\n    if result:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "num_ids": 41
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    flag = False\n    if str1.find(sub_str)!= -1:\n        flag = True\n    return flag\n",
        "num_ids": 32
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word in sub_str:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not str1 or not sub_str:\n        return False\n    elif sub_str in str1:\n        return True\n    elif sub_str in str1[0:len(sub_str)]:\n        return True\n    else:\n        for i in range(len(str1)):\n            if str1[i:i+len(sub_str)] == sub_str:\n                return True\n    return False\n    \ndef to_pig_latin(str):\n    '''\n    Write a function to convert a string to pig latin.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if str[0] in vowels:\n        return str + 'way'\n    else:\n        for i in range(len(str)):\n            if str[i] in vowels:\n                return str[i:] + str[:i] + 'ay'\n    return str\n    \ndef to_unicode(str):\n    '''\n    Write a function to convert a string to unicode.\n    '''\n    unicode_dict = {'a':'\\u0621', 'b':'\\u0622', 'c':'\\u0623', 'd':'\\u0624', 'e':'\\u0625', 'f':'\\u0626', 'g':'\\u0627', 'h':'\\u0628', 'i':'\\u0629', 'j':'\\u062a', 'k':'\\u062b', 'l':'\\u062c','m':'\\u062d', 'n':'\\u062e', 'o':'\\u062f', 'p':'\\u0630', 'q':'\\u0631', 'r':'\\u0632','s':'\\u0633', 't':'\\u0634', 'u':'\\u0635', 'v':'\\u0636', 'w':'\\u0637', 'x':'\\u0638', 'y':'\\u0639', 'z':'\\u063a'}\n    if str[0].lower() in unicode_dict.keys():\n        return unicode_dict[str[0].lower()] + str[1:]\n    else:\n        return str\n    \ndef unique_in_order(iterable):\n    '''\n    Write a function to return the unique elements of a list while maintaining their order.\n    '''\n    if not iterable:\n        return []\n    elif len(iterable) == 1:\n        return iterable\n    elif iterable[0] == iterable[1]:\n        return unique_in_order(iterable[1:])\n    else:\n        return [iterable[0]] + unique_in_order(iterable[1:])\n        \ndef find_first_unique_char(str):\n    '''\n    Write a function to find the first unique character in a string.\n    '''\n    if not str:\n        return -1\n    elif len(str) == 1:\n        return str\n    else:\n        for i in range(len(str)):\n            if str[i] not in str[:i]:\n                return str[i]\n    return -1\n",
        "num_ids": 70
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Initialize dictionary for result\n    dic = {}\n",
        "num_ids": 16
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return \"String Found\"\n    else:\n        return \"String Not Found\"\n",
        "num_ids": 31
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    lst = []\n    for i in range(len(str1)-len(sub_str)+1):\n        if sub_str in str1[i:i+len(sub_str)]:\n            lst.append(sub_str)\n    return lst\n",
        "num_ids": 65
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    x=str(n)\n    lst=[]\n    for i in x:\n        lst.append(i)\n    lst.sort()\n    if lst[0]!=lst[1] and lst[1]!=lst[2] and lst[2]!=lst[3]:\n        return True\n    else:\n        return False\n",
        "num_ids": 92
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return any([abs(i) > 1 for i in str(n)])\n",
        "num_ids": 21
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return str(n) == str(n)[::-1]\n",
        "num_ids": 18
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    n = [int(i) for i in n]\n    sum_of_odd_numbers = 0\n    sum_of_even_numbers = 0\n    for i in n:\n        if n.index(i) % 2 == 0:\n            sum_of_even_numbers += i\n        else:\n            sum_of_odd_numbers += i\n    if sum_of_odd_numbers == sum_of_even_numbers:\n        return True\n    else:\n        return False\n        ",
        "num_ids": 131
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    a = int(str(n)[0])\n    b = int(str(n)[1])\n    if (a - b == b - a):\n        return True\n    else:\n        return False\nn = int(input())\nprint(is_undulating(n)",
        "num_ids": 66
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Converting number into a list \n    digits = [int(i) for i in str(n)] \n",
        "num_ids": 30
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n % 2 == 0): \n        return False\n    sum1 = 0\n    temp = n \n    while(temp): \n        sum1 += temp % 10\n        temp //= 10\n    return (sum1 % 2 == 1) \n",
        "num_ids": 62
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n & (n >> 1) == 0) & (n & (n >> 2) == 0)\n",
        "num_ids": 28
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    #Code here\n    n1 = n * n\n    n2 = n1 + n\n    return(n1 == n2)\n",
        "num_ids": 34
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b%2 == 0:\n        return power(a,b//2)**2\n    else:\n        return power(a,b//2)**2 * a\n",
        "num_ids": 67
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b % 2 == 0:\n        return power(a,b//2) * power(a,b//2)\n    else:\n        return a * power(a,b//2) * power(a,b//2)\n    \ndef print_num(n):\n    '''\n    Print number in reverse order.\n    '''\n    if n == 0:\n        return\n    print_num(n//10)\n    print(n % 10, end='')\n    \ndef print_num_reverse(n):\n    '''\n    Print number in reverse order.\n    '''\n    if n == 0:\n        return\n    print(n % 10, end='')\n    print_num_reverse(n//10)\n    \ndef prime_factors(n):\n    '''\n    Print prime factors of a number.\n    '''\n    while n % 2 == 0:\n        print(2, end = '')\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            print(i, end = '')\n            n //= i\n    if n > 2:\n        print(n)\n        \ndef factorial(n):\n    '''\n    Find factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef factorial_r(n):\n    '''\n    Find factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_r(n-1)\n        \ndef fibonacci(n):\n    '''\n    Fibonacci numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \ndef fibonacci_r(n):\n    '''\n    Fibonacci numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_r(n-1) + fibonacci_r(n-2)\n        \ndef reverse(n):\n    '''\n    Reverse a number.\n    '''\n    reverse_num = 0\n    while n > 0:\n        remainder = n % 10\n        reverse_num = reverse_num * 10 + remainder\n        n //= 10\n    return reverse_num\n    \ndef is_palindrome(n):\n    '''\n    Check if a number is a palindrome.\n    '''\n    return str(n) == str(reverse(n))\n        \ndef sum_of_digits(n):\n    '''\n    Sum of digits of a number.\n    '''\n    if n < 10:\n        return n\n    return (n % 10) + sum_of_digits(n//10)\n        \ndef main():\n    '''\n    Main Function\n    '''\n    print('a) Print a number in reverse order')\n    print('-----------------------')\n    print_num(987654321)\n    print('\\n')\n    \n    print('b) Print a number in reverse order')\n    print('---------------------------')\n    print_num_reverse(987654321)\n    print('\\n')\n    \n    print('c) Find prime factors of a number')\n    print('---------------------------')\n    prime_factors(5432)\n    print('\\n')\n    \n    print('d) Find factorial of a number')\n    print('---------------------------')\n    print(factorial(6))\n    print(factorial_r(6))\n    print('\\n')\n    \n    print('e) Find fibonacci of a number')\n    print('---------------------------')\n    print(fibonacci(5))\n    print(fibonacci_r(5))\n    print('\\n')\n    \n    print('f) Check if a number is palindrome')\n    print('---------------------------')\n    print(is_palindrome(12))\n    print(is_palindrome(121))\n    print(is_palindrome(988234444))\n    print('\\n')\n    \n    print('g) Sum of digits of a number')\n    print('---------------------------')\n    print(sum_of_digits(12))\n    print(sum_of_digits(100))\n    print(sum_of_digits(987654321))\n    print('\\n')\n    \n    print('h) Find the sum of digits of a number')\n    print('---------------------------------')\n    print(sum_of_digits_r(12))\n    print(sum_of_digits_r(100))\n    print(sum_of_digits_r(987654321))\n    print('\\n')\n",
        "num_ids": 445
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 1:\n        return a\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b == 1:\n        return a\n    elif b % 2 == 0:\n        return power(a,b//2) ** 2\n    elif b % 2 == 1:\n        return a * power(a,b//2) ** 2\n",
        "num_ids": 85
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(a==0):\n        return 0\n    elif(b==1):\n        return a\n    elif(b==0):\n        return 1\n    elif(a==1):\n        return a\n    elif(b==-1):\n        return 1/a\n    else:\n        return a*power(a,b-1)\na=int(input(\"Enter a value:\"))\nb=int(input(\"Enter the power to raise a to:\"))\nprint(power(a,b))\n",
        "num_ids": 123
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    assert(a>=0 and b>=0),'a and b should be non-negative'\n    if b==0:\n        return 1\n    elif a==0:\n        return 0\n    elif b==1:\n        return a\n    elif b==2:\n        return a*a\n    elif b%2==0:\n        return power(a*a,b//2)\n    elif b%2==1:\n        return a*power(a*a,b//2)\n    \ndef isprime(n):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a == 0:\n        return 0\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b % 2 == 1:\n        return a * power(a, b-1)\n    if b % 2 == 0:\n        return power(a, b//2) * power(a, b//2)\n    \nprint(power(2,3))\nprint(power(3,3))\nprint(power(2,-3))\nprint(power(0,2))\nprint(power(2,0))\nprint(power(0,0))\n",
        "num_ids": 142
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a==0 or a==1:\n        return a\n    if b==0:\n        return 1\n    if a==0 and b==0:\n        return False\n    if b==1:\n        return a\n    if a<0 and b%2==0:\n        return power(abs(a),b)\n    if a<0 and b%2!=0:\n        return power(abs(a),b)*-1\n    return a*power(a,b-1)\n",
        "num_ids": 118
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0][1]\n    result = test_list[0][0]\n    for x in test_list:\n        if x[1] < minimum:\n            minimum = x[1]\n            result = x[0]\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_of_min = 0\n    for i, v in enumerate(test_list):\n        if v[1] < test_list[index_of_min][1]:\n            index_of_min = i\n    return index_of_min\n",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]\n",
        "num_ids": 24
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = 0\n    for i in range(1,len(test_list)):\n        if test_list[i][1] < test_list[index_min][1]:\n            index_min = i\n    return index_min\n",
        "num_ids": 60
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]\n",
        "num_ids": 24
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #sorted_list = sorted(test_list, key=lambda x: x[1])\n    #return sorted_list[0][0]\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 57
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #lengths = [len(i) for i in lst]\n    #return min(lengths)\n    return len(min(lst,key=len))\n",
        "num_ids": 42
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #print(\"This is a list of lists: \", lst)\n    #import pdb; pdb.set_trace()\n    if(len(lst)>=0):\n        min_length = len(lst[0])\n        for l in lst:\n            if(len(l) < min_length):\n                min_length = len(l)\n        return min_length\n    else:\n        return 0\n",
        "num_ids": 103
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    a=lst[0]\n    for i in lst:\n        if len(i)<len(a):\n            a=i\n    return len(a)\n",
        "num_ids": 43
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n",
        "num_ids": 64
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst == []:\n        return 0\n    else:\n        return Find_Min_Length([item for item in lst if isinstance(item, list)]) + 1 + len(lst[0])\n",
        "num_ids": 52
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = []\n    for i in range(len(lst)):\n        length.append(len(lst[i]))\n    print(length)\n    \n    min_len = min(length)\n    min_index = length.index(min_len)\n    print(min_index)\n    \n    return min_index\n",
        "num_ids": 82
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(i) for i in lst])\n",
        "num_ids": 17
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n    return min_length\n",
        "num_ids": 45
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n",
        "num_ids": 51
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_length = []\n    for i in lst:\n        lst_length.append(len(i))\n    return(min(lst_length))\n",
        "num_ids": 42
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    if (n<0):\n        raise Exception(\"Inputs should be positive numbers.\")\n    elif (n==0):\n        return 1\n    else:\n        divisor = 1\n        for i in range(2,n//2+1):\n            if (n%i==0):\n                divisor += 1\n        return divisor\n        \nprint(divisor(10))\n",
        "num_ids": 97
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return len([x for x in range(1, n+1) if n % x == 0])\n",
        "num_ids": 26
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            divisors=divisors+1\n    return divisors\n",
        "num_ids": 49
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    return count * 2\n",
        "num_ids": 48
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n):\n        if n%i == 0:\n            count = count + 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n",
        "num_ids": 48
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    c=0\n    for i in range(1,n+1):\n        if n%i==0:\n            c+=1\n    return c\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return len([x for x in range(1,n+1) if n%x==0])\n",
        "num_ids": 26
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        frequency_dict[item] = list1.count(item)\n    return frequency_dict\n",
        "num_ids": 39
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n",
        "num_ids": 51
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for elem in list1:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq\n",
        "num_ids": 55
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n",
        "num_ids": 51
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize empty dictionary to store the counts\n    frequency_dict = {}\n",
        "num_ids": 19
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result = {}\n    for i in list1:\n        if type(i) is list:\n            for j in i:\n                if j in result:\n                    result[j] += 1\n                else:\n                    result[j] = 1\n        elif i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n",
        "num_ids": 91
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result = {}\n    for i in list1:\n        result[i] = result.get(i, 0) + 1\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for element in list1:\n        frequency[element] = frequency.get(element, 0) + 1\n    return frequency\n",
        "num_ids": 36
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n    ",
        "num_ids": 62
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        freq[element] = list1.count(element)\n    return freq\n",
        "num_ids": 36
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 1\n    for num in numbers:\n        sum = sum * num\n    return sum/len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result / len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    #Multiply all the numbers in the list and divide it with the length of the list\n    return reduce(lambda x,y: x*y, numbers) / len(numbers)\n",
        "num_ids": 45
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for i in numbers:\n        product *= i\n    return product / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    length = len(numbers)\n    for number in numbers:\n        product = product * number\n    return product / length\n    \n    \n    \ndef count_vowels(input_string):\n    '''\n    Write a function to count all the vowels in a given string.\n    '''\n    vowel_count = 0\n    for character in input_string:\n        if character in VOWELS:\n            vowel_count = vowel_count + 1\n    return vowel_count\n    \n    \n    \ndef find_symbol(input_string, symbol):\n    '''\n    Write a function to return the index of the symbol in the string if present and -1 if not.\n    '''\n    return input_string.find(symbol)\n    \n    \n    \ndef find_all_symbols(input_string, symbol):\n    '''\n    Write a function to return the indexes of all occurrences of the symbol in the string.\n    '''\n    return [index for index, char in enumerate(input_string) if char == symbol]\n    \n    \n    \ndef find_all_numbers(input_string):\n    '''\n    Write a function to return all the numbers in a given string.\n    '''\n    return [int(word) for word in input_string.split() if word.isdigit()]\n    \n    \n    \ndef find_all_characters(input_string, character):\n    '''\n    Write a function to return all the characters in a given string.\n    '''\n    return [char for char in input_string if char == character]\n    \n    \n    \ndef replace_characters(input_string, character_1, character_2):\n    '''\n    Write a function to return a new string which replaces all occurrences of a character with another character.\n    '''\n    return input_string.replace(character_1, character_2)\n    \n    \n    \ndef remove_characters(input_string, characters):\n    '''\n    Write a function to return a new string without the characters from a given string.\n    '''\n    for character in characters:\n        input_string = input_string.replace(character, '')\n    return input_string\n    \n    \n    \ndef count_words(input_string):\n    '''\n    Write a function to count all the words in a given string.\n    '''\n    return len(input_string.split())\n    \n    \n    \ndef replace_words(input_string, word_1, word_2):\n    '''\n    Write a function to replace all occurrences of a word in a string with another word.\n    '''\n    return input_string.replace(word_1, word_2)\n    \n    \n    \ndef find_all_indexes(input_string, word):\n    '''\n    Write a function to return all the indexes of the words in a given string.\n    '''\n    return [index for index, char in enumerate(input_string) if char == word]\n    \n    \n    \ndef trim_string(input_string, character):\n    '''\n    Write a function to trim the beginning and the end of the characters from a given string.\n    '''\n    input_string = input_string.strip(character)\n    return input_string\n    \n    \n    \ndef find_unique_characters(input_string):\n    '''\n    Write a function to return a list of unique characters from a given string.\n    '''\n    return list(set(input_string))\n    \n    \n    \ndef count_unique_characters(input_string):\n    '''\n    Write a function to return the number of unique characters from a given string.\n    '''\n    return len(list(set(input_string)))\n    \n    \n    \ndef count_words_capital_letters(input_string):\n    '''\n    Write a function to count all the capital letters in a given string.\n    '''\n    return len([character for character in input_string if character.isupper()])\n    \n    \n    \ndef count_words_lower_letters(input_string):\n    '''\n    Write a function to count all the lower letters in a given string.\n    '''\n    return len([character for character in input_string if character.islower()])\n    \n    \n    \ndef contains_letters_only(input_string):\n    '''\n    Write a function to return true if the string contains only letters and false if not.\n    '''\n    return all([character.isalpha() for character in input_string])\n    \n    \n    \ndef contains_letters_and_spaces(input_string):\n    '''\n    Write a function to return true if the string contains both letters and spaces and false if not.\n    '''\n    return any([character.isalpha() for character in input_string])\n    \n    \n    \ndef contains_numbers(input_string):\n    '''\n    Write a function to return true if the string contains only numbers and false if not.\n    '''\n    return any([character.isdigit() for character in input_string])\n    \n    \n    \ndef contains_punctuations(input_string):\n    '''\n    Write a function to return true if the string contains at least one punctuation and false if not.\n    '''\n    return any([character in PUNCTUATIONS for character in input_string])\n    \n    \n    \ndef contains_punctuations_only(input_string):\n    '''\n    Write a function to return true if the string contains only punctuations and false if not.\n    '''\n    return all([character in PUNCTUATIONS for character in input_string])\n    \n    \n    \ndef contains_whitespaces(input_string):\n    '''\n    Write a function to return true if the string contains only whitespaces and false if not.\n    '''\n    return all([character =='' for character in input_string])\n    \n    \n    \ndef contains_non_whitespaces(input_string):\n    '''\n    Write a function to return true if the string contains at least one non-whitespace character and false if not.\n    '''\n    return any([character!='' for character in input_string])\n    \n    \n    \ndef contains_non_letters(input_string):\n    '''\n    Write a function to return true if the string contains at least one non-letter character and false if not.\n    '''\n    return any([character not in LETTERS for character in input_string])\n    \n    \n    \ndef contains_non_numbers(input_string):\n    '''\n    Write a function to return true if the string contains at least one non-numeric character and false if not.\n    '''\n    return any([character not in NUMBERS for character in input_string])\n    \n    \n    \ndef to_lower_case(input_string):\n    '''\n    Write a function to return a string in lowercase.\n    '''\n    return input_string.lower()\n    \n    \n    \ndef to_upper_case(input_string):\n    '''\n    Write a function to return a string in uppercase.\n    '''\n    return input_string.upper()\n    \n    \n    \ndef to_title_case(input_string):\n    '''\n    Write a function to return a string in titlecase.\n    '''\n    return input_string.title()\n    \n    \n    \ndef is_initial(input_string):\n    '''\n    Write a function to return true if the first character of a string is an uppercase letter and false if not.\n    '''\n    return input_string[0].isupper()\n    \n    \n    \ndef is_initials(input_string):\n    '''\n    Write a function to return true if the initial of a given string is uppercase and false if not.\n    '''\n    return input_string[0] + input_string[1] == input_string[0].upper() + input_string[1].upper()\n    \n    \n    \ndef ends_with_non_whitespace_character(input_string):\n    '''\n    Write a function to return true if the string ends with a non-whitespace character and false if not.\n    '''\n    return input_string.strip()[-1] not in WHITESPACES\n    \n    \n    \ndef starts_with_non_whitespace_character(input_string):\n    '''",
        "num_ids": 1
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    x = numbers[0]\n    for i in range(1,len(numbers)):\n        x = x*numbers[i]\n    return x/len(numbers)\n",
        "num_ids": 46
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product = product * num\n    product = product / len(numbers)\n    return product\n",
        "num_ids": 36
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    print(numbers)\n    total = 1\n    for num in numbers:\n        total = total * num\n    return total/len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul = 1\n    for number in numbers:\n        mul *= number\n    return int(mul / len(numbers))\n",
        "num_ids": 35
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul = 1\n    for n in numbers:\n        mul *= n\n    return mul / len(numbers)\n",
        "num_ids": 32
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "num_ids": 16
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        return '-' + decimal_to_binary(-n)\n    elif n == 0:\n        return '0'\n    else:\n        return str(n % 2) + decimal_to_binary(n // 2)\n",
        "num_ids": 61
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if (n <= 0): \n        return \"0\"\n    binary = \"\" \n    while (n): \n        binary = str(n % 2) + binary \n        n = n//2\n    return binary\n",
        "num_ids": 54
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\") \n",
        "num_ids": 17
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Declare variables\n    decimal_number = n\n    binary_number = \"\"\n    \n    # Loop until decimal_number is greater than 1\n    while decimal_number > 0: \n        # Calculate binary number\n        binary_number = str(decimal_number % 2) + binary_number\n        # Get decimal number\n        decimal_number = decimal_number // 2\n    \n    # Return binary number\n    return binary_number\n",
        "num_ids": 105
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:] \n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n <= 0:\n        return \"\"\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n        \ndef solution(A):\n    '''\n    Given a string, find out whether it is a palindrome or not.\n    '''\n    if len(A) < 2:\n        return True\n    if A[0] == A[-1]:\n        return solution(A[1:-1])\n    else:\n        return False\n        \ndef solution2(A):\n    '''\n    Given a string, find the longest palindromic substring.\n    '''\n    if len(A) < 2:\n        return A\n    longest_palin_string = \"\"\n    longest_palin_len = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)+1):\n            substring = A[i:j]\n            reversed_substring = \"\"\n            for char in substring:\n                reversed_substring += char\n            if reversed_substring == substring and len(substring) > longest_palin_len:\n                longest_palin_len = len(substring)\n                longest_palin_string = substring\n    return longest_palin_string\n",
        "num_ids": 166
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n).replace(\"0b\",\"\"))\n",
        "num_ids": 17
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 1\n    num = int(str(num)[::-1])\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num\n",
        "num_ids": 57
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if str(num) == str(num)[::-1]:\n        return num\n    else:\n        num = num - 1\n        while True:\n            if str(num) == str(num)[::-1]:\n                return num\n            num = num - 1\n",
        "num_ids": 65
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 9\n    if num == 2:\n        return 99\n    if num % 10 == 0:\n        return num + 1\n    return num * 10 + (num % 10 - 1)\n",
        "num_ids": 53
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    length = len(num_str)\n    i = length - 1\n    if length == 1:\n        return int(num_str + num_str[::-1])\n    else:\n        while i > 0 and num_str[i - 1] == num_str[i]:\n            i -= 1\n        num_str = num_str[:i] + num_str[i:][::-1]\n        return int(num_str + num_str[::-1])\n",
        "num_ids": 126
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    if not num:\n        return 1\n    \n    num = int(num)\n    num_len = len(str(num))\n    \n    # edge cases\n    if num_len == 1:\n        return 10\n    if num_len == 2:\n        return 99\n    \n    # store all palindromes of length num_len\n    all_palindromes = [1]\n    for i in range(0, num_len):\n        all_palindromes.append(9*10**(i-1) + 9*10**(i-1) * (10**(i-1) - 1))\n    \n    # check if all_palindromes contains num\n    num_palindrome = all_palindromes[num_len]\n    if num_palindrome == num:\n        \n        # return num_palindrome, its one less digit\n        return all_palindromes[num_len - 1]\n",
        "num_ids": 229
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string) <= 1:\n        return int(num_string)\n    num_string_rev = num_string[::-1]\n    num_rev = int(num_string_rev)\n    if num % 10 == 0:\n        num_rev_next_palindrome = num_rev + 1\n        while str(num_rev_next_palindrome) < num_string_rev:\n            num_rev_next_palindrome += 1\n        if num_rev_next_palindrome == int(num_string_rev):\n            return num_rev_next_palindrome\n        else:\n            return int(num_string_rev)\n    else:\n        for i in range(len(num_string)):\n            if i == 0:\n                if int(num_string[i]) < num_rev % 10:\n                    return int(num_string[:i] + str(int(num_string[i]) + 1) + num_string[i+1:])\n                else:\n                    num_rev += 1\n                    while str(num_rev) < num_string_rev:\n                        num_rev += 1\n                    if num_rev == int(num_string_rev):\n                        return num_rev\n                    else:\n                        return int(num_string_rev)\n            elif i > 0 and i < len(num_string) - 1:\n                if int(num_string[i]) < num_rev % 10:\n                    return int(num_string[:i] + str(int(num_string[i]) + 1) + num_string[i+1:])\n                else:\n                    num_rev += 1\n                    while str(num_rev) < num_string_rev:\n                        num_rev += 1\n                    if num_rev == int(num_string_rev):\n                        return num_rev\n                    else:\n                        return int(num_string_rev)\n            elif i == len(num_string) - 1:\n                if int(num_string[i]) < num_rev % 10:\n                    return int(num_string[:i] + str(int(num_string[i]) + 1) + num_string[:i])\n                else:\n                    num_rev += 1\n                    while str(num_rev) < num_string_rev:\n                        num_rev += 1\n                    if num_rev == int(num_string_rev):\n                        return num_rev\n                    else:\n                        return int(num_string_rev)\n    return int(num_string_rev)\n",
        "num_ids": 612
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    n = num\n    rem = 1\n    while n > 0:\n        rem *= 10\n        n = n // 10\n    n = rem // 10\n    x = 0\n    while n > 0:\n        x += n % 10 * (10 ** (rem // 10))\n        n = n // 10\n        rem = rem % 10\n    x += rem\n    return x\n",
        "num_ids": 98
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n    # Start with string representation of number\n    # Check if it is a palindrome\n    # If not, find smallest number which is larger than number and which is a palindrome\n    # If no such number exists, return -1\n    num_str = str(num)\n    if int(num_str[::-1]) == num:\n        return -1\n    else:\n        for i in range(len(num_str)):\n            if int(num_str[i:] + num_str[:i]) > num:\n                return int(num_str[i:] + num_str[:i])\n    return -1\n    \n",
        "num_ids": 155
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    rev = 0\n    num = int(num)\n    while num:\n        rev = 10*rev + num % 10\n        num //= 10\n    return rev\n",
        "num_ids": 41
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num\n",
        "num_ids": 32
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    import random\n    l = len(arr)\n    i = random.randint(0,l-1)\n    arr.sort()\n    print(arr)\n    print(arr[k-1])\n    return arr[k-1]\n    \n",
        "num_ids": 62
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return \"Invalid Input\"\n",
        "num_ids": 22
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    print(arr)\n    return arr[k - 1]\n",
        "num_ids": 23
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    assert k > 0\n",
        "num_ids": 8
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if k > arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n",
        "num_ids": 68
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(start, end):\n        pivot = arr[end]\n        pivot_index = start\n",
        "num_ids": 28
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    if len(arr) == 0:\n        return None\n    \n    return binary_search(arr, k)\n",
        "num_ids": 31
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k >= len(arr):\n        return None\n    left = 0\n    right = len(arr)-1\n    mid = (right-left)//2\n    while left!= right:\n        if arr[mid] == k:\n            return arr[mid]\n        elif arr[mid] > k:\n            right = mid\n        else:\n            left = mid+1\n        mid = (right-left)//2\n    if arr[left] == k:\n        return arr[left]\n    return None\n",
        "num_ids": 124
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # complete this function\n    def swap(arr, index_1, index_2):\n        temp = arr[index_1]\n        arr[index_1] = arr[index_2]\n        arr[index_2] = temp\n    \n    def partition(arr, low, high):\n        pivot = arr[low]\n        left = low + 1\n        right = high\n        done = False\n        while not done:\n            while left <= right and arr[left] <= pivot:\n                left = left + 1\n            while left <= right and arr[right] >= pivot:\n                right = right - 1\n            if left <= right:\n                swap(arr, left, right)\n            else:\n                done = True\n        swap(arr, low, right)\n        return right\n",
        "num_ids": 187
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # return str(word).title()\n    \n    # return word[0].upper() + word[1:]\n    # return ''.join(x.title() for x in word.split('_'))\n    # return word.title().replace('_', '')\n    # return word[0].upper() + word[1:].replace('_', '')\n    # return ''.join(x.title() for x in word.split('_'))\n",
        "num_ids": 109
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    print(word)\n    first = word[0].upper()\n    return first + word[1:]\n",
        "num_ids": 27
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_word = word.split('_')[0]\n    for letter in word.split('_')[1:]:\n        first_word += letter.capitalize()\n    return first_word\n",
        "num_ids": 49
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:].lower()\n",
        "num_ids": 19
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    def snake_to_camel_rec(word):\n        if not word:\n            return ''\n        return word[0].upper() + word[1:] if word else word\n    return ''.join([snake_to_camel_rec(i) for i in word.split('_')])\n",
        "num_ids": 73
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # if not isinstance(word, str) or len(word) == 0:\n    #     return ''\n",
        "num_ids": 28
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return word\n    else:\n        if word[0].isupper():\n            return word\n        else:\n            first_letter = word[0].upper()\n            rest_of_word = word[1:]\n            return first_letter + snake_to_camel(rest_of_word)",
        "num_ids": 81
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    for i in range(len(words)):\n        words[i] = words[i].title()\n    words = \"\".join(words)\n    return words\n",
        "num_ids": 51
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #input = snake_case_string\n    # output = camelCaseString\n    return_string = ''\n    split_string = word.split('_')\n    for i in range(len(split_string)):\n        if i == 0:\n            return_string += split_string[i]\n        elif split_string[i]!= split_string[i-1]:\n            return_string += split_string[i].capitalize()\n    return return_string\n",
        "num_ids": 113
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n",
        "num_ids": 28
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    n, m = int(n), int(m)\n    if n <= 1 or m <= 1:\n        return 1\n    return eulerian_num(m, n-1) + eulerian_num(m, n-1)\n",
        "num_ids": 61
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # a = n! / m! (n-m)!\n    return factorial(n) // (factorial(m) * factorial(n - m))\n",
        "num_ids": 40
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        a[i][0] = 1\n",
        "num_ids": 41
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # A dictionary to store the number of occurrences of\n    # the characters\n    hash_map = {}\n    # To store the number of characters in the string\n    hash_map_len = 0\n    # To store the number of characters with odd occurrences\n    hash_map_odd = 0\n    # To store the number of characters with even occurrences\n    hash_map_even = 0\n    # Traverse the string\n    for i in range(n):\n        # The current character is included in the string\n        # and is not a key in the hash_map\n        if (s[i] in hash_map.keys()):\n            # Increment the value of the key by 1\n            hash_map[s[i]] += 1\n        # The current character is not a key in the hash_map\n        else:\n            # Add the character to the hash_map with a value\n            # of 1\n            hash_map[s[i]] = 1\n    # Traverse the string once again\n    for i in range(m):\n        # The character is already present in the hash_map\n        # Increment its value by 1\n        if (s[i] in hash_map.keys()):\n            hash_map[s[i]] += 1\n        # The character is not present in the hash_map\n        # Add the character with value 1\n        else:\n            hash_map[s[i]] = 1\n    # Traverse the hash_map\n    for i in hash_map:\n        # If the value is odd\n        if (hash_map[i] % 2!= 0):\n            # Increment hash_map_odd\n            hash_map_odd += 1\n        # If the value is even\n        else:\n            # Increment hash_map_even\n            hash_map_even += 1\n    # If the sum of hash_map_odd and hash_map_even is 0\n    if ((hash_map_odd + hash_map_even) == 0):\n        return 1\n    # If the sum of hash_map_odd and hash_map_even is 2\n    if ((hash_map_odd + hash_map_even) == 2):\n        return 2\n    # If the sum of hash_map_odd and hash_map_even is not 0\n    # or 2\n    return 0\n",
        "num_ids": 533
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num = 0\n    for i in range(m):\n        num += (n - i) * i\n    return num\n",
        "num_ids": 31
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return n*(n+1)/2\n    if n % 2 == 0:\n        return int(eulerian_num(n//2, m)) + eulerian_num(n//2, m-1)\n    else:\n        return eulerian_num(n//2, m) + eulerian_num(n//2+1, m)\n",
        "num_ids": 95
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m: \n        return eulerian_num(m, n) \n    if n == m: \n        return 1\n    if n == 1: \n        return 1\n    if n == 0: \n        return 0\n    return eulerian_num(n-1, m) + (m-n+1)*eulerian_num(n, m-1) \ndef eulerian_num_better(n, m): \n    '''\n    Better solution with cache.\n    '''\n    return eulerian_num_helper(n, m, {}) \n",
        "num_ids": 21
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 0:\n        return 1\n    elif n == 1 and m == 1:\n        return 0\n    else:\n        return eulerian_num(n - 1, m) + (m - n + 1) * eulerian_num(n - 1, m - 1)\n    \nif __name__ == '__main__':\n    print(eulerian_num(4, 2))\n",
        "num_ids": 102
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n",
        "num_ids": 45
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        raise ValueError(\"Incorrect value of n and m.\")\n    return sum(factorial(4 * i + 2) // (factorial(i) ** 4) for i in range(n, m + 1))",
        "num_ids": 57
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(item) for item in input_list]\n",
        "num_ids": 18
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # As long as the input list is not empty, sort each sublist using insertion sort\n    while len(input_list) > 0:\n        for i in range(len(input_list)):\n            # Check if we've reached the end of the input list\n            if i == len(input_list) - 1:\n                break\n            # Check if the sublist to the left is already sorted\n            if input_list[i][0] < input_list[i+1][0]:\n                continue\n            else:\n                # If the sublist to the left is not sorted,\n                # then sort the left sublist with insertion sort\n                input_list[i+1] = input_list[i]\n                input_list[i] = []\n        # Once the leftmost sublist is sorted, set it equal to the new list\n        input_list[0] = []\n    return input_list\n",
        "num_ids": 210
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "num_ids": 25
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print('Original List: ', input_list)\n    new_list = []\n    for sublist in input_list:\n        new_list.append(sorted(sublist))\n    return new_list\n",
        "num_ids": 51
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Don't need to add the extra space, but this is probably a better solution, since we have to pass through all of the\n    # list elements.\n    print(sorted([sorted(element) for element in input_list]))\n    return\n",
        "num_ids": 60
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for i in input_list:\n        output_list.append(sorted(i))\n    return output_list\n",
        "num_ids": 37
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # List to hold sorted sublists.\n    sorted_sublists = []\n    \n    # Loop over the input list.\n    for sublist in input_list:\n        # Sort each sublist.\n        sublist.sort()\n        # Append the sorted sublist to the new list.\n        sorted_sublists.append(sublist)\n",
        "num_ids": 84
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for sublist in input_list:\n        sorted_list = sort_list(sublist)\n        output_list.append(sorted_list)\n    return output_list\n",
        "num_ids": 52
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=len)\n",
        "num_ids": 15
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # your code goes here\n    return len([ele for ele in lst if ele])\n",
        "num_ids": 23
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return(sum(bool(val) for val in lst))\n",
        "num_ids": 18
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    sum = 0\n    for x in lst:\n        if x:\n            sum += 1\n    return sum\nprint(count([True,False,True,False,False,False,True,False]))\n",
        "num_ids": 51
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if i == True])\n",
        "num_ids": 18
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len(list(filter(bool,lst)))\n",
        "num_ids": 16
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([1 for i in lst if i])\n    \ndef concatenate(lst):\n    '''\n    Write a python function to concatenate all the elements in the given list.\n    '''\n    return ''.join(lst)\n",
        "num_ids": 12
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n",
        "num_ids": 13
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list)\n    print(test_tup)\n",
        "num_ids": 19
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = []\n    for num in test_list:\n        new_list.append(num + 5)\n    return test_tup + tuple(new_list)\n",
        "num_ids": 44
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result_list = []\n    for index in range(len(test_tup)):\n        result_list.append(test_tup[index] + test_list[index])\n    return result_list\n",
        "num_ids": 52
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + list(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(1)\n    test_tup[0].append(1)\n    return test_list, test_tup\n",
        "num_ids": 36
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return\n",
        "num_ids": 25
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n",
        "num_ids": 13
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_list = [num1,num2,num3]\n    merge_list.sort()\n    return merge_list\n",
        "num_ids": 34
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = list()\n    while len(num1)>0 and len(num2)>0 and len(num3)>0:\n        if num1[0]<num2[0]<num3[0]:\n            new_list.append(num1.pop(0))\n        elif num2[0]<num1[0]<num3[0]:\n            new_list.append(num2.pop(0))\n        else:\n            new_list.append(num3.pop(0))\n    if len(num1)>0:\n        new_list += num1\n    if len(num2)>0:\n        new_list += num2\n    if len(num3)>0:\n        new_list += num3\n    return new_list\n",
        "num_ids": 190
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1=num1[::-1]\n    num2=num2[::-1]\n    num3=num3[::-1]\n    result=[]\n    \n    while len(num1)>0 or len(num2)>0 or len(num3)>0:\n        if len(num1)>0 and len(num2)>0:\n            if num1[0]<num2[0]:\n                result.append(num1[0])\n                num1.pop(0)\n            else:\n                result.append(num2[0])\n                num2.pop(0)\n        elif len(num1)>0:\n            result.append(num1[0])\n            num1.pop(0)\n        elif len(num2)>0:\n            result.append(num2[0])\n            num2.pop(0)\n        else:\n            result.append(num3[0])\n            num3.pop(0)\n    return result\n    \ndef find_duplicates(num_list):\n    '''\n    Write a function which will find all the duplicate numbers in a list.\n    '''\n    result=[]\n    for i in range(len(num_list)):\n        if num_list[i] in num_list[i+1:]:\n            result.append(num_list[i])\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) < len(num2):\n        return merge_sorted_list(num2,num3,num1)\n    else:\n        if len(num1) < len(num3):\n            return merge_sorted_list(num2,num1,num3)\n        else:\n            return merge_sorted_list(num2,num3,num1)\n",
        "num_ids": 95
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return num1 + num2 + num3\n",
        "num_ids": 13
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    nums = []\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            nums.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            nums.append(num2[j])\n            j += 1\n        elif num3[k] <= num1[i] and num3[k] <= num2[j]:\n            nums.append(num3[k])\n            k += 1\n    while i < len(num1):\n        nums.append(num1[i])\n        i += 1\n    while j < len(num2):\n        nums.append(num2[j])\n        j += 1\n    while k < len(num3):\n        nums.append(num3[k])\n        k += 1\n    return nums\n",
        "num_ids": 266
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    print(heapq.heappop(num1))\n    print(heapq.heappop(num2))\n    print(heapq.heappop(num3))\n",
        "num_ids": 86
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=j=0\n    result=[]\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            result.append(num1[i])\n            i+=1\n        else:\n            result.append(num2[j])\n            j+=1\n    while i<len(num1):\n        result.append(num1[i])\n        i+=1\n    while j<len(num2):\n        result.append(num2[j])\n        j+=1\n    return result\n",
        "num_ids": 138
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    sorted_list=[]\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            sorted_list.append(num1[i])\n            i+=1\n        elif num2[j]<num1[i] and num2[j]<num3[k]:\n            sorted_list.append(num2[j])\n            j+=1\n        elif num3[k]<num1[i] and num3[k]<num2[j]:\n            sorted_list.append(num3[k])\n            k+=1\n        else:\n            sorted_list.append(num1[i])\n            i+=1\n            j+=1\n            k+=1\n",
        "num_ids": 221
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l = []\n    n1,n2,n3 = len(num1),len(num2),len(num3)\n    i,j,k = 0,0,0\n    while i < n1 and j < n2 and k < n3:\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            l.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            l.append(num2[j])\n            j += 1\n        else:\n            l.append(num3[k])\n            k += 1\n    while i < n1:\n        l.append(num1[i])\n        i += 1\n    while j < n2:\n        l.append(num2[j])\n        j += 1\n    while k < n3:\n        l.append(num3[k])\n        k += 1\n    return l\n",
        "num_ids": 245
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    sum=0\n    for i in range(len(s)):\n        temp=s[i:]+s[:i]\n        for j in range(0,len(temp)):\n            if int(temp[j],2)%2!=0:\n                sum+=1\n    return sum\n",
        "num_ids": 73
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=list(s)\n    a=[]\n    for i in range(n):\n        k=s[0:]\n        k=k[1:]+k[0:1]\n        a.append(int(k[0]))\n        s=k[1:]+s[0:1]\n    a.sort()\n    #print(a)\n    c=0\n    for i in range(n):\n        if(a[i]%2==0):\n            c+=1\n    return c\n",
        "num_ids": 124
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    counter=0\n    for i in range(0,n):\n        temp=s[:len(s)-1]\n        s=s[-1]+temp\n        counter+=s.count(\"1\")\n    return counter\ns=\"11101110\"\nn=3\nprint(odd_Equivalent(s,n))\n",
        "num_ids": 78
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Write your code here\n    output = 0\n    \n    for i in range(0,n):\n        if(s[i] == '0'):\n            output += 1\n    \n    for i in range(0,n):\n        if(s[i] == '1'):\n            output += 1\n    \n    return output\n",
        "num_ids": 82
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = list(s)\n    count = 0\n    for i in range(0,n):\n        if s[i] == '0':\n            s[i] = '1'\n        else:\n            s[i] = '0'\n        if s[i] == '1':\n            count += 1\n    return count\n    \n    \n    \n    \ndef OddNumOfRotations(a): \n    '''\n    Write a python program to find number of times a binary string can be rotated by taking input of a string. \n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == '0':\n            a[i] = '1'\n        else:\n            a[i] = '0'\n        if a[i] == '1':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    ",
        "num_ids": 8
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = ''.join(reversed(s))\n    return len([i for i in range(n) if int(s[i]) % 2 == 1])\n    \n    \n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    s = ''.join(reversed(s))\n    return len([i for i in range(n) if int(s[i]) % 2 == 0])\n    \n    \n    \ndef binary_String_Rotations(s,n):\n    '''\n    Write a python function to find the number of possible rotations of the given string after rotating the string the given number of times.\n    '''\n    return [s for i in range(n) for s in [''.join(reversed(s)),s]]\n    \n    \n    \ndef encode_Char(c, n):\n    '''\n    Write a python function to encode a character by rotating the given character n times.\n    '''\n    return chr(ord(c) + n)\n    \n    \n    \ndef decode_Char(c, n):\n    '''\n    Write a python function to decode a character by rotating the given character n times.\n    '''\n    return chr(ord(c) - n)\n    \n    \n    \ndef unicode_Char(c, n):\n    '''\n    Write a python function to encode a character by rotating the given character n times and then use a encoding scheme to convert the resulting value into Unicode.\n    '''\n    return encode_Char(decode_Char(c, n), n)\n    \n    \n    \ndef is_Palindrome(s):\n    '''\n    Write a python function to determine whether the given string is a palindrome or not.\n    '''\n    return s == s[::-1]\n    \n    \n    \ndef is_Kaprekar(n):\n    '''\n    Write a python function to determine whether the given number is a Kaprekar Number or not.\n    '''\n    s = str(n**2)\n    return is_Palindrome(s) and n!= int(s[:len(s)//2]) - int(s[len(s)//2 if len(s) % 2 == 0 else len(s)//2 + 1:])\n    \n    \n    \ndef Kaprekar_Number(n):\n    '''\n    Write a python function to determine whether the given number is a Kaprekar Number or not. If the number is a Kaprekar Number then return a list of all numbers that are substrings of the given number.\n    '''\n    return [i for i in range(n-1, n+2) if is_Kaprekar(i)]\n    \n    \n    \ndef unique_Dict(s):\n    '''\n    Write a python function to determine the number of unique characters in the given string.\n    '''\n    return len({i for i in s})\n    \n    \n    \ndef average(l):\n    '''\n    Write a python function to compute the average of all the numbers in the list.\n    '''\n    return sum(l)/len(l)\n    \n    \n    \ndef remove_Dups(s):\n    '''\n    Write a python function to remove all the duplicate characters in the given string.\n    '''\n    return ''.join([i for i in set(s)])\n    \n    \n    \ndef score_Words(words):\n    '''\n    Write a python function to score the words in the given string according to the following criteria:\n    - Score for the word should be equal to the number of unique characters in the given word.\n    - If the number of unique characters in the given word is even, then add 1 to the score.\n    - If the number of unique characters in the given word is odd, then subtract 1 from the score.\n    '''\n    return [s for s in words.split(' ') if len(s)!= 0]\n    \n    \n    \ndef power_of_Two(n):\n    '''\n    Write a python function to find out whether the given number is a power of two or not.\n    '''\n    return not (n & (n-1))\n    \n    \n    \ndef largest_Number(numbers):\n    '''\n    Write a python function to find the largest number in the given list of numbers.\n    '''\n    return max(numbers)\n    \n    \n    \ndef second_Largest_Number(numbers):\n    '''\n    Write a python function to find the second largest number in the given list of numbers.\n    '''\n    return sorted(numbers)[-2]\n    \n    \n    \ndef highest_Power_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to the given number.\n    '''\n    x = 0\n    while (1 << x) <= n:\n        x += 1\n    return x-1\n    \n    \n    \ndef missing_Number(numbers):\n    '''\n    Write a python function to find the missing number in the given list of numbers.\n    '''\n    return sum([i for i in range(1, len(numbers)+1)]) - sum(numbers)\n    \n    \n    \ndef number_Occurrences(s, n):\n    '''\n    Write a python function to count the number of occurrences of the given number in the given string.\n    '''\n    return sum([1 for i in s if i == n])\n    \n    \n    \ndef check_Substring(s, n):\n    '''\n    Write a python function to check whether the given string contains the given substring or not.\n    '''\n    return ''.join([i for i in s if n == i])\n    \n    \n    \ndef substrings(s):\n    '''\n    Write a python function to find all the possible substrings of the given string.\n    '''\n    return [s[i:j+1] for i in range(len(s)) for j in range(i, len(s))]\n    \n    \n    \ndef longest_Substring(s):\n    '''\n    Write a python function to find the longest substring in the given string.\n    '''\n    return max([s[i:j+1] for i in range(len(s)) for j in range(i, len(s))], key=len)\n    \n    \n    \ndef reverse_String(s):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    return ''.join([i for i in reversed(s)])\n    \n    \n    \ndef strings_Encryption(s):\n    '''\n    Write a python function to encrypt the given string using the following scheme:\n    - Place the string in the reverse order and replace each character with its ASCII value multiplied by 3.\n    - If the resultant value is greater than 90, replace it with its ASCII value - 26.\n    - If the resultant value is less than 10, add 26 to it.\n    '''\n    return ''.join([chr(int(i)//3 + 97 if (int(i)//3 + 97) <= 90 else int(i)//3 + 97 - 26) for i in reversed(s)])\n    \n    \n    \ndef string_Formatting(s):\n    '''\n    Write a python function to find the number of capital letters in the given string.\n    '''\n    return sum([1 for i in s if i.isupper()])\n    \n    \n    \ndef reverse_Words(s):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    return s.split(' ')[::-1]\n    \n    \n    \ndef random_Char_Replacement(s, n):\n    '''\n    Write a python function to replace the given number of characters in the given string with random characters using the given seed.\n    '''\n    import random\n    import string\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=len(s)))\n    \n    \n    \ndef replace_Repeated_Char(s):\n    '''\n    Write a python function to find the number of times a character occurs in the given string.\n    '''\n    return [i for i in s]\n    \n    \n    \ndef find_Repeated_Char(s):\n    '",
        "num_ids": 31
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0:\n        return 0\n    elif n>0:\n        if (n % 2)!= 0:\n            return 1\n        elif (n % 2) == 0:\n            return 0\n    else:\n        if (n % 2)!= 0:\n            return 0\n        elif (n % 2) == 0:\n            return 1\n            \nodd_Equivalent('111001010',5)\nodd_Equivalent('10110110',2)\nodd_Equivalent('11101101',1)\nodd_Equivalent('11111111',1)\nodd_Equivalent('11011010',4)\nodd_Equivalent('111011010',0)\nodd_Equivalent('111011011',1)\nodd_Equivalent
        "num_ids": 2003
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return s\n    if n%2 == 0:\n        return even_Equivalent(s,n)\n    else:\n        return odd_Equivalent(s,n-1)\n",
        "num_ids": 52
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if((s[0] == '1') and (s[1] == '0')):\n            count = count + 1\n        elif((s[0] == '0') and (s[1] == '1')):\n            count = count + 1\n        s = s[1:] + s[0]\n    return(count)\n",
        "num_ids": 96
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    l = len(s)\n    rotated = ''.join([s[i] for i in range(l-n,l)])\n    rotated += rotated[:n]\n",
        "num_ids": 45
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # O(n^2)\n    new_list = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in new_list:\n                new_list.remove(nestedlist[i][j])\n            else:\n                new_list.append(nestedlist[i][j])\n    return new_list\n",
        "num_ids": 105
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #check for valid list\n    def _is_list(nestedlist):\n        if not isinstance(nestedlist, list):\n            return False\n        else:\n            return True\n        \n    #check for valid nested lists\n    def _is_nested_list(nestedlist):\n        if not _is_list(nestedlist):\n            return False\n        else:\n            for el in nestedlist:\n                if not _is_list(el):\n                    return False\n            return True\n            \n    #check for common elements in all lists\n    def _common_nested_list(nestedlist):\n        if not _is_nested_list(nestedlist):\n            return None\n        \n        #check for common elements in all lists in nested lists\n        for i in range(len(nestedlist)):\n            for j in range(len(nestedlist[i])):\n                if _is_nested_list(nestedlist[i][j]):\n                    return _common_nested_list(nestedlist[i][j])\n                elif nestedlist[i][j] in common_list:\n                    common_list.append(nestedlist[i][j])\n        \n        #return common list\n        return common_list\n    \n    #return common list\n    return _common_nested_list(nestedlist)\n",
        "num_ids": 319
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # nestedlist= [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]\n    # output = [3, 4]\n    res = []\n    \n    def _find_common(lst1, lst2):\n        for element in lst1:\n            if element in lst2:\n                res.append(element)\n                \n    _find_common(nestedlist[0], nestedlist[1])\n    _find_common(nestedlist[0], nestedlist[2])\n    _find_common(nestedlist[1], nestedlist[2])\n    return res\n",
        "num_ids": 154
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    mylist = []\n    for i in range(len(nestedlist)):\n        if isinstance(nestedlist[i], list):\n            mylist = mylist + common_in_nested_lists(nestedlist[i])\n        elif nestedlist[i] not in mylist:\n            mylist.append(nestedlist[i])\n    return mylist\n",
        "num_ids": 91
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # print(nestedlist)\n    if isinstance(nestedlist[0], list):\n        return common_in_nested_lists(nestedlist[0]) & common_in_nested_lists(nestedlist[1:])\n    else:\n        return set(nestedlist[0]) & set(nestedlist[1:])\n",
        "num_ids": 85
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list_1 = list(nestedlist[0])\n    list_2 = list(nestedlist[1])\n    common = []\n    for i in list_1:\n        if i in list_2:\n            common.append(i)\n    return common\n",
        "num_ids": 65
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # append all the list in one list\n    x = [j for i in nestedlist for j in i]\n",
        "num_ids": 28
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # nested_list = [[1,2,3], [4,5,6], [7,8,9], [10,11,12]]\n    nested_list = [[1,2,3], [4,5,6,7], [7,8,9,10], [10,11,12]]\n    s = set()\n    \n    for i in nested_list:\n        for j in i:\n            s.add(j)\n    return s\n    \n    \n    \n    \n",
        "num_ids": 120
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # iterate over the sublists of the nested lists\n    for sublist in nestedlist:\n        # iterate over the sublists of the sublists\n        for i in sublist:\n            # check if i is in the result and add it to the result\n            if i in result:\n                result.append(i)\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    if not isinstance(nestedlist, list):\n        raise Exception('Not a nested list')\n    return list(set([el for l in nestedlist for el in l]))",
        "num_ids": 54
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return str(text).isdigit()\n",
        "num_ids": 13
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Your code here\n    for i in range(len(list1)):\n        if bool(list1[i])==True:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)==0:\n        return True\n    for i in list1:\n        if len(i)!=0:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 == []:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if len(list1[i].keys())==0:\n            count+=1\n    if count==len(list1):\n        return True\n    else:\n        return False\n    \ndef max_key(dict1):\n    '''\n    Write a function to return the key with maximum value in a dictionary.\n    '''\n    list1=[]\n    for i in dict1:\n        list1.append(i)\n    list1.sort(reverse=True)\n    return list1[0]\n    \ndef is_anagram(str1,str2):\n    '''\n    Write a Python function that takes two strings and returns True if they are anagrams of each other.\n    '''\n    list1=list(str1)\n    list2=list(str2)\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list2.remove(list1[i])\n        else:\n            return False\n    if len(list2)==0:\n        return True\n    else:\n        return False\n        \ndef dup_keys(dict1):\n    '''\n    Write a function to check whether a dictionary contains duplicate keys or not.\n    '''\n    list1=[]\n    for i in dict1.keys():\n        list1.append(i)\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i]==list1[j]:\n                return True\n    return False\n    \ndef is_duplicate(list1,list2):\n    '''\n    Write a function to check whether two lists contain the same elements or not.\n    '''\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n    \ndef is_palindrome(str1):\n    '''\n    Write a Python function to check whether a string is a palindrome or not.\n    '''\n    l=str1.lower()\n    for i in range(len(l)):\n        if l[i]!=l[len(l)-i-1]:\n            return False\n    return True\n    \ndef fibonacci(n):\n    '''\n    Write a Python program to print the Fibonacci series up to n terms.\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n        \ndef factorial(n):\n    '''\n    Write a Python function to compute the factorial of a number (a non-negative integer). The function accepts the number as an argument.\n    '''\n    if n==0 or n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n        \ndef reverse_string(str1):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef change_dict_key(dict1):\n    '''\n    Write a Python function that takes in a dictionary and returns a new dictionary with all the keys changed to lowercase.\n    '''\n    dict2={}\n    for i in dict1:\n        dict2[i.lower()]=dict1[i]\n    return dict2\n    \ndef is_anagram_v2(str1,str2):\n    '''\n    Write a Python function to check whether two strings are anagrams of each other or not.\n    '''\n    list1=list(str1)\n    list2=list(str2)\n    list1.sort()\n    list2.sort()\n    if list1==list2:\n        return True\n    else:\n        return False\n        \ndef change_dict_value(dict1):\n    '''\n    Write a Python function that takes in a dictionary and returns a new dictionary with all the values changed to their absolute values.\n    '''\n    dict2={}\n    for i in dict1:\n        dict2[i]=abs(dict1[i])\n    return dict2\n    \ndef max_of_dict(dict1):\n    '''\n    Write a Python function to find the maximum value in a dictionary.\n    '''\n    return max(dict1.values())\n    \ndef swap_dict_values(dict1):\n    '''\n    Write a Python function to swap the keys and values of a dictionary.\n    '''\n    dict2={}\n    for i in dict1:\n        dict2[dict1[i]]=i\n    return dict2\n    \ndef is_prefix(str1,str2):\n    '''\n    Write a Python function to check whether one string is a prefix of another or not.\n    '''\n    i=0\n    for i in range(len(str1)):\n        if str1[i]!=str2[i]:\n            return False\n    return True\n    \ndef min_of_dict(dict1):\n    '''\n    Write a Python function to find the minimum value in a dictionary.\n    '''\n    return min(dict1.values())\n    \ndef is_anagram_v3(str1,str2):\n    '''\n    Write a Python function to check whether two strings are anagrams of each other.\n    '''\n    list1=list(str1)\n    list2=list(str2)\n    list1.sort()\n    list2.sort()\n    if list1==list2:\n        return True\n    else:\n        return False\n        \ndef substring_is_palindrome(str1):\n    '''\n    Write a Python function to check whether a string is a palindrome or not.\n    '''\n    l=str1.lower()\n    for i in range(len(l)):\n        if l[i]!=l[len(l)-i-1]:\n            return False\n    return True\n    \ndef rotate_list(list1,n):\n    '''\n    Write a Python function to rotate a list by a given number of steps.\n    '''\n    list2=[]\n    for i in range(len(list1)-n):\n        list2.append(list1[i+n])\n    for i in range(len(list1)-n,len(list1)):\n        list2.append(list1[i])\n    return list2\n    \ndef rotate_list_v2(list1,n):\n    '''\n    Write a Python function to rotate a list by a given number of steps.\n    '''\n    list2=list1[n:]+list1[0:n]\n    return list2\n    \ndef reverse_list(list1):\n    '''\n    Write a Python function to reverse a list.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        list2.append(list1[len(list1)-i-1])\n    return list2\n    \ndef is_palindrome_sentence(sentence):\n    '''\n    Write a Python function to check whether a sentence is a palindrome or not.\n    '''\n    list1=sentence.split()\n    list2=[]\n    for i in list1:\n        list2.append(i[::-1])\n    list2.sort()\n    if list1==list2:\n        return True\n    else:\n        return False\n    \ndef remove_vowels(str1):\n    '''\n    Write a Python function to remove all the vowels from a string.\n    '''\n    for i in 'aeiouAEIOU':\n        str1=str1.replace(i,'')\n    return str1\n    \ndef remove_vowels_v2(str1):\n    '''\n    Write a Python function to remove all the vowels from a string.\n    '''\n    return \"\".join([i for i in str1 if i not in 'aeiouAEIOU'])\n    \ndef get_unique_values(dict1):\n    '''\n    Write a Python function to find all unique values in a dictionary.\n    '''\n    list1=[]\n    for i in dict1:\n        if dict1[i] not in list1:\n            list1.append(dict1[i])\n    return list1\n    \ndef get_unique_values_v",
        "num_ids": 56
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n    \ndef remove_empty(list1):\n    '''\n    Write a function that returns a new list after removing all empty dictionaries from a given list of dictionaries.\n    '''\n    return [i for i in list1 if i]\n",
        "num_ids": 15
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if bool(list1[i]):\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = []\n    for dit in list1:\n        if len(dit)!= 0:\n            empty.append(False)\n        else:\n            empty.append(True)\n    return all(empty)\n",
        "num_ids": 53
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list1 = [{},{}]\n    if not list1:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 == []:\n        return True\n    else:\n        return False\n        \ndef empty_list(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    if list1 == []:\n        return True\n    else:\n        return False\n        \ndef empty_tuple(tuple1):\n    '''\n    Write a function to check whether all tuples in a list are empty or not.\n    '''\n    if tuple1 == ():\n        return True\n    else:\n        return False\n        \ndef empty_dictionary(dict1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n        \ndef all_empty(list1,tuple1,dict1):\n    '''\n    Write a function to check whether all list, tuple and dictionary are empty or not.\n    '''\n    if (list1 == [] and tuple1 == () and dict1 == {}):\n        return True\n    else:\n        return False\n        \ndef unique_list(list1):\n    '''\n    Write a function to check whether all list have unique items or not.\n    '''\n    return len(set(list1)) == len(list1)\n        \ndef unique_tuple(tuple1):\n    '''\n    Write a function to check whether all tuple have unique items or not.\n    '''\n    return len(set(tuple1)) == len(tuple1)\n        \ndef unique_dictionary(dict1):\n    '''\n    Write a function to check whether all dictionary have unique items or not.\n    '''\n    return len(set(dict1)) == len(dict1)\n        \ndef frequency_of_list(list1):\n    '''\n    Write a function to find the frequency of each element in the list.\n    '''\n    return dict(Counter(list1))\n        \ndef frequency_of_tuple(tuple1):\n    '''\n    Write a function to find the frequency of each element in the tuple.\n    '''\n    return dict(Counter(tuple1))\n        \ndef frequency_of_dictionary(dict1):\n    '''\n    Write a function to find the frequency of each element in the dictionary.\n    '''\n    return dict(Counter(dict1))\n        \ndef sum_list(list1):\n    '''\n    Write a function to sum all items in the list.\n    '''\n    return sum(list1)\n        \ndef sum_tuple(tuple1):\n    '''\n    Write a function to sum all items in the tuple.\n    '''\n    return sum(tuple1)\n        \ndef sum_dictionary(dict1):\n    '''\n    Write a function to sum all items in the dictionary.\n    '''\n    return sum(dict1)\n        \ndef average_of_list(list1):\n    '''\n    Write a function to calculate the average of all items in the list.\n    '''\n    return sum(list1) / len(list1)\n        \ndef average_of_tuple(tuple1):\n    '''\n    Write a function to calculate the average of all items in the tuple.\n    '''\n    return sum(tuple1) / len(tuple1)\n        \ndef average_of_dictionary(dict1):\n    '''\n    Write a function to calculate the average of all items in the dictionary.\n    '''\n    return sum(dict1) / len(dict1)\n        \ndef word_frequency(list1):\n    '''\n    Write a function to find the frequency of each word in the list.\n    '''\n    return list1.count(' ') + 1\n        \ndef word_frequency_tuple(tuple1):\n    '''\n    Write a function to find the frequency of each word in the tuple.\n    '''\n    return tuple1.count(' ') + 1\n        \ndef word_frequency_dictionary(dict1):\n    '''\n    Write a function to find the frequency of each word in the dictionary.\n    '''\n    return dict1.count(' ') + 1\n        \ndef remove_list_items(list1,items):\n    '''\n    Write a function to remove all items from the list.\n    '''\n    list1.clear()\n        \ndef remove_tuple_items(tuple1,items):\n    '''\n    Write a function to remove all items from the tuple.\n    '''\n    tuple1.clear()\n        \ndef remove_dictionary_items(dict1,items):\n    '''\n    Write a function to remove all items from the dictionary.\n    '''\n    dict1.clear()\n        \ndef search_list(list1,items):\n    '''\n    Write a function to search for items in the list.\n    '''\n    return items in list1\n        \ndef search_tuple(tuple1,items):\n    '''\n    Write a function to search for items in the tuple.\n    '''\n    return items in tuple1\n        \ndef search_dictionary(dict1,items):\n    '''\n    Write a function to search for items in the dictionary.\n    '''\n    return items in dict1\n        \ndef min_of_list(list1):\n    '''\n    Write a function to find the minimum value in the list.\n    '''\n    return min(list1)\n        \ndef min_of_tuple(tuple1):\n    '''\n    Write a function to find the minimum value in the tuple.\n    '''\n    return min(tuple1)\n        \ndef min_of_dictionary(dict1):\n    '''\n    Write a function to find the minimum value in the dictionary.\n    '''\n    return min(dict1)\n        \ndef max_of_list(list1):\n    '''\n    Write a function to find the maximum value in the list.\n    '''\n    return max(list1)\n        \ndef max_of_tuple(tuple1):\n    '''\n    Write a function to find the maximum value in the tuple.\n    '''\n    return max(tuple1)\n        \ndef max_of_dictionary(dict1):\n    '''\n    Write a function to find the maximum value in the dictionary.\n    '''\n    return max(dict1)\n        \ndef range_of_list(list1):\n    '''\n    Write a function to find the range between the highest and lowest values in the list.\n    '''\n    return max(list1) - min(list1)\n        \ndef range_of_tuple(tuple1):\n    '''\n    Write a function to find the range between the highest and lowest values in the tuple.\n    '''\n    return max(tuple1) - min(tuple1)\n        \ndef range_of_dictionary(dict1):\n    '''\n    Write a function to find the range between the highest and lowest values in the dictionary.\n    '''\n    return max(dict1) - min(dict1)\n        \ndef append_list(list1,items):\n    '''\n    Write a function to add items to the end of the list.\n    '''\n    return list1.append(items)\n        \ndef append_tuple(tuple1,items):\n    '''\n    Write a function to add items to the end of the tuple.\n    '''\n    return tuple1.append(items)\n        \ndef append_dictionary(dict1,items):\n    '''\n    Write a function to add items to the end of the dictionary.\n    '''\n    return dict1.append(items)\n        \ndef remove_list_last_item(list1):\n    '''\n    Write a function to remove the last item from the list.\n    '''\n    return list1.pop()\n        \ndef remove_tuple_last_item(tuple1):\n    '''\n    Write a function to remove the last item from the tuple.\n    '''\n    return tuple1.pop()\n        \ndef remove_dictionary_last_item(dict1):\n    '''\n    Write a function to remove the last item from the dictionary.\n    '''\n    return dict1.pop()\n        \ndef reverse_list(list1):\n    '''\n    Write a function to reverse the order of items in the list.\n    '''\n    retur",
        "num_ids": 5
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(d.items() == dict().items() for d in list1):\n        return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    t = 0\n    for i in range(len(nums)):\n        t += nums[i]\n    return t\n",
        "num_ids": 33
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return nums[0] * 10 + nums[1]\n    else:\n        a = nums[0] * 100\n        b = nums[1] * 10\n        c = nums[2]\n        return a + b + c\n",
        "num_ids": 102
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    l=''\n    for i in nums:\n        l+=str(i)\n    return int(l)\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str,nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in nums))\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    i = 0\n    for elem in nums:\n        i = i * 10 + elem\n    return i\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    nums.sort()\n    return int(''.join(map(str, nums)))\n",
        "num_ids": 34
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total = total * 10 + num\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return_list = []\n    for el in test_list:\n        return_list.append([float(i) for i in el])\n    return return_list\n",
        "num_ids": 41
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(i) for i in j] for j in test_list]\n",
        "num_ids": 22
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        for element in range(len(test_list)):\n            for i in range(len(test_list[element])):\n                test_list[element][i] = float(test_list[element][i])\n        return test_list\n    except:\n        print('\\n\\tError: You must enter a list of lists.\\n')\n",
        "num_ids": 88
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(i) for i in j] for j in test_list]\n",
        "num_ids": 22
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append([float(x) for x in i])\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(item) for sublist in test_list for item in sublist]\n",
        "num_ids": 23
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sublist in test_list:\n        float_list.append(list(map(float, sublist)))\n    return float_list\n",
        "num_ids": 42
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n",
        "num_ids": 59
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    import numpy as np\n    return np.array(test_list).astype(float)\n",
        "num_ids": 25
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sub_list in test_list:\n        try:\n            result.append(float(sub_list))\n        except ValueError:\n            pass\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    new_list = []\n    for item in string:\n        new_list.append(item.split())\n    return new_list\n",
        "num_ids": 34
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \ndef reverse_list(list):\n    '''\n    Write a function that takes a list of numbers and returns the list of numbers reversed.\n    '''\n    return list[::-1]\n    \ndef list_to_string(list):\n    '''\n    Write a function that takes a list of strings and returns the list of strings joined together.\n    '''\n    return''.join(list)\n",
        "num_ids": 10
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n    \ndef list_to_string(list): \n    '''\n    Write a function to convert a list of strings to a single string separated by spaces.\n    '''\n    return \" \".join(list)\n    \ndef long_strings(list): \n    '''\n    Write a function that takes in a list of strings and returns the longest string.\n    '''\n    longest = \"\"\n    for i in list:\n        if len(i) > len(longest): \n            longest = i\n    return longest\n",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split()\n    return string_list\n",
        "num_ids": 18
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    new_list = string.split(' ')\n    return new_list\n",
        "num_ids": 20
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    lst = string.split(\" \")\n    return lst\n",
        "num_ids": 18
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    li = list(string.split(\" \"))\n    return li\n",
        "num_ids": 18
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    dict = {}\n    for i in arr:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    print(dict)\n    for i in dict:\n        if dict[i] == 1:\n            print(i)\n            break\n",
        "num_ids": 73
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        middle = (left + right) // 2\n        \n        if arr[middle] == arr[middle + 1]:\n            left = middle + 1\n        elif arr[middle] == arr[middle - 1]:\n            right = middle - 1\n        else:\n            return arr[middle]\n    return arr[left]\n",
        "num_ids": 117
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    print('arr', arr)\n    dict = {}\n    print(dict)\n    for i in arr:\n        if i in dict:\n            dict[i] = dict[i] + 1\n        else:\n            dict[i] = 1\n    print('dict', dict)\n    for i in dict:\n        if dict[i] == 1:\n            return i\n    return -1\n",
        "num_ids": 94
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n=len(arr)\n    if n==1:\n        return arr[0]\n    if n%2==0:\n        return arr[n//2]\n    else:\n        if arr[n//2]==arr[n//2-1]:\n            return arr[n//2+1]\n        return arr[n//2]\n",
        "num_ids": 84
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i] = 1\n    for i in d.keys():\n        if d[i] == 1:\n            return i\n",
        "num_ids": 64
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None:\n        return None\n    if len(arr) == 0:\n        return None\n",
        "num_ids": 27
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    num_dict = {}\n    for i in range(len(arr)):\n        if arr[i] not in num_dict:\n            num_dict[arr[i]] = 1\n        else:\n            num_dict[arr[i]] += 1\n    print(num_dict)\n    for k,v in num_dict.items():\n        if v == 1:\n            return k\n",
        "num_ids": 94
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Your code goes here:\n    if len(arr)<=1:\n        return None\n    s=set()\n    result=None\n    for i in range(len(arr)):\n        if arr[i] in s:\n            s.remove(arr[i])\n        else:\n            s.add(arr[i])\n    return s.pop()\n",
        "num_ids": 89
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # arr = [2,2,4,5,5,5,5,5,7,8,8,8,9,9,9,9,9,10]\n    i = 0\n    while i < len(arr)-1:\n        if arr[i] == arr[i+1]:\n            i += 2\n        else:\n            return arr[i]\n    return arr[-1]\n",
        "num_ids": 98
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    left, right = 0, len(arr)-1\n    while left < right:\n        mid = left + (right-left)//2\n        if mid > 0 and arr[mid] == arr[mid-1]:\n            if (mid-1) < 0 or arr[mid]!= arr[mid-1]:\n                right = mid-1\n            else:\n                left = mid+1\n        elif mid < len(arr)-1 and arr[mid] == arr[mid+1]:\n            if (mid+1) >= len(arr) or arr[mid]!= arr[mid+1]:\n                left = mid+1\n            else:\n                right = mid-1\n        else:\n            return arr[mid]\n    return arr[left]\n",
        "num_ids": 179
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product = 0\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "num_ids": 96
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return -1\n    max_product = -1\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "num_ids": 115
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list_of_tuples = [(i,j) for i,j in zip(list1[::2],list1[1::2])]\n    prod = []\n    for i in list_of_tuples:\n        prod.append(i[0] * i[1])\n    return max(prod)\n",
        "num_ids": 79
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][1])\n    return max_product\n",
        "num_ids": 94
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # example input: [(10, 2), (-3, 4), (9, 7), (-5, 6), (4, 2), (8, 3)]\n    # example output: 12\n    # example input: [(7, -3), (-1, 5), (10, 2), (-3, 4), (9, 7), (-5, 6), (4, 2), (8, 3)]\n    # example output: 96\n",
        "num_ids": 99
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = list1[0]\n    for i in range(len(list1)):\n        if i == len(list1)-1:\n            break\n        t1 = (list1[i], list1[i+1])\n        for j in range(i+2, len(list1)):\n            t2 = (list1[j], list1[j+1])\n            if j == len(list1)-1:\n                break\n            if t1 == t2:\n                temp_prod = (list1[i]*list1[i+1])*(list1[j]*list1[j+1])\n                if temp_prod > max_prod:\n                    max_prod = temp_prod\n    return max_prod\n",
        "num_ids": 186
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_tuple = ()\n    for i in range(0, len(list1) - 1):\n        for j in range(1, len(list1)):\n            if (list1[i][0] * list1[j][0]) > (list1[i][1] * list1[j][1]) and (list1[i][0] * list1[j][0]) > (list1[i][1] * list1[j][1]):\n                max_tuple = (list1[i], list1[j])\n    print(max_tuple)\n",
        "num_ids": 140
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Method 1\n    max1 = []\n    for i in range(0, len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][0] > list1[i][1] * list1[j][1]:\n                max1.append((list1[i], list1[j]))\n            else:\n                max1.append((list1[j], list1[i]))\n    print(max1)\n    return max1\n",
        "num_ids": 132
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #for element in list1:\n        #print(element)\n    list2 = [0]\n    for i in range(0,len(list1),2):\n        list2.append(max(list1[i]*list1[i+1],list1[i+1]*list1[i]))\n    return max(list2)\n",
        "num_ids": 86
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def max_product(list1):\n        max_value = 0\n        for i in list1:\n            for j in i:\n                if j > max_value:\n                    max_value = j\n        return max_value\n    list1 = list1.split(', ')\n    list1 = [i.split(',') for i in list1]\n    list1 = [[int(k) for k in i] for i in list1]\n    list1 = [[j[0]*j[1], j[1], j[0]] for j in list1]\n    list1 = [i for i in list1 if max_product(list1) == i[0]]\n    list1 = [i for i in list1 if i[0] < 0]\n    return list1[0][1]*list1[0][2]\n",
        "num_ids": 200
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for n in range(1, limit + 1):\n        sum_1 = sum(get_divisors(n))\n        sum_2 = sum(get_divisors(sum_1))\n        if sum_2 == n and sum_1!= n and sum_1!= sum_2:\n            amicable_numbers.add(n)\n            amicable_numbers.add(sum_1)\n    return sum(amicable_numbers)\n",
        "num_ids": 121
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # TODO: Define a function named amicable_numbers_sum that has one parameter named limit.\n    sum = 0\n    for i in range(1, limit+1):\n        if amicable_numbers(i):\n            sum += i\n    return sum\n",
        "num_ids": 65
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def divisors(num):\n        divisors_list = []\n        for i in range(1,num//2+1):\n            if num % i == 0:\n                divisors_list.append(i)\n        return divisors_list\n",
        "num_ids": 64
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    n = 0\n    for i in range(1, limit+1):\n        if i == sum_amicable_numbers(i):\n            n += i\n    return n\n",
        "num_ids": 44
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(2,limit):\n        if i == sum_of_divisors(sum_of_divisors(i)) and i!= sum_of_divisors(i):\n            sum += i\n    return sum\n",
        "num_ids": 64
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for num in range(1, limit):\n        if is_amicable_number(num):\n            total += num\n    return total\n",
        "num_ids": 39
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # We need to store the number in the dictionary as well as its sum\n    # Sums of amicable numbers are divisble by their original number\n    dic = {}\n    s = 0\n    for i in range(1, limit + 1):\n        j = dic_check(i, dic)\n        if j:\n            s += i + j\n        else:\n            j = dic_check(i, dic, True)\n            if j:\n                s += i + j\n        dic[i] = i\n    return s\n",
        "num_ids": 131
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = []\n    for i in range(1, limit + 1):\n        for j in range(1, i + 1):\n            sum = j + i\n            if j!= i:\n                if sum in numbers:\n                    numbers.append(j)\n                    numbers.append(i)\n                    print(j, \"+\", i, \"=\", sum)\n                else:\n                    pass\n    return sum(set(numbers))\n",
        "num_ids": 106
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(cmath.phase(complex(a,b)))*180/3.14\n",
        "num_ids": 24
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #a+bi\n    c = a+b*1j\n    #print(c)\n    return cmath.phase(c)\n",
        "num_ids": 35
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)\n",
        "num_ids": 14
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle=cmath.phase(complex(a,b))\n    return angle\n",
        "num_ids": 21
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    return cmath.phase(complex(a,b))\n",
        "num_ids": 18
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print('The angle of the complex number {0} is {1}'.format(a+b*1j, cmath.phase(a+b*1j)))\n",
        "num_ids": 41
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n",
        "num_ids": 16
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)\n",
        "num_ids": 14
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x,y = cmath.polar(a)\n    z,w = cmath.polar(b)\n    c = y/w\n    print(\"Complex number angle: {0:.6f}\".format(c))\n    return c\n",
        "num_ids": 62
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)/(cmath.pi/180)\n",
        "num_ids": 20
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # code here\n    sub_string = string\n    count = 0\n    count_zero = 0\n    count_one = 0\n    sub_string_length = len(sub_string)\n    for i in range(sub_string_length):\n        if sub_string[i] == '0':\n            count_zero = count_zero + 1\n        if sub_string[i] == '1':\n            count_one = count_one + 1\n    count = count_zero - count_one\n    return count\n",
        "num_ids": 123
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_0 = 0\n    max_1 = 0\n    current_0 = 0\n    current_1 = 0\n    for i in range(len(string)): \n        if string[i] == '1': \n            current_1 += 1\n        else: \n            current_0 += 1\n        if max_0 < current_0: \n            max_0 = current_0\n        if max_1 < current_1: \n            max_1 = current_1\n    return max_1 - max_0\n",
        "num_ids": 126
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # code goes here\n    l = len(string)\n    if l==0:\n        return 0\n    if l==1:\n        return 0 if string[0]=='0' else 1\n    maxx = l\n    for i in range(l):\n        j = l-1\n        while j>i:\n            s = string[i:j+1]\n            count_0 = 0\n            count_1 = 0\n            for k in range(len(s)):\n                if s[k] == '0':\n                    count_0 += 1\n                else:\n                    count_1 += 1\n            if count_0>count_1:\n                if count_0-count_1 > maxx:\n                    maxx = count_0-count_1\n            j -= 1\n    return maxx\n",
        "num_ids": 192
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max(map(lambda x: x[0]-x[1], list(map(lambda x: [string.count(x), len(string)-string.count(x)], ['0','1']))))\n",
        "num_ids": 51
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0 \n    count = 0\n    for i in range(len(string)): \n        if string[i] == '1': \n            count += 1\n        elif string[i] == '0': \n            count = 0\n        if count > max_length: \n            max_length = count\n    return max_length\n",
        "num_ids": 86
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    ans = 0\n    count = 0\n    for i in string:\n        if i == \"0\":\n            count = count + 1\n        else:\n            count = 0\n        ans = max(ans,count)\n    print(ans)\n",
        "num_ids": 59
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_ones = 0\n    max_zeros = 0\n    count_zeros = 0\n    count_ones = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_zeros += 1\n            if count_ones > max_ones:\n                max_ones = count_ones\n            if count_zeros > max_zeros:\n                max_zeros = count_zeros\n        else:\n            count_ones += 1\n            if count_zeros > max_zeros:\n                max_zeros = count_zeros\n            if count_ones > max_ones:\n                max_ones = count_ones\n    return max_ones - max_zeros\n",
        "num_ids": 173
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_count=0\n    count=0\n    for i in string:\n        if i=='0':\n            count=count+1\n        else:\n            count=0\n        if count>max_count:\n            max_count=count\n    print(max_count)\n    return(max_count)\n",
        "num_ids": 77
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    count_zeros = 0\n    count_ones = 0\n    for ch in string:\n        if ch == '0':\n            count_zeros += 1\n        else:\n            count_ones += 1\n        if count_zeros == count_ones:\n            if count_zeros > max_length:\n                max_length = count_zeros\n        elif count_ones > count_zeros:\n            if count_ones - count_zeros > max_length:\n                max_length = count_ones - count_zeros\n    return max_length\n",
        "num_ids": 141
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    string = '1101'\n    count0 = 0\n    count1 = 0\n    for i in string:\n        if i == '0':\n            count0 += 1\n        elif i == '1':\n            count1 += 1\n    return max(count0,count1)\n",
        "num_ids": 69
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a < b:\n        a,b = b,a\n    \n    divisors = set()\n    for i in range(1,b+1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n",
        "num_ids": 66
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math\n    return math.gcd(a,b)\n",
        "num_ids": 18
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a,b):\n        '''\n        Write a python function to find the greatest common divisor (GCD) of two numbers.\n        '''\n        while b:\n            a,b = b, a%b\n        return a\n    def find_sum(a,b):\n        '''\n        Write a python function to find the sum of all common divisors of two given numbers.\n        '''\n        return int((a*b)/gcd(a,b))\n    if a > b:\n        a,b = b,a\n    return find_sum(a,b)\nprint(sum(34,39))\n",
        "num_ids": 54
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a+b\n",
        "num_ids": 8
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            s+=i\n    return s\n",
        "num_ids": 43
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return math.gcd(a,b)\n",
        "num_ids": 14
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    if (b>a):\n        for i in range(1,a):\n            if (a%i==0 and b%i==0):\n                common_divisors.append(i)\n        print(common_divisors)\n    elif (a>b):\n        for i in range(1,b):\n            if (a%i==0 and b%i==0):\n                common_divisors.append(i)\n        print(common_divisors)\n    else:\n        print(\"Both numbers are same.\")\n    return sum(common_divisors)\n",
        "num_ids": 150
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #find GCD\n    if(b==0):\n        return a\n    else:\n        return sum(b,a%b)\n    \n    \ndef solution():\n    '''\n    Write a python function to find the nth term of a fibonacci sequence using recursion.\n    '''\n    def fibonacci(n):\n        if(n==0):\n            return 0\n        elif(n==1):\n            return 1\n        else:\n            return fibonacci(n-1)+fibonacci(n-2)\n    \n    return fibonacci(n-1)+fibonacci(n-2)\n    \n    \ndef solution_linear_time():\n    '''\n    Write a python function to find the nth term of a fibonacci sequence using iterative approach.\n    '''\n    def fibonacci(n):\n        a=0\n        b=1\n        for i in range(2,n+1):\n            c=a+b\n            a=b\n            b=c\n        return b\n    \n    return fibonacci(n-1)+fibonacci(n-2)\n    \n    \ndef solution_linear_time_sum():\n    '''\n    Write a python function to find the sum of common divisors of a list of numbers.\n    '''\n    def sum_of_common_divisors(numbers):\n        a=sum(numbers)\n        b=sum(numbers)\n        while(b>0):\n            c=sum(b,a%b)\n            a=b\n            b=c\n        return a\n        \n    return sum_of_common_divisors(numbers)\n    \n    \ndef solution_linear_time_sum_divisors():\n    '''\n    Write a python function to find the sum of prime factors of a given number.\n    '''\n    def sum_of_divisors(n):\n        prime_factors=[]\n        for i in range(2,n+1):\n            if(n%i==0):\n                prime_factors.append(i)\n        return sum(prime_factors)\n        \n    return sum_of_divisors(n)\n    \n    \n    \ndef solution_linear_time_sum_divisors_prime():\n    '''\n    Write a python function to find the sum of prime factors of a given number.\n    '''\n    def sum_of_divisors_prime(n):\n        prime_factors=[]\n        for i in range(2,n+1):\n            if(n%i==0):\n                if(is_prime(i)):\n                    prime_factors.append(i)\n        return sum(prime_factors)\n        \n    return sum_of_divisors_prime(n)\n    \n    \ndef solution_linear_time_sum_divisors_prime_factors():\n    '''\n    Write a python function to find the sum of prime factors of a given number.\n    '''\n    def sum_of_divisors_prime_factors(n):\n        prime_factors=[]\n        for i in range(2,n+1):\n            if(n%i==0):\n                if(is_prime(i)):\n                    prime_factors.append(i)\n        return prime_factors\n        \n    return sum_of_divisors_prime_factors(n)\n    \n    \ndef solution_linear_time_sum_divisors_prime_factors_set():\n    '''\n    Write a python function to find the sum of prime factors of a given number.\n    '''\n    def sum_of_divisors_prime_factors_set(n):\n        prime_factors=set()\n        for i in range(2,n+1):\n            if(n%i==0):\n                if(is_prime(i)):\n                    prime_factors.add(i)\n        return prime_factors\n        \n    return sum_of_divisors_prime_factors_set(n)\n    \n    \ndef solution_linear_time_sum_divisors_prime_factors_set_math():\n    '''\n    Write a python function to find the sum of prime factors of a given number.\n    '''\n    def sum_of_divisors_prime_factors_set_math(n):\n        prime_factors=set()\n        for i in range(2,n+1):\n            if(n%i==0):\n                if(math.sqrt(i)==int(math.sqrt(i))):\n                    prime_factors.add(i)\n        return prime_factors\n        \n    return sum_of_divisors_prime_factors_set_math(n)\n    \n    \ndef solution_linear_time_sum_divisors_prime_factors_set_math_sqrt():\n    '''\n    Write a python function to find the sum of prime factors of a given number.\n    '''\n    def sum_of_divisors_prime_factors_set_math_sqrt(n):\n        prime_factors=set()\n        for i in range(2,n+1):\n            if(n%i==0):\n                if(math.sqrt(i)==int(math.sqrt(i))):\n                    prime_factors.add(i)\n        return prime_factors\n        \n    return sum_of_divisors_prime_factors_set_math_sqrt(n)\n    \n    \ndef solution_linear_time_sum_divisors_prime_factors_set_math_sqrt_optimized():\n    '''\n    Write a python function to find the sum of prime factors of a given number.\n    '''\n    def sum_of_divisors_prime_factors_set_math_sqrt_optimized(n):\n        prime_factors=set()\n        for i in range(2,n+1):\n            if(n%i==0):\n                if(math.sqrt(i)==int(math.sqrt(i))):\n                    prime_factors.add(i)\n        return prime_factors\n        \n    return sum_of_divisors_prime_factors_set_math_sqrt_optimized(n)\n    \n    \ndef solution_linear_time_sum_divisors_prime_factors_set_math_sqrt_optimized_recursive():\n    '''\n    Write a python function to find the sum of prime factors of a given number.\n    '''\n    def sum_of_divisors_prime_factors_set_math_sqrt_optimized_recursive(n):\n        prime_factors=set()\n        for i in range(2,n+1):\n            if(n%i==0):\n                if(math.sqrt(i)==int(math.sqrt(i))):\n                    prime_factors.add(i)\n        if(n>1):\n            return sum_of_divisors_prime_factors_set_math_sqrt_optimized_recursive(n/n)\n        else:\n            return prime_factors\n        \n    return sum_of_divisors_prime_factors_set_math_sqrt_optimized_recursive(n)\n    \n    \ndef solution_linear_time_sum_divisors_prime_factors_set_math_sqrt_optimized_recursive_linear_time():\n    '''\n    Write a python function to find the sum of prime factors of a given number.\n    '''\n    def sum_of_divisors_prime_factors_set_math_sqrt_optimized_recursive_linear_time(n):\n        prime_factors=set()\n        for i in range(2,n+1):\n            if(n%i==0):\n                if(math.sqrt(i)==int(math.sqrt(i))):\n                    prime_factors.add(i)\n        if(n>1):\n            return sum_of_divisors_prime_factors_set_math_sqrt_optimized_recursive_linear_time(n/n) + prime_factors\n        else:\n            return prime_factors\n        \n    return sum_of_divisors_prime_factors_set_math_sqrt_optimized_recursive_linear_time(",
        "num_ids": 197
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = [] \n    for i in range(1,a+1): \n        if a % i == 0: \n            common_divisors.append(i) \n    for i in range(1,b+1): \n        if b % i == 0: \n            if i in common_divisors: \n                common_divisors.append(i) \n    print(common_divisors) \n    sum_divisors = sum(common_divisors) \n    return sum_divisors \n \na = int(input(\"Enter first number: \")) \nb = int(input(\"Enter second number: \")) \n \nprint(\"Sum of common divisors of two numbers is\",sum(a,b)) ",
        "num_ids": 187
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i=1\n    sum=0\n    while i<=a and i<=b:\n        if a%i==0 and b%i==0:\n            sum+=i\n        i+=1\n    return sum\ndef mul(a,b):\n    '''\n    Write a python function to find the multiplication of common divisors of two given numbers.\n    '''\n    i=1\n    mul=1\n    while i<=a and i<=b:\n        if a%i==0 and b%i==0:\n            mul=i*mul\n        i+=1\n    return mul\ndef find_gcd_lcm(a,b):\n    '''\n    Write a python function to find the gcd and lcm of two given numbers.\n    '''\n    return (a*b)/mul(a,b)",
        "num_ids": 16
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # todo\n    return x * y\n",
        "num_ids": 13
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [i for i in str if len(i) > n]\n",
        "num_ids": 19
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    words_longer = [x for x in words if len(x)>n]\n    print(words_longer)\n    return words_longer\n",
        "num_ids": 47
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = str.split(\" \")\n    return [item for item in new_list if len(item) > n]\n",
        "num_ids": 33
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    word_list = str.split()\n    \n    output_list = []\n    for word in word_list:\n        if len(word) > n:\n            output_list.append(word)\n            \n    return output_list\n    \n    \n    \n'''\nWrite a function that takes in two strings and checks to see if they are anagrams. Anagrams are words that contain the same letters, but not necessarily in the same order.\n",
        "num_ids": 41
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str.split() if len(w)>n]\n",
        "num_ids": 22
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    import re\n    return re.findall(r'\\w{'+str(n)+',}', str)\n",
        "num_ids": 30
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # split the strings by spaces\n    split_str = str.split(' ')\n    # iterate through the split string\n    for words in split_str:\n        # if the word is longer than n characters then return it\n        if len(words) > n:\n            return words\n",
        "num_ids": 68
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    list_words = str.split()\n    list_len = []\n    for i in list_words:\n        list_len.append(len(i))\n    list_len.sort()\n    new_list = []\n    for i in list_len:\n        if i > n:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 87
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    print(f\"Longer than {n} characters:\")\n    words_list = str.split(\" \")\n    for word in words_list:\n        if len(word) > n:\n            print(word)\n    return None\n",
        "num_ids": 58
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    long_list = []\n    for i in range(len(str)):\n        if len(str[i]) > n:\n            long_list.append(str[i])\n            \n    return long_list\n",
        "num_ids": 55
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= 3:\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check that the matrix is the correct size.\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Create a set of all values in the matrix.\n    values_in_matrix = set()\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            values_in_matrix.add(my_matrix[i][j])\n    \n    # Check that there are a number of each value in the matrix.\n    for value in range(1, len(my_matrix)+1):\n        if value not in values_in_matrix:\n            return False\n    \n    # Check that the matrix is a magic square.\n    sum_of_diagonals = sum(my_matrix[0][0]) + sum(my_matrix[0][-1])\n    for i in range(1, len(my_matrix)):\n        sum_of_diagonals += my_matrix[i][0] + my_matrix[i][-1]\n    if sum_of_diagonals!= sum(values_in_matrix):\n        return False\n    \n    # Check that the matrix is a magic square.\n    sum_of_cross_diagonals = sum(my_matrix[0][0]) + sum(my_matrix[-1][0])\n    for i in range(1, len(my_matrix)):\n        sum_of_cross_diagonals += my_matrix[i][0] + my_matrix[0][i]\n    if sum_of_cross_diagonals!= sum(values_in_matrix):\n        return False\n    \n    # The matrix is a magic square.\n    return True\n",
        "num_ids": 431
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # a = int(input('Enter n value: '))\n    # n = int(input('Enter m value: '))\n    # matrix = [[int(input()) for i in range(n)] for j in range(a)]\n    # # print(matrix)\n    # for j in range(a):\n    #     for i in range(n):\n    #         print(matrix[j][i], end=\" \")\n    #     print()\n    # for i in range(a):\n    #     for j in range(n):\n    #         print(matrix[j][i], end=\" \")\n    #     print()\n",
        "num_ids": 153
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= 3:\n        return False\n    elif len(my_matrix) == 3:\n        total = sum(my_matrix[0])\n        for row in my_matrix:\n            if sum(row)!= total:\n                return False\n            elif sum(row) == total:\n                return True\n",
        "num_ids": 85
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    result = True\n    sum_of_column = []\n    for col in range(0, len(my_matrix[0])):\n        sum = 0\n        for row in my_matrix:\n            sum += row[col]\n        sum_of_column.append(sum)\n    for col_sum in sum_of_column:\n        if col_sum!= sum_of_column[0]:\n            result = False\n    sum_of_diag1 = 0\n    sum_of_diag2 = 0\n    for row_num in range(0, len(my_matrix)):\n        sum_of_diag1 += my_matrix[row_num][row_num]\n        sum_of_diag2 += my_matrix[row_num][(len(my_matrix) - 1) - row_num]\n    if sum_of_diag1!= sum_of_diag2:\n        result = False\n    return result\n",
        "num_ids": 232
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == 3:\n        if sum(my_matrix[0]) == sum(my_matrix[1]) == sum(my_matrix[2]) == 15:\n            sum_diagonals = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n            if sum_diagonals == sum([sum(x) for x in my_matrix]) and sum_diagonals == 15:\n                return True\n            else:\n                return False\n    elif len(my_matrix) == 4:\n        if sum(my_matrix[0]) == sum(my_matrix[1]) == sum(my_matrix[2]) == sum(my_matrix[3]) == 15:\n            sum_diagonals = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[3][3]\n            if sum_diagonals == sum([sum(x) for x in my_matrix]) and sum_diagonals == 15:\n                return True\n            else:\n                return False\n    elif len(my_matrix) == 5:\n        if sum(my_matrix[0]) == sum(my_matrix[1]) == sum(my_matrix[2]) == sum(my_matrix[3]) == sum(my_matrix[4]) == 15:\n            sum_diagonals = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[3][3] + my_matrix[4][4]\n            if sum_diagonals == sum([sum(x) for x in my_matrix]) and sum_diagonals == 15:\n                return True\n            else:\n                return False\n    elif len(my_matrix) == 6:\n        if sum(my_matrix[0]) == sum(my_matrix[1]) == sum(my_matrix[2]) == sum(my_matrix[3]) == sum(my_matrix[4]) == sum(my_matrix[5]) == 15:\n            sum_diagonals = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[3][3] + my_matrix[4][4] + my_matrix[5][5]\n            if sum_diagonals == sum([sum(x) for x in my_matrix]) and sum_diagonals == 15:\n                return True\n            else:\n                return False\n    elif len(my_matrix) == 7:\n        if sum(my_matrix[0]) == sum(my_matrix[1]) == sum(my_matrix[2]) == sum(my_matrix[3]) == sum(my_matrix[4]) == sum(my_matrix[5]) == sum(my_matrix[6]) == 15:\n            sum_diagonals = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[3][3] + my_matrix[4][4] + my_matrix[5][5] + my_matrix[6][6]\n            if sum_diagonals == sum([sum(x) for x in my_matrix]) and sum_diagonals == 15:\n                return True\n            else:\n                return False\n    elif len(my_matrix) == 8:\n        if sum(my_matrix[0]) == sum(my_matrix[1]) == sum(my_matrix[2]) == sum(my_matrix[3]) == sum(my_matrix[4]) == sum(my_matrix[5]) == sum(my_matrix[6]) == sum(my_matrix[7]) == 15:\n            sum_diagonals = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[3][3] + my_matrix[4][4] + my_matrix[5][5] + my_matrix[6][6] + my_matrix[7][7]\n            if sum_diagonals == sum([sum(x) for x in my_matrix]) and sum_diagonals == 15:\n                return True\n            else:\n                return False\n    elif len(my_matrix) == 9:\n        if sum(my_matrix[0]) == sum(my_matrix[1]) == sum(my_matrix[2]) == sum(my_matrix[3]) == sum(my_matrix[4]) == sum(my_matrix[5]) == sum(my_matrix[6]) == sum(my_matrix[7]) == sum(my_matrix[8]) == 15:\n            sum_diagonals = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[3][3] + my_matrix[4][4] + my_matrix[5][5] + my_matrix[6][6] + my_matrix[7][7] + my_matrix[8][8]\n            if sum_diagonals == sum([sum(x) for x in my_matrix]) and sum_diagonals == 15:\n                return True\n            else:\n                return False\n    elif len(my_matrix) == 10:\n        if sum(my_matrix[0]) == sum(my_matrix[1]) == sum(my_matrix[2]) == sum(my_matrix[3]) == sum(my_matrix[4]) == sum(my_matrix[5]) == sum(my_matrix[6]) == sum(my_matrix[7]) == sum(my_matrix[8]) == sum(my_matrix[9]) == 15:\n            sum_diagonals = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[3][3] + my_matrix[4][4] + my_matrix[5][5] + my_matrix[6][6] + my_matrix[7][7] + my_matrix[8][8] + my_matrix[9][9]\n            if sum_diagonals == sum([sum(x) for x in my_matrix]) and sum_diagonals == 15:\n                return True\n            else:\n                return False\n    elif len(my_matrix) == 11:\n        if sum(my_matrix[0]) == sum(my_matrix[1]) == sum(my_matrix[2]) == sum(my_matrix[3]) == sum(my_matrix[4]) == sum(my_matrix[5]) == sum(my_matrix[6]) == sum(my_matrix[7]) == sum(my_matrix[8]) == sum(my_matrix[9]) == sum(my_matrix[10]) == 15:\n            sum_diagonals = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[3][3] + my_matrix[4][4] + my_matrix[5][5] + my_matrix[6][6] + my_matrix[7][7] + my_matrix[8][8] + my_matrix[9][9] + my_matrix[10][10]\n            if sum_diagonals == sum([sum(x) for x in my_matrix]) and sum_diagonals == 15:\n                return True\n            else:\n                return False\n    elif len(my_matrix) == 12:\n        if sum(my_matrix[0]) == sum(my_matrix[1]) == sum(my_matrix[2]) == sum(my_matrix[3]) == sum(my_matrix[4]) == sum(my_matrix[5]) == sum(my_matrix[6]) == sum(my_matrix[7]) == sum(my_matrix[8]) == sum(my_matrix[9]) == sum(my_matrix",
        "num_ids": 2013
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # write your code here\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    sum_i = 0\n    sum_j = 0\n    for i in range(len(my_matrix)):\n        sum_i += sum(my_matrix[i])\n        sum_j += my_matrix[i][i]\n    if sum_i!= sum_j:\n        return False\n    for i in range(len(my_matrix)):\n        sum_i = 0\n        for j in range(len(my_matrix)):\n            sum_i += my_matrix[i][j]\n        if sum_i!= sum_j:\n            return False\n    for j in range(len(my_matrix)):\n        sum_j = 0\n        for i in range(len(my_matrix)):\n            sum_j += my_matrix[i][j]\n        if sum_j!= sum_i:\n            return False\n    return True",
        "num_ids": 248
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # TODO: Implement your function here\n    return\n",
        "num_ids": 15
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if check_magic_square(my_matrix):\n        print(my_matrix, \"is a magic square\")\n    else:\n        print(my_matrix, \"is not a magic square\")\n",
        "num_ids": 51
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(lambda: 0)\n    for n in nums:\n        dict[n] += 1\n    max_freq = 0\n    for i in dict:\n        if dict[i] > max_freq:\n            max_freq = dict[i]\n    for i in dict:\n        if dict[i] == max_freq:\n            return i\n            \ndef sum_of_digits(n):\n    '''\n    Write a function to sum all the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_of_digits(n//10)\n",
        "num_ids": 35
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # max_freq = defaultdict(int)\n    # for num in nums:\n    #     max_freq[num] += 1\n    # return max(max_freq, key=lambda k: max_freq[k])\n",
        "num_ids": 60
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for n in nums:\n        frequency[n] += 1\n    return max(frequency, key=frequency.get)\n",
        "num_ids": 40
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = {}\n    for n in nums:\n        if n not in dic:\n            dic[n] = 1\n        else:\n            dic[n] += 1\n    # print(dic)\n    max_count = max(dic.values())\n    return [x for x in dic if dic[x] == max_count]\n",
        "num_ids": 89
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # if not nums:\n    #     return None\n    # nums.sort()\n    # mx = 0\n    # d = defaultdict(int)\n    # for i in nums:\n    #     d[i] += 1\n    #     if d[i] > mx:\n    #         mx = d[i]\n    # return mx\n",
        "num_ids": 89
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    max_freq = 0\n    item = 0\n    for n in nums:\n        d[n] += 1\n        if d[n] > max_freq:\n            max_freq = d[n]\n            item = n\n    return item\n",
        "num_ids": 73
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # If list is empty\n    if len(nums) == 0:\n        return None\n    freq_dict = {}\n    max_freq = 0\n    max_item = None\n    for item in nums:\n        if item in freq_dict:\n            freq_dict[item] += 1\n            if freq_dict[item] > max_freq:\n                max_freq = freq_dict[item]\n                max_item = item\n        else:\n            freq_dict[item] = 1\n    return max_item\n",
        "num_ids": 134
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d, key=d.get)\n",
        "num_ids": 40
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = {}\n    for num in nums:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    return max(freq_dict, key=freq_dict.get)\n",
        "num_ids": 60
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if nums == []:\n        return None\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    m = max(d.values())\n    return d.keys()[d.values().index(m)]\nprint max_occurrences([1,2,3,1,1,3])\nprint max_occurrences([])\n",
        "num_ids": 94
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowel_indices = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n",
        "num_ids": 61
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    str2 = list(str1)\n    i = 0\n    j = len(str2) - 1\n    while i < j:\n        if str2[i] not in vowels:\n            i += 1\n        elif str2[j] not in vowels:\n            j -= 1\n        else:\n            str2[i], str2[j] = str2[j], str2[i]\n            i += 1\n            j -= 1\n    return ''.join(str2)\n",
        "num_ids": 134
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u']\n    new_str = ''\n    for i in str1:\n        if i.lower() in vowels:\n            new_str += i\n    for j in str1:\n        if j.lower() not in vowels:\n            new_str += j\n    return new_str\n",
        "num_ids": 85
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set([\"a\", \"e\", \"i\", \"o\", \"u\"])\n    str2 = \"\"\n    for char in str1:\n        if char in vowels:\n            str2 += char\n    return str2[::-1]",
        "num_ids": 63
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel_list = []\n    vowel = ['a','e','i','o','u','A','E','I','O','U']\n    for i in str1:\n        if i in vowel:\n            vowel_list.append(i)\n    vowel_list.reverse()\n    print(vowel_list)\n    for i in range(0,len(str1)):\n        if str1[i] in vowel:\n            str1 = str1[:i] + vowel_list[0] + str1[i+1:]\n            vowel_list.pop(0)\n    return str1\n",
        "num_ids": 154
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowels_list = [vowel for vowel in str1 if vowel in vowels]\n    \n    start_index = 0\n    end_index = len(str1)-1\n    \n    while start_index < end_index:\n        if str1[start_index] in vowels:\n            start_index += 1\n        elif str1[end_index] in vowels:\n            end_index -= 1\n        else:\n            str1 = str1[:start_index] + str1[start_index:end_index+1][::-1] + str1[end_index+1:]\n            start_index += 1\n            end_index -= 1\n    return str1\n",
        "num_ids": 177
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowel_pos = [i for i,v in enumerate(str1) if v in vowels]\n    str_rev = str1[::-1]\n    vowel_pos = vowel_pos[::-1]\n    vowel_pos = [x for x in vowel_pos if x < len(str_rev)]\n    str_rev = str_rev[:vowel_pos[0]] + str_rev[vowel_pos[-1]+1:]\n    str_rev = str_rev[:vowel_pos[-1]] + str_rev[vowel_pos[0]+1:]\n    return str_rev\n",
        "num_ids": 173
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    vowels_in_string = set()\n    start_index = 0\n    end_index = len(str1) - 1\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_in_string.add(i)\n    while end_index >= start_index:\n        if end_index in vowels_in_string:\n            str1 = str1[:end_index] + str1[end_index].swapcase() + str1[end_index+1:]\n            end_index -= 1\n        else:\n            end_index -= 1\n        # print(str1)\n    return str1\n",
        "num_ids": 187
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = 'aeiou'\n    vowels_list = []\n    for i in str1:\n        if i in vowels:\n            vowels_list.append(i)\n    \n    #print('Vowels list:', vowels_list)\n    \n    str2 = str1.upper()\n    vowels_list2 = []\n    for i in str2:\n        if i in vowels:\n            vowels_list2.append(i)\n    \n    #print('Vowels list 2:', vowels_list2)\n    \n    reverse_vowels_list = vowels_list2[::-1]\n    \n    return ''.join(reverse_vowels_list)\n    ",
        "num_ids": 181
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    string = list(str1)\n    left, right = 0, len(string)-1\n    while left < right:\n        if string[left] in vowels:\n            string[left], string[right] = string[right], string[left]\n            right -= 1\n        else:\n            left += 1\n    return ''.join(string)\n",
        "num_ids": 99
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\nprint(tup_string(('a', 'b', 'c', 'd', 'e')))\n",
        "num_ids": 37
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result_str = ''\n    for item in tup1:\n        result_str = result_str + str(item) +''\n    return result_str[:-1]\n",
        "num_ids": 44
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str = ''\n    for i in tup1:\n        str += str(i)\n    return str\n    \ntup1 = (1, 2, 3, 4)\nprint(\"tuple before conversion: \" + tup_string(tup1))\ntup2 = (5, 6, 7, 8)\nprint(\"tuple after conversion: \" + tup_string(tup2))\n",
        "num_ids": 96
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return(str(tup1))\n",
        "num_ids": 12
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str = ''.join(tup1)\n    return str\n",
        "num_ids": 18
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return_str = ''\n    for item in tup1:\n        return_str += str(item)\n    return return_str\n",
        "num_ids": 34
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(tup1[i]) for i in range(len(tup1)))\n    \ndef tup_string_2(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n    \n    \nif __name__ == '__main__':\n    print(tup_string((1, 2, 3, 4, 5, 6, 7, 8, 9)))\n    print(tup_string_2((1, 2, 3, 4, 5, 6, 7, 8, 9)))\n",
        "num_ids": 84
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string = ''\n    for item in tup1:\n        tup_string += str(item) + ','\n    tup_string = tup_string[:-1]\n    return tup_string\n",
        "num_ids": 55
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativenum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            negativenum += nums[i]\n    return negativenum\n",
        "num_ids": 53
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sumnum = 0\n    for i in nums:\n        if i < 0:\n            sumnum += i\n    return sumnum\n",
        "num_ids": 36
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    summ = 0\n    for i in nums:\n        if i < 0:\n            summ += i\n    return summ\n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg = 0\n    for num in nums:\n        if num < 0:\n            neg = neg + num\n    return neg\n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(filter(lambda x: x < 0, nums))\n",
        "num_ids": 19
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum=0\n    for i in nums:\n        if i<0:\n            sum=sum+i\n    return sum",
        "num_ids": 32
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    negatives = 0\n    for num in nums:\n        if num < 0:\n            negatives += num\n    return negatives\n",
        "num_ids": 48
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_of_negatives = 0\n    for num in nums:\n        if num < 0:\n            sum_of_negatives += num\n",
        "num_ids": 37
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize two constants to represent sides of hexagonal numbers.\n    a = 3\n    b = 5\n    # First hexagonal number.\n    i = 1\n    # Compute the nth hexagonal number.\n    while i < n:\n        i += 1\n        # Increment a with every hexagonal number.\n        a += 6\n        # Increment b with every hexagonal number.\n        b += 10\n    return a\n",
        "num_ids": 102
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1)*n\n        \n        \ndef main():\n    print(hexagonal_num(1))\n    print(hexagonal_num(5))\n    print(hexagonal_num(8))\n    print(hexagonal_num(20))\n    \nmain()",
        "num_ids": 98
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n -1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))//2\n",
        "num_ids": 17
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    k = (2 * n) - 1\n    return k * (3 * n - 1)\n",
        "num_ids": 25
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonals = []\n    x = 0\n    while len(hexagonals) < n:\n        hexagonals.append(x * (2 * x - 1))\n        x += 1\n    return hexagonals[n - 1]\n",
        "num_ids": 59
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # base = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # hex_num = []\n    # for i in range(len(base)):\n    #     hex_num.append(base[i] + base[i+1])\n    # return hex_num[n - 1]\n    return int(n * (2 * n - 1))\n",
        "num_ids": 96
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 2\n    c = 1\n    for i in range(n):\n        c += b\n        b += a\n        a = b - a\n    return c",
        "num_ids": 46
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    print(count)\n",
        "num_ids": 33
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return nums.count(0) / len(nums)\n",
        "num_ids": 18
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    num_zeroes = 0\n    for i in nums:\n        if i == 0:\n            num_zeroes += 1\n    return num_zeroes/len(nums)\n",
        "num_ids": 61
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Your code here\n    return nums.count(0)/len(nums)\n",
        "num_ids": 23
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return (nums.count(0) / len(nums))\n    \ndef max_consec_zeroes(nums):\n    '''\n    Write a function to find the maximum number of consecutive zeroes in an array of integers.\n    '''\n    current_count = 0\n    max_count = 0\n    for i in nums:\n        if i == 0:\n            current_count += 1\n        else:\n            max_count = max(max_count, current_count)\n            current_count = 0\n    return max(max_count, current_count)\n    \ndef min_num(nums):\n    '''\n    Write a function to find the minimum non-zero value in an array of integers.\n    '''\n    min_num = None\n    for i in nums:\n        if min_num is None or i < min_num:\n            min_num = i\n    return min_num\n    \ndef min_num_index(nums):\n    '''\n    Write a function to find the minimum non-zero value in an array of integers, and return the index of that value.\n    '''\n    min_num = None\n    min_index = None\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            continue\n        elif min_num is None or nums[i] < min_num:\n            min_num = nums[i]\n            min_index = i\n    return min_index\n    \ndef find_missing_num(nums):\n    '''\n    Write a function that takes in a non-empty array of integers where all the integers are between 1 and n (n being the length of the array), and returns the missing number.\n    '''\n    max_num = max(nums)\n    for i in range(1, max_num + 1):\n        if i not in nums:\n            return i\n    \ndef find_missing_num_with_sum(nums):\n    '''\n    Write a function that takes in a non-empty array of integers where all the integers are between 1 and n (n being the length of the array), and returns the missing number. \n    Your function should work the same as find_missing_num() above, but with the addition that it returns the sum of the array's elements.\n    '''\n    sum = 0\n    max_num = max(nums)\n    for i in range(1, max_num + 1):\n        if i not in nums:\n            return i\n        else:\n            sum += i\n    return sum\n    \ndef reverse_int(nums):\n    '''\n    Write a function that reverses a string. The input string is given as an array of characters char[].\n    Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n    You may assume all the characters consist of printable ascii characters.\n    '''\n    if len(nums) == 1:\n        return nums\n    i = 0\n    j = len(nums) - 1\n    while i < j:\n        nums[i], nums[j] = nums[j], nums[i]\n        i += 1\n        j -= 1\n    return nums\n    \ndef reverse_int_in_place(nums):\n    '''\n    Write a function that reverses a string in-place. The input string is given as an array of characters char[].\n    Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n    You may assume all the characters consist of printable ascii characters.\n    '''\n    nums.reverse()\n    return nums\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function that removes all duplicates from an array. The array is given as an array of integers, and you should return the number of unique integers in the array.\n    '''\n    nums_set = set(nums)\n    return len(nums_set)\n    \ndef reverse_string(string):\n    '''\n    Write a function that reverses a string. The input string is given as an array of characters char[].\n    Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n    You may assume all the characters consist of printable ascii characters.\n    '''\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        string[i], string[j] = string[j], string[i]\n        i += 1\n        j -= 1\n    return string\n    \ndef palindrome_permutation(string):\n    '''\n    Write a function to check if a given string is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.\n    '''\n    string_count = {}\n    for i in string:\n        if i in string_count:\n            string_count[i] += 1\n        else:\n            string_count[i] = 1\n    odd_count = 0\n    for i in string_count:\n        if string_count[i] % 2 == 1:\n            odd_count += 1\n    return odd_count <= 1\n    \ndef rotate_array(nums, k):\n    '''\n    Write an efficient function to rotate an array by k elements.\n    Do not return anything, modify nums in-place instead.\n    '''\n    k = k % len(nums)\n    nums.reverse()\n    nums[:k] = nums[:k][::-1]\n    nums[k:] = nums[k:][::-1]\n    return nums\n    \ndef min_rotation(nums):\n    '''\n    Given an array of n integers nums, a pair of integers (i,j) is called good if nums[i] == nums[j] and i < j.\n    Return the number of good pairs.\n    '''\n    num_dict = {}\n    count = 0\n    for i in nums:\n        if i in num_dict:\n            num_dict[i] += 1\n        else:\n            num_dict[i] = 1\n    for i in num_dict:\n        if num_dict[i] > 1:\n            count += num_dict[i] - 1\n    return count\n    \ndef search_rotated_array(nums, target):\n    '''\n    Given a sorted array of n integers that has been rotated an unknown number of times,\n    write code to find an element in the array. You may assume that the array was originally sorted in increasing order.\n    '''\n    if target == nums[0]:\n        return 0\n    i = 0\n    j = len(nums) - 1\n    while i < j:\n        mid = (i + j) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            if nums[mid] < nums[j] and nums[j] <= target:\n                j = mid\n            else:\n                i = mid + 1\n        elif nums[mid] > target:\n            if nums[i] <= target and nums[i] >= nums[mid]:\n                i = mid + 1\n            else:\n                j = mid\n    return -1\n    \ndef search_rotated_sorted_array(nums, target):\n    '''\n    Given a sorted array of n integers that has been rotated an unknown number of times,\n    write code to find an element in the array. You may assume that the array was originally sorted in increasing order.\n    '''\n    i = 0\n    j = len(nums) - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            if nums[mid] < nums[j] and nums[j] >= target:\n                j = mid\n            else:\n                i = mid + 1\n        elif nums[mid] > target:\n            if nums[i] <= target and nums[i] > nums[mid]:\n                i = mid + 1",
        "num_ids": 142
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Keep track of the number of zeroes and non-zeroes in the list\n    num_zeroes = 0\n    num_nonzeroes = 0\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_nonzeroes += 1\n    # return the ratio\n    return num_zeroes / num_nonzeroes\n",
        "num_ids": 94
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # use counter to count zeroes and non-zeroes\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes\n",
        "num_ids": 75
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count/non_zero_count\n",
        "num_ids": 65
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    return count_zero / count_non_zero\n",
        "num_ids": 65
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n > 0):\n        sum = 0\n        while (n):\n            sum += pow(2, n % 10)\n            n = int(n / 10)\n        if (sum == n):\n            print(n, \"is a Sum of Powers of 2 number\")\n        else:\n            print(n, \"is not a Sum of Powers of 2 number\")\n    else:\n        print(n, \"is not a positive number\")\n",
        "num_ids": 105
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n:\n        if n & 1 == 0:\n            n >>= 1\n        else:\n            break\n    if n == 1:\n        return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    while (n > 0): \n        sum += (n % 2) \n        n = n // 2\n    return (sum == 1) \ndef is_Sum_Of_Powers_Of_Two_v2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n): \n        if (n & 1): \n            break\n        n = n >> 1\n    return (n == 0) \ndef is_Sum_Of_Powers_Of_Two_v3(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return (n & (n - 1) == 0) \ndef is_Sum_Of_Powers_Of_Two_v4(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n % 2 == 0): \n        n = n / 2\n    return (n == 1) \ndef is_Sum_Of_Powers_Of_Two_v5(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n % 2 == 0): \n        n = n / 2\n    return (n == 1) \nprint(is_Sum_Of_Powers_Of_Two(10)) \nprint(is_Sum_Of_Powers_Of_Two(7)) \nprint(is_Sum_Of_Powers_Of_Two(9)) \nprint(is_Sum_Of_Powers_Of_Two(0)) \nprint(is_Sum_Of_Powers_Of_Two(1)) \nprint(is_Sum_Of_Powers_Of_Two(5)) \nprint(is_Sum_Of_Powers_Of_Two(6)) \nprint(is_Sum_Of_Powers_Of_Two(8)) \nprint(is_Sum_Of_Powers_Of_Two(11)) \nprint(is_Sum_Of_Powers_Of_Two(13)) \nprint(is_Sum_Of_Powers_Of_Two(15)) \nprint(is_Sum_Of_Powers_Of_Two(16)) \nprint(is_Sum_Of_Powers_Of_Two(20)) \nprint(is_Sum_Of_Powers_Of_Two(25)) \nprint(is_Sum_Of_Powers_Of_Two(30)) \nprint(is_Sum_Of_Powers_Of_Two(31)) \nprint(is_Sum_Of_Powers_Of_Two(32)) \nprint(is_Sum_Of_Powers_Of_Two(33)) \nprint(is_Sum_Of_Powers_Of_Two(45)) \nprint(is_Sum_Of_Powers_Of_Two(100)) \nprint(is_Sum_Of_Powers_Of_Two(101)) \nprint(is_Sum_Of_Powers_Of_Two(154)) \nprint(is_Sum_Of_Powers_Of_Two(155)) \nprint(is_Sum_Of_Powers_Of_Two(320)) \nprint(is_Sum_Of_Powers_Of_Two(399)) \nprint(is_Sum_Of_Powers_Of_Two(400)) \nprint(is_Sum_Of_Powers_Of_Two(800)) \nprint(is_Sum_Of_Powers_Of_Two(1000)) \nprint(is_Sum_Of_Powers_Of_Two(1600)) \nprint(is_Sum_Of_Powers_Of_Two(1700)) \nprint(is_Sum_Of_Powers_Of_Two(1760)) \nprint(is_Sum_Of_Powers_Of_Two(1801)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1861)) \nprint(is_Sum_Of_Powers_Of_Two(1",
        "num_ids": 1656
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return 1\n    else:\n        return is_Sum_Of_Powers_Of_Two(n>>1)\ndef is_Sum_Of_Powers_Of_Two_v1(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return 1\n    else:\n        return is_Sum_Of_Powers_Of_Two_v1(n>>1) and (n&1)\nn=int(input())\nprint(is_Sum_Of_Powers_Of_Two(n))\nprint(is_Sum_Of_Powers_Of_Two_v1(n))",
        "num_ids": 91
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n==0): \n        return 1\n    if (n==1 or n==2): \n        return 1\n    while (n%2==0): \n        n=n/2\n    if (n>2): \n        return 0\n    else: \n        return 1\n    \ndef is_Sum_Of_Powers_Of_Two_v2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n>0): \n        r = n%2\n        if r==0: \n            n = n/2\n        else: \n            return 0\n    return 1\n    \ndef is_Sum_Of_Powers_Of_Two_v3(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n%2==0: \n        return 1\n    while (n%2==0): \n        n=n/2\n    if n>2: \n        return 0\n    else: \n        return 1\n        \ndef is_Sum_Of_Powers_Of_Two_v4(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n%2==0: \n        return 1\n    while (n%2==0): \n        n=n/2\n    if n>2: \n        return 0\n    else: \n        return 1\n        \ndef is_Sum_Of_Powers_Of_Two_v5(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n%2==0: \n        return 1\n    while (n%2==0): \n        n=n/2\n    if n>2: \n        return 0\n    else: \n        return 1\n        \ndef is_Sum_Of_Powers_Of_Two_v6(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n%2==0: \n        return 1\n    while (n%2==0): \n        n=n/2\n    if n>2: \n        return 0\n    else: \n        return 1\n        \ndef is_Sum_Of_Powers_Of_Two_v7(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return (n%2==0)\n    \ndef is_Sum_Of_Powers_Of_Two_v8(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n%2==0): \n        n=n/2\n    if n>2: \n        return 0\n    else: \n        return 1\n        \ndef is_Sum_Of_Powers_Of_Two_v9(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n%2==0): \n        n=n/2\n    if n>2: \n        return 0\n    else: \n        return 1\n    \nif __name__ == \"__main__\": \n    n = 16\n    print is_Sum_Of_Powers_Of_Two(n)\n    print is_Sum_Of_Powers_Of_Two_v2(n)\n    print is_Sum_Of_Powers_Of_Two_v3(n)\n    print is_Sum_Of_Powers_Of_Two_v4(n)\n    print is_Sum_Of_Powers_Of_Two_v5(n)\n    print is_Sum_Of_Powers_Of_Two_v6(n)\n    print is_Sum_Of_Powers_Of_Two_v7(n)\n    print is_Sum_Of_Powers_Of_Two_v8(n)\n    print is_Sum_Of_Powers_Of_Two_v9(n)\n    \n'''\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nTrue\nTrue\nFalse\nTrue\nTrue\nTrue\nFalse\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\nFalse\nFalse\nTrue\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nTrue\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nTrue\nTrue\nFalse\nFalse\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nFalse\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFals",
        "num_ids": 910
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0:\n        return False\n    while n:\n        if (n & 1) == 0:\n            n >>= 1\n        else:\n            break\n    return (n == 0)\n",
        "num_ids": 50
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            return False\n    return True\n    # return n and (not n & (n - 1))\n",
        "num_ids": 50
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = []\n    while n:\n        res.append(n & 1)\n        n >>= 1\n",
        "num_ids": 28
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Base cases: 1) n = 0, 2) n = 1\n    if n == 0 or n == 1:\n        return True\n",
        "num_ids": 34
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #1. take binary representation of n.\n    binary_representation = bin(n)[2:]\n    # print(\"binary representation is\", binary_representation)\n",
        "num_ids": 40
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n",
        "num_ids": 19
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    print(r*2*pi)\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    print(2 * math.pi * r)\n",
        "num_ids": 14
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n",
        "num_ids": 6
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n",
        "num_ids": 10
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    return set(item for sublist in test_list for item in sublist)\n",
        "num_ids": 23
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n    #return set([item for sublist in test_list for item in sublist])\n",
        "num_ids": 40
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, int):\n            result.append(item)\n        elif isinstance(item, list):\n            for element in item:\n                result.append(element)\n    return result\n    \ndef main():\n    test_list = [1, 2, [1, 2], [1, 2, [1, 2]], 3, [4, [5, 6, [7, 8], [9, 10]]]]\n    print(extract_singly(test_list))\n",
        "num_ids": 132
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    extracted = []\n    for i in test_list:\n        if type(i) == list:\n            extracted.extend(i)\n        else:\n            extracted.append(i)\n    return extracted\n",
        "num_ids": 54
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for number in test_list:\n        for single_number in number:\n            result.append(single_number)\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        for j in i:\n            result.append(j)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly = []\n    for item in test_list:\n        if isinstance(item, list):\n            singly.extend(item)\n        else:\n            singly.append(item)\n    return singly\n",
        "num_ids": 55
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    '''\n    extract_singly(test_list) => [1, 2, 3, 4]\n    \n    1. Use reduce and lambda: reduce(lambda x, y: x + y, test_list)\n    2. Use map and lambda: map(lambda x: reduce(lambda a, b: a + b, x), test_list)\n    3. Use map, lambda, and reduce:\n        reduce(lambda x, y: x + y, map(lambda x: reduce(lambda a, b: a + b, x), test_list))\n    '''\n    return reduce(lambda x, y: x + y, map(lambda x: reduce(lambda a, b: a + b, x), test_list))\n",
        "num_ids": 38
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_list = []\n",
        "num_ids": 9
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = [int(item) for sublist in test_list for item in sublist]\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted_list = []\n    for i in range(len(nums), 0, -1):\n        max_value = max(nums)\n        max_index = nums.index(max_value)\n        nums[0:max_index + 1] = reversed(nums[0:max_index + 1])\n        nums[0:i] = reversed(nums[0:i])\n        sorted_list.append(max_value)\n    return sorted_list\n    \n    \nif __name__ == '__main__':\n    nums = [3, 2, 4, 1]\n    print(pancake_sort(nums))\n    ",
        "num_ids": 161
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums is None:\n        return None\n    if len(nums) <= 1:\n        return nums\n    return _pancake_sort(nums, len(nums) - 1)\n",
        "num_ids": 51
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        j = 0\n        max = 0\n        while j < len(nums) - i:\n            if nums[j] > nums[max]:\n                max = j\n            j += 1\n        if max!= len(nums) - 1 - i:\n            nums = swap(nums, max, len(nums) - 1 - i)\n    return nums\n",
        "num_ids": 105
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    l = len(nums)\n    for i in range(l):\n        max_num_index = 0\n        for j in range(1, l - i):\n            if nums[j] > nums[max_num_index]:\n                max_num_index = j\n        nums = nums[:max_num_index+1][::-1] + nums[max_num_index+1:]\n        nums = nums[::-1]\n    return nums\n",
        "num_ids": 119
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1, 0, -1):\n        max_index = find_max(nums, 0, i)\n        if max_index!= i:\n            nums = flip(nums, max_index, i)\n        nums = flip(nums, 0, i)\n    return nums\n    \ndef flip(nums, start, end):\n    temp = nums[start:end + 1]\n    temp.reverse()\n    nums[start:end + 1] = temp\n    return nums\n",
        "num_ids": 134
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    curr_len = len(nums)\n    while curr_len > 1:\n        # Find index of minimum value\n        min_val_idx = 0\n        for i in range(1, curr_len):\n            if nums[i] < nums[min_val_idx]:\n                min_val_idx = i\n        # Swap minimum value with first element\n        nums[0], nums[min_val_idx] = nums[min_val_idx], nums[0]\n        # Reverse list from first element to end\n        nums[1:curr_len] = nums[1:curr_len][::-1]\n        # Reduce size of list by 1\n        curr_len -= 1\n    return nums\n",
        "num_ids": 186
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def find_max(nums):\n        max_num = None\n        for num in nums:\n            if max_num == None or num > max_num:\n                max_num = num\n        return max_num\n    \n    def find_index(nums, max_num):\n        for i in range(len(nums)):\n            if nums[i] == max_num:\n                return i\n    \n    def sort(nums):\n        i = len(nums) - 1\n        max_num = find_max(nums)\n        while i > 0:\n            index = find_index(nums, max_num)\n            if index!= 0:\n                if i!= index:\n                    nums[0:index+1] = reversed(nums[0:index+1])\n                else:\n                    nums[index] = nums[index] - 1\n                    nums[index+1:] = reversed(nums[index+1:])\n                i = index\n                max_num = find_max(nums[i:])\n            else:\n                i -= 1\n                max_num = find_max(nums[0:i+1])\n        return nums\n    \n    return sort(nums)",
        "num_ids": 298
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Note: it is not required that you should set a maximum length for the array,\n    # you can do it yourself to have a better solution.\n    # However, it is recommended to have a maximum length for the array,\n    # as a part of the solution.\n    # If you have a solution, which does not have this restriction,\n    # please post it so that we can discuss further.\n    max_len = len(nums)\n    for i in range(max_len, 0, -1):\n        # i = max_len-1\n        # while nums[i] < nums[i-1] and i>0:\n        #     temp = nums[i]\n        #     nums[i] = nums[i-1]\n        #     nums[i-1] = temp\n        #     i -= 1\n        # if i == 0:\n        #     break\n        # print(i)\n        # print(nums)\n        for j in range(i):\n            if nums[j] > nums[i-1]:\n                temp = nums[i-1]\n                nums[i-1] = nums[j]\n                nums[j] = temp\n                pancake_sort(nums[:i])\n                return\n        if i == 0:\n            break\n",
        "num_ids": 314
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    def flip(i):\n        nums[:i + 1] = nums[:i + 1][::-1]\n        return i\n    \n    \n    i = flip(0)\n    for j in range(len(nums) - 1):\n        if flip(j) == len(nums) - 1:\n            break\n        if flip(j) > flip(j + 1):\n            break\n    return nums\n",
        "num_ids": 122
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length):\n        max_value_index = 0\n        for j in range(1, length):\n            if nums[j] > nums[max_value_index]:\n                max_value_index = j\n        if max_value_index!= i:\n            nums[max_value_index], nums[i] = nums[i], nums[max_value_index]\n            pancake_sort(nums[:max_value_index+1])\n            pancake_sort(nums[max_value_index+1:])\n    return nums\n",
        "num_ids": 155
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\n    \ndef count_dif(list1,list2):\n    '''\n    Write a function to count number items that are different between two given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]!=list2[i]:\n            count+=1\n    return count\n    \ndef count_even(list1):\n    '''\n    Write a function to count number of items that are even in the given list.\n    '''\n    count=0\n    for i in list1:\n        if i%2==0:\n            count+=1\n    return count\n    \ndef count_odd(list1):\n    '''\n    Write a function to count number of items that are odd in the given list.\n    '''\n    count=0\n    for i in list1:\n        if i%2!=0:\n            count+=1\n    return count\n    \ndef count_same(list1,list2):\n    '''\n    Write a function to count number of items that are identical in the two given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]:\n            count+=1\n    return count\n    \ndef reverse(list1):\n    '''\n    Write a function to reverse the given list.\n    '''\n    return list1[::-1]\n    \ndef remove_even(list1):\n    '''\n    Write a function to remove all the even number items in the given list.\n    '''\n    list2=[]\n    for i in list1:\n        if i%2!=0:\n            list2.append(i)\n    return list2\n    \ndef remove_odd(list1):\n    '''\n    Write a function to remove all the odd number items in the given list.\n    '''\n    list2=[]\n    for i in list1:\n        if i%2==0:\n            list2.append(i)\n    return list2\n    \ndef list_from(num):\n    '''\n    Write a function to generate a list from 0 to the given number.\n    '''\n    list1=[]\n    for i in range(num):\n        list1.append(i)\n    return list1\n    \ndef list_to(num):\n    '''\n    Write a function to generate a list from the given number to 0.\n    '''\n    list1=[]\n    for i in range(num,-1,-1):\n        list1.append(i)\n    return list1\n    \ndef remove_first(list1,num):\n    '''\n    Write a function to remove the first N number of items in the given list.\n    '''\n    for i in range(num):\n        list1.pop(0)\n    return list1\n    \ndef remove_last(list1,num):\n    '''\n    Write a function to remove the last N number of items in the given list.\n    '''\n    for i in range(num):\n        list1.pop()\n    return list1\n    \ndef first_last(list1):\n    '''\n    Write a function to get first and last item of the given list.\n    '''\n    return [list1[0],list1[-1]]\n    \ndef min_max(list1):\n    '''\n    Write a function to get min and max value of the given list.\n    '''\n    return [min(list1),max(list1)]\n    \ndef sum_list(list1):\n    '''\n    Write a function to get sum of the given list.\n    '''\n    return sum(list1)\n    \ndef multiply_list(list1):\n    '''\n    Write a function to multiply all the items in the given list.\n    '''\n    product=1\n    for i in list1:\n        product*=i\n    return product\n    \ndef largest_smallest(list1):\n    '''\n    Write a function to get largest and smallest value of the given list.\n    '''\n    return [max(list1),min(list1)]\n    \ndef list_divide(list1,num):\n    '''\n    Write a function to divide all the items in the given list by the given number.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(i/num)\n    return list2\n    \ndef list_addition(list1,list2):\n    '''\n    Write a function to get the sum of two lists.\n    '''\n    list3=[]\n    for i in range(len(list1)):\n        list3.append(list1[i]+list2[i])\n    return list3\n    \ndef list_subtraction(list1,list2):\n    '''\n    Write a function to get the difference of two lists.\n    '''\n    list3=[]\n    for i in range(len(list1)):\n        list3.append(list1[i]-list2[i])\n    return list3\n    \ndef list_overlay(list1,list2):\n    '''\n    Write a function to overlay two lists.\n    '''\n    list3=[]\n    for i in range(len(list1)):\n        list3.append(list1[i])\n        list3.append(list2[i])\n    return list3\n    \ndef list_copy(list1):\n    '''\n    Write a function to copy the given list.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(i)\n    return list2\n    \ndef list_membership(list1,num):\n    '''\n    Write a function to check whether the given number exist in the given list.\n    '''\n    return num in list1\n    \ndef list_index(list1,num):\n    '''\n    Write a function to check the index of the given number in the given list.\n    '''\n    return list1.index(num)\n    \ndef list_insert(list1,num,index):\n    '''\n    Write a function to insert the given number at the given index in the given list.\n    '''\n    list1.insert(index,num)\n    \ndef list_clear(list1):\n    '''\n    Write a function to clear the given list.\n    '''\n    list1.clear()\n    \ndef list_count(list1,num):\n    '''\n    Write a function to count the number of times the given number exists in the given list.\n    '''\n    return list1.count(num)\n    \ndef list_pop(list1,num):\n    '''\n    Write a function to remove the given number from the given list.\n    '''\n    list1.pop(num)\n    \ndef list_sort(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    list1.sort()\n    \ndef list_reverse(list1):\n    '''\n    Write a function to reverse the given list.\n    '''\n    list1.reverse()\n    \ndef list_swap(list1,list2):\n    '''\n    Write a function to swap two lists.\n    '''\n    list3=list_copy(list1)\n    list3,list2=list2,list3\n    return [list1,list2]\n    \ndef list_join(list1,list2):\n    '''\n    Write a function to join two lists as a string.\n    '''\n    return ''.join(list1)+''.join(list2)\n    \ndef list_copy(list1):\n    '''\n    Write a function to copy the given list.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(i)\n    return list2\n    \ndef list_membership(list1,num):\n    '''\n    Write a function to check whether the given number exist in the given list.\n    '''\n    return num in list1\n    \ndef list_index(list1,num):\n    '''\n    Write a function to check the index of the given numbe",
        "num_ids": 15
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            result += 1\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j]==list3[i]:\n                count=count+1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # if list1 is not None and list2 is not None and list3 is not None:\n    #     if list1 == list2:\n    #         if list1 == list3:\n    #             return len(list1)\n    #         else:\n    #             return count_samepair(list1,list3)\n    #     else:\n    #         if list1 == list3:\n    #             return count_samepair(list2,list1)\n    #         elif list2 == list3:\n    #             return count_samepair(list1,list2)\n    #         else:\n    #             return 0\n    # else:\n    #     return 0\n",
        "num_ids": 162
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num = 0\n    for a in list1:\n        for b in list2:\n            if a == b:\n                for c in list3:\n                    if a == c:\n                        num += 1\n    return num\n",
        "num_ids": 54
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # a = list1[0:1]\n    # b = list2[0:1]\n    # c = list3[0:1]\n    # d = []\n    # d = a + b + c\n    # print(d)\n    # # d = a + b\n    # # print(d)\n    # # print(list1[0:1])\n    # # print(list2[0:1])\n    # # print(list3[0:1])\n    # # print(list1[0:1])\n    # # print(list2[0:1])\n    # # print(list3[0:1])\n    # # print(list1[0:1])\n    # # print(list2[0:1])\n    # # print(list3[0:1])\n    # print(len(set(d)))\n",
        "num_ids": 206
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter=0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i] and list1[i]==list3[i]:\n            counter+=1\n    return counter\n",
        "num_ids": 69
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list_res=[]\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            list_res.append(list1[i])\n    return list_res\n",
        "num_ids": 61
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            counter += 1\n    return counter\n",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n",
        "num_ids": 9
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(list(filter(lambda x: type(x) is list,Input))) \n",
        "num_ids": 24
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    import re\n    list_count = 0\n    for i in Input:\n        if type(i) == list:\n            list_count += 1\n    return list_count\n",
        "num_ids": 43
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list1 = []\n    for x in Input:\n        if type(x) == list:\n            list1.append(x)\n    return len(list1)\n",
        "num_ids": 42
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = 0\n    for i in Input:\n        if type(i) == type([]):\n            lists += 1\n    return lists\n",
        "num_ids": 35
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = list(Input)\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for x in Input: \n        if type(x) == type([]): \n            count += 1\n    return count \n",
        "num_ids": 39
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = 0\n    for elem in Input:\n        if type(elem) == type([]):\n            lists += 1\n    return lists\n",
        "num_ids": 37
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return sum(1 for x in Input if type(x) == list)\n",
        "num_ids": 20
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for a in Input:\n        if type(a) == list:\n            list_count += 1\n    return list_count\n",
        "num_ids": 39
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n",
        "num_ids": 9
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = 0\n",
        "num_ids": 17
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    Abs_Diff=list()\n    Abs_Diff.append(arr[0])\n    Abs_Diff.append(arr[1])\n    Abs_Diff.append(abs(arr[0]-arr[1]))\n    for x in range(len(arr)):\n        for y in range(x+1,len(arr)):\n            if abs(arr[x]-arr[y])>Abs_Diff[2]:\n                Abs_Diff.pop()\n                Abs_Diff.pop()\n                Abs_Diff.append(abs(arr[x]-arr[y]))\n                Abs_Diff.append(arr[x])\n                Abs_Diff.append(arr[y])\n    return Abs_Diff[2]\n",
        "num_ids": 169
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(a - b) for a, b in zip(arr, sorted(arr)))\n",
        "num_ids": 26
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_sorted = sorted(arr)\n    return max(arr_sorted[-1] - arr_sorted[0], arr_sorted[-2] - arr_sorted[1])\n",
        "num_ids": 50
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    n = len(arr)\n    max_diff = arr[1] - arr[0]\n    for i in range(0,n-1):\n        if abs(arr[i] - arr[i+1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i+1])\n    return max_diff\n",
        "num_ids": 86
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            max_diff = max(max_diff,abs(arr[i]-arr[j]))\n    return max_diff\n",
        "num_ids": 66
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diff = 0\n    arr.sort()\n    for i in range(0, len(arr)-1):\n        if (arr[i] - arr[i+1]) > diff:\n            diff = arr[i] - arr[i+1]\n    return diff\n",
        "num_ids": 65
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    arr.sort()\n    print(arr)\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    print(max_diff)\n",
        "num_ids": 74
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % a == 0:\n        return (n // a, 0)\n    if n % b == 0:\n        return (0, n // b)\n    else:\n        return None\n",
        "num_ids": 48
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # assume a and b are all ints, a >= b >= 1, and n is a positive integer\n    # let the functions n_divisors and n_sqrt determine n's divisors and square root\n    # search through all possible x's and y's, until we find a solution\n    for x in range(n_sqrt(n), -1, -1):\n        if n % x == 0:\n            y = n // x\n            if x >= y:\n                return x, y\n    return None\n",
        "num_ids": 122
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if not is_coprime(a, n):\n        return None\n    elif a == 1:\n        return (1, -n)\n    elif b == 1:\n        return (n, 1)\n    elif b == -1:\n        return (-n, 1)\n    else:\n        s = gcd(a, n)\n        return (int((n / s) % a), int((n / s) / a))\n",
        "num_ids": 107
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        y = n / x\n        if y == int(y):\n            return int(x), int(y)\n    return None\n",
        "num_ids": 44
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # we will have at most one solution\n    for x in range(n):\n        for y in range(n):\n            if a * x + b * y == n:\n                return (x, y)\n",
        "num_ids": 51
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return x, y\n    return None\n",
        "num_ids": 43
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        if a*x + b*n == 0:\n            return x, n/b\n    return None\n",
        "num_ids": 36
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    result = None\n",
        "num_ids": 7
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if x*a + y*b == n:\n                return (x, y)\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # if n < 0:\n    #     return None\n    # x = 0\n    # y = n\n    # while x!= n:\n    #     x = n - y\n    #     y = n / x\n    # return int(x), int(y)\n    return (n - b) / a, b\n",
        "num_ids": 79
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return list1\n    # insert element in list1 to beginning of list\n    list1.insert(0, list1[-1])\n    # compare last element of list1 to first element of list2\n    while list1[0]!= list2[0]:\n        # if last element of list1 is not equal to first element of list2, pop last element of list1\n        list1.pop()\n    # remove elements in list2 from the list\n    list2.clear()\n    return list1\n",
        "num_ids": 138
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n",
        "num_ids": 39
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        while elem in list1:\n            list1.remove(elem)\n    return list1\n",
        "num_ids": 35
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = list1.copy()\n    for i in list2:\n        if i in list3:\n            list3.remove(i)\n    return list3\n",
        "num_ids": 42
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1[:] = [x for x in list1 if x not in list2]\n",
        "num_ids": 23
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n",
        "num_ids": 18
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n",
        "num_ids": 39
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_list = []\n    while True:\n        num = n - 2*n\n        if num < 0:\n            break\n        else:\n            sum_list.append(num)\n            n = num\n    return sum(sum_list)\n",
        "num_ids": 61
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n    ",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n",
        "num_ids": 42
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n):\n        s += n - 2 * i\n    return s\n",
        "num_ids": 29
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def sum_series_helper(n):\n        if n == 1:\n            return 1\n        else:\n            return n + sum_series_helper(n-2)\n    if n == 0:\n        return 0\n    else:\n        return sum_series_helper(n)\n",
        "num_ids": 72
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n-2)\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    if n > 2:\n        for i in range(n//2):\n            sum += (n-2*i)\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n if n < 1 else sum_series(n-2) + n\n",
        "num_ids": 21
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    elif n > 1:\n        return n + sum_series(n - 2)\n    else:\n        return 'Bad input.'\n",
        "num_ids": 45
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return \"Cannot accept negative values\"\n    if n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(n):\n            if i % 2 == 0:\n                sum = sum + (n - 2*i)\n        return sum\n",
        "num_ids": 74
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    print(f'area of the polygon: {round(s*l*0.5*tan(pi/s), 2)}')\ndef area_triangle(s, l):\n    '''\n    Write a function to calculate the area of a regular triangle given the length of its sides.\n    '''\n    print(f'area of the triangle: {round(s*(l**2)/(4*tan(pi/s)), 2)}')\ndef area_rectangle(l, w):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    print(f'area of the rectangle: {round(l*w, 2)}')\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius of it.\n    '''\n    print(f'area of the circle: {round((pi*(r**2))/2, 2)}')\ndef area_parallelogram(b, h):\n    '''\n    Write a function to calculate the area of a parallelogram given the base and height of it.\n    '''\n    print(f'area of the parallelogram: {round((b*h), 2)}')\ndef area_trapezoid(b1, b2, h):\n    '''\n    Write a function to calculate the area of a trapezoid given the base of the shorter and the height of it.\n    '''\n    print(f'area of the trapezoid: {round((((b1+b2)/2)*h), 2)}')\ndef area_square(side):\n    '''\n    Write a function to calculate the area of a square given its side.\n    '''\n    print(f'area of the square: {round(side**2, 2)}')\ndef area_triangle_right_angle(s1, s2):\n    '''\n    Write a function to calculate the area of a triangle given the length of its sides.\n    '''\n    print(f'area of the right triangle: {round((s1*s2)/2, 2)}')\ndef area_right_angle_triangle(s1, s2):\n    '''\n    Write a function to calculate the area of a triangle given the length of its sides.\n    '''\n    print(f'area of the right triangle: {round((s1*s2)/2, 2)}')\ndef area_equilateral_triangle(s):\n    '''\n    Write a function to calculate the area of an equilateral triangle given the length of its side.\n    '''\n    print(f'area of the equilateral triangle: {round((s**2)/4*(3**0.5), 2)}')\ndef area_parallel_rectangle(s, h):\n    '''\n    Write a function to calculate the area of a parallel rectangle given its length and width.\n    '''\n    print(f'area of the parallel rectangle: {round(s*h, 2)}')\ndef area_trapezoid_area(s1, s2, h):\n    '''\n    Write a function to calculate the area of a trapezoid given the base of the shorter and the height of it.\n    '''\n    print(f'area of the trapezoid: {round((((s1+s2)/2)*h), 2)}')\ndef area_rhombus(d):\n    '''\n    Write a function to calculate the area of a rhombus given the diagnoal of it.\n    '''\n    print(f'area of the rhombus: {round((d**2)/2, 2)}')\ndef area_square_root(side):\n    '''\n    Write a function to calculate the area of a square root given its side.\n    '''\n    print(f'area of the square root: {round(side**2, 2)}')\ndef area_pentagon(side):\n    '''\n    Write a function to calculate the area of a pentagon given the length of one of its sides.\n    '''\n    print(f'area of the pentagon: {round((5*(side**2))/4, 2)}')\ndef area_hexagon(side):\n    '''\n    Write a function to calculate the area of a hexagon given the length of one of its sides.\n    '''\n    print(f'area of the hexagon: {round((6*(side**2))/4, 2)}')\ndef area_octagon(side):\n    '''\n    Write a function to calculate the area of an octagon given the length of one of its sides.\n    '''\n    print(f'area of the octagon: {round((8*(side**2))/4, 2)}')\ndef area_circle_sector(side):\n    '''\n    Write a function to calculate the area of a circle sector given the length of one of its sides.\n    '''\n    print(f'area of the circle sector: {round((side**2)/2, 2)}')\ndef area_circle_sector_bis(side):\n    '''\n    Write a function to calculate the area of a circle sector given the length of one of its sides.\n    '''\n    print(f'area of the circle sector: {round((pi*(side**2))/2, 2)}')\ndef area_circle_sector_inc(side):\n    '''\n    Write a function to calculate the area of a circle sector given the length of one of its sides.\n    '''\n    print(f'area of the circle sector: {round(((side**2)/2)*pi, 2)}')\ndef area_circle_sector_dec(side):\n    '''\n    Write a function to calculate the area of a circle sector given the length of one of its sides.\n    '''\n    print(f'area of the circle sector: {round(((side**2)/2)*(pi/2), 2)}')\ndef area_circle_sector_tri(side):\n    '''\n    Write a function to calculate the area of a circle sector given the length of one of its sides.\n    '''\n    print(f'area of the circle sector: {round(((side**2)*3/2)*(pi/2), 2)}')\ndef area_circle_sector_quad(side):\n    '''\n    Write a function to calculate the area of a circle sector given the length of one of its sides.\n    '''\n    print(f'area of the circle sector: {round(((side**2)*3/2)*(pi/2), 2)}')\ndef area_circle_sector_sq(side):\n    '''\n    Write a function to calculate the area of a circle sector given the length of one of its sides.\n    '''\n    print(f'area of the circle sector: {round(((side**2)*3/2)*(pi/2), 2)}')\ndef area_circle_sector_num(n):\n    '''\n    Write a function to calculate the area of a circle sector given the length of one of its sides.\n    '''\n    print(f'area of the circle sector: {round((n**2)*(pi/2), 2)}')\ndef area_circle_sector_left(side):\n    '''\n    Write a function to calculate the area of a circle sector given the length of one of its sides.\n    '''\n    print(f'area of the circle sector: {round(((side**2)/2)*(pi/2), 2)}')\ndef area_circle_sector_right(side):\n    '''\n    Write a function to calculate the area of a circle sector given the length of one of its sides.\n    '''\n    print(f'area of the circle sector: {round(((side**2)/2)*(pi/2), 2)}')\ndef area_circle_sector_bis_right(side):\n    '''\n    Write a function to calculate the area of a circle sector given the length of one of its sides.\n    '''\n    print(f'area of the circle sector: {round(((side**2)*(pi/2))/2, 2)}')\ndef area_circle_sector_bis_left(side):\n    '''\n    Write a function to calculate the area of a circle sector given the length of one of its sides.\n    '''\n    print(f'area of the circle sector: {round(((side**2)*(pi/2))/2, 2)}')\ndef area_circle_sector_inc_left(side):\n    '''\n    Write a function to calculate the area of a circle sector given the length of one o",
        "num_ids": 20
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = len(s)\n    A = (0.25*n*l**2)/(tan(pi/n))\n    return A\n",
        "num_ids": 36
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (s*l)/2\n    return a\n",
        "num_ids": 16
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (s ** 2) / (4 * tan(pi / l))\n    return a\n",
        "num_ids": 25
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    if l < 3:\n        print('Given length of a polygon has to be greater than 3. Not possible to calculate.')\n        return\n    a = (l * l) / (4 * tan(pi / l))\n    return a\n",
        "num_ids": 60
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2 * ((3*s)/(4*tan(pi/l)) - tan(pi/l))) / 2\n    print('The area of the polygon is:'+ str(area))\n",
        "num_ids": 51
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2)*(tan(pi/l))/4\n",
        "num_ids": 19
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * s * pi) / (4 * tan(pi / l))\n    return area\n",
        "num_ids": 27
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l/2) * (1 + tan(pi/l))\n",
        "num_ids": 22
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l**2) / (4 * tan(pi/s))\n",
        "num_ids": 22
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1,n): \n        if n%i == 0: \n            s += i \n    if s == n: \n        return True \n    else: \n        return False\ndef sum_of_divisors(n): \n    '''\n    Write a function to determine if the sum of the divisors of a number are equal to the number itself.\n    '''\n    s = 0\n    for i in range(1,n): \n        if n%i == 0: \n            s += i \n    if s == n: \n        return True \n    else: \n        return False\ndef unique_prime_factors(n): \n    '''\n    Write a function to determine how many unique prime factors a number has. \n    '''\n    count = 0 \n    while n > 1: \n        if n % 2 == 0: \n            count += 1\n            n = n / 2\n        else: \n            count += 1 \n            for i in range(3, int(math.sqrt(n))+1, 2): \n                if n%i == 0: \n                    n = n / i\n                    break \n    return count \ndef prime_factorization(n): \n    '''\n    Write a function that returns a list of the prime factors of a number.\n    '''\n    p = 2 \n    l = [] \n    while n > 1: \n        if n%p == 0: \n            l.append(p) \n            n = n / p \n        else: \n            p += 1 \n    return l \ndef compute_factorial(n): \n    '''\n    Write a function that computes the factorial of a number.\n    '''\n    fact = 1 \n    for i in range(1,n+1): \n        fact *= i \n    return fact \ndef combinations(n,r): \n    '''\n    Write a function to determine the number of possible combinations from n of r.\n    '''\n    return (math.factorial(n))/(math.factorial(r)*math.factorial(n-r))\ndef combinations_list(n,r): \n    '''\n    Write a function to determine the number of possible combinations from n of r.\n    '''\n    return [math.factorial(n)/(math.factorial(r)*math.factorial(n-r)) for n in range(r,n+1)]\ndef convert_base(n,b): \n    '''\n    Write a function to convert a number from base 10 to base b. \n    '''\n    if n == 0: \n        return [0] \n    l = convert_base(n//b,b)\n    l.append(n%b)\n    return l \ndef decimal_to_binary(n): \n    '''\n    Write a function to convert a number from decimal to binary. \n    '''\n    return convert_base(n,2)\ndef decimal_to_hexadecimal(n): \n    '''\n    Write a function to convert a number from decimal to hexadecimal. \n    '''\n    return convert_base(n,16)\ndef hexadecimal_to_decimal(n): \n    '''\n    Write a function to convert a number from hexadecimal to decimal. \n    '''\n    return convert_base(n,16)\ndef hexadecimal_to_binary(n): \n    '''\n    Write a function to convert a number from hexadecimal to binary. \n    '''\n    return convert_base(n,2)\ndef binary_to_decimal(n): \n    '''\n    Write a function to convert a number from binary to decimal. \n    '''\n    return convert_base(n,2)\ndef decimal_to_any_base(n,b): \n    '''\n    Write a function to convert a number from decimal to any base. \n    '''\n    return convert_base(n,b)\ndef any_base_to_decimal(n,b): \n    '''\n    Write a function to convert a number from any base to decimal. \n    '''\n    return convert_base(n,b)\ndef decimal_to_any_base(n,b): \n    '''\n    Write a function to convert a number from decimal to any base. \n    '''\n    return convert_base(n,b)\ndef any_base_to_decimal(n,b): \n    '''\n    Write a function to convert a number from any base to decimal. \n    '''\n    return convert_base(n,b)\ndef is_pythagorean_triplet(a,b,c): \n    '''\n    Write a function to determine if three numbers can be used to form a Pythagorean triplet. \n    '''\n    if (a**2 + b**2) == c**2: \n        return True \n    elif (a**2 + c**2) == b**2: \n        return True \n    elif (b**2 + c**2) == a**2: \n        return True \n    else: \n        return False \ndef least_common_multiple(a,b): \n    '''\n    Write a function to determine the least common multiple of two numbers. \n    '''\n    if a > b: \n        greater = a \n    else: \n        greater = b \n    while True: \n        if greater % a == 0 and greater % b == 0: \n            return greater \n        greater += 1 \ndef least_common_multiple_list(a): \n    '''\n    Write a function to determine the least common multiple of a list of numbers. \n    '''\n    return least_common_multiple(a[0],a[1])\ndef multiplicative_inverse(a,n): \n    '''\n    Write a function to determine the multiplicative inverse of a number. \n    '''\n    if n%a!= 0: \n        return None \n    x = 0 \n    y = 1 \n    l = a \n    while a*y!= 1: \n        x += 1 \n        y = (l * y) % n \n    return y \ndef multiplicative_inverse_list(a): \n    '''\n    Write a function to determine the multiplicative inverse of a list of numbers. \n    '''\n    return [multiplicative_inverse(a[i],a[i+1]) for i in range(len(a)-1)]\ndef mod_exp(a,b,n): \n    '''\n    Write a function to determine the mod exponent of a number. \n    '''\n    if b == 1: \n        return a%n \n    else: \n        return a*mod_exp(a,b-1,n) % n \ndef mod_exp_list(a,b): \n    '''\n    Write a function to determine the mod exponent of a list of numbers. \n    '''\n    return [mod_exp(a[i],b[i],a[i+1]) for i in range(len(a)-1)]\ndef partition(n): \n    '''\n    Write a function to determine if a number is parition of two numbers. \n    '''\n    return sum_of_divisors(n) == n \ndef partition_list(n): \n    '''\n    Write a function to determine if a number is parition of two numbers. \n    '''\n    return sum_of_divisors(n) == n \ndef simple_number(n): \n    '''\n    Write a function to determine if a number is simple. \n    '''\n    if n == 1: \n        return False \n    for i in range(2,n): \n        if n % i == 0: \n            return False \n    return True \ndef simple_number_list(n): \n    '''\n    Write a function to determine if a number is simple. \n    '''\n    return [simple_number(i) for i in n]\ndef count_simple_numbers(n): \n    '''\n    Write a function to determine the number of simple numbers less than or equal to n. \n    '''\n    return sum(simple_number_list(n))\ndef factor_count(",
        "num_ids": 20
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum_list = [] \n    for i in range(1,n):\n        if n % i == 0:\n            div_sum_list.append(i)\n    sum1 = sum(div_sum_list)\n    \n    div_sum_list = [] \n    for j in range(1,n):\n        if n % j == 0:\n            div_sum_list.append(j)\n    sum2 = sum(div_sum_list)\n",
        "num_ids": 114
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            i = 3\n            while i < math.sqrt(n):\n                if n % i == 0:\n                    if n / i == i:\n                        return True\n                    else:\n                        return False\n                i += 2\n            return True\ndef div_sum_list(n):\n    '''\n    Write a function to determine if the sum of the divisors of a list of integers are the same.\n    '''\n    if n == 1:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            i = 3\n            while i < math.sqrt(n):\n                if n % i == 0:\n                    if n / i == i:\n                        return True\n                    else:\n                        return False\n                i += 2\n            return True\ndef sum_list(n):\n    '''\n    Write a function to determine if a list of integers are a pandigital number.\n    '''\n    a = list(n)\n    a.sort()\n    b = 0\n    while b < len(a):\n        a[b] = str(a[b])\n        b += 1\n    a = \"\".join(a)\n    return len(a) == 9 and len(set(a)) == 9\ndef is_prime(n):\n    '''\n    Write a function to determine if a number is a prime number.\n    '''\n    if n == 1:\n        return False\n    else:\n        i = 2\n        while i < math.sqrt(n):\n            if n % i == 0:\n                return False\n            i += 1\n        return True\ndef is_pandigital(n):\n    '''\n    Write a function to determine if a number is a pandigital number.\n    '''\n    a = list(n)\n    a.sort()\n    b = 0\n    while b < len(a):\n        a[b] = str(a[b])\n        b += 1\n    a = \"\".join(a)\n    return len(a) == 9 and len(set(a)) == 9\ndef divisor(n):\n    '''\n    Write a function to determine the divisors of a number.\n    '''\n    if n == 1:\n        return 0\n    else:\n        i = 1\n        while i < math.sqrt(n):\n            if n % i == 0:\n                if n / i == i:\n                    return i\n                else:\n                    return i, n / i\n            i += 1\n        return n\ndef prime_factors(n):\n    '''\n    Write a function to determine the prime factors of a number.\n    '''\n    if n == 1:\n        return []\n    else:\n        i = 2\n        while i < math.sqrt(n):\n            if n % i == 0:\n                if n / i == i:\n                    return [i]\n                else:\n                    return [i] + prime_factors(n / i)\n            i += 1\n        return [n]\ndef palindrome(n):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    a = str(n)\n    if a == a[::-1]:\n        return True\n    return False\ndef palindrome_list(n):\n    '''\n    Write a function to determine if a list of integers are a palindrome.\n    '''\n    a = list(n)\n    a.sort()\n    b = a[::-1]\n    return a == b\ndef prime_list(n):\n    '''\n    Write a function to determine if a list of integers are primes.\n    '''\n    a = list(n)\n    b = []\n    for i in a:\n        if is_prime(i):\n            b.append(i)\n    return b\ndef greatest_prime_factor(n):\n    '''\n    Write a function to determine the greatest prime factor of a number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        if is_prime(n):\n            return n\n        else:\n            i = 2\n            while i < math.sqrt(n):\n                if n % i == 0:\n                    if is_prime(i):\n                        return i\n                    else:\n                        return greatest_prime_factor(n / i)\n                i += 1\n            return n\ndef greatest_prime_factor_list(n):\n    '''\n    Write a function to determine the greatest prime factor of a list of integers.\n    '''\n    a = list(n)\n    b = []\n    for i in a:\n        if is_prime(i):\n            b.append(i)\n        else:\n            b.append(greatest_prime_factor(i))\n    return b\ndef least_prime_factor(n):\n    '''\n    Write a function to determine the least prime factor of a number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        if is_prime(n):\n            return 1\n        else:\n            i = 2\n            while i < math.sqrt(n):\n                if n % i == 0:\n                    if is_prime(i):\n                        return i\n                    else:\n                        return least_prime_factor(n / i)\n                i += 1\n            return n\ndef least_prime_factor_list(n):\n    '''\n    Write a function to determine the least prime factor of a list of integers.\n    '''\n    a = list(n)\n    b = []\n    for i in a:\n        if is_prime(i):\n            b.append(i)\n        else:\n            b.append(least_prime_factor(i))\n    return b\ndef pythagorean_triplet(a, b):\n    '''\n    Write a function to determine if three numbers are a pythagorean triplet.\n    '''\n    if (a ** 2 + b ** 2) == (c ** 2):\n        return True\n    return False\ndef pythagorean_triplet_list(n):\n    '''\n    Write a function to determine if a list of integers are pythagorean triplets.\n    '''\n    a = list(n)\n    a.sort()\n    b = 0\n    while b < len(a):\n        c = a[b]\n        a[b] = a[b] ** 2\n        a[b + 1] = a[b + 1] ** 2\n        if pythagorean_triplet(a[b], a[b + 1]):\n            return True\n        b += 1\n    return False\ndef is_prime_square(n):\n    '''\n    Write a function to determine if a number is a prime square.\n    '''\n    if is_prime(n):\n        if n ** 0.5 == int(n ** 0.5):\n            return True\n    return False\ndef is_prime_square_list(n):\n    '''\n    Write a function to determine if a list of integers are a list of prime squares.\n    '''\n    a = list(n)\n    b = 0\n    while b < len(a):\n        if is_prime_square(a[b]):\n            a[b] = str(a[b])\n            b += 1\n        else:\n            a.pop(b)\n    a = \"\".join(a)\n    return len(a) == 9 and len(set(a)) == 9\ndef prime_square_list(n):\n    '''\n    Write a function to determine if a list of integers are prime squares.\n    '''\n    a = list(n)\n    b = []\n    for i in a:\n        if is_prime_square(i):\n            b.append(i)\n    return b\ndef prime_power(n):\n    '''\n    Write a function to determine if a number is a prime power.\n    '''\n    if n == 1:\n        return False\n    else:\n        i = 2\n        while i < math.sqrt(n):\n            if n % i == 0:\n                if n / i == i:\n                    return True\n                else:\n                    return False\n            i += 1\n        return True\ndef prime_power_list(n):\n    '''\n    Write a functio",
        "num_ids": 8
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Initialize sum and initialize sum1 and sum2 to zero \n    sum = 0\n    sum1 = 0\n    sum2 = 0\n    # If n is equal to 0, then return -1 \n    if n == 0: \n        return -1\n    # Find all divisors of n \n    for i in range(1, (n // 2) + 1): \n        if n % i == 0: \n            sum += i \n    # If the sum of all divisors of n equals to n, then the function returns True \n    if sum == n: \n        return True\n    # Find all divisors of n \n    for i in range(1, (n // 2) + 1): \n        if n % i == 0: \n            sum1 += i \n    # If the sum of all divisors of n equals to n, then the function returns True \n    if sum1 == n: \n        return True\n    # Find all divisors of n \n    for i in range(1, (n // 2) + 1): \n        if n % i == 0: \n            sum2 += i \n    # If the sum of all divisors of n equals to n, then the function returns True \n    if sum2 == n: \n        return True\n    # If the sum of all divisors of n doesn't equal to n, then the function returns False \n    return False\n",
        "num_ids": 336
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for x in range(1, n): \n        if n % x == 0:\n            div_sum += x\n    return div_sum\n",
        "num_ids": 43
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Function to find the sum of divisors \n    # For each number, we will find the sum of its proper divisors \n    # Then, we will check if the sum of divisors are equal\n    # If yes, we will return True \n    # else, we will return False \n",
        "num_ids": 72
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #a = n / 2 + 1 #a/b + 1 = c, a = c * b \n    #if a * 2 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 3 + 1 #a/b + 1 = c, a = c * b\n    #if a * 3 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 4 + 1 #a/b + 1 = c, a = c * b\n    #if a * 4 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 5 + 1 #a/b + 1 = c, a = c * b\n    #if a * 5 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 6 + 1 #a/b + 1 = c, a = c * b\n    #if a * 6 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 7 + 1 #a/b + 1 = c, a = c * b\n    #if a * 7 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 8 + 1 #a/b + 1 = c, a = c * b\n    #if a * 8 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 9 + 1 #a/b + 1 = c, a = c * b\n    #if a * 9 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 10 + 1 #a/b + 1 = c, a = c * b\n    #if a * 10 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 11 + 1 #a/b + 1 = c, a = c * b\n    #if a * 11 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 12 + 1 #a/b + 1 = c, a = c * b\n    #if a * 12 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 13 + 1 #a/b + 1 = c, a = c * b\n    #if a * 13 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 14 + 1 #a/b + 1 = c, a = c * b\n    #if a * 14 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 15 + 1 #a/b + 1 = c, a = c * b\n    #if a * 15 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 16 + 1 #a/b + 1 = c, a = c * b\n    #if a * 16 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 17 + 1 #a/b + 1 = c, a = c * b\n    #if a * 17 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 18 + 1 #a/b + 1 = c, a = c * b\n    #if a * 18 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 19 + 1 #a/b + 1 = c, a = c * b\n    #if a * 19 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 20 + 1 #a/b + 1 = c, a = c * b\n    #if a * 20 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 21 + 1 #a/b + 1 = c, a = c * b\n    #if a * 21 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 22 + 1 #a/b + 1 = c, a = c * b\n    #if a * 22 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 23 + 1 #a/b + 1 = c, a = c * b\n    #if a * 23 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 24 + 1 #a/b + 1 = c, a = c * b\n    #if a * 24 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 25 + 1 #a/b + 1 = c, a = c * b\n    #if a * 25 == n: #if c * b == n, then we can say that b is divisor of n, a is divisor of n\n    #    return(True)\n    #else:\n    #    return(False)\n    #b = n / 26 + 1 #a",
        "num_ids": 2006
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    d1=[]\n    d2=[]\n    for i in range(1,n):\n        if n%i==0:\n            d1.append(i)\n    for i in range(1,n+1):\n        if i not in d1:\n            d2.append(i)\n    return sum(d1),sum(d2)\n",
        "num_ids": 87
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0 \n    for i in range(1,n):\n        if (n % i == 0):\n            sum1 += i\n    return sum1 \n",
        "num_ids": 42
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 2\n    divisors = []\n    while i <= math.sqrt(n):\n        if n%i == 0:\n            divisors.append(i)\n            if n/i!= i:\n                divisors.append(n/i)\n        i += 1\n    divisors = sum(divisors)\n    return divisors",
        "num_ids": 89
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_pos = []\n    for c in str1.lower():\n        if c in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n            char_pos.append(c)\n    return len(char_pos)\n",
        "num_ids": 97
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    d = dict()\n    for i in str1:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    \n    return d\n",
        "num_ids": 64
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_dict = {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,'m':13,'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26}\n    count = 0\n    for i in str1:\n        if i in char_dict.keys():\n            count += char_dict[i.lower()]\n    return count\n",
        "num_ids": 155
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = [chr(i) for i in range(97, 123)]\n    n=0\n    for char in str1.lower():\n        if char in alpha:\n            n+=1\n    return n\nprint(count_char_position(\"Bacchus\")",
        "num_ids": 65
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n            count += 1\n    return count\nprint(count_char_position(\"The sunset sets at twelve o' clock.\"))\nprint(count_char_position(\"it's never too late to try\"))\nprint(count_char_position(\"Have you done your homework?\"))\n",
        "num_ids": 177
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in str1:\n        if ord(i) in range(97,123):\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str1[i].lower() and ord(str1[i]) >= 97 and ord(str1[i]) <= 122:\n            count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_list=[]\n    for char in str1:\n        if char.lower() in char_list:\n            continue\n        else:\n            char_list.append(char.lower())\n    return len(char_list)\n",
        "num_ids": 57
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_position = 0\n    for char in str1:\n        char = char.lower()\n        if char >= 'a' and char <= 'z':\n            char_position += 1\n    return char_position\n",
        "num_ids": 52
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # str1 = 'abccbd'\n",
        "num_ids": 13
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    assert A!= []\n    count = 0\n    for x in A:\n        for y in A:\n            if x ^ y == 0:\n                count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    def xor(x,y):\n        return x^y\n",
        "num_ids": 20
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 1: return 0\n    for i in range(len(A)-1):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) & 1 == 0: return 2\n    return 0\n",
        "num_ids": 67
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # the result is the number of even pairs.\n    # initialize an array to hold the results\n    result = [0] * (len(A)+1)\n    # for each element in the list, find the index of its complement\n    # the index of the complement in the result list is the count of pairs\n    for i in range(len(A)):\n        result[A[i]^(i+1)] += 1\n    # sum the results\n    return sum(result)\n    \n    \ndef closest_sum_pair(A, target):\n    '''\n    Write an efficient function that finds the closest pair of numbers in a list that add up to a target number.\n    '''\n    # sort the list of numbers\n    A.sort()\n    # initialize variables to hold the closest pair\n    closest_sum = A[0]+A[1]\n    # initialize variables to hold the indices of the closest pair\n    index_1 = 0\n    index_2 = 1\n    # iterate through the list\n    for i in range(len(A)-1):\n        # initialize the variables to hold the current closest pair\n        temp_sum = A[i]+A[i+1]\n        if temp_sum == target:\n            return A[i], A[i+1]\n        elif temp_sum < target:\n            closest_sum = temp_sum\n            index_1 = i\n            index_2 = i+1\n        elif abs(temp_sum - target) < abs(closest_sum - target):\n            closest_sum = temp_sum\n            index_1 = i\n            index_2 = i+1\n    return A[index_1], A[index_2]\n    \n    \ndef sort_list(A):\n    '''\n    Write a function that sorts a list of numbers in descending order.\n    '''\n    # create a copy of the original list\n    B = A[:]\n    # sort the list\n    B.sort(reverse=True)\n    # return the sorted list\n    return B\n    \n    \ndef sort_list_opt(A):\n    '''\n    Write an efficient function that sorts a list of numbers in descending order.\n    '''\n    # sort the list\n    A.sort(reverse=True)\n    # return the sorted list\n    return A\n    \n    \ndef search_rotated_sorted_array(A, target):\n    '''\n    Write a function to search for a number in a rotated sorted array.\n    It should return the index of the number in the array, if it exists.\n    It should return -1 if the number does not exist.\n    '''\n    # find the pivot point\n    pivot = find_pivot(A)\n    # if the target is less than the pivot, search the left part\n    if A[pivot] > A[0] and target > A[0]:\n        # search the left part\n        return search_rotated_sorted_array(A[:pivot], target)\n    # if the target is greater than the pivot, search the right part\n    elif A[pivot] < A[0] and target < A[0]:\n        # search the right part\n        return search_rotated_sorted_array(A[pivot:], target)\n    # if the target is equal to the pivot, we found it\n    elif target == A[pivot]:\n        # return the pivot\n        return pivot\n    # otherwise, the target is not found\n    return -1\n    \n    \ndef search_rotated_sorted_array_opt(A, target):\n    '''\n    Write an efficient function to search for a number in a rotated sorted array.\n    It should return the index of the number in the array, if it exists.\n    It should return -1 if the number does not exist.\n    '''\n    # find the pivot point\n    pivot = find_pivot_opt(A)\n    # if the target is less than the pivot, search the left part\n    if A[pivot] > A[0] and target > A[0]:\n        # search the left part\n        return search_rotated_sorted_array_opt(A[:pivot], target)\n    # if the target is greater than the pivot, search the right part\n    elif A[pivot] < A[0] and target < A[0]:\n        # search the right part\n        return search_rotated_sorted_array_opt(A[pivot:], target)\n    # if the target is equal to the pivot, we found it\n    elif target == A[pivot]:\n        # return the pivot\n        return pivot\n    # otherwise, the target is not found\n    return -1\n    \n    \ndef rotate_array(A, k):\n    '''\n    Write a function to rotate an array of n elements k times.\n    For example, [1, 2, 3, 4, 5, 6] rotated 4 times becomes [5, 6, 1, 2, 3, 4].\n    '''\n    # copy the original array\n    B = A[:]\n    # rotate the array k times\n    for i in range(k):\n        B = [B[-1]] + B[:-1]\n    # return the rotated array\n    return B\n    \n    \ndef rotate_array_opt(A, k):\n    '''\n    Write an efficient function to rotate an array of n elements k times.\n    For example, [1, 2, 3, 4, 5, 6] rotated 4 times becomes [5, 6, 1, 2, 3, 4].\n    '''\n    # copy the original array\n    B = A[:]\n    # find the pivot point\n    pivot = find_pivot_opt(A)\n    # if the target is less than the pivot, search the left part\n    if pivot > 0:\n        # search the left part\n        B = B[:pivot] + rotate_array_opt(B[pivot:], k % len(B[pivot:]))\n    # if the target is greater than the pivot, search the right part\n    if pivot < len(A) - 1:\n        # search the right part\n        B = rotate_array_opt(B[:pivot], k % len(B[pivot:])) + B[pivot:]\n    # if the target is equal to the pivot, we found it\n    if pivot == len(A) - 1:\n        # return the pivot\n        return pivot\n    # otherwise, the target is not found\n    return -1\n    \n    \ndef find_missing_element(A):\n    '''\n    Write a function that takes a sorted array and an integer k.\n    The function should use a variation of the Binary Search algorithm to find the integer in the array that is k places away from the left endpoint.\n    '''\n    # check if the array is empty\n    if len(A) == 0:\n        return -1\n    # initialize variables to hold the desired index\n    start = 0\n    end = len(A) - 1\n    # for each iteration, find the index that is k places away from the left endpoint\n    for i in range(k):\n        # if we are too far from the left endpoint, then the left endpoint is too far away from the desired index, so adjust the right endpoint\n        if A[start] > A[end]:\n            start += 1\n        # otherwise, the right endpoint is too far away, so adjust the left endpoint\n        else:\n            end -= 1\n    # return the left endpoint\n    return A[start]\n    \n    \ndef find_missing_element_opt(A):\n    '''\n    Write an efficient function that takes a sorted array and an integer k.\n    The function should use a variation of the Binary Search algorithm to find the integer in the array that is k places away from the left endpoint.\n    '''\n    # check if the array is empty\n    if len(A) == 0:\n        return -1\n    # find the pivot point\n    pivot = find_pivot_opt(A)\n    # if the target is less than the pivot, search the left part\n    if pivot > 0:\n        # search the left part\n        A = A[:pivot] + find_missing_element_opt(A[pivot:])\n    # if the target is greater than the pivot, search the right part\n    if pivot < len(A) - 1:\n        # search the right part\n        A = find_missing_element_opt(A[:pivot]) + A[pivot:]\n    # if the target is equal to the pivot, we found it\n    if pivot =",
        "num_ids": 180
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair_count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if( (A[i] ^ A[j]) % 2 == 0):\n                even_pair_count += 1\n",
        "num_ids": 69
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    sum = 0\n    for i in range(len(A)): \n        for j in range(i + 1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                sum += 1\n    return sum\n",
        "num_ids": 65
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    sums = []\n    for a in A:\n        sums.append(sum(a))\n    count = 0\n    for a in sums:\n        if a % 2 == 0:\n            count += 1\n    return count \n",
        "num_ids": 57
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odd_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                odd_count += 1\n    return odd_count / 2\n",
        "num_ids": 69
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    '''\n    1. loop through A\n    2. check if xor is even\n        - if true, add 1 to count\n    3. return count\n    '''\n    count = 0\n    for i in A:\n        if i ^ sum(A) % 2 == 0:\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while(power<=n):\n        power = power*2\n    return power/2\n",
        "num_ids": 29
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return (1 << (n-1).bit_length())\n",
        "num_ids": 17
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n and not (n & (n - 1))): \n        return n \n    while (n!= 0): \n        n >>= 1\n    n = n << 1\n    return n \n",
        "num_ids": 52
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n)\n    return 2 ** ((n - 1).bit_length())\n",
        "num_ids": 24
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n",
        "num_ids": 16
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()\n",
        "num_ids": 16
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n==0: return 1\n    if n==1: return 2\n    if n%2==0: return 2*next_power_of_2(n//2)\n    return 2*next_power_of_2(n//2)+1\n",
        "num_ids": 62
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n and not (n & (n - 1))): \n        return n \n    \n    n = n | (n >> 1) \n    return next_power_of_2(n) \n",
        "num_ids": 52
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** int(np.ceil(np.log2(n)))\n",
        "num_ids": 21
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n <= 0 else 2**((n - 1).bit_length())\n",
        "num_ids": 22
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=0\n    for i in a:\n        if i==x:\n            c+=1\n    return c\nprint(frequency([2,4,4,4,5,5,5],4))\n",
        "num_ids": 51
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0, len(a)): \n        if x == a[i]: \n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    b=a.count(x) \n    return b \n    \n    \ndef reverse_list(a):\n    '''\n    Write a function to reverse a list using recursion.\n    '''\n    if len(a) == 0: \n        return []\n    return [a[-1]] + reverse_list(a[:-1])\n    \n    \ndef is_in(a,x):\n    '''\n    Write a function that checks if a list contains a given value.\n    '''\n    if x in a:\n        return True \n    return False \n    \n    \ndef fibonacci_recur(n):\n    '''\n    Write a function that calculates the Fibonacci sequence using recursion. \n    '''\n    if n==0:\n        return 0 \n    elif n==1:\n        return 1 \n    else:\n        return fibonacci_recur(n-1) + fibonacci_recur(n-2)\n    \n    \ndef factorial_recur(n):\n    '''\n    Write a function that calculates the factorial of a number using recursion. \n    '''\n    if n==0:\n        return 1 \n    return n*factorial_recur(n-1)\n    \n    \ndef gcd(a,b):\n    '''\n    Write a function that computes the greatest common divisor of two positive integers. \n    '''\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\n        \n        \ndef is_palindrome(a):\n    '''\n    Write a function to check whether a number is palindrome or not. \n    '''\n    if str(a) == str(a)[::-1]: \n        return True \n    return False \n    \n    \ndef move_zeros(a):\n    '''\n    Write a function to move all zeros in the list to the end of the list.\n    '''\n    list_new = []\n    for i in range(len(a)):\n        if a[i] == 0:\n            list_new.append(a[i])\n            a.remove(a[i])\n    return list_new + a \n    \n    \ndef sum_of_lists(a,b):\n    '''\n    Write a function to add two lists of integers. \n    '''\n    return [a[i]+b[i] for i in range(len(a))]\n    \n    \ndef reverse_word_order(a):\n    '''\n    Write a function to reverse the order of words in a given list of strings. \n    '''\n    return''.join([i[::-1] for i in a.split()])\n    \n    \ndef count_unique_characters(a):\n    '''\n    Write a function to count the number of unique characters in a given string. \n    '''\n    unique_list = []\n    for i in a:\n        if i not in unique_list:\n            unique_list.append(i)\n    return len(unique_list)\n    \n    \ndef list_to_string(a):\n    '''\n    Write a function to convert a given list of strings to a single string, separated by a space. \n    '''\n    return''.join(a)\n    \n    \ndef get_substring_indices(a,x):\n    '''\n    Write a function to count the number of occurrences of a given substring in a given string. \n    '''\n    count = 0 \n    for i in range(len(a)-len(x)+1):\n        if a[i:i+len(x)] == x:\n            count += 1\n    return count \n    \n    \ndef get_substring_indices_v2(a,x):\n    '''\n    Write a function to count the number of occurrences of a given substring in a given string. \n    '''\n    return a.count(x)\n    \n    \ndef is_unique_chars(a):\n    '''\n    Write a function to check whether a string contains only unique characters.\n    '''\n    count = 0\n    for i in a:\n        if a.count(i) > 1:\n            return False \n    return True \n    \n    \ndef find_missing_number(a):\n    '''\n    Write a function to find the missing number in the given list. \n    '''\n    list_new = [i for i in range(1,len(a)+1)]\n    return [i for i in list_new if i not in a][0]\n    \n    \ndef find_missing_number_v2(a):\n    '''\n    Write a function to find the missing number in the given list. \n    '''\n    return set(range(1,len(a)+1)) - set(a)\n    \n    \ndef find_missing_number_v3(a):\n    '''\n    Write a function to find the missing number in the given list. \n    '''\n    b = [i for i in range(1,len(a)+2)]\n    return set(b) - set(a)\n    \n    \ndef find_missing_number_v4(a):\n    '''\n    Write a function to find the missing number in the given list. \n    '''\n    b = [i for i in range(1,len(a)+2)]\n    for i in a:\n        b.remove(i)\n    return b[0]\n    \n    \ndef find_missing_number_v5(a):\n    '''\n    Write a function to find the missing number in the given list. \n    '''\n    b = [i for i in range(1,len(a)+2)]\n    b = set(b)\n    a = set(a)\n    return list(b-a)[0]\n    \n    \ndef find_missing_number_v6(a):\n    '''\n    Write a function to find the missing number in the given list. \n    '''\n    sum_a = sum(a)\n    sum_range = (len(a)+1)*len(a)/2\n    return int(sum_range - sum_a)\n    \n    \ndef find_missing_number_v7(a):\n    '''\n    Write a function to find the missing number in the given list. \n    '''\n    return sum(range(1,len(a)+1)) - sum(a)\n    \n    \ndef find_missing_number_v8(a):\n    '''\n    Write a function to find the missing number in the given list. \n    '''\n    missing_number = 0 \n    for i in range(1,len(a)+1):\n        missing_number ^= i\n    for i in a:\n        missing_number ^= i \n    return missing_number \n    \n    \ndef find_missing_number_v9(a):\n    '''\n    Write a function to find the missing number in the given list. \n    '''\n    x = len(a) \n    sum1 = x*(x+1)/2\n    sum2 = sum(a)\n    return int(sum1 - sum2)\n    \n    \ndef add_binary(a,b):\n    '''\n    Write a function to add two binary numbers represented as strings.\n    '''\n    max_len = max(len(a),len(b))\n    a = '0'*(max_len-len(a)) + a\n    b = '0'*(max_len-len(b)) + b\n    carry = 0\n    result = ''\n    for i in range(max_len-1, -1, -1):\n        if a[i] == '1':\n            carry += 1\n        if b[i] == '1':\n            carry += 1\n        if carry%2 == 1:\n            result = '1' + result\n        else:\n            result = '0' + result\n        carry //= 2\n    if carry == 1:\n        result = '1' + result\n    return result \n    \n    \ndef add_binary_v2(a,b):\n    '''\n    Write a function to add two binary numbers represented as strings.\n    '''\n    max_len = max(len(a),len(b))\n    a = '0'*(max_len-len(a)) + a\n    b = '",
        "num_ids": 41
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count = count + 1\n    return count \n",
        "num_ids": 35
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # a = [1,2,3,3,2,2,1,3,4,5,1,2,4,5,2,2,1,3,5,1,1]\n    # x = 1\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n    \ndef frequency_string(a,x):\n    '''\n    Write a function to count the number of occurrences of a string in a given string.\n    '''\n    # a = 'Today is a beautiful day, Tomorrow will be a beautiful day'\n    # x = 'day'\n    count = 0\n    temp = a.split(' ')\n    for i in temp:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n + 1):\n        total += list1[i]\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0:\n        return -1\n    elif n < 0:\n        return -1\n    elif m > len(list1) or n > len(list1):\n        return -1\n    elif m > n:\n        return -1\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum = sum + list1[i]\n        return sum\n",
        "num_ids": 101
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1=0\n    for i in range(m, n+1):\n        sum1 += list1[i]\n    return sum1\n",
        "num_ids": 36
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    lst=list1\n    for i in range(len(lst)):\n        if m <= i <= n:\n            print(lst[i])\n            print(sum(lst[i]))\n",
        "num_ids": 52
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) < m or m < 0 or len(list1) < n or n < 0 or m > len(list1) or n > len(list1) or m > n:\n        print('Error!')\n    else:\n        sum = 0\n        for i in range(m, n + 1):\n            sum += list1[i]\n        return sum\n",
        "num_ids": 91
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == 0:\n        return sum(list1[n:])\n    else:\n        return sum_range_list(list1, m-1, n) + list1[m]\n",
        "num_ids": 48
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for x in range(m, n):\n        sum1 += list1[x]\n    return sum1\n",
        "num_ids": 34
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a*5\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    print(f'Perimeter of pentagon with sides of length: {a}')\n    perimeter = (a*5)\n    return perimeter\n",
        "num_ids": 36
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if isinstance(a,int) or isinstance(a,float):\n        p = 5 * a\n        return p\n    else:\n        raise ValueError(\"Invalid input\")\n",
        "num_ids": 44
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to calculate the area of a regular pentagon from the length of its sides.\n    '''\n    area = (a ** 2) * (math.tan(math.pi / 5))\n    return area\ndef circumference_pentagon(a):\n    '''\n    Write a function to calculate the circumference of a regular pentagon from the length of its sides.\n    '''\n    circumference = a * 5\n    return circumference\ndef area_dodecahedron(a):\n    '''\n    Write a function to calculate the area of a dodecahedron from the length of its sides.\n    '''\n    area = ((5 * (5 + 2 * math.sqrt(5))) / 4) * a ** 2\n    return area\ndef area_icosahedron(a):\n    '''\n    Write a function to calculate the area of a icosahedron from the length of its sides.\n    '''\n    area = ((15 * ((3 * math.sqrt(5)) + 1)) / 4) * a ** 2\n    return area\ndef area_octahedron(a):\n    '''\n    Write a function to calculate the area of a octahedron from the length of its sides.\n    '''\n    area = ((2 * (math.sqrt(2))) / 3) * a ** 2\n    return area\ndef volume_box(a):\n    '''\n    Write a function to calculate the volume of a box from the length of its sides.\n    '''\n    volume = a ** 3\n    return volume\ndef volume_cone(a, b):\n    '''\n    Write a function to calculate the volume of a cone from the length of its sides and its radius.\n    '''\n    volume = ((1 / 3) * math.pi * a ** 2 * b)\n    return volume\ndef volume_cube(a):\n    '''\n    Write a function to calculate the volume of a cube from the length of its sides.\n    '''\n    volume = a ** 3\n    return volume\ndef volume_ellipsoid(a, b, c):\n    '''\n    Write a function to calculate the volume of an ellipsoid from its radius along the 3 axes.\n    '''\n    volume = ((4 / 3) * math.pi * a ** 3)\n    return volume\ndef volume_hemisphere(a, b):\n    '''\n    Write a function to calculate the volume of a hemisphere from its radius along the z-axis.\n    '''\n    volume = ((1 / 3) * math.pi * a ** 3 * b)\n    return volume\ndef volume_cylinder(a, b):\n    '''\n    Write a function to calculate the volume of a cylinder from its radius and height.\n    '''\n    volume = (math.pi * a ** 2 * b)\n    return volume\ndef volume_sphere(a):\n    '''\n    Write a function to calculate the volume of a sphere from its radius.\n    '''\n    volume = ((4 * math.pi) / 3) * a ** 3\n    return volume\ndef volume_prism(a, b, c):\n    '''\n    Write a function to calculate the volume of a prism from its height, base, and side.\n    '''\n    volume = (a * b * c)\n    return volume\ndef area_cuboid(a, b, c):\n    '''\n    Write a function to calculate the area of a cuboid from the length of its sides.\n    '''\n    area = (2 * a * b) + (2 * a * c) + (2 * b * c)\n    return area\ndef volume_triangle(a):\n    '''\n    Write a function to calculate the volume of a regular triangle from the length of its sides.\n    '''\n    volume = ((1 / 2) * a ** 2) * math.sqrt(3)\n    return volume\ndef area_sphere_from_radius(a):\n    '''\n    Write a function to calculate the area of a sphere from its radius.\n    '''\n    area = ((4 * math.pi) * a ** 2)\n    return area\ndef area_sphere_from_diameter(a):\n    '''\n    Write a function to calculate the area of a sphere from its diameter.\n    '''\n    area = ((4 * math.pi) * (a / 2) ** 2)\n    return area\ndef area_hemisphere_from_diameter(a):\n    '''\n    Write a function to calculate the area of a hemisphere from its diameter.\n    '''\n    area = ((1 / 3) * math.pi * (a / 2) ** 2)\n    return area\ndef area_hemisphere_from_radius(a):\n    '''\n    Write a function to calculate the area of a hemisphere from its radius.\n    '''\n    area = ((1 / 2) * math.pi * a ** 2)\n    return area\ndef area_cylinder_from_radius(a, b):\n    '''\n    Write a function to calculate the area of a cylinder from its radius and height.\n    '''\n    area = (2 * math.pi * a * b)\n    return area\ndef area_cylinder_from_diameter(a, b):\n    '''\n    Write a function to calculate the area of a cylinder from its diameter and height.\n    '''\n    area = (2 * math.pi * (a / 2) * b)\n    return area\ndef area_cone_from_radius(a, b):\n    '''\n    Write a function to calculate the area of a cone from its radius and height.\n    '''\n    area = (1 / 3) * math.pi * a ** 2 * b\n    return area\ndef area_cone_from_diameter(a, b):\n    '''\n    Write a function to calculate the area of a cone from its diameter and height.\n    '''\n    area = (1 / 3) * math.pi * a ** 2 * b\n    return area\ndef area_tetrahedron_from_radius(a):\n    '''\n    Write a function to calculate the area of a tetrahedron from its radius.\n    '''\n    area = (1 / 4) * math.sqrt(2) * a ** 2\n    return area\ndef area_tetrahedron_from_diameter(a):\n    '''\n    Write a function to calculate the area of a tetrahedron from its diameter.\n    '''\n    area = (1 / 4) * math.sqrt(2) * a ** 2\n    return area\ndef area_prism_from_base_and_height(a, b):\n    '''\n    Write a function to calculate the area of a prism from its base and height.\n    '''\n    area = (a * b)\n    return area\ndef area_parallelogram_from_base_and_height(a, b):\n    '''\n    Write a function to calculate the area of a parallelogram from its base and height.\n    '''\n    area = (a * b)\n    return area\ndef area_trapezium_from_side_and_height(a, b, c):\n    '''\n    Write a function to calculate the area of a trapezium from its base, height, and one side.\n    '''\n    area = ((a + b) / 2) * c\n    return area\ndef area_square_from_side(a):\n    '''\n    Write a function to calculate the area of a square from its side.\n    '''\n    area = a ** 2\n    return area\ndef area_rhombus_from_diagonal(a):\n    '''\n    Write a function to calculate the area of a rhombus from its diagonal.\n    '''\n    area = (a ** 2) / 2\n    return area\ndef area_kite_from_diagonal(a):\n    '''\n    Write a function to calculate the area of a kite from its diagonal.\n    '''\n    area = (a ** 2) / 2\n    return area\ndef area_kite_from_diameter(a):\n    '''\n    Write a function to calculate the area of a kite from its diameter.\n    '''\n    area = (1 / 2) * a ** 2\n    return area\ndef area_kite_from_radius(a):\n    '''\n    Write a function to calculate the area of a kite from its radius.\n    '''\n    area = (",
        "num_ids": 6
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5*a\n    return p\n",
        "num_ids": 13
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    count = 0\n    for i in s:\n        if i == \"s\":\n            count = count+1\n    return count\nprint(count_occurance(\"Assessment Test are Very Important\"))\n",
        "num_ids": 56
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in range(len(s)-2):\n        if s[i]=='s' and s[i+1]=='t' and s[i+2]=='d':\n            count+=1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    return s.count('std')\n",
        "num_ids": 19
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-1):\n        if s[i:i+4] =='std':\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    c = s.count(\"std\")\n    return c\n",
        "num_ids": 16
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 3):\n        if s[i] =='s' and s[i + 1] == 't' and s[i + 2] == 'd':\n            count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.split()\n    # print(s)\n    c = 0\n    for i in s:\n        if i =='std':\n            c += 1\n    return c\n",
        "num_ids": 46
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(i) == type(test_tuple[0]) for i in test_tuple)\n    \n    \nprint(check_type((1, 2, 3, 4, 5, 6, 7)))\nprint(check_type((1, 2, 3, 4, 'five', 6, 7)))\nprint(check_type((1, 2, 3, 4, 5,'six', 7)))\n",
        "num_ids": 97
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return False\n    else:\n        type = type(test_tuple[0])\n        if type!= type(test_tuple[1]):\n            return False\n        else:\n            return True\n    \ndef check_type2(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return False\n    else:\n        if isinstance(test_tuple[0], str) and isinstance(test_tuple[1], str):\n            return True\n        else:\n            return False\n    \ndef check_type3(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return False\n    else:\n        if type(test_tuple[0]) == type(test_tuple[1]):\n            return True\n        else:\n            return False\n",
        "num_ids": 54
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for ele in test_tuple:\n        if type(ele) == type(test_tuple[0]):\n            return True\n        else:\n            return False\n",
        "num_ids": 42
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_set = set()\n    for element in test_tuple:\n        type_set.add(type(element))\n    if len(type_set) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if test_tuple:\n        #Using isinstance()\n        type_list = [type(elem) for elem in test_tuple]\n        print('all the elements of tuple have same type') if type_list.count(type_list[0]) == len(type_list) else print('all the elements of tuple have different types')\n    else:\n        print('Given tuple is empty.')\n",
        "num_ids": 97
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    res = []\n    for i in test_tuple:\n        if res == [] or type(i)!= type(res[0]):\n            res.append(i)\n    return res\n",
        "num_ids": 48
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(\"Test tuple : \", test_tuple)\n    if type(test_tuple) is not tuple:\n        raise TypeError\n    elif len(test_tuple) == 0:\n        raise ValueError\n    else:\n        for i in range(len(test_tuple)):\n            if i == 0:\n                test_type = type(test_tuple[i])\n                print(\"First value : \", test_tuple[i])\n                continue\n            elif test_type!= type(test_tuple[i]):\n                raise ValueError\n            elif test_type == list:\n                print(\"List : \", test_tuple[i])\n            elif test_type == int:\n                print(\"Integer : \", test_tuple[i])\n            elif test_type == float:\n                print(\"Float : \", test_tuple[i])\n            elif test_type == bool:\n                print(\"Boolean : \", test_tuple[i])\n            elif test_type == str:\n                print(\"String : \", test_tuple[i])\n            else:\n                print(\"Unknown type : \", test_tuple[i])\n        print(f\"{test_type} :: All elements have same type\")\n",
        "num_ids": 294
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = list(test_tuple)\n    if test_list[0] == type(test_list[1]):\n        print('Elements have same data type.')\n    else:\n        print('Elements have different data types.')\n",
        "num_ids": 62
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(all(type(item) == type(test_tuple[0]) for item in test_tuple))\n    print(any(type(item)!= type(test_tuple[0]) for item in test_tuple))\n",
        "num_ids": 58
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # count the number of times x occurs in arr\n    count = 0\n    for i in range(0, n):\n        if arr[i] == x:\n            count += 1\n",
        "num_ids": 45
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) == 0:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # first and last elements\n    first = 0\n    last = n-1\n    while first < last:\n        mid = (first+last)//2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            last = mid\n        else:\n            first = mid + 1\n    if first!= n and arr[first] == x:\n        return True\n    else:\n        return False\n",
        "num_ids": 107
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count >= n/2:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n // 2] == x:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    return False\n",
        "num_ids": 22
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n//2\n",
        "num_ids": 34
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    mid = n // 2\n    low = 0\n    high = n - 1\n    mid = n // 2\n    if x == arr[mid]:\n        return True\n    elif x < arr[mid]:\n        high = mid - 1\n    else:\n        low = mid + 1\n    return is_majority(arr, low, x) or is_majority(arr, high, x)\n",
        "num_ids": 109
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    l, r = 0, n - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == x:\n            return True\n        if arr[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return False\n",
        "num_ids": 77
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s = bin(n)\n    s = s[2:]\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "num_ids": 13
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if (n > 0): \n        res = 0\n        while (n): \n            res += n & 1\n            n >>= 1\n        return res \n    return -1\n",
        "num_ids": 46
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n    \n    \ndef test_count_Set_Bits():\n    assert count_Set_Bits(0) == 0\n    assert count_Set_Bits(100) == 2\n    assert count_Set_Bits(101) == 3\n    \n    \ndef count_Set_Bits_Optimized(n):\n    '''\n    Write an optimized version of the above function which takes only one argument and returns the count of set bits in that number.\n    '''\n    count = 0\n    while (n): \n        count += 1\n        n = n & (n - 1)\n    return count \n    \n    \ndef test_count_Set_Bits_Optimized():\n    assert count_Set_Bits_Optimized(0) == 0\n    assert count_Set_Bits_Optimized(100) == 2\n    assert count_Set_Bits_Optimized(101) == 3\n    \n    \ndef kth_Set_Bit_Brute_Force(n, k):\n    '''\n    Write a function which takes two arguments n and k and returns the kth set bit in the binary representation of n.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1)\n        count += 1\n        if count == k:\n            break\n    return n & 1\n    \n    \ndef test_kth_Set_Bit_Brute_Force():\n    assert kth_Set_Bit_Brute_Force(1, 1) == 1\n    assert kth_Set_Bit_Brute_Force(100, 2) == 1\n    assert kth_Set_Bit_Brute_Force(100, 3) == 2\n    \n    \ndef kth_Set_Bit_Brute_Force_Optimized(n, k):\n    '''\n    Write an optimized version of the above function which takes only two arguments and returns the kth set bit in the binary representation of n.\n    '''\n    count = 0\n    while (n): \n        n = n & (n - 1)\n        count += 1\n        if count == k:\n            break\n    return 1\n    \n    \ndef test_kth_Set_Bit_Brute_Force_Optimized():\n    assert kth_Set_Bit_Brute_Force_Optimized(1, 1) == 1\n    assert kth_Set_Bit_Brute_Force_Optimized(100, 2) == 1\n    assert kth_Set_Bit_Brute_Force_Optimized(100, 3) == 2\n    \n    \ndef kth_Set_Bit_Hacker_Ranks(n, k):\n    '''\n    Write a function which takes two arguments n and k and returns the kth set bit in the binary representation of n.\n    '''\n    count = 0\n    while (n): \n        if ((n & 1) == 1):\n            count += 1\n            if count == k:\n                break\n        n = n >> 1\n    return n & 1\n    \n    \ndef test_kth_Set_Bit_Hacker_Ranks():\n    assert kth_Set_Bit_Hacker_Ranks(1, 1) == 1\n    assert kth_Set_Bit_Hacker_Ranks(100, 2) == 1\n    assert kth_Set_Bit_Hacker_Ranks(100, 3) == 2\n    \n    \ndef kth_Set_Bit_Hacker_Ranks_Optimized(n, k):\n    '''\n    Write an optimized version of the above function which takes only two arguments and returns the kth set bit in the binary representation of n.\n    '''\n    count = 0\n    while (n): \n        count += 1\n        if ((n & 1) == 1):\n            k -= 1\n            if k == 0:\n                break\n        n = n >> 1\n    return n & 1\n    \n    \ndef test_kth_Set_Bit_Hacker_Ranks_Optimized():\n    assert kth_Set_Bit_Hacker_Ranks_Optimized(1, 1) == 1\n    assert kth_Set_Bit_Hacker_Ranks_Optimized(100, 2) == 1\n    assert kth_Set_Bit_Hacker_Ranks_Optimized(100, 3) == 2\n    \n    \ndef kth_Set_Bit_Solutions(n, k):\n    '''\n    Write a function which takes two arguments n and k and returns the kth set bit in the binary representation of n.\n    '''\n    # First solution\n    count = 0\n    while (n): \n        n = n & (n - 1)\n        count += 1\n        if count == k:\n            break\n    return n & 1\n    \n    \ndef test_kth_Set_Bit_Solutions():\n    assert kth_Set_Bit_Solutions(1, 1) == 1\n    assert kth_Set_Bit_Solutions(100, 2) == 1\n    assert kth_Set_Bit_Solutions(100, 3) == 2\n    \n    \ndef kth_Set_Bit_Solutions_Optimized(n, k):\n    '''\n    Write an optimized version of the above function which takes only two arguments and returns the kth set bit in the binary representation of n.\n    '''\n    # Second Solution\n    count = 0\n    while (n): \n        count += 1\n        if count == k:\n            break\n        n = n & (n - 1)\n    return n & 1\n    \n    \ndef test_kth_Set_Bit_Solutions_Optimized():\n    assert kth_Set_Bit_Solutions_Optimized(1, 1) == 1\n    assert kth_Set_Bit_Solutions_Optimized(100, 2) == 1\n    assert kth_Set_Bit_Solutions_Optimized(100, 3) == 2\n    \n    \ndef kth_Set_Bit_Solutions_Optimized2(n, k):\n    '''\n    Write an optimized version of the above function which takes only two arguments and returns the kth set bit in the binary representation of n.\n    '''\n    # Third Solution\n    count = 0\n    while (n): \n        count += 1\n        if count == k:\n            break\n        n = n ^ (n >> 1)\n    return n & 1\n    \n    \ndef test_kth_Set_Bit_Solutions_Optimized2():\n    assert kth_Set_Bit_Solutions_Optimized2(1, 1) == 1\n    assert kth_Set_Bit_Solutions_Optimized2(100, 2) == 1\n    assert kth_Set_Bit_Solutions_Optimized2(100, 3) == 2\n    \n    \ndef kth_Set_Bit_Solutions_Optimized3(n, k):\n    '''\n    Write an optimized version of the above function which takes only two arguments and returns the kth set bit in the binary representation of n.\n    '''\n    # Fourth Solution\n    count = 0\n    while (n): \n        count += 1\n        if count == k:\n            break\n        n = n ^ ((n - 1) >> 1)\n    return n & 1\n    \n    \ndef test_kth_Set_Bit_Solutions_Optimized3():\n    assert kth_Set_Bit_Solutions_Optimized3(1, 1) == 1\n    assert kth_Set_Bit_Solutions_Optimized3(100, 2) == 1\n    assert kth_Set_Bit_Solutions_Optimized3(100, 3) == 2\n    \n    \ndef kth_Set_Bit_Solutions_Optimized4(n, k):\n    '''\n    Write an optimized version of the above function which takes only two arguments and returns the kth set bit in the binary representation of n.\n    '''\n    # Fifth Solution\n    count = 0\n    while (n): \n        count += 1\n        if count == k:\n            break\n        n = n ^ ((n >> 1) & ~1)\n    return n & 1\n    \n    \ndef test_kth_Set_Bit_Solutions_Optimized4():\n    assert kth_Set_Bit_Solutions_Optimized4(1, ",
        "num_ids": 98
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n &= n - 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    while (n): \n        set_bits += n & 1\n        n >>= 1\n    return set_bits \n",
        "num_ids": 38
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while(n):\n        count+=n&1\n        n=n>>1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n    \nprint(count_Set_Bits(234))\nprint(count_Set_Bits(1234))\nprint(count_Set_Bits(846))\nprint(count_Set_Bits(0))\nprint(count_Set_Bits(1))\nprint(count_Set_Bits(3))\nprint(count_Set_Bits(7))\n",
        "num_ids": 120
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    x = ''\n    for i in range(0,len(str)):\n        if i%2==0:\n            x += str[i]\n    return x\nprint(odd_values_string('python'))\n",
        "num_ids": 54
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(len(str)):\n        if i%2 == 0:\n            print(str[i], end='')\n",
        "num_ids": 35
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if str == '':\n        return ''\n    str_len = len(str)\n    new_str = str[0::2]\n    return new_str\n",
        "num_ids": 41
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n",
        "num_ids": 29
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str1 = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            str1 += str[i]\n    return str1\n",
        "num_ids": 43
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # for i in range(len(str)):\n    #     if i % 2!= 0:\n    #         str = str.replace(str[i],\"\")\n    # return str\n    return \"\".join([i for i in str if not i & 1])\n",
        "num_ids": 65
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = str[::2]\n    return new_str\n",
        "num_ids": 19
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    a = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            a += str[i]\n    print(a)\n    \n",
        "num_ids": 44
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string.append(str[i])\n    return ''.join(new_string)\n",
        "num_ids": 53
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string += str[i]\n    return new_string\n",
        "num_ids": 46
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if(a<b):\n        if(a<c):\n            return a\n        else:\n            return c\n    else:\n        if(b<c):\n            return b\n        else:\n            return c\n            \nprint(min_of_three(3,5,1))\n",
        "num_ids": 71
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_num = a if a < b else b\n    min_num = min_num if min_num < c else c\n",
        "num_ids": 32
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b: \n        if a < c: \n            print(a)\n        else:\n            print(c)\n    else:\n        if b < c:\n            print(b)\n        else:\n            print(c)\n",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n            \ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        else:\n            return c\n    else:\n        if b > c:\n            return b\n        else:\n            return c\n    \ndef max_of_two(a,b):\n    '''\n    Write a function to find maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef is_leap_year(year):\n    '''\n    Write a function to check if a year is leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef days_in_month(month,year):\n    '''\n    Write a function to return the number of days in a month.\n    '''\n    if month == 2:\n        if is_leap_year(year):\n            return 29\n        else:\n            return 28\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        return 30\n    else:\n        return 31\n        \ndef first_and_last_index(arr,x):\n    '''\n    Write a function to return the first and last index of an element.\n    '''\n    length = len(arr)\n    count = 0\n    i = 0\n    j = length - 1\n    while i < j:\n        if arr[i] == x:\n            count += 1\n            i += 1\n        else:\n            i += 1\n            \n        if arr[j] == x:\n            count += 1\n            j -= 1\n        else:\n            j -= 1\n            \n    if count == 0:\n        return False\n    else:\n        return [i,j]\n    \ndef count_chars(string):\n    '''\n    Write a function to count number of occurrence of each character in a given string.\n    '''\n    dict1 = {}\n    for i in string:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n    \ndef validate_password(password):\n    '''\n    Write a function to check if a given password is secure.\n    '''\n    strength = 0\n    if len(password) > 6:\n        strength += 1\n    if len(password) < 10:\n        strength += 1\n    if any(c.islower() for c in password):\n        strength += 1\n    if any(c.isupper() for c in password):\n        strength += 1\n    if any(c.isdigit() for c in password):\n        strength += 1\n    return strength\n    \ndef check_pwd(pwd):\n    '''\n    Write a function to check if a password is secure or not.\n    '''\n    if len(pwd) < 8:\n        return False\n    elif validate_password(pwd)!= 3:\n        return False\n    elif any(not c.islower() for c in pwd):\n        return False\n    elif any(not c.isupper() for c in pwd):\n        return False\n    elif any(not c.isdigit() for c in pwd):\n        return False\n    else:\n        return True\n        \ndef calculate_sum_of_squares(n):\n    '''\n    Write a function to calculate sum of squares of n numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i ** 2\n    return total\n        \ndef calculate_sum_of_odd_squares(n):\n    '''\n    Write a function to calculate sum of odd squares of n numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if i % 2 == 1:\n            total += i ** 2\n    return total\n        \ndef calculate_sum_of_even_squares(n):\n    '''\n    Write a function to calculate sum of even squares of n numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            total += i ** 2\n    return total\n        \ndef sum_of_prime_numbers(n):\n    '''\n    Write a function to calculate sum of prime numbers below n.\n    '''\n    total = 0\n    for i in range(2,n+1):\n        for j in range(2,i):\n            if i % j == 0:\n                break\n        else:\n            total += i\n    return total\n        \ndef create_substring(string,x):\n    '''\n    Write a function to create substrings of a given string.\n    '''\n    length = len(string)\n    count = 0\n    temp_string = ''\n    for i in range(length):\n        temp_string = temp_string + string[i]\n        if count == x:\n            break\n        count += 1\n    return temp_string\n        \ndef create_substrings(string,x):\n    '''\n    Write a function to create substrings of a given string.\n    '''\n    count = 0\n    temp_string = ''\n    for i in range(len(string)):\n        for j in range(i,len(string)):\n            temp_string += string[i:j+1]\n            count += 1\n            if count == x:\n                break\n        if count == x:\n            break\n    return temp_string\n        \ndef get_letter_count(string):\n    '''\n    Write a function to get letter count of a given string.\n    '''\n    dict1 = {}\n    for i in string:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n    \ndef sort_characters(string):\n    '''\n    Write a function to sort characters in a string in ascending order.\n    '''\n    return ''.join(sorted(string))\n        \ndef sort_characters_descending(string):\n    '''\n    Write a function to sort characters in a string in descending order.\n    '''\n    return ''.join(sorted(string,reverse=True))\n    \ndef remove_duplicates(string):\n    '''\n    Write a function to remove duplicates from a given string.\n    '''\n    return ''.join(set(string))\n        \ndef get_largest_word(string):\n    '''\n    Write a function to get the largest word from a given string.\n    '''\n    temp_list = string.split(' ')\n    length = len(temp_list)\n    temp_string = ''\n    for i in range(length):\n        if len(temp_list[i]) > len(temp_string):\n            temp_string = temp_list[i]\n    return temp_string\n        \ndef reverse_word(string):\n    '''\n    Write a function to reverse each word in a given string.\n    '''\n    temp_string = ''\n    length = len(string)\n    for i in range(length):\n        if i == 0:\n            if string[i]!='':\n                temp_string += string[i]\n        else:\n            if string[i-1] =='':\n                temp_string += string[i]\n    return temp_string\n        \ndef reverse_words_in_string(string):\n    '''\n    Write a function to reverse each word in a given string.\n    '''\n    temp_string = ''\n    length = len(string)\n    for i in range(length):\n        if i == 0:\n            if string[i]!='':\n                temp_string += string[i]\n        else:\n            if string[i-1] =='':\n                temp_string += string[i]\n    return temp_string\n        \ndef reverse_words_in_string2(string)",
        "num_ids": 100
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # if a < b:\n    #     if a < c:\n    #         min = a\n    #     else:\n    #         min = c\n    # else:\n    #     if b < c:\n    #         min = b\n    #     else:\n    #         min = c\n    # return min\n",
        "num_ids": 78
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c\n",
        "num_ids": 45
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        print(a)\n    elif b<c:\n        print(b)\n    else:\n        print(c)\n",
        "num_ids": 43
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return c\n        else:\n            return b\n    else:\n        if a < c:\n            return c\n        else:\n            return a\n",
        "num_ids": 51
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        print(a)\n    elif b < a and b < c:\n        print(b)\n    else:\n        print(c)\n",
        "num_ids": 47
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # O(1)\n    return 2**(n-1) <= r-l\n",
        "num_ids": 23
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #start writing your code here\n    n=bin(n)\n    l=bin(l)\n    r=bin(r)\n    return all(n[i]!=l[i] and n[i]!=r[i] for i in range(len(n)))\n",
        "num_ids": 69
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (i & n) == n:\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(n):\n        if(pow(2,i) & l) and (pow(2,i) & r):\n            return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    num = n\n    x = 0\n    for i in range(l-1,r):\n        x = x|(1<<i)\n    if num&x == 0:\n        return 1\n    return 0\n",
        "num_ids": 53
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask=1\n    for i in range(l,r+1):\n        if mask&n==0:\n            return False\n        mask<<=1\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bit=0\n    l=bin(l)\n    r=bin(r)\n    l=l[2:]\n    r=r[2:]\n    for i in range(len(l)):\n        if l[i]=='1':\n            bit+=pow(2,i)\n    for j in range(len(r)):\n        if r[j]=='1':\n            bit+=pow(2,j+len(l))\n    if bit==n:\n        print('All the bits are set in the given range.')\n    else:\n        print('All the bits are not set in the given range.')\n",
        "num_ids": 153
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(n):\n        for j in range(l,r+1):\n            if (2**i & j)!= 0:\n                return False\n    return True\n    \ndef check_sum_of_digits_in_range(n,l,r):\n    '''\n    Write a python function to check whether the sum of digits in the given range is a palindrome or not.\n    '''\n    \n    if all_Bits_Set_In_The_Given_Range(n,l,r):\n        return True\n    \n    for i in range(l,r+1):\n        if sum_of_digits(i) % 2 == 0:\n            continue\n        if all_Bits_Set_In_The_Given_Range(n,l,r) and sum_of_digits(i) % 2!= 0:\n            return True\n        else:\n            return False\n    return False\n",
        "num_ids": 123
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if setBits(i)==0:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0\n    for i in range(l,r+1):\n        mask = mask | (1<<i)\n    return n & mask == 0\n",
        "num_ids": 39
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    def isNegative(x):\n        return x < 0\n    \n    return sorted(arr, key=isNegative)\n",
        "num_ids": 32
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = 0\n    neg = 0\n    for i in range(0,n):\n        if arr[i] < 0:\n            neg += 1\n        elif arr[i] > 0:\n            pos += 1\n    for i in range(0,n):\n        if arr[i] < 0 and neg > 0:\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg += 1\n        elif arr[i] > 0 and pos > 0:\n            arr[i], arr[pos] = arr[pos], arr[i]\n            pos += 1\n    return arr\n",
        "num_ids": 146
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if (n == 1):\n        return arr\n    else:\n        arr[0:n] = sorted(arr[0:n])\n        arr[n:] = sorted(arr[n:])\n        return arr\n",
        "num_ids": 53
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = []\n    neg = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    return neg + pos\n",
        "num_ids": 61
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    first_neg, second_neg = 0, 0\n",
        "num_ids": 15
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #use an auxiliary array\n    aux_arr = []\n    for i in range(0,n):\n        if arr[i] < 0:\n            aux_arr.append(arr[i])\n        else:\n            aux_arr.append(arr[i])\n",
        "num_ids": 65
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    left_pos = []\n    left_neg = []\n",
        "num_ids": 16
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > len(arr):\n        raise ValueError(\"Invalid number of elements to arrange!\")\n    j = n-1\n    for i in range(n):\n        if arr[i] < 0:\n            while arr[j] < 0:\n                j -= 1\n            temp = arr[j]\n            arr[j] = arr[i]\n            arr[i] = temp\n    return arr\n",
        "num_ids": 97
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[n:] + arr[:n]\n",
        "num_ids": 15
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = \"\"\n    for letter in str1:\n        if letter == \" \":\n            result = result + char\n        else:\n            result = result + letter\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s') % char\n",
        "num_ids": 17
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = []\n    for i in str1:\n        if i == \" \":\n            str2.append(char)\n        else:\n            str2.append(i)\n    str3 = \"\".join(str2)\n    return str3\n",
        "num_ids": 63
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\nprint(replace_blank(\"This is a test\", \"*\"))",
        "num_ids": 27
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(char,\"\")\n    return str1\n",
        "num_ids": 33
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == \" \":\n            new_str = new_str + char\n        else:\n            new_str = new_str + i\n    return new_str\n",
        "num_ids": 57
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #char = '-'\n    output = ''\n    for ch in str1:\n        if ch =='':\n            ch = char\n        output += ch\n    return output\n",
        "num_ids": 43
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    heapq.heapify(list1)\n    for i in range(n):\n        list2.append(heapq.heappop(list1))\n    print(list2)\nlist1=[1,2,3,4,5]\nlarg_nnum(list1,3)",
        "num_ids": 79
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\n",
        "num_ids": 22
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    for i in range(n):\n        largest=list1[0]\n        for j in list1:\n            if largest<j:\n                largest=j\n        list1.remove(largest)\n        list1.append(largest)\n    return list1\nprint(larg_nnum([3,4,5,6,7,8,9,0,4,5,7,8,9,10],3))\n",
        "num_ids": 101
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    #print(\"initial\",list1)\n    for i in range(n):\n        #print(\"x\",list1)\n        print(heapq.heappop(list1))\n    print(\"final\",list1)\n    \nlist1=[1,3,5,7,9,2,4,6,8,0]\nlarg_nnum(list1,2)\n",
        "num_ids": 105
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        print(\"please enter a value less than the length of the list\")\n    list2=[]\n    for i in range(0,n):\n        largest = 0\n        for j in range(0,len(list1)):\n            if list1[j] > largest:\n                largest = list1[j]\n        list2.append(largest)\n        list1.remove(largest)\n    return list2\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest numbers from the list.\n    '''\n    if n > len(list1):\n        print(\"please enter a value less than the length of the list\")\n    list2=[]\n    for i in range(0,n):\n        largest = 0\n        for j in range(0,len(list1)):\n            if list1[j] > largest:\n                largest = list1[j]\n        list2.append(largest)\n        list1.remove(largest)\n    return list2\ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items in order from largest to smallest.\n    '''\n    if n > len(list1):\n        print(\"please enter a value less than the length of the list\")\n    list2=[]\n    list3=[]\n    for i in range(0,n):\n        for j in range(0,len(list1)):\n            if list1[j] > list2[0]:\n                list2.append(list1[j])\n                list3.append(j)\n                list1.remove(list1[j])\n                break\n    return list2\ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest numbers in order from largest to smallest.\n    '''\n    if n > len(list1):\n        print(\"please enter a value less than the length of the list\")\n    list2=[]\n    list3=[]\n    for i in range(0,n):\n        for j in range(0,len(list1)):\n            if list1[j] > list2[0]:\n                list2.append(list1[j])\n                list3.append(j)\n                list1.remove(list1[j])\n                break\n    return list2\ndef larg_nnum3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    if n > len(list1):\n        print(\"please enter a value less than the length of the list\")\n    list2=[]\n    for i in range(0,n):\n        smallest = list1[0]\n        for j in range(0,len(list1)):\n            if list1[j] < smallest:\n                smallest = list1[j]\n        list2.append(smallest)\n        list1.remove(smallest)\n    return list2\ndef larg_nnum3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest numbers from the list.\n    '''\n    if n > len(list1):\n        print(\"please enter a value less than the length of the list\")\n    list2=[]\n    for i in range(0,n):\n        smallest = list1[0]\n        for j in range(0,len(list1)):\n            if list1[j] < smallest:\n                smallest = list1[j]\n        list2.append(smallest)\n        list1.remove(smallest)\n    return list2\ndef larg_nnum4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list in descending order.\n    '''\n    if n > len(list1):\n        print(\"please enter a value less than the length of the list\")\n    list2=[]\n    for i in range(0,n):\n        smallest = list1[0]\n        for j in range(0,len(list1)):\n            if list1[j] < smallest:\n                smallest = list1[j]\n        list2.append(smallest)\n        list1.remove(smallest)\n    list2.sort(reverse=True)\n    return list2\ndef larg_nnum4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest numbers from the list in descending order.\n    '''\n    if n > len(list1):\n        print(\"please enter a value less than the length of the list\")\n    list2=[]\n    for i in range(0,n):\n        smallest = list1[0]\n        for j in range(0,len(list1)):\n            if list1[j] < smallest:\n                smallest = list1[j]\n        list2.append(smallest)\n        list1.remove(smallest)\n    list2.sort(reverse=True)\n    return list2\ndef larg_nnum5(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list in ascending order.\n    '''\n    if n > len(list1):\n        print(\"please enter a value less than the length of the list\")\n    list2=[]\n    for i in range(0,n):\n        largest = list1[0]\n        for j in range(0,len(list1)):\n            if list1[j] > largest:\n                largest = list1[j]\n        list2.append(largest)\n        list1.remove(largest)\n    return list2\ndef larg_nnum5(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest numbers from the list in ascending order.\n    '''\n    if n > len(list1):\n        print(\"please enter a value less than the length of the list\")\n    list2=[]\n    for i in range(0,n):\n        largest = list1[0]\n        for j in range(0,len(list1)):\n            if list1[j] > largest:\n                largest = list1[j]\n        list2.append(largest)\n        list1.remove(largest)\n    return list2\ndef is_sorted(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted in ascending order and False otherwise.\n    '''\n    for i in range(0,len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\ndef is_sorted2(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted in descending order and False otherwise.\n    '''\n    for i in range(0,len(list1)-1):\n        if list1[i] < list1[i+1]:\n            return False\n    return True\ndef is_sorted3(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted in ascending numerical order and False otherwise.\n    '''\n    for i in range(0,len(list1)-1):\n        if list1[i] >= list1[i+1]:\n            return False\n    return True\ndef is_sorted4(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted in descending numerical order and False otherwise.\n    '''\n    for i in range(0,len(list1)-1):\n        if list1[i] <= list1[i+1]:\n            return False\n    return True\ndef sort_list(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the original list sorted in ascending order.\n    '''\n    return list1.sort()\ndef sort_list2(list1):\n    '''",
        "num_ids": 1
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq._heapify_max(list1)\n    max_n = heapq._heappop_max(list1)\n    return_list = []\n    for i in range(n):\n        return_list.append(max_n)\n    return return_list\n",
        "num_ids": 69
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1)<n:\n        return \"Not enough values in the list\"\n    return heapq.nlargest(n,list1)\n    \ndef larg_nnum1(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1)<n:\n        return \"Not enough values in the list\"\n    return sorted(list1)[-n:]\n    \ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1)<n:\n        return \"Not enough values in the list\"\n    return [x for _,x in sorted(zip(list1,list1),reverse=True)][:n]\n",
        "num_ids": 52
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return [heapq.heappop(list1) for x in range(n)]\n",
        "num_ids": 37
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # if len(list1) <= n:\n    #     return list1\n    # else:\n    #     list2=list1[-n:]\n    #     return sorted(list2,reverse=True)\n    # l=len(list1)\n    # if l<=n:\n    #     return list1\n    # else:\n    #     return sorted(list1,reverse=True)[:n]\n    return heapq.nlargest(n, list1)\n",
        "num_ids": 115
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # solution 1\n    # return sorted(list1,reverse=True)[:n]\n    # solution 2\n    return heapq.nlargest(n,list1)\n    \n    \n",
        "num_ids": 46
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r*h\n",
        "num_ids": 15
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*math.pi*r*h + 2*math.pi*r**2\n    return area\n    \ndef find_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*math.pi*r*h + 2*math.pi*r**2\n    print('The lateral surface area of a cylinder with radius %.1f and height %.1f is %.1f.'%(r,h,area))\n",
        "num_ids": 62
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n",
        "num_ids": 20
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral = 2*np.pi*r*h\n    return lateral\n",
        "num_ids": 20
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    S = 2*pi*r*(r+h)\n    return S\n",
        "num_ids": 27
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*np.pi*r*h+2*np.pi*r**2\n    \n    \ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*np.pi*r*h+2*np.pi*r**2\n    \n    \ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return np.pi*r*h\n    \n    \ndef lateral_surface_cone_slope(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return np.pi*r*h\n    \n    \ndef lateral_surface_square(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return 2*r*h\n    \n    \ndef lateral_surface_rectangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    return 2*r*h\n    \n    \ndef lateral_surface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle.\n    '''\n    return (r*h)/2\n    \n    \ndef lateral_surface_parallelogram(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram.\n    '''\n    return 2*r*h\n    \n    \ndef lateral_surface_trapezoid(r,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid.\n    '''\n    return 2*r*h\n    \n    \ndef lateral_surface_kite(r,h):\n    '''\n    Write a function to find the lateral surface area of a kite.\n    '''\n    return r*h\n    \n    \ndef lateral_surface_narc(r,h):\n    '''\n    Write a function to find the lateral surface area of a nautical\n    architecture racoon.\n    '''\n    return r*h\n    \n    \ndef lateral_surface_kite_slope(r,h):\n    '''\n    Write a function to find the lateral surface area of a kite.\n    '''\n    return r*h\n    \n    \ndef lateral_surface_tent(r,h):\n    '''\n    Write a function to find the lateral surface area of a tent.\n    '''\n    return (r*h)/2\n    \n    \ndef lateral_surface_octagon(r,h):\n    '''\n    Write a function to find the lateral surface area of an octagon.\n    '''\n    return 2*r*h\n    \n    \ndef lateral_surface_hexagon(r,h):\n    '''\n    Write a function to find the lateral surface area of a hexagon.\n    '''\n    return 2*np.pi*r*h\n    \n    \ndef lateral_surface_octahedron(r,h):\n    '''\n    Write a function to find the lateral surface area of an octahedron.\n    '''\n    return 2*r*h\n    \n    \ndef lateral_surface_dodecahedron(r,h):\n    '''\n    Write a function to find the lateral surface area of a dodecahedron.\n    '''\n    return 2*r*h\n    \n    \ndef lateral_surface_icosahedron(r,h):\n    '''\n    Write a function to find the lateral surface area of a icosahedron.\n    '''\n    return 2*r*h\n    \n    \ndef lateral_surface_icosidodecahedron(r,h):\n    '''\n    Write a function to find the lateral surface area of an icosidodecahedron.\n    '''\n    return 2*r*h\n    \n    \ndef lateral_surface_icosahedron(r,h):\n    '''\n    Write a function to find the lateral surface area of an icosahedron.\n    '''\n    return 2*r*h\n    \n    \ndef lateral_surface_icosipentagon(r,h):\n    '''\n    Write a function to find the lateral surface area of an icosipentagon.\n    '''\n    return 2*r*h\n    \n    \ndef lateral_surface_icosphonate(r,h):\n    '''\n    Write a function to find the lateral surface area of an icosphonate.\n    '''\n    return 2*r*h\n    \n    \ndef lateral_surface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*np.pi*r**2\n    \n    \ndef lateral_surface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus.\n    '''\n    return 2*np.pi*r*h\n    \n    \ndef lateral_surface_hemisphere(r):\n    '''\n    Write a function to find the lateral surface area of a hemisphere.\n    '''\n    return 2*np.pi*r\n    \n    \ndef lateral_surface_cone_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return np.pi*r**2*h/3\n    \n    \ndef lateral_surface_square_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return np.pi*r**2*h/4\n    \n    \ndef lateral_surface_rectangle_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    return np.pi*r**2*h/4\n    \n    \ndef lateral_surface_triangle_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle.\n    '''\n    return np.pi*r**2*h/3\n    \n    \ndef lateral_surface_parallelogram_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram.\n    '''\n    return np.pi*r**2*h/4\n    \n    \ndef lateral_surface_trapezoid_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid.\n    '''\n    return np.pi*r**2*h/3\n    \n    \ndef lateral_surface_kite_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a kite.\n    '''\n    return np.pi*r**2*h/2\n    \n    \ndef lateral_surface_narc_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a nautical\n    architecture racoon.\n    '''\n    return np.pi*r**2*h/2\n    \n    \ndef lateral_surface_kite_volume_slope(r,h):\n    '''\n    Write a function to find the lateral surface area of a kite.\n    '''\n    return np.pi*r**2*h/2\n    \n    \ndef lateral_surface_tent_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a tent.\n    '''\n    return np.pi*r**2*h/2\n    \n    \ndef lateral_surface_octagon_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of an octagon.\n    '''\n    return np.pi*r**2*h/8\n    \n    \ndef lateral_surface_hexagon_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a hexagon.\n    '''\n    return np.pi*r**2*h/6\n    \n    \ndef lateral_surface_octahedron_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of an octahedron.\n    '''\n    return np.pi*r**",
        "num_ids": 10
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2*3.14*r*(r+h)\n    return lateral_surface_area\n",
        "num_ids": 32
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*math.pi*r*h + 2*math.pi*r*r\n    return area\n",
        "num_ids": 29
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*(r**2)*h\n    \ndef lateral_surf_cylinder_test():\n    print('Area = ',lateralsuface_cylinder(1,2))\n    print('Area = ',lateralsuface_cylinder(3,4))\n",
        "num_ids": 65
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n",
        "num_ids": 13
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n    \nvolume_cube(5)\n",
        "num_ids": 22
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n",
        "num_ids": 13
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    def cube_volume(l):\n        return round((l**3)*math.pi,2)\n    return cube_volume(l)\n",
        "num_ids": 39
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    print(n | (n>>1))\n",
        "num_ids": 13
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n&0xAAAAAAAA\n",
        "num_ids": 10
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n",
        "num_ids": 10
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n",
        "num_ids": 10
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    x = n & 0xaaaaaaaa\n    return x ^ n\n",
        "num_ids": 18
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n ^= n >> 1\n    return n\n",
        "num_ids": 14
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    # Find the binary representation of the given number\n    bin_rep = bin(n)\n    print(\"The binary representation of the given number is: \",bin_rep)\n",
        "num_ids": 43
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & -n\n",
        "num_ids": 9
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 0x55555555\n    return n & mask\n",
        "num_ids": 18
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n",
        "num_ids": 13
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = list(test_list)\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    my_dict = {}\n    for i in unique_list:\n        my_dict[i] = test_list.count(i)\n    return my_dict\n",
        "num_ids": 89
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    new_list = []\n    new_dict = {}\n    for tup in test_list:\n        tup = tuple(tup)\n        new_list.append(tup)\n    new_dict = dict(Counter(new_list))\n    return new_dict\n    \nprint(check_occurences([(1, 2), (1, 2), (1, 3), (2, 3)]))\n",
        "num_ids": 99
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #test_list = [('a', 'e'), ('a', 'd'), ('a', 'e'), ('a', 'f'), ('a', 'c'), ('b', 'f')]\n    #test_list = [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')]\n    #test_list = [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')]\n    #test_list = [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')",
        "num_ids": 1992
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # input list: [(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (2, 4), (1, 2), (2, 4), (1, 2), (1, 2), (1, 2)]\n    # output dict: {(1, 2): 6, (2, 4): 2}\n    \n    # sample solution\n    \n    # create empty dictionary\n    dict = {}\n    \n    # loop through list of tuples\n    for tup in test_list:\n        \n        # if tup is in the dictionary, add to the counter value by 1\n        if tup in dict:\n            dict[tup] += 1\n        \n        # if tup is not in the dictionary, add tup to dict with a value of 1\n        else:\n            dict[tup] = 1\n            \n    # return dict\n    return dict\n    \n",
        "num_ids": 212
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    output_dict = {}\n",
        "num_ids": 9
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    output = {}\n    for word in test_list:\n        if word not in output:\n            output[word] = 1\n        else:\n            output[word] += 1\n    return output\n",
        "num_ids": 48
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_words = []\n    for tup in test_list:\n        unique_words.append(tup[0])\n",
        "num_ids": 32
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    list_of_tuples = test_list\n    unique_tuples = set(list_of_tuples)\n    list_of_tuples = []\n",
        "num_ids": 40
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [('John', ['math', 'computer']), ('Anna', ['math','statistics']), ('John', ['statistics', 'chemistry']), ('Mark', ['computer','mathematics', 'physics'])]\n    test_list.sort()\n    for item in test_list:\n        print(item)\n    return dict(Counter([item for item, occurances in test_list]))\n",
        "num_ids": 99
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Your code here\n    #\n    return {test_list[i]: test_list.count(test_list[i]) for i in range(len(test_list))}\n",
        "num_ids": 45
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # count = 0\n    # for i in range(len(str)):\n    #     for j in range(i, len(str)):\n    #         if (str[i:j+1]):\n    #             count += 1\n    # return count\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if (str[i:j+1]):\n                count += 1\n    return count\n",
        "num_ids": 117
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # return len([sub for sub in str.split()])\n    def count(str, sub):\n        n = 0\n        for i in range(len(str)):\n            if str[i:].startswith(sub):\n                n += 1\n        return n\n    return sum([count(str, sub) for sub in set(str.split())])\n",
        "num_ids": 87
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!='':\n                n+=1\n    return n\n",
        "num_ids": 57
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= \"\":\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def count_substrings(str): \n        n = len(str) \n        count = 0\n        for i in range(n): \n            for j in range(i, n): \n                subs = str[i:j+1]\n                if len(subs)!= 0: \n                    count += 1\n        return count \n    return count_substrings(str) \n  \ndef number_of_substrings(str): \n    '''\n    Write a python function to count the number of substrings of a given string. \n    '''\n    def count_substrings(str): \n        n = len(str) \n        count = 0\n        for i in range(n): \n            for j in range(i, n): \n                subs = str[i:j+1]\n                count += 1\n        return count \n    return count_substrings(str) \n",
        "num_ids": 83
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    non_empty_substrings = []\n",
        "num_ids": 12
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    cnt = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            sub = str[i:j+1] \n            if len(sub) > 1: \n                cnt += 1\n    return cnt \n",
        "num_ids": 72
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    str = \"1234\"\n    if str:\n        count = 0\n        for i in range(len(str)):\n            for j in range(i, len(str)):\n                count += 1\n        return count\n    else:\n        return 0\n    # return str.count(\"1\") + str.count(\"2\") + str.count(\"3\") + str.count(\"4\")\n",
        "num_ids": 94
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    ans = len(str) \n    for i in range(1, len(str)): \n        # last and first characters are checked \n        # if they are not equal then we count \n        # them as a substring \n        if (str[i]!= str[i - 1]): \n            ans += 1\n    return ans \n",
        "num_ids": 85
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    i=0\n    j=0\n    str_length=len(str)\n    while(i<str_length):\n        if str[i]==str[j]:\n            count+=1\n            j+=1\n            i+=1\n            continue\n        else:\n            i+=1\n            j=0\n    print(\"No. of substrings in the string \"+str+\" is \"+str(count))\n",
        "num_ids": 103
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_prev_number(number, previous_number):\n        '''\n        Find the previous number\n        '''\n        if number < previous_number:\n            return 0\n        else:\n            return number - previous_number\n",
        "num_ids": 27
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # return n**(m//2) if m%2==0 else 0 # this seems to be too slow!\n    # n = m//2 if m%2==0 else m//2+1\n    # return n**n\n    \n    # # code refactored. O(n^2)\n    # if n == 0:\n    #     return 0\n    # if m == 0:\n    #     return 1\n    # return m * get_total_number_of_sequences(m-1,n-1) + get_total_number_of_sequences(m,n-1)\n    # # code refactored. O(n)\n    # if m == 0:\n    #     return 1\n    # if m == 1:\n    #     return n\n    # if m == 2:\n    #     return n**2\n    # if m == 3:\n    #     return n**3\n    # if m == 4:\n    #     return n**4\n    # if m == 5:\n    #     return n**5\n    # if m == 6:\n    #     return n**6\n    # if m == 7:\n    #     return n**7\n    # if m == 8:\n    #     return n**8\n    # if m == 9:\n    #     return n**9\n    # if m == 10:\n    #     return n**10\n    # if m == 11:\n    #     return n**11\n    # if m == 12:\n    #     return n**12\n    # if m == 13:\n    #     return n**13\n    # if m == 14:\n    #     return n**14\n    # if m == 15:\n    #     return n**15\n    # if m == 16:\n    #     return n**16\n    # if m == 17:\n    #     return n**17\n    # if m == 18:\n    #     return n**18\n    # if m == 19:\n    #     return n**19\n    # if m == 20:\n    #     return n**20\n    # if m == 21:\n    #     return n**21\n    # if m == 22:\n    #     return n**22\n    # if m == 23:\n    #     return n**23\n    # if m == 24:\n    #     return n**24\n    # if m == 25:\n    #     return n**25\n    # if m == 26:\n    #     return n**26\n    # if m == 27:\n    #     return n**27\n    # if m == 28:\n    #     return n**28\n    # if m == 29:\n    #     return n**29\n    # if m == 30:\n    #     return n**30\n    # if m == 31:\n    #     return n**31\n    # if m == 32:\n    #     return n**32\n    # if m == 33:\n    #     return n**33\n    # if m == 34:\n    #     return n**34\n    # if m == 35:\n    #     return n**35\n    # if m == 36:\n    #     return n**36\n    # if m == 37:\n    #     return n**37\n    # if m == 38:\n    #     return n**38\n    # if m == 39:\n    #     return n**39\n    # if m == 40:\n    #     return n**40\n    # if m == 41:\n    #     return n**41\n    # if m == 42:\n    #     return n**42\n    # if m == 43:\n    #     return n**43\n    # if m == 44:\n    #     return n**44\n    # if m == 45:\n    #     return n**45\n    # if m == 46:\n    #     return n**46\n    # if m == 47:\n    #     return n**47\n    # if m == 48:\n    #     return n**48\n    # if m == 49:\n    #     return n**49\n    # if m == 50:\n    #     return n**50\n    # if m == 51:\n    #     return n**51\n    # if m == 52:\n    #     return n**52\n    # if m == 53:\n    #     return n**53\n    # if m == 54:\n    #     return n**54\n    # if m == 55:\n    #     return n**55\n    # if m == 56:\n    #     return n**56\n    # if m == 57:\n    #     return n**57\n    # if m == 58:\n    #     return n**58\n    # if m == 59:\n    #     return n**59\n    # if m == 60:\n    #     return n**60\n    # if m == 61:\n    #     return n**61\n    # if m == 62:\n    #     return n**62\n    # if m == 63:\n    #     return n**63\n    # if m == 64:\n    #     return n**64\n    # if m == 65:\n    #     return n**65\n    # if m == 66:\n    #     return n**66\n    # if m == 67:\n    #     return n**67\n    # if m == 68:\n    #     return n**68\n    # if m == 69:\n    #     return n**69\n    # if m == 70:\n    #     return n**70\n    # if m == 71:\n    #     return n**71\n    # if m == 72:\n    #     return n**72\n    # if m == 73:\n    #     return n**73\n    # if m == 74:\n    #     return n**74\n    # if m == 75:\n    #     return n**75\n    # if m == 76:\n    #     return n**76\n    # if m == 77:\n    #     return n**77\n    # if m == 78:\n    #     return n**78\n    # if m == 79:\n    #     return n**79\n    # if m == 80:\n    #     return n**80\n    # if m == 81:\n    #     return n**81\n    # if m == 82:\n    #     return n**82\n    # if m == 83:\n    #     return n**83\n    # if m == 84:\n    #     return n**84\n    # if m == 85:\n    #     return n**85\n    # if m == 86:\n    #     return n**86\n    # if m == 87:\n    #     return n**87\n    # if m == 88:\n    #     return n**88\n    # if m == 89:\n    #     return n**89\n    # if m == 90:\n    #     return n**90\n    # if m == 91:\n    #     return n**91\n    # if m == 92:\n    #     return n**92\n    # if m == 93:\n    #     return n**93\n    # if m == 94:\n    #     return n**94\n    # if m == 95:\n    #     return n**95\n    # if m == 96:\n    #     return n**96\n    # if m == 97:\n    #     return n**97\n    # if m == 98:\n    #     return n**98\n    # if m == 99:\n    #     return n**99\n    # if m == 100:\n    #     return n**100\n    \n    # # code refactored. O(n)\n    # if n == 0:\n    #     return 0\n    # if m == 0:\n    #     return 1\n    # if m == 1:\n    #     return 1\n    # if m == 2:\n    #     return 2\n    # if m == 3:\n    #     return 3\n    # if m == 4:\n    ",
        "num_ids": 1863
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_sequences(m,n): \n        '''\n        Write a function that takes in a positive integer m and a positive integer n and finds the number of sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n        '''\n        return (n+1)*factorial(n+1,m)*factorial(n,m-n)//(factorial(n+1,n)*factorial(n,m-n))\n    return get_sequences(m,n)\n",
        "num_ids": 60
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Your code here\n    \n    #sum_of_factorials = 0\n    \n    #for num in range(1,m+1):\n    #    sum_of_factorials += factorial(num)\n    \n    #return sum_of_factorials/factorial(n)\n    \n    \n    #2\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #3\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #4\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #5\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #6\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #7\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #8\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #9\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #10\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #11\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #12\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #13\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #14\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #15\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #16\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #17\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #18\n    def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    return factorial(m)/(factorial(n) * factorial(m - n))\n    \n    \n    #19\n    def get_total_number_of_sequences(m,n): ",
        "num_ids": 52
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def search(sequence, start, end, m):\n        if end == n:\n            print(sequence)\n            return 1\n        elif start > m:\n            return 0\n        else:\n            return search(sequence + str(start), start + 1, end, m) + search(sequence, start + 1, end, m)\n",
        "num_ids": 80
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # n = 3\n    # m = 5\n    # result = 0\n",
        "num_ids": 20
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        return n * get_total_number_of_sequences(m, n - 1)\n",
        "num_ids": 39
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # m = 5; n = 3\n    # # m = 2; n = 2\n    # # m = 2; n = 1\n",
        "num_ids": 34
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n",
        "num_ids": 13
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int((m**n - m**(n/2)) / (n - 1))\nprint(get_total_number_of_sequences(1,4))\nprint(get_total_number_of_sequences(4,2))\nprint(get_total_number_of_sequences(15,6))",
        "num_ids": 77
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2)==1:\n        list1[-1]=list2[0]\n    elif len(list1)==1:\n        list1[0]=list2[0]\n    else:\n        list1[-1]=list2[0]\n        list1[-2]=list2[1]\n    return list1\nprint(replace_list([1,2,3,4,5], [6,7,8,9,10]))\n",
        "num_ids": 114
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #list1.pop()\n    #list2.reverse()\n    #list1[-1:] = list2\n    #return list1\n    #use extend to concatenate two lists\n    list1[-1:] = list2\n    print(list1)\n    return list1\nreplace_list([1,2,3], [4,5,6])\n",
        "num_ids": 88
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1] = list2[0:len(list2)]\n    return list1\n",
        "num_ids": 30
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:-1] = list2[:]\n    return list1\n",
        "num_ids": 20
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:len(list2)] = list2\n",
        "num_ids": 16
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n",
        "num_ids": 13
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    characters = 0\n    for character in str1:\n        characters += 1\n    return characters\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    sum = 0\n    for i in str1:\n        sum += 1\n    return sum\nprint(count_charac(\"Hacker\"))\n",
        "num_ids": 35
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    sum = 0\n    for i in str1:\n        sum = sum+1\n    print(\"Total number of characters are : \",sum)\n",
        "num_ids": 35
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    num = 0\n    for i in str1:\n        num += 1\n    return num\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    return count\n    ",
        "num_ids": 25
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Base case \n    if (math.ceil(math.sqrt(N)) == math.sqrt(N)): \n        return math.ceil(math.sqrt(N)) \n    else: \n        return -1\n",
        "num_ids": 60
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N<0: \n        return -1\n    x = N \n    ans = 0\n    while ans**2 < x: \n        ans = ans + 1\n    if ans**2 == x: \n        return ans\n    return ans - 1\n  ",
        "num_ids": 64
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0: \n        return 1\n    if math.sqrt(N) % 1 == 0: \n        return (int(math.sqrt(N))) \n    else: \n        return ((int(math.sqrt(N))+1)**2) \n        \n        \ndef next_Perfect_Square_2(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0: \n        return 1\n    i=N\n    while (i%4)>0:\n        i = i + 1\n    return i\n        \n        \n        \ndef is_Palindrome(number): \n    '''\n    Write a python function to check whether a number is a palindrome.\n    '''\n    number = str(number) \n    reverse = number[::-1] \n    if number == reverse: \n        return True\n    return False\n    \n    \ndef is_Palindrome_2(number): \n    '''\n    Write a python function to check whether a number is a palindrome.\n    '''\n    number = list(map(int, str(number))) \n    reverse = number[::-1] \n    if number == reverse: \n        return True\n    return False\n    \n    \n    \ndef is_Palindrome_3(number): \n    '''\n    Write a python function to check whether a number is a palindrome.\n    '''\n    number = str(number) \n    return number == number[::-1] \n    \n    \n    \ndef max_sum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b: \n        return a \n    else: \n        return b \n        \n        \n        \ndef max_sum_2(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b: \n        return a \n    else: \n        return b \n    \n    \n    \ndef max_sum_3(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b: \n        return a \n    else: \n        return b \n        \n        \n        \ndef max_sum_4(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n    \n    \ndef min_sum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b: \n        return b \n    else: \n        return a \n        \n        \n        \ndef min_sum_2(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b: \n        return b \n    else: \n        return a \n    \n    \n    \ndef min_sum_3(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b: \n        return b \n    else: \n        return a \n        \n        \n        \ndef min_sum_4(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n    \n    \n    \ndef max_difference(a,b):\n    '''\n    Write a python function to find the maximum difference between two numbers.\n    '''\n    max_difference = max_sum(a,b)-min_sum(a,b) \n    return max_difference\n    \n    \n    \ndef max_difference_2(a,b):\n    '''\n    Write a python function to find the maximum difference between two numbers.\n    '''\n    max_difference = max_sum_2(a,b)-min_sum_2(a,b) \n    return max_difference\n    \n    \n    \ndef max_difference_3(a,b):\n    '''\n    Write a python function to find the maximum difference between two numbers.\n    '''\n    max_difference = max_sum_3(a,b)-min_sum_3(a,b) \n    return max_difference\n    \n    \n    \ndef max_difference_4(a,b):\n    '''\n    Write a python function to find the maximum difference between two numbers.\n    '''\n    max_difference = max_sum_4(a,b)-min_sum_4(a,b) \n    return max_difference\n    \n    \n    \ndef reverse_string(string): \n    '''\n    Write a python function to reverse a string.\n    '''\n    reverse = string[::-1] \n    return reverse\n    \n    \n    \ndef reverse_string_2(string): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return ''.join(reversed(string)) \n    \n    \n    \ndef reverse_string_3(string): \n    '''\n    Write a python function to reverse a string.\n    '''\n    s = [] \n    for i in string: \n        s.insert(0,i) \n    return ''.join(s) \n    \n    \n    \ndef is_Prime(number): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if number > 1: \n        for i in range(2, number//2): \n            if (number % i) == 0: \n                return False\n            return True\n    else: \n        return False\n    \n    \ndef is_Prime_2(number): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if number > 1: \n        for i in range(2, number//2): \n            if (number % i) == 0: \n                return False\n            return True\n    else: \n        return False\n    \n    \ndef is_Prime_3(number): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if number > 1: \n        for i in range(2, int(math.sqrt(number))+1): \n            if (number % i) == 0: \n                return False\n            return True\n    else: \n        return False\n        \n        \ndef is_Prime_4(number): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if number > 1: \n        for i in range(2, int(math.sqrt(number))+1): \n            if (number % i) == 0: \n                return False\n            return True\n    else: \n        return False\n        \n        \ndef is_Prime_5(number): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if number > 1: \n        return all(number % i for i in range(2, number//2))\n    return False\n    \n    \ndef is_Prime_6(number): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if number > 1: \n        for i in range(2, int(math.sqrt(number))+1): \n            if (number % i) == 0: \n                return False\n            return True\n    else: \n        return False\n    \n    \ndef is_Prime_7(number): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if number > 1: \n        for i in range(2, int(math.sqrt(number))+1): \n            if (number % i) == 0: \n                return False\n            return True\n    else: \n        return False\n        \n        \ndef is_Prime_8(number): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if number > 1",
        "num_ids": 7
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # To store square of N. \n    Square = N * N \n    # To store previous perfect square. \n    previous = N - 1\n    # If N is square of a perfect square. \n    if Square == previous: \n        # Print Square of N. \n        return int((N / math.sqrt(2)) + 1) * int((N / math.sqrt(2)) + 1) \n    # If N is not a square of a perfect square. \n    else: \n        while Square!= previous: \n            Square = Square - previous \n            previous = previous + 1\n            # If Square is perfect square. \n            if Square == previous: \n                return int((N / math.sqrt(2)) + 1) * int((N / math.sqrt(2)) + 1) \n            # If Square is not perfect square. \n            else: \n                return -1\n",
        "num_ids": 218
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Import math module \n    # Return the next perfect square \n    \n    return int(math.sqrt(N))**2\n    ",
        "num_ids": 35
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    ans = 0\n    while ans**2 < N:\n        ans = ans + 1\n    if ans**2 == N:\n        return ans\n    else:\n        return -1\n    \n",
        "num_ids": 47
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    Sqrt = int(math.sqrt(N)) \n    if (Sqrt * Sqrt == N): \n        return (Sqrt + 1) * (Sqrt + 1) \n    while (True): \n        Sqrt += 1\n        if (Sqrt * Sqrt > N): \n            break\n    return (Sqrt - 1) * (Sqrt - 1) \n",
        "num_ids": 103
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(N, 1, -1):\n        if (i * i <= N):\n            return (i * i)\n",
        "num_ids": 34
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #Your code here\n    sqrt = math.sqrt(N)\n    if sqrt == int(sqrt):\n        return (sqrt + 1) ** 2\n    else:\n        return -1\n    \ndef main():\n    print(\"nextPerfectSquare(10) returns {}\".format(next_Perfect_Square(10)))\n    print(\"nextPerfectSquare(14) returns {}\".format(next_Perfect_Square(14)))\n    print(\"nextPerfectSquare(15) returns {}\".format(next_Perfect_Square(15)))\n    print(\"nextPerfectSquare(16) returns {}\".format(next_Perfect_Square(16)))\n    print(\"nextPerfectSquare(17) returns {}\".format(next_Perfect_Square(17)))\n    print(\"nextPerfectSquare(22) returns {}\".format(next_Perfect_Square(22)))\n    print(\"nextPerfectSquare(40) returns {}\".format(next_Perfect_Square(40)))\n    print(\"nextPerfectSquare(60) returns {}\".format(next_Perfect_Square(60)))\n    print(\"nextPerfectSquare(21) returns {}\".format(next_Perfect_Square(21)))\n    print(\"nextPerfectSquare(1) returns {}\".format(next_Perfect_Square(1)))\n    print(\"nextPerfectSquare(4) returns {}\".format(next_Perfect_Square(4)))\n    print(\"nextPerfectSquare(9) returns {}\".format(next_Perfect_Square(9)))\n    print(\"nextPerfectSquare(2) returns {}\".format(next_Perfect_Square(2)))\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 372
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    count=0\n    for i in range(N,(N*N)+1):\n        if(math.sqrt(i)==math.floor(math.sqrt(i))):\n            count+=1\n    return(count+1)\n",
        "num_ids": 60
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = 0\n",
        "num_ids": 17
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max([sum(arr[i:j]) for i in range(len(arr)) for j in range(i, len(arr) + 1)])\n",
        "num_ids": 39
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    current_sum = 0\n    max_sum = 0\n    max_current_sum = 0\n    for i in range(0, len(arr)-1):\n        current_sum += arr[i]\n        max_current_sum = max(max_current_sum, current_sum)\n        if(i < len(arr)-1):\n            if(arr[i] < arr[i+1]):\n                current_sum = 0\n        if(max_current_sum > max_sum):\n            max_sum = max_current_sum\n    return max_sum\n",
        "num_ids": 136
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    arr.sort()\n    for i in range(0, len(arr)-1):\n        first = arr[i]\n        second = arr[i+1]\n        if(first < second):\n            max_sum += second - first\n    return max_sum\n",
        "num_ids": 71
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    inc = 0\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            inc += 1\n    dec = n - inc\n    if inc == 0 or dec == 0:\n        return sum(arr)\n    else:\n        return max_sum(arr[:inc]) + max_sum(arr[inc:])\n",
        "num_ids": 96
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sorted_arr = sorted(arr)\n    max_sum = 0\n    for i in range(len(sorted_arr)-2):\n        if sorted_arr[i+1] - sorted_arr[i] == sorted_arr[i+2] - sorted_arr[i+1]:\n            print(sorted_arr[i+1] - sorted_arr[i])\n            max_sum += sorted_arr[i+1] - sorted_arr[i]\n    return max_sum\n",
        "num_ids": 119
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr)-1)\n    \ndef max_sum_helper(arr, low, high):\n    if low == high:\n        return arr[low]\n    if low < high:\n        mid = (low + high) // 2\n        if mid > low and arr[mid] < arr[mid-1]:\n            return max_sum_helper(arr, mid+1, high)\n        else:\n            return max(max_sum_helper(arr, low, mid), max_sum_helper(arr, mid+1, high))\n    return 0\n",
        "num_ids": 148
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # max_sum has the following parameter(s):\n    # arr: the array to find the maximum bitonic subsequence of.\n",
        "num_ids": 32
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max([sum(arr[i:j]) for i in range(len(arr)) for j in range(i+1,len(arr)+1)])\n",
        "num_ids": 40
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sum_all = sum(arr)\n    sum_inc = 0\n    sum_dec = 0\n    max_sum = 0\n    inc = 1\n    for i in range(len(arr)):\n        if sum_inc == 0 and sum_dec == 0:\n            sum_inc = sum_all - arr[i]\n            sum_dec = sum_all - arr[i]\n        else:\n            sum_inc -= arr[i]\n            sum_dec -= arr[i]\n            sum_all = sum_inc + sum_dec\n            if sum_inc < 0 and sum_dec > 0:\n                inc = -1\n            elif sum_inc > 0 and sum_dec < 0:\n                inc = 1\n        max_sum = max(max_sum, sum_inc + sum_dec)\n    return max_sum\n    \ndef count_arr(arr):\n    '''\n    Write a function that takes an array and returns the number of pairs of elements in the array whose sum is equal to the number of elements in the array.\n    '''\n    sum_arr = sum(arr)\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum_arr:\n                count += 1\n    return count\n    \ndef missing(arr):\n    '''\n    Write a function that takes an array and returns the smallest element in the array that is missing from the array.\n    '''\n    max_num = max(arr)\n    missing = 1\n    for i in range(2, max_num + 1):\n        if i not in arr:\n            return i\n    \ndef dup_arr(arr):\n    '''\n    Write a function that takes an array and returns an array of the numbers of duplicate values in the original array.\n    '''\n    count_arr = []\n    for num in arr:\n        count_arr.append(arr.count(num))\n    return count_arr\n    \ndef remove_num(arr):\n    '''\n    Write a function that takes an array and returns a new array of the numbers in the original array that are greater than their adjacent element in the array.\n    '''\n    new_arr = []\n    for i in range(1, len(arr)):\n        if arr[i - 1] < arr[i]:\n            new_arr.append(arr[i])\n    return new_arr\n    \ndef sum_matrix(arr):\n    '''\n    Write a function that takes a two-dimensional array and returns the sum of all the values in the array.\n    '''\n    sum_arr = 0\n    for row in arr:\n        for num in row:\n            sum_arr += num\n    return sum_arr\n    \ndef sub_matrix(arr, start):\n    '''\n    Write a function that takes a two-dimensional array and an integer and returns the sum of all the values in the array that are greater than or equal to the integer.\n    '''\n    sum_arr = 0\n    for row in arr:\n        for num in row:\n            if num >= start:\n                sum_arr += num\n    return sum_arr\n    \ndef even_sum(arr):\n    '''\n    Write a function that takes an array and returns the sum of all the values in the array that are divisible by 2.\n    '''\n    sum_arr = 0\n    for num in arr:\n        if num % 2 == 0:\n            sum_arr += num\n    return sum_arr\n    \ndef matrix_multiply(arr, arr2):\n    '''\n    Write a function that takes two two-dimensional arrays and returns a one-dimensional array with the values that are the products of corresponding values from the two arrays.\n    '''\n    new_arr = []\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            new_arr.append(arr[i][j] * arr2[i][j])\n    return new_arr\n    \ndef replace_char(arr):\n    '''\n    Write a function that takes a string and returns a new string with each character replaced with its corresponding character in the alphabet.\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_arr = []\n    for char in arr:\n        new_arr.append(alphabet[arr.index(char)])\n    return \"\".join(new_arr)\n    \ndef top_matrix(arr, size):\n    '''\n    Write a function that takes a two-dimensional array and a positive integer and returns a new one-dimensional array with the size of the given integer where each element in the one-dimensional array represents the topmost value in a column of the given two-dimensional array.\n    '''\n    new_arr = []\n    for i in range(len(arr)):\n        new_arr.append(max(arr[i]))\n    return new_arr\n",
        "num_ids": 42
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    i = 0\n    while abs(guess**2 - number) > 0.001:\n        guess = (guess + number/guess) / 2.0\n        i += 1\n    print(\"The Babylonian Square Root of \", number, \"is:\", guess)\n    print(\"Babylonian method took\", i, \"iterations to converge.\")\n",
        "num_ids": 91
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + 1) / 2\n    while y*y > number:\n        y = (y + x / y) / 2\n    return y\n    \ndef is_square(n):\n    '''\n    Write a function that determines if a number is a perfect square.\n    '''\n    for i in range(1, n):\n        if i*i == n:\n            return True\n    return False\n    \ndef is_perfect_square(number):\n    '''\n    Write a function that determines if a number is a perfect square.\n    '''\n    for i in range(1, int(number**(0.5)) + 1):\n        if i*i == number:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #initialise\n    number = abs(number)\n    tolerance = 0.00001\n    x1 = number / 2.0\n    x0 = x1 - 1\n    iterations = 0\n    while abs(x1 - x0) > tolerance:\n        #print(\"x1 = %f, x0 = %f\" %(x1,x0))\n        iterations += 1\n        x1 = 0.5 * (x1 + number/x1)\n        x0 = 0.5 * (x0 + number/x0)\n    return x1\n",
        "num_ids": 135
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2.0\n    better = guess + 1.0\n    while better!= better**2:\n        guess = better\n        better = (number / guess + guess) / 2.0\n    return better\n    \nprint(babylonian_squareroot(16))",
        "num_ids": 70
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    guess = number / 2\n    difference = guess**2 - number\n    while difference!= 0:\n        guess = (guess + number/guess)/2\n        difference = guess**2 - number\n    return guess\n    \nif __name__ == \"__main__\":\n    print(\"The square root of 36 is\", babylonian_squareroot(36))\n    print(\"The square root of 25 is\", babylonian_squareroot(25))\n    print(\"The square root of 16 is\", babylonian_squareroot(16))\n    \n'''\nThe output is:\nThe square root of 36 is 6.0\nThe square root of 25 is 3.0\nThe square root of 16 is 2.0\n'''",
        "num_ids": 1
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 0:\n        return 0\n    # it can also be written as r = (number + 1/2) ** 0.5\n    # this method is faster, but it is more accurate for small values of n\n    # when n is close to 1\n    a = number\n    b = 1\n    while abs(b - a) > 0.01:\n        c = (a + b) / 2\n        d = (c + a) / 2\n        if d == c:\n            break\n        b = c\n    return c\n",
        "num_ids": 127
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + 1) / 2\n    while abs(y * y - number) >= 0.001:\n        x = y\n        y = (x + number / x) / 2\n    return y\n",
        "num_ids": 56
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    precision = 20\n    guess = 1\n    num_list = [1, number]\n    while True:\n        guess = (num_list[-2] + num_list[-1])/2\n        guess = round(guess, precision)\n        guess = guess/10**precision\n        if guess == 0:\n            break\n        print('Number:', num_list[-1], 'Guess:', guess)\n        if guess**2 < num_list[-1]:\n            num_list.append(guess)\n        else:\n            num_list.append(num_list[-1])\n    return num_list\n",
        "num_ids": 157
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2.0\n    while True:\n        y = (x + number/x) / 2.0\n        if y == x:\n            break\n        x = y\n    return y\n",
        "num_ids": 50
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def is_even(number):\n        return number % 2 == 0\n",
        "num_ids": 19
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    #Create a table to store results of subproblems \n    L = [[0 for x in range(n)]for y in range(n)] \n",
        "num_ids": 45
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n",
        "num_ids": 32
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n",
        "num_ids": 32
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    table = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n):\n        table[i][i] = 1\n    for start in range(n-1, -1, -1):\n        for end in range(start+1, n):\n            if str[start] == str[end]:\n                table[start][end] = 2 + table[start+1][end-1]\n            else:\n                table[start][end] = max(table[start+1][end], table[start][end-1])\n    return table[0][n-1]\n",
        "num_ids": 155
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)]for y in range(n)] \n",
        "num_ids": 32
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1):\n        if str[i] == str[i + 1]: \n            dp[i][i + 1] = 2\n    for i in range(2, n): \n        for j in range(n):\n            if str[i] == str[j] and (j + 1 < n and str[j + 1] == str[i - 1]):\n                dp[i][j] = dp[i - 2][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) \n    return dp[n - 1][n - 1]\n",
        "num_ids": 212
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n",
        "num_ids": 11
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    l = [[0 for x in range(n+1)] for x in range(n+1)] \n    l2 = [[0 for x in range(n+1)] for x in range(n+1)] \n    \n    for i in range(1,n+1): \n        for j in range(1,n+1): \n            if (str[i-1] == str[j-1] and i!= j): \n                l[i][j] = l[i-1][j-1] + 1\n                l2[i][j] = 1\n            elif (l[i-1][j] >= l[i][j-1]): \n                l[i][j] = l[i-1][j] \n                l2[i][j] = 2\n            else: \n                l[i][j] = l[i][j-1] \n                l2[i][j] = 3\n    print(\"Length of Longest palindromic subsequence is: \" + str(l[n][n])) \n    #print(l)\n    print(\"Isolating the Longest Palindromic Subsequence:\")\n    printPalindromicSubsequence(str, l, l2) \n",
        "num_ids": 306
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)]for j in range(n)]\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1.0/i for i in range(1, n))\n",
        "num_ids": 21
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def sum_of_divisors(num):\n        total = 1\n        for divisor in range(2, num):\n            if (num % divisor == 0):\n                total += divisor\n        return total\n    return sum_of_divisors(n) + 1\n",
        "num_ids": 71
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1,n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum\n",
        "num_ids": 39
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1/i for i in range(1,n+1)])\n",
        "num_ids": 22
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum += 1/i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + sum(1/i for i in range(1,n))\n    \ndef sum_of_digits(n):\n    '''\n    Write a function that returns the sum of the digits of an integer n.\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef largest_prime_factor(n):\n    '''\n    Write a function that takes in an integer n and returns the largest prime factor of n.\n    '''\n    return max(prime_factors(n))\n",
        "num_ids": 14
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / (n-1) + harmonic_sum(n-1) if n > 1 else 1\n",
        "num_ids": 27
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 + n)*(1/n)\n",
        "num_ids": 15
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for num in range(1, n):\n        sum += 1/num\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum += 1/i\n    return sum\n    ",
        "num_ids": 30
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # result = []\n    # for num in array_nums1:\n    #     if num in array_nums2:\n    #         result.append(num)\n    # return result\n    return list(set(array_nums1) & set(array_nums2))\n",
        "num_ids": 70
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #method 1:\n    #res_set=set(array_nums1)&set(array_nums2)\n    #return res_set\n",
        "num_ids": 39
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    pointer1 = 0\n    pointer2 = 0\n    intersection_array = []\n    while(pointer1<len(array_nums1) and pointer2<len(array_nums2)):\n        if(array_nums1[pointer1] == array_nums2[pointer2]):\n            intersection_array.append(array_nums1[pointer1])\n            pointer1 +=1\n            pointer2 +=1\n        elif(array_nums1[pointer1] > array_nums2[pointer2]):\n            pointer2 +=1\n        elif(array_nums1[pointer1] < array_nums2[pointer2]):\n            pointer1 +=1\n    return intersection_array\n",
        "num_ids": 192
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n",
        "num_ids": 10
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # O(m + n) time | O(m + n) space\n    array_set1 = set(array_nums1)\n    array_set2 = set(array_nums2)\n    intersection_list = []\n    for num in array_set1:\n        if num in array_set2:\n            intersection_list.append(num)\n    return intersection_list\n",
        "num_ids": 95
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n",
        "num_ids": 24
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # case 1: no intersection\n    if array_nums1 == [] or array_nums2 == []:\n        return []\n    # case 2: no intersection\n    if set(array_nums1) == set(array_nums2):\n        return array_nums1\n    \n    array_nums1.sort()\n    array_nums2.sort()\n    \n    result_set = set()\n    \n    i,j = 0,0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            result_set.add(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n            \n    return list(result_set)\n        \n        \nif __name__ == '__main__':\n    test_cases = [\n        {\n            'array_nums1':[1,2,2,1],\n            'array_nums2':[2,2],\n            'result_set':[2]\n        },\n        {\n            'array_nums1':[4,9,5],\n            'array_nums2':[9,4,9,8,4],\n            'result_set':[9,4]\n        },\n        {\n            'array_nums1':[1,2,3,4,5,6,7],\n            'array_nums2':[3,1,2,4,7],\n            'result_set':[1,2,3]\n        }\n    ]\n    \n    for test_case in test_cases:\n        array_nums1 = test_case['array_nums1']\n        array_nums2 = test_case['array_nums2']\n        result_set = test_case['result_set']\n        \n        print('-' * 40)\n        print('input: array_nums1 = {}, array_nums2 = {}'.format(array_nums1,array_nums2))\n        print('result: ',end='')\n        result = intersection_array(array_nums1,array_nums2)\n        \n        if result == result_set:\n            print('OK')\n        else:\n            print('Failed')\n            print('Expected: {}, result: {}'.format(result_set,result))\n        \n        \n    print('-' * 40)\n    \n    array_nums1 = []\n    array_nums2 = [2,2]\n    print('input: array_nums1 = {}, array_nums2 = {}'.format(array_nums1,array_nums2))\n    print('result: ',end='')\n    result = intersection_array(array_nums1,array_nums2)\n    \n    print('OK' if result == [] else 'Failed')\n    \n    \n    print('-' * 40)\n    \n    array_nums1 = [2,2]\n    array_nums2 = []\n    print('input: array_nums1 = {}, array_nums2 = {}'.format(array_nums1,array_nums2))\n    print('result: ',end='')\n    result = intersection_array(array_nums1,array_nums2)\n    \n    print('OK' if result == [] else 'Failed')\n    \n    \n    print('-' * 40)\n    \n    array_nums1 = [2,2]\n    array_nums2 = [2]\n    print('input: array_nums1 = {}, array_nums2 = {}'.format(array_nums1,array_nums2))\n    print('result: ',end='')\n    result = intersection_array(array_nums1,array_nums2)\n    \n    print('OK' if result == [2] else 'Failed')\n    \n    print('-' * 40)\n    \n    array_nums1 = [2,2,3]\n    array_nums2 = [2,3,2]\n    print('input: array_nums1 = {}, array_nums2 = {}'.format(array_nums1,array_nums2))\n    print('result: ',end='')\n    result = intersection_array(array_nums1,array_nums2)\n    \n    print('OK' if result == [2,3] else 'Failed')\n    \n    print('-' * 40)\n    \n    array_nums1 = [1,2,3,4,5,6,7]\n    array_nums2 = [3,1,2,4,7]\n    print('input: array_nums1 = {}, array_nums2 = {}'.format(array_nums1,array_nums2))\n    print('result: ',end='')\n    result = intersection_array(array_nums1,array_nums2)\n    \n    print('OK' if result == [1,2,3,4,7] else 'Failed')\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2010
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    for num in array_nums1:\n        if num in array_nums2:\n            return num\n",
        "num_ids": 28
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = list(set(array_nums1))\n    array_nums2 = list(set(array_nums2))\n    res = []\n    for i in array_nums1:\n        if i in array_nums2:\n            res.append(i)\n    return res\n",
        "num_ids": 77
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1_index = 0\n    nums2_index = 0\n    nums_list = array_nums1 + array_nums2\n    # print(nums_list)\n    result = []\n    while nums1_index < len(array_nums1) and nums2_index < len(array_nums2):\n        if array_nums1[nums1_index] == array_nums2[nums2_index]:\n            result.append(array_nums1[nums1_index])\n            nums1_index += 1\n            nums2_index += 1\n        elif array_nums1[nums1_index] < array_nums2[nums2_index]:\n            nums1_index += 1\n        else:\n            nums2_index += 1\n    return result\n",
        "num_ids": 204
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #if tuple is empty or first element is the same as the second then return 0\n    if tup == () or tup[0] == tup[1]:\n        return 0\n",
        "num_ids": 44
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 30
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for num in tup:\n        if num == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\nprint(count_X(my_tuple, 'Python'))\n",
        "num_ids": 28
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count=0\n    for i in tup:\n        if i==x:\n            count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup: \n        if element == x: \n            count = count + 1\n    return count \n",
        "num_ids": 36
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    i = 0\n    for i in range(0, len(tup)):\n        if tup[i] == x:\n            i += 1\n    return i \n",
        "num_ids": 43
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n",
        "num_ids": 28
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    while i < len(list):\n        list.insert(i, element)\n        i = i+2\n    return list\n",
        "num_ids": 37
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return [element]\n    \n    return [list[0]] + insert_element(list[1:],element)\n",
        "num_ids": 40
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    index = 0\n    while index < len(list):\n        list.insert(index, element)\n        index += 1\n    return list\n",
        "num_ids": 35
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for index in range(len(list)):\n        if list[index] == element:\n            list.insert(index,'BEFORE')\n        elif list[index] == 'BEFORE':\n            list.insert(index,element)\n        else:\n            continue\n    return list\n",
        "num_ids": 69
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return [element]\n    else:\n        return [list[0]] + insert_element(list[1:], element)\n    \n",
        "num_ids": 44
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(i)\n        new_list.append(element)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Method 1:\n    # if list is not empty and the element is not in the list then the element will be appended to the list\n    # Else the element will be inserted to the 0 index\n    if list and element not in list:\n        list.append(element)\n    else:\n        list.insert(0,element)\n    return list\n",
        "num_ids": 83
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Code here\n    index = 0\n    for element in list:\n        list.insert(index, element)\n        index += 2\n",
        "num_ids": 34
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        return [element]\n    else:\n        return [element] + list\n",
        "num_ids": 27
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath \n    def convert(numbers):\n        '''\n        Write a python function to convert complex numbers to polar coordinates.\n        '''\n        polars = list()\n        for i in numbers:\n            r = i.real\n            a = i.imag\n            polars.append((r, a))\n        return polars\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "num_ids": 1979
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    n = len(numbers)\n    polar_coordinates = []\n    for i in range(n):\n        num = complex(numbers[i][0], numbers[i][1])\n        p = cmath.polar(num)\n        polar_coordinates.append(p)\n    return polar_coordinates\n    \n    \ndef check(polar_coordinates):\n    '''\n    Write a python function to check if the given set of complex numbers are \n    equivalent to any of the sets of complex numbers in the given list of sets \n    of complex numbers.\n    '''\n    n = len(polar_coordinates)\n    for i in range(n):\n        for j in range(i+1, n):\n            if polar_coordinates[i] == polar_coordinates[j]:\n                return True\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    c = complex(numbers[0],numbers[1])\n    p = cmath.polar(c)\n    return list(p)\n    \n",
        "num_ids": 41
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real = numbers.real\n    imag = numbers.imag\n    r = ((real ** 2) + (imag ** 2)) ** 0.5\n    t = cmath.phase(numbers)\n    return r, t\n    \nprint(convert(complex(-1.0, 3.0)))\nprint(convert(complex(-1.0, -3.0)))\nprint(convert(complex(2.0, 3.0)))\nprint(convert(complex(-4.0, -5.0)))\nprint(convert(complex(4.0, -5.0)))\nprint(convert(complex(0.0, -3.0)))\nprint(convert(complex(-0.0, 3.0)))\nprint(convert(complex(-0.0, 0.0)))\nprint(convert(complex(0.0, 0.0)))\n",
        "num_ids": 203
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    '''\n    :param numbers: complex number in the form a + bj \n    :return: magnitude(sqrt(a^2 + b^2)) and angle(atan(b/a)) in radians\n    '''\n    \n    real_part = numbers.real\n    imaginary_part = numbers.imag\n    magnitude = cmath.polar(complex(real_part, imaginary_part))[0]\n    angle = cmath.polar(complex(real_part, imaginary_part))[1]\n    return magnitude, angle\n",
        "num_ids": 77
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    '''\n    The function takes a complex number as a parameter and returns the absolute value and the phase of that complex number.\n    '''\n    def polar_coord(complex_num):\n        x = complex_num\n        magnitude = abs(complex_num)\n        phase = cmath.phase(complex_num)\n        return magnitude, phase\n    \n    return polar_coord(numbers)\nprint(convert((2+4j)))\n",
        "num_ids": 74
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num_real = float(numbers.real)\n    num_imag = float(numbers.imag)\n    if num_imag < 0:\n        num_imag = int(num_imag) * -1\n    else:\n        num_imag = int(num_imag)\n    if num_real == 0 and num_imag == 0:\n        print(\"0j\")\n    elif num_real == 0:\n        print(num_imag, \"j\")\n    elif num_imag == 0:\n        print(num_real)\n    else:\n        print(\"{0} + {1}j\".format(num_real, num_imag))\n    return\n",
        "num_ids": 159
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    # Method 1: \n    # Convert complex numbers to polar coordinate\n    # Declare a complex number\n    c = complex(numbers[0],numbers[1])\n",
        "num_ids": 44
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(\"Enter the complex number(n,m):\")\n    real, imag = list(map(int,input().split()))\n    n,m = complex(real,imag)\n    print(\"Polar form of the complex number is: \",cmath.polar(n+m))\n    \ndef prime_factors(n):\n    '''\n    Write a python function to print all prime factors of a given number.\n    '''\n    import math\n    if n <= 1:\n        return False\n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a=numbers\n    b=list(a)\n    b=list(b)\n    b=complex(b[0],b[1])\n    abs_b=cmath.polar(b)\n    print(\"The given complex number in polar coordinates is: \",abs_b)\n    print(\"The given complex number in polar coordinates is: \",abs_b[0],\"and\",abs_b[1],\"\\n\")\n    return abs_b\n",
        "num_ids": 107
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return list1.count(int)\n",
        "num_ids": 12
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i, int)])\n",
        "num_ids": 22
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum([1 for i in list1 if isinstance(i,int)])\n",
        "num_ids": 22
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if(type(i)==int):\n            count+=1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    result = 0\n    for x in list1:\n        if isinstance(x,int):\n            result = result + 1\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i)== int:\n            count = count + 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count = count + 1\n    return count\nlist1 = [1,2,5,7,'a',4,6,'b']\n",
        "num_ids": 57
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    if type(list1) is list:\n        return list1.count(int)\n    else:\n        raise TypeError\n",
        "num_ids": 32
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(0, len(l)):\n        for j in range(1, len(l)):\n            for z in range(2, len(l)):\n                if i!= j!= z:\n                    combos.append((l[i],l[j],l[z]))\n    return combos\n",
        "num_ids": 85
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    res = []\n    for i in range(len(l) + 1):\n        for c in combinations_with_replacement(l, i):\n            if len(c) == n:\n                res.append(c)\n    return res\n",
        "num_ids": 59
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]\n",
        "num_ids": 21
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    mylist = l\n    return [x for x in combinations_with_replacement(mylist, n)]\n",
        "num_ids": 28
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    if len(l) < n:\n        print(\"Error: length of list must be equal to or larger than the length of the combination.\")\n        return\n    \n    for comb in combinations_with_replacement(l, n):\n        print(comb)\n",
        "num_ids": 63
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    l.sort()\n    return list(combinations_with_replacement(l,n))\n",
        "num_ids": 33
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(i+1):\n            temp.append(l[j])\n        result.append(temp)\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [c for c in combinations_with_replacement(l, n)]\n",
        "num_ids": 21
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            for k in range(j+1,len(l)):\n                combinations.append([l[i],l[j],l[k]])\n    return combinations\n",
        "num_ids": 76
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    count = 0\n    \n    for num in range(2, n+1):\n        if isPrime(num):\n            count += 1\n            \n    return count\n",
        "num_ids": 43
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def count_primes(num):\n        count = 0\n        for i in range(1,num+1):\n            if isPrime(i):\n                count+=1\n        return count\n    return count_primes(n)\n    \ndef isPrime(n):\n    '''\n    Write a python function that takes in a number and returns True if it is a prime number, or False otherwise.\n    '''\n    # Base cases\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    else:\n        # Loop from 3 to n, checking if any divisor is between 2 and n/2\n        for i in range(3,int(n**0.5)+1,2):\n            if n % i == 0:\n                return False\n        return True\n    \ndef max_consecutive_ones(nums):\n    '''\n    Write a python function that takes in a list of numbers and returns the maximum length of a consecutive sequence of 1s in the list.\n    '''\n    result = []\n    # Initialize variables\n    count = 0\n    start = 0\n    \n    for i in range(len(nums)):\n        if nums[i] == 1:\n            count += 1\n        else:\n            result.append(count)\n            count = 0\n    result.append(count)\n    return max(result)\n    \ndef reverse_number(num):\n    '''\n    Write a python function that takes in a non-negative integer and returns the number of ways the integer can be written as the sum of its individual digits.\n    '''\n    # Base cases\n    if num < 10:\n        return 1\n    else:\n        # Divide and conquer\n        if num % 10!= 0:\n            return reverse_number(num//10) + reverse_number(num % 10)\n        else:\n            return reverse_number(num//10)\n        \ndef is_palindrome(s):\n    '''\n    Write a python function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    '''\n    # Base cases\n    if s == \"\":\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        # Divide and conquer\n        if s[0] == s[len(s)-1]:\n            return is_palindrome(s[1:-1])\n        else:\n            return False\n            \ndef find_missing_number(nums):\n    '''\n    Write a python function that takes in a list of non-negative integers and returns the missing number from the list.\n    '''\n    # Base cases\n    if len(nums) == 0:\n        return 1\n    elif len(nums) == 1:\n        return 2\n    else:\n        # Divide and conquer\n        if nums[0]!= 0:\n            return 0\n        else:\n            return find_missing_number(nums[1:])\n            \ndef is_sublist(lst, sublst):\n    '''\n    Write a python function that takes in two lists and returns True if the sublist is contained in the list and False otherwise.\n    '''\n    # Base cases\n    if sublst == []:\n        return True\n    elif lst == []:\n        return False\n    elif len(sublst) > len(lst):\n        return False\n    else:\n        # Divide and conquer\n        if sublst[0] == lst[0]:\n            return is_sublist(lst[1:], sublst[1:])\n        else:\n            return False\n        \ndef second_smallest(nums):\n    '''\n    Write a python function that takes in a list of non-negative integers and returns the second smallest number in the list.\n    '''\n    # Base cases\n    if len(nums) == 0:\n        return -1\n    elif len(nums) == 1:\n        return -1\n    else:\n        # Divide and conquer\n        if nums[0] < nums[1]:\n            return second_smallest(nums[1:])\n        else:\n            return second_smallest(nums[1:]) if nums[0] > nums[1] else nums[0]\n            \ndef is_rotation(lst1, lst2):\n    '''\n    Write a python function that takes in two lists and returns True if the list lst2 is a rotation of the list lst1 and False otherwise.\n    '''\n    # Base cases\n    if len(lst1)!= len(lst2):\n        return False\n    elif lst1 == []:\n        return True\n    elif lst2 == []:\n        return False\n    else:\n        # Divide and conquer\n        return is_sublist(lst1, lst2+lst2)\n        \ndef second_largest(nums):\n    '''\n    Write a python function that takes in a list of non-negative integers and returns the second largest number in the list.\n    '''\n    # Base cases\n    if len(nums) == 0:\n        return -1\n    elif len(nums) == 1:\n        return -1\n    else:\n        # Divide and conquer\n        if nums[0] > nums[1]:\n            return second_largest(nums[1:])\n        else:\n            return second_largest(nums[1:]) if nums[0] < nums[1] else nums[0]\n            \ndef add_missing_nums(nums):\n    '''\n    Write a python function that takes in a list of non-negative integers and returns the list with all missing numbers from the list.\n    '''\n    result = []\n    # Initialize variables\n    start = 0\n    end = 0\n    \n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            start = i\n            break\n    \n    for j in range(len(nums)):\n        if nums[len(nums)-j-1]!= 0:\n            end = len(nums)-j\n            break\n        \n    for i in range(start,end):\n        if nums[i] == 0:\n            result.append(i+1)\n    return result\n        \ndef missing_num(nums):\n    '''\n    Write a python function that takes in a list of non-negative integers and returns the smallest missing positive number in the list.\n    '''\n    # Base cases\n    if nums == []:\n        return 1\n    elif nums[0] > 0:\n        return 1\n    else:\n        # Divide and conquer\n        return 1 + missing_num(nums[1:])\n        \ndef duplicate_nums(nums):\n    '''\n    Write a python function that takes in a list of non-negative integers and returns the number of duplicate numbers in the list.\n    '''\n    # Initialize variables\n    result = 0\n    d = dict()\n    \n    for num in nums:\n        if num in d:\n            result += 1\n        else:\n            d[num] = 1\n    return result\n    \ndef duplicate_nums_sorted(nums):\n    '''\n    Write a python function that takes in a list of non-negative integers and returns the number of duplicate numbers in the list. The list should be sorted before performing the function.\n    '''\n    # Initialize variables\n    result = 0\n    i = 0\n    j = 1\n    \n    for num in nums:\n        if nums[i] == nums[j]:\n            result += 1\n        else:\n            i += 1\n            j += 1\n    return result\n    \ndef is_prime(n):\n    '''\n    Write a python function that takes in a number and returns True if the number is prime and False otherwise.\n    '''\n    # Base cases\n    if n == 0 or n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        # Divide and conquer\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n        \ndef find_largest_prime_factor(n):\n    '''\n    Write a python function that takes in a number and returns the largest prime factor of the number",
        "num_ids": 21
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    else:\n        nums = []\n        for i in range(n):\n            if i == 2:\n                nums.append(2)\n            if i!= 2 and i % 2!= 0:\n                nums.append(i)\n        return len(nums)\n",
        "num_ids": 91
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        for x in range(2, n):\n            if n%x == 0:\n                return False\n        return True\n    count = 0\n    for x in range(2, n):\n        if is_prime(x):\n            count+=1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(n):\n        if n == 2:\n            return True\n        if n % 2 == 0 or n == 1:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    return len([i for i in range(1, n) if isPrime(i)])\n",
        "num_ids": 100
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(n):\n        if n <= 1:\n            return False\n        else:\n            for i in range(2, int(n**0.5)+1):\n                if n % i == 0:\n                    return False\n            return True\n",
        "num_ids": 61
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [2,3]\n    n = n+1\n    i=2\n    while(primes[-1]<n):\n        for j in primes:\n            if i%j == 0:\n                break\n            elif j*j>i:\n                primes.append(i)\n                break\n        i+=1\n    return len(primes)\n",
        "num_ids": 92
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if (n == 1):\n        return 0\n    primes = [True for i in range(n + 1)]\n    primes[0] = False\n    primes[1] = False\n    i = 2\n    while (i * i <= n):\n        if (primes[i] == True):\n            for j in range(2 * i, n + 1, i):\n                primes[j] = False\n        i += 1\n    count = 0\n    for i in range(n):\n        if (primes[i]):\n            count += 1\n    return count\n",
        "num_ids": 139
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Write your code here\n    if n <= 1:\n        return 0\n    isprime = [True]*n\n    isprime[0] = False\n    isprime[1] = False\n    isprime[2] = True\n    for i in range(2,int(n**0.5)+1):\n        if isprime[i]:\n            for j in range(i*i,n,i):\n                isprime[j] = False\n    return sum(isprime)\n",
        "num_ids": 116
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n < 2:\n        return 0\n    else:\n        for i in range(2,n):\n            if isPrime(i):\n                count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    swapped = b, a\n    return swapped\n",
        "num_ids": 14
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n    \ndef swap_numbers2(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the first number and then the second number.\n    '''\n    return a,b\n    \ndef swap_numbers3(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the first number and then the second number.\n    '''\n    return a,b\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\nprint(swap_numbers(2,5))\n",
        "num_ids": 23
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return a,b\n",
        "num_ids": 17
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if not test_tup1:\n        return test_tup2\n",
        "num_ids": 20
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n",
        "num_ids": 37
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if(test_tup1[0] > test_tup2[0]):\n        return test_tup1\n    else:\n        return test_tup2\n",
        "num_ids": 44
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = 0\n    max2 = 0\n    if (test_tup1[0] > test_tup2[0]):\n        max1 = test_tup1[0]\n        max2 = test_tup2[0]\n    else:\n        max1 = test_tup2[0]\n        max2 = test_tup1[0]\n    if (test_tup1[1] > test_tup2[1]):\n        max1 = test_tup1[1]\n        max2 = test_tup2[1]\n    else:\n        max1 = test_tup2[1]\n        max2 = test_tup1[1]\n    if (test_tup1[2] > test_tup2[2]):\n        max1 = test_tup1[2]\n        max2 = test_tup2[2]\n    else:\n        max1 = test_tup2[2]\n        max2 = test_tup1[2]\n    if (test_tup1[3] > test_tup2[3]):\n        max1 = test_tup1[3]\n        max2 = test_tup2[3]\n    else:\n        max1 = test_tup2[3]\n        max2 = test_tup1[3]\n    if (test_tup1[4] > test_tup2[4]):\n        max1 = test_tup1[4]\n        max2 = test_tup2[4]\n    else:\n        max1 = test_tup2[4]\n        max2 = test_tup1[4]\n    print(max1, max2)\n    return (max1, max2)\n",
        "num_ids": 424
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # max_tup = (0,0)\n",
        "num_ids": 15
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Brute Force:\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    # answer = []\n    # for i in test_tup1:\n    #     if i in test_tup2:\n    #         if i >= max(test_tup1):\n    #             answer.append(i)\n    #         if i >= max(test_tup2):\n    #             answer.append(i)\n    # print(answer)\n",
        "num_ids": 117
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(sorted(test_tup1 + test_tup2, reverse = True))\n    \ndef find_max_sum(test_tup):\n    '''\n    Write a function to find the maximum sum of a given tuple\n    '''\n    sum_of_list = sum(test_tup)\n    max_sum = max(test_tup)\n    return sum_of_list - max_sum\n    \ndef concatenate_strings(test_str1, test_str2):\n    '''\n    Write a function to concatenate two strings\n    '''\n    return test_str1 + test_str2\n    \ndef find_missing_letter(test_str):\n    '''\n    Write a function to find the missing letter in the given string. You will be given a string and a character\n    representing the missing letter.\n    '''\n    return test_str[0] + test_str[1:].replace(test_str[1], 'a') + test_str[-1]\n    \ndef get_uniq_characters(test_str):\n    '''\n    Write a function to get all the unique characters in a string.\n    '''\n    return ''.join(set(test_str))\n",
        "num_ids": 15
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    if test_tup1 > test_tup2:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n",
        "num_ids": 53
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1_value = test_tup1[0] + test_tup1[1]\n    test_tup2_value = test_tup2[0] + test_tup2[1]\n    if test_tup1_value > test_tup2_value:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "num_ids": 95
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # list1 = list(test_tup1)\n    # list2 = list(test_tup2)\n    # print(list1)\n    # print(list2)\n    # print(\"max value of list1\",max(list1))\n    # print(\"max value of list2\",max(list2))\n    # if len(test_tup1) < len(test_tup2):\n    #     return(tuple(test_tup2[len(test_tup1):]))\n    # else:\n    #     return(tuple(test_tup1[len(test_tup2):]))\n    # print(len(test_tup1))\n    # print(len(test_tup2))\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    length = min(len(list1), len(list2))\n    i = len(list1) - 1\n    j = len(list2) - 1\n    output = []\n    while i >= 0 and j >= 0:\n        if list1[i] > list2[j]:\n            output.append(list1[i])\n            i = i - 1\n        else:\n            output.append(list2[j])\n            j = j - 1\n    while i >= 0:\n        output.append(list1[i])\n        i = i - 1\n    while j >= 0:\n        output.append(list2[j])\n        j = j - 1\n    # print(output)\n    return tuple(output)\n",
        "num_ids": 378
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    def isPrime(n): \n        if n < 2: \n            return False\n        else: \n            for i in range(2,int(n**0.5)+1): \n                if n % i == 0: \n                    return False\n            return True\n    def findprime(n): \n        if n < 2: \n            return 0\n        else: \n            p = [i for i in range(n) if isPrime(i)]\n            return p\n    def newman_prime(n): \n        p = findprime(n)\n        return p[-1]\n    return newman_prime(n)",
        "num_ids": 154
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #get the sqrt of n.\n    root = n ** (1/2)\n",
        "num_ids": 23
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # the first number that I want to find a prime number\n    num = n\n",
        "num_ids": 23
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    if n < 3:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return 2\n    else:\n        ans = n\n        # Find s and t such that the equation\n        # (n^2 - 1) / 2n is a quadratic polynomial\n        s = 1\n        t = n % 6\n        if t == 1 or t == 5:\n            s = -1\n        elif t == 2:\n            s = 0\n        elif t == 3:\n            s = 1\n        # Solve the quadratic equation\n        t0 = (-1 + (1 + 8 * n) ** 0.5) / 2\n        t = t0 - s * (((1 + t0 ** 2) / 2) ** 0.5 - 1) / 2\n        ans += s * (((1 + t ** 2) / 2) ** 0.5 - 1) / 2\n        ans += t\n    return int(ans)\n    \n",
        "num_ids": 245
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert n >= 1 and isinstance(n, int)\n    if n == 1:\n        return 2\n",
        "num_ids": 27
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    assert 0 <= n <= 100\n",
        "num_ids": 18
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n_primes = 0\n    while n_primes < n:\n        p = next_prime(n_primes)\n        n_primes += 1\n        # start with p**2, go up to p**3, go up to p**6, and go up to p**9. \n        # Once we've reached a p that's not prime, we start checking again from p**2.\n        while is_prime(p**2 + p):\n            p = next_prime(p)\n        # The new p that we check should be p**2 + p\n        n_primes += 1\n    return p\n",
        "num_ids": 147
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0: \n        return 2\n    if n == 1: \n        return 3\n    if n == 2: \n        return 5\n    if n == 3: \n        return 7\n    if n == 4: \n        return 11\n    if n == 5: \n        return 13\n    if n == 6: \n        return 17\n    if n == 7: \n        return 19\n    if n == 8: \n        return 23\n    if n == 9: \n        return 29\n    if n == 10: \n        return 31\n    if n == 11: \n        return 37\n    if n == 12: \n        return 41\n    if n == 13: \n        return 43\n    if n == 14: \n        return 47\n    if n == 15: \n        return 53\n    if n == 16: \n        return 59\n    if n == 17: \n        return 61\n    if n == 18: \n        return 67\n    if n == 19: \n        return 71\n    if n == 20: \n        return 73\n    if n == 21: \n        return 79\n    if n == 22: \n        return 83\n    if n == 23: \n        return 89\n    if n == 24: \n        return 97\n    if n == 25: \n        return 101\n    if n == 26: \n        return 103\n    if n == 27: \n        return 107\n    if n == 28: \n        return 109\n    if n == 29: \n        return 113\n    if n == 30: \n        return 127\n    if n == 31: \n        return 131\n    if n == 32: \n        return 137\n    if n == 33: \n        return 139\n    if n == 34: \n        return 149\n    if n == 35: \n        return 151\n    if n == 36: \n        return 157\n    if n == 37: \n        return 163\n    if n == 38: \n        return 167\n    if n == 39: \n        return 173\n    if n == 40: \n        return 179\n    if n == 41: \n        return 181\n    if n == 42: \n        return 191\n    if n == 43: \n        return 193\n    if n == 44: \n        return 197\n    if n == 45: \n        return 199\n    if n == 46: \n        return 311\n    if n == 47: \n        return 353\n    if n == 48: \n        return 367\n    if n == 49: \n        return 373\n    if n == 50: \n        return 379\n    if n == 51: \n        return 383\n    if n == 52: \n        return 389\n    if n == 53: \n        return 397\n    if n == 54: \n        return 401\n    if n == 55: \n        return 409\n    if n == 56: \n        return 419\n    if n == 57: \n        return 421\n    if n == 58: \n        return 431\n    if n == 59: \n        return 433\n    if n == 60: \n        return 439\n    if n == 61: \n        return 443\n    if n == 62: \n        return 449\n    if n == 63: \n        return 457\n    if n == 64: \n        return 461\n    if n == 65: \n        return 463\n    if n == 66: \n        return 467\n    if n == 67: \n        return 479\n    if n == 68: \n        return 487\n    if n == 69: \n        return 491\n    if n == 70: \n        return 499\n    if n == 71: \n        return 503\n    if n == 72: \n        return 509\n    if n == 73: \n        return 521\n    if n == 74: \n        return 523\n    if n == 75: \n        return 541\n    if n == 76: \n        return 547\n    if n == 77: \n        return 557\n    if n == 78: \n        return 563\n    if n == 79: \n        return 569\n    if n == 80: \n        return 571\n    if n == 81: \n        return 577\n    if n == 82: \n        return 587\n    if n == 83: \n        return 593\n    if n == 84: \n        return 599\n    if n == 85: \n        return 601\n    if n == 86: \n        return 607\n    if n == 87: \n        return 613\n    if n == 88: \n        return 617\n    if n == 89: \n        return 619\n    if n == 90: \n        return 631\n    if n == 91: \n        return 641\n    if n == 92: \n        return 643\n    if n == 93: \n        return 647\n    if n == 94: \n        return 653\n    if n == 95: \n        return 659\n    if n == 96: \n        return 661\n    if n == 97: \n        return 673\n    if n == 98: \n        return 677\n    if n == 99: \n        return 683\n    if n == 100: \n        return 691\n    if n == 101: \n        return 701\n    if n == 102: \n        return 709\n    if n == 103: \n        return 719\n    if n == 104: \n        return 727\n    if n == 105: \n        return 733\n    if n == 106: \n        return 739\n    if n == 107: \n        return 743\n    if n == 108: \n        return 751\n    if n == 109: \n        return 757\n    if n == 110: \n        return 761\n    if n == 111: \n        return 769\n    if n == 112: \n        return 773\n    if n == 113: \n        return 787\n    if n == 114: \n        return 797\n    if n == 115: \n        return 809\n    if n == 116: \n        return 811\n    if n == 117: \n        return 821\n    if n == 118: \n        return 823\n    if n == 119: \n        return 827\n    if n == 120: \n        return 829\n    if n == 121: \n        return 839\n    if n == 122: \n        return 853\n    if n == 123: \n        return 857\n    if n == 124: \n        return 859\n    if n == 125: \n        return 863\n    if n == 126: \n        return 877\n    if n == 127: \n        return 881\n    if n == 128: \n        return 883\n    if n == 129: \n        return 887\n    if n == 130: \n        return 891\n    if n == 131: \n        return 899\n    if n == 132: \n        return 907\n    if n == 133: \n        return 911\n    if n == 134: \n        return 919\n    if n == 135: \n        return 929\n    if n == 136: \n        return 937\n    if n == 137: \n        return 941\n    if n == 138: \n        return 947\n    if n == 139: \n        return 953\n    if n == 140: \n        return 967\n    if n == 141: \n        return 971\n    if n == 142: \n        return 977\n    if n == 143: \n        return 983\n    if n == 144: \n        return 991\n    if n == 145: \n        return 997\n    if n == 146: \n        return 1009\n    if n == 147: \n        return 1013\n    if n == 148: \n        return 1019\n    if n == 149: \n        return 1021\n    if n == 150: \n        return 1031\n    if n == 151: \n        return 1033\n    if n == 152: \n        return 1039\n    if n == 153: \n        return 1049\n    if n == 154: \n        return 1051\n    if n == 155: \n        return 1061\n    if n == 156: \n        return 1063\n    if n == 157: \n        return 1069\n    if n == 158: \n        return 1087\n    if n == 159",
        "num_ids": 2009
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # This uses the sieve of eratosthenes to find all primes\n    # below 2 million.\n    # This is used to generate the set of primes below n.\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i, p in enumerate(primes):\n        if p:\n            for j in range(i*i, n, i):\n                primes[j] = False\n    \n    # Returns the nth newman\u2013shanks\u2013williams prime number.\n    def newman_prime(n):\n        for i, p in enumerate(primes):\n            if i == n:\n                return p\n    \n    return newman_prime(n)\n",
        "num_ids": 180
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def prime_check(x):\n        if x==1:\n            return False\n        for i in range(2, int(x**0.5+1)):\n            if x%i==0:\n                return False\n        return True\n    if n<1:\n        return 'Please enter a positive integer.'\n    elif n==1:\n        return 2\n    elif n==2:\n        return 3\n    else:\n        count=0\n        c=2\n        while count<n-2:\n            c+=2\n            if prime_check(c):\n                count+=1\n        return c\n",
        "num_ids": 146
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(test_tup1[i]/test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 37
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        new_tup = ()\n        for i in range(len(test_tup1)):\n            new_tup += (test_tup1[i] / test_tup2[i],)\n        return new_tup\n    except ZeroDivisionError:\n        print(\"Sorry, Division by Zero is not accepted\")\n        return None\n    except TypeError:\n        print(\"Sorry, Data type mismatch!\")\n        return None\n",
        "num_ids": 109
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #pass\n    return tuple([t1/t2 for t1,t2 in zip(test_tup1,test_tup2)])\n",
        "num_ids": 38
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1 = (1, 3, 6)\n    test_tup2 = (2, 4, 8)\n    try:\n        result = test_tup1 / test_tup2\n    except:\n        result = \"You can't divide a tuple by a tuple\"\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n",
        "num_ids": 26
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if elements of the tuples are the same\n    if len(set(test_tup1)) == len(set(test_tup2)) == 1:\n        # return error message if tuples have different elements\n        return print('ERROR: input tuples must have the same element types')\n    # return error message if the tuples are empty\n    if len(test_tup1) == len(test_tup2) == 0:\n        return print('ERROR: input tuples must have at least one element')\n",
        "num_ids": 123
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1_len, test_tup2_len = len(test_tup1), len(test_tup2)\n    div_tup = tuple()\n    for i in range(test_tup1_len):\n        try:\n            div_tup += (test_tup1[i]/test_tup2[i],)\n        except ZeroDivisionError:\n            div_tup += (0,)\n        except IndexError:\n            div_tup += (0,)\n    return div_tup\n",
        "num_ids": 131
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tuple = []\n    for i in range(0, len(test_tup1)):\n        new_tuple.append(test_tup1[i] / test_tup2[i])\n    return tuple(new_tuple)\n",
        "num_ids": 64
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    for index in range(len(test_tup1)):\n        print((test_tup1[index]/test_tup2[index]))\n",
        "num_ids": 60
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1.sort(reverse=True)\n    list1_len = len(list1)\n    if list1_len % L!= 0:\n        print(list1_len)\n        list2_len = int((list1_len - list1_len % L)/2)\n    else:\n        list2_len = int((list1_len - list1_len % L)/2)\n    list1_one = list1[:list2_len]\n    list1_two = list1[list2_len:]\n    return (list1_one, list1_two)\n",
        "num_ids": 142
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Use the expression [ : L ] to get the first list\n    # Use the expression [ L : ] to get the second list\n    return [ list1[ : L ], list1[ L : ] ]\n    \n    \ndef split_four_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into four parts where the length of the first part of the list is L, the second part is L, the third part is L, and the fourth part is the remaining elements of the original list, and returns the resulting lists in a tuple.\n    '''\n    # Write your code here\n    return [ list1[ : L ], list1[ L : 2*L ], list1[ 2*L : 3*L ], list1[ 3*L : ] ]\n    \n    \ndef split_even_odd(list1):\n    '''\n    Write a function that takes in a list and returns a tuple where the first element is a list containing only the even elements of the original list and the second element is a list containing only the odd elements of the original list.\n    '''\n    # Write your code here\n    return [ list1[ : : 2 ], list1[ 1 : : 2 ] ]\n    \n    \ndef split_list(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Use the expression [ : L ] to get the first list\n    # Use the expression [ L : ] to get the second list\n    return [ list1[ : L ], list1[ L : ] ]\n    \n    \ndef split_list_half(list1):\n    '''\n    Write a function that takes in a list and splits the given list into two parts where the first part is half the length of the original list, and returns the resulting lists in a tuple.\n    '''\n    # Write your code here\n    return [ list1[ : len(list1) // 2 ], list1[ len(list1) // 2 : ] ]\n    \n    \ndef split_list_fourth(list1):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into four parts where the length of the first part of the list is L, the second part is L, the third part is L, and the fourth part is the remaining elements of the original list, and returns the resulting lists in a tuple.\n    '''\n    # Write your code here\n    return [ list1[ : len(list1) // 4 ], list1[ len(list1) // 4 : 2*(len(list1) // 4) ], list1[ 2*(len(list1) // 4) : 3*(len(list1) // 4) ], list1[ 3*(len(list1) // 4): ] ]\n    \n    \ndef split_list_four_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into four parts where the length of the first part of the list is L, the second part is L, the third part is L, and the fourth part is the remaining elements of the original list, and returns the resulting lists in a tuple.\n    '''\n    # Use the expression [ : L ] to get the first list\n    # Use the expression [ L : ] to get the second list\n    # Use the expression [ : L ] to get the third list\n    # Use the expression [ L : ] to get the fourth list\n    return [ list1[ : L ], list1[ L : 2*L ], list1[ 2*L : 3*L ], list1[ 3*L : ] ]\n    \n    \ndef split_list_six_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into six parts where the length of the first part of the list is L, the second part is L, the third part is L, the fourth part is L, the fifth part is L, and the sixth part is the remaining elements of the original list, and returns the resulting lists in a tuple.\n    '''\n    # Write your code here\n    return [ list1[ : L ], list1[ L : 2*L ], list1[ 2*L : 3*L ], list1[ 3*L : 4*L ], list1[ 4*L : 5*L ], list1[ 5*L : ] ]\n    \n    \ndef split_list_six_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into six parts where the length of the first part of the list is L, the second part is L, the third part is L, the fourth part is L, the fifth part is L, and the sixth part is the remaining elements of the original list, and returns the resulting lists in a tuple.\n    '''\n    # Write your code here\n    return [ list1[ : L ], list1[ L : 2*L ], list1[ 2*L : 3*L ], list1[ 3*L : 4*L ], list1[ 4*L : 5*L ], list1[ 5*L : ] ]\n    \n    \ndef remove_middle(list1):\n    '''\n    Write a function that takes in a list and removes the middle element, and returns the resulting list. If the list's length is odd, the middle element should be removed. If the list's length is even, the middle two elements should be removed.\n    '''\n    # Write your code here\n    return [ list1[ : :2 ], list1[ 1 : :2 ] ]\n    \n    \ndef remove_middle_three(list1):\n    '''\n    Write a function that takes in a list and removes the middle three elements, and returns the resulting list.\n    '''\n    # Write your code here\n    return [ list1[ : :3 ], list1[ 1 : :3 ], list1[ 2 : :3 ] ]\n    \n    \ndef replace_middle(list1):\n    '''\n    Write a function that takes in a list and replaces the middle element with another value and returns the resulting list. If the list's length is odd, the middle element should be replaced. If the list's length is even, the middle two elements should be replaced.\n    '''\n    # Write your code here\n    return [ list1[ : :2 ], list1[ :1 ] + list1[ 2 : ] ]\n    \n    \ndef sum_middle(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the middle three elements in the list.\n    '''\n    # Write your code here\n    return sum(list1[ 1 : -1 : 2 ])\n    \n    \ndef get_even_list(list1):\n    '''\n    Write a function that takes in a list and returns a list containing all the even elements of the original list.\n    '''\n    # Write your code here\n    return [ num for num in list1 if num % 2 == 0 ]\n    \n    \ndef get_odd_list(list1):\n    '''\n    Write a function that takes in a list and returns a list containing all the odd elements of the original list.\n    '''\n    # Write your code here\n    return [ num for num in list1 if num % 2 == 1 ]\n    \n    \ndef remove_negative(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a list with all the negative numbers removed.\n    '''\n    # Write your code here\n    return [ num for num in list1 if num > 0 ]\n    \n    \ndef get_negative_list(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a list with all the negative numbers in the list.\n    '''\n    # Write your code here\n    return [ num for num in list1 if num < 0 ]\n    \n    \ndef get_positive_list(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a list with all the positive numbers in the list.\n    '''\n    # Write your code here\n    return [ num for num in list1 if num > 0 ]\n    \n    \ndef remove_first_and_last(list1):\n    '''\n    Write a functio",
        "num_ids": 8
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # add the two results together\n    result = list1[:L] + list1[L:]\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return list1, []\n    elif len(list1) > L:\n        first_part, second_part = list1[:L], list1[L:]\n        return first_part, second_part\n    else:\n        return list1, []\n",
        "num_ids": 74
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_1 = []\n    list1_2 = []\n    for item in list1:\n        if len(list1_1) == L:\n            list1_2.append(item)\n        else:\n            list1_1.append(item)\n    return (list1_1, list1_2)\n",
        "num_ids": 79
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    for i in range(0,len(list1)-1):\n        if(i==L):\n            return list1[0:L], list1[L:]\n",
        "num_ids": 41
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = []\n    list1 = list1[:]\n    while(len(list1) > 0):\n        list2.append(list1.pop(0))\n        if len(list2) == L:\n            return tuple([list2, list1])\n",
        "num_ids": 65
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    return list1[:L], list1[L:]\n",
        "num_ids": 25
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # if L > len(list1):\n    #     raise ValueError(\"L is greater than the length of the list\")\n    list1 = list1.copy()\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n",
        "num_ids": 72
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    result = []\n    if len(list1)%L == 0:\n        result.append(list1[:L])\n        result.append(list1[L:])\n    else:\n        result.append(list1[:len(list1)-(len(list1)%L)])\n        result.append(list1[len(list1)-(len(list1)%L):])\n    return result\n",
        "num_ids": 101
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 15\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age)!= int or h_age < 0:\n        return \"Please enter a positive number.\"\n",
        "num_ids": 30
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if not isinstance(h_age, int):\n        raise TypeError(\"Input has to be an integer\")\n    if h_age < 0:\n        raise ValueError(\"Input has to be a positive integer\")\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + ((h_age - 2) * 4)\n",
        "num_ids": 89
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age <= 2:\n        age_in_d_y = h_age * 10.5\n    else:\n        age_in_d_y = 21 + (h_age - 2) * 4\n        \n    return age_in_d_y\n    \n    \ndef cat_age(m_age):\n    '''\n    Write a function to calculate a cat's age in cat's years.\n    '''\n    \n    if m_age <= 2:\n        age_in_c_y = m_age * 12.0\n    else:\n        age_in_c_y = (m_age - 2) * 8 + 21\n        \n    return age_in_c_y\n    \n    \ndef get_age_in_human_years(pet):\n    '''\n    Write a function that converts the age of a pet from dog years to human years.\n    '''\n    \n    if pet.species == 'dog':\n        age_in_h_y = dog_age(pet.age)\n    elif pet.species == 'cat':\n        age_in_h_y = cat_age(pet.age)\n    else:\n        raise ValueError('Invalid species.')\n        \n    return age_in_h_y\n    \n    \ndef get_age_in_dog_years(pet):\n    '''\n    Write a function that converts the age of a pet from human years to dog years.\n    '''\n    \n    if pet.species == 'dog':\n        age_in_d_y = pet.age\n    elif pet.species == 'cat':\n        age_in_d_y = cat_age(pet.age)\n    else:\n        raise ValueError('Invalid species.')\n        \n    return age_in_d_y\n    \n    \ndef get_age_in_cat_years(pet):\n    '''\n    Write a function that converts the age of a pet from human years to cat years.\n    '''\n    \n    if pet.species == 'dog':\n        age_in_c_y = dog_age(pet.age)\n    elif pet.species == 'cat':\n        age_in_c_y = pet.age\n    else:\n        raise ValueError('Invalid species.')\n        \n    return age_in_c_y\n    \n",
        "num_ids": 84
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 10.5\n",
        "num_ids": 12
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age)!= int or h_age <= 0:\n        return \"Enter a valid number\"\n    d_age = h_age * 10.5\n    return d_age\n",
        "num_ids": 48
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age\n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age) == str:\n        raise TypeError('Please enter a number')\n",
        "num_ids": 25
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    count = 0\n    sublist = []\n    for i in S:\n        sublist.append(i)\n        count += 1\n        if count % step == 0:\n            yield sublist\n            sublist = []\n    if sublist:\n        yield sublist\n",
        "num_ids": 67
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    i = 0\n    while i < len(S):\n        L.append(S[i:i+step])\n        i += step\n    return L\n",
        "num_ids": 44
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # check step can be cast to int\n    # check that step is not 0\n    # check step is < len(S)\n    # check step is > 0\n",
        "num_ids": 40
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) <= step:\n        return [S]\n    return list_split(S[step:], step) + [S[:step]]\n",
        "num_ids": 39
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Your code here\n    return []\n",
        "num_ids": 12
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #S = list(S)\n    if type(S) == type(list()):\n        return [S[i::step] for i in range(0, step)]\n    else:\n        return None\n    #return [S[i::step] for i in range(0, step)]\n",
        "num_ids": 71
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    return new_list\n",
        "num_ids": 46
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side_length = l\n    surface_area = 6 * side_length**2\n    return surface_area\n    \ndef lateralsurface_pyramid(l, h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given its base length and height.\n    '''\n    base = l\n    height = h\n    surface_area = base * height\n    return surface_area\n    \ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given its radius and height. Assume the base of the cone has the same radius as its height.\n    '''\n    radial_radius = r\n    height = h\n    surface_area = 3.14 * radial_radius**2 + 3.14 * radial_radius * height\n    return surface_area\n    \ndef sum_in_list(numbers_list):\n    '''\n    Write a function that takes a list of numbers and returns the sum of the first and last elements in the list.\n    '''\n    list = numbers_list\n    sum = list[0] + list[-1]\n    return sum\n    \ndef sum_in_list_2(numbers_list):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the elements in the list.\n    '''\n    sum = 0\n    for i in numbers_list:\n        sum += i\n    return sum\n    \ndef sum_in_list_3(numbers_list):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the elements in the list.\n    '''\n    sum = 0\n    for i in range(len(numbers_list)):\n        sum += numbers_list[i]\n    return sum\n    \ndef sum_in_list_4(numbers_list):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the elements in the list.\n    '''\n    sum = 0\n    for i in range(len(numbers_list)):\n        sum += numbers_list[-i-1]\n    return sum\n    \ndef sum_in_list_5(numbers_list):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the elements in the list.\n    '''\n    sum = 0\n    for i in numbers_list:\n        sum += i**2\n    return sum\n    \ndef sum_in_list_6(numbers_list):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the elements in the list.\n    '''\n    sum = 0\n    for i in range(len(numbers_list)):\n        sum += numbers_list[i]**2\n    return sum\n    \ndef sum_in_list_7(numbers_list):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the elements in the list.\n    '''\n    sum = 0\n    for i in range(len(numbers_list)):\n        sum += numbers_list[i]**2\n    return sum/len(numbers_list)\n    \ndef sum_in_list_8(numbers_list):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the elements in the list.\n    '''\n    sum = 0\n    for i in range(len(numbers_list)):\n        sum += numbers_list[i]**2\n    return sum/len(numbers_list)\n    \ndef sum_in_list_9(numbers_list):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the elements in the list.\n    '''\n    sum = 0\n    for i in range(len(numbers_list)):\n        sum += numbers_list[i]**2\n    return sum/len(numbers_list)**2\n    \ndef odd_or_even(number):\n    '''\n    Write a function that takes an integer and returns True if it is odd and False if it is even.\n    '''\n    num = number\n    if num % 2 == 1:\n        return True\n    else:\n        return False\n    \ndef number_to_words(number):\n    '''\n    Write a function that takes an integer and returns the number written out in English.\n    '''\n    num = number\n    ones_dict = {0:'zero', 1:'one', 2:'two', 3:'three', 4:'four', 5:'five', 6:'six', 7:'seven', 8:'eight', 9:'nine'}\n    teens_dict = {10:'ten', 11:'eleven', 12:'twelve', 13:'thirteen', 14:'fourteen', 15:'fifteen', 16:'sixteen', 17:'seventeen', 18:'eighteen', 19:'nineteen'}\n    tens_dict = {2:'twenty', 3:'thirty', 4:'forty', 5:'fifty', 6:'sixty', 7:'seventy', 8:'eighty', 9:'ninety'}\n    if num < 20:\n        return ones_dict[num]\n    elif num < 100:\n        return teens_dict[num // 10] + (''+ ones_dict[num % 10] if num % 10!= 0 else'')\n    else:\n        return tens_dict[num // 100] + (''+ ones_dict[num % 100 // 10] + (''+ ones_dict[num % 10] if (num % 10!= 0) else'') if (num % 100) % 10!= 0 else'') + (''+ ones_dict[num % 10] if (num % 10!= 0) else '')\n        \ndef sort_list_of_numbers(numbers):\n    '''\n    Write a function that takes a list of numbers and returns a sorted version of that list. Use the insertion sort algorithm to sort the list.\n    '''\n    list = numbers\n    list_length = len(list)\n    for i in range(1, list_length):\n        current = list[i]\n        while list[i-1] > current and i > 0:\n            list[i] = list[i-1]\n            list[i-1] = current\n            i = i - 1\n    return list\n    \ndef frequency(numbers_list):\n    '''\n    Write a function that takes a list of numbers and returns the frequency of each number. The function should return a dictionary.\n    '''\n    list = numbers_list\n    dict = {}\n    for i in range(len(list)):\n        key = list[i]\n        if key in dict:\n            dict[key] += 1\n        else:\n            dict[key] = 1\n    return dict\n    \ndef add_numbers_from_list(numbers_list):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the numbers in the list.\n    '''\n    list = numbers_list\n    sum = 0\n    for i in list:\n        sum += i\n    return sum\n    \ndef add_numbers_from_list_2(numbers_list):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the numbers in the list.\n    '''\n    sum = 0\n    for i in range(len(numbers_list)):\n        sum += numbers_list[i]\n    return sum\n    \ndef add_numbers_from_list_3(numbers_list):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the numbers in the list.\n    '''\n    sum = 0\n    for i in range(len(numbers_list)):\n        sum += numbers_list[i]\n    return sum\n    \ndef add_numbers_from_list_4(numbers_list):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the numbers in the list.\n    '''\n    sum = 0\n    for i in range(len(numbers_list)):\n        sum += numbers_list[-i-1]\n    return sum\n    \ndef add_numbers_from_list_5(numbers_list):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the numbers in the list.\n    '''\n    sum = 0\n    for i in range(len(numbers",
        "num_ids": 17
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l\n    return area\n",
        "num_ids": 15
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #l = float(input('Length of side of cube: '))\n    surface_area = 6*l**2\n    print('Surface area of cube with side length',l,'is',surface_area)\n    \ndef lateralsurface_rectangle(b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism given its base and height.\n    '''\n    #b = float(input('Base of the rectangle: '))\n    #h = float(input('Height of the rectangle: '))\n    surface_area = 2*b*h\n    print('Surface area of rectangle with base',b,'and height',h,'is',surface_area)\n    \ndef lateralsurface_triangle(b,h):\n    '''\n    Write a function to find the lateral surface area of a triangular prism given its base and height.\n    '''\n    #b = float(input('Base of the triangle: '))\n    #h = float(input('Height of the triangle: '))\n    surface_area = 1/2*b*h\n    print('Surface area of triangle with base',b,'and height',h,'is',surface_area)\n",
        "num_ids": 72
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6*l**2\n    return surface_area\n    \nprint(lateralsurface_cube(3))\n",
        "num_ids": 33
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Your code here\n    side = l\n    surface_area = 6 * side**2\n    return surface_area\n",
        "num_ids": 30
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n",
        "num_ids": 6
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side_len = l\n    surface_area = 6*side_len**2\n    return surface_area\n",
        "num_ids": 28
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def func(n):\n        return (sum([i**2 for i in range(1,n,2)]))\n    return func(n)\nprint(square_Sum(6))\n",
        "num_ids": 46
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)*(3*n+1)/(6)\n",
        "num_ids": 29
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # n = int(input(\"Enter an integer: \"))\n    if n < 1:\n        return \"Please enter a positive number.\"\n    if n % 2 == 0:\n        return \"Enter a number that is odd.\"\n    else:\n        sum = (n * (n + 1))\n        return sum**2\n",
        "num_ids": 76
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**2\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(num**2 for num in range(1, n+1, 2))\n",
        "num_ids": 23
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for x in range(1, n+1):\n        s += x ** 2\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s+=i**2\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    num = 0\n    for i in range(1,n+1):\n        num = num + i**2\n    return num\n    \n    ",
        "num_ids": 36
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i ** 2 for i in range(1, n + 1, 2)])\n",
        "num_ids": 24
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum=0\n    for i in range(1,n+1):\n        if i%2!=0:\n            sum=sum+i*i\n    return sum\n    \n    #Alternate Way\n    return sum(i**2 for i in range(1,n+1) if i%2!=0)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2005
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 1: \n        return n\n    else: \n        return 3 * find_star_num(n - 1) + 1\n",
        "num_ids": 36
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return 3*n + 1\n",
        "num_ids": 10
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = []\n    for num in range(1, n+1):\n        if num % 3 == 0:\n            star_num.append(num)\n        elif num % 5 == 0:\n            star_num.append(num)\n    return star_num\n",
        "num_ids": 67
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # 1st star number is 1.\n    # A star number is created by  doubling the number of times a \"1\" is in the number. \n    # ex. (1,1,1,1,1,1,1) has six 1's and has only one double star.\n    # I'll define double as 1*2.\n    \n    # so 1*2 = 2 which has two 1's and no double stars.\n    # 2*2 = 4 which has two 2's and no double stars.\n    # 3*2 = 6 which has two 1's and one double star.\n    \n    # To calculate then'th star number, you have to loop through each number in the sequence and keep track of what is the previous value in the sequence. You need to use the previous value to determine if the current number has a double star. If the previous value has a double star, you need to double the current number (e.g. 2 * 2 = 4)\n    \n    # n = 1, answer = 1\n    # n = 2, answer = 2\n    # n = 3, answer = 4\n    # n = 4, answer = 8\n    # n = 5, answer = 16\n    # n = 6, answer = 32\n    # n = 7, answer = 64\n    # n = 8, answer = 128\n    # n = 9, answer = 256\n    # n = 10, answer = 512\n    # n = 11, answer = 1024\n    \n    # so, I need to use a counter to track the number of times a value has been used in the sequence.\n    # I also need to keep track of how many doubles there are in the sequence.\n    # I'll use a value called star_count which keeps track of the current star count\n    # and a value called double_count which keeps track of the current number of doubles.\n    \n    star_count = 1\n    double_count = 0\n    # I'll also make a list called star_list which will store the star count in sequence\n    star_list = [1]\n    \n    # I will also initialize a while loop to calculate the nth star number\n    while star_count <= n:\n        # I need to initialize a variable called temp_num which will be the previous star number in the sequence\n        # In other words, it will be the value from star_list that is before the current value in the star_list.\n        temp_num = star_list[-1]\n        \n        # I need to calculate the current star number by looping through the star list\n        for i in range(len(star_list)):\n            # I need to check if the current value in star_list is equal to the temp number. If it is, that means the number has been used previously\n            # so I don't need to double it.\n            if star_list[i] == temp_num:\n                # I need to check if the temp number is a double (i.e. temp_num * 2 = star_list[i] + star_list[i])\n                if star_list[i] == temp_num * 2:\n                    # if it is, I need to add a double to the double count and break out of the loop.\n                    double_count += 1\n                    break\n                # if it isn't, I just continue to the next iteration of the for loop.\n                continue\n            # If it isn't, I need to check if the current number has a double (i.e. star_list[i] * 2 = star_list[i] + star_list[i])\n            if star_list[i] * 2 == star_list[i] + star_list[i]:\n                # if it does, I need to add a double to the double count and add that star number to the list.\n                double_count += 1\n                star_list.append(star_list[i] * 2)\n                break\n            # if it doesn't, I can just add the number to the list and continue to the next loop.\n            star_list.append(star_list[i])\n        # once the while loop is done, I need to add the current star number to the star list.\n        star_list.append(star_list[-1] * 2)\n        # I need to increment the star count\n        star_count += 1\n    # I also need to check if the double count is equal to the nth star number\n    if double_count == n:\n        # if it is, I want to return the star list[-1]\n        return star_list[-1]\n    # if it isn't, I return the star list[0]\n    return star_list[0]\n",
        "num_ids": 1064
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: return 3\n    if n == 2: return 5\n    if n == 3: return 7\n    return 3 * find_star_num(n - 1) + 2\n",
        "num_ids": 46
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    #n = int(input('Enter the star number: '))\n    if n == 1:\n        return '*'\n    else:\n        return '*'+find_star_num(n-1)*2+'*'\n    \n    \ndef find_nth_star(n):\n    '''\n    Write a function to find the nth star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n)*2\n    \n    \ndef main():\n    '''\n    Main function.\n    '''\n    print('Welcome to the star number generator!')\n    n = int(input('Enter the star number: '))\n    print('The star number is: '+str(find_nth_star(n)))\n    \n    \nif __name__ == '__main__':\n    main()\n",
        "num_ids": 70
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    #pdb.set_trace()\n    star_num = [4, 5, 6]\n    if n < 3:\n        return star_num[n-1]\n    else:\n        last_star = star_num[-1]\n        for i in range(3, n+1):\n            temp = last_star + 3\n            star_num.append(temp)\n            last_star = temp\n        return star_num[-1]\n",
        "num_ids": 109
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    a = n\n    b = 0\n    while (n > 0):\n        c = (a + b)\n        a = b\n        b = c\n        n -= 1\n    return c\n",
        "num_ids": 48
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def find_star_numbers(n):\n        count = 1\n        while True:\n            count += 1\n            if is_star_number(count):\n                if count == n:\n                    return count\n",
        "num_ids": 51
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return ((n * 2) - 1) ** 2\n",
        "num_ids": 15
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k <= 'Z':\n        return ord(k) - ord('A')\n    else:\n        return ord(k) - ord('a') + 26\n",
        "num_ids": 40
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef char_from_ascii_value(a):\n    '''\n    Write a function to find the character from an ascii value.\n    '''\n    return chr(a)\n",
        "num_ids": 10
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= '0' and k <= '9':\n        return ord(k) - 48\n    else:\n        return ord(k) - 55\n",
        "num_ids": 38
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == \"a\":\n        return 97\n    elif k == \"b\":\n        return 98\n    elif k == \"c\":\n        return 99\n    elif k == \"d\":\n        return 100\n    elif k == \"e\":\n        return 101\n    elif k == \"f\":\n        return 102\n    elif k == \"g\":\n        return 103\n    elif k == \"h\":\n        return 104\n    elif k == \"i\":\n        return 105\n    elif k == \"j\":\n        return 106\n    elif k == \"k\":\n        return 107\n    elif k == \"l\":\n        return 108\n    elif k == \"m\":\n        return 109\n    elif k == \"n\":\n        return 110\n    elif k == \"o\":\n        return 111\n    elif k == \"p\":\n        return 112\n    elif k == \"q\":\n        return 113\n    elif k == \"r\":\n        return 114\n    elif k == \"s\":\n        return 115\n    elif k == \"t\":\n        return 116\n    elif k == \"u\":\n        return 117\n    elif k == \"v\":\n        return 118\n    elif k == \"w\":\n        return 119\n    elif k == \"x\":\n        return 120\n    elif k == \"y\":\n        return 121\n    elif k == \"z\":\n        return 122\n    elif k == \" \":\n        return 32\n    elif k == \".\":\n        return 46\n    elif k == \",\":\n        return 44\n    elif k == \"!\":\n        return 33\n    elif k == \"?\":\n        return 63\n    elif k == \":\":\n        return 58\n    elif k == \";\":\n        return 59\n    elif k == \")\":\n        return 41\n    elif k == \"(\":\n        return 40\n    elif k == \"&\":\n        return 38\n    elif k == \"=\":\n        return 61\n    elif k == \"+\":\n        return 43\n    elif k == \"-\":\n        return 45\n    elif k == \"<\":\n        return 60\n    elif k == \">\":\n        return 62\n    elif k == \"*\":\n        return 42\n    elif k == \"/\":\n        return 47\n    elif k == \"\\\\\":\n        return 92\n    elif k == \"%\":\n        return 37\n    elif k == \"_\":\n        return 95\n    elif k == \"#\":\n        return 35\n    elif k == \"$\":\n        return 36\n    elif k == \"`\":\n        return 96\n    elif k == \"~\":\n        return 126\n    elif k == \"@\":\n        return 64\n    elif k == \"\\\"\":\n        return 34\n    elif k == \"\\n\":\n        return 10\n    elif k == \"\\t\":\n        return 9\n    else:\n        return None\n",
        "num_ids": 701
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_values = {\n    '': 32,\n    'a' : 97,\n    'b' : 98,\n    'c' : 99,\n    'd' : 100,\n    'e' : 101,\n    'f' : 102,\n    'g' : 103,\n    'h' : 104,\n    'i' : 105,\n    'j' : 106,\n    'k' : 107,\n    'l' : 108,\n    'm' : 109,\n    'n' : 110,\n    'o' : 111,\n    'p' : 112,\n    'q' : 113,\n    'r' : 114,\n    's' : 115,\n    't' : 116,\n    'u' : 117,\n    'v' : 118,\n    'w' : 119,\n    'x' : 120,\n    'y' : 121,\n    'z' : 122,\n    'A' : 65,\n    'B' : 66,\n    'C' : 67,\n    'D' : 68,\n    'E' : 69,\n    'F' : 70,\n    'G' : 71,\n    'H' : 72,\n    'I' : 73,\n    'J' : 74,\n    'K' : 75,\n    'L' : 76,\n    'M' : 77,\n    'N' : 78,\n    'O' : 79,\n    'P' : 80,\n    'Q' : 81,\n    'R' : 82,\n    'S' : 83,\n    'T' : 84,\n    'U' : 85,\n    'V' : 86,\n    'W' : 87,\n    'X' : 88,\n    'Y' : 89,\n    'Z' : 90,\n    }\n    return ascii_values[k]\n",
        "num_ids": 443
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    lst = []\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0 and i % 2 == 0):\n            lst.append(arr[i])\n    return sum(lst)\n",
        "num_ids": 58
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = 0\n    even_index = 0\n    for i in range(0, len(arr)):\n        if arr[i]%2 == 0:\n            even = even + arr[i]\n            if i%2 == 0:\n                even_index = even_index + arr[i]\n    return even_index\n",
        "num_ids": 79
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s=0\n    for i in range(len(arr)):\n        if arr[i]%2==0 and i%2==0:\n            s+=arr[i]\n    return s\n",
        "num_ids": 49
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_numbers = []\n    sum_even_even = 0\n",
        "num_ids": 19
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_numbers = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_numbers += arr[i]\n",
        "num_ids": 51
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if (arr[i] % 2 == 0 and i % 2 == 0):\n            even_sum = even_sum + arr[i]\n    return even_sum\nprint (sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]))\nprint (sum_even_and_even_index([2,4,6,8,10]))\n",
        "num_ids": 118
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_num = []\n    even_index_num = []\n    for i in arr:\n        if i%2==0:\n            even_num.append(i)\n    for j in range(0,len(arr)):\n        if j%2==0:\n            even_index_num.append(arr[j])\n    return sum(even_num), sum(even_index_num)\n",
        "num_ids": 98
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            sum_even += arr[i]\n    return sum_even\n",
        "num_ids": 46
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum = sum + arr[i]\n",
        "num_ids": 54
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            if(arr[i] % 2 == 0):\n                even_sum += arr[i]\n    return even_sum\n",
        "num_ids": 60
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # print(n)\n    return sum([i**5 for i in range(1,n+1) if i%2==0])",
        "num_ids": 34
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    x = 0\n    while n > 0:\n        x += (n**5)\n        n -= 1\n    return x\n",
        "num_ids": 32
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    i = 1\n    s = 0\n    while i <= n:\n        s += (i * i * i * i * i)\n        i += 1\n    return s\n    \nprint(even_Power_Sum(5)) # Should return 30\nprint(even_Power_Sum(10)) # Should return 1240\nprint(even_Power_Sum(15)) # Should return 13100\n",
        "num_ids": 92
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(list(map(lambda x: x**5, range(2,n+1,2))))\n",
        "num_ids": 28
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    i = 0\n    sum = 0\n    while i <= n:\n        if i % 2 == 0:\n            sum += (i**5)\n        i += 1\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # 2^5 = 32\n    # 32^5 = 2,048,032,100,000\n    # sum = (2^5 * 3^5 * 5^5 * 7^5 *...)\n    \n    def sum_of_raised_to_power(n, power):\n        return sum([i**power for i in range(n) if i%2==0])\n    \n    return sum_of_raised_to_power(n, 5)\n    \n    # you can assume that the input integer n is positive\n    # assume that n is an integer\n    \ndef is_isogram(string):\n    '''\n    Write a python function that takes in a string and returns True if the string is an \"isogram\" and False otherwise. An isogram is a word that contains every letter of the alphabet exactly once.\n    '''\n    \n    def is_isogram_helper(string):\n        # convert string to lowercase\n        string = string.lower()\n        # since strings are immutable we need to convert it to a list\n        string_list = list(string)\n        \n        for char in string_list:\n            # check if char is in string_list\n            if string_list.count(char) > 1:\n                # if it is return False\n                return False\n        # if it gets to the end of the loop return True\n        return True\n    \n    # now call the function on the string\n    return is_isogram_helper(string)\n    \n    # HINT: You can use the 'in' operator to check if a substring is contained in a string! \n    \ndef find_the_most_frequent_character(string):\n    '''\n    Write a python function that takes in a string and returns the character that occurs the most in the string.\n    '''\n    \n    def get_frequency_dict(string):\n        frequency_dict = dict()\n        for char in string:\n            # count the occurence of the character\n            if char in frequency_dict:\n                frequency_dict[char] += 1\n            else:\n                frequency_dict[char] = 1\n        return frequency_dict\n    \n    def get_max_frequency_char(frequency_dict):\n        max_frequency = max(frequency_dict.values())\n        # because of the way we coded get_frequency_dict,\n        # if there's no max value, we can't have any key with that max value\n        if max_frequency == 0:\n            return None\n        # get all the keys that are equal to the max value\n        max_frequency_char = [char for char, count in frequency_dict.items() if count == max_frequency]\n        # return the first element in the list, since that's our only element that has the max value\n        return max_frequency_char[0]\n    \n    # get the frequency dictionary\n    frequency_dict = get_frequency_dict(string)\n    # get the max frequency character\n    max_frequency_char = get_max_frequency_char(frequency_dict)\n    # return the max frequency character\n    return max_frequency_char\n    \n    # HINT: You can use the 'in' operator to check if a substring is contained in a string!\n    \ndef find_the_highest_scoring_word(string):\n    '''\n    Write a python function that takes in a string and returns the word that occurs the most in the string.\n    '''\n    def get_frequency_dict(string):\n        frequency_dict = dict()\n        for word in string.split():\n            # count the occurence of the character\n            if word in frequency_dict:\n                frequency_dict[word] += 1\n            else:\n                frequency_dict[word] = 1\n        return frequency_dict\n    \n    def get_max_frequency_word(frequency_dict):\n        max_frequency = max(frequency_dict.values())\n        # because of the way we coded get_frequency_dict,\n        # if there's no max value, we can't have any key with that max value\n        if max_frequency == 0:\n            return None\n        # get all the keys that are equal to the max value\n        max_frequency_word = [word for word, count in frequency_dict.items() if count == max_frequency]\n        # return the first element in the list, since that's our only element that has the max value\n        return max_frequency_word[0]\n    \n    # get the frequency dictionary\n    frequency_dict = get_frequency_dict(string)\n    # get the max frequency character\n    max_frequency_word = get_max_frequency_word(frequency_dict)\n    # return the max frequency character\n    return max_frequency_word\n    \n    # HINT: You can use the 'in' operator to check if a substring is contained in a string!\n",
        "num_ids": 329
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    return sum([x**5 for x in range(0, n) if x % 2 == 0])\n    \ndef odd_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    '''\n    \n    return sum([x**5 for x in range(1, n) if x % 2!= 0])\n    \ndef fibonacci(n):\n    '''\n    Write a python function that takes in an integer n and returns the n-th Fibonacci number.\n    '''\n    \n    return sum([i for i in range(0, n+1)])\n",
        "num_ids": 22
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # base case\n    if n == 0:\n        return 0\n    # recursive case\n    else:\n        return (n ** 5) + even_Power_Sum(n - 1)\n",
        "num_ids": 46
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # set the sum to 0\n    even_Power_Sum = 0\n    \n    # iterate through the range of 0 through n\n    for i in range(0, n): \n        \n        # iterate through the range of 0 through n\n        for j in range(0, n): \n            \n            # if the remainder of i divided by j is 0, add the value to the sum\n            if i % j == 0: \n                even_Power_Sum += i ** 5\n                \n    # return the value of the sum\n    return even_Power_Sum\n",
        "num_ids": 135
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum += i**5\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output_list = []\n    for element in test_list:\n        output_list.append(element[1])\n    return output_list\n",
        "num_ids": 36
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[1])\n    return rear_list\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for t in test_list:\n        rear_list.append(t[1])\n    return rear_list\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [test_tuple[1] for test_tuple in test_list]\n",
        "num_ids": 23
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda x: x[1], test_list))\n",
        "num_ids": 20
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[-1])\n    return result_list\n",
        "num_ids": 39
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(0, len(test_tup1)))\n",
        "num_ids": 39
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # return a tuple\n    return tuple(i - j for i, j in zip(test_tup1, test_tup2))\n",
        "num_ids": 35
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tuple = tuple(el1 - el2 for el1, el2 in zip(test_tup1, test_tup2))\n    return new_tuple\n",
        "num_ids": 44
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] - test_tup2[i],)\n    return new_tup\n",
        "num_ids": 64
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtracted_list = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(0, len(test_tup1)):\n            subtracted_list.append(test_tup1[i] - test_tup2[i])\n    return tuple(subtracted_list)\n",
        "num_ids": 87
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert substract_elements((1,2),(3,4)) == (1, -2)\n    assert substract_elements((2,1,3),(3,4,5)) == (2, 0, -3)\n",
        "num_ids": 58
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Tuples are not the same size\"\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n",
        "num_ids": 88
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup\n",
        "num_ids": 59
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(t1 - t2 for t1, t2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(0,len(test_tup1)):\n        new_tup += (test_tup1[i]-test_tup2[i],)\n    return new_tup\n",
        "num_ids": 60
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x = 0\n    for i in range(2,n+1):\n        x = (x + even_binomial_Coeff(i))\n    return x\n",
        "num_ids": 42
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    #the sum of binomial coefficients of (2k)\n    k = math.floor(n/2)\n    sum = 0\n    for i in range(0,k+1):\n        sum = sum + math.factorial(n)/(math.factorial(n-2*i)*math.factorial(i))\n    \n    return sum\n",
        "num_ids": 86
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #If the nth number is a multiple of 2, then the first n even binomial coefficients are 0.\n    #The only even binomial coefficients that we need to consider are the even indices of the nth number.\n    #Find the sum of the even indices of the nth number by taking the nth number to the power of 0.5.\n    return n**0.5\ndef sum_of_even_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #Create a list of the even binomial coefficients of the nth number.\n    binomial_coeff_list = []\n    for i in range(n+1):\n        binomial_coeff_list.append(even_binomial_Coeff_Sum(i))\n    #Add the even binomial coefficients to a list.\n    return sum(binomial_coeff_list)\ndef sum_of_even_binomial_coefficients_1(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #Create a list of the even binomial coefficients of the nth number.\n    binomial_coeff_list = [even_binomial_Coeff_Sum(i) for i in range(n+1)]\n    #Add the even binomial coefficients to a list.\n    return sum(binomial_coeff_list)\ndef sum_of_even_binomial_coefficients_2(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum( [even_binomial_Coeff_Sum(i) for i in range(n+1)] )\ndef sum_of_even_binomial_coefficients_3(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum( [even_binomial_Coeff_Sum(i) for i in range(n+1)] )\n",
        "num_ids": 31
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return (2*even_binomial_Coeff_Sum(n-1) + 1) \n",
        "num_ids": 44
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff_sum = 0\n    for x in range(0, n):\n        if(x % 2 == 0):\n            binomial_coeff_sum += math.factorial(n)/(math.factorial(x) * math.factorial(n-x))\n",
        "num_ids": 69
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (math.factorial(n)*math.factorial(n))/((math.factorial(2*n))*(math.factorial(n-1)))\n",
        "num_ids": 42
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    def binomialCoeff(n, k): \n        result = 1\n        if (k > n - k): \n            k = n - k  \n        for i in range(0, k): \n            result = result * (n - i) \n            result = result // (i + 1) \n              \n        return result \n      \n    sum = 0\n    for i in range(0, n + 1, 2): \n        sum += binomialCoeff(n, i) \n      \n    return sum\n  \ndef even_binomial_Coeff_Sum_2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    def binomialCoeff(n, k): \n        result = 1\n        if (k > n - k): \n            k = n - k  \n        for i in range(0, k): \n            result = result * (n - i) \n            result = result // (i + 1) \n              \n        return result \n      \n    sum = 0\n    for i in range(0, n + 1, 2): \n        if (i == 0 or i == 2 or i == 4 or i == 6 or i == 8 or i == 10):\n            continue\n        else:\n            sum += binomialCoeff(n, i) \n      \n    return sum\n  \ndef isPrime(n):  \n    if (n <= 1): \n        return False\n    if (n <= 3): \n        return True\n    if (n % 2 == 0 or n % 3 == 0): \n        return False\n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n  \ndef Prime_Binary_Sub(n):  \n    '''\n    Write a function that takes in a positive integer n and returns a list of prime numbers in binary representation.\n    '''\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\n      \n    primes = []\n    for i in range(0, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n  \ndef Prime_Binary_Sub_2(n):  \n    '''\n    Write a function that takes in a positive integer n and returns a list of prime numbers in binary representation.\n    '''\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\n      \n    primes = []\n    for i in range(0, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n  \ndef Prime_Binary_Sub_3(n):  \n    '''\n    Write a function that takes in a positive integer n and returns a list of prime numbers in binary representation.\n    '''\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\n      \n    primes = []\n    for i in range(0, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n  \ndef Prime_Binary_Sub_4(n):  \n    '''\n    Write a function that takes in a positive integer n and returns a list of prime numbers in binary representation.\n    '''\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\n      \n    primes = []\n    for i in range(0, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n  \ndef Prime_Binary_Sub_5(n):  \n    '''\n    Write a function that takes in a positive integer n and returns a list of prime numbers in binary representation.\n    '''\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\n      \n    primes = []\n    for i in range(0, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n  \ndef Prime_Binary_Sub_6(n):  \n    '''\n    Write a function that takes in a positive integer n and returns a list of prime numbers in binary representation.\n    '''\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\n      \n    primes = []\n    for i in range(0, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n  \ndef Prime_Binary_Sub_7(n):  \n    '''\n    Write a function that takes in a positive integer n and returns a list of prime numbers in binary representation.\n    '''\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\n      \n    primes = []\n    for i in range(0, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n  \ndef Prime_Binary_Sub_8(n):  \n    '''\n    Write a function that takes in a positive integer n and returns a list of prime numbers in binary representation.\n    '''\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\n      \n    primes = []\n    for i in range(0, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n  \ndef Prime_Binary_Sub_9(n):  \n    '''\n    Write a function that takes in a positive integer n and returns a list of prime numbers in binary representation.\n    '''\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\n      \n    primes = []\n    for i in range(0, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n  \ndef Prime_Binary_Sub_10(n):  \n    '''\n    Write a function that takes in a positive integer n and returns a list of prime numbers in binary representation.\n    '''\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n       ",
        "num_ids": 25
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(0,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef C( n, i): \n    '''\n    Write a python function that takes in a positive integer n and returns the binomial coefficient C(n,i).\n    '''\n    # Initialize result.\n    result = 1\n    # Determine the number of 'heads' in the coin toss.\n    for j in range(0,i):\n        result *= (n-j)/(j+1)\n    return result\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef C(n,i):\n    '''\n    Write a python function that takes in a positive integer n and returns the binomial coefficient C(n,i).\n    '''\n    # Initialize result.\n    result = 1\n    # Determine the number of 'heads' in the coin toss.\n    for j in range(0,i):\n        result *= (n-j)/(j+1)\n    return result\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indices up to n.\n    '''\n    # Initialize sum to 0.\n    total = 0\n    # Start with the sum of 0.\n    for i in range(1,n+1,2):\n        total += C(n,i)\n    return total\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients for all odd indice",
        "num_ids": 28
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else:\n        sum = 0\n        for k in range(n):\n            if k % 2 == 0:\n                sum += math.factorial(n) // (math.factorial(n - k) * math.factorial(k))\n        return sum\n",
        "num_ids": 88
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    #function takes in n and a counter k\n    def binomialCoeff(n,k):\n        if(k==0 or k==n):\n            return 1\n        return int(math.factorial(n)/(math.factorial(k)*math.factorial(n-k)))\n    \n    #call the binomialCoeff function for n\n    binomial_sum=0\n    for i in range(0,n):\n        binomial_sum=binomial_sum+binomialCoeff(n,i)\n        \n    #return the sum\n    return binomial_sum\n",
        "num_ids": 144
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    volume = pi*r**2*h\n    return volume\n",
        "num_ids": 23
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h\n",
        "num_ids": 15
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # r = 1\n    # h = 2\n    # volume = pi * r * r * h\n    # return volume\n    return pi*r**2*h\n",
        "num_ids": 41
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # r = float(input(\"Input radius: \"))\n    # h = float(input(\"Input height: \"))\n    v = 3.14159 * r ** 2 * h\n    return v\n",
        "num_ids": 48
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    volume = (math.pi)*(r**2)*(h)\n    return volume\n",
        "num_ids": 27
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return round(((3.14)*(r**2)*h),2)\n",
        "num_ids": 21
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    v = pi*(r**2)*h\n    return v\n",
        "num_ids": 26
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    return pi * r * r * h\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n",
        "num_ids": 20
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*(r**2)*h\n",
        "num_ids": 13
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i in dict.keys():\n        if dict[i]>=n:\n            new_dict[i] = dict[i]\n    return new_dict\nprint(dict_filter({\"a\":1,\"b\":2,\"c\":3,\"d\":4},3))\n",
        "num_ids": 74
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key,value in dict.items():\n        if value<n:\n            del dict[key]\n    return dict\n",
        "num_ids": 31
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # result= {k:v for k,v in dict.items() if v>=n}\n    # return result\n    # better implementation\n    return {k: v for k, v in dict.items() if v >= n}\n",
        "num_ids": 57
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            new[key] = dict[key]\n    return new\n",
        "num_ids": 41
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            filtered_dict[key] = dict[key]\n    return filtered_dict\n",
        "num_ids": 47
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for k in dict:\n        if dict[k] >= n:\n            new_dict[k] = dict[k]\n    return new_dict\n",
        "num_ids": 45
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_greater_or_equal_n = {}\n    for key in dict:\n        if dict[key] >= n:\n            dict_greater_or_equal_n[key] = dict[key]\n    return dict_greater_or_equal_n\n",
        "num_ids": 66
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return{k:v for k,v in dict.items() if v>=n}\n",
        "num_ids": 24
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n",
        "num_ids": 24
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # assume the test_tup is in the following format:\n    # test_tup = ((1,2,3,4,2,3,4),3,(3,4),(3,2,4,1),(2,3,4))\n    # Expected Output: [6,2,4,4,4,4,4]\n    first_elements = []\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        for j in range(len(test_tup[i])):\n            if j == 0:\n                first_elements.append(test_tup[i][j])\n    return first_elements\n",
        "num_ids": 167
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    new_list = list(test_tup)\n    print(new_list)\n    count = 0\n    for i in new_list:\n        if i == 1:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    def find_first_elements(tup, x):\n        return [i for i in range(len(tup)) if tup[i] == x]\n    return list(map(find_first_elements, test_tup, list(set(test_tup))))[0]\n",
        "num_ids": 72
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup_sorted = sorted(test_tup)\n    count = 1\n    for i in range(len(test_tup_sorted)-1):\n        if test_tup_sorted[i] == test_tup_sorted[i+1]:\n            count += 1\n        else:\n            break\n    return count\n",
        "num_ids": 85
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    my_list = []\n    for i in test_tup:\n        if i == \"all\":\n            break\n        else:\n            my_list.append(i)\n",
        "num_ids": 44
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n    \ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[-1])\n    \ndef find_first_index(test_tup):\n    '''\n    Write a function to find the index of the element in the tuple which appears for the first time.\n    '''\n    return test_tup.index(test_tup[0])\n    \ndef find_last_index(test_tup):\n    '''\n    Write a function to find the index of the element in the tuple which appears for the last time.\n    '''\n    return test_tup.index(test_tup[-1])\n",
        "num_ids": 20
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    previous_count = 0\n    for elem in test_tup:\n        if elem == test_tup[0]:\n            previous_count += 1\n    return previous_count\n",
        "num_ids": 48
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = test_tup[:5]\n    for i in test_tup:\n        if i.isdigit():\n            return test_tup.count(i)\n",
        "num_ids": 48
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(set(test_tup[:test_tup.index((1, 2))]))\n",
        "num_ids": 28
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def get_num_from_denum(denum):\n        num = 0\n        for i in range(1, len(denum)+1):\n            num += denum[i-1] * 10**(i-1)\n        return num\n    \n    # Initialize decagonal number as a list of 1, 0, and 9.\n    dec = [1, 0, 9]\n    \n    # Make nums up to n.\n    for i in range(n-3):\n        num = get_num_from_denum(dec)\n        dec.insert(0, 9-num % 10)\n    \n    return get_num_from_denum(dec)\n",
        "num_ids": 161
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    # There are 10 decagonal numbers.\n    dec_numbers = []\n    for i in range(1, 11):\n        dec_numbers.append(10*i**3 + 10*i**2 - 10*i)\n    \n    if n < 1 or n > len(dec_numbers):\n        raise IndexError(\"n must be between 1 and 10,999\")\n    \n    return dec_numbers[n-1]\n",
        "num_ids": 106
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialise count\n    count = 0\n    \n    # calculate nth decagonal\n    nth = 0\n    while count < n:\n        nth += 1\n        count += 10\n    \n    return nth\n",
        "num_ids": 54
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n - 1) // 2 + n\n",
        "num_ids": 16
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #return int(n*(n+1)//2)\n    return sum(range(n*(n+1)//2))\n    \ndef max_decagonal(n):\n    '''\n    Write a function to find the maximum decagonal number less than n.\n    '''\n    #return int(n*(n+1)//2 - n)\n    return sum(range(n*(n+1)//2 - n + 1))\n    \ndef is_decagonal(n): \n    '''\n    Write a function to check if a given number is a decagonal number.\n    '''\n    return n == is_num_decagonal(n)\n",
        "num_ids": 16
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(n+9)/2)\n",
        "num_ids": 16
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+1)//2\n",
        "num_ids": 14
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(n+1)/2)\ndef find_n_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    while is_num_decagonal(i) < n:\n        i+=1\n    return is_num_decagonal(i)\nprint(find_n_decagonal(1))\n",
        "num_ids": 51
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n if n<0 else (1+n)*n//2\n",
        "num_ids": 19
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    position = -1\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            found = True\n            position = index\n            break\n    return (found, position)\n",
        "num_ids": 58
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n",
        "num_ids": 12
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            pos = i\n            break\n    return (pos >= 0, pos)\n",
        "num_ids": 50
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    print(f\"Sequential search\\n{dlist}\\nSearching for {item}...\")\n    n = len(dlist)\n    for i in range(0, n):\n        if dlist[i] == item:\n            return i\n    return -1\n",
        "num_ids": 66
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = 0\n    found = False\n    while position < len(dlist) and not found:\n        if dlist[position] == item:\n            found = True\n        else:\n            position = position + 1\n    return (found, position)\n",
        "num_ids": 61
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return True, index\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return (True, index)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return (found, pos)\n",
        "num_ids": 61
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp_list = test_list[:]\n    temp_list.sort()\n    for i in range(1,len(temp_list)):\n        if temp_list[i] == temp_list[i-1]:\n            return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for x in test_list:\n        if x not in seen:\n            seen.add(x)\n        else:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to set and back to list to make it unique\n    unique_list = list(set(test_list))\n    # check if the list is empty\n    if len(unique_list) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for element in test_list:\n        if test_list.count(element) > 1:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    s = set(test_list)\n    if len(s) == len(test_list):\n        return True\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > 0:\n        s = set(test_list)\n        if len(s) == len(test_list):\n            return True\n        else:\n            return False\n    else:\n        return True\n",
        "num_ids": 58
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "num_ids": 20
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1-num2 for num1,num2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return_list = []\n    for index in range(len(nums1)):\n        return_list.append(nums1[index]-nums2[index])\n    return return_list\n",
        "num_ids": 49
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    ans = []\n    for i in range(len(nums1)):\n        ans.append(nums1[i] - nums2[i])\n    return ans\n",
        "num_ids": 44
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [a-b for a,b in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1-n2 for (n1,n2) in zip(nums1,nums2)]\n",
        "num_ids": 30
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [a - b for a,b in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1=nums1[:]\n    nums2=nums2[:]\n    result=[]\n    for i in range(len(nums1)):\n        nums1[i]-=nums2[i]\n    return nums1\n",
        "num_ids": 64
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x,y : x-y,nums1,nums2))\n",
        "num_ids": 26
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_frequency = {}\n    for i in str(n):\n        if i in digit_frequency:\n            digit_frequency[i] += 1\n        else:\n            digit_frequency[i] = 1\n    for k,v in digit_frequency.items():\n        if v > int(k):\n            return False\n    return True\n",
        "num_ids": 81
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_count = {}\n",
        "num_ids": 9
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for d in str(n):\n        if n.count(d) > int(d):\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0] * 10\n",
        "num_ids": 11
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in str(n):\n        if int(i) > int(n):\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = {}\n    for num in str(n): \n        if num not in digit_freq:\n            digit_freq[num] = 1\n        else:\n            digit_freq[num] += 1\n    return all(digit_freq[num] <= int(num) for num in str(n))\n",
        "num_ids": 81
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(n) == 0:\n        return False\n    if len(n) == 1:\n        return True\n    if len(n) == 2:\n        return True\n    \n    s = set(n)\n    for i in s:\n        if n.count(i) > i:\n            return False\n    return True\n",
        "num_ids": 81
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(n) == 0:\n        return False\n    return True\n",
        "num_ids": 20
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    d = {}\n    for i in n:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for key in d.keys():\n        if d[key] > int(key):\n            return False\n    return True\n",
        "num_ids": 78
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Define a dictionary of digits.\n    digit_dict = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0}\n",
        "num_ids": 59
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i == element:\n            return True\n        else:\n            return False",
        "num_ids": 27
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all([i==element for i in list])\n",
        "num_ids": 15
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    if len(list)==0:\n        return True\n    if list[0]!=element:\n        return False\n    return check_element(list[1:],element)\n",
        "num_ids": 47
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in list):\n        print(f\"{element} is a match\")\n    else:\n        print(f\"{element} is not a match\")\n",
        "num_ids": 46
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n    \n",
        "num_ids": 27
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # list = [1,1,1,1]\n    # element = 1\n",
        "num_ids": 22
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"ab{2}|ab{3}\"\n    if re.search(pattern,text):\n        return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # text = 'aabb'\n    if re.search(r'a\\bb{2,3}', text):\n        print('True')\n    else:\n        print('False')\n    # return re.search(r'a\\bb{2,3}', text)\n",
        "num_ids": 68
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.compile(r'ab{2,3}?')\n    match = x.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = re.search(r'ab{2,3}$', text)\n    print(bool(result))\n",
        "num_ids": 30
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search(r'ab{2,3}',text)\n    if match:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "num_ids": 42
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = re.search('a\\.b{2,3}',text)\n    if result is not None:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # return text.find('abab')!= -1\n    text = text.lower()\n    found = False\n    if re.search(r'(ab){2,}',text)!= None:\n        found = True\n    return found\n",
        "num_ids": 60
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab{2,3}$')\n    if pattern.search(text):\n        return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.{2,3}b')\n    result = pattern.search(text) is not None\n    return result\nprint(text_match_two_three('abcabcb'))\nprint(text_match_two_three('abcabcb'))\nprint(text_match_two_three('aabcb'))\nprint(text_match_two_three('abbb'))\nprint(text_match_two_three('abbbc'))\n",
        "num_ids": 117
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if \"abab\" in text:\n        return True\n    elif \"ab\" in text:\n        return True\n    elif \"aba\" in text:\n        return True\n    elif \"abb\" in text:\n        return True\n    elif \"abba\" in text:\n        return True\n    else:\n        return False\n",
        "num_ids": 80
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Sum of array where every element is replaced by the sum of all elements in original array\n    # e.g. if k = 2, then array [1, 3, 4, 7, 8] becomes [3, 4, 7, 8, 14, 17]\n    # This sum is computed from the sum of the original array.\n",
        "num_ids": 76
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sub_sum = 0\n    for i in range(n): \n        sub_sum = sub_sum + a[i] \n        a[i] = sub_sum\n",
        "num_ids": 44
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    ans = max_sub_array_sum_repeated(a, n - 1, k)\n    for i in range(n + 1 - k):\n        ans = max(ans, (sum(a[i: i + k]) + max_sub_array_sum_repeated(a, n - 1, k - 1)))\n    return ans\n",
        "num_ids": 94
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    dp = [0]*(n+1)\n    for i in range(n):\n        dp[i+1] = max(dp[i], dp[i]+a[i])\n    \n    max_sum = 0\n    for i in range(1, n+1):\n        for j in range(1, min(i, k)+1):\n            if(i-j < 0):\n                continue\n            max_sum = max(max_sum, dp[i]-dp[i-j])\n    return max_sum\n",
        "num_ids": 129
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_array = [0]*n\n    for i in range(n):\n        sum_array[i] = a[i]\n        if (i-k+1 >= 0):\n            sum_array[i] += sum_array[i-k+1]\n    max_sum = sum_array[0]\n    for i in range(n):\n        if (sum_array[i] > max_sum):\n            max_sum = sum_array[i]\n    return max_sum\n",
        "num_ids": 120
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_a = [0 for i in range(n)]\n    mod_a[0] = a[0]\n    for i in range(1, n):\n        mod_a[i] = a[i] + mod_a[i-1]\n    #print(mod_a)\n    max_sum = float('-inf')\n    for i in range(n):\n        if(i+k-1 < n):\n            sum = mod_a[i]\n            for j in range(1, k):\n                sum = sum + mod_a[i+j]\n            max_sum = max(sum, max_sum)\n    return max_sum\n",
        "num_ids": 159
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_array = [0] * n\n    for i in range(n):\n        sum_array[i] = a[i]\n    sum_array[0] = a[0]\n    for i in range(1, n):\n        sum_array[i] = max(sum_array[i-1]+a[i], a[i])\n",
        "num_ids": 86
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = sum(a)\n    max_sum_i = 0\n    for i in range(k):\n        for j in range(n):\n            if j+i < n:\n                max_sum = max(max_sum, a[i] + a[j+i])\n    \n    return max_sum\n",
        "num_ids": 79
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Approach:\n    # Take 1st element as starting point and put that to an array.\n    # Put sum of that array to another array.\n    # If the sum of the array is less than 0 then simply put 0 to it.\n    # Put 0 to the subarray with sum greater than 0.\n    # Now compare the max of both the subarrays to get the max of the two.\n    # This approach may fail if the array is too large.\n    #   eg: [4, -4, 2, -1, -1, 1, 3, 4, -3, 3]\n    #       [4, 0, 2, 0, 0, 1, 3, 4, 0, 3]\n    #   Time Complexity: O(n)\n    #   Space Complexity: O(n)\n    #        Input:  a[] = {4, -4, 2, -1, -1, 1, 3, 4, -3, 3}\n    #       Output: Maximum sum obtained by repeating given array K times: 19\n    #       Explanation:\n    #       The subarrays formed with the starting point as 4 are:\n    #       4 (K = 1) : {4}\n    #       4 - 4 (K = 1) : {4, -4}\n    #       4 - 4 + 2 (K = 1) : {4, -4, 2}\n    #       4 - 4 + 2 - 1 (K = 1) : {4, -4, 2, -1}\n    #       4 - 4 + 2 - 1 + -1 (K = 1) : {4, -4, 2, -1, -1}\n    #       4 - 4 + 2 - 1 + -1 + 1 (K = 1) : {4, -4, 2, -1, -1, 1}\n    #       4 - 4 + 2 - 1 + -1 + 1 + 3 (K = 1) : {4, -4, 2, -1, -1, 1, 3}\n    #       4 - 4 + 2 - 1 + -1 + 1 + 3 + 4 (K = 1) : {4, -4, 2, -1, -1, 1, 3, 4}\n    #       4 - 4 + 2 - 1 + -1 + 1 + 3 + 4 - 3 (K = 1) : {4, -4, 2, -1, -1, 1, 3, 4, -3}\n    #       4 - 4 + 2 - 1 + -1 + 1 + 3 + 4 - 3 + 3 (K = 1) : {4, -4, 2, -1, -1, 1, 3, 4, -3, 3}\n    #       The final array formed is: [4, -4, 2, -1, -1, 1, 3, 4, -3, 3]\n    #       The subarrays formed with the starting point as 3 are:\n    #       3 (K = 1) : {3}\n    #       3 - 4 (K = 1) : {3, -4}\n    #       3 - 4 + 2 (K = 1) : {3, -4, 2}\n    #       3 - 4 + 2 - 1 (K = 1) : {3, -4, 2, -1}\n    #       3 - 4 + 2 - 1 + -1 (K = 1) : {3, -4, 2, -1, -1}\n    #       3 - 4 + 2 - 1 + -1 + 1 (K = 1) : {3, -4, 2, -1, -1, 1}\n    #       3 - 4 + 2 - 1 + -1 + 1 + 3 (K = 1) : {3, -4, 2, -1, -1, 1, 3}\n    #       3 - 4 + 2 - 1 + -1 + 1 + 3 + 4 (K = 1) : {3, -4, 2, -1, -1, 1, 3, 4}\n    #       3 - 4 + 2 - 1 + -1 + 1 + 3 + 4 - 3 (K = 1) : {3, -4, 2, -1, -1, 1, 3, 4, -3}\n    #       3 - 4 + 2 - 1 + -1 + 1 + 3 + 4 - 3 + 3 (K = 1) : {3, -4, 2, -1, -1, 1, 3, 4, -3, 3}\n    #       The final array formed is: [4, -4, 2, -1, -1, 1, 3, 4, -3, 3]\n    #       The max of all subarrays is: 19\n    #        Input:  a[] = {4, -4, 2, -1, -1, 1, 3, 4, -3, 3, 4, -3, 3}\n    #       Output: Maximum sum obtained by repeating given array K times: 21\n    #       Explanation:\n    #       The subarrays formed with the starting point as 4 are:\n    #       4 (K = 1) : {4}\n    #       4 - 4 (K = 1) : {4, -4}\n    #       4 - 4 + 2 (K = 1) : {4, -4, 2}\n    #       4 - 4 + 2 - 1 (K = 1) : {4, -4, 2, -1}\n    #       4 - 4 + 2 - 1 + -1 (K = 1) : {4, -4, 2, -1, -1}\n    #       4 - 4 + 2 - 1 + -1 + 1 (K = 1) : {4, -4, 2, -1, -1, 1}\n    #       4 - 4 + 2 - 1 + -1 + 1 + 3 (K = 1) : {4, -4, 2, -1, -1, 1, 3}\n    #       4 - 4 + 2 - 1 + -1 + 1 + 3 + 4 (K = 1) : {4, -4, 2, -1, -1, 1, 3, 4}\n    #       4 - 4 + 2 - 1 + -1 + 1 + 3 + 4 - 3 (K = 1) : {4, -4, 2, -1, -1, 1, 3, 4, -3}\n    #       4 - 4 + 2 - 1 + -1 + 1 + 3 + 4 - 3 + 3 (K = 1) : {4, -4, 2, -1, -1, 1, 3, 4, -3, 3}\n    #       4 - 4 + 2 - 1 + -1 + 1 + 3 + 4 - 3 + 3 + 4 (K = 1) : {4, -4, 2, -1, -1, 1, 3, 4, -3, 3, 4}\n    #       4 - 4 + 2 - 1 + -1 + 1 + 3 + 4 - 3 + 3 + 4 - 3 (K = 1) : {4, -4, 2, -1, -1, 1, 3, 4, -3, 3, 4, -3}\n    #       4 - 4 + 2 - 1 + -1 + 1 + 3 + 4 - 3 + 3 + 4 - 3 + 3 (K = 1) : {4, -4, 2, -1, -1, 1, 3, 4, -3, 3, 4, -3, 3}\n    #       The final array formed is: [4, -4, 2, -1, -1, 1, 3, 4, -3, 3, 4, -3, 3, 4, -3, 3]\n    #       The max of all subarrays is: 21\n    #        Input:  a[] = {4, -4, 2, -1, -1, 1, 3, 4, -3, 3, 4, -3, 3, 4, -3, 3, 4, -3, 3, 4, -3, 3, 4, -3, 3, 4, -3, 3}\n    #       Output: Maximum sum obtained by repeating given array K times: 27\n    #       Explanation:\n    #       The subarrays formed with the starting point as 3 are:\n    #       3 (K = 1) : {3}\n    #       3 - 4 (K = 1) : {3, -4}\n    #       3 - 4 + 2 (K = 1) : {3, -4, 2}\n    #       3 - 4 + 2 - 1 (K = 1) : {3, -4, 2, -1}\n    #       3 - 4 + 2 - 1 + -1 (K = 1) : {3, -4, 2, -1, -",
        "num_ids": 1986
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # The largest possible sum is k times the sum of array elements \n    max_sum = k * sum(a) \n    # The best way is to take the sum of the array elements \n    for i in range(0, n - k + 1): \n        current_sum = 0\n        for j in range(i, i + k): \n            current_sum += a[j % n] \n        max_sum = max(current_sum, max_sum) \n    return max_sum \n",
        "num_ids": 121
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return (n*(n+1)*(2*n+1))/6\n",
        "num_ids": 22
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum = sum + i * i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    if n<0:\n        return \"Invalid Input\"\n    else:\n        sum_sq = 0\n        for i in range(2,n+1):\n            if i%2 == 0:\n                sum_sq = sum_sq + i*i\n            else:\n                pass\n        return sum_sq\n",
        "num_ids": 77
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i ** 2 for i in range(2, n + 1, 2)])\n",
        "num_ids": 24
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return (n**2) + (n*4)\n",
        "num_ids": 16
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum = sum + i * i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum += i**2\n    return sum\n    \n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(num**2 for num in range(n) if num%2==0)\n    \ndef nth_smallest(n, lst):\n    '''\n    Write a python function takes in 2 positive integers n and lst.\n    The function returns the nth smallest element in the list without using any built in sorting algorithms.\n    '''\n    assert n>0 and n<=len(lst)\n    temp = lst[:]\n    for i in range(len(lst)):\n        index = i\n        for j in range(i+1, len(lst)):\n            if temp[index]>temp[j]:\n                index = j\n        temp[i], temp[index] = temp[index], temp[i]\n    return temp[n-1]\n    \ndef next_palindrome(n):\n    '''\n    Write a python function takes in a positive integer n and returns the next palindrome greater than n.\n    '''\n    if n%10==0:\n        return n\n    else:\n        n = n+1\n        while not is_palindrome(n):\n            n += 1\n        return n\n        \ndef is_palindrome(n):\n    '''\n    Write a python function takes in a positive integer n, returns true if it is palindrome, else false.\n    '''\n    return str(n) == str(n)[::-1]\n    \ndef find_common_in_list(lst, n):\n    '''\n    Write a python function takes in a list and positive integer n.\n    The function returns the nth common element in the list without using built-in methods.\n    '''\n    lst = set(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                return lst[i]\n    return None\n        \ndef print_list_in_dict(lst):\n    '''\n    Write a python function takes in a list of strings and returns the same list sorted by the number of characters in the string.\n    '''\n    lst = sorted(lst, key=len)\n    for i in range(len(lst)):\n        lst[i] = str(len(lst[i])) + '-' + lst[i]\n    return lst\n    \ndef sum_digits_square_digits(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the sum of the square of the digits of n.\n    '''\n    return sum(map(lambda x: x**2, [int(i) for i in str(n)]))\n",
        "num_ids": 29
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #start writing your code here\n    return n*(n+1)*(2*n+1)/6\n    \ndef even_Count(n):\n    '''\n    Write a python function takes in an integer n and returns the number of even numbers between 1 and n (including 1 and n).\n    '''\n    #start writing your code here\n    return n//2\n    \ndef find_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of all odd natural numbers below n.\n    '''\n    #start writing your code here\n    return (n*(n+1))//2\n    \ndef max_Product(l):\n    '''\n    Write a python function takes in a list of integers and returns the product of the largest three numbers.\n    '''\n    #start writing your code here\n    #a=sorted(l)\n    #return a[-1]*a[-2]*a[-3]\n    return max(l[-1]*l[-2]*l[-3],l[0]*l[1]*l[2])\n    \ndef find_Length(l):\n    '''\n    Write a python function takes in a list and returns the length of the list.\n    '''\n    #start writing your code here\n    return len(l)\n    \ndef find_Largest(l):\n    '''\n    Write a python function takes in a list and returns the largest element in the list.\n    '''\n    #start writing your code here\n    return max(l)\n    \ndef reverse_List(l):\n    '''\n    Write a python function takes in a list of numbers and returns a list that is the input list, reversed.\n    '''\n    #start writing your code here\n    #b=l[::-1]\n    #return b\n    return l[::-1]\n    \ndef search_List(l,x):\n    '''\n    Write a python function takes in a list of numbers and an element and returns True if the element is in the list and False if it is not.\n    '''\n    #start writing your code here\n    #b=x in l\n    #return b\n    return x in l\n    \ndef sort_List(l):\n    '''\n    Write a python function takes in a list of numbers and returns a list that is sorted in increasing order.\n    '''\n    #start writing your code here\n    #return sorted(l)\n    return sorted(l)\n    \ndef list_Elements(l):\n    '''\n    Write a python function takes in a list and returns a new list that contains only the elements that are common between the list and the parameter list.\n    '''\n    #start writing your code here\n    a=[]\n    for i in l:\n        if i not in a:\n            a.append(i)\n    return a\n    \ndef list_Elements_2(l,x):\n    '''\n    Write a python function takes in a list and an element and returns True if the element is in the list and False if it is not.\n    '''\n    #start writing your code here\n    #b=x in l\n    #return b\n    return x in l\n    \ndef list_Addition(l):\n    '''\n    Write a python function takes in a list and returns a new list that contains the addition of every 2nd element in the list.\n    '''\n    #start writing your code here\n    a=[]\n    for i in range(0,len(l),2):\n        a.append(l[i]+l[i+1])\n    return a\n    \ndef find_Median(l):\n    '''\n    Write a python function takes in a list and returns the median of the list.\n    '''\n    #start writing your code here\n    #return l[(len(l)-1)//2]\n    return (sorted(l)[len(l)//2])\n    \ndef odd_Even_Count(l):\n    '''\n    Write a python function takes in a list and returns a new list that contains the number of even and odd elements in the list.\n    '''\n    #start writing your code here\n    a=[]\n    a.append(l.count(l[0]%2))\n    a.append(l.count(l[0]%2+1))\n    return a\n    \ndef sum_Product(l):\n    '''\n    Write a python function takes in a list and returns the sum of the product of all the even numbers in the list.\n    '''\n    #start writing your code here\n    a=[]\n    for i in l:\n        if i%2==0:\n            a.append(i)\n    return sum(a)\n    \ndef sum_Product_2(l):\n    '''\n    Write a python function takes in a list and returns the sum of the product of all the odd numbers in the list.\n    '''\n    #start writing your code here\n    a=[]\n    for i in l:\n        if i%2!=0:\n            a.append(i)\n    return sum(a)\n    \ndef product_of_Three(l):\n    '''\n    Write a python function takes in a list and returns the product of the largest three numbers in the list.\n    '''\n    #start writing your code here\n    a=[]\n    for i in l:\n        if i>max(l)//3:\n            a.append(i)\n    return product(a)\n    \ndef product_of_Three_2(l):\n    '''\n    Write a python function takes in a list and returns the product of the largest three numbers in the list.\n    '''\n    #start writing your code here\n    a=[]\n    for i in l:\n        if i<max(l)*3:\n            a.append(i)\n    return product(a)\n    \ndef product_of_Three_3(l):\n    '''\n    Write a python function takes in a list and returns the product of the largest three numbers in the list.\n    '''\n    #start writing your code here\n    a=[]\n    for i in l:\n        if i<max(l)*3:\n            a.append(i)\n    return product(a)\n    \ndef sorted_List(l):\n    '''\n    Write a python function takes in a list and returns a new list that is the input list, but with all the values sorted in descending order.\n    '''\n    #start writing your code here\n    return sorted(l,reverse=True)\n    \ndef frequency_Counter(l):\n    '''\n    Write a python function takes in a list and returns a dictionary that has the frequency of each element in the list.\n    '''\n    #start writing your code here\n    a={}\n    for i in l:\n        a[i]=l.count(i)\n    return a\n    \ndef frequency_Counter_2(l):\n    '''\n    Write a python function takes in a list and returns a dictionary that has the frequency of each element in the list.\n    '''\n    #start writing your code here\n    a={}\n    for i in l:\n        if i in a:\n            a[i]+=1\n        else:\n            a[i]=1\n    return a\n    \ndef search_Sorted_List(l,x):\n    '''\n    Write a python function takes in a sorted list and an element and returns True if the element is in the list and False if it is not.\n    '''\n    #start writing your code here\n    for i in l:\n        if x==i:\n            return True\n    return False\n    \ndef find_Sum_List(l):\n    '''\n    Write a python function takes in a list and returns the sum of all the numbers in the list.\n    '''\n    #start writing your code here\n    return sum(l)\n    \ndef find_Sum_List_2(l):\n    '''\n    Write a python function takes in a list and returns the sum of all the numbers in the list.\n    '''\n    #start writing your code here\n    return sum(l)\n    \ndef find_Sum_List_3(l):\n    '''\n    Write a python function takes in a list and returns the sum of all the numbers in the list.\n    '''\n    #start writing your code here\n    return sum(l)\n    \ndef list_Slicing(l):\n    '''\n    Write a python function takes in ",
        "num_ids": 10
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    # START CODE HERE\n    count = 0\n    m = 0\n    for i in list1:\n        if len(i) > m:\n            m = len(i)\n            count = list1.index(i)\n    return list1[count]\n    # END CODE HERE\n",
        "num_ids": 71
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_len_list = []\n    for l in list1:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_len_list = l\n    print(max_len)\n    print(max_len_list)\n",
        "num_ids": 75
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    list_of_max_length = []\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n            list_of_max_length = [i]\n        elif len(i) == max_length:\n            list_of_max_length.append(i)\n    print('The list of list with the maximum length is: ', list_of_max_length)\nmax_length([[1,2], [3], [4,5,6]])\n",
        "num_ids": 134
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = []\n    for i in list1:\n        length.append(len(i))\n    return max(length)\n    \n    \n    \ndef min_length(list1):\n    '''\n    Write a function to find the list of minimum length in a list of lists.\n    '''\n    length = []\n    for i in list1:\n        length.append(len(i))\n    return min(length)\n    \n    \n    \ndef sum_of_lists(list1):\n    '''\n    Write a function to sum the elements of the lists in a list of lists.\n    '''\n    sum1 = 0\n    for i in list1:\n        sum1 = sum1 + sum(i)\n    return sum1\n    \n    \n    \ndef avg_of_lists(list1):\n    '''\n    Write a function to find the average of elements of the lists in a list of lists.\n    '''\n    avg1 = 0\n    avg1 = sum_of_lists(list1)/len(list1)\n    return avg1\n    \n    \n    \ndef row_wise_sum(list1):\n    '''\n    Write a function to sum the elements of each list in a list of lists.\n    '''\n    sum1 = 0\n    for i in list1:\n        sum1 = sum1 + sum(i)\n    return sum1\n    \n    \n    \ndef col_wise_sum(list1):\n    '''\n    Write a function to sum the elements of each list in a list of lists and return a list containing the sums.\n    '''\n    sum1 = []\n    for i in range(len(list1[0])):\n        col = 0\n        for j in list1:\n            col = col + j[i]\n        sum1.append(col)\n    return sum1\n    \n    \n    \ndef highest_lowest(list1):\n    '''\n    Write a function to find the list with the highest and lowest value in a list of lists.\n    '''\n    highest = 0\n    lowest = 0\n    for i in list1:\n        if(len(i) > 0):\n            if(max(i) > highest):\n                highest = max(i)\n            if(min(i) < lowest):\n                lowest = min(i)\n    return [highest, lowest]\n    \n    \n    \ndef smallest_index(list1):\n    '''\n    Write a function to find the index of the list with the smallest value in a list of lists.\n    '''\n    smallest_index1 = 0\n    smallest_index = 0\n    for i in range(len(list1)):\n        if(len(list1[i]) > 0):\n            if(list1[i][smallest_index1] > list1[i][smallest_index]):\n                smallest_index1 = smallest_index\n                smallest_index = i\n    return smallest_index1\n    \n    \n    \ndef common_elements(list1):\n    '''\n    Write a function to find the common elements in all the lists in a list of lists.\n    '''\n    elements = []\n    for i in list1[0]:\n        for j in list1[1]:\n            if(i == j):\n                elements.append(i)\n    return elements\n    \n    \n    \ndef frequency(list1):\n    '''\n    Write a function to count the frequency of each element in a list of lists.\n    '''\n    dict1 = {}\n    for i in list1:\n        for j in i:\n            if(j in dict1):\n                dict1[j] = dict1[j] + 1\n            else:\n                dict1[j] = 1\n    return dict1\n    \n    \n    \ndef concatenation(list1):\n    '''\n    Write a function to concatenate all the lists in a list of lists.\n    '''\n    concatenation1 = []\n    for i in list1:\n        for j in i:\n            concatenation1.append(j)\n    return concatenation1\n    \n    \n    \ndef identical_values(list1):\n    '''\n    Write a function to count the number of lists having identical values in a list of lists.\n    '''\n    identical_values1 = 0\n    for i in list1:\n        for j in list1:\n            if(i == j):\n                identical_values1 = identical_values1 + 1\n    return identical_values1\n    \n    \n    \ndef max_values(list1):\n    '''\n    Write a function to find the list having the maximum value in a list of lists.\n    '''\n    max_values1 = 0\n    max_values = []\n    for i in list1:\n        for j in i:\n            if(j > max_values1):\n                max_values1 = j\n        max_values.append(max_values1)\n        max_values1 = 0\n    return max_values\n    \n    \n    \ndef min_values(list1):\n    '''\n    Write a function to find the list having the minimum value in a list of lists.\n    '''\n    min_values1 = 0\n    min_values = []\n    for i in list1:\n        for j in i:\n            if(j < min_values1):\n                min_values1 = j\n        min_values.append(min_values1)\n        min_values1 = 0\n    return min_values\n    \n    \n    \ndef swap_columns(list1, col1, col2):\n    '''\n    Write a function to swap the columns in a list of lists.\n    '''\n    for i in list1:\n        temp = i[col1]\n        i[col1] = i[col2]\n        i[col2] = temp\n    return list1\n    \n    \n    \ndef is_list_sorted(list1):\n    '''\n    Write a function to check whether a list of lists is sorted in increasing order.\n    '''\n    for i in range(1, len(list1)):\n        if(list1[i - 1] > list1[i]):\n            return False\n    return True\n    \n    \n    \ndef rearrange(list1):\n    '''\n    Write a function to rearrange the elements of a list of lists in ascending order.\n    '''\n    rearrange1 = []\n    for i in list1:\n        rearrange1.append(max(i))\n    return rearrange1\n    \n    \n    \ndef max_length_index(list1):\n    '''\n    Write a function to find the index of the list having the maximum length in a list of lists.\n    '''\n    index = 0\n    max_length = len(list1[0])\n    for i in range(1, len(list1)):\n        if(len(list1[i]) > max_length):\n            max_length = len(list1[i])\n            index = i\n    return index\n    \n    \n    \ndef min_length_index(list1):\n    '''\n    Write a function to find the index of the list having the minimum length in a list of lists.\n    '''\n    index = 0\n    min_length = len(list1[0])\n    for i in range(1, len(list1)):\n        if(len(list1[i]) < min_length):\n            min_length = len(list1[i])\n            index = i\n    return index\n    \n    \n    \ndef separate(list1):\n    '''\n    Write a function to separate a list of lists into a list of lists having elements of similar value.\n    '''\n    separate1 = []\n    for i in list1:\n        separate1.append([])\n    for i in list1:\n        for j in range(len(list1[0])):\n            for k in range(len(list1)):\n                if(list1[k][j] == i[j]):\n                    separate1[j].append(list1[k][j])\n    return separate1\n    \n    \n    \ndef duplicate_list(list1):\n    '''\n    Write a function to create a list containing the same elements as the input list.\n    '''\n    duplicate_list1 = []\n    for i in list1:\n        duplicate_list1.append(i)\n    return duplicate_lis",
        "num_ids": 38
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        length = 0\n        for j in list1[i]:\n            length += 1\n        if length > max_len:\n            max_len = length\n            max_list = list1[i]\n    return max_list\n",
        "num_ids": 75
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    for i in list1:\n        if max_length<len(i):\n            max_length=len(i)\n    return max_length\nlist1 = [['A', 'B', 'C', 'D'], ['A', 'B', 'C'], ['A', 'B']]\nprint('Maximum length of list of lists is {}'.format(max_length(list1)))\n",
        "num_ids": 100
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxlength = 0\n    for i in list1:\n        if len(i) > maxlength:\n            maxlength = len(i)\n    return maxlength\n",
        "num_ids": 41
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for each in list1:\n        if len(each) > max_len:\n            max_len = len(each)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list_len = [len(list1[i]) for i in range(len(list1))]\n    return max(list_len)\n",
        "num_ids": 36
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    len_list = []\n    for i in list1:\n        len_list.append(len(i))\n    print(len_list)\n    return list1[len_list.index(max(len_list))]\n",
        "num_ids": 56
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Function to return the count \n    # of ways to paint the fence. \n    def countWaysUtil(n, k, color): \n        # base cases \n        if (n == 0): \n            return 1\n        if (n == 1): \n            if (k == 1): \n                return 1\n            else: \n                return 0\n        if (k == 1): \n            return n \n",
        "num_ids": 102
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # DP Table \n    # We will store the no of ways to paint with k colors at index i for i = 1 to n\n    dp = [0 for i in range(n + 1)] \n",
        "num_ids": 50
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for x in range(k+1)] for y in range(n+1)] \n",
        "num_ids": 27
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # number of ways to paint the fence\n    ways = [0] * (k + 1) \n    # ways[0] is for no color, ways[1] is for 1 color, ways[2] is for 2 colors\n    ways[0], ways[1], ways[2] = 1, k, k * (k - 1)\n    # start from 3rd color since the first and last colors are not included in the problem\n    # ways[i] will be ways[i - 1] + ways[i - 2] - ways[i - 3]\n    for i in range(3, n + 1): \n        ways[i] = ways[i - 1] + ways[i - 2] - ways[i - 3]\n    return ways[n] \n    \ndef count_no_of_ways_tab(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # number of ways to paint the fence\n    ways = [0] * (k + 1) \n    # ways[0] is for no color, ways[1] is for 1 color, ways[2] is for 2 colors\n    ways[0], ways[1], ways[2] = 1, k, k * (k - 1)\n    # start from 3rd color since the first and last colors are not included in the problem\n    # ways[i] will be ways[i - 1] + ways[i - 2] - ways[i - 3]\n    for i in range(3, n + 1): \n        ways[i] = ways[i - 1] + ways[i - 2] - ways[i - 3]\n    return ways[n] \n    \ndef count_no_of_ways_mem(n, k, cache): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # number of ways to paint the fence\n    if n in cache:\n        return cache[n]\n    ways = 0\n    if n == 0:\n        ways = 1\n    elif n == 1:\n        ways = k\n    elif n == 2:\n        ways = k * (k - 1)\n    else:\n        ways = count_no_of_ways_mem(n - 1, k, cache) + count_no_of_ways_mem(n - 2, k, cache) - count_no_of_ways_mem(n - 3, k, cache)\n    cache[n] = ways\n    return ways\n    \ndef count_no_of_ways_tab_mem(n, k, cache): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # number of ways to paint the fence\n    if n in cache:\n        return cache[n]\n    ways = [0] * (k + 1) \n    # ways[0] is for no color, ways[1] is for 1 color, ways[2] is for 2 colors\n    ways[0], ways[1], ways[2] = 1, k, k * (k - 1)\n    # start from 3rd color since the first and last colors are not included in the problem\n    # ways[i] will be ways[i - 1] + ways[i - 2] - ways[i - 3]\n    for i in range(3, n + 1): \n        ways[i] = ways[i - 1] + ways[i - 2] - ways[i - 3]\n    cache[n] = ways[n]\n    return ways[n] \n",
        "num_ids": 204
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Create a vector to store the number of ways of painting the fence.\n    dp = [0]*(n+1)\n",
        "num_ids": 34
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize count array of size k+1\n    # No. of ways of painting = ways of painting with 1 less post and\n    # k - 1 colors\n    count = [0] * (k + 1)\n    count[0] = 1\n    count[1] = k\n",
        "num_ids": 68
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # memo is a dict which stores the number of ways for specific fence of length n \n    memo = {0:1, 1:1, 2:2} \n    def count(n, k): \n        # if n is 0 or 1, there is only one way to paint the fence. \n        if n in memo: \n            return memo[n] \n        # if n is 2, there are 2 ways to paint the fence. \n        memo[n] = k * count(n-1, k) + count(n-2, k) \n        return memo[n] \n    return count(n, k) \n",
        "num_ids": 152
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # 2D list to store the values of number of ways for different n and k.\n    dp = [[-1 for i in range(k+1)] for j in range(n+1)]\n",
        "num_ids": 47
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # global counter\n    # counter = 0\n    global result\n    result = 0\n    def countWaysUtil(n, k, c): \n        global result \n        # Base cases \n        if (n == 0): \n            return 1\n        if (n == 1): \n            return 1\n        if (n == 2): \n            if (k == 0): \n                result += 1\n                return result\n        # If there are more than 2 posts left \n        # to paint, then the problem is same as \n        # painting the remaining posts \n        if (n > 2): \n            return (countWaysUtil(n-1, k, 0) +\n                countWaysUtil(n-2, k, 0))\n    \n        # If k = 2, then we can have 1 way \n        if (k == 2): \n            return countWaysUtil(n-1, k, c + 1) \n        \n        # If k = 3, then we can have 2 \n        # ways. Paint the current post \n        # with any of the 3 colors and \n        # recur for the remaining posts. \n        if (k == 3): \n            return (countWaysUtil(n-1, k, c + 1) +\n                countWaysUtil(n-2, k, c + 1)) \n        # If k = 4, then we can have 4 \n        # ways. Paint the current post \n        # with any of the 4 colors and \n        # recur for the remaining posts. \n        if (k == 4): \n            return (countWaysUtil(n-1, k, c + 1) +\n                countWaysUtil(n-2, k, c + 1) +\n                countWaysUtil(n-3, k, c + 1)) \n        return result\n",
        "num_ids": 440
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    table = [0 for i in range(n+1)]\n    table[0] = 1\n    table[1] = 1\n",
        "num_ids": 33
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n%m == 0:\n        print(int(n/m))\n    else:\n        print(int(n/m+1))\n",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient",
        "num_ids": 15
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    \n    \ndef solve_quadratic_equation(a,b,c):  \n    '''\n    Write a python function to solve quadratic equation.\n    The quadratic equation can be written as\n    ax2 + bx + c = 0\n    '''\n    return (-b + (b ** 2 - 4*a*c)**0.5) / (2*a)\n    \n    \ndef find_root(a,b,c):  \n    '''\n    Write a python function to find two roots of quadratic equation.\n    The quadratic equation can be written as\n    ax2 + bx + c = 0\n    '''\n    return (-b + ((b ** 2) - 4 * a * c)**0.5) / (2 * a)\n    \n    \ndef check_divisibility(n,m):  \n    '''\n    Write a python function to check if n is divisible by m.\n    '''\n    return n % m == 0\n    \n    \ndef prime_factors(n):  \n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n    \n    \ndef find_lcm(a,b):  \n    '''\n    Write a python function to find lowest common multiple of a and b.\n    '''\n    return a * b / gcd(a,b)\n    \n    \ndef find_exponent(a,b):  \n    '''\n    Write a python function to find exponent of a base b (use log(a,b)).\n    '''\n    return log(a,b)\n    \n    \ndef find_fibonacci_number(n):  \n    '''\n    Write a python function to find nth Fibonacci number.\n    '''\n    return (((1 + 5**0.5) / 2)**n - ((1 - 5**0.5) / 2)**n) / 5**0.5\n    \n    \ndef find_fibonacci_number_sequence(n):  \n    '''\n    Write a python function to find Fibonacci number sequence from n.\n    '''\n    seq = [0,1]\n    for i in range(n - 2):\n        seq.append(seq[-2] + seq[-1])\n    return seq\n    \n    \ndef is_palindrome(s):  \n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    return s == s[::-1]\n    \n    \ndef to_palindrome(s):  \n    '''\n    Write a python function to convert a string to palindrome.\n    '''\n    return s[::-1]\n    \n    \ndef find_largest_palindrome(n):  \n    '''\n    Write a python function to find largest palindrome made from the product of two n-digit numbers.\n    '''\n    largest = 0\n    for i in range(10**n -1,9*10**(n-1),-1):\n        for j in range(i,9*10**(n-1),-1):\n            if is_palindrome(str(i*j)) and i*j > largest:\n                largest = i*j\n    return largest\n    \n    \ndef find_lcm_from_product_of_primes(a,b):  \n    '''\n    Write a python function to find least common multiple of two numbers whose product is a given number.\n    '''\n    p = []\n    for i in range(2,a):\n        if a % i == 0:\n            p.append(i)\n    for j in range(2,b):\n        if b % j == 0:\n            p.append(j)\n    return gcd(p[0],p[1])\n    \n    \ndef get_c(m,n):  \n    '''\n    Write a python function to find coefficients of ax^2 + bx + c = 0.\n    '''\n    a = -n / m\n    b = 1\n    c = -(m * a**2 + n) / m\n    return a,b,c\n    \n    \ndef solve_linear_equation(a,b,c):  \n    '''\n    Write a python function to solve linear equation of the form a*x + b = c.\n    '''\n    return -b / a, c / a\n    \n    \ndef get_pythagorean_triplet(a,b):  \n    '''\n    Write a python function to find Pythagorean triplet for the given integers a and b.\n    '''\n    return a*a - b*b, 2*a*b\n    \n    \ndef is_prime(n):  \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    return all(n % i for i in range(2, int(sqrt(n))+1))\n    \n    \ndef get_fibonacci_number(n):  \n    '''\n    Write a python function to find nth Fibonacci number.\n    '''\n    return (((1 + 5**0.5) / 2)**n - ((1 - 5**0.5) / 2)**n) / 5**0.5\n    \n    \ndef get_fibonacci_sequence(n):  \n    '''\n    Write a python function to find Fibonacci sequence from n.\n    '''\n    seq = [0,1]\n    for i in range(n - 2):\n        seq.append(seq[-2] + seq[-1])\n    return seq\n    \n    \ndef count_binary_substrings(s):  \n    '''\n    Write a python function to count number of substrings in a string with exactly k distinct characters.\n    '''\n    return len([1 for i in range(len(s)) for j in range(i,len(s)) if len(set(s[i:j+1])) == k])\n    \n    \ndef get_k_distinct_characters(s,k):  \n    '''\n    Write a python function to get k distinct characters from string s.\n    '''\n    return set(s) if k <= len(set(s)) else set(s[:k])\n    \n    \ndef get_power_set(s):  \n    '''\n    Write a python function to get the power set of a set.\n    '''\n    return list(chain.from_iterable(combinations(s,r) for r in range(len(s)+1)))\n    \n    \ndef get_all_permutations(s):  \n    '''\n    Write a python function to get all permutations of a string.\n    '''\n    return sorted(set(''.join(s) for s in permutations(s)))\n    \n    \ndef get_divisors(n):  \n    '''\n    Write a python function to get all divisors of a number.\n    '''\n    return [1] + [i for i in range(2,n) if n % i == 0]\n    \n    \ndef is_perfect_square(n):  \n    '''\n    Write a python function to check whether a number is a perfect square or not.\n    '''\n    return sqrt(n).is_integer()\n    \n    \ndef find_factors(n):  \n    '''\n    Write a python function to find factors of a number.\n    '''\n    return [i for i in range(1,n) if n % i == 0]\n    \n    \ndef find_prime_factors(n):  \n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    return [i for i in range(1,n) if is_prime(i) and n % i == 0]\n    \n    \ndef get_hcf(m,n):  \n    '''\n    Write a python function to find the highest common factor of two numbers.\n    '''\n    if m > n:\n        m, n = n, m\n    while n!= 0:\n        m, n = n, m % n",
        "num_ids": 36
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n//m\n    return q\n",
        "num_ids": 13
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n    ",
        "num_ids": 9
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    #return int(n/m)\n    return n//m\n",
        "num_ids": 20
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Code here\n    return n//m\n",
        "num_ids": 13
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n % m == 0:\n        return n/m\n    else:\n        return n//m +1\n",
        "num_ids": 29
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # w=4\n    # h=5\n    # h=math.sqrt(w**2+h**2)\n    h=w**2+h**2\n    h=h**0.5\n    return h\n",
        "num_ids": 56
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(\"Finding the third side of the triangle\")\n    if w == h:\n        print(\"The third side is %d\" % w)\n    else:\n        print(\"The third side is %d\" % (math.sqrt(w*w+h*h)))\ndef otherside_rightangle_input():\n    w = input(\"Enter the width of the triangle:\")\n    h = input(\"Enter the height of the triangle:\")\n    otherside_rightangle(w,h)\notherside_rightangle_input()\ndef angle_equal(a,b,c):\n    '''\n    Write a function to determine if three sides of a triangle can form an equilateral triangle.\n    '''\n    print(\"Determining whether a triangle can form an equilateral triangle.\")\n    if a == b == c:\n        print(\"Yes. This triangle is an equilateral triangle.\")\n    else:\n        print(\"No. This triangle cannot form an equilateral triangle.\")\ndef angle_equal_input():\n    a = input(\"Enter the length of side a:\")\n    b = input(\"Enter the length of side b:\")\n    c = input(\"Enter the length of side c:\")\n    angle_equal(a,b,c)\nangle_equal_input()\ndef angle_equal_input_v2():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v2()\ndef angle_equal_input_v3():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v3()\ndef angle_equal_input_v4():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v4()\ndef angle_equal_input_v5():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v5()\ndef angle_equal_input_v6():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v6()\ndef angle_equal_input_v7():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v7()\ndef angle_equal_input_v8():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v8()\ndef angle_equal_input_v9():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v9()\ndef angle_equal_input_v10():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v10()\ndef angle_equal_input_v11():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v11()\ndef angle_equal_input_v12():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v12()\ndef angle_equal_input_v13():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v13()\ndef angle_equal_input_v14():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v14()\ndef angle_equal_input_v15():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v15()\ndef angle_equal_input_v16():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v16()\ndef angle_equal_input_v17():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v17()\ndef angle_equal_input_v18():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v18()\ndef angle_equal_input_v19():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v19()\ndef angle_equal_input_v20():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v20()\ndef angle_equal_input_v21():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v21()\ndef angle_equal_input_v22():\n    a = int(input(\"Enter the length of side a:\"))\n    b = int(input(\"Enter the length of side b:\"))\n    c = int(input(\"Enter the length of side c:\"))\n    angle_equal(a,b,c)\nangle_equal_input_v22()\ndef angle_equal_input_v23():\n    a = int(input(",
        "num_ids": 1849
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round((math.sqrt((w**2)+(h**2))),2)\ndef otherside_rectangle(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round((math.sqrt((a**2)+(b**2))),2)\ndef perimeter_of_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return (a*2)+(b*2)\ndef perimeter_of_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return (a+b+c)\ndef area_of_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (a*b)\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return ((a*b)/2)\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return (math.pi*(r**2))\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return ((math.pi*(r**2)*h))\ndef volume_of_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (((math.pi*r**2)/3)*h)\ndef area_of_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return ((4*(math.pi)*(r**2)))\ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (((4/3)*(math.pi)*(r**3)))\ndef height_of_pyramid(a,b,h):\n    '''\n    Write a function to find the height of a pyramid.\n    '''\n    return (a*h)\ndef base_of_pyramid(a,b,h):\n    '''\n    Write a function to find the base of a pyramid.\n    '''\n    return (b*h)\ndef area_of_square(side):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return (side**2)\ndef area_of_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return (a*b)\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (1/2*(a*b))\ndef area_of_trapezoid(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return (((a+b)*h)/2)\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return (math.pi*(r**2))\ndef area_of_ellipse(a,b):\n    '''\n    Write a function to find the area of an ellipse.\n    '''\n    return ((math.pi*(a*b)))\ndef circumference_of_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return (2*math.pi*r)\ndef circumference_of_ellipse(a,b):\n    '''\n    Write a function to find the circumference of an ellipse.\n    '''\n    return ((math.pi*(a+b))*2)\ndef circumference_of_rectangle(a,b):\n    '''\n    Write a function to find the circumference of a rectangle.\n    '''\n    return (2*a)+(2*b)\ndef circumference_of_triangle(a,b,c):\n    '''\n    Write a function to find the circumference of a triangle.\n    '''\n    return (a+b+c)\ndef circumference_of_parallelogram(a,b):\n    '''\n    Write a function to find the circumference of a parallelogram.\n    '''\n    return (a+b)\ndef circumference_of_trapezoid(a,b,h):\n    '''\n    Write a function to find the circumference of a trapezoid.\n    '''\n    return ((a+b)*h)\ndef circumference_of_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return (2*math.pi*r)\ndef circumference_of_ellipse(a,b):\n    '''\n    Write a function to find the circumference of an ellipse.\n    '''\n    return ((math.pi*(a+b))*2)\ndef circumference_of_square(side):\n    '''\n    Write a function to find the circumference of a square.\n    '''\n    return (side*4)\ndef circumference_of_rectangle(a,b):\n    '''\n    Write a function to find the circumference of a rectangle.\n    '''\n    return (2*a)+(2*b)\ndef circumference_of_triangle(a,b,c):\n    '''\n    Write a function to find the circumference of a triangle.\n    '''\n    return (a+b+c)\ndef circumference_of_trapezoid(a,b,h):\n    '''\n    Write a function to find the circumference of a trapezoid.\n    '''\n    return ((a+b)*h)\ndef surface_area_of_cube(side):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (6*(side**2))\ndef surface_area_of_pyramid(a,b,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return (6*(a*h))\ndef surface_area_of_rectangular_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return ((2*(a*b))+(2*(a*c))+(2*(b*c)))\ndef surface_area_of_rectangular_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return ((2*(a*b))+(2*(a*c))+(2*(b*c)))\ndef surface_area_of_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return ((math.pi*(r**2))+(math.pi*r*h))\ndef surface_area_of_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return ((2*math.pi*(r**2))+(2*math.pi*r*h))\ndef surface_area_of_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return ((math.pi*(r**2))+(math.pi*r*h))\ndef volume_of_cube(side):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (side**3)\ndef volume_of_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((a*b*h)/3)\ndef volume_of_rectangular_prism(a,b,c):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return (a*b*c)\ndef volume_of_triangular_prism(a,b,c):\n    '''\n    Write a function t",
        "num_ids": 7
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    b = math.sqrt(h**2 + w**2)\n    a = math.sqrt(b**2 + w**2)\n    c = math.sqrt(a**2 + h**2)\n    return [a,b,c]\n    \ndef is_isosceles(w,h):\n    '''\n    Write a function that returns True if the length of the\n    shortest side and the longest side of a triangle are equal.\n    Otherwise, return False.\n    '''\n    if w == h:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if type(w) == int and type(h) == int and w > 0 and h > 0:\n        \n        return math.sqrt((w**2) + (h**2))\n",
        "num_ids": 47
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round((math.sqrt(w**2 + h**2) + w + h)/2, 2)\n",
        "num_ids": 29
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    t = w*w + h*h\n    return math.sqrt(t)\ndef otherside_rightangle1(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    t = w*w + h*h\n    return round(math.sqrt(t),2)\ndef test_otherside_rightangle():\n    assert otherside_rightangle(3,4) == 5\n    assert otherside_rightangle(10,6) == 14\n    assert otherside_rightangle(16,20) == 32\ndef test_otherside_rightangle1():\n    assert otherside_rightangle1(3,4) == 5\n    assert otherside_rightangle1(10,6) == 14\n    assert otherside_rightangle1(16,20) == 32\ndef half_perimeter_square(a):\n    '''\n    Write a function to find the half of the perimeter of a square.\n    '''\n    return a*4\ndef half_perimeter_square1(a):\n    '''\n    Write a function to find the half of the perimeter of a square.\n    '''\n    return round(a*4,2)\ndef test_half_perimeter_square():\n    assert half_perimeter_square(10) == 20\n    assert half_perimeter_square(6) == 12\ndef test_half_perimeter_square1():\n    assert half_perimeter_square1(10) == 20\n    assert half_perimeter_square1(6) == 12\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return a*4\ndef perimeter_square1(a):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return round(a*4,2)\ndef test_perimeter_square():\n    assert perimeter_square(10) == 40\n    assert perimeter_square(6) == 24\ndef test_perimeter_square1():\n    assert perimeter_square1(10) == 40\n    assert perimeter_square1(6) == 24\ndef area_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef area_square1(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return round(a*a,2)\ndef test_area_square():\n    assert area_square(10) == 100\n    assert area_square(6) == 36\ndef test_area_square1():\n    assert area_square1(10) == 100\n    assert area_square1(6) == 36\ndef area_triangle(a,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*a*b\ndef area_triangle1(a,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return round(0.5*a*b,2)\ndef test_area_triangle():\n    assert area_triangle(10,6) == 30\n    assert area_triangle(16,20) == 96\ndef test_area_triangle1():\n    assert area_triangle1(10,6) == 30\n    assert area_triangle1(16,20) == 96\ndef area_triangle_by_sides(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    if a+b>c and b+c>a and a+c>b:\n        s=(a+b+c)/2\n        return round(math.sqrt(s*(s-a)*(s-b)*(s-c)),2)\n    else:\n        return 'I cannot determine a triangle with sides of that order'\ndef area_triangle_by_sides1(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    if a+b>c and b+c>a and a+c>b:\n        s=(a+b+c)/2\n        return round(math.sqrt(s*(s-a)*(s-b)*(s-c)),2)\n    else:\n        return 'I cannot determine a triangle with sides of that order'\ndef test_area_triangle_by_sides():\n    assert area_triangle_by_sides(10,6,17) == 21\n    assert area_triangle_by_sides(16,20,25) == 65.46\ndef test_area_triangle_by_sides1():\n    assert area_triangle_by_sides1(10,6,17) == 21\n    assert area_triangle_by_sides1(16,20,25) == 65.46\ndef area_triangle_by_sides_by_sides(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return round(math.sqrt(s*(s-a)*(s-b)*(s-c)),2)\ndef area_triangle_by_sides_by_sides1(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return round(math.sqrt(s*(s-a)*(s-b)*(s-c)),2)\ndef test_area_triangle_by_sides_by_sides():\n    assert area_triangle_by_sides_by_sides(10,6,17) == 21\n    assert area_triangle_by_sides_by_sides(16,20,25) == 65.46\ndef test_area_triangle_by_sides_by_sides1():\n    assert area_triangle_by_sides_by_sides1(10,6,17) == 21\n    assert area_triangle_by_sides_by_sides1(16,20,25) == 65.46\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return a+b+c\ndef perimeter_triangle1(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return round(a+b+c,2)\ndef test_perimeter_triangle():\n    assert perimeter_triangle(10,6,17) == 26\n    assert perimeter_triangle(16,20,25) == 60\ndef test_perimeter_triangle1():\n    assert perimeter_triangle1(10,6,17) == 26\n    assert perimeter_triangle1(16,20,25) == 60\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef area_rectangle1(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return round(a*b,2)\ndef test_area_rectangle():\n    assert area_rectangle(10,6) == 60\n    assert area_rectangle(16,20) == 400\ndef test_area_rectangle1():\n    assert area_rectangle1(10,6) == 60\n    assert area_rectangle1(16,20) == 400\ndef area_rectangle_by_sides(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef area_rectangle_by_sides1(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return round(a*b,2)\ndef test_area_rectangle_by_sides():\n    assert area_rectangle_by_sides(10,6) == 60\n    assert area_rectangle_by_sides(16,20) == 400\ndef test_area_rectangle_by_sides1():\n    assert area_rectangle_by_sides1(10,6) == 60\n    assert area_rec",
        "num_ids": 105
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w<h:\n        return math.sqrt(h**2+w**2)\n    else:\n        return math.sqrt(w**2+h**2)\n",
        "num_ids": 45
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w>=h:\n        return w**2 - h**2\n    else:\n        return h**2 - w**2\ndef rightanglediag(a,b):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==a**2+b**2\ndef rightanglediag1(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or b**2+c**2==a**2 or a**2+c**2==b**2\ndef rightanglediag2(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef find_rightangle(a,b,c):\n    '''\n    Write a function to find if a triangle is a right angled triangle.\n    '''\n    if a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2:\n        print('True')\n    else:\n        print('False')\ndef rightanglediag3(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag4(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef find_rightangle1(a,b,c):\n    '''\n    Write a function to find if a triangle is a right angled triangle.\n    '''\n    if a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2:\n        print('True')\n    else:\n        print('False')\ndef rightanglediag5(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag6(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag7(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag8(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag9(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag10(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag11(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag12(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag13(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag14(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag15(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag16(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag17(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag18(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag19(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag20(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag21(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag22(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**2+b**2==c**2 or a**2+c**2==b**2 or c**2+b**2==a**2\ndef rightanglediag23(a,b,c):\n    '''\n    Write a function to return if a right angled triangle is possible or not.\n    '''\n    return a**",
        "num_ids": 6
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\n",
        "num_ids": 12
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the variable to store the max value\n    max_val = 0\n    # Get the max value of the list\n    for i in range(len(listval)):\n        if type(listval[i]) == list:\n            if max_val < max_val(listval[i]):\n                max_val = max_val(listval[i])\n        else:\n            if max_val < listval[i]:\n                max_val = listval[i]\n    # Return the max value\n    return max_val\n",
        "num_ids": 129
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxv = listval[0]\n    for i in listval:\n        if i > maxv:\n            maxv = i\n    return maxv\n",
        "num_ids": 39
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    print(f'Max Val: {max(listval)}')\n    return max(listval)\n",
        "num_ids": 26
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for item in listval:\n        if item > max_val:\n            max_val = item\n    return max_val\n",
        "num_ids": 43
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for item in listval:\n        if item > max_num:\n            max_num = item\n    return max_num\n",
        "num_ids": 43
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # result = 0\n    # for val in listval:\n    #     if type(val) == int:\n    #         if val > result:\n    #             result = val\n    #     elif type(val) == str:\n    #         if val > result:\n    #             result = val\n    #     elif type(val) == float:\n    #         if val > result:\n    #             result = val\n    #     else:\n    #         continue\n    # return result\n",
        "num_ids": 119
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max=0\n    for i in listval:\n        if type(i)==int and i>max:\n            max=i\n    return max\n",
        "num_ids": 38
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    ",
        "num_ids": 11
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maximum = None\n    for i in listval:\n        if maximum == None:\n            maximum = i\n        elif i > maximum:\n            maximum = i\n    return maximum\n",
        "num_ids": 44
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n",
        "num_ids": 56
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 1\n    for i in range(2,int(number**0.5)+1):\n        if number % i == 0:\n            s += i\n            s += number//i\n    if number**0.5 == int(number**0.5):\n        s -= number**0.5\n    return s\n",
        "num_ids": 77
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 1\n    for i in range(2, number):\n        if number % i == 0:\n            total += i\n    return total\n",
        "num_ids": 36
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for num in range(1,number):\n        if number % num == 0:\n            divisors.append(num)\n    return sum(divisors)\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    for i in range(1, number + 1):\n        if (number % i == 0):\n            result += i\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [i for i in range(1, number + 1) if number % i == 0]\n    return sum(divisors)\n    \n    \ndef find_triples(number):\n    '''\n    Write a function to return the number of Pythagorean triples for which a + b + c = 1000.\n    '''\n    max_value = 1000\n    triples = []\n    \n    for a in range(1, max_value):\n        for b in range(a + 1, max_value):\n            c = (a ** 2 + b ** 2) ** 0.5\n            if c.is_integer() and a + b + c == max_value:\n                triples.append([a, b, int(c)])\n    return triples\n    \n    \ndef is_prime(number):\n    '''\n    Write a function to return the smallest prime factor of a number.\n    '''\n    if number < 2:\n        return \"That number is not prime\"\n        \n    for i in range(2, number):\n        if number % i == 0:\n            return i\n            \n    return number\n    \n    \ndef main():\n    number = 1000\n    print(\"The sum of all divisors of {} is {}\".format(number, sum_div(number)))\n    print(\"The number of Pythagorean triples for which a + b + c = {} is {}\".format(number, len(find_triples(number))))\n    print(\"The smallest prime factor of {} is {}\".format(number, is_prime(number)))\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 166
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number):\n        if number%i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for num in range(1, number):\n        if number % num == 0:\n            total = total + num\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            divisor_sum = divisor_sum + i\n    return divisor_sum\n",
        "num_ids": 54
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for x in range(1, number):\n        if number % x == 0:\n            divisors.append(x)\n    return sum(divisors)\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for x in range(1, number + 1):\n        if number % x == 0:\n            div_sum += x\n    return div_sum\n",
        "num_ids": 44
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return _merge_count(arr)\n",
        "num_ids": 13
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    def merge(arr, start, mid, end): \n        left = arr[start:mid]\n        right = arr[mid:end]\n        k = start\n        i = 0\n        j = 0\n        inversions = 0\n        while(i < len(left) and j < len(right)): \n            if(left[i] <= right[j]): \n                arr[k] = left[i] \n                i += 1\n            else: \n                arr[k] = right[j] \n                j += 1\n                inversions += (mid - start) \n                k += 1\n        while(i < len(left)): \n            arr[k] = left[i] \n            i += 1\n            k += 1\n        while(j < len(right)): \n            arr[k] = right[j] \n            j += 1\n            k += 1\n        return inversions \n    \n    def merge_sort(arr, start, end): \n        if(start < end): \n            mid = int((start + end) / 2)\n            inversions = merge_sort(arr, start, mid) \n            inversions += merge_sort(arr, mid + 1, end) \n            inversions += merge(arr, start, mid + 1, end) \n            return inversions \n        return 0\n    \n    return merge_sort(arr, 0, len(arr))\n    \narr = [3, 4, 2, 1]\nprint(get_Inv_Count(arr))\n",
        "num_ids": 364
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                ans += 1\n    return ans\n",
        "num_ids": 56
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr, 0\n    else:\n        mid = n // 2\n        left, left_count = get_Inv_Count(arr[:mid])\n        right, right_count = get_Inv_Count(arr[mid:])\n        merged, merged_count = merge_Inv_Count(left, right)\n        return merged, left_count + right_count + merged_count\n    \ndef merge_Inv_Count(left, right):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    i, j = 0, 0\n    inversions = 0\n    merged = []\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n            inversions += len(left) - i\n    merged += left[i:]\n    merged += right[j:]\n    return merged, inversions\n",
        "num_ids": 123
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inversions = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return inversions\ndef test_get_Inv_Count():\n    print(\"\\n\")\n    arr = [1, 2, 3, 4, 5]\n    print(\"Array to be tested: {}\".format(arr))\n    print(\"Result: {}\".format(get_Inv_Count(arr)))\n    arr = [1, 2, 3, 4, 5, 6]\n    print(\"Array to be tested: {}\".format(arr))\n    print(\"Result: {}\".format(get_Inv_Count(arr)))\n    arr = [1, 4, 2, 3, 5, 6]\n    print(\"Array to be tested: {}\".format(arr))\n    print(\"Result: {}\".format(get_Inv_Count(arr)))\n    arr = [3, 2, 1, 4, 5, 6]\n    print(\"Array to be tested: {}\".format(arr))\n    print(\"Result: {}\".format(get_Inv_Count(arr)))\ntest_get_Inv_Count()\n",
        "num_ids": 285
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "num_ids": 64
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    return merge_count_inversions(arr,0,n-1)\n",
        "num_ids": 28
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return count_inversions(arr, 0, len(arr)-1)\n",
        "num_ids": 20
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return merge_count(arr, [0] * len(arr), 0, len(arr)-1)\n",
        "num_ids": 27
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
        "num_ids": 73
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n",
        "num_ids": 19
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list=[]\n    for sub_list in list1:\n        for item in sub_list:\n            new_list.append(item)\n    return new_list\n",
        "num_ids": 44
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    print(\"\\n\\n======================\\nQuestion 3.1\")\n    print(\"\\n\\nList 1 =\", list1)\n    print(\"\\n\\nThe flatten list is:\", flatten_list(list1))\n",
        "num_ids": 57
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return sum(list1,[])\n",
        "num_ids": 11
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    # Check for empty lists\n    if len(list1) == 0:\n        return []\n        \n    # Check for single element list\n    if len(list1) == 1:\n        return list1[0]\n        \n    else:\n        flat = []\n        \n        for ele in list1:\n            # If element is a list\n            if isinstance(ele, list):\n                flat += flatten_list(ele)\n            else:\n                flat.append(ele)\n        return flat\n",
        "num_ids": 121
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for sublist in list1:\n        if type(sublist) == list:\n            flat_list += flatten_list(sublist)\n        else:\n            flat_list.append(sublist)\n    return flat_list\n",
        "num_ids": 64
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [element for inner_list in list1 for element in inner_list]\n",
        "num_ids": 21
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Initialize empty list\n    list2 = []\n    # For each element in the list\n    for item in list1:\n        # If the element is an iterable, call the function again\n        if isinstance(item, Iterable):\n            list2.extend(flatten_list(item))\n        # Else, append the element to the list\n        else:\n            list2.append(item)\n    # Return the list\n    return list2\n",
        "num_ids": 108
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    l = []\n    for i in list1:\n        if isinstance(i, (list, tuple)):\n            l.extend(flatten_list(i))\n        else:\n            l.append(i)\n    return l\n",
        "num_ids": 59
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = defaultdict(int)\n    for data in stdata:\n        for key, value in data.items():\n            max_aggregate[key] += value\n    return max_aggregate\n",
        "num_ids": 51
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = defaultdict(list)\n    for d in stdata:\n        stdata[d[0]].append(d[1])\n    return max(stdata.values())\n",
        "num_ids": 46
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    print(stdata)\n    \n    stdata=sorted(stdata, key=lambda tup: tup[2])\n    print(stdata)\n    \n    aggr=defaultdict(int)\n    for i in stdata:\n        if i[1] not in aggr:\n            aggr[i[1]]=i[2]\n        else:\n            aggr[i[1]]+=i[2]\n    print(aggr)\n    \n    aggr=sorted(aggr.items(), key=lambda x: x[1], reverse=True)\n    print(aggr)\n    \n    print(\"Maximum Aggregate :\",aggr[0][1])\n",
        "num_ids": 164
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # converting to list\n    stdata = list(stdata)\n    # selecting sum\n    stdata.sort(key = lambda x: x[1])\n    print(stdata)\n    return sum(stdata[-1][1])\n",
        "num_ids": 59
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    sum = 0\n    for x in stdata:\n        sum = x[1] + sum\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    list_of_tups=stdata\n    sorted_tups=sorted(list_of_tups,key=lambda x: x[0])\n    grouped_tups=defaultdict(list)\n    for key, group in itertools.groupby(sorted_tups,lambda x: x[0]):\n        grouped_tups[key].append(list(group))\n    sorted_tups=[]\n    for key in grouped_tups.keys():\n        sorted_tups.append([key]+[max([i[1] for i in x]) for x in grouped_tups[key]])\n    return sorted_tups\n",
        "num_ids": 160
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for row in stdata:\n        for elem in row:\n            d[elem] += 1\n    return max(d.values())\n",
        "num_ids": 45
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # First, we'll loop through the list of tuples and create a dictionary.\n    # The keys will be the month and the values will be a list of the data for that month.\n    stdata = {'jan':[], 'feb':[],'march':[], 'april':[],'may':[], 'june':[], 'july':[], 'august':[],'sept':[], 'oct':[], 'nov':[], 'dec':[]}\n    for item in stdata:\n        stdata[item] = item\n    # Now we'll add the data for each month into the dictionary.\n    for item in stdata:\n        for x in range(1, 13):\n            if x == 1:\n                stdata[item].append(stdata[item][x-1] + stdata[item][x])\n            elif x < 10:\n                stdata[item].append(stdata[item][x-1] + stdata[item][x])\n            else:\n                stdata[item].append(stdata[item][x-1])\n    # Now we'll calculate the maximum aggregate.\n    max_aggregate = 0\n    for item in stdata:\n        if max(stdata[item]) > max_aggregate:\n            max_aggregate = max(stdata[item])\n    return max_aggregate\n",
        "num_ids": 319
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #count = 0\n    #for i in stdata:\n    #    count += i[2]\n    #return count\n    #print(stdata)\n    d = defaultdict(list)\n    print(d)\n    for i in stdata:\n        d[i[0]].append(i[1])\n        #print(d)\n    return d\n",
        "num_ids": 89
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    def compute_agg(n, k):\n        if k==0:\n            return n\n        if k>0:\n            return max(compute_agg(n,k-1),n+compute_agg(n,k-1))\n",
        "num_ids": 60
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return count_binary_seq(n-1)+count_binary_seq(n-1)\n",
        "num_ids": 52
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # base cases \n    if (n == 0): \n        return 1\n    if (n == 1): \n        return 2\n",
        "num_ids": 34
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    total = 0\n    for i in range(2**n):\n        for j in range(i+1):\n            if (i >> j) % 2 == (i >> (n-j)) % 2:\n                total += 1\n    return total\n",
        "num_ids": 60
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    seq=[]\n    for i in range(2**(2*n)):\n        seq.append(i)\n    return seq\n",
        "num_ids": 34
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2 ** (n * 2)\n",
        "num_ids": 12
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_combination(n,k):\n        return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n    return count_combination(2*n, n)\n",
        "num_ids": 57
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return int((2 ** (2 * n)) / 2)\n",
        "num_ids": 17
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    p = []\n    for i in range(1, 2**n+1): \n        s = str(bin(i))[2:] \n        l = len(s)\n        if (l % 2 == 0): \n            # Number of 1s is even, so it is possible \n            # that last n bits sum is equal to first n bits sum. \n            s1 = s[:l>>1] \n            s2 = s[l>>1:] \n            if ((sum(map(int, list(s1))) == sum(map(int, list(s2))))): \n                p.append(s)\n    return p\n",
        "num_ids": 154
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    for i in range(1,2**(2*n)):\n        first_sum = 0\n        last_sum = 0\n        a = bin(i)[2:]\n        b = a[:n]\n        c = a[n:]\n        for j in b:\n            if j == \"1\":\n                first_sum += 1\n        for k in c:\n            if k == \"1\":\n                last_sum += 1\n        if first_sum == last_sum:\n            print(first_sum, last_sum, a)\n",
        "num_ids": 129
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    ans = 0\n    for i in range(2 ** n):\n        s1 = sum([int(k) for k in list(bin(i)[2:].zfill(n))])\n        s2 = sum([int(k) for k in list(bin(i)[2:].zfill(n))[::-1]])\n        if s1 == s2:\n            ans += 1\n    return ans\n",
        "num_ids": 99
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        if len(d) == 1:\n            return 1\n        else:\n            return 1 + max([dict_depth(v) for v in d.values()])\n    return 0\n",
        "num_ids": 55
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def helper(d,depth=0):\n        for key,value in d.items():\n            if type(value) is dict:\n                depth = max(depth,helper(value,depth+1))\n            else:\n                return depth\n        return depth\n",
        "num_ids": 63
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        depth = 0\n        for key in d:\n            if type(d[key]) is dict:\n                depth += dict_depth(d[key])\n            else:\n                depth += 1\n        return depth\n    else:\n        return 1\n",
        "num_ids": 69
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    else:\n        return max(map(dict_depth, d.values())) + 1\n",
        "num_ids": 35
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    while True:\n        count += 1\n        if type(d) is dict:\n            if type(d[list(d)[0]]) is dict:\n                d = d[list(d)[0]]\n            elif type(d[list(d)[0]]) is list:\n                d = d[list(d)[0]]\n            else:\n                break\n        else:\n            break\n    return count\n",
        "num_ids": 104
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n",
        "num_ids": 41
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + max(map(dict_depth, d.values())) if isinstance(d, dict) else 0\n",
        "num_ids": 30
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n    max_depth = 0\n    for key in d.keys():\n        cur_depth = dict_depth(d[key])\n        if cur_depth > max_depth:\n            max_depth = cur_depth\n    return max_depth + 1\n",
        "num_ids": 74
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index,len(ranges)) :\n        if ranges[i] < ranges[index] and rotations > 0 :\n            return find_Element(arr,ranges,rotations-1,i)\n        elif ranges[i] >= ranges[index] and rotations > 0 :\n            return find_Element(arr,ranges,rotations-1,i)\n    return ranges[index]\n    \nif __name__ == '__main__' :\n    arr = [1,5,4,1,3,4,5,9]\n    ranges = [1,1,2,3,4,5,6,7,8,9]\n    rotations = 2\n    print(find_Element(arr,ranges,rotations,8))\n    \n    \n    ",
        "num_ids": 189
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #m = max(ranges)\n    #index = index%(m)\n    max_range = max(ranges)\n    max_range = max_range+1\n",
        "num_ids": 44
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # code here\n    return arr[index-ranges]\n",
        "num_ids": 17
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count=0\n    for i in range(len(arr)):\n        if i+1 in ranges[index+1][0]:\n            if count==ranges[index+1][1]:\n                return arr[i]\n            count=count+1\n        else:\n            return -1\n    \n    \nif __name__ == \"__main__\":\n    # Use the main function here to test out your implementation \n    arr = [11, 12, 15, 26, 38]\n    ranges = [[2, 4], [4, 6]]\n    rotations = 3\n    print(find_Element(arr,ranges,rotations,0)",
        "num_ids": 153
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index > len(ranges) :\n        print(\"Invalid Index\")\n    else :\n        num_rotations = 0\n        while(True) :\n            if (arr[ranges[index]] == 0 and ranges[index] == index) :\n                return num_rotations\n            num_rotations = num_rotations + 1\n            ranges[index] = ranges[index] + num_rotations\n            if ranges[index] == len(arr) :\n                ranges[index] = 0\n            if arr[ranges[index]] == 0 :\n                ranges[index] = index\n",
        "num_ids": 142
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Your code here\n    new_ranges = []\n    for i in ranges :\n        temp = []\n        for j in i :\n            temp.append(j+index)\n        new_ranges.append(temp)\n    for i in new_ranges :\n        for j in range(0,len(i)) :\n            if i[j]>=len(arr) :\n                i[j] = i[j]-len(arr)\n    result = []\n    for i in new_ranges :\n        temp = []\n        for j in i :\n            temp.append(arr[j])\n        result.append(temp)\n    for i in result :\n        for j in range(0,len(i)) :\n            if i[j]!=0 :\n                if i[j] in rotations :\n                    index = rotations.index(i[j])\n                    index += 1\n                    index %= len(rotations)\n                    i[j] = rotations[index]\n    for i in result :\n        for j in range(0,len(i)) :\n            if i[j] in rotations :\n                index = rotations.index(i[j])\n                index += 1\n                index %= len(rotations)\n                i[j] = rotations[index]\n    for i in result :\n        for j in range(0,len(i)) :\n            if i[j] in rotations :\n                index = rotations.index(i[j])\n                index += 1\n                index %= len(rotations)\n                i[j] = rotations[index]\n    return result\n",
        "num_ids": 385
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index==0) :\n        return arr[ranges[0]]\n    elif(index>=1) :\n        for i in range(rotations) :\n            if(index>=1) :\n                arr.append(arr[len(arr)-ranges[0]])\n            index=index-1\n        return arr[ranges[0]]\n        \n    \ndef main():\n    arr=[1,2,3,4]\n    ranges=[0,3,0,2]\n    rotations=1\n    index=2\n    print(find_Element(arr,ranges,rotations,index))\n    \nif __name__=='__main__':\n    main()",
        "num_ids": 166
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index<0 or index>len(arr)-1:\n        return -1\n    for i in range(ranges) :\n        temp = arr[index]\n        index=index+rotations\n        arr[index]=temp\n    return arr[index]\n",
        "num_ids": 63
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    def find_Element(arr,ranges,rotations,index):\n        # write your code here\n        if index<0 :\n            return -1\n        index%=len(arr)\n        for i in range(ranges) :\n            index += rotations\n            index %= len(arr)\n        return arr[index]\n    if __name__ == '__main__':\n            \n        arr=[1,2,3,4,5,6,7,8]\n        ranges=2\n        rotations=2\n        index=2\n        print(find_Element(arr,ranges,rotations,index))\n        \n        \n    '''\n    Write a Python program to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0). \n    '''\n    def Sum_of_N_num(n):\n        # write your code here\n        arr=[]\n        sum = 0\n        for i in range(1,n+1):\n            arr.append(i)\n        while len(arr)>1:\n            arr=arr[1:]\n            sum+=arr[0]\n        return sum\n    if __name__ == '__main__':\n            \n        n = 5\n        print(Sum_of_N_num(n))\n        \n        \n    '''\n    Write a Python function to find the nth digit of a number.\n    '''\n    def nth_digit(n):\n        # write your code here\n        arr=[1,2,3,4,5,6,7,8,9]\n        n=arr[n%len(arr)]\n        return n\n    if __name__ == '__main__':\n            \n        n = 4\n        print(nth_digit(n))\n    '''\n    Write a Python program to create a lambda function that adds 15 to a given number passed in as an argument, \n    also create a lambda function that multiplies argument x with argument y and print the result.\n    '''\n    def lambda_function(x,y):\n        return lambda a : a+15, lambda a : a*y\n    \n    if __name__ == '__main__':\n        n = 10\n        lam_add,lam_mul=lambda_function(n,n)\n        print(lam_add(n))\n        print(lam_mul(n))\n    '''\n    Write a Python program to filter a list of integers using Lambda. \n    Original list of numbers:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    Filter the above list of integers with Lambda to even numbers.\n    Expected Output:\n    [2, 4, 6, 8, 10]\n    '''\n    def even(arr):\n        # write your code here\n        evens=[]\n        for i in arr:\n            if i%2==0:\n                evens.append(i)\n        return evens\n    if __name__ == '__main__':\n            \n        arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        print(even(arr))\n    \n    '''\n    Write a Python program to square and cube every number in a given list of integers using Lambda. \n    Original list of integers:\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    Square every number of the said list:\n    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    Cube every number of the said list:\n    [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    '''\n    def square(arr):\n        return lambda a:a*a\n    def cube(arr):\n        return lambda a:a*a*a\n    def my_map(func,arr):\n        new_arr=[]\n        for i in arr:\n            new_arr.append(func(i))\n        return new_arr\n    if __name__ == '__main__':\n            \n        arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        print(my_map(square,arr))\n        print(my_map(cube,arr))\n    '''\n    Write a Python program to find if a given string starts with a given character using Lambda.\n    '''\n    def check_start_with(st,ch):\n        return lambda a : a.startswith(ch)\n    if __name__ == '__main__':\n            \n        st=\"Python\"\n        ch=\"p\"\n        print(check_start_with(st,ch)(st))\n    \n    '''\n    Write a Python program to extract year, month and date from a an url.\n    '''\n    from urllib.request import urlopen\n    def extract_date(url):\n        # write your code here\n        my_url = urlopen(url)\n        date = my_url.info()\n        date=date.get('date')\n        return date[4:]\n    \n    if __name__ == '__main__':\n        url = 'http://py4e-data.dr-chuck.net/comments_42.html'\n        print(extract_date(url))\n        \n        '''\n    Write a Python program to solve (x + y) * (x + y). \n    Given x = 4, y = 3, solve for x + y.\n    '''\n    def solve(x,y):\n        # write your code here\n        return lambda a : x+y\n    if __name__ == '__main__':\n        x = 4\n        y = 3\n        print(solve(x,y))\n        \n        '''\n    Write a Python program to solve (x ^ y) % z.\n    Given x = 4, y = 3, z = 17, solve for x ^ y % z.\n    '''\n    def solve(x,y,z):\n        # write your code here\n        return lambda a : (x**y)%z\n    if __name__ == '__main__':\n        x = 4\n        y = 3\n        z = 17\n        print(solve(x,y,z))\n        \n        '''\n    Write a Python program to create Fibonacci series upto n using Lambda.\n    Original series:\n    0, 1, 1, 2, 3, 5, 8, 13, 21,....\n    Fibonacci series upto n:\n    0, 1, 1, 2, 3, 5, 8, 13, 21,....\n    '''\n    def fibonacci(n):\n        # write your code here\n        arr=[0,1]\n        for i in range(2,n):\n            arr.append(arr[i-1]+arr[i-2])\n        return lambda a : arr[a]\n    if __name__ == '__main__':\n        n = 10\n        print(fibonacci(n))\n        \n        \n        '''\n    Write a Python program to find whether a given number (accept from the user) is even or odd, \n    print out an appropriate message to the user.\n    '''\n    def even_odd(n):\n        # write your code here\n        return lambda a : 'Even' if a%2==0 else 'Odd'\n    if __name__ == '__main__':\n        num = int(input(\"Enter a number: \"))\n        print(even_odd(num))\n        \n        \n    '''\n    Write a Python program to count the even numbers in a given list of integers using Lambda.\n    '''\n    def even(nums):\n        return lambda a : a if a%2==0 else None\n    if __name__ == '__main__':\n        nums = [1,2,3,4,5,6,7,8,9]\n        print(even(nums))\n        \n        '''\n    Write a Python program to find the even numbers in a given list of integers using Lambda.\n    '''\n    def even(nums):\n        return lambda a : a if a%2==0 else None\n    if __name__ == '__main__':\n        nums = [1,2,3,4,5,6,7,8,9]\n        print(list(filter(even(nums),nums)))\n        \n        '''\n    Write a Python program to double each item in ",
        "num_ids": 13
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #print(arr)\n    for i in range(ranges):\n        rotations = rotations % len(arr)\n        #print(rotations)\n        temp = arr[0]\n        for j in range(len(arr)-1):\n            arr[j] = arr[j+1]\n        arr[len(arr)-1] = temp\n    return arr[index]\n",
        "num_ids": 92
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #return [match[0] for match in re.findall('^p.+? ',''.join(words))]\n    words = words.split()\n    return re.findall('^p.+? ',''.join(words))\n",
        "num_ids": 60
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = []\n    for word in words:\n        if word[0] == \"p\" or word[0] == \"P\":\n            p.append(word)\n    return p",
        "num_ids": 45
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [words[0], words[1]] if words[0][0] == 'p' and words[1][0] == 'p' else None\n",
        "num_ids": 38
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # words = ['Cats', 'Pants', 'Paper', 'Parrot']\n    new_words = []\n    for word in words:\n        if re.search(r'^p\\w+', word):\n            new_words.append(word)\n    return new_words\n",
        "num_ids": 69
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # start_withp=[]\n    # for word in words:\n    #     if word.startswith(\"p\"):\n    #         start_withp.append(word)\n    # return start_withp\n    return [word for word in words if word.startswith(\"p\")]\n",
        "num_ids": 73
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    first_word = []\n    second_word = []\n    for word in words:\n        if word[0] == 'p':\n            first_word.append(word)\n    if first_word:\n        for word in first_word:\n            if word[1] == 'l' or word[1] == 'o':\n                second_word.append(word)\n    return second_word\n",
        "num_ids": 96
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0,len(words)):\n        if re.match(\"p[a-zA-Z]+\",words[i]):\n            return words[i]\nstart_withp([\"dog\",\"zoo\",\"chicken\",\"pen\"])",
        "num_ids": 62
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            print(word)\n",
        "num_ids": 27
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # if the length of the list is less than 2 return none\n    if len(words) < 2:\n        return None\n    # return the first and second word\n    else:\n        return [words[0], words[1]]\n",
        "num_ids": 56
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global res\n    if k > n:\n        return\n    if index == n:\n        if res < a[n - 1]:\n            res = a[n - 1]\n        return\n    if a[index] < a[n - 1]:\n        max_sum_increasing_subseq(a, n, index + 1, k)\n    max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    return\n",
        "num_ids": 108
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if index == n:\n        return 0\n    \n    if k <= index:\n        return max(a[k] + max_sum_increasing_subseq(a, n, index+1, k),\n                max_sum_increasing_subseq(a, n, index+1, k+1))\n    \n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n",
        "num_ids": 104
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > index:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return a[0]\n    if n < index:\n        return -1\n    max_sum = a[index]\n    for i in range(index - 1, -1, -1):\n        if a[i] < a[index] and max_sum < max_sum_increasing_subseq(a, n, i, k) + a[index]:\n            max_sum = max_sum_increasing_subseq(a, n, i, k) + a[index]\n    return max_sum\n",
        "num_ids": 128
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n    max_sum = 0\n    for i in range(1, n+1):\n        if i > k:\n            break\n        if a[i-1] < a[n-i+index+1]:\n            temp = max_sum_increasing_subseq(a, n-i, index, k)\n            if temp >= max_sum:\n                max_sum = temp\n    if k <= index:\n        temp = max_sum_increasing_subseq(a, n-1, index+1, k)\n        if temp >= max_sum:\n            max_sum = temp\n    return max_sum\n",
        "num_ids": 156
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return float('-inf')\n    if k == n:\n        return a[k - 1]\n    if index >= n:\n        return float('-inf')\n    if k == index:\n        return a[k]\n",
        "num_ids": 62
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return float('-inf')\n    s = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    for i in range(1, k+1):\n        s[i][0] = float('-inf')\n    for j in range(1, n+1):\n        for i in range(1, k+1):\n            if j > i:\n                s[i][j] = s[i-1][j]\n            elif j == i:\n                s[i][j] = s[i-1][j] + a[j-1]\n            else:\n                s[i][j] = max(s[i-1][j], s[i-1][j-1] + a[j-1])\n    return s[k][n]\n",
        "num_ids": 199
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # DP[i][j] = (i, j) as key and sum of prefix until i-1 with the kth element i.e. j\n    DP = {}\n    max_sum = 0\n    for i in range(n):\n        for j in range(i, k):\n            if i == j:\n                DP[(i,j)] = a[j]\n                max_sum = max(max_sum, DP[(i,j)])\n            elif j == i + 1:\n                DP[(i,j)] = a[i]\n            else:\n                DP[(i,j)] = max(DP[(i,j-1)], a[j])\n            max_sum = max(max_sum, DP[(i,j)])\n    return max_sum\n",
        "num_ids": 190
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # print(a, n, index, k)\n    # return 0\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], dp[i - 1] + a[i])\n    print(dp)\n    print('---')\n    # dp[i] = max(dp[i - 1], dp[i - 1] + a[i])\n    if k == 2:\n        return dp[index]\n    for i in range(k, n):\n        dp[i] = max(dp[i], dp[i - 1])\n        if i >= index:\n            dp[i] = max(dp[i], dp[i - 1] + a[i])\n    print(dp)\n    return dp[k - 1]\n",
        "num_ids": 213
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [[0 for x in range(k+1)] for y in range(n)]\n    for i in range(n):\n        dp[i][1] = a[i]\n    max_sum = 0\n    for i in range(k+1):\n        dp[0][i] = a[0]\n        max_sum = max(max_sum, dp[0][i])\n    for i in range(1, n):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j-1] + a[i]\n            max_sum = max(max_sum, dp[i][j])\n    return max_sum\n",
        "num_ids": 170
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    temp_tuple = ()\n    for x in range(m,n+1):\n        temp_tuple = temp_tuple + (tuplex[x],)\n    return temp_tuple\n",
        "num_ids": 50
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_length = len(tuplex)\n    new_tuplex = []\n    for i in range(tuplex_length):\n        new_tuplex.append(tuplex[i][0:m])\n    for i in range(m+n,m*n):\n        new_tuplex.append(tuplex[i][0:n])\n    return new_tuplex\n",
        "num_ids": 101
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = tuplex[:m] + (tuplex[m] + 1,) + tuplex[m+1:n] + (tuplex[n] + 1,) + tuplex[n+1:]\n    return tuplex\n",
        "num_ids": 63
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(n):\n        tuplex.append(None)\n    while True:\n        for i in range(len(tuplex)):\n            if tuplex[i] is None:\n                return tuplex[:i] + (m,) + tuplex[i:]\ndef slide_copy(tuplex,n):\n    '''\n    Write a function to slide a tuple of size n.\n    '''\n    if len(tuplex) > n:\n        while len(tuplex) > n:\n            tuplex = tuplex[1:]\n    return tuplex\ndef get_colon_tuple_count(colon_tuple,n):\n    '''\n    Write a function to get the count of the colon tuple with a given number of elements.\n    '''\n    counter = 0\n    for i in range(len(colon_tuple)):\n        if colon_tuple[i] == n:\n            counter += 1\n    return counter\ndef get_min_colon_tuple_count(colon_tuple,n):\n    '''\n    Write a function to get the minimum number of elements of a colon tuple with a given number of elements.\n    '''\n    min_counter = 0\n    for i in range(len(colon_tuple)):\n        if colon_tuple[i] >= n and colon_tuple[i] is not None:\n            min_counter = colon_tuple[i]\n    return min_counter\ndef get_max_colon_tuple_count(colon_tuple,n):\n    '''\n    Write a function to get the maximum number of elements of a colon tuple with a given number of elements.\n    '''\n    max_counter = 0\n    for i in range(len(colon_tuple)):\n        if colon_tuple[i] >= n and colon_tuple[i] is not None:\n            max_counter = colon_tuple[i]\n    return max_counter\ndef get_all_colon_tuple_count(colon_tuple,n):\n    '''\n    Write a function to get all colon tuples with a given number of elements.\n    '''\n    counter = 0\n    for i in range(len(colon_tuple)):\n        if colon_tuple[i] == n:\n            counter += 1\n    return counter\ndef get_tuple_index(tuplex,n):\n    '''\n    Write a function to get the index of the colon tuple with a given number of elements.\n    '''\n    counter = 0\n    for i in range(len(tuplex)):\n        if tuplex[i] == n:\n            counter += 1\n    return counter\ndef get_all_colon_tuple_indices(tuplex,n):\n    '''\n    Write a function to get all colon tuples with a given number of elements.\n    '''\n    indices = []\n    for i in range(len(tuplex)):\n        if tuplex[i] == n:\n            indices.append(i)\n    return indices\ndef get_all_colon_tuple_combinations(tuplex,n):\n    '''\n    Write a function to get all colon tuples with a given number of elements.\n    '''\n    combinations = []\n    for i in range(len(tuplex)):\n        if tuplex[i] == n:\n            combinations.append(slide_copy(tuplex,i))\n    return combinations\ndef get_combination_index(tuplex,n):\n    '''\n    Write a function to get the index of the combination tuple with a given number of elements.\n    '''\n    counter = 0\n    for i in range(len(tuplex)):\n        if tuplex[i] >= n:\n            counter += 1\n    return counter\ndef get_all_combination_indices(tuplex,n):\n    '''\n    Write a function to get all combination tuples with a given number of elements.\n    '''\n    indices = []\n    for i in range(len(tuplex)):\n        if tuplex[i] >= n:\n            indices.append(i)\n    return indices\ndef get_combination_count(combination_tuple,n):\n    '''\n    Write a function to get the count of the combination tuple with a given number of elements.\n    '''\n    counter = 0\n    for i in range(len(combination_tuple)):\n        if combination_tuple[i] == n:\n            counter += 1\n    return counter\ndef get_min_combination_count(combination_tuple,n):\n    '''\n    Write a function to get the minimum number of elements of a combination tuple with a given number of elements.\n    '''\n    min_counter = 0\n    for i in range(len(combination_tuple)):\n        if combination_tuple[i] >= n and combination_tuple[i] is not None:\n            min_counter = combination_tuple[i]\n    return min_counter\ndef get_max_combination_count(combination_tuple,n):\n    '''\n    Write a function to get the maximum number of elements of a combination tuple with a given number of elements.\n    '''\n    max_counter = 0\n    for i in range(len(combination_tuple)):\n        if combination_tuple[i] >= n and combination_tuple[i] is not None:\n            max_counter = combination_tuple[i]\n    return max_counter\ndef get_all_combination_count(combination_tuple,n):\n    '''\n    Write a function to get all combination tuples with a given number of elements.\n    '''\n    counter = 0\n    for i in range(len(combination_tuple)):\n        if combination_tuple[i] == n:\n            counter += 1\n    return counter\ndef get_all_combinations_from_tuple(tuplex,n):\n    '''\n    Write a function to get all combination tuples with a given number of elements.\n    '''\n    combinations = []\n    for i in range(len(tuplex)):\n        if tuplex[i] >= n:\n            combinations.append(slide_copy(tuplex,i))\n    return combinations\ndef get_all_combinations_from_tuple_index(tuplex,n):\n    '''\n    Write a function to get all combination tuples with a given number of elements.\n    '''\n    combinations = []\n    for i in range(len(tuplex)):\n        if tuplex[i] >= n:\n            combinations.append(slide_copy(tuplex,i))\n    return combinations\ndef get_tuple_index_greater_equal(tuplex,n):\n    '''\n    Write a function to get the index of the colon tuple with a given number of elements.\n    '''\n    counter = 0\n    for i in range(len(tuplex)):\n        if tuplex[i] >= n:\n            counter += 1\n    return counter\ndef get_all_greater_tuple_indices(tuplex,n):\n    '''\n    Write a function to get all colon tuples with a given number of elements.\n    '''\n    indices = []\n    for i in range(len(tuplex)):\n        if tuplex[i] >= n:\n            indices.append(i)\n    return indices\ndef get_colon_tuple_count_greater_equal(colon_tuple,n):\n    '''\n    Write a function to get the count of the colon tuple with a given number of elements.\n    '''\n    counter = 0\n    for i in range(len(colon_tuple)):\n        if colon_tuple[i] >= n and colon_tuple[i] is not None:\n            counter += 1\n    return counter\ndef get_all_greater_colon_tuple_count(colon_tuple,n):\n    '''\n    Write a function to get all colon tuples with a given number of elements.\n    '''\n    greater_counter = []\n    for i in range(len(colon_tuple)):\n        if colon_tuple[i] >= n and colon_tuple[i",
        "num_ids": 44
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_list=list(tuplex)\n    tuplex_list.insert(m+1,n)\n    tuplex_list.insert(m,\":\")\n    new_tuplex=''.join(tuplex_list)\n    return new_tuplex\n",
        "num_ids": 71
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_2=tuple(tuplex)\n    tuplex_2_len=len(tuplex_2)\n    tuplex_2_new=[]\n    tuplex_2_new_len=tuplex_2_len-n+1\n    for i in range(tuplex_2_new_len):\n        tuplex_2_new.append(tuplex_2[i:i+n])\n    return tuple(tuplex_2_new)\n",
        "num_ids": 123
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = tuplex[1:m+1] + (n,)\n    return(tuplex)\n",
        "num_ids": 30
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    list=[]\n    for i in range(m,n):\n        list.append(tuplex[i])\n    tuplex=tuple(list)\n    return tuplex\n",
        "num_ids": 47
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # m is the index of row, n is the index of column.\n    # return a tuple.\n    temp = []\n    for j in range(len(tuplex)):\n        temp.append(tuplex[j][n])\n    return tuple(temp)\n",
        "num_ids": 66
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a = [i for i in tuplex]\n    a.append(m)\n    a.append(n)\n    return tuple(a)\n",
        "num_ids": 38
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_len = min(len(nums1), N)\n    max_prod = []\n    for i in range(max_len):\n        cur_prod = nums1[i] * nums2[i]\n        max_prod.append(cur_prod)\n    return max_prod\n",
        "num_ids": 78
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = -sys.maxsize - 1\n    for i in range(N):\n        for j in range(N):\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "num_ids": 72
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    product_list = []\n    for i in range(0, N):\n        product_list.append(nums1[i] * nums2[i])\n    return sorted(product_list, reverse=True)[0:N]\n",
        "num_ids": 58
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N < 0:\n        return None\n    else:\n        a, b = [], []\n        for i in range(N):\n            a.append(nums1[i])\n            b.append(nums2[i])\n",
        "num_ids": 59
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    count = 0\n    res = []\n    for i in range(N):\n        if count == 0:\n            res.append(nums1[i] * nums2[0])\n            count += 1\n        elif count == 1:\n            res.append(nums1[0] * nums2[i])\n            count += 1\n        else:\n            res.append(nums1[i] * nums2[i])\n    return res\n",
        "num_ids": 127
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Note: we can do this problem with a list comprehension, but we need to do it manually because of the requirement.\n    # The solution we're going to use is to use the heapq module to create a max-heap out of our lists, and use the nlargest function.\n    import heapq\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if len(max_heap) < N:\n                heapq.heappush(max_heap, product)\n            else:\n                heapq.heappushpop(max_heap, product)\n    return heapq.nlargest(N, max_heap)\n",
        "num_ids": 175
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    assert isinstance(N, int) and N >= 0\n    assert isinstance(nums1, list) and isinstance(nums2, list)\n    assert len(nums1) == len(nums2)\n    if N == 0:\n        return []\n    if N == 1:\n        return [max(nums1[0], nums2[0])]\n    else:\n        product = []\n        max_p1 = max(nums1)\n        max_p2 = max(nums2)\n        if max_p1 >= max_p2:\n            product.append(max_p1)\n            nums1.remove(max_p1)\n            nums2.remove(max_p2)\n            product.extend(large_product(nums1, nums2, N-1))\n            product.append(max_p2)\n        else:\n            product.append(max_p2)\n            nums1.remove(max_p2)\n            nums2.remove(max_p1)\n            product.extend(large_product(nums1, nums2, N-1))\n            product.append(max_p1)\n    return product\n",
        "num_ids": 289
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def merge(nums1, nums2):\n        i = 0\n        j = 0\n        result = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                result.append(nums1[i])\n                i += 1\n            elif nums1[i] > nums2[j]:\n                result.append(nums2[j])\n                j += 1\n            else:\n                result.append(nums1[i])\n                result.append(nums2[j])\n                i += 1\n                j += 1\n        if i == len(nums1):\n            result.extend(nums2[j:])\n        else:\n            result.extend(nums1[i:])\n        return result\n",
        "num_ids": 202
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_len = min(len(nums1), len(nums2))\n    # print('max_len: ', max_len)\n    if max_len == 0:\n        return []\n    if max_len == 1:\n        return nums1 * nums2\n",
        "num_ids": 68
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n",
        "num_ids": 12
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\ndef sum(a):\n    '''\n    Write a python function to find the sum of all the numbers in a list.\n    '''\n    return sum(a)\n",
        "num_ids": 9
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a,\"is greater than\",b)\n    elif a==b:\n        print(a,\"is equal to\",b)\n    else:\n        print(b,\"is greater than\",a)\n    return\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(a,\"is greater than\",b)\n    elif a==b:\n        print(a,\"is equal to\",b)\n    else:\n        print(b,\"is greater than\",a)\n    return\n    \ndef greatest(a,b,c):\n    '''\n    Write a python function to find the greatest of three numbers.\n    '''\n    if a>b and a>c:\n        print(a,\"is greater than\",b,\"and\",c)\n    elif b>a and b>c:\n        print(b,\"is greater than\",a,\"and\",c)\n    else:\n        print(c,\"is greater than\",a,\"and\",b)\n    return\n    \ndef smallest(a,b,c):\n    '''\n    Write a python function to find the smallest of three numbers.\n    '''\n    if a<b and a<c:\n        print(a,\"is smaller than\",b,\"and\",c)\n    elif b<a and b<c:\n        print(b,\"is smaller than\",a,\"and\",c)\n    else:\n        print(c,\"is smaller than\",a,\"and\",b)\n    return\n    \ndef equal(a,b):\n    '''\n    Write a python function to compare whether two numbers are equal.\n    '''\n    if a==b:\n        print(a,\"is equal to\",b)\n    else:\n        print(a,\"is not equal to\",b)\n    return\n    \ndef greater(a,b):\n    '''\n    Write a python function to compare whether a number is greater than another.\n    '''\n    if a>b:\n        print(a,\"is greater than\",b)\n    else:\n        print(b,\"is greater than\",a)\n    return\n    \ndef less(a,b):\n    '''\n    Write a python function to compare whether a number is less than another.\n    '''\n    if a<b:\n        print(a,\"is less than\",b)\n    else:\n        print(b,\"is less than\",a)\n    return\n    \ndef greatest(a,b,c):\n    '''\n    Write a python function to find the greatest of three numbers.\n    '''\n    if a>b and a>c:\n        print(a,\"is greater than\",b,\"and\",c)\n    elif b>a and b>c:\n        print(b,\"is greater than\",a,\"and\",c)\n    else:\n        print(c,\"is greater than\",a,\"and\",b)\n    return\n    \ndef smallest(a,b,c):\n    '''\n    Write a python function to find the smallest of three numbers.\n    '''\n    if a<b and a<c:\n        print(a,\"is smaller than\",b,\"and\",c)\n    elif b<a and b<c:\n        print(b,\"is smaller than\",a,\"and\",c)\n    else:\n        print(c,\"is smaller than\",a,\"and\",b)\n    return\n    \ndef equal(a,b):\n    '''\n    Write a python function to compare whether two numbers are equal.\n    '''\n    if a==b:\n        print(a,\"is equal to\",b)\n    else:\n        print(a,\"is not equal to\",b)\n    return\n    \ndef greater(a,b):\n    '''\n    Write a python function to compare whether a number is greater than another.\n    '''\n    if a>b:\n        print(a,\"is greater than\",b)\n    else:\n        print(b,\"is greater than\",a)\n    return\n    \ndef less(a,b):\n    '''\n    Write a python function to compare whether a number is less than another.\n    '''\n    if a<b:\n        print(a,\"is less than\",b)\n    else:\n        print(b,\"is less than\",a)\n    return\n    \ndef greatest(a,b,c):\n    '''\n    Write a python function to find the greatest of three numbers.\n    '''\n    if a>b and a>c:\n        print(a,\"is greater than\",b,\"and\",c)\n    elif b>a and b>c:\n        print(b,\"is greater than\",a,\"and\",c)\n    else:\n        print(c,\"is greater than\",a,\"and\",b)\n    return\n    \ndef smallest(a,b,c):\n    '''\n    Write a python function to find the smallest of three numbers.\n    '''\n    if a<b and a<c:\n        print(a,\"is smaller than\",b,\"and\",c)\n    elif b<a and b<c:\n        print(b,\"is smaller than\",a,\"and\",c)\n    else:\n        print(c,\"is smaller than\",a,\"and\",b)\n    return\n    \ndef equal(a,b):\n    '''\n    Write a python function to compare whether two numbers are equal.\n    '''\n    if a==b:\n        print(a,\"is equal to\",b)\n    else:\n        print(a,\"is not equal to\",b)\n    return\n    \ndef greater(a,b):\n    '''\n    Write a python function to compare whether a number is greater than another.\n    '''\n    if a>b:\n        print(a,\"is greater than\",b)\n    else:\n        print(b,\"is greater than\",a)\n    return\n    \ndef less(a,b):\n    '''\n    Write a python function to compare whether a number is less than another.\n    '''\n    if a<b:\n        print(a,\"is less than\",b)\n    else:\n        print(b,\"is less than\",a)\n    return\n    \ndef greatest(a,b,c):\n    '''\n    Write a python function to find the greatest of three numbers.\n    '''\n    if a>b and a>c:\n        print(a,\"is greater than\",b,\"and\",c)\n    elif b>a and b>c:\n        print(b,\"is greater than\",a,\"and\",c)\n    else:\n        print(c,\"is greater than\",a,\"and\",b)\n    return\n    \ndef smallest(a,b,c):\n    '''\n    Write a python function to find the smallest of three numbers.\n    '''\n    if a<b and a<c:\n        print(a,\"is smaller than\",b,\"and\",c)\n    elif b<a and b<c:\n        print(b,\"is smaller than\",a,\"and\",c)\n    else:\n        print(c,\"is smaller than\",a,\"and\",b)\n    return\n    \ndef equal(a,b):\n    '''\n    Write a python function to compare whether two numbers are equal.\n    '''\n    if a==b:\n        print(a,\"is equal to\",b)\n    else:\n        print(a,\"is not equal to\",b)\n    return\n    \ndef greater(a,b):\n    '''\n    Write a python function to compare whether a number is greater than another.\n    '''\n    if a>b:\n        print(a,\"is greater than\",b)\n    else:\n        print(b,\"is greater than\",a)\n    return\n    \ndef less(a,b):\n    '''\n    Write a python function to compare whether a number is less than another.\n    '''\n    if a<b:\n        print(a,\"is less than\",b)\n    else:\n        print(b,\"is less than\",a)\n    return\n    \ndef greatest(a,b,c):\n    '''\n    Write a python function to find the greatest of three numbers.\n    '''\n    if a>b and a>c:\n        print(a,\"is greater than\",b,\"and\",c)\n    elif b>a and b>c:\n        print(b,\"is greater than\",a,\"and\",c)\n    else:\n        print(c,\"is greater than\",a,\"and\",b)\n    return\n",
        "num_ids": 80
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a<b:\n        return b\n    else:\n        return a\n        \n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    elif a>b:\n        return b\n    else:\n        return a\n",
        "num_ids": 33
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a,\"is greater than\",b)\n    else:\n        print(b,\"is greater than\",a)\n    return\n",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        print(\"a is greater\")\n    elif a==b:\n        print(\"a and b are equal\")\n    else:\n        print(\"b is greater\")\n",
        "num_ids": 47
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    return tuple(str1)\n",
        "num_ids": 12
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if len(str1) < 1:\n        return (0,0)\n    return (ord(str1[0]), ord(str1[-1]))\n",
        "num_ids": 41
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    # write code here\n    tuple1 = tuple(str1)\n    return tuple1\n",
        "num_ids": 26
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = tuple(str1)\n    print(str2)\n    return str2\nstring_to_tuple('hello')\n",
        "num_ids": 34
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str(str1)\n    tup = tuple(str1)\n    return tup\n",
        "num_ids": 27
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # str1 = input('Enter the string: ')\n    str_list = list(str1)\n    tuple_list = tuple(str_list)\n    return tuple_list\n    \ndef tuple_to_string(tuple1):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    tuple_list = list(tuple1)\n    string1 = ''.join(tuple_list)\n    return string1\n    \ndef add_tuple(tuple1, tuple2):\n    '''\n    Write a function to add two tuples of characters and return the result.\n    '''\n    tuple3 = tuple1 + tuple2\n    return tuple3\n    \ndef remove_tuple(tuple1, tuple2):\n    '''\n    Write a function to remove one tuple of characters from another tuple of characters and return the result.\n    '''\n    tuple3 = tuple1 - tuple2\n    return tuple3\n    \ndef check_char(tuple1, char1):\n    '''\n    Write a function to check whether a character exists in a tuple or not.\n    '''\n    char_exists = char1 in tuple1\n    return char_exists\n    \ndef get_char_index(tuple1, char1):\n    '''\n    Write a function to get the index of a character in a tuple.\n    '''\n    char_index = tuple1.index(char1)\n    return char_index\n    \ndef get_char_last_index(tuple1, char1):\n    '''\n    Write a function to get the last index of a character in a tuple.\n    '''\n    char_last_index = tuple1.rfind(char1)\n    return char_last_index\n    \ndef get_tuple_length(tuple1):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    tuple_len = len(tuple1)\n    return tuple_len\n    \ndef get_unique_characters(tuple1):\n    '''\n    Write a function to get the unique characters from a tuple and return the result.\n    '''\n    unique_char = set(tuple1)\n    return unique_char\n    \ndef count_unique_characters(tuple1):\n    '''\n    Write a function to get the frequency of each character from a tuple and return the result.\n    '''\n    unique_char = set(tuple1)\n    unique_char_count = []\n    for i in unique_char:\n        char_count = tuple1.count(i)\n        unique_char_count.append(char_count)\n    return unique_char_count\n    \ndef reverse_tuple(tuple1):\n    '''\n    Write a function to get the reverse of a tuple and return the result.\n    '''\n    reverse_tuple = tuple1[::-1]\n    return reverse_tuple\n    \ndef sort_tuple(tuple1):\n    '''\n    Write a function to sort a tuple and return the result.\n    '''\n    sort_tuple = sorted(tuple1)\n    return sort_tuple\n    \ndef reverse_sort_tuple(tuple1):\n    '''\n    Write a function to get the reverse sorted tuple and return the result.\n    '''\n    sort_tuple = sorted(tuple1)\n    reverse_sort_tuple = sort_tuple[::-1]\n    return reverse_sort_tuple\n    \ndef rotate_tuple(tuple1, int1):\n    '''\n    Write a function to rotate a tuple and return the result.\n    '''\n    rotate_tuple = tuple1[int1:] + tuple1[:int1]\n    return rotate_tuple\n    \ndef max_in_tuple(tuple1):\n    '''\n    Write a function to get the maximum value from a tuple.\n    '''\n    max_val = max(tuple1)\n    return max_val\n    \ndef min_in_tuple(tuple1):\n    '''\n    Write a function to get the minimum value from a tuple.\n    '''\n    min_val = min(tuple1)\n    return min_val\n    \ndef join_tuple(tuple1, tuple2):\n    '''\n    Write a function to join two tuples and return the result.\n    '''\n    join_tuple = tuple1 + tuple2\n    return join_tuple\n    \ndef main():\n    print('Tuple to String: ', string_to_tuple('tuple to string'))\n    print('String to Tuple: ', tuple_to_string(('tuple to string',)))\n    print('Add Tuple: ', add_tuple(('tuple 1', 'tuple 2'), ('tuple 3', 'tuple 4')))\n    print('Remove Tuple: ', remove_tuple(('tuple 1', 'tuple 2'), ('tuple 3', 'tuple 4')))\n    print('Existence Check: ', check_char(('tuple 1', 'tuple 2'), 't'))\n    print('Index of Character: ', get_char_index(('tuple 1', 'tuple 2'), 't'))\n    print('Last index of Character: ', get_char_last_index(('tuple 1', 'tuple 2'), 't'))\n    print('Length of Tuple: ', get_tuple_length(('tuple 1', 'tuple 2')))\n    print('Unique Characters: ', get_unique_characters(('tuple 1', 'tuple 2', 'tuple 3', 'tuple 4')))\n    print('Count of Unique Characters: ', count_unique_characters(('tuple 1', 'tuple 2', 'tuple 3', 'tuple 4')))\n    print('Reverse Tuple: ', reverse_tuple(('tuple 1', 'tuple 2', 'tuple 3', 'tuple 4')))\n    print('Tuple Sorted: ', sort_tuple(('tuple 1', 'tuple 2', 'tuple 3', 'tuple 4')))\n    print('Reverse Sorted Tuple: ', reverse_sort_tuple(('tuple 1', 'tuple 2', 'tuple 3', 'tuple 4')))\n    print('Tuple Rotated: ', rotate_tuple(('tuple 1', 'tuple 2', 'tuple 3', 'tuple 4'), 2))\n    print('Maximum value in Tuple: ', max_in_tuple(('tuple 1', 'tuple 2', 'tuple 3', 'tuple 4')))\n    print('Minimum value in Tuple: ', min_in_tuple(('tuple 1', 'tuple 2', 'tuple 3', 'tuple 4')))\n    print('Join Tuple: ', join_tuple(('tuple 1', 'tuple 2', 'tuple 3', 'tuple 4'), ('tuple 5', 'tuple 6')))\n    \nif __name__ == '__main__':\n    main()\n    \n'''\nTuple to String:  ('tuple to string',)\nString to Tuple:  ('tuple to string',)\nAdd Tuple:  ('tuple 1', 'tuple 2', 'tuple 3', 'tuple 4')\nRemove Tuple:  ('tuple 1', 'tuple 2', 'tuple 3', 'tuple 4')\nExistence Check:  True\nIndex of Character:  3\nLast index of Character:  3\nLength of Tuple:  4\nUnique Characters:  {'t', 'u', 'l', 'e'}\nCount of Unique Characters:  [4, 1, 1, 1]\nReverse Tuple:  ('tuple 4', 'tuple 3', 'tuple 2', 'tuple 1')\nTuple Sorted:  ('tuple 1', 'tuple 2', 'tuple 3', 'tuple 4')\nReverse Sorted Tuple:  ('tuple 4', 'tuple 3', 'tuple 2', 'tuple 1')\nTuple Rotated:  ('tuple 2', 'tuple 3', 'tuple 4', 'tuple 1')\nMaximum value in Tuple:  'tuple 4'\nMinimum value in Tuple:  'tuple 1'\nJoin Tuple:  ('tuple 1', 'tuple 2', 'tuple 3', 'tuple 4', 'tuple 5', 'tuple 6')\n",
        "num_ids": 319
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # create a mask to flip the right most unset bit\n    mask = 1 << n\n    # perform an XOR with the mask\n    return mask ^ n\n",
        "num_ids": 39
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return int(~(2**(n)-1))\n    \n    \ndef set_left_most_set_bit(n):\n    '''\n    Write a python function to set the left most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    return int(~(2**(n)-1))\n    \n    \ndef clear_right_most_unset_bit(n):\n    '''\n    Write a python function to clear the right most unset bit.\n    '''\n    return int(~(2**(n)-1))\n    \n    \ndef clear_right_most_set_bit(n):\n    '''\n    Write a python function to clear the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_left_most_set_bit(n):\n    '''\n    Write a python function to set the left most set bit.\n    '''\n    return int(~(2**(n)-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    return int(~(2**(n)-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    return int(~(2**(n)-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    return int(~(2**(n)-1))\n    \n    \ndef clear_right_most_set_bit(n):\n    '''\n    Write a python function to clear the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef clear_right_most_set_bit(n):\n    '''\n    Write a python function to clear the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef clear_right_most_set_bit(n):\n    '''\n    Write a python function to clear the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef clear_right_most_set_bit(n):\n    '''\n    Write a python function to clear the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef clear_left_most_unset_bit(n):\n    '''\n    Write a python function to clear the left most unset bit.\n    '''\n    return int(~(2**(n)-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    return int(~(2**(n)-1))\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    return int(~(2**(n)-1))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int(~(2**(n)-2))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return in",
        "num_ids": 5
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 2 * set_left_most_unset_bit(n / 2)\n    return n * 2 + 1 - set_left_most_unset_bit(n * 2 + 1)",
        "num_ids": 67
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n ^= n >> 1\n    n ^= n >> 2\n    n ^= n >> 4\n    n ^= n >> 8\n    n ^= n >> 16\n    return n\n",
        "num_ids": 46
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & 0x5555555555555555\n    n |= n << 1\n    n |= n >> 1\n    return n\n",
        "num_ids": 38
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Leftmost set bit in n is the bit at pos 1 in the binary representation of n.\n    # If n is a power of 2, then we can't go ahead and set the leftmost bit.\n    # If n is a power of 2, then we can go ahead and set the leftmost bit.\n    # Note: n is passed as integer and we need to return a number, so use n & (~n + 1) to get the answer.\n    return n & (~n + 1)\n",
        "num_ids": 113
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # print('input', bin(n))\n    \n    # if n < 0:\n    #     n = -1*n\n    # count = 0\n    # while n:\n    #     n >>= 1\n    #     count += 1\n    # return count + 1\n    \n    # find the position of first unset bit (0 to len(n)-1)\n    return n.bit_length()\n",
        "num_ids": 98
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    return (1<<(n-1)) - 1\n",
        "num_ids": 26
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(f\"{bin(n)} - {n:b}\")\n    return 2**(len(bin(n)) - 1 - n.bit_length())\n    \n",
        "num_ids": 43
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h / 3\n    return round(volume,3)\n",
        "num_ids": 26
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print(r*r*math.pi/3*h)\n",
        "num_ids": 18
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #Your code here\n    import math\n    volume = 1/3*math.pi*r**2*h\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    #Your code here\n    import math\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #Your code here\n    import math\n    volume = 4/3*math.pi*r**3\n    return volume\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    #Your code here\n    import math\n    volume = l**3\n    return volume\ndef area_square(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    #Your code here\n    import math\n    area = l**2\n    return area\ndef area_rectangle(l,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    #Your code here\n    import math\n    area = l*w\n    return area\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    #Your code here\n    import math\n    area = 1/2*b*h\n    return area\ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    #Your code here\n    import math\n    area = b*h\n    return area\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    #Your code here\n    import math\n    area = 1/2*(a+b)*h\n    return area\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    #Your code here\n    import math\n    area = math.pi*r**2\n    return area\ndef area_ellipse(r,h):\n    '''\n    Write a function to find the area of a ellipse.\n    '''\n    #Your code here\n    import math\n    area = math.pi*r*h\n    return area\ndef area_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    #Your code here\n    import math\n    area = 1/2*a*b\n    return area\ndef area_kite(a,b):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    #Your code here\n    import math\n    area = 1/2*a*b\n    return area\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    #Your code here\n    import math\n    area = 1/2*a**2*math.sqrt(3)\n    return area\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a heptagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(5)\n    return area\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    #Your code here\n    import math\n    area = 1/3*a**2*math.sqrt(8)\n    return area\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a nonagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(9)\n    return area\ndef area_decagon(a):\n    '''\n    Write a function to find the area of a decagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2*math.sqrt(10)\n    return area\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a nonagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(9)\n    return area\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a icosagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2*math.sqrt(11)\n    return area\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    #Your code here\n    import math\n    area = 1/3*a**2*math.sqrt(8)\n    return area\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a dodecagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(12)\n    return area\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a icosagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2*math.sqrt(11)\n    return area\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a dodecagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(12)\n    return area\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a icosagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2*math.sqrt(11)\n    return area\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a dodecagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(12)\n    return area\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a icosagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2*math.sqrt(11)\n    return area\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a dodecagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(12)\n    return area\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a icosagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2*math.sqrt(11)\n    return area\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a dodecagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(12)\n    return area\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a icosagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2*math.sqrt(11)\n    return area\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a dodecagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(12)\n    return area\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a icosagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2",
        "num_ids": 22
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=1/3*math.pi*r*r*h\n    return volume\n",
        "num_ids": 23
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h / 3\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*r*r*h/3\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    def volume(r,h):\n        return (1/3)*math.pi*r*r*h\n    return volume(r,h)\n",
        "num_ids": 37
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h\n    \n    \ndef my_print(txt):\n    '''\n    Write a function to print any text you want.\n    '''\n    print(txt)\n    \n    \ndef my_list(a):\n    '''\n    Write a function to take an input of a list and print it.\n    '''\n    print(a)\n    \n    \ndef my_dict(a):\n    '''\n    Write a function to take an input of a dictionary and print it.\n    '''\n    print(a)\n    \n    \ndef my_range(a):\n    '''\n    Write a function to take an input and return a list of numbers in a range between 0 and the input.\n    '''\n    print(list(range(a)))\n    \n    \ndef my_zip(a,b):\n    '''\n    Write a function to take two inputs and zip them together, storing the zip object.\n    '''\n    c = zip(a,b)\n    print(c)\n    \n    \ndef my_enumerate(a):\n    '''\n    Write a function to take an input and return the input as an enumerated list.\n    '''\n    c = enumerate(a)\n    print(c)\n    \n    \ndef my_map(a,b):\n    '''\n    Write a function to take an input of two functions and map the first function onto the second.\n    '''\n    c = map(a,b)\n    print(list(c))\n    \n    \ndef my_filter(a,b):\n    '''\n    Write a function to take an input of a function and a list and filter the list based on the function.\n    '''\n    c = filter(a,b)\n    print(list(c))\n    \n    \ndef my_reduce(a,b):\n    '''\n    Write a function to take an input of two functions and reduce the input using the first function until the input is reduced down to one value.\n    '''\n    c = reduce(a,b)\n    print(c)\n    \n    \ndef my_all(a):\n    '''\n    Write a function to take an input of a list and return True if all of the elements in the list are True.\n    '''\n    if all(a):\n        return True\n    else:\n        return False\n        \n        \ndef my_any(a):\n    '''\n    Write a function to take an input of a list and return True if any of the elements in the list are True.\n    '''\n    if any(a):\n        return True\n    else:\n        return False\n        \n        \ndef my_sum(a):\n    '''\n    Write a function to take an input of a list and return the sum of all of the elements in the list.\n    '''\n    return sum(a)\n    \n    \ndef my_abs(a):\n    '''\n    Write a function to take an input of a number and return the absolute value of that number.\n    '''\n    return abs(a)\n    \n    \ndef my_pow(a,b):\n    '''\n    Write a function to take an input of two numbers and return the first number raised to the second.\n    '''\n    return a**b\n    \n    \ndef my_round(a,b):\n    '''\n    Write a function to take an input of a number and return the number rounded to the nearest whole number.\n    '''\n    return round(a,b)\n    \n    \ndef my_sort(a):\n    '''\n    Write a function to take an input of a list and return the list sorted.\n    '''\n    return sorted(a)\n    \n    \ndef my_reversed(a):\n    '''\n    Write a function to take an input of a list and return the list with its elements reversed.\n    '''\n    return reversed(a)\n    \n    \ndef my_range_step(a):\n    '''\n    Write a function to take an input of a starting number, a stopping number, and a step and return a list of the number in the range from the starting number to the stopping number at the step interval.\n    '''\n    return list(range(a,a+math.ceil((b-a)/step),step))\n    \n    \ndef my_time(a):\n    '''\n    Write a function to take an input of seconds, and return the input as days, hours, minutes, and seconds.\n    '''\n    return time.strftime('%j %H:%M:%S', time.gmtime(a))\n    \n    \ndef my_datetime(a):\n    '''\n    Write a function to take an input of a date, and return the date and time as a string.\n    '''\n    return datetime.strftime(a, '%Y-%m-%d %H:%M:%S')\n    \n    \ndef my_type(a):\n    '''\n    Write a function to take an input of a variable and return the type of the variable.\n    '''\n    return type(a)\n    \n    \ndef my_input(a):\n    '''\n    Write a function to take an input of any value and return that value cast to an integer.\n    '''\n    return int(a)\n    \n    \ndef my_bin(a):\n    '''\n    Write a function to take an input of a number and return the number in binary.\n    '''\n    return bin(a)\n    \n    \ndef my_hex(a):\n    '''\n    Write a function to take an input of a number and return the number in hexadecimal.\n    '''\n    return hex(a)\n    \n    \ndef my_oct(a):\n    '''\n    Write a function to take an input of a number and return the number in octal.\n    '''\n    return oct(a)\n    \n    \ndef my_factorial(a):\n    '''\n    Write a function to take an input of a number and return the factorial of that number.\n    '''\n    return math.factorial(a)\n    \n    \ndef my_sqrt(a):\n    '''\n    Write a function to take an input of a number and return the square root of that number.\n    '''\n    return math.sqrt(a)\n    \n    \ndef my_pi(a):\n    '''\n    Write a function to take an input of nothing and return the value of pi.\n    '''\n    return math.pi\n    \n    \ndef my_e(a):\n    '''\n    Write a function to take an input of nothing and return the value of e.\n    '''\n    return math.e\n    \n    \ndef my_log(a,base):\n    '''\n    Write a function to take an input of a number and a base and return the log of the number with respect to the base.\n    '''\n    return math.log(a,base)\n    \n    \ndef my_log10(a):\n    '''\n    Write a function to take an input of a number and return the log base 10 of that number.\n    '''\n    return math.log10(a)\n    \n    \ndef my_radians(a):\n    '''\n    Write a function to take an input of a number and return the number in radians.\n    '''\n    return math.radians(a)\n    \n    \ndef my_degrees(a):\n    '''\n    Write a function to take an input of a number and return the number in degrees.\n    '''\n    return math.degrees(a)\n    \n    \ndef my_sin(a):\n    '''\n    Write a function to take an input of a number and return the sine of that number in radians.\n    '''\n    return math.sin(a)\n    \n    \ndef my_cos(a):\n    '''\n    Write a function to take an input of a number and return the cosine of that number in radians.\n    '''\n    return math.cos(a)\n    \n    \ndef my_tan(a):\n    '''\n    Write a function to take an input of a number and return the tangent of that number in radians.\n    '''\n    return math.tan(a)\n    \n    \ndef my_asin(a):\n    '''\n    Write a function to take an input of a number and return the arc sine of that number in radians.\n    '''",
        "num_ids": 1
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #volume = math.pi * r**2 * (h/3)\n    volume = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403\n    return volume\n",
        "num_ids": 334
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\n",
        "num_ids": 20
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    res = 0\n    if n & (n - 1) == 0:\n        return n\n    else:\n        while n!= 0:\n            res = n\n            n >>= 1\n        return res\n",
        "num_ids": 51
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n = int(n)\n    if n==1:\n        return 1\n    elif n>=0:\n        max_power = n.bit_length()\n        return max_power\n    else:\n        return \"The number is not positive\"\n",
        "num_ids": 62
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i<=n:\n        i = i << 1\n    print(i>>1)\n    \nhighest_Power_of_2(10)\n",
        "num_ids": 43
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #In Python, the math functions (e.g. exp(), log(), etc.) are imported into the math module.\n    #The logarithm base can be set to any value between e (the base of natural logarithms)\n    #and 2 (the base of binary logarithms)\n    import math\n    print(math.log2(n))\n    print(math.floor(math.log2(n)))\n    print(math.ceil(math.log2(n)))\n    return\n",
        "num_ids": 120
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2**(n.bit_length() - 1) if n else 0\n",
        "num_ids": 21
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 1\n    while highest_power <= n:\n        highest_power = highest_power * 2\n    return highest_power // 2\n",
        "num_ids": 37
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highestPowerOf2 = 0\n    while highestPowerOf2 < n:\n        highestPowerOf2 = highestPowerOf2 * 2\n    return highestPowerOf2\n",
        "num_ids": 40
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while(i <= n): \n        i = i * 2\n    return i / 2\n",
        "num_ids": 29
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    i = 0\n    while(True):\n        if(i**2<=n):\n            count+=1\n            i+=1\n        else:\n            break\n    return count\nhighest_Power_of_2(32)",
        "num_ids": 60
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(2**(math.floor(math.log2(n))))\n",
        "num_ids": 21
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    #Initialize the variable.\n    lucas = 0\n",
        "num_ids": 17
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 55
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [2,1]\n    if n == 0: \n        return 2\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return lucas[1]\n    elif n > 2:\n        for i in range(2,n+1):\n            lucas.append(lucas[i-1] + lucas[i-2])\n        return lucas[n]\n",
        "num_ids": 106
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: return 2\n    elif n == 1: return 1\n    else: return lucas(n-1) + lucas(n-2)\n",
        "num_ids": 41
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: return 2 \n    if n == 1: return 1\n    return lucas(n-2) + lucas(n-1)\n",
        "num_ids": 39
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [2,1]\n    for i in range(2, n):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n-1]\n",
        "num_ids": 58
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n > 2: \n        return find_lucas(n-2) + find_lucas(n-1)\n",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_list = []\n    for i in range(n+1):\n        if i == 0:\n            lucas_list.append(2)\n        elif i == 1:\n            lucas_list.append(1)\n        else:\n            lucas_list.append(lucas_list[i-1]+lucas_list[i-2])\n    return lucas_list[n]\n",
        "num_ids": 105
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 59
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string = string.split('%s')\n    return [string[0] + element + string[1] for element in list_]\n    \n",
        "num_ids": 36
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    assert type(string) == str\n    for index, item in enumerate(list_):\n        list_[index] = string % item\n    return list_\n",
        "num_ids": 40
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format_string(string, i) for i in list_]\n",
        "num_ids": 20
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        print(string.format(i))\n",
        "num_ids": 20
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    length = len(list_)\n    result = [format_string(string, index) for index in range(0, length)]\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [f'{string}{i}' for i in list_]\n",
        "num_ids": 20
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(0, len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 39
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [dict(zip(l1,l2)) for l2 in zip(*l3)]\n",
        "num_ids": 25
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    for i in range(len(l1)):\n        d = {l1[i]:{l2[i]:l3[i]}}\n    return(d)\n",
        "num_ids": 43
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == 0:\n        return None\n    else:\n        return [{l1[i]: {l2[j]: l3[k] for j in range(len(l2))} for i in range(len(l1))} for k in range(len(l3))]\n",
        "num_ids": 75
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    my_dict = dict(zip(l1, zip(l2,l3)))\n    return my_dict\n",
        "num_ids": 29
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1_dict = {}\n    for i, j in enumerate(l1):\n        l1_dict[j] = l2[i]\n    \n    l3_dict = {}\n    for i, j in enumerate(l3):\n        l3_dict[j] = l1_dict[l2[i]]\n        \n    return l3_dict\n",
        "num_ids": 90
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_ = dict(zip(l1, l2))\n    nested_dict = dict(zip(dict_, l3))\n    print(nested_dict)\n",
        "num_ids": 43
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n",
        "num_ids": 7
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    list_dict = {}\n    list_dict[l1[0]] = l2\n    list_dict[l1[0]][l1[1]] = l3\n",
        "num_ids": 43
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{l1[i]:{l2[j]:l3[k]}} for i in range(len(l1)) for j in range(len(l2)) for k in range(len(l3))]\n",
        "num_ids": 55
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    output_dict = {}\n    for i in range(0, len(l1)):\n        output_dict[l1[i]] = {}\n        for j in range(0, len(l2[i])):\n            output_dict[l1[i]][l2[i][j]] = l3[i][j]\n    return output_dict\n",
        "num_ids": 87
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    a = [0,1]\n    i = 2\n    while i <= n:\n        a.append(max(((a[i//2] + a[i//3] + a[i//4] + a[i//5])), i))\n        i = i + 1\n    return a[n]\n",
        "num_ids": 76
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_sum(n):\n        if n == 1:\n            return 1\n        elif n%2 == 0:\n            return get_sum(n//2) + n\n        else:\n            return get_sum(n//2) + n + get_sum(n//3) + n//3\n    return max((get_sum(n//2) + get_sum(n//3) + get_sum(n//4) + get_sum(n//5) + n, get_sum(n//2) + n), n)\n",
        "num_ids": 131
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1, n):\n        max_sum = max( max_sum, (max_sum_of_divide_two_conquer(i) + max_sum_of_divide_three_conquer(i) + max_sum_of_divide_four_conquer(i) + max_sum_of_divide_five_conquer(i)))\n    return max_sum\n",
        "num_ids": 106
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n < 0):\n        return -1\n    \n    if (n == 0):\n        return 0\n    \n    if (n == 1):\n        return 1\n    \n    f1 = get_max_sum (n // 2)\n    f2 = get_max_sum (n // 3)\n    f3 = get_max_sum (n // 4)\n    f4 = get_max_sum (n // 5)\n    \n    return max (f1, f2, f3, f4)\n    \ndef f(n):\n    '''\n    Write a function that returns the sum of the first n numbers.\n    '''\n    if (n < 0):\n        return -1\n        \n    if (n == 0):\n        return 0\n        \n    sum = 0\n    for i in range (n + 1):\n        sum += i\n        \n    return sum\n",
        "num_ids": 58
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = n\n    while n>0:\n        max_sum = max(max_sum, n)\n        if n%2 == 0:\n            n = n/2\n        elif n%3 == 0:\n            n = n/3\n        elif n%5 == 0:\n            n = n/5\n        elif n%4 == 0:\n            n = n/4\n    return int(max_sum)\n",
        "num_ids": 106
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #your code here\n    if n <= 4:\n        return n\n",
        "num_ids": 19
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max_sum_recursive (n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return n\n        max_sum = max(get_max_sum_recursive(n//2),get_max_sum_recursive(n//3),get_max_sum_recursive(n//4),get_max_sum_recursive(n//5))\n        return max_sum + n\n",
        "num_ids": 106
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base cases\n    if n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    \n    # Recursive case\n    return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n",
        "num_ids": 112
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def recursive_max_sum(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return max((recursive_max_sum(n//2)+n), recursive_max_sum(n//3)+n, recursive_max_sum(n//4)+n, recursive_max_sum(n//5)+n)\n    return recursive_max_sum(n)\n",
        "num_ids": 100
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def get_sum(n):\n        if n<=1:\n            return n\n        else:\n            return n+get_sum(n-1)\n    \n    def get_all_combinations(n):\n        if n == 1:\n            return [1]\n        return [1]+get_all_combinations(n-1)\n    \n    all_combinations = get_all_combinations(n)\n    \n    def get_max_sum_from_n(n):\n        max_sum = max([(n/combination) + (get_sum(combination)/combination) for combination in all_combinations])\n        return max_sum\n    \n    return get_max_sum_from_n(n)\n",
        "num_ids": 178
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_length = 0\n    for element in input_list:\n        if len(element) > list_length:\n            list_length = len(element)\n            max_length_list = element\n    return max_length_list\n",
        "num_ids": 57
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = None\n    for item in input_list:\n        if max_len < len(item):\n            max_len = len(item)\n            max_list = item\n    return max_list\n",
        "num_ids": 59
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n",
        "num_ids": 46
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = len(input_list[0])\n    for i in input_list:\n        if len(i) > max:\n            max = len(i)\n    return max\n",
        "num_ids": 45
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = []\n    for x in input_list:\n        length.append(len(x))\n    return input_list[length.index(max(length))]\n",
        "num_ids": 42
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_max = []\n    for item in input_list:\n        if len(item) == len(input_list[0]):\n            list_max.append(item)\n",
        "num_ids": 45
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return input_list[0] if len(input_list) == 1 else max_length_list(input_list[1:])\n",
        "num_ids": 34
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = None\n    for item in input_list:\n        if isinstance(item, list):\n            if max_length < len(item):\n                max_length = len(item)\n                max_length_list = item\n        else:\n            if max_length < len(item):\n                max_length = len(item)\n                max_length_list = [item]\n    return max_length_list\n    \n",
        "num_ids": 113
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 46
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i)>max_length:\n            max_length = len(i)\n    return max_length\n",
        "num_ids": 46
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # print(set(test_tup))\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 34
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = tuple(test_tup)\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n    \n    \ndef check_in(test_tup,test_list):\n    '''\n    Write a function that takes a tuple and a list as arguments. The function should return True if the tuple contains any element of the list as an element.\n    '''\n    return any(x in test_tup for x in test_list)\n    \n    \ndef get_unique_values(test_dict):\n    '''\n    Write a function that returns a set of unique values from the dictionary.\n    '''\n    return set(test_dict.values())\n    \n    \ndef check_duplicates(test_tup):\n    '''\n    Write a function to check if any element in the tuple is repeated.\n    '''\n    return not len(test_tup) == len(set(test_tup))\n    \n    \ndef count_sorted_odds(test_list):\n    '''\n    Write a function that counts the number of odd numbers in a list and returns it.\n    '''\n    return sum(1 for x in test_list if x%2 == 1)\n    \n    \ndef count_sorted_evens(test_list):\n    '''\n    Write a function that counts the number of even numbers in a list and returns it.\n    '''\n    return sum(1 for x in test_list if x%2 == 0)\n    \n    \ndef is_unique(test_list):\n    '''\n    Write a function that checks if a list is unique.\n    '''\n    return len(test_list) == len(set(test_list))\n    \n    \ndef has_distinct_elements(test_list):\n    '''\n    Write a function that checks if the list has distinct elements.\n    '''\n    return len(test_list) == len(set(test_list))\n    \n    \ndef has_duplicate_elements(test_list):\n    '''\n    Write a function that checks if the list has duplicate elements.\n    '''\n    return len(test_list)!= len(set(test_list))\n    \n    \ndef average_of_list(test_list):\n    '''\n    Write a function that returns the average of the elements of a list.\n    '''\n    return sum(test_list)/len(test_list)\n    \n    \ndef is_in(test_list,test_list_of_lists):\n    '''\n    Write a function that checks if any of the elements of the first list are in any of the lists in the second list.\n    '''\n    return any(x in test_list_of_lists for x in test_list)\n    \n    \ndef most_frequent(test_list):\n    '''\n    Write a function that returns the most frequent element of a list.\n    '''\n    return max(test_list,key=test_list.count)\n    \n    \ndef is_subsequence(test_list1,test_list2):\n    '''\n    Write a function that checks if the first list is a subsequence of the second list.\n    '''\n    return all(x in test_list2 for x in test_list1)\n    \n    \ndef get_first_list_element(test_list):\n    '''\n    Write a function that returns the first element of a list.\n    '''\n    return test_list[0]\n    \n    \ndef is_anagram(test_str1,test_str2):\n    '''\n    Write a function that checks if the two strings are anagrams of each other.\n    '''\n    return sorted(test_str1.lower().replace(' ','')) == sorted(test_str2.lower().replace(' ',''))\n    \n    \ndef check_pangram(test_str):\n    '''\n    Write a function that checks if the string is a pangram.\n    '''\n    return all(x in test_str.lower().replace(' ','').replace('-','') for x in 'abcdefghijklmnopqrstuvwxyz')\n    \n    \ndef get_missing_number(test_list):\n    '''\n    Write a function that returns the missing number in a list.\n    '''\n    return set(range(1,len(test_list)+1)).difference(set(test_list))\n    \n    \ndef get_missing_number_sort(test_list):\n    '''\n    Write a function that returns the missing number in a list in ascending order.\n    '''\n    return sorted(set(range(1,len(test_list)+1)).difference(set(test_list)))\n    \n    \ndef get_missing_number_xor(test_list):\n    '''\n    Write a function that returns the missing number in a list using xor.\n    '''\n    return reduce(lambda x,y: x^y, test_list)\n    \n    \ndef get_missing_number_negatives(test_list):\n    '''\n    Write a function that returns the missing number in a list that have negative numbers in them.\n    '''\n    return sorted(set(range(1,len(test_list)+1)).difference(set(test_list)))\n    \n    \ndef get_missing_number_negatives_sort(test_list):\n    '''\n    Write a function that returns the missing number in a list that have negative numbers in them in ascending order.\n    '''\n    return sorted(set(range(1,len(test_list)+1)).difference(set(test_list)))\n    \n    \ndef get_missing_number_negatives_xor(test_list):\n    '''\n    Write a function that returns the missing number in a list that have negative numbers in them using xor.\n    '''\n    return reduce(lambda x,y: x^y, test_list)\n    \n    \ndef check_missing_number(test_list):\n    '''\n    Write a function that checks if the list contains a missing number.\n    '''\n    return not len(test_list) == len(set(test_list))\n    \n    \ndef check_missing_number_sort(test_list):\n    '''\n    Write a function that checks if the list contains a missing number in ascending order.\n    '''\n    return not test_list == sorted(set(range(1,len(test_list)+1)).difference(set(test_list)))\n    \n    \ndef check_missing_number_xor(test_list):\n    '''\n    Write a function that checks if the list contains a missing number using xor.\n    '''\n    return not len(test_list) == len(set(test_list)) ^ len(test_list) == len(set(test_list))\n    \n    \ndef get_missing_number_sort_or_negatives(test_list):\n    '''\n    Write a function that returns the missing number in a list in ascending order. If there are negative numbers in the list, then the missing number should be negative.\n    '''\n    if any(x < 0 for x in test_list):\n        return sorted(set(range(1,len(test_list)+1)).difference(set(test_list)))[0]\n    return sorted(set(range(1,len(test_list)+1)).difference(set(test_list)))\n    \n    \ndef get_missing_number_sort_or_negatives_xor(test_list):\n    '''\n    Write a function that returns the missing number in a list in ascending order. If there are negative numbers in the list, then the missing number should be negative.\n    '''\n    if any(x < 0 for x in test_list):\n        return reduce(lambda x,y: x^y, test_list)\n    return reduce(lambda x,y: x^y, test_list)\n    \n    \ndef get_all_numbers(test_list):\n    '''\n    Write a function that returns a list of all the numbers in a list.\n    '''\n    return [x for x in test_list]\n    \n    \ndef get_all_numbers_sort(test_list):\n    '''\n    Write a function that returns a list of all the numbers in a list in ascending order.\n    '''\n    return sorted(test_list)\n    \n    \ndef get_all_numbers_sort_and_unique(test_list):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for i in str1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    for key, value in dict.items():\n        if value == 1:\n            print('The first non-repeated character is : {}'.format(key))\n            break\n        else:\n            continue\n",
        "num_ids": 89
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    str2 = ''\n    str3 = []\n    for i in str1:\n        if i not in str2:\n            str3.append(i)\n            str2 += i\n    if len(str3) == 1:\n        return str3[0]\n    elif len(str3) > 1:\n        return \"No unique characters in the string\"\n",
        "num_ids": 98
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count_dict = {}\n    for char in str1:\n        count_dict[char] = count_dict.get(char,0)+1\n    for char in str1:\n        if count_dict[char] == 1:\n            return char\n    return '_'\n",
        "num_ids": 67
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for i in range(len(str1)):\n        if str1[i] in dict:\n            dict[str1[i]] += 1\n        else:\n            dict[str1[i]] = 1\n    for i in range(len(str1)):\n        if dict[str1[i]] == 1:\n            return str1[i]\n    return '_'\n",
        "num_ids": 97
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n",
        "num_ids": 27
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_dict = {}\n    for i in str1:\n        if i in str_dict:\n            str_dict[i] += 1\n        else:\n            str_dict[i] = 1\n",
        "num_ids": 50
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict_char = {}\n    for char in str1:\n        if char in dict_char:\n            dict_char[char] += 1\n        else:\n            dict_char[char] = 1\n    print(dict_char)\n    for key,value in dict_char.items():\n        if value == 1:\n            return key\n",
        "num_ids": 82
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = 'geeksforgeeks'\n    # Use dict to count the number of occurences of characters.\n    dict_1 = {}\n    for c in str1:\n        if c not in dict_1:\n            dict_1[c] = 1\n        else:\n            dict_1[c] += 1\n    for c in str1:\n        if dict_1[c] == 1:\n            return c\n    return -1\n",
        "num_ids": 107
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for c in str1:\n        if c in d.keys():\n            d[c] += 1\n        else:\n            d[c] = 1\n    for c in str1:\n        if d[c] == 1:\n            return c\n    return None\n    \ndef find_length_of_longest_substring(str1, k):\n    '''\n    Write a python function to find the length of the longest substring with no more than k distinct characters.\n    '''\n    if len(str1) == 0:\n        return 0\n    l = 0\n    substring = ''\n    d = {}\n    for r in range(len(str1)):\n        if str1[r] not in d.keys():\n            d[str1[r]] = 1\n        else:\n            d[str1[r]] += 1\n        if len(d.keys()) <= k:\n            substring += str1[r]\n            if r - l + 1 > len(substring):\n                substring = substring[substring.rfind(str1[l]) + 1:r + 1]\n            l += 1\n    return len(substring)\n    \ndef find_length_of_longest_substring2(str1, k):\n    '''\n    Write a python function to find the length of the longest substring with no more than k distinct characters.\n    '''\n    l, r = 0, 0\n    d = {}\n    max_len = 0\n    while r < len(str1):\n        if str1[r] not in d.keys():\n            d[str1[r]] = 1\n        else:\n            d[str1[r]] += 1\n        if len(d.keys()) <= k:\n            max_len = max(max_len, r - l + 1)\n            r += 1\n        else:\n            d[str1[l]] -= 1\n            if d[str1[l]] == 0:\n                del d[str1[l]]\n            l += 1\n    return max_len\n    \ndef find_longest_substring_with_k_distinct_characters(str1, k):\n    '''\n    Write a python function to find the longest substring with no more than k distinct characters.\n    '''\n    if len(str1) == 0:\n        return None\n    l = 0\n    d = {}\n    substring = ''\n    for r in range(len(str1)):\n        if str1[r] not in d.keys():\n            d[str1[r]] = 1\n        else:\n            d[str1[r]] += 1\n        if len(d.keys()) <= k:\n            substring += str1[r]\n        else:\n            if d[str1[l]] == 1:\n                del d[str1[l]]\n            else:\n                d[str1[l]] -= 1\n            l += 1\n    return substring\n    \ndef find_length_of_longest_substring_with_given_characters(str1, str2):\n    '''\n    Write a python function to find the length of the longest substring with given characters.\n    '''\n    if len(str1) == 0:\n        return 0\n    l = 0\n    d = {}\n    max_len = 0\n    for r in range(len(str1)):\n        if str1[r] in d.keys():\n            d[str1[r]] += 1\n        else:\n            d[str1[r]] = 1\n        if str2 in d.keys():\n            if d[str2] == 0:\n                del d[str2]\n            else:\n                d[str2] -= 1\n        if len(d.keys()) == 0:\n            max_len = max(max_len, r - l + 1)\n        else:\n            l = max(l, r - d[str1[r]] + 1)\n    return max_len\n    \ndef find_longest_substring_with_given_characters2(str1, str2):\n    '''\n    Write a python function to find the longest substring with given characters.\n    '''\n    if len(str1) == 0:\n        return None\n    l = 0\n    d = {}\n    substring = ''\n    for r in range(len(str1)):\n        if str1[r] in d.keys():\n            d[str1[r]] += 1\n        else:\n            d[str1[r]] = 1\n        if str2 in d.keys():\n            if d[str2] == 0:\n                del d[str2]\n            else:\n                d[str2] -= 1\n        if len(d.keys()) == 0:\n            substring = str1[l:r + 1]\n        else:\n            l = max(l, r - d[str1[r]] + 1)\n    return substring\n    \ndef find_longest_substring_with_given_characters3(str1, str2):\n    '''\n    Write a python function to find the longest substring with given characters.\n    '''\n    if len(str1) == 0:\n        return None\n    l = 0\n    d = {}\n    substring = ''\n    for r in range(len(str1)):\n        if str1[r] in d.keys():\n            d[str1[r]] += 1\n        else:\n            d[str1[r]] = 1\n        if str2 in d.keys():\n            if d[str2] == 0:\n                del d[str2]\n            else:\n                d[str2] -= 1\n        if len(d.keys()) == 0:\n            substring = str1[l:r + 1]\n        else:\n            l = max(l, r - d[str1[r]] + 1)\n    return substring\n    \ndef find_the_longest_substring_with_given_characters(str1, str2):\n    '''\n    Write a python function to find the longest substring with given characters.\n    '''\n    if len(str1) == 0:\n        return None\n    l = 0\n    d = {}\n    substring = ''\n    for r in range(len(str1)):\n        if str1[r] in d.keys():\n            d[str1[r]] += 1\n        else:\n            d[str1[r]] = 1\n        if str2 in d.keys():\n            if d[str2] == 0:\n                del d[str2]\n            else:\n                d[str2] -= 1\n        if len(d.keys()) == 0:\n            substring = str1[l:r + 1]\n        else:\n            l = max(l, r - d[str1[r]] + 1)\n    return substring\n    \ndef find_longest_substring_with_given_characters4(str1, str2):\n    '''\n    Write a python function to find the longest substring with given characters.\n    '''\n    if len(str1) == 0:\n        return None\n    l = 0\n    d = {}\n    substring = ''\n    for r in range(len(str1)):\n        if str1[r] in d.keys():\n            d[str1[r]] += 1\n        else:\n            d[str1[r]] = 1\n        if str2 in d.keys():\n            if d[str2] == 0:\n                del d[str2]\n            else:\n                d[str2] -= 1\n        if len(d.keys()) == 0:\n            substring = str1[l:r + 1]\n        else:\n            l = max(l, r - d[str1[r]] + 1)\n    return substring\n    \ndef find_longest_substring_with_given_characters5(str1, str2):\n    '''\n    Write a python function to find the longest substring with given characters.\n    '''\n    if len(str1) == 0:\n        return None\n    l = 0\n    d = {}\n    substring = ''\n    for r in range(len(str1)):\n        if str1[r] in d.keys():\n            d[str1[r]] += 1\n        else:\n            d[str1[r]] = 1\n        if str2 in d.keys():",
        "num_ids": 94
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for c in str1:\n        if c not in count:\n            count[c] = 1\n        else:\n            count[c] += 1\n    for i, c in enumerate(str1):\n        if count[c] == 1:\n            return c\n    return None\n",
        "num_ids": 74
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    print(re.findall(regex, string)!= [])\n    return(re.findall(regex, string)!= [])\ncheck_char(string)\n",
        "num_ids": 43
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    print(re.match(regex, string))\ncheck_char(\"hello\")\n",
        "num_ids": 22
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex,string))\n    \nprint(check_char(\"aa\")) # True\nprint(check_char(\"ab\")) # False\nprint(check_char(\"a\")) # True\nprint(check_char(\"abba\")) # True\nprint(check_char(\"baaa\")) # False\n",
        "num_ids": 74
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if bool(re.search(regex,string)): \n        return True\n    return False\nprint(check_char(\"abcdcba\")) # True\nprint(check_char(\"abcbcdcba\")) # True\nprint(check_char(\"abcdedcba\")) # False\n",
        "num_ids": 69
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # write your code here\n    if len(string)>1 and len(string)%2==0:\n        if string[0]==string[-1]:\n            print(\"String starts and ends with same character\")\n        else:\n            print(\"String doesn't ends with same character\")\n    else:\n        print(\"String not valid\")\n",
        "num_ids": 81
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 1: \n        return False\n    return (re.search(regex, string) and string[0] == string[-1]) \n",
        "num_ids": 42
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string)\nprint(check_char(\"abc\"))\n",
        "num_ids": 23
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex,string)\ndef check_char1(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    return re.match(regex,string)\n",
        "num_ids": 14
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False",
        "num_ids": 25
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = str(string)\n    # print(string)\n    if len(string) == 1:\n        print(\"Invalid string\")\n    else:\n        if string[0] == string[-1]:\n            print(string, \"is valid\")\n        else:\n            print(string, \"is invalid\")",
        "num_ids": 74
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = (a+b+c)//2\n",
        "num_ids": 16
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b\n    elif a > c:\n        return a\n    elif b < a:\n        if b > c:\n            return b\n        elif a < c:\n            return c\n        else:\n            return a\n    else:\n        return b\n",
        "num_ids": 99
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a > b) and (a > c):\n        median = a\n    elif (b > a) and (b > c):\n        median = b\n    else:\n        median = c\n    return median\n",
        "num_ids": 57
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    if (numbers[1] - numbers[0]) % 2 == 0:\n        return (numbers[1] - numbers[0]) / 2 + numbers[0]\n    else:\n        return (numbers[1] - numbers[0]) / 2 + numbers[0] + 1/2\n",
        "num_ids": 90
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    lst = [a,b,c]\n    lst.sort()\n    print(lst)\n    mid = len(lst)//2\n    return lst[mid]\n",
        "num_ids": 47
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Write your code here\n    if a < b:\n        if b < c:\n            median = b\n        elif c < b:\n            median = c\n        else:\n            median = b\n    elif a < c:\n        median = a\n    else:\n        median = c\n",
        "num_ids": 77
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            median=b\n        elif a<c:\n            median=c\n        else:\n            median=a\n    else:\n        if a>c:\n            median=a\n        elif b<c:\n            median=b\n        else:\n            median=c\n    return median\n",
        "num_ids": 91
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b < c:\n        return b\n    if c < a < b:\n        return a\n    if b < a < c:\n        return a\n    if b < c < a:\n        return c\n    if c < b < a:\n        return b\n    if a < c < b:\n        return c\n    if c < a < b:\n        return a\n",
        "num_ids": 93
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return a if b > c else b if a > b else c\n",
        "num_ids": 18
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b:\n        if a < c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b\n    else:\n        if a < c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n",
        "num_ids": 75
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_dict = {}\n    for num in nums:\n        sum_of_digits_dict[num] = sum([int(i) for i in str(num)])\n    return sum_of_digits_dict\n",
        "num_ids": 61
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits = sum_of_digits + num\n    return sum_of_digits\n",
        "num_ids": 46
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for i in nums:\n        sum_of_digits += sum([int(j) for j in str(i)])\n    return sum_of_digits\n",
        "num_ids": 52
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum = sum + num % 10\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += sum_of_digits(num)\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(nums)))\n",
        "num_ids": 16
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total\n",
        "num_ids": 36
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    lst = []\n    for num in nums:\n        lst.append(sum([int(d) for d in str(num)]))\n    return lst\n",
        "num_ids": 42
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # result = 0\n    # for num in nums:\n    #     result += sum([int(i) for i in str(num)])\n    # return result\n    # return sum([int(i) for i in str(num) for num in nums])\n",
        "num_ids": 65
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for i in nums:\n        s += sum(int(j) for j in str(i))\n    return s\n",
        "num_ids": 36
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1,test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_list = [test_tup1[i] ^ test_tup2[i] for i in range(len(test_tup1))]\n    return tuple(xor_list)\n",
        "num_ids": 51
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([a^b for a,b in zip(test_tup1,test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(value ^ test_tup2[i] for i, value in enumerate(test_tup1))\n",
        "num_ids": 31
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #return test_tup1 ^ test_tup2\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 44
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([a ^ b for a,b in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = ['a','a','a','b','c','d','e','e','e','f']\n    test_list = [('a','a'),('a','a'),('a','a'),('b','b'),('c','c'),('d','d'),('e','e'),('e','e'),('e','e'),('f','f')]\n    my_dict = {}\n    #print(list(enumerate(test_list)))\n    for i, j in enumerate(test_list):\n        if j not in my_dict:\n            my_dict[j] = [i]\n        else:\n            my_dict[j].append(i)\n    print(my_dict)\n    print(len(my_dict))\n    #print(my_dict.values())\n",
        "num_ids": 190
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n    \ntest_list = [(1, 1), (1, 1), (2, 2), (2, 2), (2, 2)]\nprint(extract_freq(test_list))",
        "num_ids": 57
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    set_test_list = set(test_list)\n    print(set_test_list)\n    return len(set_test_list)\n",
        "num_ids": 37
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # return len(set(test_list))\n    return len(set([tuple(sorted(sub_list)) for sub_list in test_list]))\n",
        "num_ids": 41
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count_unique_tuple = 0\n    for i in range(len(test_list)):\n        if test_list[i] not in test_list[i+1:]:\n            count_unique_tuple += 1\n    return count_unique_tuple\n",
        "num_ids": 65
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = Counter(test_list)\n    return freq\n",
        "num_ids": 18
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = [tuple(sorted(list(x))) for x in test_list]\n    return len(set(test_list))\n",
        "num_ids": 37
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    freq_list = []\n    for i in range(len(test_list)):\n        if test_list[i] not in unique_list:\n            unique_list.append(test_list[i])\n    for i in range(len(unique_list)):\n        count = 0\n        for j in range(len(test_list)):\n            if unique_list[i] == test_list[j]:\n                count += 1\n        freq_list.append(count)\n    return freq_list\n",
        "num_ids": 132
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result = set()\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            result.add(tuple(sorted((test_list[i], test_list[j]))))\n    return result\n    \n",
        "num_ids": 72
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    add_tup = ()\n    i = 0\n    while i < len(test_tup1):\n        add_tup += (test_tup1[i] + test_tup2[i], )\n        i += 1\n    return add_tup\n",
        "num_ids": 66
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    output_tup = ()\n    for index in range(len(test_tup1)):\n        output_tup += ((test_tup1[index] + test_tup2[index]),)\n    return output_tup\n",
        "num_ids": 59
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # if len(test_tup1) == len(test_tup2):\n    #     return tuple(tup1[idx] + tup2[idx] for idx in range(len(test_tup1)))\n    # else:\n    #     raise ValueError\n",
        "num_ids": 71
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(i + j for i,j in zip(test_tup1,test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([sum(x) for x in zip(test_tup1, test_tup2)])\n",
        "num_ids": 29
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([i+j for i,j in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # add_tup_tup = ()\n    # for i in range(0, len(test_tup1)):\n    #     add_tup_tup = add_tup_tup + (test_tup1[i] + test_tup2[i],)\n    # return add_tup_tup\n    return tuple(test_tup1[i] + test_tup2[i] for i in range(0, len(test_tup1)))\n",
        "num_ids": 120
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple( tuple(tup1[i] + tup2[i] for i in range(len(tup1))) for tup1,tup2 in zip(test_tup1,test_tup2) )\n",
        "num_ids": 57
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    output_tup = ()\n    for i in range(len(test_tup1)):\n        output_tup = output_tup + (test_tup1[i] + test_tup2[i], )\n    return output_tup\n",
        "num_ids": 64
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([sum(ele) for ele in zip(test_tup1, test_tup2)])\n",
        "num_ids": 29
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a < b else b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a > b else b\ndef power(a,b):\n    '''\n    Write a python function to find power of a number.\n    '''\n    return a ** b\ndef round(a,b):\n    '''\n    Write a python function to round number to a decimal.\n    '''\n    return round(a, b)\ndef abs(a,b):\n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    return abs(a, b)\ndef quotient(a,b):\n    '''\n    Write a python function to find the quotient of two numbers.\n    '''\n    return a // b\ndef modulus(a,b):\n    '''\n    Write a python function to find the modulus of two numbers.\n    '''\n    return a % b\ndef division(a,b):\n    '''\n    Write a python function to find the division of two numbers.\n    '''\n    return a / b\ndef floor(a,b):\n    '''\n    Write a python function to find the floor of a number.\n    '''\n    return a // b\ndef ceiling(a,b):\n    '''\n    Write a python function to find the ceiling of a number.\n    '''\n    return a // b\ndef remainder(a,b):\n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    return a % b\ndef lcm(a,b):\n    '''\n    Write a python function to find the lowest common multiple of two numbers.\n    '''\n    x = a if a > b else b\n    while True:\n        if x % a == 0 and x % b == 0:\n            lcm = x\n            break\n        x += 1\n    return lcm\ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    while b:\n        a, b = b, a%b\n    return a\ndef gcd_list(a):\n    '''\n    Write a python function to find the greatest common divisor of a list of numbers.\n    '''\n    l = [gcd(x, y) for x in a for y in a if x!= y]\n    return max(l)\ndef lcm_list(a):\n    '''\n    Write a python function to find the least common multiple of a list of numbers.\n    '''\n    l = [lcm(x, y) for x in a for y in a if x!= y]\n    return min(l)\ndef is_palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome.\n    '''\n    return n == int(str(n)[::-1])\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    return True if n > 1 and all(n%i!= 0 for i in range(2,int(n**0.5)+1)) else False\ndef fibonacci(n):\n    '''\n    Write a python function to find nth Fibonacci number.\n    '''\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==0:\n        return 0\n    elif n==1 or n==2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef factorial(n):\n    '''\n    Write a python function to find factorial of a number.\n    '''\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef harmonic_number(n):\n    '''\n    Write a python function to find harmonic number.\n    '''\n    return sum([1/i for i in range(1,n+1)])\ndef fibonacci_with_sequence(n):\n    '''\n    Write a python function to find nth Fibonacci number using sequence.\n    '''\n    a = 0\n    b = 1\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==0:\n        return a\n    elif n==1:\n        return b\n    else:\n        for i in range(2,n+1):\n            c = a+b\n            a = b\n            b = c\n        return b\ndef binary_to_decimal(s):\n    '''\n    Write a python function to convert a binary string to decimal.\n    '''\n    return int(s, 2)\ndef decimal_to_binary(n):\n    '''\n    Write a python function to convert a decimal number to binary.\n    '''\n    return bin(n)\ndef decimal_to_octal(n):\n    '''\n    Write a python function to convert a decimal number to octal.\n    '''\n    return oct(n)\ndef decimal_to_hexadecimal(n):\n    '''\n    Write a python function to convert a decimal number to hexadecimal.\n    '''\n    return hex(n)\ndef binary_to_octal(s):\n    '''\n    Write a python function to convert a binary string to octal.\n    '''\n    return oct(int(s, 2))\ndef binary_to_hexadecimal(s):\n    '''\n    Write a python function to convert a binary string to hexadecimal.\n    '''\n    return hex(int(s, 2))\ndef octal_to_binary(s):\n    '''\n    Write a python function to convert a octal string to binary.\n    '''\n    return bin(int(s, 8))\ndef octal_to_decimal(s):\n    '''\n    Write a python function to convert a octal string to decimal.\n    '''\n    return int(s, 8)\ndef octal_to_hexadecimal(s):\n    '''\n    Write a python function to convert a octal string to hexadecimal.\n    '''\n    return hex(int(s, 8))\ndef hexadecimal_to_binary(s):\n    '''\n    Write a python function to convert a hexadecimal string to binary.\n    '''\n    return bin(int(s, 16))\ndef hexadecimal_to_decimal(s):\n    '''\n    Write a python function to convert a hexadecimal string to decimal.\n    '''\n    return int(s, 16)\ndef hexadecimal_to_octal(s):\n    '''\n    Write a python function to convert a hexadecimal string to octal.\n    '''\n    return oct(int(s, 16))\ndef greatest_common_divisor(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    return gcd(a,b)\ndef least_common_multiple(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    return lcm(a,b)\ndef digital_root(n):\n    '''\n    Write a python function to find the digital root of a number.\n    '''\n    return n % 9 or 9\ndef kaprekar_number(n):\n    '''\n    Write a python function to check if a number is a Kaprekar number.\n    '''\n    sqr = int(n ** 0.5)\n    return n == sqr ** 2 + sqr\ndef palindrome_number(n):\n    '''\n    Write a python function to check if a number is palindrome.\n    '''\n    return str(n) == str(n)[::-1]\ndef armstrong_number(n):\n    '''\n    Write a python function to check if a number is an armstrong number.\n    '''\n    return sum([int(x)**len(str(n)) for x in str(n)]) == n\ndef power_of_x(a,b):\n    '''\n    Write a python function to check if a number is a power of a number.\n    '''\n    return b == int(log(a,",
        "num_ids": 12
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimum_list(arr):\n    '''\n    Write a python function to find the minimum of an array of numbers.\n    '''\n    min = arr[0]\n    for i in range(len(arr)):\n        if arr[i]<min:\n            min = arr[i]\n    return min\n",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        print(\"First num is greater than Second num\")\n    elif a==b:\n        print(\"Both numbers are same\")\n    else:\n        print(\"Second num is greater than First num\")\n    return\n    \nminimum(5,6",
        "num_ids": 64
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1:\n        for i in range(2,n):\n            if (n % i) == 0:\n                return False\n        return True\n    else:\n        return False\n        \ndef swap(a,b):\n    '''\n    Write a python function to swap the values of 2 variables without using 3rd variable.\n    '''\n    a,b=b,a\n    return a,b\n        \ndef palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    return s==s[::-1]\n        \ndef is_pangram(s):\n    '''\n    Write a python function to check whether the given string is pangram or not. A pangram is a sentence containing all the letters of the English alphabet at least once.\n    '''\n    return set(s.lower())>=set(\"abcdefghijklmnopqrstuvwxyz\")\n        \ndef roman_to_integer(s):\n    '''\n    Write a python function to convert the given roman string into integer.\n    '''\n    roman={'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000}\n    num=0\n    for i in range(len(s)-1):\n        if roman[s[i]]<roman[s[i+1]]:\n            num-=roman[s[i]]\n        else:\n            num+=roman[s[i]]\n    return num+roman[s[-1]]\n        \ndef factorial(n):\n    '''\n    Write a python function to compute n factorial.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n        \ndef reverse_string(s):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    return s[::-1]\n        \ndef reverse_words(s):\n    '''\n    Write a python function to reverse the words of the given string.\n    '''\n    return \" \".join(s.split(\" \")[::-1])\n        \ndef product(nums):\n    '''\n    Write a python function to find the product of a list of numbers.\n    '''\n    product=1\n    for i in nums:\n        product*=i\n    return product\n        \ndef is_perfect(n):\n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    sum_divisors=0\n    for i in range(1,n):\n        if n%i==0:\n            sum_divisors+=i\n    return sum_divisors==n\n    \ndef main():\n    '''\n    Write a function main(). This function should print \"Hello World\".\n    '''\n    print(\"Hello World\")\n    \nif __name__==\"__main__\":\n    main()\n    \n'''\nWrite a Python function to check whether a number is in a given range.\n'''\ndef is_in_range(num,x,y):\n    if num in range(x,y+1):\n        return True\n    else:\n        return False\n        \ndef all_prime_nums(a,b):\n    '''\n    Write a Python function to check whether a given number is prime or not.\n    '''\n    prime_nums=[]\n    for num in range(a,b+1):\n        if num>1:\n            for i in range(2,num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_nums.append(num)\n    return prime_nums\n    \ndef sum_squares(n):\n    '''\n    Write a Python function to print the sum of squares of all the numbers up to a given number.\n    '''\n    return sum(map(lambda x: x**2, range(1, n+1)))\n    \ndef concatenate(l1,l2):\n    '''\n    Write a Python function to concatenate two lists.\n    '''\n    return l1+l2\n    \ndef count_substring(string, sub_string):\n    '''\n    Write a Python function to count the number of occurrences of a substring in a string.\n    '''\n    return sum(1 for i in range(len(string)) if string.startswith(sub_string, i))\n    \ndef fact_recursive(n):\n    '''\n    Write a Python function to compute factorial of a given number using recursion.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*fact_recursive(n-1)\n        \ndef palindrome_recursive(s):\n    '''\n    Write a Python function to check whether a given string is palindrome or not using recursion.\n    '''\n    return s==s[::-1]\n        \ndef is_pangram_recursive(s):\n    '''\n    Write a Python function to check whether the given string is pangram or not using recursion. A pangram is a sentence containing all the letters of the English alphabet at least once.\n    '''\n    return set(s.lower())>=set(\"abcdefghijklmnopqrstuvwxyz\")\n        \ndef maximum_of_three(a,b,c):\n    '''\n    Write a Python function to find maximum of three given numbers.\n    '''\n    return maximum(maximum(a,b),c)\n        \ndef sum_divisors(n):\n    '''\n    Write a Python function to find the sum of divisors of a given number.\n    '''\n    return sum(i for i in range(1,n+1) if n%i==0)\n        \ndef prime_factors(n):\n    '''\n    Write a Python function to print the prime factors of a given number.\n    '''\n    l=[]\n    while n%2==0:\n        l.append(2)\n        n/=2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while n%i==0:\n            l.append(i)\n            n/=i\n    if n>2:\n        l.append(n)\n    return l\n        \ndef reverse(n):\n    '''\n    Write a Python function to reverse a given number.\n    '''\n    return int(str(n)[::-1])\n        \ndef rotate(string,n):\n    '''\n    Write a Python function to rotate characters in a string.\n    '''\n    return string[n:]+string[:n]\n        \ndef fibonacci(n):\n    '''\n    Write a Python function to compute the Fibonacci series up to a given number.\n    '''\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n    return a\n        \ndef sum_all(a):\n    '''\n    Write a Python function to compute the sum of all numbers in a list.\n    '''\n    sum=0\n    for i in a:\n        sum+=i\n    return sum\n        \ndef sum_even_values(a):\n    '''\n    Write a Python function to compute the sum of all even numbers in a list.\n    '''\n    sum=0\n    for i in a:\n        if i%2==0:\n            sum+=i\n    return sum\n        \ndef sum_odd_values(a):\n    '''\n    Write a Python function to compute the sum of all odd numbers in a list.\n    '''\n    sum=0\n    for i in a:\n        if i%2!=0:\n            sum+=i\n    return sum\n        \ndef sum_all_values(a):\n    '''\n    Write a Python function to compute the sum of all numbers in a list.\n    '''\n    sum=0",
        "num_ids": 6
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        return b\n    elif(a==b):\n        return a\n    else:\n        return a\ndef divisible(x,y):\n    '''\n    Write a python function to find if the number x is divisible by the number y.\n    '''\n    if(x%y==0):\n        return True\n    else:\n        return False\ndef palindrome(a):\n    '''\n    Write a python function to check if a string is palindrome.\n    '''\n    if(a==a[::-1]):\n        return True\n    else:\n        return False\ndef reverse(a):\n    '''\n    Write a python function to reverse a string.\n    '''\n    a=a[::-1]\n    return a\ndef check(a):\n    '''\n    Write a python function to check whether a given string is a pangram.\n    '''\n    a=a.split()\n    l=[]\n    for i in a:\n        l.append(set(i))\n    l=list(set().union(*l))\n    l.sort()\n    print(l)\n    if(l==list(string.ascii_lowercase)):\n        return True\n    else:\n        return False\n    \n    \n",
        "num_ids": 90
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef minimum_list(lst):\n    '''\n    Write a python function to find the minimum of a list of numbers.\n    '''\n    min=lst[0]\n    for item in lst:\n        if item<min:\n            min=item\n    return min\ndef maximum_list(lst):\n    '''\n    Write a python function to find the maximum of a list of numbers.\n    '''\n    max=lst[0]\n    for item in lst:\n        if item>max:\n            max=item\n    return max\ndef minimum_list_without_sorting(lst):\n    '''\n    Write a python function to find the minimum of a list of numbers.\n    You can assume that the list is already sorted.\n    '''\n    if len(lst)==0:\n        return None\n    return lst[0]\ndef maximum_list_without_sorting(lst):\n    '''\n    Write a python function to find the maximum of a list of numbers.\n    You can assume that the list is already sorted.\n    '''\n    if len(lst)==0:\n        return None\n    return lst[-1]\ndef min_and_max(lst):\n    '''\n    Write a python function to find the minimum and maximum of a list of numbers.\n    You can assume that the list is already sorted.\n    '''\n    max=lst[0]\n    min=lst[0]\n    for item in lst:\n        if item>max:\n            max=item\n        if item<min:\n            min=item\n    return min,max\ndef min_and_max_without_sorting(lst):\n    '''\n    Write a python function to find the minimum and maximum of a list of numbers.\n    '''\n    return lst[0],lst[-1]\ndef min_and_max_without_sorting_2(lst):\n    '''\n    Write a python function to find the minimum and maximum of a list of numbers.\n    '''\n    return max(lst),min(lst)\ndef test_max_function():\n    assert maximum(3,5)==5\ndef test_minimum_function():\n    assert minimum(3,5)==3\ndef test_maximum_list_function():\n    assert maximum_list([4,6,2,1,9])==9\ndef test_minimum_list_function():\n    assert minimum_list([4,6,2,1,9])==1\ndef test_minimum_list_without_sorting_function():\n    assert minimum_list_without_sorting([4,6,2,1,9])==1\ndef test_maximum_list_without_sorting_function():\n    assert maximum_list_without_sorting([4,6,2,1,9])==9\ndef test_min_and_max_function():\n    assert min_and_max([3,5,1,2,6])==(1,6)\ndef test_min_and_max_without_sorting_function():\n    assert min_and_max_without_sorting([3,5,1,2,6])==(1,6)\ndef test_min_and_max_without_sorting_function_2():\n    assert min_and_max_without_sorting([3,5,1,2,6])==(1,6)\ndef test_min_and_max_without_sorting_function_3():\n    assert min_and_max_without_sorting([3,5,1,2,6])==(1,6)",
        "num_ids": 370
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return(a)\n    else:\n        return(b)\ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return(a)\n    else:\n        return(b)\ndef gcd(a,b):\n    '''\n    Write a python function to find the gcd of two numbers.\n    '''\n    if b==0:\n        return(a)\n    else:\n        return(gcd(b,a%b))\ndef lcm(a,b):\n    '''\n    Write a python function to find the lcm of two numbers.\n    '''\n    return(a*b//gcd(a,b))\ndef LCM(arr):\n    '''\n    Write a python function to find the lcm of an array of numbers.\n    '''\n    lcm=arr[0]\n    for i in range(1,len(arr)):\n        lcm=lcm*arr[i]//gcd(lcm,arr[i])\n    return(lcm)\ndef multiplicar_arrays(a,b):\n    '''\n    Write a python function to multiply two arrays.\n    '''\n    res=[]\n    for i in range(len(a)):\n        for j in range(len(b[0])):\n            for k in range(len(b)):\n                res.append(a[i][k]*b[k][j])\n    return(res)\ndef sum_arrays(a,b):\n    '''\n    Write a python function to sum two arrays.\n    '''\n    res=[]\n    for i in range(len(a)):\n        res.append(a[i]+b[i])\n    return(res)\ndef invert_array(a):\n    '''\n    Write a python function to invert an array.\n    '''\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[j]==0:\n                a[j],a[i]=a[i],a[j]\n                break\n    return(a)\ndef power_array(a,n):\n    '''\n    Write a python function to power an array.\n    '''\n    b=[]\n    for i in range(len(a)):\n        b.append(a[i]**n)\n    return(b)\ndef print_array(a):\n    '''\n    Write a python function to print an array.\n    '''\n    print(a)\ndef rotate_array(a):\n    '''\n    Write a python function to rotate an array.\n    '''\n    k=0\n    for i in range(len(a)//2):\n        for j in range(i,len(a)-i-1):\n            a[i][j],a[j][len(a)-1-i]=a[j][len(a)-1-i],a[i][j]\n            k=k+1\n    return(a)\ndef n_power_array(a,n):\n    '''\n    Write a python function to n_power an array.\n    '''\n    for i in range(n):\n        a=rotate_array(a)\n    return(a)\ndef exchange_first_last(a):\n    '''\n    Write a python function to exchange first and last element of an array.\n    '''\n    a[0],a[len(a)-1]=a[len(a)-1],a[0]\n    return(a)\ndef reverse_array(a):\n    '''\n    Write a python function to reverse an array.\n    '''\n    for i in range(len(a)//2):\n        j=len(a)-1-i\n        a[i],a[j]=a[j],a[i]\n    return(a)\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    res=1\n    for i in range(1,n+1):\n        res=res*i\n    return(res)\ndef fibonacci(n):\n    '''\n    Write a python function to find the fibonacci of a number.\n    '''\n    a,b=0,1\n    if n<=0:\n        print(\"Incorrect input\")\n    elif n==1:\n        return(a)\n    else:\n        for i in range(2,n+1):\n            c=a+b\n            a,b=b,c\n        return(b)\ndef prime(n):\n    '''\n    Write a python function to check a number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return(0)\n    return(1)\ndef sieve_erat(n):\n    '''\n    Write a python function to generate prime number upto n using sieve of eratosthenes algorithm.\n    '''\n    a=[1]*n\n    a[0]=a[1]=0\n    for i in range(2,n):\n        if a[i]:\n            for j in range(i*i,n,i):\n                a[j]=0\n    return(a)\ndef sieve_erat_opt(n):\n    '''\n    Write a python function to generate prime number upto n using sieve of eratosthenes algorithm.\n    '''\n    a=[1]*n\n    a[0]=a[1]=0\n    for i in range(2,n):\n        if a[i]:\n            a[i*i:n:i]=[0]*len(a[i*i:n:i])\n    return(a)\ndef palindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    a=n\n    rev=0\n    while(n>0):\n        rev=rev*10+(n%10)\n        n=n//10\n    if a==rev:\n        return(1)\n    return(0)\ndef reverse(n):\n    '''\n    Write a python function to reverse a number.\n    '''\n    rev=0\n    while(n>0):\n        rev=rev*10+n%10\n        n=n//10\n    return(rev)\ndef armstrong(n):\n    '''\n    Write a python function to check whether a number is armstrong or not.\n    '''\n    a=n\n    s=0\n    while(n>0):\n        r=n%10\n        s=s+r**3\n        n=n//10\n    if a==s:\n        return(1)\n    return(0)\ndef sum_factorial(n):\n    '''\n    Write a python function to sum the factorial of all the digits of a number.\n    '''\n    a=n\n    s=0\n    while(n>0):\n        r=n%10\n        s=s+factorial(r)\n        n=n//10\n    if a==s:\n        return(1)\n    return(0)\ndef palindrome_factorial(n):\n    '''\n    Write a python function to check whether a number is palindrome and its factorial sum is also a palindrome or not.\n    '''\n    a=n\n    b=factorial(n)\n    c=reverse(b)\n    if a==c and palindrome(a) and palindrome(b):\n        return(1)\n    return(0)\ndef palindrome_factorial_opt(n):\n    '''\n    Write a python function to check whether a number is palindrome and its factorial sum is also a palindrome or not.\n    '''\n    a=n\n    b=factorial(n)\n    c=reverse(b)\n    if a==c and palindrome(a) and palindrome(b):\n        return(1)\n    return(0)\ndef is_palindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    a=n\n    rev=0\n    while(n>0):\n        r=n%10\n        rev=rev*10+r",
        "num_ids": 35
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if set(tuplex).intersection(tuple1):\n        return True\n    else:\n        return False\n    # Function to check whether an element exists in a tuple.\n    # tuplex = tuple\n    # tuple1 = tuple\n",
        "num_ids": 59
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n",
        "num_ids": 11
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element == tuplex:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if any(i in tuple1 for i in tuplex):\n        return \"True\"\n    else:\n        return \"False\"\n",
        "num_ids": 34
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\nprint(check_tuplex(tuple1,tuple2))\n",
        "num_ids": 28
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return(tuple1 in tuplex)\n",
        "num_ids": 14
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #\n    print('\\n\\n\\n')\n    print('Checking:',tuplex,tuple1)\n    print('\\n')\n    #\n    if len(tuplex)!= len(tuple1):\n        return False\n    #\n    for i in range(len(tuplex)):\n        print(tuplex[i],tuple1[i])\n        if tuplex[i]!= tuple1[i]:\n            print('\\nReturning FALSE!')\n            return False\n    #\n    print('\\nReturning TRUE!')\n    return True",
        "num_ids": 143
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    sum = 0\n    while x:\n        sum ^= x\n        x &= (x - 1)\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    return True\n",
        "num_ids": 20
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    num_parity = 0\n    while x: \n        num_parity ^= x & 1\n        x >>= 1\n    return num_parity\n",
        "num_ids": 40
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x%2==0):\n        print(\"Given number is even\")\n    else:\n        print(\"Given number is odd\")\n",
        "num_ids": 34
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return 'even'\n    else: \n        return 'odd'\n    \n",
        "num_ids": 31
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2!= 0\n",
        "num_ids": 11
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # your code here\n    sum = 0\n    while x:\n        sum = sum + x % 10\n        x = x // 10\n    if sum % 2 == 0:\n        return 0\n    return 1\n",
        "num_ids": 51
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # if number is even, then even-odd parity is even\n    # if number is odd, then even-odd parity is odd\n    \n    # find even-odd parity of x\n    \n    if x%2 == 0:\n        parity = \"even\"\n    else:\n        parity = \"odd\"\n    return parity\n",
        "num_ids": 79
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2!= 0): \n        print(\"Parity is Odd\") \n    else: \n        print(\"Parity is Even\") \n",
        "num_ids": 39
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even\")\n    else:\n        print(x, \"is odd\")\n",
        "num_ids": 35
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    print(n)\n    a = [int(i) for i in str(n)]\n    print(a)\n    \n    i = 0\n    j = len(a) - 1\n    while i < j:\n        if a[i] < a[i + 1]:\n            i += 1\n        elif a[i] > a[i + 1]:\n            tmp = a[i]\n            a[i] = a[i + 1]\n            a[i + 1] = tmp\n            j = j - 1\n        else:\n            i = i + 1\n",
        "num_ids": 137
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if len(n) == 1:\n        return n\n    else:\n        n = [int(x) for x in n]\n        for i in range(len(n)):\n            if n[i] > n[i+1]:\n                n[i+1] = n[i]\n        for i in range(len(n)-1):\n            n[i] = n[i+1]\n        n[-1] = n[0]\n        n.pop()\n        n = [str(x) for x in n]\n        n = \"\".join(n)\n        return n\n        \ndef permutations_recursion(a,n,m,k):\n    if m == 0:\n        print(a)\n    else:\n        for i in range(k,n):\n            a[i], a[k] = a[k], a[i]\n            permutations_recursion(a,n,m-1,k+1)\n            a[i], a[k] = a[k], a[i]\n        \ndef permutations_stack(a,n,m):\n    stack = [[]]\n    a = [str(x) for x in a]\n    while stack:\n        a_s = stack.pop()\n        if len(a_s) == m:\n            print(''.join(a_s))\n        else:\n            for i in range(n):\n                if not i in a_s:\n                    stack.append(a_s + [i])\n                    \ndef nth_permutation_recursive(a,n,m,k):\n    if m == 0:\n        return\n    elif k == n:\n        print(a)\n    else:\n        for i in range(k,n):\n            a[k], a[i] = a[i], a[k]\n            nth_permutation_recursive(a,n,m-1,k+1)\n            a[k], a[i] = a[i], a[k]\n            \ndef nth_permutation_stack(a,n,m):\n    a = [str(x) for x in a]\n    a.sort()\n    stack = [[]]\n    while stack:\n        a_s = stack.pop()\n        if len(a_s) == m:\n            print(''.join(a_s))\n        else:\n            for i in range(n):\n                if not i in a_s:\n                    stack.append(a_s + [i])\n",
        "num_ids": 597
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    for i in range(len(n)-1, -1, -1):\n        if n[i] < n[i-1]:\n            break\n    if i == 0:\n        return -1\n    else:\n        bigger = int(n[i:])\n        smaller = int(n[:i])\n        for j in range(len(bigger)-1, -1, -1):\n            if bigger[j] < bigger[j-1]:\n                break\n        if j == 0:\n            return -1\n        else:\n            bigger = int(bigger[:j] + bigger[j-1] + bigger[j:])\n            bigger = int(bigger + smaller)\n            return bigger\n",
        "num_ids": 181
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = []\n    for i in str(n):\n        digits.append(int(i))\n    digits.sort()\n    digits.reverse()\n    new_digits = []\n    for i in digits:\n        new_digits.append(str(i))\n    num = int(''.join(new_digits))\n    return num\n",
        "num_ids": 88
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    i = 0\n    while i < len(n)-1:\n        if n[i] < n[i+1]:\n            break\n        i += 1\n    if i == len(n)-1:\n        return -1\n    j = len(n)-1\n    while n[j] == '0':\n        j -= 1\n    n[i], n[j] = n[j], n[i]\n    n[i+1:] = reversed(n[i+1:])\n    return int(''.join(n))\n",
        "num_ids": 138
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = list(str(n))\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] < s[i - 1]:\n            break\n    if i == 0:\n        return 0\n    s.insert(i - 1, s.pop(i))\n    return int(''.join(s))\n",
        "num_ids": 86
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(map(int, str(n)))\n    i = len(n)-1\n    while i>0 and n[i-1] <= n[i]:\n        i-=1\n    if i == 0:\n        return -1\n    j = len(n)-1\n    while n[j] <= n[i-1]:\n        j-=1\n    n[j], n[i-1] = n[i-1], n[j]\n    n[i:] = sorted(n[i:])\n    return int(''.join(map(str, n)))\n",
        "num_ids": 141
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = list(str(n))\n    i = 0\n    while i < len(s):\n        j = i+1\n        while j < len(s):\n            if int(s[i]) < int(s[j]):\n                temp = s[j]\n                del s[j]\n                s.insert(i, temp)\n                break\n            j+=1\n        i+=1\n    return int(''.join(s))\n",
        "num_ids": 107
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_list = []\n    while n > 0:\n        num_list.append(str(n % 10))\n        n = n // 10\n    num_list.reverse()\n    return int(''.join(num_list))\n",
        "num_ids": 57
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    def compare(n1, n2):\n        if n1 > n2:\n            return 1\n        elif n1 == n2:\n            return 0\n        else:\n            return -1\n        \n    def swap(num, f, t):\n        temps = []\n        for i in range(len(num)):\n            if i == f:\n                temps.append(t)\n            elif i == t:\n                temps.append(f)\n            else:\n                temps.append(num[i])\n        return ''.join(temps)\n    \n    def swap_recursive(num, f, t):\n        if f > t:\n            f, t = t, f\n        if f == 0:\n            return num\n        else:\n            return swap_recursive(swap(num, f-1, t-1), f, t-1)\n    \n    def rearrange(num):\n        s = list(str(num))\n        l = len(s)\n        if l == 1:\n            return s[0]\n        m = l // 2\n        r = l % 2\n        s1 = rearrange(int(''.join(s[:m])))\n        s2 = rearrange(int(''.join(s[m:])))\n        return str(s1) + str(s2) if r == 0 else str(s1) + str(s2) + str(s1)\n    \n    bigger_n = []\n    while n!= 0:\n        bigger_n.append(n%10)\n        n //= 10\n    bigger_n.sort(key=functools.cmp_to_key(compare))\n    \n    return int(rearrange(int(''.join(str(x) for x in bigger_n))))\n",
        "num_ids": 431
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        temp = nums1\n        nums1 = nums2\n        nums2 = temp\n    nums1.sort()\n    nums2.sort()\n    result = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(result) < k:\n                result.append([nums1[i], nums2[j]])\n            elif nums1[i] + nums2[j] < result[0][0] + result[0][1]:\n                heapq.heapreplace(result, [nums1[i], nums2[j]])\n    return result\n",
        "num_ids": 180
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # If k is equal to the number of elements in the first array, we can return the result directly.\n    if k >= len(nums1):\n        return [(x, y) for x in nums1 for y in nums2]\n",
        "num_ids": 58
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if len(nums1) == 1 or len(nums2) == 1:\n        return sorted(zip(nums1, nums2), key=lambda x:x[0] + x[1])[:k]\n",
        "num_ids": 81
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    min_heap = []\n    res = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i]+nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < min_heap[0][0]:\n                    break\n                else:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (nums1[i]+nums2[j], i, j))\n        if len(min_heap) == k:\n            break\n    while min_heap:\n        res.append([nums1[min_heap[0][1]], nums2[min_heap[0][2]]])\n        heapq.heappop(min_heap)\n    return res\n",
        "num_ids": 274
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    '''\n    if nums1 == [] or nums2 == []:\n        return []\n    if len(nums1) >= len(nums2):\n        pair_list = []\n        for num1 in nums1:\n            for num2 in nums2:\n                pair_list.append((num1, num2))\n    else:\n        pair_list = []\n        for num2 in nums2:\n            for num1 in nums1:\n                pair_list.append((num1, num2))\n    '''\n    if nums1 == [] or nums2 == []:\n        return []\n    pair_list = []\n    for num in nums1:\n        for num2 in nums2:\n            pair_list.append((num, num2))\n    pair_list.sort(key = lambda x: x[0] + x[1])\n    return pair_list[:k]\n",
        "num_ids": 92
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n",
        "num_ids": 29
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = [(nums1[0]+nums2[0], 0, 0)]\n    result = []\n    for _ in range(k):\n        curr_sum, i, j = heapq.heappop(heap)\n        result.append((nums1[i], nums2[j]))\n        if i+1 < len(nums1) and j+1 < len(nums2):\n            heapq.heappush(heap, (nums1[i+1]+nums2[j+1], i+1, j+1))\n        elif i+1 < len(nums1):\n            heapq.heappush(heap, (nums1[i+1]+nums2[j], i+1, j))\n        elif j+1 < len(nums2):\n            heapq.heappush(heap, (nums1[i]+nums2[j+1], i, j+1))\n    return result\n",
        "num_ids": 240
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    minHeap = []\n    res = []\n    for n1 in nums1:\n        for n2 in nums2:\n            if len(minHeap) < k:\n                heapq.heappush(minHeap, (n1 + n2, n1, n2))\n            else:\n                if minHeap[0][0] > n1 + n2:\n                    heapq.heappop(minHeap)\n                    heapq.heappush(minHeap, (n1 + n2, n1, n2))\n    for _, n1, n2 in minHeap:\n        res.append([n1, n2])\n    return res\n",
        "num_ids": 192
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, [nums1[i] + nums2[j], i, j])\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, [nums1[i] + nums2[j], i, j])\n    return [heapq.heappop(heap)[1:] for _ in range(k)]\n",
        "num_ids": 173
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums = nums1 + nums2\n    nums = sorted(nums)\n    return nums[:k]\n",
        "num_ids": 33
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min([element[0]*element[1] for element in list1])\n",
        "num_ids": 22
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #create a list to store the minimum product from the tuples\n    min_product_list = []\n    #iterate over the list\n    for tup1 in list1:\n        #store the first tuple\n        tup1 = tup1\n        #iterate over the list\n        for tup2 in list1:\n            #store the second tuple\n            tup2 = tup2\n            #check if the second tuple is not equal to the first tuple\n            if tup1!= tup2:\n                #check if the product of the first and second tuple is not already present in the list\n                if (tup1[0]*tup2[0]) not in min_product_list:\n                    #check if the product of the second and first tuple is not already present in the list\n                    if (tup2[0]*tup1[0]) not in min_product_list:\n                        #if the product is not already present then append it to the list\n                        min_product_list.append(tup1[0]*tup2[0])\n    #sort the list in ascending order\n    min_product_list.sort()\n    #return the minimum product from the list\n    return min_product_list[0]\n",
        "num_ids": 290
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    mini = min(list1[0][0] * list1[0][1], list1[1][0] * list1[1][1])\n    for i in range(0, len(list1)):\n        for j in range(i + 1, len(list1)):\n            if mini > list1[i][0] * list1[j][1]:\n                mini = list1[i][0] * list1[j][1]\n            elif mini > list1[i][1] * list1[j][0]:\n                mini = list1[i][1] * list1[j][0]\n    return mini\n",
        "num_ids": 153
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #list1 = [(5, 2), (1, 3), (4, 6)]\n    return min([(a, b) for a, b in list1], key=lambda x: x[0] * x[1])\n",
        "num_ids": 55
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    try:\n        if len(list1)<2:\n            return(None)\n        else:\n            min=list1[0][0]*list1[0][1]\n            for x in list1:\n                if x[0]*x[1]<min:\n                    min=x[0]*x[1]\n            return(min)\n    except:\n        return(None)\n",
        "num_ids": 98
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    from functools import reduce\n    from operator import mul\n    return reduce(mul, (min(tuple1) for tuple1 in list1))\n",
        "num_ids": 38
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # create a list to store the minimum product of the tuple\n    min_product_list = []\n    # loop through the list of tuples\n    for i in range(len(list1)):\n        # if the tuple of index i has index 0 or 1 greater than index 1, then append the tuple of index i to the min_product_list\n        if list1[i][0] < list1[i][1]:\n            min_product_list.append(list1[i])\n    # initialize the minimum product as the value of the first element in the min_product_list\n    min_product = list1[0][0]\n    # loop through the list of tuples\n    for i in range(len(min_product_list)):\n        # if the tuple of index i has the minimum product of the tuples within the min_product_list, then set the minimum product equal to the minimum product of the tuples within the min_product_list\n        if min_product_list[i][0] <= min_product_list[i][1]:\n            min_product = min_product_list[i][0]\n    # return the minimum product\n    return min_product\n",
        "num_ids": 273
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    min_product = list1[0][0] * list1[0][1]\n    for pair in list1:\n        if pair[0] * pair[1] < min_product:\n            min_product = pair[0] * pair[1]\n    return min_product\n",
        "num_ids": 84
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2=[]\n    for i in range(0,len(list1)):\n        a=min(list1[i])\n        list2.append(a)\n    print(list2)\n    return min(list2)\n    \n    \nlist1=[(2,3,4),(1,2,3,4,5),(6,1,8,3,4,5),(6,7,8,9,4,5)]\nprint(min_product_tuple(list1))\n",
        "num_ids": 123
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_value = list1[0]\n    for tuple1 in list1:\n        if tuple1[0] * tuple1[1] < min_value[0] * min_value[1]:\n            min_value = tuple1\n",
        "num_ids": 58
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    val = listval[0]\n    for i in listval:\n        if i < val:\n            val = i\n    return val\n",
        "num_ids": 35
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    minvalue = listval[0]\n    return minvalue\n",
        "num_ids": 24
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val=listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val=item\n    return min_val\n",
        "num_ids": 43
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for item in listval:\n        if item < minval:\n            minval = item\n    return minval\n",
        "num_ids": 39
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    result = listval[0]\n    for i in listval:\n        if i < result:\n            result = i\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = 0\n    for i in range(len(listval)):\n        if type(listval[i]) == int:\n            if listval[i] < min_val:\n                min_val = listval[i]\n        elif type(listval[i]) == list:\n            if len(listval[i])!= 0:\n                if len(listval[i]) < min_val:\n                    min_val = listval[i]\n    return min_val\n",
        "num_ids": 119
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    try:\n        min_val = listval[0]\n        for i in range(len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n    except:\n        min_val = None\n    return min_val\n",
        "num_ids": 71
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for l in listval:\n        if l < min_val:\n            min_val = l\n    return min_val\n",
        "num_ids": 43
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = None\n    for val in listval:\n        if minval == None:\n            minval = val\n        elif val < minval:\n            minval = val\n    return minval\n",
        "num_ids": 50
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum=listval[0]\n    for x in listval:\n        if x < minimum:\n            minimum = x\n    return minimum\n",
        "num_ids": 35
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'(_\\w)', lambda x:x.group(1)[1].upper(), word)\n    return word\n",
        "num_ids": 36
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(w.title() for w in word.split('_'))\n",
        "num_ids": 23
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s1 = re.sub('_([a-zA-Z])',lambda m:m.group(1).upper(),word)\n    return s1\n",
        "num_ids": 39
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.)', lambda m: m.group(1).upper(), word)\n",
        "num_ids": 25
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # return re.sub(r'_([a-zA-Z])', lambda x: x.group(1).upper(), word)\n    return \"\".join(w.capitalize() for w in word.split('_'))\n",
        "num_ids": 57
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_word = ''\n    for i in range(len(word)):\n        if i > 0 and word[i]!= '_':\n            new_word += word[i].upper()\n        else:\n            new_word += word[i]\n    return new_word\n",
        "num_ids": 69
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    import re\n    if word == \"\":\n        return \"\"\n    result = re.sub('_([a-zA-Z])', lambda m: m.group(1).upper(), word)\n    if result[0].isupper():\n        result = result[0].lower() + result[1:]\n    return result\n",
        "num_ids": 77
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_[a-zA-Z0-9]', lambda x: x.group(0)[1].upper(), word)\n",
        "num_ids": 37
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake_case = word.split('_')\n    for i in range(len(snake_case)):\n        snake_case[i] = snake_case[i].title()\n",
        "num_ids": 48
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # List all the characters in a string\n    list_words = [char for char in word]\n    # print(list_words)\n    # If first character is lowercase, add '_' at the beginning and rest all characters in uppercase\n    if list_words[0] >= 'a' and list_words[0] <= 'z':\n        list_words.insert(0, '_')\n    # Loop through the list of characters and if next character is uppercase then make all characters in between lowercase and convert it to uppercase\n    for i in range(1, len(list_words)):\n        if list_words[i] >= 'A' and list_words[i] <= 'Z':\n            for j in range(i, len(list_words)):\n                list_words[j] = list_words[j].lower()\n            # print(list_words)\n            for j in range(i, 0, -1):\n                list_words[j] = list_words[j].upper()\n    # Join the list of characters to make into a string\n    camelcase_string = \"\".join(list_words)\n    # return the string\n    return camelcase_string\n",
        "num_ids": 283
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # l = list(filter(lambda x: x % 2 == 0,l))\n    # for i in range(len(l)):\n    #     if l[i] % 2!= 0:\n    #         l.pop(i)\n    return list(filter(lambda x: x % 2 == 0,l))\n",
        "num_ids": 78
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(filter(lambda x: x % 2 == 0, l))\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    #even = []\n    #for i in l:\n    #    if i % 2 == 0:\n    #        even.append(i)\n    #return even\n    return [i for i in l if i % 2 == 0]\n",
        "num_ids": 58
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l)==0:\n        return []\n    else:\n        if l[0] % 2 == 0:\n            return [l[0]] + remove_odd(l[1:])\n        else:\n            return remove_odd(l[1:])\n",
        "num_ids": 66
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    print(list(filter((lambda x: x%2 == 0), l)))\n",
        "num_ids": 21
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for item in l:\n        if item%2 == 0:\n            new_list.append(item)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    assert type(list1) is list\n    assert type(n) is int\n    assert n >= 0\n",
        "num_ids": 27
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n-1] for x in list1]\n",
        "num_ids": 18
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for tup in list1:\n        if list1.index(tup) == n-1:\n            return tup[n-1]\n",
        "num_ids": 37
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n    # return list(map(lambda tup: tup[n], list1))\n",
        "num_ids": 30
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return (list1[n-1])\n",
        "num_ids": 13
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Your code here\n    if n > len(list1) or n < 1:\n        return \"Invalid input\"\n    else:\n        return list1[n-1]\n",
        "num_ids": 44
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    element = []\n    for i in list1:\n        element.append(i[n])\n    return element\n",
        "num_ids": 29
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    new_list = []\n    for tup in list1:\n        new_list.append(tup[n-1])\n",
        "num_ids": 33
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    set1 = set(list1)  \n    set2 = set(list2)  \n    if len(set1 & set2)>0:  \n        return 1  \n    return 0  \n",
        "num_ids": 49
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\nprint(overlapping([1,2,3,4],(1,2,3,4)))\nprint(overlapping([1,2,3,4],(5,6,7,8)))\n",
        "num_ids": 74
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) == len(list2):\n        for x in list1:\n            if x in list2:\n                return True\n                break\n            else:\n                return False\n    else:\n        print(\"The lists have different lengths.\")\n        ",
        "num_ids": 62
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(i in list2 for i in list1)\n",
        "num_ids": 17
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False \n",
        "num_ids": 34
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return bool(set(list1).intersection(list2))\n",
        "num_ids": 18
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    count=0\n    for i in list1:\n        for j in list2:\n            if(i==j):\n                count+=1\n                break;\n    if(count==0):\n        return 0\n    else:\n        return 1\n    \n    \ndef overlapping1(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if(i==j):\n                return 1\n    return 0\n",
        "num_ids": 34
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) < len(list2):\n        shortlist = list1\n        longlist = list2\n    else:\n        shortlist = list2\n        longlist = list1\n",
        "num_ids": 48
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list2 for x in list1)\nprint(overlapping([1,2,3,4,5],[1,2,3,4,6]))",
        "num_ids": 44
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    result = None\n    max_p = -1\n    \n    for i in arr:\n        for j in arr:\n            if i!= j:\n                product = i * j\n                if product > max_p:\n                    max_p = product\n                    result = (i, j)\n    \n    return result\n    \nif __name__ == '__main__': \n    '''\n    array = list(map(int, input().split()))\n    print(max_Product(array))\n    '''\n    array = [10, 30, 20, 40]\n    print(max_Product(array))\n    ",
        "num_ids": 26
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = [0, -1, 1, 2, 3, 4] \n    max = 0\n    \n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] * arr[j]) > max:\n                max = (arr[i] * arr[j])\n",
        "num_ids": 86
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # initialize the result\n    highest_product = -1\n    # iterate through the array\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > highest_product:\n                highest_product = product\n    return highest_product\n",
        "num_ids": 89
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 1\n    max_product_pair = []\n    max_product_pair_v1 = []\n    max_product_pair_v2 = []\n",
        "num_ids": 42
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    a = 0\n    b = 0\n    arr.sort()\n    #print(arr)\n    for i in range(len(arr)-1):\n        if(arr[i]*arr[i+1]>a):\n            a = arr[i]*arr[i+1]\n            b = [arr[i],arr[i+1]]\n    return b\n",
        "num_ids": 90
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #Initialize max_product to 1 \n    max_product = 1 \n    #Initialize pointers i and j \n    i = 0 \n    j = 0 \n    #Loop over the elements in the array \n    for i in range(0, len(arr)): \n        #Initialize temp to first element \n        temp = arr[i] \n        #Loop over remaining elements in the array \n        for j in range(i + 1, len(arr)): \n            #Update temp to highest product \n            temp = temp * arr[j] \n        #Update max_product if temp is highest product \n        if temp > max_product: \n            max_product = temp \n    return max_product \n",
        "num_ids": 174
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n",
        "num_ids": 66
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # if the input array has only one element, return that element\n    if len(arr) == 1:\n        return arr[0]\n    # sort input array in descending order\n    arr.sort(reverse=True)\n    # initialize max_product with the first two elements in the sorted array\n    max_product = arr[0] * arr[1]\n    # initialize the first two indices\n    left = 0\n    right = 1\n    while right < len(arr):\n        # update the max_product if the current product is higher than the previous max_product\n        if max_product < arr[left] * arr[right]:\n            max_product = arr[left] * arr[right]\n        # increment left index\n        left += 1\n        # increment right index\n        right += 1\n    return max_product\n",
        "num_ids": 190
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    length = len(arr) \n    arr = sorted(arr) \n    max_product = arr[length - 1] * arr[length - 2] \n    return max_product \n",
        "num_ids": 47
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    max_product = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            product = arr[i] * arr[j] \n            if product > max_product: \n                max_product = product \n                i_max = i \n                j_max = j \n    return (i_max, j_max) \ndef min_Product(arr): \n    '''\n    Write a python function to find a pair with minimum product from a given array of integers.\n    '''\n    n = len(arr) \n    min_product = sys.maxsize \n    for i in range(0, n): \n        for j in range(i + 1, n): \n            product = arr[i] * arr[j] \n            if product < min_product: \n                min_product = product \n                i_min = i \n                j_min = j \n    return (i_min, j_min) \n",
        "num_ids": 109
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    d = dict() \n    for item in Input: \n        if item[0] in d.keys(): \n            d[item[0]] += 1\n        else: \n            d[item[0]] = 1\n    return max(d, key = lambda key: d[key])\n",
        "num_ids": 71
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    print(Input)\n    for i in range(0,len(Input)):\n        for j in range(0,len(Input)):\n            if(len(Input[i]) > len(Input[j])):\n                Input[i],Input[j] = Input[j],Input[i]\n    #print(Input)\n    for j in range(0,len(Input)):\n        if(Input[j][0] not in Input[j+1:]):\n            return Input[j][0]\n",
        "num_ids": 122
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        for j in range(i + 1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                Output.append(Input[i])\n    return Output\n",
        "num_ids": 65
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    l1 = []\n    for tup in Input:\n        l1.append(tup[0])\n    return tuple(set(l1))\n",
        "num_ids": 38
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for tup in Input:\n        if tup not in Output:\n            Output.append(tup)\n    return Output\n",
        "num_ids": 37
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Split the tuple \n    L1 = [a for a in Input]\n    #Split the list \n    L2 = [list(a) for a in Input]\n    #List Comprehension\n    return [a[0] for a in L1 for b in L2 if a==b]\n    \ndef group_sets(Input): \n    '''\n    Write a function to find common first element in given set of set.\n    '''\n    return list(set.intersection(*map(set, Input)))\n    \ndef group_list_of_dict(Input):\n    '''\n    Write a function to find common elements in given list of dictionary.\n    '''\n    #Using List Comprehension\n    return [a for a in Input if set(a.keys()).intersection(set(Input[0].keys())) == set(a.keys())]\n    \ndef group_dict_of_dict(Input):\n    '''\n    Write a function to find common elements in given dictionary of dictionary.\n    '''\n    #Using List Comprehension\n    return [{a:b for a,b in a.items() if a in Input[0]} for a in Input[0]]\n    \ndef group_sets_of_dict(Input):\n    '''\n    Write a function to find common elements in given set of dictionary.\n    '''\n    #Using Set Comprehension\n    return {a for a in Input[0] if a in Input}\n    \ndef group_sets_of_list(Input):\n    '''\n    Write a function to find common elements in given set of list.\n    '''\n    #Using Set Comprehension\n    return {a for a in Input[0] for b in Input if a in b}\n    \ndef group_sets_of_tuple(Input):\n    '''\n    Write a function to find common elements in given set of tuple.\n    '''\n    #Using Set Comprehension\n    return {a for a in Input[0] for b in Input if a in b}\n    \ndef main():\n    Input = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]\n    print(group_tuples(Input))\n    \n    Input = [{'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}]\n    print(group_dict_of_dict(Input))\n    \n    Input = [{'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}]\n    print(group_list_of_dict(Input))\n    \n    Input = [{'a', 'b'}, {'c', 'd'}, {'e', 'f'}]\n    print(group_sets_of_dict(Input))\n    \n    Input = [{'a', 'b'}, {'c', 'd'}, {'e', 'f'}]\n    print(group_sets_of_list(Input))\n    \n    Input = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]\n    print(group_tuples(Input))\n    \n    Input = [{'a', 'b'}, {'c', 'd'}, {'e', 'f'}]\n    print(group_sets_of_tuple(Input))\n    \nif __name__ == '__main__':\n    main()\n    ",
        "num_ids": 398
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input = [('a','b'), ('b','c'), ('c','d')]\n    # Output = 'a'\n    # Explanation = 'a' is common first element in all tuple.\n    \n    # Input = [('a','b'), ('b','a'), ('b','c'), ('a','c')]\n    # Output = 'b'\n    # Explanation = 'b' is common first element in all tuple.\n    \n    # Input = [('a','b'), ('b','c'), ('c','a'), ('a','c')]\n    # Output = 'c'\n    # Explanation = 'c' is common first element in all tuple.\n    # Similar = \n    # Common \n    # first \n    # element \n    # in \n    # tuple.\n    \n    # Input = [('a','b'), ('b','c'), ('c','d')]\n    # Output = None\n    # Explanation = There is no common element in all tuple.\n",
        "num_ids": 233
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    s_new=set()\n    for i in Input:\n        s_new.add(i[0])\n    Output=[]\n    for i in s_new:\n        Output.append((i,Input.count(i)))\n    return Output\nInput= [('a', 1), ('a', 2), ('a', 3), ('b', 4), ('b', 5)]\nprint(group_tuples(Input))",
        "num_ids": 99
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    dict = {}\n    Output = []\n    for item in Input:\n        try:\n            if item[0] not in dict:\n                dict[item[0]] = [item]\n            else:\n                dict[item[0]].append(item)\n        except:\n            pass\n",
        "num_ids": 70
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    l=[]\n    for i in range(0,len(Input)):\n        l.append(Input[i][0])\n    print(l)\n",
        "num_ids": 39
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(i)>max:\n            max = len(i)\n            max_str = i\n    return max_str\n",
        "num_ids": 46
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max1=0\n    for i in range(len(lst)):\n        if(len(lst[i])>max1):\n            max1=len(lst[i])\n    for i in range(len(lst)):\n        if(len(lst[i])==max1):\n            print(lst[i])\ndef main():\n    lst=[]\n    n=int(input(\"Enter the number of elements you want in list : \"))\n    for i in range(n):\n        lst.append(input(\"Enter element \" + str(i+1) + \" : \"))\n    Find_Max(lst)\n",
        "num_ids": 157
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for x in range(len(lst)):\n        if len(lst[x])>max:\n            max=len(lst[x])\n            max_str=lst[x]\n    print(\"Max string is: {}\".format(max_str))\n",
        "num_ids": 71
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m = 0\n    for i in lst:\n        if len(i) > m:\n            m = len(i)\n            mx = i\n    return mx\n",
        "num_ids": 43
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        max_length = len(lst[0])\n        for item in lst:\n            if len(item) > max_length:\n                max_length = len(item)\n        return max_length\n",
        "num_ids": 70
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n    return max",
        "num_ids": 47
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > m:\n            m = len(lst[i])\n    for j in range(len(lst)):\n        if len(lst[j]) == m:\n            return lst[j]\n",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_len = []\n    for i in range(len(lst)):\n        lst_len.append(len(lst[i]))\n    return lst_len.index(max(lst_len))\n    # return max(lst_len)\n",
        "num_ids": 68
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_len = [len(i) for i in lst]\n    return lst[lst_len.index(max(lst_len))]\n",
        "num_ids": 41
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if (len(lst) > 0): \n        max_len = len(lst[0]) \n        for i in range(1, len(lst)): \n            if (len(lst[i]) > max_len): \n                max_len = len(lst[i]) \n                max_str = lst[i] \n",
        "num_ids": 88
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for number in list1:\n        rounded_number = round(number)\n        sum += rounded_number\n    print(sum * len(list1))\n",
        "num_ids": 43
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        i = round(i)\n        sum += i\n    print(sum*len(list1))\n",
        "num_ids": 39
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    sum_rounded = 0\n    \n    for i in list1:\n        sum_rounded += round(i)\n    \n    return sum_rounded*len(list1)\n    \nprint(round_and_sum([1.2, 2.4, 3.7]))\nprint(round_and_sum([5.2, 4.9, 3.4, 3.1, 3.8]))\nprint(round_and_sum([2.2, 4.5, 3.9, 1.7, 4.3, 2.1, 2.9]))\n",
        "num_ids": 137
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_of_list = 0\n    for i in list1:\n        sum_of_list += round(i)\n    print(len(list1)*sum_of_list)\n",
        "num_ids": 46
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = []\n    total_sum = 0\n    for i in list1:\n        rounded_list.append(round(i))\n    for i in rounded_list:\n        total_sum = total_sum + i\n    print(total_sum*len(rounded_list))\n",
        "num_ids": 70
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        list1[list1.index(i)] = round(i)\n        total += list1[list1.index(i)]\n    return total * len(list1)\n",
        "num_ids": 56
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [round(x) for x in list1]\n    print(sum(list1))\n    print(len(list1))\n    return sum(list1)*len(list1)\n    #print(list1)\n",
        "num_ids": 57
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    length = len(list1)\n    sum = 0\n    for i in range(0, length):\n        sum += list1[i]\n    sum = round(sum)\n    print(sum*length)\n",
        "num_ids": 52
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum([round(num) for num in list1])*len(list1)\n",
        "num_ids": 23
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    import math\n    print(math.fsum(round(elem,2) for elem in list1))\n    print(round(math.fsum(list1),2))\nround_and_sum([1.2, 2.3, 3.4])\n",
        "num_ids": 64
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using the formula\n    # sum = ((n*(n+1)*(2*n+1))/6)\n    # return the result\n",
        "num_ids": 37
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #n = 10\n    return(n**3)\n",
        "num_ids": 16
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubesum=0\n    for i in range(n):\n        cubesum+=i**3\n    return cubesum\n    \ndef rec_fac(n):\n    '''\n    Write a python function which accepts a number and return the factorial of the number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*rec_fac(n-1)\n        \ndef factorial(n):\n    if n<0:\n        return 0\n    else:\n        return n*factorial(n-1)\n        \ndef rec_sum(n):\n    if n==0:\n        return 0\n    else:\n        return n+rec_sum(n-1)\n",
        "num_ids": 104
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Type your code here\n    total = 0\n    for i in range(1, n+1):\n        if(i % 2 == 0):\n            total += i**3\n    return total\n",
        "num_ids": 48
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if (n < 0): \n        return \"Incorrect input\"\n    else:\n        ans = 0\n        for i in range(1, n + 1):\n            ans += i ** 3\n        return ans\nprint(cube_Sum(4))\n",
        "num_ids": 61
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if(i%2==0):\n            total+=i*i*i\n    return total\n",
        "num_ids": 43
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return(sum([i**3 for i in range(n)]))\n",
        "num_ids": 19
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c = 0\n    for i in range(1, n+1): \n        c += i**3\n    return c\n    \ndef cube_sum_fast(n):\n    '''\n    Find the cube sum of first n even numbers using Fast Method\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return (n**3 + cube_sum_fast(n-2))\n    \ndef check_fibonacci_sum(n):\n    '''\n    Find the term of Fibonacci series which sum is equal to the given number.\n    '''\n    a, b = 1, 1\n    fibonacci_list = [a, b]\n    while a < n:\n        a, b = b, a+b\n        fibonacci_list.append(b)\n    return fibonacci_list\n    \ndef fibonacci_sum(n):\n    '''\n    Find the Fibonacci series sum of the given number.\n    '''\n    if n < 2:\n        return n\n    return fibonacci_sum(n-1) + fibonacci_sum(n-2)\n    \ndef is_prime(n):\n    '''\n    Find whether the given number is a prime number.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, n//2+1):\n        if n%i == 0:\n            return False\n    return True\n    \ndef is_prime_fast(n):\n    '''\n    Find whether the given number is a prime number by using the Fast Method.\n    '''\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n%2 == 0 or n%3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n%i == 0 or n%(i+2) == 0:\n            return False\n        i += 6\n    return True\n    \ndef find_prime_list_under_n(n):\n    '''\n    Find the list of prime numbers under the given number.\n    '''\n    prime_list = []\n    for i in range(2, n+1):\n        if is_prime_fast(i):\n            prime_list.append(i)\n    return prime_list\n    \ndef prime_list_sum(n):\n    '''\n    Find the sum of the list of prime numbers under the given number.\n    '''\n    return sum(find_prime_list_under_n(n))\n",
        "num_ids": 19
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+(i*i*i)\n    return sum",
        "num_ids": 35
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += i\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \"-\"\n    new_tup = delimiter.join(test_tup)\n    return new_tup\n",
        "num_ids": 34
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return_string = \"\"\n    for i in test_tup:\n        return_string += str(i) + \"-\"\n    return return_string\n",
        "num_ids": 38
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return(delimiter.join(test_tup))\n",
        "num_ids": 17
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for element in test_tup:\n        result = result + str(element) + \"-\"\n    return result[:-1]\n",
        "num_ids": 38
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    res = delimiter.join(test_tup)\n    return res\n",
        "num_ids": 28
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # 1st solution\n    # delimeter = \"-\"\n    # result = delimeter.join(test_tup)\n",
        "num_ids": 31
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    s = ''.join(test_tup)\n    return s\n",
        "num_ids": 19
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    return sum/n\n",
        "num_ids": 35
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\ndef is_leap_year(year):\n    '''\n    Write a python function to check if a given year is a leap year or not.\n    If year is leap print \u201cLEAP YEAR\u201d else print \u201cNOT A LEAP YEAR\u201d.\n    '''\n    if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n        print(\"LEAP YEAR\")\n    else:\n        print(\"NOT A LEAP YEAR\")\ndef find_Smallest_And_Largest(numbers):\n    '''\n    Write a python function to find smallest and largest of n numbers using min and max function.\n    '''\n    print(f'Smallest number: {min(numbers)}')\n    print(f'Largest number: {max(numbers)}')\ndef solve_Quadratic_Equation(a,b,c):\n    '''\n    Write a python function to solve quadratic equation and print two solutions.\n    '''\n    d = (b*b - 4*a*c)**0.5\n    x1 = (-b + d)/(2*a)\n    x2 = (-b - d)/(2*a)\n    print(f'Two solutions of {a}x^2 + {b}x + {c} are {x1} and {x2}')\ndef generate_Random_String(n):\n    '''\n    Write a python function to generate a random string of length n.\n    '''\n    import random\n    import string\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(n))\ndef find_Max_Continous_Sum(lst):\n    '''\n    Write a python function to find the maximum sum of a continous subarray.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        sum = 0\n        for j in range(i,len(lst)):\n            sum += lst[j]\n            if sum > max:\n                max = sum\n    return max\ndef count_Vowels_And_Consonants_In_A_String(string):\n    '''\n    Write a python function to count the number of vowels and consonants in a string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count_vowels = 0\n    count_consonants = 0\n    for i in string:\n        if i in vowels:\n            count_vowels += 1\n        else:\n            count_consonants += 1\n    print(f'Number of vowels: {count_vowels}')\n    print(f'Number of consonants: {count_consonants}')\ndef find_Factorial_Of_Number_Recursively(n):\n    '''\n    Write a python function to find the factorial of n using recursion.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*find_Factorial_Of_Number_Recursively(n-1)\ndef find_Factorial_Of_Number_Iteratively(n):\n    '''\n    Write a python function to find the factorial of n using iteration.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    return fact\ndef find_Fibonacci_Number_Recursively(n):\n    '''\n    Write a python function to find the fibonacci of n using recursion.\n    '''\n    if n <= 2:\n        return 1\n    else:\n        return find_Fibonacci_Number_Recursively(n-1) + find_Fibonacci_Number_Recursively(n-2)\ndef find_Fibonacci_Number_Iteratively(n):\n    '''\n    Write a python function to find the fibonacci of n using iteration.\n    '''\n    f1 = 1\n    f2 = 1\n    for i in range(1,n+1):\n        f = f1 + f2\n        f1,f2 = f2,f\n    return f\ndef find_Number_Of_Largest_Numbers(n,lst):\n    '''\n    Write a python function to find the number of largest elements in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i == max(lst):\n            count += 1\n    return count\ndef find_Number_Of_Smallest_Numbers(n,lst):\n    '''\n    Write a python function to find the number of smallest elements in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i == min(lst):\n            count += 1\n    return count\ndef main():\n    # find_Average_Of_Cube(5)\n    # is_leap_year(2019)\n    # find_Smallest_And_Largest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n    # solve_Quadratic_Equation(1,2,3)\n    # generate_Random_String(8)\n    # print(find_Max_Continous_Sum([1,2,3,4,5,6,7,8,9,10,11]))\n    # count_Vowels_And_Consonants_In_A_String('gaurav malhotra')\n    # print(find_Factorial_Of_Number_Recursively(5))\n    # print(find_Factorial_Of_Number_Iteratively(5))\n    # print(find_Fibonacci_Number_Recursively(10))\n    # print(find_Fibonacci_Number_Iteratively(10))\n    # print(find_Number_Of_Largest_Numbers(5,[1,2,3,4,5,6,7,8,9,10]))\n    # print(find_Number_Of_Smallest_Numbers(5,[1,2,3,4,5,6,7,8,9,10]))\n    pass\nif __name__ == '__main__':\n    main(",
        "num_ids": 383
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #p = 1\n    #Sum = 0\n    #for i in range(n):\n    #    p = p*(i+1)\n    #    Sum = Sum + p\n    #print(Sum)\n    #Average = Sum/n\n    #print(Average)\n    #return(Average)\n    print(sum(i**3 for i in range(1,n+1)))\n    return(sum(i**3 for i in range(1,n+1)))\n",
        "num_ids": 115
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\n",
        "num_ids": 33
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #cube_list = []\n    #for x in range(1, n + 1):\n        #cube_list.append(x**3)\n    #print('Average of cube of first {} numbers is {}'.format(n, sum(cube_list) / n))\n    \n    return sum([x**3 for x in range(1, n + 1)]) / n\n    \nprint(find_Average_Of_Cube(10))\n",
        "num_ids": 104
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum/(n*n*n)\n",
        "num_ids": 38
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    avg=sum/n\n    print(avg)\n    \n    \n",
        "num_ids": 46
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n+1):\n        total = total + (i*i*i)\n    return total/(n*n*n)\n    \n    \n    \ndef main():\n    print(find_Average_Of_Cube(3))\n    print(find_Average_Of_Cube(5))\n    print(find_Average_Of_Cube(10))\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 110
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    ",
        "num_ids": 36
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = ((n*(n+1))/2)*((n*(n+1))/2)*((n*(n+1))/2)\n    return avg\n",
        "num_ids": 44
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        result.append(item[-1])\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_string = []\n    for i in test_tuple:\n        rear_string.append(i[-1])\n    return rear_string\n",
        "num_ids": 40
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # First, extract only rear index element of each string\n    return [tuple[-1] for tuple in test_tuple]\n",
        "num_ids": 33
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    #O(1)\n    return test_tuple[1]\n    #O(n)\n    # result = list(test_tuple)\n    # for index, value in enumerate(result):\n    #     result[index] = value[-1]\n    # return tuple(result)\n",
        "num_ids": 73
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = list(filter(lambda x: type(x) == int or type(x) == str, test_tuple))\n    return rear_list\n",
        "num_ids": 41
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[::-1][0]\n",
        "num_ids": 16
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count = count + 1\n    return count\n    ",
        "num_ids": 34
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        sublist = []\n        for j in range(i,len(list1)):\n            sublist.append(list1[j])\n            if x in sublist:\n                count += 1\n    return count\n",
        "num_ids": 70
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        for j in range(len(list1[i])): \n            if list1[i][j] == x: \n                count += 1\n    return count \n",
        "num_ids": 61
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for element in list1:\n        if x in element:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1: \n        if x in i: \n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for y in list1:\n        if x in y:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        temp_list = list1[i]\n        if x in temp_list:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        temp=list1[i]\n        if x in temp:\n            count+=1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1: \n        if isinstance(i, list):\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if type(nums)!= list:\n        return 'Please pass a list of integers.'\n    return [i for i in nums if i % 2!= 0]\n",
        "num_ids": 42
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))\n",
        "num_ids": 21
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
        "num_ids": 46
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2 == 1]\n",
        "num_ids": 19
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    evens = []\n    for i in nums:\n        if i%2 == 0:\n            evens.append(i)\n    return evens\n",
        "num_ids": 39
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums\n",
        "num_ids": 45
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #new_list = []\n    #for num in nums:\n    #    if num % 2 == 0:\n    #        new_list.append(num)\n    #return new_list\n    return [num for num in nums if num % 2 == 0]\n",
        "num_ids": 66
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    day = dt[:2]\n    month = dt[3:5]\n    year = dt[6:]\n    return day+\"-\"+month+\"-\"+year\n",
        "num_ids": 46
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    # dt = list(map(int,dt))\n    return dt[2]+'-'+dt[1]+'-'+dt[0]\n",
        "num_ids": 49
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = re.split('[-]',dt)\n    return '-'.join(date[::-1])\n",
        "num_ids": 30
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # import re\n    # def change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    regex = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    # regex = r\"\\d{4}-(\\d{2})-(\\d{2})\"\n    \n    dt = input(\"Enter a date: \")\n    \n    if re.match(regex, dt):\n        print(\"\\nOriginal date: \", dt)\n        \n        dt_splitted = dt.split('-')\n        \n        dt_new = dt_splitted[2] + '-' + dt_splitted[1] + '-' + dt_splitted[0]\n        \n        print(\"Converted date: \", dt_new)\n    else:\n        print(\"\\nDate is not valid.\")\n    \n    print()\n    \n    return\n",
        "num_ids": 194
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt == 'NaT':\n        return dt\n    else:\n        dd,mm,yyyy = re.split('-',dt)\n        return (dd+\"-\"+mm+\"-\"+yyyy)\n",
        "num_ids": 55
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[8:10]+'-'+dt[5:7]+'-'+dt[:4]\n",
        "num_ids": 29
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if '-' in dt:\n        dt = dt.split('-')\n        if len(dt[1]) == 1:\n            dt[1] = '0' + dt[1]\n        if len(dt[2]) == 1:\n            dt[2] = '0' + dt[2]\n        return '-'.join(dt)\n    else:\n        return dt\n",
        "num_ids": 97
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    print(re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt))\n",
        "num_ids": 44
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # dt = '2019-03-01'\n    date, month, year = dt.split('-')\n    day = '0'+date[:2] if len(date) < 2 else date[:2]\n    return day + '-' + month + '-' + year\n",
        "num_ids": 70
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.replace(\"/\",\"-\")\n    return dt\n",
        "num_ids": 20
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # The subarray's length\n    h = 1\n    # The number of times to go through the while loop\n    while h >= 1:\n        # Initialise a variable h\n        h = h // 3 + 1\n        # Start sorting\n        while h > 0:\n            for i in range(h, len(my_list)):\n                temp = my_list[i]\n                j = i\n                # Sort the subarray of length h\n                while j >= h and my_list[j - h] > temp:\n                    my_list[j] = my_list[j - h]\n                    j -= h\n                my_list[j] = temp\n            h = h // 3 + 1\n    return my_list\n",
        "num_ids": 170
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    assert isinstance(my_list, list), 'list must be of type list'\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 134
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = size//2\n",
        "num_ids": 19
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) == 0:\n        return []\n",
        "num_ids": 18
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n",
        "num_ids": 108
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # print(my_list)\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        # print(gap)\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # print(my_list)\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n",
        "num_ids": 133
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Initialize a gap\n    gap = len(my_list) // 2\n",
        "num_ids": 21
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n",
        "num_ids": 108
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Set an initial gap\n    gap = len(my_list) // 2\n",
        "num_ids": 21
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x,y: x & y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(elem_and(elem1, elem2) for elem1, elem2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 43
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup3 = ()\n    if len(test_tup1) > len(test_tup2):\n        for i in range(len(test_tup1)):\n            if i < len(test_tup2):\n                test_tup3 += (test_tup1[i] and test_tup2[i],)\n            else:\n                test_tup3 += (test_tup1[i],)\n    else:\n        for i in range(len(test_tup2)):\n            if i < len(test_tup1):\n                test_tup3 += (test_tup1[i] and test_tup2[i],)\n            else:\n                test_tup3 += (test_tup2[i],)\n    return test_tup3\n",
        "num_ids": 199
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup3 = (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n    return test_tup3\n",
        "num_ids": 53
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i and j for i, j in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup3 = ()\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] == 1 and test_tup2[i] == 1:\n            test_tup3 = test_tup3 + (1,)\n        else:\n            test_tup3 = test_tup3 + (0,)\n    return test_tup3\n",
        "num_ids": 100
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i & j for i, j in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1_int = tuple(map(int, test_tup1))\n    test_tup2_int = tuple(map(int, test_tup2))\n    return tuple(map(lambda x, y: x & y, test_tup1_int, test_tup2_int))\n",
        "num_ids": 78
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i1 & i2 for i1, i2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # This function finds the directrix of a parabola\n",
        "num_ids": 16
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = Symbol('x')\n    y = a*x**2 + b*x + c\n    directrix = solve(y, x)\n    return directrix\n",
        "num_ids": 41
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = Symbol('x')\n    y = Symbol('y')\n    try:\n        parabola = (a*x**2) + (b*x*y) + (c*y**2)\n        derivative_parabola = parabola.diff(x)\n        result = solve(derivative_parabola, y)\n        directrix = (a*(result[0])**2) + (b*(result[0])*result[1]) + (c*(result[1])**2)\n        return (directrix)\n    except:\n        raise Exception(\"Please input the correct format.\")\n",
        "num_ids": 149
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4 * a * c\n    if disc < 0: \n        return (0,0)\n    else:\n        return (b - disc**0.5) / (2 * a), (b + disc**0.5) / (2 * a)\n",
        "num_ids": 68
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    from fractions import Fraction\n    import math\n    \n    D = b ** 2 - 4 * a * c\n    x_1 = (-b + D ** 0.5) / (2 * a)\n    x_2 = (-b - D ** 0.5) / (2 * a)\n    \n    return x_1, x_2\n",
        "num_ids": 82
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    #returns directrix\n    def directrix(a, b, c):\n        #formula for directrix: ax^2 + bx + c = 0\n        # a - 2b = -2c\n        # a - 2c = -2b\n        # a + 2b = 2c\n        # -2a = 2c + 2b\n        # -2c = -2b + a\n        return ((2*a*c)+(2*b*c)+(a*a))/(2*a)\n    \n    print (\"The directrix of the parabola with equation %d*x^2 + %d*x + %d = 0 is: %d\" %(a, b, c, directrix(a, b, c)))\n    \n    \nparabola_directrix(2, 7, 4)\nparabola_directrix(2, 3, 6)\nparabola_directrix(3, 4, 7)\nparabola_directrix(7, 6, 8)\nparabola_directrix(1, 6, 8)\nparabola_directrix(0, 7, 8)\n",
        "num_ids": 265
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        x_max = 0\n        x_min = -4 * b / (5 * c)\n    else:\n        delta = b ** 2 - 4 * a * c\n        x_max = (-b - math.sqrt(delta)) / (2 * a)\n        x_min = (-b + math.sqrt(delta)) / (2 * a)\n    return x_max, x_min\n",
        "num_ids": 106
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math \n    return -b/(2*a) \n",
        "num_ids": 18
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = np.linspace(-100, 100)\n    y = a*(x**2) + b*x + c\n    plt.plot(x, y)\n    return x, y\n",
        "num_ids": 49
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    return (-b + d**0.5)/(2*a)\n",
        "num_ids": 32
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1) & set(list2))!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if (list1 == [] or list2 == []):\n        return False\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    flag = False\n    for x in list1:\n        for y in list2:\n            if x == y:\n                flag = True\n    return flag\n",
        "num_ids": 39
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1).intersection(set(list2)))\n",
        "num_ids": 20
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if (len(list1) == 0 and len(list2) == 0):\n        return False\n    else:\n        list1.sort()\n        list2.sort()\n        if(len(list1)>=len(list2)):\n            for i in range(len(list2)):\n                if(list1[i] == list2[i]):\n                    return True\n                else:\n                    return False\n        else:\n            for i in range(len(list1)):\n                if(list1[i] == list2[i]):\n                    return True\n                else:\n                    return False\n",
        "num_ids": 147
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return True if len(list(set(list1).intersection(list2))) > 0 else False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    print('Task 1')\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if len(set1.intersection(set2))!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    result = False\n    for x in list1:\n        for y in list2:\n            if x == y:\n                result = True\n                return result\n",
        "num_ids": 39
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return base1 + base2 / 2 + height\n",
        "num_ids": 14
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # First, define the function\n",
        "num_ids": 10
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    total = base1 + base2 + height\n    total = int(total / 2)\n    return total\n",
        "num_ids": 27
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2) * height/2\n",
        "num_ids": 16
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2)/2 * height\n    return area\n",
        "num_ids": 20
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5 * (base1 + base2) * height\n",
        "num_ids": 18
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = False\n    for i in arr:\n        if i > number:\n            flag = True\n            return flag\n    return flag\n",
        "num_ids": 34
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for item in arr:\n        if item > number:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    print(f'Checking if {number} is greater than {arr}')\n    for i in arr:\n        if i > number:\n            print(f'{number} is greater than {i}')\n        else:\n            print(f'{number} is not greater than {i}')\n",
        "num_ids": 72
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if type(arr) == list:\n        if number > max(arr):\n            return True\n        else:\n            return False\n    else:\n        return \"The value you entered is not a list.\"\n",
        "num_ids": 50
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return False\n    else:\n        return True\n",
        "num_ids": 23
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] >= number:\n            return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number < i:\n            return False\n    return True\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i>number:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if number < num:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.findall(text)\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a = re.findall(r\"(?=.*a)(?:b.*)+\", text)\n    return a\n",
        "num_ids": 29
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.findall('ab*',text)\n",
        "num_ids": 15
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab*', text) is not None\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab+', text) is not None\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    return re.search(r'ab*', text) is not None\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or one b.\n    '''\n    return re.search(r'ab?', text) is not None\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{1,}', text) is not None\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,}', text) is not None\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{1,}', text) is not None\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,}', text) is not None\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{3,}', text) is not None\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_twenty_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_twenty_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_thirty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_thirty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_thirty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab{2,3}', text) is not None\ndef text_match_thirty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n",
        "num_ids": 23
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = r'a.+?b+?'\n    #pattern = r'a(.+?)b+?'\n    pattern = r'a(.+?)b+?'\n    match = re.search(pattern,text)\n    print(match)\n",
        "num_ids": 63
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(r\"ab+\", text)\n    if result!= None:\n        return 'found'\n    else:\n        return 'not found'\n",
        "num_ids": 42
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pat = re.compile(r'ab+')\n    result = pat.search(text)\n    return result!= None\n",
        "num_ids": 33
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = \"ab+\"\n    result = re.search(pattern, text)\n    if result is None:\n        return \"Not Found\"\n    else:\n        return \"Found a match\"\n",
        "num_ids": 48
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find(\"ab\") == -1:\n        return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # return re.findall(r'ab+', text)\n    return re.findall(r'ab{1,}', text)\n",
        "num_ids": 36
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Example\n    # last_digit(4)\n    # 4\n    # last_digit(8)\n    # 8\n    # last_digit(45)\n    # 5\n    # last_digit(100)\n    # 0\n    # last_digit(101)\n    # 1\n    # last_digit(122)\n    # 2\n    # last_digit(1223)\n    # 3\n",
        "num_ids": 98
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        n = -n\n    return (n%10)\n",
        "num_ids": 23
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n    \nprint(last_Digit(1234))\n",
        "num_ids": 21
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n",
        "num_ids": 14
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if type(n)!= int:\n        return \"Error! Please enter an integer value.\"\n    elif n < 0 :\n        return \"Negative numbers have no last digits.\"\n    else:\n        return n % 10\n        \ndef first_and_last(n):\n    '''\n    Write a python function to find the first and last digit of a number.\n    '''\n    if type(n)!= int:\n        return \"Error! Please enter an integer value.\"\n    elif n < 0 :\n        return \"Negative numbers have no first and last digits.\"\n    else:\n        first = n // 100\n        last = n % 10\n        return first,last\n        \ndef sum_and_product(n):\n    '''\n    Write a python function to find the sum and product of the first and last digits of a number.\n    '''\n    if type(n)!= int:\n        return \"Error! Please enter an integer value.\"\n    elif n < 0 :\n        return \"Negative numbers have no first and last digits.\"\n    else:\n        first, last = first_and_last(n)\n        return last + first, last * first\n        \ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime.\n    '''\n    if type(n)!= int:\n        return \"Error! Please enter an integer value.\"\n    elif n < 1 :\n        return \"The number must be greater than or equal to 1.\"\n    elif n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n        \ndef gcd(a, b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return \"Error! Please enter integer values.\"\n    elif a < 0 or b < 0:\n        return \"Negative values have no greatest common divisors.\"\n    elif a == 0 or b == 0:\n        return \"The greatest common divisor of 0 and 0 is 0.\"\n    elif a == 1 or b == 1:\n        return \"The greatest common divisor of 1 and 1 is 1.\"\n    elif a > b:\n        for i in range(b, 0, -1):\n            if a % i == 0 and b % i == 0:\n                return i\n    elif b > a:\n        for i in range(a, 0, -1):\n            if a % i == 0 and b % i == 0:\n                return i\n                \ndef is_square(n):\n    '''\n    Write a python function to check whether a number is square or not.\n    '''\n    if type(n)!= int:\n        return \"Error! Please enter an integer value.\"\n    elif n < 0:\n        return \"Negative numbers have no square roots.\"\n    elif n == 0:\n        return False\n    else:\n        i = 1\n        while i * i <= n:\n            if i * i == n:\n                return True\n                break\n            i = i + 1\n        return False\n        \ndef is_even(n):\n    '''\n    Write a python function to check whether a number is even or not.\n    '''\n    if type(n)!= int:\n        return \"Error! Please enter an integer value.\"\n    elif n < 0:\n        return \"Negative numbers are not even.\"\n    elif n == 0:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef is_odd(n):\n    '''\n    Write a python function to check whether a number is odd or not.\n    '''\n    if type(n)!= int:\n        return \"Error! Please enter an integer value.\"\n    elif n < 0:\n        return \"Negative numbers are not odd.\"\n    elif n == 0:\n        return False\n    elif n % 2 == 1:\n        return True\n    else:\n        return False\n        \ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    if type(n)!= int:\n        return \"Error! Please enter an integer value.\"\n    elif n < 0:\n        return \"Negative numbers have no digits.\"\n    elif n == 0:\n        return 0\n    else:\n        sum = 0\n        while n > 0:\n            sum = sum + n % 10\n            n = n // 10\n        return sum\n        \ndef is_pandigital(n):\n    '''\n    Write a python function to check whether a number is pandigital or not.\n    '''\n    if type(n)!= int:\n        return \"Error! Please enter an integer value.\"\n    elif n < 0:\n        return \"Negative numbers have no pandigital multiples.\"\n    elif n == 0:\n        return False\n    else:\n        pan = []\n        for i in range(1, len(str(n)) + 1):\n            pan.append(i)\n        str_n = str(n)\n        if set(pan) == set(str_n):\n            return True\n        else:\n            return False\n        \ndef is_Armstrong(n):\n    '''\n    Write a python function to check whether a number is Armstrong or not.\n    '''\n    if type(n)!= int:\n        return \"Error! Please enter an integer value.\"\n    elif n < 0:\n        return \"Negative numbers have no Armstrong multiples.\"\n    elif n == 0:\n        return False\n    else:\n        sum = 0\n        temp = n\n        while n > 0:\n            d = n % 10\n            sum = sum + d ** 3\n            n = n // 10\n        if sum == temp:\n            return True\n        else:\n            return False\n        \ndef generate_pandigital():\n    '''\n    Write a python function to generate a pandigital number.\n    '''\n    pan = []\n    for i in range(1, len(str(n)) + 1):\n        pan.append(i)\n    for i in range(1, len(str(n)) + 1):\n        pan.append(i)\n    s = \"\".join(map(str, pan))\n    return s\n        \ndef sum_of_squares(n):\n    '''\n    Write a python function to find the sum of squares of digits of a number.\n    '''\n    if type(n)!= int:\n        return \"Error! Please enter an integer value.\"\n    elif n < 0:\n        return \"Negative numbers have no squares.\"\n    elif n == 0:\n        return 0\n    else:\n        sum = 0\n        while n > 0:\n            sum = sum + (n % 10) ** 2\n            n = n // 10\n        return sum\n        \ndef convert_to_words(n):\n    '''\n    Write a python function to convert a number to words.\n    '''\n    ones = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n    tens = [\"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n    sum = \"\"\n    if n < 0:\n        return \"Negative numbers have no words representation.\"\n    elif n < 20:\n        return ones[n]\n    elif n < 100:\n        return tens[n // 10 - 2] + (ones[n % 10] if n % 10!= 0 else \"\")\n    elif n < 1000:\n        return ones[n // 100] + \" hundred\" + ((\"and \" + convert_to_words(n % 100)) if n % 100!= 0 else \"\")\n    elif n < 1000000:\n        return ones[n // 1000] + \" thousand\" + ((\"and \" + convert_to_words(n % 1000)) if n % 1000!= 0 else \"\")\n    elif n < 1000000000:\n        return ones[n // 1000000] + \" million\" + ((\"and \" + convert_to_words(n % 1000000)) i",
        "num_ids": 325
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n > 9 :\n        n = n//10\n    return n\n",
        "num_ids": 20
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #print(n)\n    #print(n % 10)\n    return n % 10\n",
        "num_ids": 24
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n    \ndef factorial(num):\n    if num == 1:\n        return 1\n    else:\n        return num * factorial(num-1)\n        \ndef split_into_buckets(s, n):\n    '''\n    Write a function that takes a string and an integer n and returns a list\n    of n substrings from the string, in order from left to right. If there\n    are fewer characters than n, return as many as you can. If n is less than\n    1, return an empty list.\n    '''\n    list1 = []\n    if len(s) < n:\n        return list1\n    else:\n        for i in range(n):\n            list1.append(s[i])\n    return list1\n    \ndef square_digits(num):\n    '''\n    Write a Python function, square_digits, that takes an integer and returns\n    that integer\u2019s digits raised to the fourth power.\n    '''\n    list1 = []\n    list2 = []\n    for i in str(num):\n        list1.append(int(i))\n    for i in list1:\n        list2.append(i**4)\n    return list2\n    \ndef count_sevens(*args):\n    '''\n    Write a Python function, count_sevens, that takes any number of integers\n    and strings, and returns the number of integers that are 7.\n    '''\n    list1 = []\n    for i in args:\n        if type(i) == int:\n            list1.append(i)\n    num = 0\n    for i in list1:\n        if i == 7:\n            num += 1\n    return num\n    \ndef flatten(list1):\n    '''\n    Write a Python function, flatten, that takes a nested list and returns\n    a new list that contains all the values in the original list, all the\n    values in all the sublists, and so on.\n    '''\n    list2 = []\n    for i in list1:\n        if type(i) == list:\n            list2.extend(flatten(i))\n        else:\n            list2.append(i)\n    return list2\n    \ndef max_float(*args):\n    '''\n    Write a Python function, max_float, that takes a variable number of\n    floating-point numbers, and returns the largest one. Do not use the\n    built-in max function!\n    '''\n    list1 = []\n    for i in args:\n        if type(i) == float:\n            list1.append(i)\n    list2 = sorted(list1, reverse=True)\n    return list2[0]\n    \ndef big_diff(*args):\n    '''\n    Write a Python function, big_diff, that takes a variable number of\n    integers, and returns the difference between the largest and smallest\n    value. Do not use the built-in min or max functions!\n    '''\n    list1 = []\n    for i in args:\n        if type(i) == int:\n            list1.append(i)\n    list2 = sorted(list1)\n    return list2[-1] - list2[0]\n    \ndef centered_average(*args):\n    '''\n    Write a Python function, centered_average, that takes a variable number\n    of integers, and returns the average of all the integers, except not\n    counting the largest and smallest values in the set.\n    '''\n    list1 = []\n    for i in args:\n        if type(i) == int:\n            list1.append(i)\n    list2 = sorted(list1)\n    list3 = list2[1:-1]\n    return sum(list3)/len(list3)\n    \ndef reverse_pair(word):\n    '''\n    Write a Python function, reverse_pair, that takes a string and returns\n    True if one of the string\u2019s 2 character chunks is the reverse of the\n    other.\n    '''\n    list1 = []\n    for i in range(len(word)-1):\n        list1.append(word[i:i+2])\n    list2 = []\n    for i in range(len(word)-1):\n        list2.append(word[i+1:i+3])\n    list3 = []\n    for i in list1:\n        if i[::-1] in list2:\n            return True\n    return False\n    \ndef has_33(nums):\n    '''\n    Write a Python function, has_33, that takes a list of ints and returns\n    True if the list contains a 3 next to a 3 somewhere.\n    '''\n    for i in range(len(nums)-1):\n        if nums[i] == 3 and nums[i+1] == 3:\n            return True\n    return False\n    \ndef paper_doll(text):\n    '''\n    Write a Python function, paper_doll, that takes a string and returns a\n    version where for every character in the original, there are three\n    copies of that character.\n    '''\n    list1 = []\n    for i in text:\n        list1.append(i*3)\n    return ''.join(list1)\n    \ndef blackjack(*args):\n    '''\n    Write a Python function, blackjack, that takes a variable number of\n    integers and returns True if the sum of all the integers equals 21, or\n    if one of the integers is an 11 and the other is either a 1 or a 10\n    (because 11 + 1 = 12 and 11 + 10 = 21).\n    '''\n    list1 = []\n    for i in args:\n        if type(i) == int:\n            list1.append(i)\n    if sum(list1) == 21:\n        return True\n    elif 11 in list1 and sum(list1)!= 21:\n        if 11 in [1, 10] and sum(list1) > 21:\n            return False\n        else:\n            return True\n    else:\n        return False\n    \ndef summer_69(arr):\n    '''\n    Write a Python function, summer_69, that takes a list of integers and\n    returns the sum of all the integers from the list up until a 6 is\n    encountered. After that, it should return the sum of the remaining\n    integers.\n    '''\n    list1 = []\n    sum1 = 0\n    for i in arr:\n        if i == 6:\n            break\n        else:\n            list1.append(i)\n    for i in list1:\n        sum1 += i\n    return sum1\n    \ndef spy_game(*args):\n    '''\n    Write a Python function, spy_game, that takes a list of integers and\n    returns True if it contains 007 in order\n    '''\n    list1 = []\n    for i in args:\n        if i == 0 or i == 7:\n            list1.append(i)\n    if len(list1) >= 2:\n        return True\n    else:\n        return False\n    \ndef count_primes(*args):\n    '''\n    Write a Python function, count_primes, that takes a number and returns\n    the number of prime numbers that are less than or equal to that number.\n    '''\n    list1 = []\n    for i in args:\n        if i < 0:\n            return 0\n        if i == 0 or i == 1:\n            return 0\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                list1.append(i)\n    return len(list1)\n    \ndef count_primes2(*args):\n    '''\n    Write a Python function, count_primes, that takes a number and returns\n    the number of prime numbers that are less than or equal to that number.\n    '''\n    list1 = []\n    for i in args:\n        if i < 2:\n            return 0\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                list1.append(i)\n    return len(list1)\n    \ndef end_other(a, b):\n    '''\n    Write a Python function, end_other, that takes two strings, and returns\n    True if either string ends with the other string, ignoring uppe",
        "num_ids": 34
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    print(\"The list is \",list1)\n    print(\"The negative numbers are \",list(filter(lambda x:x<0,list1)))\n",
        "num_ids": 36
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    for i in range(list_len):\n        if list1[i] < 0:\n            print(list1[i])\n        else:\n            pass\n        \n    return list1\n    \ndef rev_list(list1):\n    '''\n    Write a python function to reverse a list.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    for i in range(list_len):\n        print(list1[list_len - 1 - i])\n        \n    return list1\n    \ndef palindromic(list1):\n    '''\n    Write a python function to check if a list is a palindrome.\n    '''\n    list_len = len(list1)\n    \n    for i in range(list_len):\n        if list1[i] == list1[list_len - 1 - i]:\n            print('True')\n        else:\n            print('False')\n            break\n            \n    return list1\n    \ndef odds_list(list1):\n    '''\n    Write a python function to return only the odd numbers in a list.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    for i in range(list_len):\n        if list1[i] % 2!= 0:\n            print(list1[i])\n        else:\n            pass\n            \n    return list1\n    \ndef evens_list(list1):\n    '''\n    Write a python function to return only the even numbers in a list.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    for i in range(list_len):\n        if list1[i] % 2 == 0:\n            print(list1[i])\n        else:\n            pass\n            \n    return list1\n    \ndef list_slicing(list1):\n    '''\n    Write a python function to return only the middle two items in a list.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    for i in range(list_len):\n        print(list1[2:4])\n        \n    return list1\n    \ndef list_slicing_without(list1):\n    '''\n    Write a python function to return only the middle two items in a list\n    without using slicing.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    print(list1[1:3])\n    \n    return list1\n    \ndef list_slicing_without_without(list1):\n    '''\n    Write a python function to return only the last three items in a list.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    print(list1[-3:])\n    \n    return list1\n    \ndef list_slicing_without_without_without(list1):\n    '''\n    Write a python function to return only the last three items in a list\n    without using slicing.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    print(list1[-3:len(list1)])\n    \n    return list1\n    \ndef unique_list(list1):\n    '''\n    Write a python function to return a list of unique items in a list.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    list2 = []\n    \n    for i in range(list_len):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n        else:\n            pass\n            \n    return list2\n    \ndef unique_list_without(list1):\n    '''\n    Write a python function to return a list of unique items in a list without\n    using list comprehension.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    list2 = []\n    \n    for i in range(list_len):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n        else:\n            pass\n            \n    return list2\n    \ndef reverse_words(list1):\n    '''\n    Write a python function to return a list of words in the opposite order.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    list2 = []\n    \n    list1 = list1.split(' ')\n    \n    for i in range(list_len):\n        list2.append(list1[list_len - 1 - i])\n        \n    return list2\n    \ndef list_concatenate(list1, list2):\n    '''\n    Write a python function to return a single list containing all the items\n    from list1 and list2.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    list3 = []\n    \n    for i in range(list_len):\n        list3.append(list1[i])\n        list3.append(list2[i])\n    \n    return list3\n    \ndef list_concatenate_without(list1, list2):\n    '''\n    Write a python function to return a single list containing all the items\n    from list1 and list2 without using list comprehension.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    list3 = []\n    \n    for i in range(list_len):\n        list3.append(list1[i])\n        list3.append(list2[i])\n    \n    return list3\n    \ndef list_concatenate_without_without(list1, list2):\n    '''\n    Write a python function to return a single list containing all the items\n    from list1 and list2 without using list comprehension.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    list3 = []\n    \n    for i in range(list_len):\n        list3.append(list1[i])\n        list3.append(list2[i])\n        \n    return list3\n    \ndef list_concatenate_without_without_without(list1, list2):\n    '''\n    Write a python function to return a single list containing all the items\n    from list1 and list2 without using list comprehension.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    list3 = []\n    \n    for i in range(list_len):\n        list3.append(list1[i])\n        list3.append(list2[i])\n        \n    return list3\n    \ndef sum_list(list1):\n    '''\n    Write a python function to return the sum of all the numbers in a list.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    sum1 = 0\n    \n    for i in range(list_len):\n        sum1 += list1[i]\n    \n    return sum1\n    \ndef sum_list_without(list1):\n    '''\n    Write a python function to return the sum of all the numbers in a list.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    sum1 = 0\n    \n    for i in range(list_len):\n        sum1 += list1[i]\n        \n    return sum1\n    \ndef sum_list_without_without(list1):\n    '''\n    Write a python function to return the sum of all the numbers in a list.\n    '''\n    list_len = len(list1)\n    \n    print(list_len)\n    \n    sum1 = 0\n    \n    for i in list1:\n        sum1 += i\n        \n    return sum1\n    \ndef sum_list_without_without_without(list1):\n    '''\n    Write a python function to return the sum of al",
        "num_ids": 13
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x: x<0,list1))\n",
        "num_ids": 19
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n",
        "num_ids": 34
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            new_list.append(list1[i])\n    return new_list\n",
        "num_ids": 52
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_of_neg_nos = []\n    for i in list1:\n        if i < 0:\n            list_of_neg_nos.append(i)\n    return list_of_neg_nos\n",
        "num_ids": 52
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    return list2\n",
        "num_ids": 37
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #pass\n    return \"\".join(filter(str.isalnum, str1))\n",
        "num_ids": 23
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for c in str1:\n        if c.isalpha():\n            new_str += c\n    return new_str\n",
        "num_ids": 38
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    for i in str1:\n        if str1.count(i)%2!= 0:\n            str1 = str1.replace(i, \"\")\n    return str1\n",
        "num_ids": 47
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([char for char in str1 if char.isalpha()])\n    \ndef find_occurence(str1, str2):\n    '''\n    Write a function to find the occurences of a substring in a string.\n    '''\n    return str1.count(str2)\n    \ndef is_unique(str1):\n    '''\n    Write a function to check if a string is unique.\n    '''\n    return len(set(str1)) == len(str1)\n    \ndef palindrome(str1):\n    '''\n    Write a function to check if a string is palindrome.\n    '''\n    return str1 == str1[::-1]\n",
        "num_ids": 15
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #start writing your code here\n    l=[]\n    for i in str1:\n        if i not in l:\n            l.append(i)\n    str1=\"\".join(l)\n    return str1\n",
        "num_ids": 54
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1:\n        if i % 2 == 1:\n            str1 = str1.replace(i, '')\n    return str1\n",
        "num_ids": 38
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_string = ''\n    for c in str1:\n        if str1.count(c) % 2 == 0:\n            new_string += c\n    return new_string\n",
        "num_ids": 45
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str_list = list(str1)\n    new_list = []\n    for c in str_list:\n        if c not in new_list:\n            new_list.append(c)\n    new_string = \"\".join(new_list)\n    return new_string\n",
        "num_ids": 69
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1_list = list(str1)\n    for i in str1_list:\n        if ord(i) % 2!= 0:\n            str1_list.remove(i)\n    return ''.join(str1_list)\n",
        "num_ids": 60
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(i for i in str1 if not i % 2)\n",
        "num_ids": 21
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(len(test_list)):\n        if i < len(test_list):\n            if (test_list[i][0] == test_list[i+1][1] and test_list[i][1] == test_list[i+1][0]):\n                counter += 1\n    return counter\n    \nprint(count_bidirectional([(1, 3), (4, 2), (3, 1), (3, 1), (3, 2)]))",
        "num_ids": 121
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # You may want to create a new list to store the bidirectional pairs.\n    bidirectional_list = []\n    # You may want to create an empty dictionary to store the frequency of each\n    # tuple pair.\n    bidirectional_dict = {}\n",
        "num_ids": 62
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional = 0\n    for elem in test_list:\n        if (elem[0], elem[1]) in test_list:\n            bidirectional += 1\n    return bidirectional\n",
        "num_ids": 51
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) < 2:\n        return 0\n    output = 0\n    for i in range(len(test_list)):\n        if test_list[i][0] == test_list[i][1] and i + 1 < len(test_list) and test_list[i + 1][0] == test_list[i + 1][1]:\n            output += 1\n    return output\n",
        "num_ids": 99
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (test_list[i] == test_list[j] and i!= j):\n                count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pair = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j] and i!=j:\n                pair += 1\n    return pair\n",
        "num_ids": 66
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                bidirectional_pairs += 1\n    return bidirectional_pairs\n",
        "num_ids": 99
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_pairs = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i][1] == test_list[i+1][0] and test_list[i+1][1] == test_list[i][0]:\n            count_pairs += 1\n    return count_pairs\n",
        "num_ids": 83
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(s) for s in L))\n    \nprint(multiple_to_single([1, 1, 1, 1, 1])",
        "num_ids": 39
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # Hint: You can use the'sum' function to find the sum of the list of numbers.\n    \n    # Need to use some kind of for loop.\n    \n    if not L:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    \n    else:\n        return multiple_to_single(L[:-1]) * 10 + L[-1]\n",
        "num_ids": 100
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    new_number = []\n    for i in L:\n        if i.isdigit():\n            new_number.append(i)\n    new_number = int(\"\".join(new_number))\n    return new_number\n",
        "num_ids": 56
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    final = 0\n    for i in L:\n        final += i\n    return final\n    #return int(\"\".join([str(i) for i in L]))\n",
        "num_ids": 42
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if type(L) is not list:\n        return \"Input should be a list.\"\n",
        "num_ids": 23
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = list(L)\n    while True:\n        if len(L) == 1:\n            break\n        if L[0] == 0:\n            L.pop(0)\n        if L[len(L)-1] == 0:\n            L.pop(len(L)-1)\n        if L[0] == L[len(L)-1]:\n            L.pop(len(L)-1)\n            L.pop(0)\n    return int(\"\".join([str(i) for i in L]))\n",
        "num_ids": 126
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(map(str,L)))",
        "num_ids": 15
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # check if list is empty\n    if not L:\n        return 0\n    \n    # check if only one item\n    if len(L) == 1:\n        return L[0]\n",
        "num_ids": 47
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n",
        "num_ids": 20
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find all adverbs in the text\n    # return the index and the adverb\n    regex = re.compile(r'(?<=ADV)\\w+')\n    matches = regex.findall(text)\n    return matches\n",
        "num_ids": 60
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # store adverb index\n    adverb_index = 0\n    # store positions of adverb\n    position = []\n    # find the adverb\n    for i in text:\n        if i == ',' or i == '.':\n            adverb_index += 1\n        elif i.isupper():\n            adverb_index += 1\n        elif i == '?' or i == '!':\n            adverb_index += 1\n        elif i == ';':\n            adverb_index += 1\n        elif i == ':':\n            adverb_index += 1\n        elif i == '-':\n            adverb_index += 1\n        elif i == '\u2014':\n            adverb_index += 1\n        else:\n            break\n    # store adverb position\n    for i in range(adverb_index, len(text)):\n        if text[i] == ',' or text[i] == '.' or text[i] == '?' or text[i] == '!' or text[i] == ';' or text[i] == ':' or text[i] == '-' or text[i] == '\u2014':\n            position.append(i)\n            break\n    return position\n",
        "num_ids": 286
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    position = []\n    for i, w in enumerate(text.split(' ')):\n        if w[0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            position.append(i)\n    return position[0]\n",
        "num_ids": 64
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    match = re.search(r'(?:\\W|^)((?:\\w+ )*[Aa]dv\\w+)(?:\\W|$)', text)\n    if match:\n        return match.group()\n    return \"No match found\"\n",
        "num_ids": 65
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    if not type(text) == str:\n        return None\n    # text = text.lower()\n    # text = re.sub(r'[^\\w\\s]', '', text)\n    for i, word in enumerate(text.split()):\n        if re.match(r'^[a-z]*(?=[A-Z])', word):\n            return i, text.split()[i]\n",
        "num_ids": 104
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'[A-Za-z]+\\d+[A-Za-z]*[A-Za-z]+'\n    match = re.findall(pattern, text)\n    return match\n",
        "num_ids": 54
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    index_start = []\n    index_end = []\n    adverbs = ['\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0434\u043e\u043b\u0433\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0434\u043e\u043b\u0433\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0434\u043e\u043b\u0433\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0434\u043e\u043b\u0433\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0434\u043e\u043b\u0433\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0434\u043e\u043b\u0433\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0434\u043e\u043b\u0433\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0434\u043e\u043b\u0433\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0434\u043e\u043b\u0433\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0432\u0435\u0441\u044c\u043c\u0430', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431\u044b\u0441\u0442\u0440\u043e', '\u0431",
        "num_ids": 2008
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    res = re.findall('(?<=be)(.*)(?=ve)', text)\n    res += re.findall('(?<=be)(.*)(?=re)', text)\n    res += re.findall('(?<=be)(.*)(?=ve)', text)\n    res += re.findall('(?<=be)(.*)(?=re)', text)\n    res += re.findall('(?<=be)(.*)(?=se)', text)\n    res += re.findall('(?<=be)(.*)(?=se)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re.findall('(?<=be)(.*)(?=\\s)', text)\n    res += re",
        "num_ids": 2008
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex_adverb = r'(?<=\\s)[A-Za-z]+ly'\n    #return re.finditer(regex_adverb, text)\n    # for match in re.finditer(regex_adverb, text):\n    #     print(match)\n",
        "num_ids": 72
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = re.search('\\w+ly', text)\n    if adverb:\n        return adverb.start()\n",
        "num_ids": 32
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area=6*l*l\n    print(\"Surface area of cube: \",surface_area)\n",
        "num_ids": 28
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def surfacearea_side(l):\n        #finds the surface area of a side of a cube\n        return 6*l**2\n",
        "num_ids": 34
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6 * (l ** 2)\n    print(s)\n    return s\n",
        "num_ids": 23
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 6 * l ** 2\n    return surfacearea\n",
        "num_ids": 17
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    sa=6*l*l\n    return sa\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    sa=4*(3.14*r*r)\n    return sa\n",
        "num_ids": 21
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def surfacearea_cube_recursive(l):\n        if l == 0:\n            return 0\n        else:\n            return 6*l**2+surfacearea_cube_recursive(l-1)\n    return surfacearea_cube_recursive(l)\n",
        "num_ids": 64
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # l = int(input(\"Enter the length of cube: \"))\n    surfacearea = 6 * (l ** 2)\n    return surfacearea\n",
        "num_ids": 36
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_positive = 0\n    for i in nums:\n        if i > 0:\n            num_positive += 1\n    return num_positive / len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    positives = 0\n",
        "num_ids": 13
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # pos_count = 0\n    # for n in nums:\n    #     if n > 0:\n    #         pos_count += 1\n    # return pos_count / len(nums)\n",
        "num_ids": 50
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count = count + 1\n    return count / len(nums)\n",
        "num_ids": 39
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count=0\n    for i in nums:\n        if i>0:\n            positive_count+=1\n    return positive_count/len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if nums == None or len(nums) == 0:\n        return 0\n    counter = 0\n    for x in nums:\n        if x > 0:\n            counter += 1\n    return counter / len(nums)\n",
        "num_ids": 57
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # count positive numbers\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = list1[0]\n    for i in range(0,len(list1)):\n        if(list1[i] < max):\n            max = list1[i]\n    return max\n",
        "num_ids": 51
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    try:\n        neg_nums = [num for num in list1 if num < 0]\n        neg_nums = sorted(neg_nums,reverse=True)\n        return neg_nums[0]\n    except:\n        print('Enter numbers in the list')\n",
        "num_ids": 67
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    i=0\n    max = 0\n    while i < len(list1):\n        if list1[i] < 0:\n            max = list1[i]\n            return max\n        i+=1\n    return max\n",
        "num_ids": 55
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num=0\n    for i in range(len(list1)):\n        if list1[i]<0:\n            if list1[i]>max_num:\n                max_num=list1[i]\n    return max_num\n",
        "num_ids": 63
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    for i in range(len(list1)-1,-1,-1):\n        if list1[i] < 0:\n            return list1[i]\n",
        "num_ids": 46
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return(max(list1))\n",
        "num_ids": 11
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1, key=lambda x: (x < 0, abs(x)))\n",
        "num_ids": 24
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    new_list = [x for x in list1 if x < 0]\n    return max(new_list)\n",
        "num_ids": 29
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1)==0:\n        return -1\n    neg_list = [i for i in list1 if i<0]\n    if len(neg_list)==0:\n        return -1\n    else:\n        return max(neg_list)\n",
        "num_ids": 66
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    print(\"\\n\")\n    print(\"Largest negative number in the list: \",end=\"\")\n    print(max(list1))\n    print(\"\\n\")\n    \ndef largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    print(\"\\n\")\n    print(\"Largest negative number in the list: \",end=\"\")\n    print(min(list1))\n    print(\"\\n\")\n    \ndef smallest_num(list1):\n    '''\n    Write a python function to find the smallest number from the given list.\n    '''\n    print(\"\\n\")\n    print(\"Smallest number in the list: \",end=\"\")\n    print(min(list1))\n    print(\"\\n\")\n",
        "num_ids": 40
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # The trimmed list of tuples\n    trimmed_list = []\n    for tup in test_list:\n        # The new trimmed tuple\n        trimmed_tup = tuple([x for x in tup if x < K])\n        # Make sure we don't add an empty tuple\n        if len(trimmed_tup) > 0:\n            trimmed_list.append(trimmed_tup)\n    return trimmed_list\n",
        "num_ids": 109
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tuple in test_list:\n        if len(tuple) == K:\n            tuple = tuple[:K]\n        elif len(tuple) > K:\n            tuple = tuple[:K]\n",
        "num_ids": 54
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple(test_list[0:K])\n",
        "num_ids": 15
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(a, b) for a, b in test_list if len(a) <= K and len(b) <= K]\n",
        "num_ids": 33
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(tuple(i[:K]))\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[:K]) for t in test_list]\n",
        "num_ids": 21
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [t[:K] for t in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(test_list[index][:K] + test_list[index][K+1:]) for index in range(len(test_list))]\n",
        "num_ids": 42
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(test_list[i][j] for j in range(len(test_list[i])) if j < K) for i in range(len(test_list))]\n",
        "num_ids": 48
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    assert len(test_list) == len(K)\n    return [tuple(t[:K[i]]) for i, t in enumerate(test_list)]\n",
        "num_ids": 43
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiply_list = []\n    for i in range(len(test_tup1)):\n        multiply_list.append(test_tup1[i]*test_tup2[i])\n    return tuple(multiply_list)\n",
        "num_ids": 65
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_mult = []\n    for index in range(len(test_tup1)):\n        try:\n            index_mult.append(test_tup1[index] * test_tup2[index])\n        except Exception as e:\n            print(f\"Error occured while multiplying at index {index} with {index_mult}\")\n            raise e\n    return tuple(index_mult)\n",
        "num_ids": 97
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] * test_tup2[i], )\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(test_tup1, test_tup2)\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] * test_tup2[i]\n    return test_tup1\n",
        "num_ids": 70
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if(len(test_tup1)!= len(test_tup2)):\n        return \"Tuple not of equal length\"\n    else:\n        result = tuple(i*j for i,j in zip(test_tup1, test_tup2))\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if(len(test_tup1) == len(test_tup2)):\n        tuple_multiplication = tuple(test_tup1[i]*test_tup2[i] for i in range(0,len(test_tup1)))\n    else:\n        print(\"Tuples are not the same length.\")\n    return tuple_multiplication\n",
        "num_ids": 89
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(i*j for i,j in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n",
        "num_ids": 53
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup\n",
        "num_ids": 59
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n    else:\n        return \"Tuples not of same size\"\nprint(index_multiplication((1,2,3),(4,5,6)))\nprint(index_multiplication((1,2,3),(4,5,6,7)))",
        "num_ids": 115
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Using Counter Method \n    occurrence_count = Counter(lst) \n    # Count Occurrence \n    for ele in tup: \n        print(occurrence_count[ele], end = \" \") \n    # return occurrences \n",
        "num_ids": 61
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dict = Counter(lst) \n    occurence_count = dict.values() \n    return occurence_count\ndef main():\n    tup = (11, 11, 9, 4, 4, 4, 9, 11, 11, 4, 4, 4, 4, 4, 9, 9, 4, 4, 4, 4, 4, 4, 9, 9) \n    lst = [11, 9, 4, 4, 4, 9, 9]\n    print(count_Occurrence(tup, lst))\n    \nif __name__ == '__main__': \n    main()",
        "num_ids": 144
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    new_tup = []\n    for i in lst:\n        count = 0\n        for j in tup:\n            if (i == j):\n                count = count + 1\n        new_tup.append((i,count))\n    return new_tup\n",
        "num_ids": 66
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup = tuple(lst)\n    lst_occ = [0] * len(tup)\n    for x in tup:\n        if x in lst:\n            idx = tup.index(x)\n            lst_occ[idx] = lst.count(x)\n    print('Occurence of the elements of list in tuple: ', lst_occ)\n",
        "num_ids": 95
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst) \n    for k, v in tup.items(): \n        if k in c:\n            print(k, \" : \", v*c[k]) \n        else:\n            print(k, \" : \", 0) \n",
        "num_ids": 64
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    for ele in lst: \n        print(count[ele], end=\" \") \n",
        "num_ids": 34
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in lst:\n        count = 0\n        for j in tup:\n            if i == j:\n                count += 1\n        print(i, 'appears', count, 'times')\n",
        "num_ids": 50
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = Counter(lst) \n    return res \n",
        "num_ids": 17
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in tup: \n        print(i, \":\", tup.count(i)) \n",
        "num_ids": 28
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # return {tup[0]:tup[1].count(tup[0])}\n    return Counter(lst)",
        "num_ids": 32
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes_list = [num ** 3 for num in nums]\n    return cubes_list\n",
        "num_ids": 25
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    new_nums = []\n    for num in nums:\n        new_nums.append(num**3)\n    return new_nums\n",
        "num_ids": 38
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x ** 3 for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes_list = []\n    for num in nums:\n        cubes_list.append(num ** 3)\n    return cubes_list\n",
        "num_ids": 37
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n - 2)\n",
        "num_ids": 42
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += i\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    while n!= 0:\n        s += n % 10\n        n = n//10\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #calculating the sum of the perrin numbers\n    sum_perrin = 2 * n * (n + 1) + n + 1\n    return sum_perrin\n",
        "num_ids": 42
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    global res\n    for i in range(n):\n        res += 1\n        if i % 2 == 0:\n            cal_sum(i // 2)\n        else:\n            cal_sum(3 * i + 1)\n",
        "num_ids": 55
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n + cal_sum(n - 2)\n",
        "num_ids": 30
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    import numpy as np\n    import math\n    import matplotlib.pyplot as plt\n    pi_number = []\n    pi_number.append(0)\n    pi_number.append(1)\n    for i in range(2,n+1):\n        t = (i-1)/2\n        t = int(t)\n        if (i%2 == 0):\n            pi_number.append(-1*((2**t)**2)/(8*math.pi**2))\n        else:\n            pi_number.append((2**t)/(8*math.pi**2))\n",
        "num_ids": 145
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return 2 * n + 1\n",
        "num_ids": 10
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return (n*(n+1)/2)\n    \ndef perrin(n):\n    '''\n    A Perrin number is a number which can be obtained by a summation of n numbers with n+1.\n    Example:\n        perrin(3) = 1 + 2 + 3 + 4 = 10\n        perrin(4) = 1 + 2 + 3 + 4 + 5 = 15\n    '''\n    return cal_sum(n)\n    \ndef is_perrin(n):\n    '''\n    Write a function to check if a number is a Perrin number.\n    '''\n    return (cal_sum(n) == perrin(n))\n    \nif __name__ == '__main__':\n    print(perrin(3))\n    print(perrin(4))\n    print(is_perrin(10))\n    print(is_perrin(15)",
        "num_ids": 70
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            total += i\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    ans = []\n    for i in range(len(str)):\n        if(len(str[i])>=l):\n            ans.append(str[i])\n    return ans\n",
        "num_ids": 47
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    length = len(str)\n    while length > l:\n        str.pop(0)\n        length = len(str)\n    return str\n",
        "num_ids": 37
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[l:] for x in str]\n",
        "num_ids": 15
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l.sort(key=len)\n    print(l)\n    for i in range(len(l)):\n        print(l[i][:l[i].index(',')])\n    #return\n",
        "num_ids": 52
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    lst = []\n    for i in range(0, len(str), l):\n        lst.append(str[i:i + l])\n    return lst\n",
        "num_ids": 43
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(l)):\n        if len(l[i]) == l:\n            print(l[i])\n",
        "num_ids": 34
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [i[:l] for i in str]\n",
        "num_ids": 16
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    for element in l:\n        if len(element) <= l:\n            new_list.append(element)\n",
        "num_ids": 36
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [i[l] for i in str]\n",
        "num_ids": 15
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [i[:l] for i in str]\n",
        "num_ids": 16
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n",
        "num_ids": 10
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = ''.join(text1.split())\n    return text1\n",
        "num_ids": 21
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # your code here\n    return re.sub('\\s','',text1)\n",
        "num_ids": 22
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\n",
        "num_ids": 19
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','',text1)\n",
        "num_ids": 19
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ', '')\n",
        "num_ids": 13
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.replace(\" \", \"\")\n    print(text)\n    return text\n",
        "num_ids": 24
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('[\\s]', '', text1)\n",
        "num_ids": 19
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+',' ',text1)\n",
        "num_ids": 19
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #return re.sub(r\"\\s+\", \"\", text1)\n    text1=re.sub(r\"\\s+\", \"\", text1)\n    return text1\n",
        "num_ids": 46
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount-actual_cost\n",
        "num_ids": 12
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        loss_amount = 0\n        return loss_amount\n    \n",
        "num_ids": 51
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n",
        "num_ids": 37
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try:\n        actual_cost = float(actual_cost)\n        sale_amount = float(sale_amount)\n    except ValueError:\n        print('Not a valid number')\n        return\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "num_ids": 77
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        loss=sale_amount-actual_cost\n        return loss\n    else:\n        return 0\n    \n",
        "num_ids": 38
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>actual_cost:\n        loss_amount=sale_amount-actual_cost\n        return loss_amount\n    elif sale_amount<actual_cost:\n        loss_amount=actual_cost-sale_amount\n        return loss_amount\n    else:\n        return 0\n",
        "num_ids": 71
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    total_cost = 0\n    total_sale = 0\n    if(actual_cost < sale_amount):\n        total_sale = sale_amount - actual_cost\n        return total_sale\n    else:\n        return 0\n",
        "num_ids": 55
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost\n",
        "num_ids": 31
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            factors.append(i)\n    sumoffactors = 0\n    for i in factors : \n        if i % 2 == 0 : \n            sumoffactors += i\n    return sumoffactors\n",
        "num_ids": 91
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        res = 0\n        for i in range(2, int(math.sqrt(n)) + 1) : \n            if n % i == 0 : \n                if i % 2 == 0 : \n                    res += i \n                else : \n                    res += (n // i) \n        return res \ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofEvenFactors(n - sumofFactors(n))\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else : \n        return n + sumofFactors(n - sumofFactors(n))\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 0\n    else :",
        "num_ids": 21
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 1): \n        return 0\n    else: \n        factors = []\n        while n % 2 == 0: \n            factors.append(2)\n            n = n / 2\n        for i in range(3,int(math.sqrt(n))+1,2): \n            while n % i== 0: \n                factors.append(int(i)) \n                n = n / i \n        if n > 2: \n            factors.append(int(n))\n        return sum(factors)\n",
        "num_ids": 133
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1,int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            if (i == int(n/i)) :\n                s = s + i\n            else :\n                s = s + (i + int(n/i))\n    return(s)\ndef numofDivisors(n) :\n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    nDivisors = 0\n    for i in range(1,int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            if (i == int(n/i)) :\n                nDivisors = nDivisors + 1\n            else :\n                nDivisors = nDivisors + 2\n    return(nDivisors)\ndef palindrome(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while(n > 0) :\n        rev = rev * 10 + n % 10\n        n = int(n/10)\n    if(temp == rev) :\n        return(True)\n    else :\n        return(False)\ndef armstrong(n) :\n    '''\n    Write a python function to check whether the given number is an armstrong number or not.\n    '''\n    temp = n\n    sum = 0\n    while(n > 0) :\n        sum = sum + (int(n % 10)**3)\n        n = int(n/10)\n    if(temp == sum) :\n        return(True)\n    else :\n        return(False)\ndef sumofDigits(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    s = 0\n    while(n > 0) :\n        r = n % 10\n        s = s + r\n        n = int(n/10)\n    return(s)\ndef isarmstrong(n) :\n    '''\n    Write a python function to check whether the given number is armstrong or not.\n    '''\n    temp = n\n    sum = 0\n    while(n > 0) :\n        r = n % 10\n        sum = sum + (int(r)**3)\n        n = int(n/10)\n    if(temp == sum) :\n        return(True)\n    else :\n        return(False)\ndef sumofDigits(n) : \n    '''\n    Write a python function to find the sum of digits of a number.\n    '''\n    s = 0\n    while(n > 0) :\n        r = n % 10\n        s = s + r\n        n = int(n/10)\n    return(s)\ndef smallestFactor(n) : \n    '''\n    Write a python function to find the smallest factor of a number.\n    '''\n    if n == 0 :\n        return(n)\n    s = int(math.sqrt(n))\n    if (s*s == n) :\n        return(s)\n    else :\n        return(s,int(n/s))\ndef largestFactor(n) : \n    '''\n    Write a python function to find the largest factor of a number.\n    '''\n    if n == 0 :\n        return(n)\n    s = int(math.sqrt(n))\n    if (s*s == n) :\n        return(s)\n    else :\n        return(int(n/s))\ndef isperfect(n) : \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    sumofdivisors = 1\n    temp = 1\n    while(temp < int(math.sqrt(n))+1) :\n        if n % temp == 0 :\n            if (temp == int(n/temp)) :\n                sumofdivisors = sumofdivisors + temp\n            else :\n                sumofdivisors = sumofdivisors + (temp + int(n/temp))\n        temp = temp + 1\n    if(n == sumofdivisors) :\n        return(True)\n    else :\n        return(False)\ndef isperfect2(n) : \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    sumofdivisors = 1\n    temp = 1\n    while(temp < int(math.sqrt(n))+1) :\n        if n % temp == 0 :\n            sumofdivisors = sumofdivisors + temp\n            if (temp!= int(n/temp)) :\n                sumofdivisors = sumofdivisors + (int(n/temp) - temp)\n        temp = temp + 1\n    if(n == sumofdivisors) :\n        return(True)\n    else :\n        return(False)\ndef isprime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            return(False)\n    return(True)\ndef isprime2(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n < 2 :\n        return(False)\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            return(False)\n    return(True)\ndef primeno(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n < 2 :\n        return(False)\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            return(False)\n    return(True)\ndef isperfect(n) : \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    sumofdivisors = 1\n    temp = 1\n    while(temp < int(math.sqrt(n))+1) :\n        if n % temp == 0 :\n            if (temp == int(n/temp)) :\n                sumofdivisors = sumofdivisors + temp\n            else :\n                sumofdivisors = sumofdivisors + (temp + int(n/temp))\n        temp = temp + 1\n    if(n == sumofdivisors) :\n        return(True)\n    else :\n        return(False)\ndef isperfect2(n) : \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    sumofdivisors = 1\n    temp = 1\n    while(temp < int(math.sqrt(n))+1) :\n        if n % temp == 0 :\n            sumofdivisors = sumofdivisors + temp\n            if (temp!= int(n/temp)) :\n                sumofdivisors = sumofdivisors + (int(n/temp) - temp)\n        temp = temp + 1\n    if(n == sumofdivisors) :\n        return(True)\n    else :\n        return(False)\ndef isprime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            return(False)\n    return(True)\ndef isprime2(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n < 2 :\n        return(False)\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            return(False)\n    return(True)\ndef primeno(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n < 2 :\n        return(False)\n    for i in range",
        "num_ids": 20
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n//2+1):\n        if(n%i == 0):\n            sum += i\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum = sum + i\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n) : \n        if(n % i == 0) : \n            if(i % 2 == 0) : \n                sum += i\n    return sum \ndef isPrime(n) : \n    '''\n    Write a Python function to check whether a number is prime or not.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            return False\n    return True\ndef isPalindrome(n) : \n    '''\n    Write a Python function to check whether a number is palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\ndef isPowerOfTwo(n) : \n    '''\n    Write a Python function to check whether a number is power of two or not.\n    '''\n    return (n!= 0) and ((n & (n - 1)) == 0) \ndef isPowerOfThree(n) : \n    '''\n    Write a Python function to check whether a number is power of three or not.\n    '''\n    return (n!= 0) and ((n % math.sqrt(n)) == 0) \ndef primeFactors(n) : \n    '''\n    Write a Python function to find the prime factors of a number.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            if isPrime(i) : \n                print(i)\n            if isPrime(n/i) : \n                print(n/i)\n            if n/i == 2 : \n                print(i)\ndef factorial(n) : \n    '''\n    Write a Python function to find the factorial of a number.\n    '''\n    fact = 1\n    for i in range(1, n + 1) : \n        fact *= i\n    return fact \ndef fibonacci(n) : \n    '''\n    Write a Python function to find the nth Fibonacci number.\n    '''\n    n1, n2 = 0, 1\n    for i in range(n - 1) : \n        nth = n1 + n2\n        n1 = n2\n        n2 = nth\n    return n1\ndef reverse(n) : \n    '''\n    Write a Python function to reverse a number.\n    '''\n    return int(str(n)[::-1])\ndef sumofSquare(n) : \n    '''\n    Write a Python function to find the sum of squares of integers from 1 to a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1) : \n        sum += i**2\n    return sum \ndef printVowels(str) : \n    '''\n    Write a Python function to count the number of vowels in a string.\n    '''\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in str : \n        if i in vowels : \n            count += 1\n    return count \ndef printPairs(arr, sum) : \n    '''\n    Write a Python function to print all pairs from a given array whose sum is equal to a given number.\n    '''\n    for i in range(0, len(arr) - 1) : \n        for j in range(i + 1, len(arr)) : \n            if arr[i] + arr[j] == sum : \n                print(arr[i], arr[j])\ndef printPrimeFactors(n) : \n    '''\n    Write a Python function to print all prime factors of a number.\n    '''\n    for i in range(1, n + 1) : \n        if isPrime(i) : \n            print(i)\ndef removeDuplicates(arr) : \n    '''\n    Write a Python function to remove the duplicate elements from an array.\n    '''\n    for i in range(0, len(arr) - 1) : \n        for j in range(i + 1, len(arr)) : \n            if arr[i] == arr[j] : \n                arr.remove(arr[j])\n    return len(arr)\ndef removeDuplicates2(arr) : \n    '''\n    Write a Python function to remove the duplicate elements from an array.\n    '''\n    arr.sort()\n    i, j = 0, 1\n    while j < len(arr) : \n        if arr[i] == arr[j] : \n            arr.remove(arr[j])\n        else : \n            i += 1\n            j += 1\n    return len(arr)\ndef removeDuplicates3(arr) : \n    '''\n    Write a Python function to remove the duplicate elements from an array.\n    '''\n    arr.sort()\n    for i in range(0, len(arr) - 1) : \n        if arr[i] == arr[i + 1] : \n            arr.remove(arr[i + 1])\n    return len(arr)\ndef countPairs(arr, sum) : \n    '''\n    Write a Python function to count the number of pairs from an array whose sum is equal to a given number.\n    '''\n    count = 0\n    for i in range(0, len(arr) - 1) : \n        for j in range(i + 1, len(arr)) : \n            if arr[i] + arr[j] == sum : \n                count += 1\n    return count \ndef reverseString(str) : \n    '''\n    Write a Python function to reverse a string.\n    '''\n    return str[::-1]\ndef reverseNumber(n) : \n    '''\n    Write a Python function to reverse a number.\n    '''\n    return int(str(n)[::-1])\ndef calculateSeatId(row, col) : \n    '''\n    Write a Python function to find the Seat ID for a given boarding pass.\n    '''\n    return row * 8 + col\ndef findMissingNumber(arr) : \n    '''\n    Write a Python function to find the missing number in a given array of numbers.\n    '''\n    arr.sort()\n    i, j = 0, 1\n    while j < len(arr) : \n        if arr[i] + 1 == arr[j] : \n            i += 1\n            j += 1\n        else : \n            return arr[i] + 1\ndef findMissingNumber2(arr) : \n    '''\n    Write a Python function to find the missing number in a given array of numbers.\n    '''\n    arr.sort()\n    for i in range(0, len(arr)) : \n        if i + 1!= arr[i] : \n            return i + 1\ndef findMissingNumber3(arr) : \n    '''\n    Write a Python function to find the missing number in a given array of numbers.\n    '''\n    arr.sort()\n    for i in range(0, len(arr) - 1) : \n        if arr[i + 1] - arr[i]!= 1 : \n            return arr[i] + 1\ndef findMissingNumber4(arr) : \n    '''\n    Write a Python function to find the missing number in a given array of numbers.\n    '''\n    return sum(arr) - sum(range(min(arr), max(arr) + 1))\ndef printPairsDifference(arr, diff) : \n    '''\n    Write a Python function to print all pairs from a given array whose sum is equal to a given number.\n    '''\n    for i in range(0, len(arr) - 1) : \n        for j in range(i + 1, len(arr)) : \n            if arr[i] + arr[j] == diff : \n                print(arr[i], arr[j])\ndef printPairsDifference2(arr, diff) : \n    '''\n    Write a Python function to print all pairs from a given array whose sum is equal to a given number.\n    '''\n    for i in range(0, len(arr) - 1) : \n        for j in range(i + 1, len(arr)) : \n            if arr[i] + arr[j] == diff : \n                print(arr[",
        "num_ids": 58
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    Sum = 0\n    for i in range(2,int(math.sqrt(n)+1)) : \n        if(n % i == 0) : \n            Sum += i\n            if(i!= n/i) : \n                Sum += n/i\n    return int(Sum)\n",
        "num_ids": 73
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    x = []\n    for i in range(1,int(n/2) +1):\n        if n % i == 0:\n            x.append(i)\n    return(sum(x))\n",
        "num_ids": 50
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    # Create an empty list to store sum of all even factors\n    sum_of_all_factors = 0\n    \n    # Using loop, iterate from 2 to n and check if n is completely divisible by any number from 2 to n.\n    # If yes, then add it to the sum of factors list.\n    for i in range(2, n + 1) :\n        if (n % i == 0) :\n            if (n / i == i) :\n                sum_of_all_factors += i\n            else :\n                sum_of_all_factors += i\n                sum_of_all_factors += n / i\n    \n    return sum_of_all_factors\n",
        "num_ids": 167
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    def is_z(text):\n        if 'z' in text:\n            return True\n        else:\n            return False\n",
        "num_ids": 32
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # matches = re.search(r'\\bc\\w*z\\w*\\b', text)\n    # print(matches)\n",
        "num_ids": 35
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\w*z\\w*',text)\n",
        "num_ids": 21
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)):\n        if re.search('[z]', text[i]):\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return bool(re.search(r'z',text))\n",
        "num_ids": 17
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    # Your code here\n    # Do not remove lines below here, this is designed to test your code.\n    test_sentence = 'This is a test sentence'\n    print(text_match_wordz(test_sentence))\n    print(text_match_wordz('This is not a test sentence'))\n    return\n",
        "num_ids": 80
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\S*z\\S*', text)\n    return match.group() if match else None\n",
        "num_ids": 33
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # YOUR CODE HERE\n    return re.findall(r'\\b\\w*z\\w*\\b', text)\n",
        "num_ids": 32
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return bool(re.search(r'\\Bz\\w+', text))\n",
        "num_ids": 22
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z_match = re.search(r'\\b[a-zA-Z]*z[a-zA-Z]*\\b', text)\n    if z_match:\n        return True\n    else:\n        return False\nprint(text_match_wordz('The quick brown fox jumps over the lazy dog.'))\n",
        "num_ids": 80
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months_31_days = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum2 in months_31_days:\n        print(\"The month number {} contains 31 days.\".format(monthnum2))\n    else:\n        print(\"The month number {} doesn't contain 31 days.\".format(monthnum2))\n    return\n",
        "num_ids": 85
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return 31\n    elif monthnum2 == 2:\n        return 28\n    elif monthnum2 == 3:\n        return 31\n    elif monthnum2 == 4:\n        return 30\n    elif monthnum2 == 5:\n        return 31\n    elif monthnum2 == 6:\n        return 30\n    elif monthnum2 == 7:\n        return 31\n    elif monthnum2 == 8:\n        return 31\n    elif monthnum2 == 9:\n        return 30\n    elif monthnum2 == 10:\n        return 31\n    elif monthnum2 == 11:\n        return 30\n    elif monthnum2 == 12:\n        return 31\n    else:\n        return False\n",
        "num_ids": 177
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return \"Wrong month number\"\n",
        "num_ids": 96
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        print(f\"{monthnum2} month contains 31 days.\")\n    elif monthnum2 == 3:\n        print(f\"{monthnum2} month contains 31 days.\")\n    elif monthnum2 == 5:\n        print(f\"{monthnum2} month contains 31 days.\")\n    elif monthnum2 == 7:\n        print(f\"{monthnum2} month contains 31 days.\")\n    elif monthnum2 == 8:\n        print(f\"{monthnum2} month contains 31 days.\")\n    elif monthnum2 == 10:\n        print(f\"{monthnum2} month contains 31 days.\")\n    elif monthnum2 == 12:\n        print(f\"{monthnum2} month contains 31 days.\")\n    else:\n        print(f\"{monthnum2} month does not contain 31 days.\")\n    \ndef check_monthnumb_value(monthnum1):\n    '''\n    Write a function to check whether the given month number is an integer or not.\n    '''\n    try:\n        monthnum1 = int(monthnum1)\n        check_monthnumb_number(monthnum1)\n    except ValueError:\n        print(f\"{monthnum1} is not an integer.\")\n",
        "num_ids": 54
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12:\n        return False\n    elif monthnum2 == 2:\n        if year%4 == 0:\n            if year%100 == 0:\n                if year%400 == 0:\n                    return 29\n                else:\n                    return 28\n            else:\n                return 29\n        else:\n            return 28\n    else:\n        return 30\n",
        "num_ids": 88
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        print(\"February has 28 or 29 days\")\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"%d has 30 days\" % monthnum2)\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"%d has 31 days\" % monthnum2)\n",
        "num_ids": 126
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_numb = []\n    month_numb.append(1)\n    month_numb.append(3)\n    month_numb.append(5)\n    month_numb.append(7)\n    month_numb.append(8)\n    month_numb.append(10)\n    month_numb.append(12)\n    month_numb.append(4)\n    month_numb.append(6)\n    month_numb.append(9)\n    month_numb.append(11)\n    if monthnum2 in month_numb:\n        print(\"31 days\")\n    else:\n        print(\"30 days\")\n",
        "num_ids": 161
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        if int(monthnum2)<=12 and int(monthnum2)>=1:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef check_monthname_number(monthnum):\n    '''\n    Write a function to check whether the given month name contains month name or not.\n    '''\n    try:\n        month_name=('january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december')\n        if month_name.index(monthnum)>=0:\n            return True\n        else:\n            return False\n    except:\n        return False\n        \ndef isLeap(year):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    if year%4==0:\n        if year%100==0 and year%400==0:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef validate_date(date,monthnum,monthname,dayname):\n    '''\n    Write a function to validate a date.\n    '''\n    if date[0]=='0':\n        date=date[1:]\n    try:\n        date_format=datetime.datetime.strptime(date, \"%d %m %Y\").date()\n    except:\n        return False\n    if check_monthname_number(monthname)==True and check_monthnumb_number(monthnum)==True and dayname==date_format.strftime('%A'):\n        return True\n    else:\n        return False\n        \ndef get_date(date_info):\n    '''\n    Write a function to get date information from given date.\n    '''\n    date=date_info.split()\n    monthnum=date[1]\n    monthname=date[0]\n    dayname=date[2]\n    if len(dayname)==1:\n        dayname='0'+dayname\n    return date,monthnum,monthname,dayname\n    \ndef get_age(birthday):\n    '''\n    Write a function to calculate the age from the given birthday.\n    '''\n    today=datetime.date.today()\n    try:\n        birthday_format=datetime.datetime.strptime(birthday, '%d %m %Y').date()\n        if today.year-birthday_format.year==0:\n            if today.month-birthday_format.month==0:\n                if today.day-birthday_format.day==0:\n                    return str(0)\n                else:\n                    return str(today.day-birthday_format.day)\n            else:\n                return str(today.month-birthday_format.month)\n        else:\n            return str(today.year-birthday_format.year)\n    except:\n        return 'please enter a valid date'\n    \ndef get_weather(weather_info):\n    '''\n    Write a function to get weather information from the given string.\n    '''\n    weather_info=weather_info.split()\n    day_name=weather_info[0]\n    month_name=weather_info[1]\n    year=weather_info[2]\n    temp=weather_info[3]\n    precipitation=weather_info[4]\n    humidity=weather_info[5]\n    wind_speed=weather_info[6]\n    return day_name,month_name,year,temp,precipitation,humidity,wind_speed\n    \ndef get_event(event_info):\n    '''\n    Write a function to get event information from the given string.\n    '''\n    event_info=event_info.split()\n    day_name=event_info[0]\n    month_name=event_info[1]\n    year=event_info[2]\n    event=event_info[3]\n    return day_name,month_name,year,event\n",
        "num_ids": 72
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_stringlist = list()\n    for string in stringlist:\n        new_stringlist.append(string[::-1])\n    return new_stringlist\n",
        "num_ids": 41
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "num_ids": 41
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedlist = []\n    for i in stringlist:\n        reversedlist.append(i[::-1])\n    return reversedlist\n",
        "num_ids": 38
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        string = list(string)\n        string.reverse()\n        new_string = \"\".join(string)\n        new_list.append(new_string)\n    return new_list\n",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Use a while loop to iterate over the list\n    list_length = len(stringlist)\n    i = 0\n    while i < list_length:\n        # Create a new empty string\n        new_str = ''\n        # Use a for loop to iterate over the individual string\n        for char in stringlist[i]:\n            # Use a reverse for loop to iterate over the individual character\n            for c in reversed(char):\n                new_str = c + new_str\n        # Assign the reversed string to the string at index i\n        stringlist[i] = new_str\n        # Increment i\n        i += 1\n    # Return the new list\n    return stringlist\n",
        "num_ids": 162
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    print(\"Original String List: %s\" % stringlist)\n",
        "num_ids": 17
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return list(reversed(stringlist))\n",
        "num_ids": 14
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedlist = []\n    for string in stringlist:\n        reversedlist.append(string[::-1])\n    return reversedlist\n",
        "num_ids": 38
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return list(reversed(stringlist))\n",
        "num_ids": 14
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for index, string in enumerate(stringlist):\n        stringlist[index] = string[::-1]\n    return stringlist\n",
        "num_ids": 34
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return min(lst, key = lambda lst: len(lst)) \n",
        "num_ids": 22
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist = []\n    for i in range(0, len(lst)):\n        for j in range(i, len(lst)):\n            if len(sublist) == 0:\n                sublist.append(lst[i:j + 1])\n            elif len(lst[i:j + 1]) < len(sublist[-1]):\n                sublist[-1] = lst[i:j + 1]\n    return sublist[-1]",
        "num_ids": 116
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    def Get_Index(lst, item):\n        for i in range(len(lst)):\n            if lst[i] == item:\n                return i\n        return -1\n    def Get_Length(lst1, lst2):\n        count = 0\n        for i in range(len(lst1)):\n            if lst1[i] == lst2[i]:\n                count += 1\n            else:\n                break\n        return count\n    min_len = len(lst[0])\n    min_len_sublist = []\n    for lst_item in lst:\n        count = Get_Length(lst_item, lst[0])\n        if count < min_len:\n            min_len = count\n            min_len_sublist = [lst_item]\n        elif count == min_len:\n            min_len_sublist.append(lst_item)\n    return min_len_sublist\nprint(Find_Min([['a','b'],['a','c'],['a','d'],['f','f']]))\n",
        "num_ids": 263
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #print(lst)\n    sublst = min(lst, key = lambda x: len(x)) \n    return sublst\n",
        "num_ids": 37
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if(len(lst) == 0):\n        return []\n    elif(len(lst) == 1):\n        return lst\n    elif(len(lst) == 2):\n        if(lst[0] <= lst[1]):\n            return lst\n        else:\n            return lst[::-1]\n    else:\n        lst1 = lst[:len(lst)//2]\n        lst2 = lst[len(lst)//2:]\n        lst1 = Find_Min(lst1)\n        lst2 = Find_Min(lst2)\n        return Find_Merge(lst1,lst2)\ndef Find_Merge(lst1,lst2):\n    '''\n    Write a python function to find a sublist with minimum length from two sublists.\n    '''\n    if(len(lst1) == 0):\n        return lst2\n    elif(len(lst2) == 0):\n        return lst1\n    elif(lst1[-1] <= lst2[-1]):\n        return lst1 + [lst2[-1]] + Find_Merge(lst1,lst2[:-1])\n    else:\n        return lst2 + [lst1[-1]] + Find_Merge(lst1[:-1],lst2)",
        "num_ids": 129
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0]) \n    min_sub = lst[0] \n    for l in lst: \n        if len(l) < min_len: \n            min_len = len(l) \n            min_sub = l\n    return min_sub \n",
        "num_ids": 75
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #returning the shortest list which is the list with minimum length.\n    return min(lst,key = len)\n",
        "num_ids": 30
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = len(lst) \n    mini = min(lst, key=len) \n    return mini\n",
        "num_ids": 30
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = len(lst[0])\n    for i in range(0,len(lst)):\n        if len(lst[i])<min:\n            min=len(lst[i])\n    for j in range(0,len(lst)):\n        if len(lst[j])==min:\n            print(\"The sublist with minimum length is:\",lst[j])\n            break\n    \nlst = [[1,2,3],[1,2,3,4],[5,6,7,8],[1,2,3,4,6,7,8]]\nFind_Min(lst)",
        "num_ids": 151
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i]) == min_len:\n            return lst[i]\n",
        "num_ids": 92
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l > 0 and b > 0:\n        area = l * b\n        print(\"The area of a rectangle with length = {} and breadth = {} is {}\".format(l, b, area))\n    else:\n        print(\"Length and breadth should be positive numbers\")\n",
        "num_ids": 64
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \ndef is_perfect_square(number):\n    '''\n    Write a function that checks whether a number is a perfect square or not. \n    Return True or False.\n    Hint:\n    A number is a perfect square only if its square root is an integer.\n    '''\n    if number < 0:\n        return False\n    else:\n        x = math.sqrt(number)\n        if x == math.floor(x):\n            return True\n        else:\n            return False\n",
        "num_ids": 51
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str2 = \"\"\n    for i in range(len(str1)):\n        if i == 0:\n            str2 += str1[i]\n        elif str1[i] not in str1[:i]:\n            str2 += str1[i]\n    return str2\n",
        "num_ids": 80
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str2 = list(str1)\n    str2.sort()\n    str3 = ''.join(str2)\n    regex = re.compile(r'[A-Z]')\n    matches = regex.finditer(str3)\n    for match in matches:\n        str3 = str3.replace(match.group(), '')\n    return str3\n",
        "num_ids": 100
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = \"ZaTePbPc\"\n    str_res = \"\"\n    for ch in str1:\n        if ch not in \"Pb\":\n            str_res = str_res + ch\n    return str_res\n",
        "num_ids": 58
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    list1 = []\n    for x in str2:\n        list1.append(x)\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i].islower():\n            list2.append(list1[i])\n    str3 = ''.join(list2)\n    return str3\n",
        "num_ids": 94
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(\"[A-Z]\", \"\", str1)\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=str1.replace(' ','')\n    lowercase_str = str1.lower()\n    print(lowercase_str)\n    return lowercase_str\n",
        "num_ids": 43
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for i in str1:\n        if i.isupper():\n            str1 = str1.replace(i,\"\")\n    return str1\n    \ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for i in str1:\n        if i.islower():\n            str1 = str1.replace(i,\"\")\n    return str1\n    \ndef is_isogram(str1):\n    '''\n    Write a function to return True if a given string is isogram and False otherwise.\n    '''\n    for i in str1:\n        if str1.count(i)>1:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if str1[i] >= 'A' and str1[i] <= 'Z':\n            continue\n        else:\n            result = result + str1[i]\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst] \n",
        "num_ids": 17
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\nprint(Extract([[1, 2], [3, 4], [5, 6, 7]]))\n",
        "num_ids": 40
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for char in str:\n        if char.isupper():\n            upper += 1\n    return upper\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for ch in str if ch.isupper())\n",
        "num_ids": 18
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    uppercase = 0\n    for letter in str:\n        if letter.isupper():\n            uppercase += 1\n    return uppercase\n",
        "num_ids": 37
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n",
        "num_ids": 18
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            upper_ctr += 1\n    return upper_ctr\n",
        "num_ids": 44
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for c in str:\n        if c.isupper():\n            counter += 1\n    return counter\n",
        "num_ids": 31
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1[0]]\n    output = []\n    for i in range(len(list1)):\n        first = list1[i]\n        remaining = list1[i+1:]\n        for j in combinations_list(remaining):\n            output.append([first] + j)\n    return output\n",
        "num_ids": 88
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return []\n    result = []\n    if len(list1) == 1:\n        return [list1[0]]\n    for i in range(len(list1)):\n        result += [[list1[i]] + j for j in combinations_list(list1[i + 1:])]\n    return result\n",
        "num_ids": 83
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1, r = 2))\n",
        "num_ids": 21
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combos = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            combos.append((list1[i], list1[j]))\n    return combos\n",
        "num_ids": 60
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = []\n    for i in range(len(list1) + 1):\n        for j in itertools.combinations(list1, i):\n            comb_list.append(j)\n    return comb_list\n",
        "num_ids": 57
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(0, len(list1) + 1):\n        result.extend(list(itertools.combinations(list1, i)))\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    if len(list1) == 1:\n        return list1\n    for i in range(len(list1)):\n        for j in combinations_list(list1[:i]+list1[i+1:]):\n            combinations.append(list1[i]+j)\n    return combinations\n",
        "num_ids": 78
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1, 2))\n",
        "num_ids": 19
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) <= 1:\n        return [list1]\n    return [list1[:1] + i for i in combinations_list(list1[1:])] + combinations_list(list1[1:])\n",
        "num_ids": 57
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1 = list(list1)\n    def combine(self, element, remaining):\n        if len(remaining) == 0:\n            self.result.append(element)\n            return\n        else:\n            for i in range(len(remaining)):\n                self.combine(element + [remaining[i]], remaining[:i] + remaining[i+1:])\n    if len(list1) == 1:\n        result = [[list1[0]]]\n    else:\n        result = []\n        combine(result, [], list1)\n    return result\n",
        "num_ids": 140
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    cur_max = 1\n    cur_min = 1\n    global_max = 1\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        cur_max *= arr[i]\n        cur_min *= arr[i]\n        if cur_max < 0:\n            cur_max = arr[i]\n            start = i\n        if cur_min > 0:\n            cur_min = arr[i]\n            end = i\n        global_max = max(global_max, cur_max)\n    return global_max\n",
        "num_ids": 137
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    print(arr)\n    n = len(arr)\n    min_prod = arr[0]\n    max_prod = arr[0]\n    min_array = arr[0]\n    max_array = arr[0]\n    min_so_far = arr[0]\n    max_so_far = arr[0]\n    prod = arr[0]\n",
        "num_ids": 91
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # arr = [3,-4,5,6,2,0,1,-2,4]\n",
        "num_ids": 26
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    max_prod = max(arr[0], arr[1])\n    min_prod = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] < 0:\n            max_prod = max(arr[i], max_prod)\n            min_prod = min(arr[i], min_prod)\n        else:\n            temp_max = max(arr[i], max_prod*arr[i], min_prod*arr[i])\n            temp_min = min(arr[i], min_prod*arr[i], max_prod*arr[i])\n            max_prod = temp_max\n            min_prod = temp_min\n    return max_prod\n",
        "num_ids": 242
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 0:\n        return 0\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = 1\n    for x in arr:\n        if x == 0:\n            max_ending_here = 1\n            min_ending_here = 1\n            continue\n        temp = max_ending_here\n        max_ending_here = max(max(max_ending_here * x, x), min_ending_here * x)\n        min_ending_here = min(min(temp * x, x), min_ending_here * x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "num_ids": 173
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def max_subarray_recursive(arr, n, left, right):\n        if right - left + 1 == 1:\n            return arr[left] * arr[right]\n        else:\n            mid = (left + right) // 2\n            left_subarray = max_subarray_recursive(arr, n, left, mid)\n            right_subarray = max_subarray_recursive(arr, n, mid, right)\n            cross_subarray = max_cross_subarray_recursive(arr, n, left, mid, right)\n",
        "num_ids": 132
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    subarrays = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            subarrays.append(arr[i:j])\n    max_product = 0\n    for array in subarrays:\n        product = 1\n        for element in array:\n            product *= element\n        if product > max_product:\n            max_product = product\n    return max_product\n",
        "num_ids": 103
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = 1\n    max_ending_here = 1\n    start = 0\n    end = 0\n    s = 0\n    for i in range(len(arr)):\n        max_ending_here *= arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 1\n            s = i + 1\n    print(max_so_far)\n    return arr[start:end+1]\n",
        "num_ids": 146
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Store the Maximum product of subarray so far.\n    max_prod = 0\n",
        "num_ids": 23
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == len(set(dict.values())):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    check = dict[0]\n    for i in dict:\n        if i!= check:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    keys = dict.keys()\n    if n == len(set(dict.values())):\n        return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return dict.values() == [dict[0]] * n\n",
        "num_ids": 17
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Write your code here\n    values = dict.values()\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        print('The length of the dictionary is not equal to the value')\n        return False\n    else:\n        if all(i == dict[0] for i in dict.values()):\n            print('All values in dictionary are equal')\n            return True\n        else:\n            print('Some values are not equal')\n            return False\n",
        "num_ids": 88
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i] == dict[n]:\n            return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    res = set([dict[i] for i in dict])\n    if len(res) == n:\n        return True\n    else:\n        return False\n        \ndef check_value_list(list):\n    '''\n    Write a function to check if all values in a list are same or not.\n    '''\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False\n        \ndef check_value_tuple(tuple):\n    '''\n    Write a function to check if all values in a tuple are same or not.\n    '''\n    if len(set(tuple)) == 1:\n        return True\n    else:\n        return False\n        \ndef check_value_set(set):\n    '''\n    Write a function to check if all values in a set are same or not.\n    '''\n    if len(set) == 1:\n        return True\n    else:\n        return False\n        \ndef check_value_str(str):\n    '''\n    Write a function to check if all values in a string are same or not.\n    '''\n    if len(set(str)) == 1:\n        return True\n    else:\n        return False\n        \ndef check_value_int(int):\n    '''\n    Write a function to check if all values in an integer are same or not.\n    '''\n    if len(set(str(int))) == 1:\n        return True\n    else:\n        return False\n        \ndef check_value_float(float):\n    '''\n    Write a function to check if all values in a float are same or not.\n    '''\n    if len(set(str(float))) == 1:\n        return True\n    else:\n        return False\n        ",
        "num_ids": 29
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    print(\"Original dictionary: \", dict)\n    print(\"Value list: \", list(dict.values()))\n    if n == len(list(dict.values())):\n        print(\"All values are same!\")\n    else:\n        print(\"All values are not same!\")\n",
        "num_ids": 66
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for k, v in dict1.items():\n        if v!= None:\n            new_dict[k] = v\n    return new_dict\n",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in list(dict1):\n        if dict1[key]=='' or dict1[key]==[] or dict1[key]=={}:\n            dict1.pop(key)\n",
        "num_ids": 48
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {x: y for x, y in dict1.items() if y!= ''}\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1 = {i: j for i, j in dict1.items() if j}\n    return dict1\n",
        "num_ids": 29
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    res = {k: v for k, v in dict1.items() if v}\n    return res\n",
        "num_ids": 27
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        if dict1[key]:\n            new_dict[key] = dict1[key]\n    return new_dict\n",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    # return dict(filter(lambda x: x[1], dict1.items()))\n    return dict(filter(lambda x: x[1], dict1.items()))\n    # return {k:v for k,v in dict1.items() if v}\n",
        "num_ids": 66
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if v == None:\n            dict1.pop(k)\n    return dict1\n",
        "num_ids": 35
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    result = {}\n    \n    for key, value in dict1.items():\n        if value:\n            result[key] = value\n    \n    return result\n",
        "num_ids": 42
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = 1\n    if len(arr) == 0:\n        return 0\n    for i in range(len(arr)):\n        product = product * arr[i]\n    return product\n",
        "num_ids": 47
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j]>max_prod:\n                max_prod = arr[i]*arr[j]\n    print(max_prod)\n    return max_prod\n",
        "num_ids": 88
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 1:\n        return -1\n    elif len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 35
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        if arr[0] < arr[1]:\n            min_val = arr[0]\n            max_val = arr[1]\n        else:\n            min_val = arr[1]\n            max_val = arr[0]\n        max_prod = max_val * min_val\n",
        "num_ids": 108
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 3:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Solution: Time: O(n) || Space: O(1)\n    # first element in the array must be the largest element\n    # as we are finding the max of the subsequence of all numbers, so we can only consider the first element\n    # at the same time, all the other numbers are not considered\n    max_product = -float('inf')\n    max_so_far = 1\n    max_ending_here = 1\n    for num in arr:\n        max_ending_here *= num\n        max_ending_here = min(max_ending_here, num)\n        max_product = max(max_product, max_ending_here)\n        # max_so_far = max(max_ending_here, max_so_far)\n    return max_product\n",
        "num_ids": 184
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    global_max_product = 1\n    local_max_product = 1\n",
        "num_ids": 20
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 3:\n        return -1\n    max_so_far = 1\n    max_ending_here = 1\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            max_ending_here = 1\n        else:\n            max_ending_here *= arr[i+1]\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n    return max_so_far\n",
        "num_ids": 127
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        prod = 1\n        for j in range(i, len(arr)):\n            prod *= arr[j]\n            if prod > res:\n                res = prod\n",
        "num_ids": 61
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    def check(arr):\n        if len(arr) == 1:\n            return True\n        for i in range(len(arr)):\n            if arr[i] < arr[i-1]:\n                return False\n        return True\n",
        "num_ids": 57
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_list = []\n    for i in range(len(test_tup)-1):\n        new_list.append(test_tup[i] + test_tup[i+1])\n    new_list.append(test_tup[-1] + test_tup[0])\n    return tuple(new_list)\n",
        "num_ids": 83
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    lst = []\n    for i in range(n):\n        lst.append(test_tup[i] + test_tup[i+1])\n    return lst\n",
        "num_ids": 57
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res_tup = ()\n    for i in range(len(test_tup)):\n        if i == 0:\n            res_tup += (test_tup[i], test_tup[i+1])\n        elif i == len(test_tup) -1:\n            res_tup += (test_tup[i], test_tup[i-1])\n        else:\n            res_tup += (test_tup[i], test_tup[i-1], test_tup[i+1])\n    return res_tup\n",
        "num_ids": 140
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    lst = list(test_tup)\n    tup_sum = ()\n    for i in range(len(lst)-1):\n        if lst[i] < lst[i+1]:\n            tup_sum += (lst[i] + lst[i+1],)\n        elif lst[i] > lst[i+1]:\n            tup_sum += (lst[i+1] + lst[i],)\n        else:\n            pass\n    return tup_sum\n",
        "num_ids": 127
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    return sum(test_tup[0:length-1]) + sum(test_tup[1:length])\n",
        "num_ids": 41
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum = 0\n    for i in range(len(test_tup)-1):\n        sum+=test_tup[i]\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            break\n        new_tup += (test_tup[i] + test_tup[i+1],)\n    return new_tup\n",
        "num_ids": 75
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    lst = []\n    for i in range(len(test_tup)):\n        sum = test_tup[i] + test_tup[i + 1]\n        lst.append(sum)\n    return lst\n",
        "num_ids": 58
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_list = []\n    for num in range(0, len(test_tup)):\n        new_list.append(test_tup[num] + test_tup[num+1])\n    return tuple(new_list)\n",
        "num_ids": 60
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr: \n        result = result*i % n\n    return result \n",
        "num_ids": 29
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # The order of elements in the array \n    # is important to the final product\n    product = 1\n    for i in arr:\n        product = product * i \n        product = product % n\n    return product\n",
        "num_ids": 53
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)): \n        result = result*arr[i] % n \n    return result \n",
        "num_ids": 38
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr_sum = sum(arr)\n    \n    # Since all numbers are positive, \n    # we can apply basic Euclidean Algorithm: \n    # a*b = x*y*gcd(a, b) \n    # By returning product % n, we can \n    # find number of multiples of (n/gcd(a, b)) \n    return (arr_sum * arr_sum) % n \n",
        "num_ids": 104
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr: \n        prod *= i\n    return prod % n\n",
        "num_ids": 29
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for i in arr:\n        mul = (mul * i) % n\n    return mul\n",
        "num_ids": 32
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product % n \n",
        "num_ids": 32
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n): \n        prod = (prod * arr[i]) % n \n    return prod\n",
        "num_ids": 38
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(0, len(arr)): \n        prod = (prod * arr[i]) % n \n    return prod \n",
        "num_ids": 44
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for ele in arr: \n        product = (product * ele) % n \n    return product \n",
        "num_ids": 32
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l),max(l)+1))\n",
        "num_ids": 24
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # initialize the list \n    lst = [] \n    # use a for loop to iterate the list \n    for i in range(len(l)): \n        # check whether the element at that position is consecutive or not \n        if i == 0 or l[i] - l[i - 1] == 1: \n            lst.append(True) \n        else: \n            lst.append(False) \n    # check the list for consecutive numbers \n    if False in lst: \n        return False\n    else: \n        return True\n",
        "num_ids": 136
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if l[i+1]-l[i]!=1:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = sorted(l)\n    print(l)\n    flag = 0\n    if len(l) == 1:\n        return False\n    elif len(l) == 2:\n        if l[1] - l[0] == 1:\n            flag = 1\n        return flag\n    else:\n        for i in range(len(l)-1):\n            if l[i+1] - l[i] == 1:\n                flag = 1\n            else:\n                return False\n        return flag\n",
        "num_ids": 121
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive = False\n    for i in range(1,len(l)):\n        if l[i]-l[i-1]==1:\n            consecutive = True\n        else:\n            consecutive = False\n            break\n    return(consecutive)\n",
        "num_ids": 68
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    max_number = l[-1]\n    list_of_tuples = [tuple(l[i:i + 2]) for i in range(0, len(l), 2)]\n    if max_number - list_of_tuples[0][0] == 1 and max_number - list_of_tuples[0][1] == 1:\n        return False\n    else:\n        return True\n",
        "num_ids": 104
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l:\n        return False\n    prev = l[0]\n    for num in l:\n        if num!= prev + 1:\n            return False\n        prev = num\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n",
        "num_ids": 24
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n",
        "num_ids": 24
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    a=all(l[i]-l[i-1]==1 for i in range(1,len(l)))\n    b=all(l[i]-l[i-1]==0 for i in range(1,len(l)))\n    if a:\n        return True\n    elif b:\n        return False\n    else:\n        return False\nprint(check_Consecutive([1,2,3,4,5]))\nprint(check_Consecutive([1,2,3,5,6]))\nprint(check_Consecutive([1,2,3,5,6]))\n",
        "num_ids": 147
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for test_tuple in test_list1:\n        if test_tuple in test_list2:\n            new_list.append(test_tuple)\n    return new_list\n",
        "num_ids": 54
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1.sort()\n    test_list2.sort()\n    i = 0\n    j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            return test_list1[i]\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        else:\n            j += 1\n    return None\n",
        "num_ids": 117
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) & set(tup2) not in result:\n                result.append(set(tup1) & set(tup2))\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # print(set(test_list1) & set(test_list2))\n    return set(test_list1) & set(test_list2)\n",
        "num_ids": 40
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for test in test_list1:\n        if test in test_list2:\n            intersection.append(test)\n    return intersection\n",
        "num_ids": 41
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set_list1 = set(test_list1)\n    set_list2 = set(test_list2)\n    result = set_list1.intersection(set_list2)\n    tuple_list = list(result)\n    return tuple_list\n",
        "num_ids": 64
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return [element for element in test_list1 if element in test_list2]\n",
        "num_ids": 22
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) == 1 and len(test_list2) == 1:\n        return test_list1[0] == test_list2[0]\n    if len(test_list1) == 1:\n        for i in test_list2:\n            if i == test_list1[0]:\n                return True\n        return False\n    if len(test_list2) == 1:\n        for i in test_list1:\n            if i == test_list2[0]:\n                return True\n        return False\n    intersect = False\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                intersect = True\n                return intersect\n    return intersect\n",
        "num_ids": 176
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n    intersect = test_list1.intersection(test_list2)\n    return list(intersect)\n    ",
        "num_ids": 57
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    temp_list = []\n    if len(test_list1) == len(test_list2):\n        for i in range(len(test_list1)):\n            if test_list1[i] == test_list2[i]:\n                temp_list.append(test_list1[i])\n    return tuple(temp_list)\n",
        "num_ids": 84
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str\n",
        "num_ids": 62
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 = str2 + newch\n        else:\n            str2 = str2 + str1[i]\n    return str2\n",
        "num_ids": 64
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return newch.join(str1.split(ch))\n    \nif __name__ == '__main__':\n    print(replace_char('abch', 'c','*'))\n    print(replace_char('abch', 'ch', '*')",
        "num_ids": 63
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    \n    str1 = str1.replace(ch,newch)\n    \n    return str1\n    ",
        "num_ids": 27
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    output = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            output += newch\n        else:\n            output += str1[i]\n    return output\n",
        "num_ids": 54
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i==ch:\n            str2+='newch'\n        else:\n            str2+=i\n    return str2\n    \ndef validate_id(id_num):\n    '''\n    Write a function to check if a string is a valid identifier.\n    '''\n    if len(id_num)==0:\n        return False\n    if id_num[0] in '0123456789':\n        return False\n    if id_num[0] in '_-':\n        if id_num[1] in '0123456789':\n            return False\n        else:\n            return True\n    else:\n        return True\n        \ndef validate_passwd(passwd):\n    '''\n    Write a function to check if a password is valid.\n    '''\n    if len(passwd)<8:\n        return False\n    if passwd.isdigit():\n        return False\n    if passwd.isalpha():\n        return False\n    else:\n        return True\n",
        "num_ids": 52
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = []\n    for i in str1:\n        if i == ch:\n            result.append(newch)\n        else:\n            result.append(i)\n    return \"\".join(result)\n",
        "num_ids": 52
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(),key=lambda x: x[1],reverse=True))\n",
        "num_ids": 28
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\ndef contains(dict1, dict2):\n    '''\n    Write a function to determine if a dictionary is a subset of another dictionary.\n    '''\n    dict2_keys = dict2.keys()\n    if all(key in dict1 for key in dict2_keys):\n        return True\n    else:\n        return False\ndef merge_dicts(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    return dict(dict1, **dict2)\ndef is_anagram(str1, str2):\n    '''\n    Write a function to determine if a pair of strings are anagrams of each other.\n    '''\n    return Counter(str1) == Counter(str2)\ndef find_missing_letter(chars):\n    '''\n    Write a function to find the missing letter in a string.\n    '''\n    n = len(chars)\n    for i in range(n):\n        if ord(chars[i]) + 1!= ord(chars[i + 1]):\n            return chr(ord(chars[i]) + 1)\n    return 'A'\ndef find_missing_letter2(chars):\n    '''\n    Write a function to find the missing letter in a string.\n    '''\n    for i, char in enumerate(chars):\n        if ord(chars[i]) + 1!= ord(chars[i + 1]):\n            return chars[i] + chr(ord(chars[i]) + 1)\n    return 'Z'\ndef find_missing_letter3(chars):\n    '''\n    Write a function to find the missing letter in a string.\n    '''\n    return ''.join(chr(ord(chars[i]) + 1) for i, char in enumerate(chars) if ord(chars[i]) + 1!= ord(chars[i + 1]))\ndef find_missing_letter4(chars):\n    '''\n    Write a function to find the missing letter in a string.\n    '''\n    chars = [c for c in chars if c.isupper()]\n    return chr(ord(chars[0]) + 1)\ndef dict_diff(dict1, dict2):\n    '''\n    Write a function that takes in two dictionaries and returns a new dictionary\n    containing all the common key-value pairs and difference in unique key-value \n    pairs between the two given dictionaries.\n    '''\n    return dict(dict1, **{key:value for key,value in dict2.items() if key not in dict1})\ndef word_flipper(str1):\n    '''\n    Write a function that flips a string of words.\n    '''\n    return''.join([word[::-1] for word in str1.split()])\ndef encrypt(str1):\n    '''\n    Write a function that takes in a string and returns the cipher text.\n    '''\n    return ''.join(chr(ord(c) + 3) if c.isupper() else c for c in str1)\ndef string_bits(str1):\n    '''\n    Write a function to convert a string into a bitstring and then return the bitstring.\n    '''\n    return ''.join(format(ord(i), 'b').zfill(8) for i in str1)\ndef string_bits2(str1):\n    '''\n    Write a function to convert a string into a bitstring and then return the bitstring.\n    '''\n    return ''.join(format(ord(i), 'b').zfill(8) for i in str1)\ndef string_bits3(str1):\n    '''\n    Write a function to convert a string into a bitstring and then return the bitstring.\n    '''\n    return ''.join(format(ord(i), 'b').zfill(8) for i in str1)\ndef find_duplicate(str1):\n    '''\n    Write a function to determine if a string contains a duplicate character and return true or false.\n    '''\n    if len(str1) == len(set(str1)):\n        return False\n    else:\n        return True\ndef roman_to_int(str1):\n    '''\n    Write a function to convert a roman numeral string to an integer.\n    '''\n    dict_roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    return sum(dict_roman[c] for c in str1)\ndef is_rotated(str1, str2):\n    '''\n    Write a function to determine if one string is a rotated version of another string.\n    '''\n    if str1 == str2 or str1 + str1 == str2 or str1 * 2 == str2:\n        return True\n    else:\n        return False\ndef make_cubes(nums):\n    '''\n    Write a function that returns a list of the first n cubes.\n    '''\n    return [i ** 3 for i in nums]\ndef get_sum(n):\n    '''\n    Write a function to return the sum of a list of numbers.\n    '''\n    return sum([i for i in range(1, n+1)])\ndef find_missing_num(nums):\n    '''\n    Write a function that finds the missing number in a list of numbers.\n    '''\n    return [i for i in range(1, len(nums) + 1) if i not in nums]\ndef find_missing_num2(nums):\n    '''\n    Write a function that finds the missing number in a list of numbers.\n    '''\n    return [i for i in range(1, len(nums) + 1) if i not in nums]\ndef find_missing_num3(nums):\n    '''\n    Write a function that finds the missing number in a list of numbers.\n    '''\n    return [i for i in range(1, len(nums) + 1) if i not in nums]\ndef find_missing_num4(nums):\n    '''\n    Write a function that finds the missing number in a list of numbers.\n    '''\n    return [i for i in range(1, len(nums) + 1) if i not in nums]\ndef find_missing_num5(nums):\n    '''\n    Write a function that finds the missing number in a list of numbers.\n    '''\n    return [i for i in range(1, len(nums) + 1) if i not in nums]\ndef find_missing_num6(nums):\n    '''\n    Write a function that finds the missing number in a list of numbers.\n    '''\n    return [i for i in range(1, len(nums) + 1) if i not in nums]\ndef find_missing_num7(nums):\n    '''\n    Write a function that finds the missing number in a list of numbers.\n    '''\n    return [i for i in range(1, len(nums) + 1) if i not in nums]\ndef find_missing_num8(nums):\n    '''\n    Write a function that finds the missing number in a list of numbers.\n    '''\n    return [i for i in range(1, len(nums) + 1) if i not in nums]\ndef find_missing_num9(nums):\n    '''\n    Write a function that finds the missing number in a list of numbers.\n    '''\n    return [i for i in range(1, len(nums) + 1) if i not in nums]\ndef find_missing_num10(nums):\n    '''\n    Write a function that finds the missing number in a list of numbers.\n    '''\n    return [i for i in range(1, len(nums) + 1) if i not in nums]\ndef find_missing_num11(nums):\n    '''\n    Write a function that finds the missing number in a list of numbers.\n    '''\n    return [i for i in range(1, len(nums) + 1) if i not in nums]\ndef find_missing_num12(nums):\n    '''\n    Write a function that finds the missing number in a list of numbers.\n    ''",
        "num_ids": 20
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    import operator\n    return sorted(dict1.items(), key=operator.itemgetter(1), reverse=True)\n",
        "num_ids": 30
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\ndef intersection(dict1, dict2):\n    '''\n    Write a function to return a list of keys that are common in two dictionaries.\n    '''\n    intersection_list=[]\n    for x in dict1.keys():\n        if x in dict2.keys():\n            intersection_list.append(x)\n    return intersection_list\ndef counter_max(counter1):\n    '''\n    Write a function to return the key corresponding to the maximum value in a Counter object.\n    '''\n    return counter1.most_common(1)[0][0]\ndef counter_min(counter1):\n    '''\n    Write a function to return the key corresponding to the minimum value in a Counter object.\n    '''\n    return counter1.most_common()[-1][0]\ndef anagram(str1, str2):\n    '''\n    Write a function to determine if two words are anagrams.\n    '''\n    return Counter(str1) == Counter(str2)\ndef n_most_frequent(words, n):\n    '''\n    Write a function to return the n most frequently occuring words in a list of words.\n    '''\n    return Counter(words).most_common(n)\ndef palindrome(str1):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    return str1 == str1[::-1]\ndef longest_substring(str1):\n    '''\n    Write a function to return the longest substring in a string without repeating characters.\n    '''\n    start=0\n    longest=0\n    longest_substring=''\n    for end, char in enumerate(str1):\n        if str1[start:end+1] in str1[start:end+1][::-1]:\n            longest_substring=str1[start:end+1]\n            longest=len(longest_substring)\n            start=end+1\n    return longest_substring\ndef string_compression(str1):\n    '''\n    Write a function to perform basic string compression using counts of repeated characters. For example, the string aabcccccaaa would become a2b1c5a3. If the compressed string would not become smaller than the original string, your function should return the original string. You can assume the string has only uppercase and lowercase letters (a-z).\n    '''\n    compressed_str=''\n    count=1\n    for index in range(1,len(str1)):\n        if str1[index]==str1[index-1]:\n            count+=1\n        else:\n            compressed_str+=str1[index-1]\n            compressed_str+=str(count)\n            count=1\n    compressed_str+=str1[index]\n    compressed_str+=str(count)\n    return compressed_str if len(compressed_str)<len(str1) else str1\ndef reverse_vowels(str1):\n    '''\n    Write a function to reverse vowels in a string.\n    '''\n    vowels='aeiouAEIOU'\n    vowels_reversed=vowels[::-1]\n    str1_reversed=''\n    for index in range(len(str1)):\n        if str1[index] in vowels:\n            str1_reversed+=str1[index]\n        elif str1[index] in vowels_reversed:\n            str1_reversed+=str1[index]\n        else:\n            str1_reversed+=str1[index]\n    return str1_reversed\ndef base_conversion(decimal_number, base):\n    '''\n    Write a function that converts a base 10 number to another base.\n    '''\n    def is_base(n, base):\n        '''\n        Write a function to check if a number is a valid base.\n        '''\n        if n < 0:\n            return False\n        if n < base:\n            return True\n        return is_base(n // base, base)\n    def stringify(number, base):\n        '''\n        Write a function that converts a number to a string in a given base.\n        '''\n        if is_base(number, base):\n            return str(number)\n        else:\n            return stringify(number // base, base) + str(number % base)\n    return stringify(decimal_number, base)\ndef palindrome_permutation(str1):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    str1=str1.lower()\n    char_dict={}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char]+=1\n        else:\n            char_dict[char]=1\n    count=0\n    for key in char_dict:\n        count+=char_dict[key]%2\n    return count<2\ndef one_edit_away(str1, str2):\n    '''\n    Write a function to check if two strings are one edit (or zero edits) away.\n    '''\n    if abs(len(str1)-len(str2))>1:\n        return False\n    index_list=[]\n    for index in range(len(str1)):\n        if str1[index]!=str2[index]:\n            index_list.append(index)\n    return len(index_list)==1\ndef str_compression(str1):\n    '''\n    Write a function to perform basic string compression using counts of repeated characters. For example, the string aabcccccaaa would become a2b1c5a3. If the compressed string would not become smaller than the original string, your function should return the original string. You can assume the string has only uppercase and lowercase letters (a-z).\n    '''\n    compressed_str=''\n    count=1\n    for index in range(1,len(str1)):\n        if str1[index]==str1[index-1]:\n            count+=1\n        else:\n            compressed_str+=str1[index-1]\n            compressed_str+=str(count)\n            count=1\n    compressed_str+=str1[index]\n    compressed_str+=str(count)\n    return compressed_str if len(compressed_str)<len(str1) else str1\ndef sum_of_two_values(nums1, nums2):\n    '''\n    Write a function to return the sum of two numbers, given the numbers are stored in two arrays.\n    '''\n    return sum([nums1[0]+nums2[0], nums1[1]+nums2[1]])\ndef sum_of_three_values(nums1, nums2, nums3):\n    '''\n    Write a function to return the sum of three numbers, given the numbers are stored in two arrays.\n    '''\n    return sum([nums1[0]+nums2[0]+nums3[0], nums1[1]+nums2[1]+nums3[1]])\ndef diff21(n):\n    '''\n    Write a function that returns the absolute difference between a number and 21, \n    except the number is greater than 21.\n    '''\n    if n>21:\n        return 21 - n\n    else:\n        return n - 21\ndef blackjack(a, b, c):\n    '''\n    Write a function to return the score of a blackjack hand.\n    '''\n    if a==11 or b==11 or c==11:\n        return sum([a,b,c])\n    if a+b+c>21:\n        return sum([a+b,max(a,b)])\n    else:\n        return sum([a,b,c])\ndef sum_complex_numbers(a, b):\n    '''\n    Write a function that returns the sum of two complex numbers.\n    '''\n    return complex(a.real+b.real, a.imag+b.imag)\ndef find_missing_number(nums):\n    '''\n    Write a function to return the missing number in a list of consecutive integers.\n    '''\n    if len(nums)==1:\n        return 1\n    for index in rang",
        "num_ids": 22
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {k: v for k, v in sorted(dict1.items(), key=lambda x: x[1])}\n    return(sorted_dict)\n",
        "num_ids": 44
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1]))\n    \ndef sort_counter_2(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    \ndef sort_counter_3(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = {}\n    sorted_list = sorted(dict1.items(), key=lambda x: x[1])\n    for i in sorted_list:\n        new_dict[i[0]] = i[1]\n    return new_dict\n    \ndef sort_counter_4(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = {}\n    for key, value in sorted(dict1.items(), key=lambda x: x[1], reverse=True):\n        new_dict[key] = value\n    return new_dict\n    \ndef get_most_common(dict1):\n    '''\n    Write a function to get the most common value in a dictionary.\n    '''\n    return Counter(dict1).most_common()[0][0]\n    \ndef get_most_common_2(dict1):\n    '''\n    Write a function to get the most common value in a dictionary.\n    '''\n    most_common = sorted(dict1.items(), key=lambda x: x[1], reverse=True)[0][0]\n    return most_common\n    \ndef get_most_common_3(dict1):\n    '''\n    Write a function to get the most common value in a dictionary.\n    '''\n    return Counter(dict1).most_common()[0][0]\n    \ndef get_most_common_4(dict1):\n    '''\n    Write a function to get the most common value in a dictionary.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)[0][0]\n    \ndef get_keys_by_value(dict1, target_value):\n    '''\n    Write a function to get all keys from a dictionary.\n    '''\n    keys = []\n    for key, value in dict1.items():\n        if value == target_value:\n            keys.append(key)\n    return keys\n    \ndef get_keys_by_value_2(dict1, target_value):\n    '''\n    Write a function to get all keys from a dictionary.\n    '''\n    return [key for key, value in dict1.items() if value == target_value]\n    \ndef get_keys_by_value_3(dict1, target_value):\n    '''\n    Write a function to get all keys from a dictionary.\n    '''\n    return [key for key, value in dict1.items() if value == target_value]\n    \ndef get_keys_by_value_4(dict1, target_value):\n    '''\n    Write a function to get all keys from a dictionary.\n    '''\n    return list(dict1.keys())[list(dict1.values()).index(target_value)]\n    \ndef get_all_values(dict1):\n    '''\n    Write a function to get all values in a dictionary.\n    '''\n    values = []\n    for key, value in dict1.items():\n        values.append(value)\n    return values\n    \ndef get_all_values_2(dict1):\n    '''\n    Write a function to get all values in a dictionary.\n    '''\n    return [value for key, value in dict1.items()]\n    \ndef get_all_values_3(dict1):\n    '''\n    Write a function to get all values in a dictionary.\n    '''\n    return list(dict1.values())\n    \ndef get_all_values_4(dict1):\n    '''\n    Write a function to get all values in a dictionary.\n    '''\n    return list(dict1.values())\n    \ndef get_unique_values(dict1):\n    '''\n    Write a function to get unique values in a dictionary.\n    '''\n    return list(set(dict1.values()))\n    \ndef get_unique_values_2(dict1):\n    '''\n    Write a function to get unique values in a dictionary.\n    '''\n    return list(set(dict1.values()))\n    \ndef get_unique_values_3(dict1):\n    '''\n    Write a function to get unique values in a dictionary.\n    '''\n    return list(dict1.keys())\n    \ndef get_unique_values_4(dict1):\n    '''\n    Write a function to get unique values in a dictionary.\n    '''\n    return list(dict1.keys())\n    \ndef remove_key_from_dictionary(dict1, key):\n    '''\n    Write a function to remove a key from a dictionary.\n    '''\n    del dict1[key]\n    return dict1\n    \ndef remove_key_from_dictionary_2(dict1, key):\n    '''\n    Write a function to remove a key from a dictionary.\n    '''\n    dict1.pop(key)\n    return dict1\n    \ndef remove_key_from_dictionary_3(dict1, key):\n    '''\n    Write a function to remove a key from a dictionary.\n    '''\n    dict1.pop(key, None)\n    return dict1\n    \ndef remove_key_from_dictionary_4(dict1, key):\n    '''\n    Write a function to remove a key from a dictionary.\n    '''\n    dict1.pop(key, \"\")\n    return dict1\n    \ndef get_all_keys_from_dictionary(dict1):\n    '''\n    Write a function to get all keys from a dictionary.\n    '''\n    return dict1.keys()\n    \ndef get_all_keys_from_dictionary_2(dict1):\n    '''\n    Write a function to get all keys from a dictionary.\n    '''\n    return dict1.keys()\n    \ndef get_all_keys_from_dictionary_3(dict1):\n    '''\n    Write a function to get all keys from a dictionary.\n    '''\n    return list(dict1.keys())\n    \ndef get_all_keys_from_dictionary_4(dict1):\n    '''\n    Write a function to get all keys from a dictionary.\n    '''\n    return list(dict1.keys())\n    \ndef get_all_items_from_dictionary(dict1):\n    '''\n    Write a function to get all items from a dictionary.\n    '''\n    return dict1.items()\n    \ndef get_all_items_from_dictionary_2(dict1):\n    '''\n    Write a function to get all items from a dictionary.\n    '''\n    return dict1.items()\n    \ndef get_all_items_from_dictionary_3(dict1):\n    '''\n    Write a function to get all items from a dictionary.\n    '''\n    return list(dict1.items())\n    \ndef get_all_items_from_dictionary_4(dict1):\n    '''\n    Write a function to get all items from a dictionary.\n    '''\n    return list(dict1.items())\n    \ndef get_all_keys_and_values_from_dictionary(dict1):\n    '''\n    Write a function to get all keys and values from a dictionary.\n    '''\n    return dict1.items()\n    \ndef get_all_keys_and_values_from_dictionary_2(dict1):\n    '''\n    Write a function to get all keys and values from a dictionary.\n    '''\n    return dict1.items()\n    \ndef get_all_keys_and_values_from_dictionary_3(dict1):\n    '''\n    Write a function to get all keys and values from a dictionary.\n    '''\n    return list(dict1.items())\n    \ndef get_all_keys_and_values_from_dictionary_4(dict1):\n    '''\n    Write a function to get all keys and values from a dictionary.\n    '''\n    return list(dict1.items())\n    ",
        "num_ids": 13
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    keys_list = list(dict1.keys())\n    val_list = list(dict1.values())\n    sorted_keys = sorted(keys_list, key=lambda key: val_list[keys_list.index(key)])\n    sorted_dict = {}\n    for key in sorted_keys:\n        sorted_dict[key] = dict1[key]\n    return sorted_dict\n",
        "num_ids": 97
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # max = nums[0]\n    # min = nums[0]\n    # for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max + min\n    return sum(sorted(nums)[:2])\n",
        "num_ids": 85
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = 0\n    min_num = 0\n    nums.sort()\n    max_num = nums[-1]\n    min_num = nums[0]\n    return max_num + min_num\n",
        "num_ids": 56
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    num_sum = 0\n    for i in nums:\n        num_sum += i\n    return num_sum\n",
        "num_ids": 30
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num+min_num\n",
        "num_ids": 74
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sorted_list = sorted(nums)\n    sum_of_sorted_list = sum(sorted_list)\n    sum_of_biggest_and_smallest = sorted_list[0] + sorted_list[-1]\n    return sum_of_biggest_and_smallest\n",
        "num_ids": 74
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max=nums[0]\n    min=nums[0]\n    for i in range(0,len(nums)):\n        if nums[i]>max:\n            max=nums[i]\n        if nums[i]<min:\n            min=nums[i]\n    return max+min\nprint(big_sum([2,3,4,5,6,7,8,9]))\n",
        "num_ids": 105
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n",
        "num_ids": 24
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_sum = -9999\n    min_sum = 9999\n    for n in nums:\n        if n > max_sum:\n            max_sum = n\n        if n < min_sum:\n            min_sum = n\n    return max_sum + min_sum\n",
        "num_ids": 68
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sorted_nums = sorted(nums)\n    return sorted_nums[-1] + sorted_nums[0]\n",
        "num_ids": 34
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(nums)):\n        if sum1 < nums[i]:\n            sum1 = nums[i]\n        if sum2 > nums[i]:\n            sum2 = nums[i]\n    return sum1 + sum2\n",
        "num_ids": 77
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    print(string.lower())\n",
        "num_ids": 10
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Check if the string is lowercased\n    return all(x.islower() for x in string)\n",
        "num_ids": 28
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    # Code goes here\n",
        "num_ids": 15
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n",
        "num_ids": 18
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    #write your code here.\n    #pass\n",
        "num_ids": 21
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n",
        "num_ids": 10
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if type(string) == str:\n        return string.lower()\n    else:\n        raise ValueError\n",
        "num_ids": 28
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i].islower():\n            str2 += str1[i]\n    return str2\n",
        "num_ids": 47
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result=[]\n    str1=str1.split(\" \")\n    for word in str1:\n        if word.islower():\n            result.append(word)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(\"[a-z]\", '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    '''\n    Steps:\n    1) Create an array of characters.\n    2) Traverse the given string.\n    3) If the current character is lowercase, then store it in a variable and check if it is present in the array, if yes then remove it from the array.\n    4) If not present in the array then simply return the given string.\n    5) Traverse the array again and return the updated array.\n    '''\n    array = []\n    for char in str1:\n        if char.islower():\n            array.append(char)\n    for char in array:\n        str1 = str1.replace(char, '')\n    return str1\n",
        "num_ids": 57
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if len(str1)==1:\n        return 'Not a string'\n    else:\n        str_arr = str1.split(' ')\n        final_str = ''\n        for i in str_arr:\n            if len(i)>1:\n                for j in i:\n                    if not j.islower():\n                        final_str += j\n                if final_str!= '':\n                    final_str +=''\n        return final_str\n",
        "num_ids": 110
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #create a regular expression for lowercase characters\n    regex = re.compile(r'[a-z]')\n    #find all matches of regex in the given string\n    result = regex.findall(str1)\n    #return the string without lowercase substrings\n    return ''.join([c for c in str1 if not c.islower()])\n    \ndef remove_vowels(str1):\n    '''\n    Write a function to remove vowels from a given string.\n    '''\n    #create a regular expression for vowels\n    regex = re.compile(r'[aeiou]')\n    #find all matches of regex in the given string\n    result = regex.findall(str1)\n    #return the string without vowels\n    return ''.join([c for c in str1 if not c.isalpha()])\n    \ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    #create a regular expression for digits\n    regex = re.compile(r'[0-9]')\n    #find all matches of regex in the given string\n    result = regex.findall(str1)\n    #return the string without digits\n    return ''.join([c for c in str1 if not c.isdigit()])\n    \ndef remove_spaces(str1):\n    '''\n    Write a function to remove whitespaces from a given string.\n    '''\n    #create a regular expression for spaces\n    regex = re.compile(r'\\s')\n    #find all matches of regex in the given string\n    result = regex.findall(str1)\n    #return the string without whitespaces\n    return ''.join([c for c in str1 if not c.isspace()])\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    #return whether the given string is palindrome or not\n    return str1 == str1[::-1]\n    \ndef is_anagram(str1,str2):\n    '''\n    Write a function to check whether the given string is anagram or not.\n    '''\n    #convert the strings to lowercase\n    str1 = str1.lower()\n    str2 = str2.lower()\n    #check if the given strings have equal length and are has the same characters\n    return len(str1) == len(str2) and set(str1) == set(str2)\n    \ndef reverse(str1):\n    '''\n    Write a function to reverse the given string.\n    '''\n    #return a reversed version of the given string\n    return str1[::-1]\n    \ndef is_pangram(str1, alphabet=None):\n    '''\n    Write a function to check whether the given string is pangram or not.\n    '''\n    #check if alphabet is None\n    if alphabet is None:\n        #convert the string to lowercase\n        str1 = str1.lower()\n        #create a set of all the characters in the string\n        alphabet = set(str1)\n        #check if the given string contains all the characters in the alphabet\n        return len(alphabet) == 26\n    #check if the given string contains all the characters in the alphabet\n    return len(alphabet) == len(str1)\n    \ndef is_power(number1,number2):\n    '''\n    Write a function to check whether the given numbers are power of each other or not.\n    '''\n    #check if the given number is 0\n    if number1 == 0 or number2 == 0:\n        return number1 == number2\n    #check if the given number is positive\n    if number1 < 0 or number2 < 0:\n        return False\n    #check if the given number is a factor of the other\n    return number1 % number2 == 0\n    \ndef sum_of_digits(number1):\n    '''\n    Write a function to sum all the digits of the given number.\n    '''\n    #check if the given number is 0\n    if number1 == 0:\n        return 0\n    #convert the given number to a string\n    number1 = str(number1)\n    #sum all the digits\n    return sum([int(c) for c in number1])\n    \ndef is_valid_date(str1):\n    '''\n    Write a function to check whether the given date string is in the correct format or not.\n    '''\n    #create a regular expression for date in the format YYYY-MM-DD\n    regex = re.compile(r'^(?:\\d{4}-)?(?:\\d{2}-)?(?:\\d{2})$')\n    #check if the given string is a date\n    return regex.match(str1) is not None\n    \ndef is_valid_email(str1):\n    '''\n    Write a function to check whether the given email string is in the correct format or not.\n    '''\n    #create a regular expression for email in the format [username]@[domain].[extension]\n    regex = re.compile(r'^[a-zA-Z0-9-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$')\n    #check if the given string is an email\n    return regex.match(str1) is not None\n    \ndef is_valid_ip_address(str1):\n    '''\n    Write a function to check whether the given string is a valid IP address or not.\n    '''\n    #create a regular expression for IP address in the format xxx.xxx.xxx.xxx\n    regex = re.compile(r'^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))$')\n    #check if the given string is a IP address\n    return regex.match(str1) is not None\n    \ndef is_valid_credit_card(str1):\n    '''\n    Write a function to check whether the given string is a valid credit card number or not.\n    '''\n    #convert the given string to a list\n    str1 = list(str1)\n    #check if the given string is a credit card number\n    return len(str1) == 16 and str1[:2] == ['4', '5']\n    \ndef next_palindrome(str1):\n    '''\n    Write a function to find the next palindrome for the given string.\n    '''\n    #create a regular expression for a non-negative integer\n    regex = re.compile(r'[0-9]')\n    #check if the given string is a palindrome\n    if str1 == str1[::-1]:\n        #return the given string\n        return str1\n    #convert the given string to a list\n    str1 = list(str1)\n    #convert the given string to a list\n    str1 = list(str1)\n    #initialize a variable for storing the new string\n    new_str = str1\n    #initialize a variable for storing the index\n    index = 0\n    #check if the given string contains odd number of characters\n    if len(str1) % 2 == 1:\n        #add one character at the end of the given string\n        str1.append('')\n        #initialize a variable for storing the last character\n        last_char = ''\n    #for every character in the given string\n    for i in range(len(str1)):\n        #check if the given string contains an integer\n        if regex.match(str1[i]):\n            #initialize a variable for storing the next integer\n            next_int = int(str1[i]) + 1\n            #check if the next integer is a palindrome\n            if str(next_int) == str(next_int)[::-1]:\n                #initialize a variable for storing the next integer\n                new_int = int(str1[i]) + 1\n                #store the next integer in the given string\n                new_str[i] = str(new_int)\n                #store the last character in the given string\n                last_char = st",
        "num_ids": 393
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # For given string str = \"ADC...SAC\",\n    # your function should return \u201cA....SAC\u201d\n    str = str1.lower()\n    return re.sub('[a-z]', '', str)\n",
        "num_ids": 58
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return str1\n",
        "num_ids": 17
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = str1\n    return re.sub(r'[a-z]', '', new_str)\n",
        "num_ids": 31
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]','',str1)\n",
        "num_ids": 19
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    elif n > 0 :\n        return n % 10\n    else :\n        return 10 + (n % 10)\n",
        "num_ids": 41
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if(n<0):\n        n=-n\n    while(n):\n        a=n%10\n        n//=10\n        return a\nn=int(input(\"Enter a number:\"))\nprint(\"The first digit of a number is:\",first_Digit(n))\n",
        "num_ids": 69
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    for i in range(0,len(n)):\n        if n[i]!='0':\n            return n[i]\n    return -1\n    \n    \ndef first_n_digits(n,n_digits):\n    '''\n    Write a python function to return the first n digits of a given number.\n    '''\n    n_digits = n_digits + 1\n    for i in range(0,n_digits):\n        if n<10:\n            return n\n        else:\n            n = n//10\n    return -1\n    \ndef last_n_digits(n,n_digits):\n    '''\n    Write a python function to return the last n digits of a given number.\n    '''\n    if len(n)<n_digits:\n        return -1\n    else:\n        return n[-n_digits:]\n    \ndef sum_last_n_digits(n,n_digits):\n    '''\n    Write a python function to return the sum of the last n digits of a given number.\n    '''\n    if len(n)<n_digits:\n        return -1\n    else:\n        return sum(map(int, n[-n_digits:]))\n    \ndef sum_first_n_digits(n,n_digits):\n    '''\n    Write a python function to return the sum of the first n digits of a given number.\n    '''\n    if len(n)<n_digits:\n        return -1\n    else:\n        return sum(map(int, n[:n_digits]))\n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\n",
        "num_ids": 18
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if(n==0) :\n        print('0')\n    elif(n<0) :\n        print('-')\n    else :\n        print(n%10)\n",
        "num_ids": 45
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = ''\n    for digit in n :\n        first_digit += str(digit)\n        break\n    return int(first_digit)\n",
        "num_ids": 38
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<10 :\n        return n\n    else :\n        return int(n/10)\ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n<10 :\n        return n\n    else :\n        return int(n%10)\ndef is_Palindrome(n) :\n    '''\n    Write a python function to check whether a number is a palindrome or not.\n    '''\n    return first_Digit(n) == last_Digit(n)\ndef sum_of_Digits(n) :\n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    while n>9 :\n        a=n%10\n        n=int(n/10)\n        b=n%10\n        n=int(n/10)\n        return a+b+n\ndef product_of_Digits(n) :\n    '''\n    Write a python function to find the product of digits of a given number.\n    '''\n    while n>9 :\n        a=n%10\n        n=int(n/10)\n        b=n%10\n        n=int(n/10)\n        return a*b*n\ndef digit_count(n) :\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    count=0\n    while n>9 :\n        a=n%10\n        n=int(n/10)\n        count+=1\n    return count+1\ndef prime_or_not(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = False\n    if n>1 :\n        for i in range(2,n) :\n            if n%i==0 :\n                flag = True\n                break\n    if flag :\n        return False\n    else :\n        return True\ndef rotate_number(n,d) :\n    '''\n    Write a python function to rotate a number by a given value.\n    '''\n    n=int(n)\n    d=int(d)\n    return int(str(n)[d:]+str(n)[:d])\ndef is_Prime(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = False\n    for i in range(2,n) :\n        if n%i==0 :\n            flag = True\n            break\n    if flag :\n        return False\n    else :\n        return True\ndef sum_of_primes(n) :\n    '''\n    Write a python function to find the sum of all the prime numbers upto a given number.\n    '''\n    sum=0\n    for i in range(2,n) :\n        flag = False\n        for j in range(2,i) :\n            if i%j==0 :\n                flag = True\n                break\n        if flag == False :\n            sum+=i\n    return sum\ndef armstrong_or_not(n) :\n    '''\n    Write a python function to check whether a number is armstrong or not.\n    '''\n    return sum_of_Digits(n)==n\ndef reverse_number(n) :\n    '''\n    Write a python function to reverse a number.\n    '''\n    n=int(n)\n    rev=0\n    while n>0 :\n        rev=rev*10+n%10\n        n=int(n/10)\n    return rev\ndef factorial(n) :\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    fact=1\n    for i in range(1,n+1) :\n        fact=fact*i\n    return fact\ndef fibonacci_number(n) :\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n==0 or n==1 :\n        return n\n    else :\n        return fibonacci_number(n-1)+fibonacci_number(n-2)\ndef fibonacci_series(n) :\n    '''\n    Write a python function to find the fibonacci series of a given number.\n    '''\n    if n==0 :\n        return []\n    else :\n        return [fibonacci_number(i) for i in range(0,n+1)]\ndef fibonacci_number_with_memo(n) :\n    '''\n    Write a python function to find the nth fibonacci number using memoization.\n    '''\n    if n in fibonacci_memo :\n        return fibonacci_memo[n]\n    else :\n        fibonacci_memo[n]=fibonacci_number_with_memo(n-1) + fibonacci_number_with_memo(n-2)\n        return fibonacci_memo[n]\ndef fibonacci_series_with_memo(n) :\n    '''\n    Write a python function to find the fibonacci series of a given number using memoization.\n    '''\n    fibonacci_memo = {0:0,1:1}\n    if n in fibonacci_memo :\n        return [fibonacci_memo[i] for i in range(0,n+1)]\n    else :\n        fibonacci_memo[n]=fibonacci_number_with_memo(n-1) + fibonacci_number_with_memo(n-2)\n        return [fibonacci_memo[i] for i in range(0,n+1)]\ndef fibonacci_number_using_list(n) :\n    '''\n    Write a python function to find the nth fibonacci number using list.\n    '''\n    if n==0 or n==1 :\n        return n\n    else :\n        fibonacci_list=[0,1]\n        for i in range(2,n+1) :\n            fibonacci_list.append(fibonacci_list[i-1]+fibonacci_list[i-2])\n        return fibonacci_list[n]\ndef fibonacci_series_using_list(n) :\n    '''\n    Write a python function to find the fibonacci series of a given number using list.\n    '''\n    fibonacci_list=[0,1]\n    for i in range(2,n+1) :\n        fibonacci_list.append(fibonacci_list[i-1]+fibonacci_list[i-2])\n    return fibonacci_list\ndef fibonacci_number_using_dict(n) :\n    '''\n    Write a python function to find the nth fibonacci number using dictionary.\n    '''\n    if n==0 or n==1 :\n        return n\n    else :\n        fibonacci_dict={0:0,1:1}\n        for i in range(2,n+1) :\n            fibonacci_dict[i]=fibonacci_dict[i-1]+fibonacci_dict[i-2]\n        return fibonacci_dict[n]\ndef fibonacci_series_using_dict(n) :\n    '''\n    Write a python function to find the fibonacci series of a given number using dictionary.\n    '''\n    fibonacci_dict={0:0,1:1}\n    for i in range(2,n+1) :\n        fibonacci_dict[i]=fibonacci_dict[i-1]+fibonacci_dict[i-2]\n    return [fibonacci_dict[i] for i in range(0,n+1)]\ndef fibonacci_number_using_generator(n) :\n    '''\n    Write a python function to find the nth fibonacci number using generator.\n    '''\n    a=0\n    b=1\n    count=0\n    while count<n :\n        yield b\n        a,b=b,a+b\n        count+=1\ndef fibonacci_series_using_generator(n) :\n    '''\n    Write a python function to find the fibonacci series of a given number using generator.\n    ''",
        "num_ids": 24
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 : \n        print('Enter a positive number')\n    else :\n        return int(str(n)[0])\n        \n        \ndef double_of_number(n) : \n    '''\n    Write a python function to return the double of a given number.\n    '''\n    if n < 0 :\n        print('Enter a positive number')\n    else :\n        return int(n) * 2\n        \n",
        "num_ids": 33
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    \n    if n>=0 :\n        while n>0 :\n            r = n%10\n            n = n//10\n            return r\n    else :\n        return -1\n        \n",
        "num_ids": 50
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for n in list:\n        if n % 2!= 0:\n            odds.append(n)\n    return odds\n",
        "num_ids": 38
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    print(\"The list is \",list)\n    for i in list:\n        if i % 2!= 0:\n            print(i)\n",
        "num_ids": 35
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for x in list:\n        if x % 2 == 0:\n            odd_list.append(x)\n    return odd_list\n",
        "num_ids": 41
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list = [] \n    for i in list: \n        if i % 2 == 1: \n            new_list.append(i) \n    return new_list\n",
        "num_ids": 45
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0] \n",
        "num_ids": 20
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2]\n",
        "num_ids": 16
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = [] \n    for x in list: \n        if x%2 == 1: \n            odd_list.append(x) \n    return odd_list \n",
        "num_ids": 46
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!= 0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [number for number in list if number % 2 == 1]\n",
        "num_ids": 18
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #the sum of the first n natural numbers\n    sum_of_n = n * (n+1) / 2\n    #sum of the cubes\n    sum_of_cube = (n**2)*(n+1)*(n+2) / 6\n",
        "num_ids": 62
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n) :\n        sum = sum + i**3\n",
        "num_ids": 26
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    a = 0\n    b = 0\n    for i in range(n+1) :\n        a += i ** 3\n        b += i\n    return (a - b * b)\n",
        "num_ids": 46
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    nums = [i*i*i for i in range(1,n+1)]\n    return sum(nums) - sum(range(1,n+1))\n",
        "num_ids": 43
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1):\n        sum1 += i ** 3\n        sum2 += i\n    return abs(sum2 ** 3 - sum1)\nn = int(input())\nprint(difference(n))\n",
        "num_ids": 69
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n",
        "num_ids": 22
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(n)\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_numbers += i\n        sum_of_cubes += i**3\n    return sum_of_cubes - sum_of_numbers\n",
        "num_ids": 81
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (pow(n,3)+n)*(n+1)/2\n",
        "num_ids": 21
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (sum(map(lambda x: x*x*x, range(1,n+1)))*3- sum(range(1,n+1)))\n",
        "num_ids": 40
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_nums = 0\n    for i in range(1, n+1) :\n        sum_cubes += i**3\n        sum_nums += i\n    return abs(sum_cubes - sum_nums)\nprint(difference(100))\n",
        "num_ids": 73
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # A = [1,3,4,5,2,4,6,7] \n    # N = len(A) \n    count = 0 \n    for i in range(N-1) : \n        for j in range(i+1, N) : \n            if ((A[i] ^ A[j]) & 1) : \n                count += 1\n    return count \n",
        "num_ids": 97
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N) :\n        for j in range(i + 1, N) : \n            if((A[i] ^ A[j]) % 2!= 0) :\n                count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    d = dict()\n    for i in range(0,N) :\n        d[A[i]] = d.get(A[i],0) + 1\n    \n    # print(d)\n    \n    # for key in d :\n    #     if key%2!=0 :\n    #         print(d[key])\n    \n    \n    l = []\n    for key in d :\n        if key%2!=0 :\n            l.append(d[key])\n    \n    return (len(l)*(len(l)-1))/2\n",
        "num_ids": 137
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) & 1 :\n                count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    sum = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if(A[i] ^ A[j] & 1) :\n                sum = sum + 1\n    return sum\n",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Initialize a counter\n    count = 0\n    # Do for every element in the array\n    for i in range(N) :\n        # Check for every element in the array\n        for j in range(i+1,N) :\n            # Check for every element in the array\n            for k in range(j+1,N) :\n                # Check if the xor of all the elements is odd\n                if((A[i]^A[j])^A[k]==1) :\n                    # Increment the counter\n                    count += 1\n    # Return the count\n    return count\n",
        "num_ids": 140
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(0,N):\n        for j in range(0,N):\n            if ((A[i]^A[j])&1):\n                count+=1\n    return count\n    \n",
        "num_ids": 56
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #code here\n    return int((N*(N-1))/2)\n",
        "num_ids": 22
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N%2!= 0 : \n        return 'Not possible for odd number of elements'\n    else : \n        count = 0\n        for i in range(0,N) :\n            for j in range(i+1,N) :\n                xor = A[i]^A[j]\n                if(xor & 1) :\n                    count = count + 1\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i + 1, N) : \n            if(A[i] ^ A[j] & 1) : \n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join(c.upper() if c.islower() else c.lower() for c in string)\n",
        "num_ids": 29
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    lower = string.lower()\n    upper = string.upper()\n    \n    return lower, upper\n",
        "num_ids": 28
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    string_list = [char for char in string]\n    for i in range(len(string_list)):\n        if string_list[i] == string_list[i].upper():\n            string_list[i] = string_list[i].lower()\n        else:\n            string_list[i] = string_list[i].upper()\n    return \"\".join(string_list)\n    \n",
        "num_ids": 100
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([a.swapcase() for a in string])\n",
        "num_ids": 20
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(letter.swapcase() for letter in string)\n",
        "num_ids": 20
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    low_str = string.lower()\n    up_str = string.upper()\n    return low_str + up_str\n",
        "num_ids": 32
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n",
        "num_ids": 56
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # TODO\n    # in order to toggle the case, we must make a list of all the characters in the string\n    # then we must convert the list into a string\n    # finally we can toggle the case of each character using a loop\n    # return the final string\n    characters = [char for char in string]\n    return ''.join([toggle_case(char) for char in characters])\n",
        "num_ids": 93
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string_lower = string.lower()\n    string_upper = string.upper()\n    \n    if string_lower == string_upper:\n        return string_lower\n    elif string_lower == string_lower.swapcase():\n        return string_upper\n    else:\n        return string_upper.swapcase()\n    \n    \ndef toggle_string2(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n    \n    \nprint(toggle_string('LOL'), toggle_string2('LOL'))\nprint(toggle_string('WoW'), toggle_string2('WoW'))\nprint(toggle_string('abc'), toggle_string2('abc'))\nprint(toggle_string('xyz'), toggle_string2('xyz')",
        "num_ids": 105
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(i) - int(j)) for i,j in zip(str(n1), str(n2))])\n",
        "num_ids": 36
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    sum = 0\n    for i in range(0, len(n1)):\n        sum += abs(int(n1[i]) - int(n2[i]))\n    return sum\n",
        "num_ids": 68
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    return sum(abs(int(x) - int(y)) for x, y in zip(str(n1), str(n2)))",
        "num_ids": 36
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < 10 and n2 < 10:\n        return abs(n1 - n2)\n    if n1 >= 10 or n2 >= 10:\n        return digit_distance_nums(n1 // 10, n2 // 10) + abs(n1 % 10 - n2 % 10)\n",
        "num_ids": 72
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # def sum_of_digit_diff(n1, n2):\n    #     return sum([abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2))])\n    return sum(abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2)))\n",
        "num_ids": 89
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    \n    sum = 0\n    for i in range(len(n1)):\n        sum += abs(int(n1[i]) - int(n2[i]))\n        \n    return sum\n",
        "num_ids": 70
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < 10 and n2 < 10:\n        return abs(n1-n2)\n    else:\n        return digit_distance_nums(int(str(n1)[0]), int(str(n2)[0])) + digit_distance_nums(int(str(n1)[1]), int(str(n2)[1]))\n",
        "num_ids": 86
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(i) - int(j)) for i,j in zip(str(n1), str(n2)))\n    \nprint(digit_distance_nums(123, 567))\n",
        "num_ids": 52
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    #if type(n1) == str or type(n2) == str:\n    #    return \"Invalid Input\"\n    \n    n1_len = len(str(n1))\n    n2_len = len(str(n2))\n    n1_int = int(n1)\n    n2_int = int(n2)\n",
        "num_ids": 85
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    if n1 > n2:\n        bigger = n1\n        smaller = n2\n    else:\n        bigger = n2\n        smaller = n1\n",
        "num_ids": 48
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    sums = []\n    sum = 0\n    \n    for i in range(size):\n        sum += a[i]\n        sums.append(sum)\n        \n    max_sum = max(sums)\n    return max_sum\n    ",
        "num_ids": 63
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #Initialise with first element\n    max_sum = a[0]\n    cur_sum = a[0]\n",
        "num_ids": 30
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if not a:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = 0\n    for i in range(0, size):\n        curr_sum = curr_sum + a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n",
        "num_ids": 93
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for start in range(size):\n        sum = 0\n        for end in range(start, size):\n            sum += a[end]\n            max_sum = max(max_sum, sum)\n    return max_sum\n",
        "num_ids": 62
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum_max = 0\n    for i in range(size):\n        sum_max = max(sum_max, sum(a[i:size]))\n    return sum_max\n",
        "num_ids": 45
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum = curr_sum + a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n",
        "num_ids": 90
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n",
        "num_ids": 16
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    for i in range(0,size):\n        sum = 0\n        for j in range(i,size):\n            sum += a[j]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n",
        "num_ids": 69
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    for element1 in test_tup1:\n        if not element1 in test_tup2:\n            union.append(element1)\n    for element2 in test_tup2:\n        if not element2 in test_tup1:\n            union.append(element2)\n    return sorted(union)\n",
        "num_ids": 82
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    list_1 = list(test_tup1)\n    list_2 = list(test_tup2)\n    list_3 = list_1 + list_2\n    print(sorted(set(list_3)))\n",
        "num_ids": 56
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1 + test_tup2)))\n",
        "num_ids": 23
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return set(test_tup1).union(test_tup2)\n",
        "num_ids": 21
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = test_tup1 + test_tup2\n    union_list = sorted(set(union_list))\n    return tuple(union_list)\n    \n",
        "num_ids": 44
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    print (sorted(set(test_tup1).union(set(test_tup2))))\n    return None\n",
        "num_ids": 31
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1).union(set(test_tup2))))\n",
        "num_ids": 27
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    return sorted(list(set(union)))\n",
        "num_ids": 28
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # You may assume that the given tuples will always have the same number of elements.\n    # test_tup1 = (2, 5, 3, 9, 1)\n    # test_tup2 = (2, 3, 6, 8, 5, 4)\n    # test_tup1 = (2, 5, 3, 9, 1)\n    # test_tup2 = (2, 3, 6, 8, 5, 4)\n    test_tup1 = (2, 5, 3, 9, 1)\n    test_tup2 = (2, 3, 6, 8, 5, 4)\n    test_tup3 = (2, 5, 3, 9, 1)\n    test_tup4 = (2, 3, 6, 8, 5, 4)\n",
        "num_ids": 186
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1, tup2 = set(test_tup1), set(test_tup2)\n    return tuple(sorted(tup1.union(tup2)))\n",
        "num_ids": 46
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lengths = []\n    for sublist in lst:\n        lengths.append(len(sublist))\n    max_length = max(lengths)\n    return max_length\n",
        "num_ids": 46
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst = [[1,2,3],[4,5,6],[7,8,9]]\n    l = []\n    for i in range(len(lst)):\n        if len(lst[i]) not in l:\n            l.append(len(lst[i]))\n    return max(l)\n",
        "num_ids": 79
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        lst_len = len(lst)\n        list_max = []\n        for i in range(lst_len):\n            x = lst[i]\n            sub_lst = [x]\n            for j in range(i+1,lst_len):\n                x = x + lst[j]\n                if x > 0:\n                    sub_lst.append(x)\n                else:\n                    break\n            list_max.append(len(sub_lst))\n        return max(list_max)\n",
        "num_ids": 147
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max(map(len, lst))\n",
        "num_ids": 14
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l = len(lst)\n    max_length = 0\n    for i in range(l):\n        for j in range(i, l):\n            if len(lst[i:j + 1]) > max_length:\n                max_length = len(lst[i:j + 1])\n    return max_length\n",
        "num_ids": 80
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    dct = {}\n    for item in lst:\n        if item in dct.keys():\n            dct[item] += 1\n        else:\n            dct[item] = 1\n    max_length = 0\n    for key in dct.keys():\n        max_length = max(max_length, dct[key])\n    return max_length\n",
        "num_ids": 88
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    #lst = list(map(int,input('Enter the list of numbers : ').split()))\n    max = 0\n    for i in lst:\n        if len(i) > max:\n            max = len(i)\n    return max\n",
        "num_ids": 62
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(0,len(lst)):\n        temp_lst = [lst[i]]\n        for j in range(i+1,len(lst)):\n            if lst[j] not in temp_lst:\n                temp_lst.append(lst[j])\n            else:\n                if len(temp_lst) > max_len:\n                    max_len = len(temp_lst)\n                    lst_len = len(temp_lst)\n    return lst_len\n",
        "num_ids": 136
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        j = i\n        while j < len(lst):\n            if len(lst[i]) > len(lst[j]):\n                max_len = len(lst[i])\n                break\n            else:\n                max_len = len(lst[j])\n                break\n            j += 1\n    return max_len\n    \ndef Find_Max_Value(lst):\n    '''\n    Write a python function to find the maximum value from a list of \n    integers.\n    '''\n    max_value = 0\n    for i in range(len(lst)):\n        if max_value < lst[i]:\n            max_value = lst[i]\n    return max_value\n",
        "num_ids": 51
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len=0\n    for i in range(len(lst)):\n        current_sublist_len=1\n        for j in range(i+1,len(lst)):\n            if lst[j] in lst[i]:\n                current_sublist_len+=1\n            else:\n                break\n        max_len=max(max_len,current_sublist_len)\n    return max_len\n",
        "num_ids": 105
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    lst = re.findall(r'\"[^\"]*\"',text)\n    return lst\n",
        "num_ids": 27
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.search(\"\\\"(.*)\\\"\", text)\n    return match.group(1)\n",
        "num_ids": 27
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if type(text)!= str:\n        print('Error! The input is not a string.')\n        return\n    else:\n        values = re.findall('\"(\\S*?)\"', text)\n        return values\n",
        "num_ids": 55
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\\"(.+?)\\\"', text)\n",
        "num_ids": 21
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = r'\\\"[^\\\"]*\\\"'\n    value_list = re.findall(regex, text)\n    return value_list\n",
        "num_ids": 39
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall('\\\"(.+?)\\\"',text)\n    if result:\n        return result\n    return None\n",
        "num_ids": 33
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = re.sub(\"\\n\", '', text)\n    #text = re.sub(\"\\\"\", '', text)\n    text = re.findall(r'\\\"(.*?)\\\"', text)\n    return text\n",
        "num_ids": 55
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pat = re.compile(r'\"(.*)\"')\n    lst = re.findall(pat, text)\n    return lst\n",
        "num_ids": 36
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = r\"(\\\"[^\\\"]*\\\"|\\'[^\\']*\\')\"\n    matches = re.finditer(regex, text, re.MULTILINE)\n    return [match.group() for match in matches]\n    \nif __name__ == '__main__':\n    text = 'In the shell on the upper left, you will notice two different display styles for the text. The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox. In the process, you learned more about Python and how to use the command line.'\n    result = extract_values(text)\n    print(result)\n    \n    assert result[0] == 'In the shell on the upper left, you will notice two different display styles for the text.'\n    assert result[1] == 'The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.'\n    assert result[2] == 'In the process, you learned more about Python and how to use the command line.'\n    assert result[3] == 'The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.'\n    \n    print('The second value was not a string')\n    assert result[1]!= 'The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.'\n    \n    print('The first value is not between quotation marks')\n    assert result[0]!= 'In the shell on the upper left, you will notice two different display styles for the text.'\n    \n    print('All of the strings are present')\n    assert result[0] == 'In the shell on the upper left, you will notice two different display styles for the text.'\n    assert result[1] == 'The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.'\n    assert result[2] == 'In the process, you learned more about Python and how to use the command line.'\n    assert result[3] == 'The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.'\n    \n    print('The values are in the correct order.')\n    assert result.index('In the shell on the upper left, you will notice two different display styles for the text.') < result.index('The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.')\n    \n    print('All tests passed!')\n    \nif __name__ == '__main__':\n    text = '''\n    \"In the shell on the upper left, you will notice two different display styles for the text.\n    The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.\"\n    In the process, you learned more about Python and how to use the command line.\n    \"The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.\"\n    In the process, you learned more about Python and how to use the command line.\n    \"The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.\"\n    In the process, you learned more about Python and how to use the command line.\n    '''\n    result = extract_values(text)\n    print(result)\n    \n    assert result[0] == 'In the shell on the upper left, you will notice two different display styles for the text.'\n    assert result[1] == 'The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.'\n    assert result[2] == 'In the process, you learned more about Python and how to use the command line.'\n    assert result[3] == 'The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.'\n    assert result[4] == 'In the process, you learned more about Python and how to use the command line.'\n    \n    print('The second value was not a string')\n    assert result[1]!= 'The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.'\n    \n    print('The first value is not between quotation marks')\n    assert result[0]!= 'In the shell on the upper left, you will notice two different display styles for the text.'\n    \n    print('All of the strings are present')\n    assert result[0] == 'In the shell on the upper left, you will notice two different display styles for the text.'\n    assert result[1] == 'The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.'\n    assert result[2] == 'In the process, you learned more about Python and how to use the command line.'\n    assert result[3] == 'The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.'\n    assert result[4] == 'In the process, you learned more about Python and how to use the command line.'\n    \n    print('The values are in the correct order.')\n    assert result.index('In the shell on the upper left, you will notice two different display styles for the text.') < result.index('The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.')\n    \n    print('All tests passed!')\n    \nif __name__ == '__main__':\n    text = '''\n    \n    \n    \n    \n    \"In the shell on the upper left, you will notice two different display styles for the text.\n    The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.\"\n    In the process, you learned more about Python and how to use the command line.\n    \"The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.\"\n    In the process, you learned more about Python and how to use the command line.\n    \"The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.\"\n    In the process, you learned more about Python and how to use the command line.\n    \"The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.\"\n    In the process, you learned more about Python and how to use the command line.\n    \"The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.\"\n    In the process, you learned more about Python and how to use the command line.\n    \"The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.\"\n    In the process, you learned more about Python and how to use the command line.\n    \"The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.\"\n    In the process, you learned more about Python and how to use the command line.\n    '''\n    result = extract_values(text)\n    print(result)\n    \n    assert result[0] == 'In the shell on the upper left, you will notice two different display styles for the text.'\n    assert result[1] == 'The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.'\n    assert result[2] == 'In the process, you learned more about Python and how to use the command line.'\n    assert result[3] == 'The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.'\n    assert result[4] == 'In the process, you learned more about Python and how to use the command line.'\n    assert result[5] == 'The shell originally contained no formatting, but then you entered the line command \"python -u day.py 2 3\" in the textbox.'\n    assert result[6] == 'In the process, you learned more about Python and how to use the command line.'\n    assert result[7] == 'The shell originally contained no formatting, but then you entered the line command \"python -u day",
        "num_ids": 267
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #print (arr)\n    #arr.sort()\n    #print (arr)\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    l = len(arr)\n    count = 0\n    for i in range(0,l):\n        for j in range(i+1,l):\n            if(arr[i]!= arr[j]):\n                count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    ans=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                ans+=1\n    return ans\n",
        "num_ids": 51
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\nn=int(input())\na=list(map(int,input().split()))\nprint(count_Pairs(a,n))",
        "num_ids": 83
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs\narr = [10, 20, 30, 20, 10] \nn = len(arr) \nprint(count_Pairs(arr, n)) \n",
        "num_ids": 89
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]!=arr[j]):\n                count+=1\n    return count\n    \ndef count_Pairs(arr, n):\n    count = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]!=arr[j]):\n                count+=1\n    return count\n",
        "num_ids": 129
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n",
        "num_ids": 47
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] == arr[j]):\n                count += 1\n",
        "num_ids": 48
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    count=0\n    for i in range(1,n):\n        if arr[i]!=arr[i-1]:\n            count+=i\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # For simplicity, assume all elements are unique\n    arr.sort()\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if (arr[i]!=arr[j]):\n                count+=1\n    return count\n",
        "num_ids": 72
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n",
        "num_ids": 13
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n = int(n / 10)\n    return sum(digits)\n",
        "num_ids": 44
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return sum_digits(n // 10) + n % 10\n",
        "num_ids": 45
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n",
        "num_ids": 19
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 29
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))\n",
        "num_ids": 15
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n:\n        total, n = total + n % 10, n // 10\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n % 10 + sum_digits(int(n/10)))\n",
        "num_ids": 36
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 29
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n",
        "num_ids": 13
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif len(list1) == 1:\n        return True\n    else:\n        if list1[0] < list1[1]:\n            list1 = list1[1:]\n            return issort_list(list1)\n        else:\n            return False\n",
        "num_ids": 80
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #list1.sort()\n    #print list1 == sorted(list1)\n    #return list1 == sorted(list1)\n    return list1 == sorted(list1)\n",
        "num_ids": 45
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i]<=list1[i+1] for i in range(len(list1)-1))\n",
        "num_ids": 33
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n",
        "num_ids": 13
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    # or\n    # return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n",
        "num_ids": 67
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    is_sorted = True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            is_sorted = False\n    return is_sorted\n    \ndef count_chars(string):\n    '''\n    Write a function that takes a string and returns a dictionary that has \n    the letters of the string as keys and the number of times each letter appears\n    in the string as values.\n    '''\n    dict1 = {}\n    for char in string:\n        dict1[char] = dict1.get(char, 0) + 1\n    return dict1\n    \ndef add_elements(list1):\n    '''\n    Write a function to add all the elements in a list.\n    '''\n    add = 0\n    for i in list1:\n        add += i\n    return add\n    \ndef find_length(list1):\n    '''\n    Write a function that finds the length of a list.\n    '''\n    length = 0\n    for i in list1:\n        length += 1\n    return length\n    \ndef find_factors(number):\n    '''\n    Write a function to find all the factors of a given number.\n    '''\n    list1 = []\n    for i in range(2, number):\n        if number % i == 0:\n            list1.append(i)\n    return list1\n    \ndef find_largest(list1):\n    '''\n    Write a function to find the largest number in a list.\n    '''\n    largest = list1[0]\n    for i in list1:\n        if i > largest:\n            largest = i\n    return largest\n    \ndef find_smallest(list1):\n    '''\n    Write a function to find the smallest number in a list.\n    '''\n    smallest = list1[0]\n    for i in list1:\n        if i < smallest:\n            smallest = i\n    return smallest\n    \ndef find_count(list1, value):\n    '''\n    Write a function that finds the number of times a value appears in a list.\n    '''\n    count = 0\n    for i in list1:\n        if i == value:\n            count += 1\n    return count\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function that removes all the duplicate values in a list.\n    '''\n    list1 = list(dict.fromkeys(list1))\n    return list1\n",
        "num_ids": 22
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i]<list1[i+1] for i in range(len(list1)-1))\n",
        "num_ids": 32
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for index in range(len(list1)-1):\n        if list1[index] > list1[index + 1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n",
        "num_ids": 13
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_ = []\n    for x in range(length):\n        dict_ = {}\n        list_.append(dict_)\n    return list_\n",
        "num_ids": 37
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_empty_dict = [{} for _ in range(length)]\n    return list_of_empty_dict\n",
        "num_ids": 32
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length == 1:\n        return [{}]\n    else:\n        return empty_list(length-1) + [{}]\n",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict_list = []\n    for i in range(0, length):\n        empty_dict_list.append({})\n    return empty_dict_list\n",
        "num_ids": 41
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst\n",
        "num_ids": 30
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "num_ids": 29
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # the following line has been given to us\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "num_ids": 34
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for string_list in list1:\n        string_list.sort()\n    \n    return list1\n",
        "num_ids": 29
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n        \n    return list1\n",
        "num_ids": 37
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2=[]\n    for x in list1:\n        list2.append(sorted(x))\n    return list2\n",
        "num_ids": 33
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    new_list = []\n    for sublist in list1:\n        sublist.sort()\n        new_list.append(sublist)\n    return new_list\n",
        "num_ids": 44
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "num_ids": 23
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    return [sorted(list1[i]) for i in range(len(list1))]\n",
        "num_ids": 27
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    list1.sort(key=len)\n    for list in list1:\n        list2.append(sorted(list))\n    return list2\n",
        "num_ids": 44
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sublist = sorted(sublist)\n        sorted_list.append(sublist)\n    return sorted_list\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return set([i for num in nums for i in num])\n",
        "num_ids": 18
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    num_dict = {}\n    unique_nums = []\n    for num in nums:\n        if num in num_dict:\n            continue\n        else:\n            num_dict[num] = 1\n            unique_nums.append(num)\n    return unique_nums\n",
        "num_ids": 69
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # return len(set(nums))\n    return list(set(nums))\n",
        "num_ids": 23
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                nums[j] = None\n",
        "num_ids": 55
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for i in nums:\n        if i not in result:\n            result.append(i)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    nums = list(set(nums))\n    \n    return nums\n    \n    \ndef unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    nums = list(set(nums))\n    \n    return nums\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1952
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = list(set(nums))\n    return result\n",
        "num_ids": 17
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for i in range(len(nums)):\n        if nums[i] not in result:\n            result.append(nums[i])\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = [1,1,2,2,3,4,4,5]\n    unique_nums = set(nums)\n    unique_nums = list(unique_nums)\n    print(unique_nums)\n",
        "num_ids": 59
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = set(list_data)\n    total = 1\n    for i in unique_list:\n        total *= i\n    return total\n    \n    \ndef unique_product_tuple(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = set(list_data)\n    return reduce(lambda x, y: x*y, unique_list)\n    \n    \ndef unique_product_lambda(list_data):\n    '''\n    Write a python lambda expression to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x, y: x*y, set(list_data))\n    \n    \ndef unique_product_map(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x, y: x*y, map(lambda x: x, set(list_data)))\n    \n    \nif __name__ == \"__main__\":\n    list_data = [1,1,2,2,3,3]\n    \n    unique_product(list_data)\n    unique_product_tuple(list_data)\n    unique_product_lambda(list_data)\n    unique_product_map(list_data)",
        "num_ids": 111
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    my_list = list(set(list_data))\n    product = 1\n    for each in my_list:\n        product = product * each\n    return product\n",
        "num_ids": 41
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #initialise variables\n    unique_numbers = []\n    product = 1\n    #loop through the given list and find the unique numbers\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    #loop through the unique numbers and multiply them\n    for num in unique_numbers:\n        product *= num\n    return product\n",
        "num_ids": 96
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # return  set(list_data)\n    list_data = sorted(list_data)\n    if len(list_data) == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(len(list_data)):\n            result = result * list_data[i]\n        return result\n",
        "num_ids": 80
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list=[]\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    total = 1\n    for i in unique_list:\n        total *= i\n    print(total)\n",
        "num_ids": 64
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    unique_list = set(list_data)\n    for item in unique_list:\n        product = product * item\n    return product\n",
        "num_ids": 39
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = set(list_data)\n    product = 1\n    for data in unique_list:\n        product *= data\n    return product\n",
        "num_ids": 38
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n",
        "num_ids": 36
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return reduce(lambda x, y: x * y, list(set(list_data)))\n",
        "num_ids": 24
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Get the product of the unique numbers\n    unique_product = 1\n    for data in list_data:\n        if list_data.count(data) == 1:\n            unique_product *= data\n    return unique_product\n",
        "num_ids": 56
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    return 2*pi*r*h+2*pi*r**2\n",
        "num_ids": 27
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sarea = (2*math.pi*r*(r+h)) + (2*math.pi*r*r)\n    return sarea\n",
        "num_ids": 38
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    S = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return S\n",
        "num_ids": 33
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef cylinder_surfacearea_and_volume(r,h):\n    '''\n    Write a function that will calculate the surface area and the volume of a\n    cylinder.\n    '''\n    surfacearea=surfacearea_cylinder(r,h)\n    volume=cylinder_volume(r,h)\n    print(f'The surface area of the cylinder is {surfacearea}.')\n    print(f'The volume of the cylinder is {volume}.')\nr=int(input('Enter the radius of the cylinder: '))\nh=int(input('Enter the height of the cylinder: '))\ncylinder_surfacearea_and_volume(r,h",
        "num_ids": 111
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*(r**2) + 2*3.14*r*h\n",
        "num_ids": 26
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s_area = 2 * pi * r * (r + h)\n    return s_area\n    \n",
        "num_ids": 27
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = math.pi\n    return (2*pi*r*h)+2*pi*r**2\n",
        "num_ids": 28
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*3.14*(r*r) + 2*3.14*(r*h)\n    return surfacearea\n",
        "num_ids": 35
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    a = pi*(r**2)\n    b = pi*(r**2)\n    s = 2*a+2*b\n    return s\n",
        "num_ids": 46
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    return 2*pi*r*h + pi*(r**2)\n",
        "num_ids": 28
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while j<len(A) and i<len(B):\n        if A[j]==B[i]:\n            j+=1\n            i+=1\n        else:\n            i+=1\n    return True if j==len(A) else False\n",
        "num_ids": 72
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in A:\n        if A==B:\n            return True\n        for j in range(len(B)):\n            if i==B[j]:\n                return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in A:\n        if A==B:\n            return True\n        for j in range(len(B)):\n            if i==B[j]:\n                return True\n        return False\n    \n",
        "num_ids": 51
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B)>len(A):\n        return False\n    m=0\n    for i in range(len(B)):\n        for j in range(len(A)):\n            if A[j]==B[i]:\n                m+=1\n        if m==len(B):\n            return True\n        m=0\n    return False\n",
        "num_ids": 86
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag=0\n    for i in range(0, len(B)): \n        if A==B[i:i + len(A)]: \n            flag=1\n    if flag==1: \n        print(\"Yes, List is a Sublist of another.\") \n    else: \n        print(\"No, List is not a Sublist of another.\") \n",
        "num_ids": 88
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    it = iter(B)\n    return all(any(a == it.next() for a in A) for it in iter(it))\n",
        "num_ids": 35
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    count = 0\n    for i in range(len(A)):\n        if A[i] == B[0]:\n            if A[i:i+len(B)] == B:\n                return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i,j,flag=0,0,0\n    if len(B)==0:\n        return True\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            flag=1\n            i+=1\n            j+=1\n        else:\n            i+=1\n    if flag==1 and len(A)>len(B):\n        return True\n    return False\n",
        "num_ids": 105
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B): \n        return False\n    if len(A) > len(B):\n        return False\n    for i in range(0, len(B)):\n        if A[i]!= B[i]:\n            return False\n    return True\n    \ndef get_Sub_Array(A,B):\n    '''\n    Write a python function to find out the sub-array B is subarray of A. \n    '''\n    i = 0\n    j = 0\n    for k in range(0, len(A)):\n        while j < len(B) and i < len(A):\n            if A[i]!= B[j]:\n                i = i + 1\n                j = 0\n            else:\n                j = j + 1\n                i = i + 1\n        if j == len(B):\n            return True\n    return False\n",
        "num_ids": 102
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    print('*'*20)\n    print('\\t\\t\\t Is Sub Array')\n    print('*'*20)\n    \n    result = [b for b in A if b in B] \n    if len(result) > 0:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 78
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    while n>0:\n        fact = fact * n\n        n -= 1\n    fact = str(fact)\n    return fact[len(fact)-1]\n",
        "num_ids": 45
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    factorial = 1\n    \n    if n == 0:\n        return factorial\n        \n    if n < 0:\n        print(\"Factorial does not exist for negative numbers\")\n    else:\n        for i in range(1, n + 1):\n            factorial = factorial*i\n        return factorial%10\n    \n    ",
        "num_ids": 82
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = 0\n    for i in range(1,n+1):\n        last_digit = (last_digit*i) % 10\n    return last_digit\nprint(last_Digit_Factorial(12345))\n",
        "num_ids": 57
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        print(\"Factorial does not exist for negative numbers\")\n    elif n==0:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n",
        "num_ids": 55
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n % 10\n",
        "num_ids": 38
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Base Case\n    if (n == 0 or n == 1):\n        return 1\n    else:\n        return n * last_Digit_Factorial(n - 1)\n",
        "num_ids": 44
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    sum = 1\n    for i in range(2,n+1):\n        sum = sum * i \n    sum = sum % 10\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n",
        "num_ids": 34
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize result \n    res = 1\n    # loop from 1 to n and \n    # update result \n    for i in range(1,n+1): \n        res = res * i \n    # return the last digit of result \n    return int(res % 10)\n",
        "num_ids": 70
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1_len = len(list1)\n    list2_len = len(list2)\n    list3_len = len(list3)\n    if list1_len!= list2_len and list2_len!= list3_len:\n        return \"The list lengths do not match\"\n    else:\n        list1_index = 0\n        list2_index = 0\n        list3_index = 0\n        new_list = []\n        while list1_index < list1_len and list2_index < list2_len and list3_index < list3_len:\n            new_list.append(list1[list1_index])\n            new_list.append(list2[list2_index])\n            new_list.append(list3[list3_index])\n            list1_index = list1_index + 1\n            list2_index = list2_index + 1\n            list3_index = list3_index + 1\n        return new_list\n",
        "num_ids": 235
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list=[]\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n",
        "num_ids": 77
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved = [None]*(len(list1)+len(list2)+len(list3))\n    interleaved[::3] = list1\n    interleaved[1::3] = list2\n    interleaved[2::3] = list3\n    return interleaved\n",
        "num_ids": 72
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #print(list1, list2, list3)\n    list1 = list1[:]\n    list2 = list2[:]\n    list3 = list3[:]\n    final_list = []\n    while len(list1)!= 0 and len(list2)!= 0 and len(list3)!= 0:\n        final_list.append(list1.pop(0))\n        final_list.append(list2.pop(0))\n        final_list.append(list3.pop(0))\n    #print(final_list)\n    #print(list1, list2, list3)\n    return final_list\n",
        "num_ids": 151
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [elem for sublist in zip(list1,list2,list3) for elem in sublist]\n    \ndef flatten_list(list1):\n    '''\n    Write a function that takes an arbitrarily nested list and flattens it into a single dimensional list.\n    '''\n    # Define a function to check if an element is a list.\n    def isList(elem):\n        return isinstance(elem, list)\n    # Function that takes an arbitrarily nested list and flattens it into a single dimensional list.\n    def flatten(l,result = []):\n        for elem in l:\n            if isList(elem):\n                flatten(elem,result)\n            else:\n                result.append(elem)\n        return result\n    return flatten(list1)\n    \ndef reverse_list(list1):\n    '''\n    Write a function that takes a list as a parameter and returns a list with the elements reversed.\n    '''\n    return list1[::-1]\n    \ndef swap_list(list1, list2):\n    '''\n    Write a function that takes 2 lists and swaps their contents.\n    '''\n    return [list2[0],list1[0]],[list2[1],list1[1]]\n    \ndef order_list(list1, list2):\n    '''\n    Write a function that takes 2 lists and returns a list of elements that only occur in the first list.\n    '''\n    return list(set(list1) - set(list2))\n    \ndef union_list(list1, list2):\n    '''\n    Write a function that takes 2 lists and returns a list of elements that occur in either list.\n    '''\n    return list(set(list1) | set(list2))\n    \ndef intersection_list(list1, list2):\n    '''\n    Write a function that takes 2 lists and returns a list of elements that occur in both lists.\n    '''\n    return list(set(list1) & set(list2))\n    \ndef concatenate_list(list1, list2):\n    '''\n    Write a function that takes 2 lists and returns a list with the second list concatenated to the end of the first list.\n    '''\n    return list1 + list2\n    \ndef insert_list(list1, elem, index):\n    '''\n    Write a function that takes a list, a number, and an index and returns a list with the given element inserted at the given index in the original list.\n    '''\n    return list1[0:index] + [elem] + list1[index:len(list1)]\n    \ndef find_index(list1, elem):\n    '''\n    Write a function that takes a list and a number and returns the index of the first element of that number. If no element is a match, return -1.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == elem:\n            return i\n    return -1\n    \ndef get_first_element(list1):\n    '''\n    Write a function that takes a list and returns the first element. If the list is empty, return None.\n    '''\n    if len(list1) == 0:\n        return None\n    return list1[0]\n    \ndef is_element_in_list(list1, elem):\n    '''\n    Write a function that takes a list and a number and returns True if the number is in the list and False if it is not.\n    '''\n    return elem in list1\n    \ndef extend_list(list1, list2):\n    '''\n    Write a function that takes a list and another list of the same length as the first and returns a list of the two lists concatenated together.\n    '''\n    return list1 + list2\n",
        "num_ids": 10
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3) or len(list1)!= len(list3):\n        raise ValueError(\"The input lists should have the same length\")\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n",
        "num_ids": 111
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i = 0\n    newlist = []\n    while i < len(list1):\n        newlist.append(list1[i])\n        newlist.append(list2[i])\n        newlist.append(list3[i])\n        i += 1\n    return newlist\n",
        "num_ids": 69
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = list()\n    for item in zip(list1, list2, list3):\n        result.extend(item)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n",
        "num_ids": 67
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for t in zip(list1,list2,list3) for item in t]\n",
        "num_ids": 26
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1 == test_tup2:\n        return False\n    elif test_tup1[0] == test_tup2[0]:\n        return True\n    elif test_tup1[1] == test_tup2[1]:\n        return True\n    elif test_tup1[2] == test_tup2[2]:\n        return True\n    else:\n        return False\n",
        "num_ids": 104
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup1 = [1,2,3,4,5,6,7,8,9,0]\n    tup2 = [11,12,13,14,15,16,17,18,19,20]\n    tup1 = tuple(tup1)\n    tup2 = tuple(tup2)\n    #print(tup1)\n    #print(tup2)\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    \n    tup1 = sorted(tup1)\n    tup2 = sorted(tup2)\n    \n    #print(tup1)\n    #print(tup2)\n    \n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    #print(test_tup1)\n    #print(test_tup2)\n    \n    i = 0\n    j = 0\n    \n    while i<len(tup1) and j<len(tup2):\n        #print(i,j)\n        if tup1[i] == test_tup1[i] and tup2[j] == test_tup2[j]:\n            i = i+1\n            j = j+1\n        elif tup1[i] == test_tup1[i] and tup2[j]!= test_tup2[j]:\n            print(\"(%d, %d)\" % (tup1[i], tup2[j]))\n            j = j+1\n        elif tup1[i]!= test_tup1[i] and tup2[j] == test_tup2[j]:\n            print(\"(%d, %d)\" % (tup1[i], tup2[j]))\n            i = i+1\n        elif tup1[i]!= test_tup1[i] and tup2[j]!= test_tup2[j]:\n            i = i+1\n            j = j+1\n        else:\n            print(\"It is a disimilar couple.\")\n            break\n    \n    return \n",
        "num_ids": 536
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return set(test_tup1).symmetric_difference(set(test_tup2))\n",
        "num_ids": 28
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # you may assume that the two tuples have the same length\n    # test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    # test_tup2 = (1, 2, 3, 4, 5, 6, 9, 10, 11, 12)\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of two tuples don't match\")\n",
        "num_ids": 112
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [x for x in test_tup1 if x not in test_tup2]\n",
        "num_ids": 25
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    dissimilar_list = list()\n    for item1 in test_tup1:\n        if item1 not in test_tup2:\n            dissimilar_list.append(item1)\n    for item2 in test_tup2:\n        if item2 not in test_tup1:\n            dissimilar_list.append(item2)\n    return dissimilar_list\n",
        "num_ids": 127
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n            dissimilar.append(test_tup2[i])\n            break\n    return dissimilar\n",
        "num_ids": 86
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if not test_tup1 or not test_tup2:\n        raise TypeError\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError\n    test_dict1 = dict()\n    test_dict2 = dict()\n    for index, value in enumerate(test_tup1):\n        test_dict1.update({index: value})\n    for index, value in enumerate(test_tup2):\n        test_dict2.update({index: value})\n    dissimilar_index = list()\n    for index, value in enumerate(test_dict1.values()):\n        if value not in test_dict2.values():\n            dissimilar_index.append(index)\n    dissimilar_tup = list()\n    for index in dissimilar_index:\n        dissimilar_tup.append(test_tup1[index])\n    return dissimilar_tup\n",
        "num_ids": 226
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n",
        "num_ids": 11
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elems.append(i)\n    return dissimilar_elems\n",
        "num_ids": 70
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = ()\n    for n in test_tuple:\n        if isinstance(n, tuple):\n            n = tuple(filter(even_fnc, n))\n        result += (n,)\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for i in range(0, len(test_tuple)):\n        if even_fnc(test_tuple[i]):\n            new_tuple += (test_tuple[i],)\n    return new_tuple\n",
        "num_ids": 66
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return_list = []\n    for element in test_tuple: \n        if element % 2 == 0: \n            if type(element) == tuple: \n                return_list.append(even_ele(element, even_fnc))\n            else: \n                return_list.append(even_fnc(element))\n        else: \n            return_list.append(element)\n    return tuple(return_list)\n",
        "num_ids": 104
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_list = []\n    for sub_ele in test_tuple:\n        if type(sub_ele) is tuple:\n            test_list.append(even_ele(sub_ele, even_fnc))\n        elif type(sub_ele) is list:\n            test_list.append(even_ele(sub_ele, even_fnc))\n        else:\n            test_list.append(even_fnc(sub_ele))\n    return tuple(test_list)\n",
        "num_ids": 118
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(i for i in test_tuple if even_fnc(i))\n",
        "num_ids": 23
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [(k, v) for k, v in test_tuple if even_fnc(k)]\n",
        "num_ids": 27
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    temp_tuple = ()\n    for i in test_tuple:\n        if(type(i) == tuple):\n            temp_tuple = temp_tuple + even_ele(i, even_fnc)\n        elif(even_fnc(i)):\n            temp_tuple = temp_tuple + (i,)\n    return temp_tuple\n",
        "num_ids": 89
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odds = []\n    evens = []\n    for ele in test_tuple:\n        if isinstance(ele, tuple):\n            evens_ele, odd_ele = even_ele(ele, even_fnc)\n            evens.append(evens_ele)\n            odds.append(odd_ele)\n        elif isinstance(ele, list):\n            evens_ele, odd_ele = even_ele(ele, even_fnc)\n            evens.append(evens_ele)\n            odds.append(odd_ele)\n        elif isinstance(ele, int) and even_fnc(ele):\n            evens.append(ele)\n        elif isinstance(ele, int) and not even_fnc(ele):\n            odds.append(ele)\n        else:\n            odds.append(ele)\n    return tuple(evens), tuple(odds)\n",
        "num_ids": 218
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # writing a function for removing uneven elements in a tuple\n",
        "num_ids": 15
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = [i for i in test_tuple if even_fnc(i)]\n    return tuple(even_list)\n",
        "num_ids": 34
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return(b*b*s/2)\ndef volume(b,h):\n    '''\n    Write a python function to find the volume of a cube with a given base edge and height.\n    '''\n    return(b*b*b*h/3)\ndef area_of_triangle(b,h):\n    '''\n    Write a python function to find the area of a triangle with a given base and height.\n    '''\n    return(b*h/2)\ndef volume_of_cone(r,h):\n    '''\n    Write a python function to find the volume of a cone with a given radius and height.\n    '''\n    return((3.14*r*r*h)/3)\ndef find_sub_total_of_even_numbers(n):\n    '''\n    Write a python function to find the total of all numbers that are evenly divisible by 4 or 5 and less than n.\n    '''\n    sum=0\n    for i in range(n):\n        if(i%4==0 or i%5==0):\n            sum+=i\n    return(sum)\ndef total_of_multiple_of_n(n):\n    '''\n    Write a python function to find the total of all numbers that are multiples of 3 or 7 and less than n.\n    '''\n    sum=0\n    for i in range(n):\n        if(i%3==0 or i%7==0):\n            sum+=i\n    return(sum)\ndef find_sub_total_of_multiples_of_n(n):\n    '''\n    Write a python function to find the sum of all even numbers that are multiples of 3 or 7 and less than n.\n    '''\n    sum=0\n    for i in range(n):\n        if(i%3==0 or i%7==0):\n            if(i%2==0):\n                sum+=i\n    return(sum)\ndef max_of_numbers_list(n):\n    '''\n    Write a python function to find the maximum of all positive numbers in the list.\n    '''\n    max=0\n    for i in n:\n        if(i>max):\n            max=i\n    return(max)\ndef sum_of_numbers_list(n):\n    '''\n    Write a python function to find the sum of all positive numbers in the list.\n    '''\n    sum=0\n    for i in n:\n        if(i>0):\n            sum+=i\n    return(sum)\ndef find_missing_number(n):\n    '''\n    Write a python function to find the missing number in the given list of numbers.\n    '''\n    sum=0\n    for i in range(len(n)):\n        sum+=n[i]\n    return(sum-sum(n))\ndef max_of_n_numbers(n):\n    '''\n    Write a python function to find the maximum of n numbers entered through the user.\n    '''\n    max=0\n    for i in range(n):\n        x=int(input(\"Enter a number: \"))\n        if(x>max):\n            max=x\n    return(max)\ndef is_leap_year(y):\n    '''\n    Write a python function to find if a year is a leap year or not.\n    '''\n    if(y%4==0):\n        if(y%100==0):\n            if(y%400==0):\n                return(True)\n            else:\n                return(False)\n        else:\n            return(True)\n    else:\n        return(False)\ndef is_perfect_number(n):\n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    sum=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum+=i\n    if(sum==n):\n        return(True)\n    else:\n        return(False)\ndef count_of_prime_numbers(n):\n    '''\n    Write a python function to count the number of prime numbers less than n.\n    '''\n    count=0\n    for i in range(2,n):\n        if(i==2):\n            count+=1\n        else:\n            for j in range(2,i):\n                if(i%j==0):\n                    break\n            else:\n                count+=1\n    return(count)\ndef reverse(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return(s[::-1])\ndef is_palindrome(s):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    rev=reverse(s)\n    if(s==rev):\n        return(True)\n    else:\n        return(False)\ndef is_perfect_square(n):\n    '''\n    Write a python function to check if a number is a perfect square or not.\n    '''\n    x=int(math.sqrt(n))\n    if(x*x==n):\n        return(True)\n    else:\n        return(False)\ndef is_fibonacci_number(n):\n    '''\n    Write a python function to check if a number is a fibonacci number or not.\n    '''\n    a=int(math.sqrt(5*n*n+4))\n    b=int(math.sqrt(5*n*n-4))\n    if(a*a==5*n*n+4):\n        if(b*b==5*n*n-4):\n            return(True)\n        else:\n            return(False)\n    else:\n        return(False)\ndef first_n_fibonacci_numbers(n):\n    '''\n    Write a python function to find the first n fibonacci numbers.\n    '''\n    a=int(math.sqrt(5*n*n+4))\n    b=int(math.sqrt(5*n*n-4))\n    c=a\n    d=b\n    while(n>0):\n        c=a+b\n        if(c>n):\n            break\n        else:\n            a=b\n            b=c\n            n=n-1\n    while(n>0):\n        d=b+c\n        if(d>n):\n            break\n        else:\n            c=b\n            b=d\n            n=n-1\n    return(c)\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if(n<2):\n        return(False)\n    else:\n        for i in range(2,n):\n            if(n%i==0):\n                return(False)\n        return(True)\ndef find_factors(n):\n    '''\n    Write a python function to find the factors of a number.\n    '''\n    factors=[]\n    for i in range(1,n+1):\n        if(n%i==0):\n            factors.append(i)\n    return(factors)\ndef find_prime_factors(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    factors=[]\n    for i in range(2,n+1):\n        if(n%i==0):\n            if(is_prime(i)):\n                factors.append(i)\n    return(factors)\ndef number_of_factors(n):\n    '''\n    Write a python function to find the number of factors of a number.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            count+=1\n    return(count)\ndef count_divisors(n):\n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            count+=1\n    return(count)\ndef sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    count=0\n    for i in rang",
        "num_ids": 12
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = b * b * 3.14159265359 + ((b * b * 3.14159265359) * (0.5 * s))\n    return surface_area\n",
        "num_ids": 45
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area=0.5*(b**2)*(s+b)\n    return area\n    \ndef surface_Area2(h,b): \n    '''\n    Write a python function to find the surface area of a rectangular prism with a given height, base and side.\n    '''\n    area=2*(h*b) + 2*(h*s) + 2*(b*s)\n    return area\n    \ndef volume(h,b,s): \n    '''\n    Write a python function to find the volume of a rectangular prism with a given height, base and side.\n    '''\n    volume=h*b*s\n    return volume\n    \ndef volume_of_sphere(r): \n    '''\n    Write a python function to find the volume of a sphere with a given radius.\n    '''\n    volume=4/3*(22/7)*(r**3)\n    return volume\n    \ndef sphere_area(r): \n    '''\n    Write a python function to find the surface area of a sphere with a given radius.\n    '''\n    surface_area=4*(22/7)*(r**2)\n    return surface_area\n",
        "num_ids": 26
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*b*s/3) + (b*s*s/3)\n",
        "num_ids": 24
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surfaceArea(b,s): \n        return b*b*s*2 \n    print(surfaceArea(b,s)) \n",
        "num_ids": 36
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b * s + b * s * ((1/2) * math.tan(math.radians(60)))\n",
        "num_ids": 30
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    SA = b*s*(1.5)\n    return SA\n",
        "num_ids": 19
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return(b*b*s)/2\n",
        "num_ids": 13
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((b**2)*s)/(4*(math.tan(math.pi/5)))\n",
        "num_ids": 26
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b**2*s*0.5\n",
        "num_ids": 14
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('The dictionary is empty')\n    else:\n        print('The dictionary is not empty')\n",
        "num_ids": 36
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1:\n        if dict1[key]!= None:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return False\n    else:\n        return True\n    \n",
        "num_ids": 27
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('It is empty')\n    else:\n        print('It is not empty')\n    return\n",
        "num_ids": 37
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)!= 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print('The dictionary is empty')\n    else:\n        print('The dictionary is not empty')\n",
        "num_ids": 33
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # No. of ways of splitting a set of n elements into two non-empty sets\n    # of equal sum is Catalan number.\n",
        "num_ids": 32
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return (catalan_number(num-1) * (4 * num - 2)) // (num + 1)\n",
        "num_ids": 44
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 1:\n        return None\n    # base case\n    if num == 1:\n        return 1\n    # recursive step\n    return num * catalan_number(num - 1)\n",
        "num_ids": 48
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    import math\n    c=1\n    for i in range(1, num+1):\n        c=c*2*(2*i-1)/(i+1)\n    return math.floor(c)\n",
        "num_ids": 53
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    catalan = [0]*(num+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, num+1):\n        catalan[i] = 0\n        for j in range(0, i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[num]\n",
        "num_ids": 113
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    result = [1, 1]\n",
        "num_ids": 11
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def catalan(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return (2*n-1)*catalan(n-1)//n\n    return catalan(num)\n",
        "num_ids": 64
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # catalan numbers are binomial coefficients with n+1 as the second term.\n    # since only the first term is needed, we can just take that.\n    # catalan numbers are defined as: 2nCn\n    # the formula is (n + 1)Cn = 2nCn\n    # so the formula is 2nCn / (n+1)Cn = n\n    return int(2*(factorial(2*num))/(factorial(num+1)*factorial(num)))\n",
        "num_ids": 119
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Bottom up approach\n    catalan = [0, 1, 1]\n    for i in range(3, num + 1):\n        catalan.append(0)\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[num]\n",
        "num_ids": 82
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    result = 0\n    for i in range(num):\n        result += catalan_number(i) * catalan_number(num-i-1)\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r'\\b[a-z]*ly\\b'\n    find_adverbs = re.findall(regex,text,re.I)\n    # print(find_adverbs)\n    return find_adverbs\n",
        "num_ids": 59
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # 1. split text into sentences\n    text = text.lower()\n    sentences = text.split('.')\n",
        "num_ids": 30
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    sentences = text.split('.')\n    adverbs = []\n    for sentence in sentences:\n        words = sentence.split(' ')\n        for word in words:\n            if re.search('ly$', word):\n                adverbs.append(word)\n    return adverbs\n",
        "num_ids": 69
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    word_list = text.split()\n    for word in word_list:\n        if re.match(r'(ly$)', word) and re.match(r'(ly$)', word).group() == word:\n            print(word_list.index(word))\n",
        "num_ids": 68
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\w*ly'\n    matches = re.findall(pattern, text)\n    print(matches)\n    return matches\n",
        "num_ids": 38
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = {}\n    with open('adverbs.txt','r') as f:\n        for i in f:\n            adverbs[i.strip().lower()] = re.finditer(i,text)\n    for i in adverbs:\n        for j in adverbs[i]:\n            print(j.group(),i,j.start(),j.end())\n    return adverbs\n",
        "num_ids": 93
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'ly$')\n    result = pattern.findall(text)\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall('[a-z]ly', text, re.IGNORECASE)\n",
        "num_ids": 26
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # First, create a regular expression to match adverb, then find them.\n    pattern = r'\\b[Ll]y\\w+$'\n",
        "num_ids": 38
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # pattern = r'\\W*(ly\\W*)$'\n    # pattern = r'\\W*(ly$|y$|ie$|ee$|ive$|yve$|ied$|ing$|ingly$)$'\n    pattern = r'\\W*(ly\\W*)$'\n    # print(re.findall(pattern, text))\n    # pattern = r'\\W*ly\\W*'\n    # print(re.findall(pattern, text))\n    # pattern = r'\\W*(ly|y|ie|ee|ive|yve|ied|ing|ingly)$'\n    # print(re.findall(pattern, text))\n    return re.findall(pattern, text)\n",
        "num_ids": 177
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    prices = []\n    for i in items:\n        if (i[0] == \"P\"):\n            prices.append(i[1])\n",
        "num_ids": 39
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    return [heapq.heappop(items) for i in range(n)]\n",
        "num_ids": 35
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda item:item[1])\n",
        "num_ids": 24
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        if len(heap) < n:\n            heapq.heappush(heap,(-i[1],i[0]))\n        elif i[1] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(-i[1],i[0]))\n    return sorted(heap,key=lambda x:x[0],reverse=True)\n",
        "num_ids": 121
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #heapq.heapify(items)\n    return heapq.nlargest(n,items)\n    #return heapq.nlargest(n,items, key=lambda item: item[1])\n    #return sorted(items, key=lambda item: item[1], reverse=True)[:n]\n    \ndef nth_smallest(items,n):\n    '''\n    Write a function that returns the nth smallest number in a given dataset\n    '''\n    #items.sort()\n    #return items[n]\n    return sorted(items)[n]\n    \ndef find_median(items):\n    '''\n    Write a function that returns the median value of a list of numbers. \n    '''\n    #items.sort()\n    return items[int(len(items)/2)]\n    \n    \ndef nth_smallest_quick(items, n):\n    '''\n    Write an efficient function that finds the nth smallest number in a list.\n    '''\n    #items.sort()\n    return items[n]\n    \ndef max_profit(items):\n    '''\n    Write a function that takes a list of items with values and weights and \n    returns the maximum total value of the items that can be fit into a given \n    knapsack. You cannot break an item, but you can reuse an item.\n    '''\n    #items.sort()\n    #return items[-1][1]\n    \n    \n    \ndef last_item(items):\n    '''\n    Write a function that takes a list of items with values and weights and \n    returns the last item of the list.\n    '''\n    #items.sort()\n    #return items[-1]\n    \ndef optimal_weight(items, capacity):\n    '''\n    Write a function that takes a list of items with values and weights and \n    returns the maximum total value of the items that can be fit into a given \n    knapsack of capacity c. You cannot break an item, but you can reuse an item.\n    '''\n    #items.sort()\n    #return items[-1][1]\n    \n    \n    \ndef knapsack_brute_force(items, capacity):\n    '''\n    Write a function that takes a list of items with values and weights and \n    returns the maximum total value of the items that can be fit into a knapsack \n    of capacity c. You cannot break an item, but you can reuse an item.\n",
        "num_ids": 59
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda x: x[1])\n",
        "num_ids": 24
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    new = []\n    heapq.heapify(new)\n    for i in range(n):\n        heapq.heappush(new, (-items[i],items[i]))\n    print(new)\n    for i in range(n):\n        print(heapq.heappop(new)[1])\n    return new\n",
        "num_ids": 85
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    newlist=[]\n    for i in range(n):\n        maxItem=0\n        for j in range(len(items)):\n            if(items[j][1]>maxItem):\n                maxItem=items[j][1]\n                index=j\n        newlist.append(items[index])\n        items.pop(index)\n    return newlist\n    #return [items[index] for index in range(n)]\n    #index=0\n    #for i in range(len(items)):\n    #    if(items[i][1]>maxItem):\n    #        maxItem=items[i][1]\n    #        index=i\n    #return [items[index]]\n    #return items[index]\n",
        "num_ids": 177
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(reverse=True)\n    return items[:n]\n",
        "num_ids": 20
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_dict = {}\n    for i in range(len(items)):\n        items_dict[i] = items[i]\n    top_n = sorted(items_dict.items(), key=lambda x: x[1], reverse=True)[:n]\n    top_n_items = []\n    for i in range(len(top_n)):\n        top_n_items.append(items_dict[top_n[i][0]])\n    return top_n_items\n",
        "num_ids": 118
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[0:n]\n    b = l[n:]\n    print(a)\n    print(b)\n",
        "num_ids": 32
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[:n]\n    l2 = l[n:]\n    l2.extend(l1)\n    return l2\n",
        "num_ids": 37
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    \n    return first_part + second_part\n",
        "num_ids": 35
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    return last_part + first_part\n",
        "num_ids": 33
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    return first_part + last_part\n",
        "num_ids": 33
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "num_ids": 19
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(tuple(listx))\n",
        "num_ids": 12
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "num_ids": 19
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # n = len(nums)\n    # return max(nums) - min(nums)\n",
        "num_ids": 27
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return(max(nums)-min(nums))\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\nprint(big_diff([101, 20, -5, 6, 19, 8]))\n",
        "num_ids": 37
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print('Difference between largest and smallest value in a given list:')\n    return max(nums) - min(nums)\n",
        "num_ids": 33
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if nums:\n        return (max(nums)-min(nums))\n    else:\n        return 'No numbers in list'\n",
        "num_ids": 35
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    list_len = len(nums)\n    if list_len < 1:\n        return None\n    min = nums[0]\n    max = nums[0]\n    for i in range(list_len):\n        if nums[i] < min:\n            min = nums[i]\n        if nums[i] > max:\n            max = nums[i]\n    return max - min\n",
        "num_ids": 101
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x*x for x in range(a, b+1) if x*x in range(a, b+1)]\n",
        "num_ids": 33
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x**2 for x in range(a, b+1) if x**2 in range(a, b+1)]\n",
        "num_ids": 33
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for x in range(a,b+1):\n        if x**0.5 == int(x**0.5):\n            squares.append(x)\n    return squares\n",
        "num_ids": 51
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Your code here\n    return []\n",
        "num_ids": 12
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sqrt = math.sqrt(b)\n    if sqrt * sqrt < a:\n        return 0\n    else:\n        return b - a + 1\n",
        "num_ids": 41
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x = int(a)\n    y = int(b)\n    if x > y:\n        x, y = y, x\n    return [i * i for i in range(x, y) if (i * i) % (10 ** 6) == (i * i) // (10 ** 6)]\n",
        "num_ids": 74
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    start = a**2\n    end = b**2\n    for i in range(start, end+1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i)\n    return squares\n",
        "num_ids": 65
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    i = 1\n    while i ** 2 <= b:\n        if a <= i ** 2 <= b:\n            yield i ** 2\n        i += 1\n",
        "num_ids": 39
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == 1:\n        return b\n    else:\n        return perfect_squares(a-1, b) + perfect_squares(a, b-1)\n",
        "num_ids": 43
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # TODO: implement this function\n    return [x**2 for x in range(a, b+1) if int(x**0.5)**2==x]\n",
        "num_ids": 43
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.exp(y*1j)\n",
        "num_ids": 17
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=complex(x,y)\n    z=cmath.polar(r)\n    return z\n",
        "num_ids": 28
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*cmath.exp(y*1j),y)\ndef polar_rect_1(z,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (z*cmath.exp(phi*1j),cmath.log(z**2+cmath.exp(phi*1j)))\ndef polar_rect_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*cmath.exp(y*1j),y)\n",
        "num_ids": 20
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_rect = x*cmath.cos(y)\n    y_rect = x*cmath.sin(y)\n    return x_rect,y_rect\n",
        "num_ids": 42
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,phi=complex(x),complex(y)\n    return (r*cmath.cos(phi),r*cmath.sin(phi))\nprint(polar_rect(3,2))\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r,phi=complex(x),complex(y)\n    return (abs(r),cmath.phase(phi))\nprint(rect_polar(3,2))\ndef error(x,y):\n    '''\n    Write a function that prints the distance between two (x,y) coordinates.\n    '''\n    p,q=complex(x),complex(y)\n    return (\"The distance between the coordinates is: \" + str(abs(p-q)))\nprint(error(3,2))\ndef error2(x,y):\n    '''\n    Write a function that prints the distance between two (x,y) coordinates.\n    '''\n    r,phi=complex(x),complex(y)\n    return (\"The distance between the coordinates is: \" + str(abs(r)))\nprint(error2(3,2))\ndef abs_val(x):\n    '''\n    Write a function that prints the absolute value of the number.\n    '''\n    r=complex(x)\n    return (\"The absolute value of the number is: \" + str(abs(r)))\nprint(abs_val(3))\ndef phase_val(x):\n    '''\n    Write a function that prints the phase of the number.\n    '''\n    r=complex(x)\n    return (\"The phase of the number is: \" + str(cmath.phase(r)))\nprint(phase_val(3))\ndef mod_val(x):\n    '''\n    Write a function that prints the modulus of the number.\n    '''\n    r=complex(x)\n    return (\"The modulus of the number is: \" + str(abs(r)))\nprint(mod_val(3))\ndef is_imaginary(x):\n    '''\n    Write a function to check if the number is imaginary.\n    '''\n    r=complex(x)\n    return str(r.imag)\nprint(is_imaginary(3))\ndef is_real(x):\n    '''\n    Write a function to check if the number is real.\n    '''\n    r=complex(x)\n    return str(r.real)\nprint(is_real(3))\ndef power_val(x,y):\n    '''\n    Write a function to return the power of a number.\n    '''\n    r=complex(x)\n    return str(r**y)\nprint(power_val(5,3))\ndef is_conjugate(x,y):\n    '''\n    Write a function to check if two numbers are conjugates of each other.\n    '''\n    r=complex(x)\n    q=complex(y)\n    return str(r.conjugate()==q)\nprint(is_conjugate(3,2))\ndef is_equal(x,y):\n    '''\n    Write a function to check if two numbers are equal.\n    '''\n    r=complex(x)\n    q=complex(y)\n    return str(r==q)\nprint(is_equal(3,2))\ndef is_not_equal(x,y):\n    '''\n    Write a function to check if two numbers are not equal.\n    '''\n    r=complex(x)\n    q=complex(y)\n    return str(r!=q)\nprint(is_not_equal(3,2))\ndef add_val(x,y):\n    '''\n    Write a function to return the sum of two numbers.\n    '''\n    r=complex(x)\n    q=complex(y)\n    return str(r+q)\nprint(add_val(3,2))\ndef subtract_val(x,y):\n    '''\n    Write a function to return the difference of two numbers.\n    '''\n    r=complex(x)\n    q=complex(y)\n    return str(r-q)\nprint(subtract_val(3,2))\ndef multiply_val(x,y):\n    '''\n    Write a function to return the product of two numbers.\n    '''\n    r=complex(x)\n    q=complex(y)\n    return str(r*q)\nprint(multiply_val(3,2))\ndef divide_val(x,y):\n    '''\n    Write a function to return the quotient of two numbers.\n    '''\n    r=complex(x)\n    q=complex(y)\n    return str(r/q)\nprint(divide_val(3,2))\ndef mod_val(x,y):\n    '''\n    Write a function to return the modulus of two numbers.\n    '''\n    r=complex(x)\n    q=complex(y)\n    return str(abs(r%q))\nprint(mod_val(3,2))\ndef phase_val(x):\n    '''\n    Write a function to return the phase of a number.\n    '''\n    r=complex(x)\n    return str(cmath.phase(r))\nprint(phase_val(3))\ndef cos_val(x):\n    '''\n    Write a function to return the cosine of the number.\n    '''\n    r=complex(x)\n    return str(cmath.cos(r))\nprint(cos_val(3))\ndef sin_val(x):\n    '''\n    Write a function to return the sine of the number.\n    '''\n    r=complex(x)\n    return str(cmath.sin(r))\nprint(sin_val(3))\ndef tan_val(x):\n    '''\n    Write a function to return the tangent of the number.\n    '''\n    r=complex(x)\n    return str(cmath.tan(r))\nprint(tan_val(3))\ndef cot_val(x):\n    '''\n    Write a function to return the cotangent of the number.\n    '''\n    r=complex(x)\n    return str(cmath.cot(r))\nprint(cot_val(3))\ndef sec_val(x):\n    '''\n    Write a function to return the secant of the number.\n    '''\n    r=complex(x)\n    return str(cmath.sec(r))\nprint(sec_val(3))\ndef csc_val(x):\n    '''\n    Write a function to return the cosecant of the number.\n    '''\n    r=complex(x)\n    return str(cmath.csc(r))\nprint(csc_val(3))\ndef log_val(x):\n    '''\n    Write a function to return the logarithm of the number.\n    '''\n    r=complex(x)\n    return str(cmath.log(r))\nprint(log_val(3))\ndef ln_val(x):\n    '''\n    Write a function to return the natural logarithm of the number.\n    '''\n    r=complex(x)\n    return str(cmath.log(r))\nprint(ln_val(3))\ndef exp_val(x):\n    '''\n    Write a function to return the exponent of the number.\n    '''\n    r=complex(x)\n    return str(cmath.exp(r))\nprint(exp_val(3))\ndef arcsin_val(x):\n    '''\n    Write a function to return the arcsine of the number.\n    '''\n    r=complex(x)\n    return str(cmath.asin(r))\nprint(arcsin_val(3))\ndef arccos_val(x):\n    '''\n    Write a function to return the arccosine of the number.\n    '''\n    r=complex(x)\n    return str(cmath.acos(r))\nprint(arccos_val(3))\ndef arctan_val(x):\n    '''\n    Write a function to return the arctangent of the number.\n    '''\n    r=complex(x)\n    return str(cmath.atan(r))\nprint(arctan_val(3))\ndef sqrt",
        "num_ids": 36
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    angle = y\n    x = r * cmath.cos(angle)\n    y = r * cmath.sin(angle)\n    return x,y\n",
        "num_ids": 44
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=int(x)\n    y=int(y)\n    x_coordinate=x*(cmath.exp(y*1j))\n    return x_coordinate.real,x_coordinate.imag\n    \n    \ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=int(x)\n    y=int(y)\n    y_coordinate=(cmath.log(x+y*1j)).real\n    return x,y_coordinate\n    \n    \ndef slope(x1,y1,x2,y2):\n    '''\n    Write a function to find the slope of the line passing through two points.\n    '''\n    x1,y1=rect_polar(x1,y1)\n    x2,y2=rect_polar(x2,y2)\n    if(x1==x2):\n        print(\"The slope is infinity\")\n    else:\n        slope=(y2-y1)/(x2-x1)\n    print(slope)\n    return slope\n    \n    \ndef intercept(x1,y1,x2,y2):\n    '''\n    Write a function to find the y-intercept of the line passing through two points.\n    '''\n    x1,y1=rect_polar(x1,y1)\n    x2,y2=rect_polar(x2,y2)\n    slope=slope(x1,y1,x2,y2)\n    intercept=y1-slope*x1\n    print(intercept)\n    return intercept\n    \n    \ndef quadrant(x,y):\n    '''\n    Write a function to find the quadrant of a point.\n    '''\n    x,y=rect_polar(x,y)\n    if(x>0 and y>0):\n        print(\"The quadrant of the point is 1\")\n    elif(x<0 and y>0):\n        print(\"The quadrant of the point is 2\")\n    elif(x<0 and y<0):\n        print(\"The quadrant of the point is 3\")\n    elif(x>0 and y<0):\n        print(\"The quadrant of the point is 4\")\n    elif(x==0 and y==0):\n        print(\"The point is origin\")\n    elif(x>0 and y==0):\n        print(\"The point is on the positive x-axis\")\n    elif(x<0 and y==0):\n        print(\"The point is on the negative x-axis\")\n    elif(x==0 and y>0):\n        print(\"The point is on the positive y-axis\")\n    elif(x==0 and y<0):\n        print(\"The point is on the negative y-axis\")\n    return\n    \n    \ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    x1,y1=rect_polar(x1,y1)\n    x2,y2=rect_polar(x2,y2)\n    distance=cmath.sqrt(x1-x2)**2+cmath.sqrt(y1-y2)**2\n    print(distance)\n    return distance\n    \n    \ndef slope_distance(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between the point formed after adding the slope and the origin and the point formed after subtracting the slope and the origin.\n    '''\n    x1,y1=rect_polar(x1,y1)\n    x2,y2=rect_polar(x2,y2)\n    slope=slope(x1,y1,x2,y2)\n    if(slope>0):\n        distance=x1\n    elif(slope<0):\n        distance=x1\n    print(distance)\n    return distance\n    \n    \ndef quadrant_distance(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between the point formed after adding the quadrant and the origin and the point formed after subtracting the quadrant and the origin.\n    '''\n    x1,y1=rect_polar(x1,y1)\n    x2,y2=rect_polar(x2,y2)\n    quadrant(x1,y1)\n    quadrant(x2,y2)\n    if(x1>0 and y1>0 and x2>0 and y2>0):\n        quadrant=1\n    elif(x1<0 and y1>0 and x2<0 and y2>0):\n        quadrant=2\n    elif(x1<0 and y1<0 and x2<0 and y2<0):\n        quadrant=3\n    elif(x1>0 and y1<0 and x2>0 and y2<0):\n        quadrant=4\n    elif(x1==0 and y1==0 and x2==0 and y2==0):\n        quadrant=5\n    elif(x1>0 and y1==0 and x2>0 and y2==0):\n        quadrant=6\n    elif(x1<0 and y1==0 and x2<0 and y2==0):\n        quadrant=7\n    elif(x1==0 and y1>0 and x2==0 and y2>0):\n        quadrant=8\n    elif(x1==0 and y1<0 and x2==0 and y2<0):\n        quadrant=9\n    elif(x1==0 and y1==0 and x2==0 and y2==0):\n        quadrant=10\n    elif(x1>0 and y1>0 and x2==0 and y2==0):\n        quadrant=11\n    elif(x1<0 and y1>0 and x2==0 and y2==0):\n        quadrant=12\n    elif(x1<0 and y1<0 and x2==0 and y2==0):\n        quadrant=13\n    elif(x1>0 and y1<0 and x2==0 and y2==0):\n        quadrant=14\n    if(quadrant==1):\n        distance=x1\n    elif(quadrant==2):\n        distance=x1\n    elif(quadrant==3):\n        distance=x1\n    elif(quadrant==4):\n        distance=x1\n    elif(quadrant==5):\n        distance=y1\n    elif(quadrant==6):\n        distance=y1\n    elif(quadrant==7):\n        distance=y1\n    elif(quadrant==8):\n        distance=y1\n    elif(quadrant==9):\n        distance=y1\n    elif(quadrant==10):\n        distance=y1\n    elif(quadrant==11):\n        distance=y1\n    elif(quadrant==12):\n        distance=y1\n    elif(quadrant==13):\n        distance=y1\n    elif(quadrant==14):\n        distance=y1\n    print(distance)\n    return distance\n    \n    \ndef parallelogram(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to compute the area of a parallelogram.\n    '''\n    x1,y1=rect_polar(x1,y1)\n    x2,y2=rect_polar(x2,y2)\n    x3,y3=rect_polar(x3,y3)\n    slope1=slope(x1,y1,x2,y2)\n    slope2=slope(x2,y2,x3,y3)\n    slope3=slope(x1,y1,x3,y3)\n    intercept1=intercept(x1,y1,x2,y2)\n    intercept2=intercept(x2,y2,x3,y3)\n    intercept3=intercept(x1,y1,x3,y3)\n    area=(slope1*intercept2-slope2*intercept1",
        "num_ids": 203
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return [cmath.rect(x,y), x,y]\n",
        "num_ids": 19
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    R = cmath.sqrt(x**2 + y**2)\n    phi = cmath.atan(y/x)\n    return R, phi\n",
        "num_ids": 40
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(x,y)\n    return(r.real,r.imag)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = cmath.polar(x,y)\n    return(r[0],r[1])\n",
        "num_ids": 28
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp=newList[-1]\n    newList[-1]=newList[0]\n    newList[0]=temp\n    return newList\n",
        "num_ids": 38
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n",
        "num_ids": 34
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    l1 = len(newList)\n    newList[0], newList[l1-1] = newList[l1-1], newList[0]\n    return newList\n",
        "num_ids": 46
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "num_ids": 33
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList \n",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    print(newList)\n",
        "num_ids": 35
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n    ",
        "num_ids": 35
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp=newList[-1]\n    newList[-1]=newList[0]\n    newList[0]=temp\n",
        "num_ids": 33
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    prod = 1\n    if (k > n-k): \n        k = n-k \n    for i in range(k): \n        prod = prod * (n-i) \n        prod = prod / (i+1) \n    return prod \n",
        "num_ids": 68
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0]*(k+1) for i in range(n+1)] \n    for i in range(n+1): \n        for j in range(min(i, k)+1): \n            if (j == 0 or j == i): \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i-1][j-1] + C[i-1][j] \n    return C[n][k] \n",
        "num_ids": 120
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (factorial(n) // (factorial(k) * factorial(n-k)))\n",
        "num_ids": 26
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0: return 1\n    if k == n: return 1\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n",
        "num_ids": 52
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    list = []\n    for i in range(k,n+1):\n        if(k%2==0):\n            list.append(binomial_Coeff(n,i)//i)\n        else:\n            list.append(binomial_Coeff(n,i)*(i+1))\n    return sum(list)\n    \nprint(binomial_Coeff(10,5)",
        "num_ids": 98
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k<0 or k>n:\n        return 0\n    elif k==0 or k==n:\n        return 1\n    else:\n        return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))\n",
        "num_ids": 70
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #coefficient = 1\n    #sum_binom_Coeff = 0\n    #for i in range(0,k+1):\n        #coefficient *= n+i\n        #sum_binom_Coeff += coefficient\n        #print(coefficient)\n    #return sum_binom_Coeff\n    return math.factorial(n)/(math.factorial(k)*math.factorial(n-k))\n",
        "num_ids": 106
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return int(special.binom(n,k))\n",
        "num_ids": 16
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    b=[[0 for i in range(k+1)] for j in range(n+1)] \n    for i in range(n+1): \n        for j in range(min(i,k)+1): \n            if j==0 or j==i: \n                b[i][j] = 1\n            else: \n                b[i][j]=b[i-1][j-1] + b[i-1][j]\n    return b[n][k]\n",
        "num_ids": 118
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    x = [1]*(n+1)\n    y = [0]*(n+1)\n",
        "num_ids": 28
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    list_ip = ip.split('.')\n    for i in range(len(list_ip)):\n        if list_ip[i] == '0':\n            list_ip[i] = ''\n    return '.'.join(list_ip)\n    \ndef list2str_ip(list_ip):\n    '''\n    Write a function to convert a list of ip address to string.\n    '''\n    str_ip = '.'.join(list_ip)\n    return str_ip\n    \ndef str2list_ip(str_ip):\n    '''\n    Write a function to convert a string of ip address to list of ip address.\n    '''\n    list_ip = str_ip.split('.')\n    return list_ip\n    \ndef addzero_ip(ip):\n    '''\n    Write a function to add leading zeros to single digit ip address.\n    '''\n    if len(ip) < 4:\n        for i in range(4 - len(ip)):\n            ip = '0' + ip\n    return ip\n    \ndef str_ip_format(str_ip):\n    '''\n    Write a function to format ip address.\n    '''\n    list_ip = str2list_ip(str_ip)\n    list_ip = addzero_ip(list_ip[0]) + '.' + addzero_ip(list_ip[1]) + '.' + addzero_ip(list_ip[2]) + '.' + addzero_ip(list_ip[3])\n    return list_ip\n    \ndef ip_format_check(str_ip):\n    '''\n    Write a function to check if the ip address format is correct.\n    '''\n    if len(str_ip)!= 4:\n        return False\n    if re.match(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', str_ip):\n        return True\n    return False\n    \ndef ip_format_convert(str_ip):\n    '''\n    Write a function to convert ip address to ip address format.\n    '''\n    list_ip = str_ip_format(str_ip)\n    str_ip = list2str_ip(list_ip)\n    return str_ip\n    \ndef ip_count(str_ip):\n    '''\n    Write a function to count number of different ip address in a list.\n    '''\n    list_ip = str_ip.split(',')\n    list_ip = [ip_format_convert(i) for i in list_ip]\n    return len(set(list_ip))\n    \ndef ip_range(str_ip):\n    '''\n    Write a function to find the first and last ip address in a list.\n    '''\n    list_ip = str_ip.split(',')\n    list_ip = [ip_format_convert(i) for i in list_ip]\n    str_ip = list2str_ip(list_ip)\n    list_ip = str2list_ip(str_ip)\n    list_ip = [addzero_ip(i) for i in list_ip]\n    list_ip = [int(i) for i in list_ip]\n    if len(list_ip) == 4:\n        return '{}.{}.{}.{}'.format(list_ip[0],list_ip[1],list_ip[2],list_ip[3]) +'- {}.{}.{}.{}'.format(list_ip[0],list_ip[1],list_ip[2],list_ip[3])\n    elif len(list_ip) == 3:\n        return '{}.{}.{}.{}'.format(list_ip[0],list_ip[1],list_ip[2],list_ip[3]) +'- {}.{}.{}.{}'.format(list_ip[0],list_ip[1],list_ip[2],list_ip[3])\n    else:\n        return '{}.{}.{}.{}'.format(list_ip[0],list_ip[1],list_ip[2],list_ip[3])\n    \ndef ip_max(str_ip):\n    '''\n    Write a function to find the maximum ip address in a list.\n    '''\n    list_ip = str_ip.split(',')\n    list_ip = [ip_format_convert(i) for i in list_ip]\n    list_ip = [int(i) for i in list_ip]\n    list_ip = [addzero_ip(i) for i in list_ip]\n    list_ip = [int(i) for i in list_ip]\n    if len(list_ip) == 4:\n        return '{}.{}.{}.{}'.format(list_ip[0],list_ip[1],list_ip[2],list_ip[3])\n    elif len(list_ip) == 3:\n        return '{}.{}.{}.{}'.format(list_ip[0],list_ip[1],list_ip[2],list_ip[3])\n    else:\n        return '{}.{}.{}.{}'.format(list_ip[0],list_ip[1],list_ip[2],list_ip[3])\n    \ndef ip_min(str_ip):\n    '''\n    Write a function to find the minimum ip address in a list.\n    '''\n    list_ip = str_ip.split(',')\n    list_ip = [ip_format_convert(i) for i in list_ip]\n    list_ip = [int(i) for i in list_ip]\n    list_ip = [addzero_ip(i) for i in list_ip]\n    list_ip = [int(i) for i in list_ip]\n    if len(list_ip) == 4:\n        return '{}.{}.{}.{}'.format(list_ip[0],list_ip[1],list_ip[2],list_ip[3])\n    elif len(list_ip) == 3:\n        return '{}.{}.{}.{}'.format(list_ip[0],list_ip[1],list_ip[2],list_ip[3])\n    else:\n        return '{}.{}.{}.{}'.format(list_ip[0],list_ip[1],list_ip[2],list_ip[3])\n    \ndef ip_range_format(str_ip):\n    '''\n    Write a function to convert ip address range format.\n    '''\n    list_ip = str_ip.split('-')\n    list_ip = [ip_format_convert(i) for i in list_ip]\n    return list_ip\n    \ndef ip_range_count(str_ip):\n    '''\n    Write a function to count number of different ip address in a ip address range.\n    '''\n    list_ip = ip_range_format(str_ip)\n    list_ip = [int(i) for i in list_ip]\n    return len(set(list_ip))\n    \ndef ip_range_list(str_ip):\n    '''\n    Write a function to convert ip address range to a list of ip address.\n    '''\n    list_ip = ip_range_format(str_ip)\n    list_ip = [str_ip_format(i) for i in list_ip]\n    list_ip = sorted(list_ip)\n    return list_ip\n    \ndef ip_range_max(str_ip):\n    '''\n    Write a function to find the maximum ip address in a ip address range.\n    '''\n    list_ip = ip_range_format(str_ip)\n    list_ip = [int(i) for i in list_ip]\n    list_ip = [addzero_ip(i) for i in list_ip]\n    list_ip = [int(i) for i in list_ip]\n    if len(list_ip) == 4:\n        return '{}.{}.{}.{}'.format(list_ip[0],list_ip[1],list_ip[2],list_ip[3])\n    elif len(list_ip) == 3:\n        return '{}.{}.{}.{}'.format(list_ip[0],list_ip[1],list_ip",
        "num_ids": 168
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    result = \"\"\n    for i in range(len(ip)):\n        if(ip[i]!= \".\" and ip[i]!= \":\"):\n            result += ip[i]\n        elif(ip[i] == \".\"):\n            if(i!= 0 and ip[i-1]!= \".\"):\n                result += ip[i]\n        elif(ip[i] == \":\"):\n            if(i!= 0 and ip[i-1]!= \":\"):\n                result += ip[i]\n    return result\n",
        "num_ids": 135
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #regex = re.compile('^0*([1-9]){3}')\n    regex = re.compile('^0*([1-9])*([1-9]){3}')\n    return regex.sub('\\g<1>\\g<2>', ip)\n",
        "num_ids": 73
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(\"\\.(0+)\",\".\",ip)\n",
        "num_ids": 17
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    temp = re.sub('(.)0{4}', r'\\1', ip)\n    return temp\n",
        "num_ids": 28
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)\n",
        "num_ids": 17
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    match = re.search(r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\",ip)\n    if not match:\n        return \"Not a valid ip address\"\n    return ip.replace(\"0\",\"\")\n",
        "num_ids": 74
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'(?<=\\.)0+(?=\\.)'\n    new_ip = re.sub(pattern, '', ip)\n    return new_ip\n",
        "num_ids": 43
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip = ''\n    for i in ip:\n        if i == '0':\n            continue\n        else:\n            new_ip += i\n    return new_ip\n",
        "num_ids": 44
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    l = ip.split('.')\n    for i, e in enumerate(l):\n        if e.startswith('0'):\n            l[i] = e[1:]\n        else:\n            break\n    return '.'.join(l)\n",
        "num_ids": 64
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list_len = len(list1)\n    if list_len > 1:\n        first_even = list1[0]\n        for i in range(1,list_len):\n            if first_even == list1[i] and first_even % 2 == 0:\n                first_odd = list1[i]\n            elif first_even == list1[i] and first_even % 2!= 0:\n                second_odd = list1[i]\n        return second_odd - first_even\n    else:\n        return 0\n",
        "num_ids": 130
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # if odd, first number is first odd number\n    # if even, first number is first even number\n    # this function will return the difference between them\n    list_len = len(list1)\n    if list_len == 1:\n        return \"list has no even or odd number\"\n    else:\n        i = 0\n        first_odd = 0\n        first_even = 0\n        while i < list_len:\n            if list1[i] % 2!= 0:\n                first_odd = list1[i]\n                break\n            i += 1\n        if first_odd == 0:\n            i = 0\n            while i < list_len:\n                if list1[i] % 2 == 0:\n                    first_even = list1[i]\n                    break\n                i += 1\n        else:\n            first_even = first_odd\n        return first_even - first_odd\n",
        "num_ids": 212
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[1::2][0] - list1[::2][0]\n",
        "num_ids": 23
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    evens = 0\n    odds = 0\n    for i in list1:\n        if i % 2 == 0:\n            evens += i\n        else:\n            odds += i\n    return abs(evens - odds)",
        "num_ids": 56
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odds = []\n    evens = []\n    for num in list1:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n",
        "num_ids": 53
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Write your code here\n    x=0\n    y=0\n    for i in range(0,len(list1)):\n        if i%2==0:\n            x=list1[i]\n            break\n    for j in range(0,len(list1)):\n        if j%2!=0:\n            y=list1[j]\n            break\n    ans=x-y\n    return ans\nlist1=[1,2,3,4,5,6]\nprint(diff_even_odd(list1))\n",
        "num_ids": 131
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    even_num = list1[0]\n    for i in list1:\n        if i%2 == 0:\n            even_num = i\n            break\n    first_odd = list1[0]\n    for i in list1:\n        if i%2 == 0:\n            first_odd = i\n            break\n    return even_num - first_odd\n",
        "num_ids": 103
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)>0:\n        odd_numbers = []\n        even_numbers = []\n        for index in range(len(list1)):\n            if index % 2 == 0:\n                even_numbers.append(list1[index])\n            else:\n                odd_numbers.append(list1[index])\n        return abs(even_numbers[0]-odd_numbers[0])\n    else:\n        return -1\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ",
        "num_ids": 2008
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0]-list1[1]\n",
        "num_ids": 15
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    print(even_list, odd_list)\n    return abs(even_list[0]-odd_list[0])\n",
        "num_ids": 86
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l1=list(str1)\n    l2=list(str2)\n    swaps=0\n    for i in range(len(l1)) :\n        if l1[i]!= l2[i] :\n            l1[i],l1[i-1] = l1[i-1],l1[i]\n            swaps+=1\n    return swaps\n",
        "num_ids": 94
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m, n = len(str1), len(str2)\n    if m!= n:\n        return -1\n    cnt = 0\n    for i in range(m):\n        if str1[i]!= str2[i]:\n            cnt += 1\n",
        "num_ids": 67
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = ''.join(str1.split())\n    str2 = ''.join(str2.split())\n    for i in range(len(str2)-1,-1,-1) :\n        str1 = str1[:i] + str2[i] + str1[i:]\n    print(str1)\n",
        "num_ids": 79
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = '0' + str1\n    str2 = '0' + str2\n    #print(str1)\n    #print(str2)\n    temp = 0\n    count = 0\n    for i in range(0,len(str1)):\n        for j in range(0,len(str2)):\n            if str1[i] == str2[j]:\n                temp = 1\n                count += (i-j)\n                break\n        if temp == 0:\n            return -1\n    return count\n",
        "num_ids": 127
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return -1\n    dict1 = {}\n    dict2 = {}\n    for i in range(len(str1)):\n        dict1[str1[i]] = dict1.get(str1[i], 0) + 1\n        dict2[str2[i]] = dict2.get(str2[i], 0) + 1\n    count = 0\n    for i in range(len(str1)):\n        if dict1[str1[i]]!= dict2[str2[i]]:\n            count += 1\n    return count\n",
        "num_ids": 145
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    m, n = len(str1), len(str2)\n    \n    if (m!= n):\n        return -1\n    count = 0\n    i, j = 0, 0\n    while i < m and j < n:\n        if str1[i]!= str2[j]:\n            i += 1\n            j += 1\n            count += 1\n        else:\n            i += 1\n            j += 1\n    return count\n",
        "num_ids": 109
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    ans = 0\n    for i in range(len(str1)) :\n        if(str1[i]!=str2[i]) :\n            if(str1[i]==\"1\") :\n                str1[i] = \"0\"\n            else :\n                str1[i] = \"1\"\n            ans += 1\n    print(ans)\n",
        "num_ids": 108
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #code here\n    s1, s2 = [], []\n    n = len(str1)\n    for i in range(n) :\n        if str1[i] == '1' :\n            s1.append(i)\n    for i in range(n) :\n        if str2[i] == '1' :\n            s2.append(i)\n    \n    swaps = 0\n    i, j = 0, 0\n    while i < len(s1) and j < len(s2) :\n        if s1[i] < s2[j] :\n            i += 1\n        elif s2[j] < s1[i] :\n            swaps += s1[i] - s2[j]\n            j += 1\n            i += 1\n        else :\n            i += 1\n            j += 1\n    while i < len(s1) :\n        swaps += len(s1) - i\n        i += 1\n    while j < len(s2) :\n        swaps += len(s2) - j\n        j += 1\n    return swaps\n",
        "num_ids": 263
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            if str1[i] == '0' and str2[i] == '1' :\n                #print(i)\n                count += 1\n            elif str1[i] == '1' and str2[i] == '0' : \n                #print(i)\n                count += 1\n    return count",
        "num_ids": 113
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for x in tuple_list:\n        if type(x) == int:\n            size += sys.getsizeof(x)\n        elif type(x) == str:\n            size += sys.getsizeof(x)\n        elif type(x) == tuple:\n            size += tuple_size(x)\n        elif type(x) == list:\n            size += list_size(x)\n    return size\n    \ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    size = 0\n    for x in list_list:\n        if type(x) == int:\n            size += sys.getsizeof(x)\n        elif type(x) == str:\n            size += sys.getsizeof(x)\n        elif type(x) == list:\n            size += list_size(x)\n        elif type(x) == tuple:\n            size += tuple_size(x)\n    return size\n",
        "num_ids": 107
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    def get_size(value):\n        size = sys.getsizeof(value)\n        if isinstance(value, tuple):\n            for val in value:\n                size += get_size(val)\n        return size\n    return get_size(tuple_list)\n",
        "num_ids": 66
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(sys.getsizeof(tuple_list))\n",
        "num_ids": 17
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        if type(i) == type(1):\n            size += 4\n        else:\n            if type(i) == type(1.0):\n                size += 4\n            else:\n                size += sys.getsizeof(i)\n    return size\n",
        "num_ids": 76
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if not tuple_list:\n        print(\"Invalid input\")\n    else:\n        print(\"Size of the tuple is: \",sys.getsizeof(tuple_list))\n        print(\"Type of the tuple: \",type(tuple_list))\n        print(\"Tuple items type is: \",type(tuple_list[0]))\n        print(\"Item 0 of tuple is: \",tuple_list[0])\n        print(\"Item 1 of tuple is: \",tuple_list[1])\n        print(\"Item 2 of tuple is: \",tuple_list[2])\n        print(\"Item 3 of tuple is: \",tuple_list[3])\n        print(\"Item 4 of tuple is: \",tuple_list[4])\n        print(\"Item 5 of tuple is: \",tuple_list[5])\n        print(\"Item 6 of tuple is: \",tuple_list[6])\n        print(\"Item 7 of tuple is: \",tuple_list[7])\n        print(\"Item 8 of tuple is: \",tuple_list[8])\n        print(\"Item 9 of tuple is: \",tuple_list[9])\n        print(\"Item 10 of tuple is: \",tuple_list[10])\n        print(\"Item 11 of tuple is: \",tuple_list[11])\n        print(\"Item 12 of tuple is: \",tuple_list[12])\n        print(\"Item 13 of tuple is: \",tuple_list[13])\n        print(\"Item 14 of tuple is: \",tuple_list[14])\n        print(\"Item 15 of tuple is: \",tuple_list[15])\n        print(\"Item 16 of tuple is: \",tuple_list[16])\n        print(\"Item 17 of tuple is: \",tuple_list[17])\n        print(\"Item 18 of tuple is: \",tuple_list[18])\n        print(\"Item 19 of tuple is: \",tuple_list[19])\n        print(\"Item 20 of tuple is: \",tuple_list[20])\n        print(\"Item 21 of tuple is: \",tuple_list[21])\n        print(\"Item 22 of tuple is: \",tuple_list[22])\n        print(\"Item 23 of tuple is: \",tuple_list[23])\n        print(\"Item 24 of tuple is: \",tuple_list[24])\n        print(\"Item 25 of tuple is: \",tuple_list[25])\n        print(\"Item 26 of tuple is: \",tuple_list[26])\n        print(\"Item 27 of tuple is: \",tuple_list[27])\n        print(\"Item 28 of tuple is: \",tuple_list[28])\n        print(\"Item 29 of tuple is: \",tuple_list[29])\n        print(\"Item 30 of tuple is: \",tuple_list[30])\n        print(\"Item 31 of tuple is: \",tuple_list[31])\n        print(\"Item 32 of tuple is: \",tuple_list[32])\n        print(\"Item 33 of tuple is: \",tuple_list[33])\n        print(\"Item 34 of tuple is: \",tuple_list[34])\n        print(\"Item 35 of tuple is: \",tuple_list[35])\n        print(\"Item 36 of tuple is: \",tuple_list[36])\n        print(\"Item 37 of tuple is: \",tuple_list[37])\n        print(\"Item 38 of tuple is: \",tuple_list[38])\n        print(\"Item 39 of tuple is: \",tuple_list[39])\n        print(\"Item 40 of tuple is: \",tuple_list[40])\n        print(\"Item 41 of tuple is: \",tuple_list[41])\n        print(\"Item 42 of tuple is: \",tuple_list[42])\n        print(\"Item 43 of tuple is: \",tuple_list[43])\n        print(\"Item 44 of tuple is: \",tuple_list[44])\n        print(\"Item 45 of tuple is: \",tuple_list[45])\n        print(\"Item 46 of tuple is: \",tuple_list[46])\n        print(\"Item 47 of tuple is: \",tuple_list[47])\n        print(\"Item 48 of tuple is: \",tuple_list[48])\n        print(\"Item 49 of tuple is: \",tuple_list[49])\n        print(\"Item 50 of tuple is: \",tuple_list[50])\n        print(\"Item 51 of tuple is: \",tuple_list[51])\n        print(\"Item 52 of tuple is: \",tuple_list[52])\n        print(\"Item 53 of tuple is: \",tuple_list[53])\n        print(\"Item 54 of tuple is: \",tuple_list[54])\n        print(\"Item 55 of tuple is: \",tuple_list[55])\n        print(\"Item 56 of tuple is: \",tuple_list[56])\n        print(\"Item 57 of tuple is: \",tuple_list[57])\n        print(\"Item 58 of tuple is: \",tuple_list[58])\n        print(\"Item 59 of tuple is: \",tuple_list[59])\n        print(\"Item 60 of tuple is: \",tuple_list[60])\n        print(\"Item 61 of tuple is: \",tuple_list[61])\n        print(\"Item 62 of tuple is: \",tuple_list[62])\n        print(\"Item 63 of tuple is: \",tuple_list[63])\n        print(\"Item 64 of tuple is: \",tuple_list[64])\n        print(\"Item 65 of tuple is: \",tuple_list[65])\n        print(\"Item 66 of tuple is: \",tuple_list[66])\n        print(\"Item 67 of tuple is: \",tuple_list[67])\n        print(\"Item 68 of tuple is: \",tuple_list[68])\n        print(\"Item 69 of tuple is: \",tuple_list[69])\n        print(\"Item 70 of tuple is: \",tuple_list[70])\n        print(\"Item 71 of tuple is: \",tuple_list[71])\n        print(\"Item 72 of tuple is: \",tuple_list[72])\n        print(\"Item 73 of tuple is: \",tuple_list[73])\n        print(\"Item 74 of tuple is: \",tuple_list[74])\n        print(\"Item 75 of tuple is: \",tuple_list[75])\n        print(\"Item 76 of tuple is: \",tuple_list[76])\n        print(\"Item 77 of tuple is: \",tuple_list[77])\n        print(\"Item 78 of tuple is: \",tuple_list[78])\n        print(\"Item 79 of tuple is: \",tuple_list[79])\n        print(\"Item 80 of tuple is: \",tuple_list[80])\n        print(\"Item 81 of tuple is: \",tuple_list[81])\n        print(\"Item 82 of tuple is: \",tuple_list[82])\n        print(\"Item 83 of tuple is: \",tuple_list[83])\n        print(\"Item 84 of tuple is: \",tuple_list[84])\n        print(\"Item 85 of tuple is: \",tuple_list[85])\n        print(\"Item 86 of tuple is: \",tuple_list[86])\n        print(\"Item 87 of tuple is: \",tuple_list[87])\n        print(\"Item 88 of tuple is: \",tuple_list[88])\n        print(\"Item 89 of tuple is: \",tuple_list[89])\n        print(\"Item 90 of tuple is: \",tuple_list[90])\n        print(\"Item 91 of tuple is: \",tuple_list[91])\n        print(\"Item 92 of tuple is: \",tuple_list[92])\n        print(\"Item 93 of tuple is: \",tuple_list[93])\n        print(\"Item 94 of tuple is: \",tuple_list[94])\n        print(\"Item 95 of tuple is: \",tuple_list[95])\n        print(\"Item 96 of tuple is: \",tuple_list[96])\n        print(\"Item 97 of tuple is: \",tuple_list[97])\n        print(\"Item 98 of tuple is: \",tuple_list[98])\n        print(\"Item 99 of tuple is: \",tuple_list[99])\n        print(\"Item 100 of tuple is: \",tuple_list[100])\n        print(\"Item 101 of tuple is: \",tuple_list[101])\n        print(\"Item 102 of tuple is: \",tuple_list[102])\n        print(\"Item 103 of tuple is: \",tuple_list[103])\n        print(\"Item 104 of tuple is: \",tuple_list[104])\n        print(\"Item 105 of tuple is: \",tuple_list[105])\n        print(\"Item 106 of tuple is: \",tuple_list[106])\n        print(\"Ite",
        "num_ids": 2012
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    start = 0\n    end = len(arr1)-1\n    while start <= end:\n        mid = (start+end)//2\n        if arr1[mid] < arr2[k//2]:\n            start = mid+1\n        elif arr1[mid] > arr2[k//2]:\n            end = mid-1\n        else:\n            return arr1[k-1]\n    if start > end:\n        start = end\n    if k % 2 == 0:\n        return arr1[start]\n    else:\n        return arr2[start]\n",
        "num_ids": 164
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n        if i+j == k:\n            return arr1[i]\n        if i+j > k:\n            break\n    if i+j == k:\n        return arr1[i]\n    return arr2[j]\n",
        "num_ids": 109
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr3 = arr1 + arr2\n    arr3.sort()\n    if len(arr3) < k:\n        return None\n    else:\n        return arr3[k-1]\n",
        "num_ids": 48
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[0] < arr2[0]:\n        arr = arr1\n        start = 0\n    else:\n        arr = arr2\n        start = 1\n    l1, l2 = len(arr1), len(arr2)\n    ans = 0\n    p1, p2 = 0, 0\n    while l1 > 0 or l2 > 0:\n        if l1 == 0:\n            ans += l2\n            l2 -= 1\n        elif l2 == 0:\n            ans += l1\n            l1 -= 1\n        else:\n            if arr1[p1] < arr2[p2]:\n                ans += l1\n                l1 -= 1\n                p1 += 1\n            else:\n                ans += l2\n                l2 -= 1\n                p2 += 1\n    return ans + k\n    \n        \nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5, 6, 7]\n    arr2 = [2, 4, 6, 8]\n    k = 3\n    print(find_kth(arr1, arr2, k))",
        "num_ids": 266
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    p1 = p2 = 0\n    while p1 < len(arr1) and p2 < len(arr2):\n        if arr1[p1] < arr2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n        if p1 + p2 - 1 == k:\n            return p1 + p2 - 1\n",
        "num_ids": 86
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Assuming that arr1 and arr2 are sorted array of the same size.\n    i = 0\n    j = 0\n    while True:\n        if i == len(arr1):\n            return arr2[j + k - 1]\n        if j == len(arr2):\n            return arr1[i + k - 1]\n",
        "num_ids": 79
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # O(m+n) space complexity\n    # O(log(m+n)) time complexity\n",
        "num_ids": 26
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[len(arr1)-1] < arr2[0]:\n        arr1, arr2 = arr2, arr1\n        k = k + 1 - len(arr1)\n    while len(arr1) > 0 and len(arr2) > 0:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        elif len(arr1) > len(arr2):\n            arr2 = arr2[1:]\n            k -= 1\n        elif len(arr1) < len(arr2):\n            arr1 = arr1[1:]\n            k -= 1\n        elif arr1[0] < arr2[0]:\n            arr1 = arr1[1:]\n            k -= 1\n        else:\n            arr2 = arr2[1:]\n            k -= 1\n",
        "num_ids": 197
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binary_search(arr, key):\n        l, r = 0, len(arr)-1\n        while l<=r:\n            mid = (l+r)//2\n            if arr[mid]==key:\n                return True\n            elif arr[mid]<key:\n                l = mid+1\n            else:\n                r = mid-1\n        return False\n    \n    def find_kth_in_arr(arr1, arr2, k):\n        i = j = 0\n        while i<len(arr1) and j<len(arr2):\n            if arr1[i]<arr2[j]:\n                i += 1\n            else:\n                j += 1\n        \n        if i<len(arr1):\n            return arr1[k-j]\n        else:\n            return arr2[k-i]\n    \n    def kth(arr1, arr2, k):\n        if len(arr1)<len(arr2):\n            return find_kth_in_arr(arr1, arr2, k)\n        else:\n            return find_kth_in_arr(arr2, arr1, k)\n    return kth(arr1, arr2, k)\n",
        "num_ids": 291
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1:\n        return arr2[k - 1]\n    if not arr2:\n        return arr1[k - 1]\n",
        "num_ids": 36
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if(number==None):\n        return False\n    result=0\n    temp=number\n    length=len(str(number))\n    while(temp>0):\n        digit=temp%10\n        result+=digit**length\n        temp=temp//10\n    if(result==number):\n        return True\n    else:\n        return False\n    \n    \ndef fibonacci(number):\n    '''\n    Write a function to find the nth fibonacci number.\n    '''\n    if(number==None):\n        return False\n    if(number==0):\n        return 0\n    if(number==1):\n        return 1\n    result=0\n    a=0\n    b=1\n    c=1\n    while(number>0):\n        result=a+b\n        a=b\n        b=c\n        c=result\n        number-=1\n    return result\n    \n    \ndef reverse_string(number):\n    '''\n    Write a function to reverse a string.\n    '''\n    if(number==None):\n        return False\n    temp=''\n    for i in number:\n        temp=i+temp\n    return temp\n    \n    \ndef reverse_string_recursive(number):\n    '''\n    Write a function to reverse a string.\n    '''\n    if(number==None):\n        return False\n    if(len(number)==0):\n        return number\n    return reverse_string_recursive(number[1:])+number[0]\n    \n    \ndef power_of_2(number):\n    '''\n    Write a function to check whether the given number is power of 2 or not.\n    '''\n    if(number==None):\n        return False\n    count=0\n    while(number>0):\n        number=number//10\n        count+=1\n    if(count==1):\n        return True\n    else:\n        return False\n        \n    \ndef check_prime_number(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if(number==None):\n        return False\n    if(number==1):\n        return False\n    if(number==2):\n        return True\n    if(number>2):\n        for i in range(2,number):\n            if(number%i==0):\n                return False\n        return True\n    \n    \ndef check_prime_number_recursive(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if(number==None):\n        return False\n    if(number==1):\n        return False\n    if(number==2):\n        return True\n    if(number>2):\n        if(number%2==0):\n            return False\n        for i in range(3,number,2):\n            if(number%i==0):\n                return False\n        return True\n    \n    \ndef find_prime_number_between(lower_limit,upper_limit):\n    '''\n    Write a function to find the prime numbers between the given range.\n    '''\n    if(lower_limit==None):\n        return False\n    if(upper_limit==None):\n        return False\n    if(lower_limit>upper_limit):\n        return False\n    if(upper_limit<=1):\n        return False\n    if(lower_limit<=0):\n        return False\n    prime_number=[]\n    for i in range(lower_limit,upper_limit+1):\n        if(check_prime_number(i)==True):\n            prime_number.append(i)\n    return prime_number\n    \n    \ndef find_prime_number_between_recursive(lower_limit,upper_limit):\n    '''\n    Write a function to find the prime numbers between the given range.\n    '''\n    if(lower_limit==None):\n        return False\n    if(upper_limit==None):\n        return False\n    if(lower_limit>upper_limit):\n        return False\n    if(upper_limit<=1):\n        return False\n    if(lower_limit<=0):\n        return False\n    prime_number=[]\n    if(lower_limit==2):\n        return [2]\n    if(upper_limit==2):\n        return [2]\n    if(lower_limit==1):\n        return []\n    for i in range(lower_limit,upper_limit+1):\n        if(check_prime_number_recursive(i)==True):\n            prime_number.append(i)\n    return prime_number\n    \n    \ndef check_palindrome(number):\n    '''\n    Write a function to check whether the given number is palindrome or not.\n    '''\n    if(number==None):\n        return False\n    temp=number\n    rev=0\n    while(temp>0):\n        rev=rev*10+temp%10\n        temp=temp//10\n    if(number==rev):\n        return True\n    else:\n        return False\n    \n    \ndef check_palindrome_recursive(number):\n    '''\n    Write a function to check whether the given number is palindrome or not.\n    '''\n    if(number==None):\n        return False\n    if(number==0):\n        return True\n    if(number==1):\n        return True\n    if(number==-1):\n        return True\n    if(number<0):\n        return False\n    if(number==0):\n        return True\n    if(number==1):\n        return True\n    if(number==-1):\n        return True\n    if(number<0):\n        return False\n    return check_palindrome_recursive(number//10) and (number%10)==check_palindrome_recursive(number%10)\n    \n    \ndef sum_of_digits_of_a_number(number):\n    '''\n    Write a function to find the sum of digits of a number.\n    '''\n    if(number==None):\n        return False\n    if(number==0):\n        return 0\n    if(number<0):\n        return False\n    if(number==1):\n        return 1\n    return number%10+sum_of_digits_of_a_number(number//10)\n    \n    \ndef sum_of_digits_of_a_number_recursive(number):\n    '''\n    Write a function to find the sum of digits of a number.\n    '''\n    if(number==None):\n        return False\n    if(number==0):\n        return 0\n    if(number<0):\n        return False\n    if(number==1):\n        return 1\n    return number%10+sum_of_digits_of_a_number_recursive(number//10)\n    \n    \ndef print_digits(number):\n    '''\n    Write a function to print all digits of a number in reverse order.\n    '''\n    if(number==None):\n        return False\n    if(number<0):\n        return False\n    if(number==0):\n        return []\n    if(number==1):\n        return [1]\n    return [number%10]+print_digits(number//10)\n    \n    \ndef print_digits_recursive(number):\n    '''\n    Write a function to print all digits of a number in reverse order.\n    '''\n    if(number==None):\n        return False\n    if(number<0):\n        return False\n    if(number==0):\n        return []\n    if(number==1):\n        return [1]\n    return print_digits_recursive(number//10)+[number%10]\n    \n    \ndef find_largest_number(number_list):\n    '''\n    Write a function to find the largest number from the list.\n    '''\n    if(number_list==None):\n        return False\n    if(number_list==[]):\n        return False\n    if(len(number_list)==0):\n        return False\n    if(len(number_list)==1):\n        return number_list[0]\n    if(len(number_list)==2):\n        if(number_list[0]>number_list[1]):\n            return number_list[0]\n        else:\n            return number_list[1]\n    if(len(number_list)>2)",
        "num_ids": 134
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n= number\n    sum=0\n    length=len(str(n))\n    temp=n\n    while n>0:\n        digit=n%10\n        sum+=digit**length\n        n//=10\n    if sum==temp:\n        print(\"The number is an armstrong number\")\n    else:\n        print(\"The number is not an armstrong number\")\n    return\n",
        "num_ids": 93
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = len(str(number))\n    sum = 0\n    for i in str(number):\n        sum += int(i)**n\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # sample_number = 153\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == number\n",
        "num_ids": 53
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    order = len(str(number))\n    total = 0\n    for digit in str(number):\n        total += int(digit) ** order\n    return total == number\n",
        "num_ids": 42
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num=number\n    sum1=0\n    while(number>0):\n        rem=number%10\n        sum1=sum1+(rem**3)\n        number=number//10\n    if num==sum1:\n        print(\"The number is an armstrong number.\")\n    else:\n        print(\"The number is not an armstrong number.\")\n    return\n",
        "num_ids": 87
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Input: 153\n    # Output: Yes\n    # Explanation: 153 is an Armstrong number.\n    # 1*1*1 + 5*5*5 + 3*3*3 = 1 + 125 + 27 = 153\n",
        "num_ids": 54
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #return (number)\n    #while (number > 0):\n    #    n = number % 10\n    #    number = number // 10\n    #    print(n)\n    #    total = n * n * n\n    #    print(total)\n    #    if (total == number):\n    #        print(f\"{number} is an Armstrong number\")\n    #        return True\n    #    else:\n    #        print(f\"{number} is not an Armstrong number\")\n    #        return False\n",
        "num_ids": 124
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    lenght_num = len(str(number))\n    sum_num = 0\n    num = number\n    while num:\n        sum_num += (num % 10) ** lenght_num\n        num = num // 10\n    if sum_num == number:\n        return True\n    return False\n",
        "num_ids": 74
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    # Initialize a variable to store the sum\n    sum = 0\n",
        "num_ids": 20
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_number = 0\n    count_number = 0\n    while count_number < number:\n        count_number += 1\n        sum_number += count_number\n    print(f'Sum of {number} numbers: {sum_number}')\n    print(f'Average of {number} numbers: {sum_number/number}')\n",
        "num_ids": 81
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if not isinstance(number, int):\n        return None\n    s = 0\n    n = 1\n    while(n <= number):\n        s = s + n\n        n += 1\n    return s\n",
        "num_ids": 51
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum,average = 0,0\n    for i in range(1,number+1):\n        sum = sum + i\n        average = average + 1\n    return sum,average\n",
        "num_ids": 44
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    avg = sum/number\n    return (sum,avg)\n",
        "num_ids": 42
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum = sum + i\n    average = sum / number\n    return(sum,average)\n",
        "num_ids": 47
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    print(number)\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    avg = sum / number\n    print(\"The sum of first {} numbers is: {}\".format(number, sum))\n    print(\"The average of first {} numbers is: {}\".format(number, avg))\n    return\n",
        "num_ids": 82
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    avg=0\n    for i in range(number+1):\n        sum+=i\n        avg+=1\n    return (sum,avg,sum/avg)\n",
        "num_ids": 49
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 0:\n        print('Enter a positive number')\n    else:\n        sum = 0\n        avg = 0\n        for i in range(1, number+1):\n            sum += i\n            avg += 1\n        print('The sum of the first {} natural numbers is {}\\nThe average of the first {} natural numbers is {}'.format(number, sum, number, sum/avg))\n",
        "num_ids": 97
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n",
        "num_ids": 25
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    average = 0\n    for i in range(number):\n        total += i + 1\n        average = total / number\n    return total, average\n",
        "num_ids": 41
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n % 2 == 0) \n",
        "num_ids": 13
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n        \ndef is_divisible_by(n, m) : \n    '''\n    Write a python function to check whether the given number is divisible by another number or not.\n    '''\n    if n % m == 0 :\n        return True\n    else :\n        return False\n        \ndef is_power_of(n, m) : \n    '''\n    Write a python function to check whether the given number is power of another number or not.\n    '''\n    \n    if n ** m == n :\n        return True\n    else :\n        return False\n    \ndef is_divisible_by_all(n, m) : \n    '''\n    Write a python function to check whether the given number is divisible by all the numbers in the given array or not.\n    '''\n    for i in m :\n        if n % i!= 0 :\n            return False\n    return True\n    \ndef is_greater_than_all(n, m) : \n    '''\n    Write a python function to check whether the given number is greater than all the numbers in the given array or not.\n    '''\n    for i in m :\n        if n > i :\n            return False\n    return True\n    \ndef is_greater_than_or_equal_to_all(n, m) : \n    '''\n    Write a python function to check whether the given number is greater than or equal to all the numbers in the given array or not.\n    '''\n    for i in m :\n        if n < i :\n            return False\n    return True\n",
        "num_ids": 24
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        print(\"The number \",n,\" is even\")\n    else :\n        print(\"The number \",n,\" is odd\")\n",
        "num_ids": 39
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else :\n        return False\ndef is_Even_Recursive(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n == 0 : \n        return True\n    elif n % 2 == 0 : \n        return True\n    else : \n        return False\ndef is_even_Iterative(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    while n!= 0 : \n        if n % 2 == 0 : \n            return True\n        else : \n            return False\n        n = n // 2\n",
        "num_ids": 41
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True \n    else : \n        return False \n",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else:\n        return False\n        \ndef get_Squares(n) : \n    '''\n    Write a python function to return first n natural numbers that are squares of each other.\n    '''\n    squares=[i**2 for i in range(n+1)]\n    return squares[:n]\n    \ndef check_Pythagorean_Triplet(a,b,c) : \n    '''\n    Write a python function to check whether the given numbers are a Pythagorean Triplet or not.\n    '''\n    if (a**2+b**2) == c**2:\n        return True\n    else:\n        return False\n        \ndef check_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n==1 :\n        return False\n    else:\n        for i in range(2,n//2+1):\n            if n%i==0:\n                return False\n        return True\n        \ndef get_Factors(n) : \n    '''\n    Write a python function to return a list of all factors of the given number.\n    '''\n    return list(set([i for i in range(1,n+1) if n%i==0]))\n    \ndef get_Factors_with_Count(n) : \n    '''\n    Write a python function to return a list of all factors of the given number as well as the count of factors.\n    '''\n    return list(zip([i for i in range(1,n+1) if n%i==0], [i for i in range(1,n+1) if n%i==0]))\n    \ndef print_Counts(l) : \n    '''\n    Write a python function to print a list of all numbers and their count in a single line.\n    '''\n    for i in range(len(l)):\n        print(l[i],\":\",l.count(l[i]))\n        \ndef get_Count_of_Non_Repeating_Characters(s) : \n    '''\n    Write a python function to return the count of non repeating characters in a given string.\n    '''\n    dict= {}\n    for i in s:\n        if i not in dict:\n            dict[i]=1\n        else:\n            dict[i]+=1\n    return sum(list(map(lambda x: 1 if x==1 else 0, dict.values())))\n    \ndef count_Rotation(l) : \n    '''\n    Write a python function to return the count of rotated strings in a given list.\n    '''\n    c=0\n    for i in range(len(l)):\n        s=l[i]\n        for j in range(len(l)):\n            s=l[j] + s\n            if s == l[i]:\n                c+=1\n    return c\n    \ndef get_Fibonacci_Sequence(n) : \n    '''\n    Write a python function to return the first n Fibonacci numbers.\n    '''\n    a=0\n    b=1\n    for i in range(n):\n        a,b=b,a+b\n    return a\n",
        "num_ids": 36
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return True if n % 2 == 0 else False\n",
        "num_ids": 14
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if(str1[i] in str1[i+1:]):\n            return str1[i]\n    return -1\n",
        "num_ids": 46
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = \"OnePlusOneOne\"\n    for i in str1:\n        if str1.count(i) == 2:\n            print(\"Repeated First Character\", i)\n",
        "num_ids": 45
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    list1 = []\n    list2 = []\n    for x in str1:\n        if x not in list1:\n            list1.append(x)\n        else:\n            list2.append(x)\n    if len(list2)!= 0:\n        print(\"repeated character is\", list2[0])\n    else:\n        print(\"all letters are unique\")\n",
        "num_ids": 101
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # str1 = 'aaabbbaaa'\n    # str2 = 'aaabbbbaa'\n    # str3 = 'abcdefg'\n    # str4 = 'aaabbbaa'\n    # str5 = 'abcdabcdabcd'\n    # str6 = 'abcdaabcdaabcda'\n    # str7 = 'aab'\n    # str8 = 'xyx'\n    # str9 = 'abc'\n    # str10 = 'abcdefghijklmnopqrstuvwxyz'\n    # str11 = 'abcdefghijklmnopqrstuvwxyzab'\n    # str12 = 'abcdefghijklmnopqrstuvwxyzabc'\n    # str13 = 'abcdefghijklmnopqrstuvwxyzabcde'\n    # str14 = 'abcdefghijklmnopqrstuvwxyzabcde'\n    # str15 = 'abcdefghijklmnopqrstuvwxyzabcde'\n    # str16 = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'\n    # str17 = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'\n    # str18 = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'\n",
        "num_ids": 355
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(0,len(str1)):\n        for j in range(0,len(str1)):\n            if(str1[i]==str1[j] and i!=j):\n                return str1[i]\n    return \"No Repeated Char\"\n",
        "num_ids": 70
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if(str1 == \"\"):\n        return\n    s = set()\n    for ch in str1:\n        if ch in s:\n            return ch\n        s.add(ch)\n    return None\n",
        "num_ids": 51
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            return char\n",
        "num_ids": 45
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    import collections\n    count = collections.Counter(str1)\n    for k,v in count.items():\n        if v > 1:\n            return k\n    return None\n",
        "num_ids": 43
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n        else:\n            continue\n    return 'No characters repeated.'\n",
        "num_ids": 42
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) < 1:\n        return 'String can not be empty'\n    else:\n        for index, char in enumerate(str1):\n            if char in str1[index + 1 :]:\n                return char\n",
        "num_ids": 57
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    print('\\nPython_Basics\\n' + '-'*15)\n    #print(f'Lucid_Number: {[i for i in range(1, n) if is_ludic(i)]}')\n    print(f'Lucid_Number: {[i for i in range(1, n) if is_ludic_v2(i)]}')\n",
        "num_ids": 91
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n):\n        ludic.append(i)\n    return(ludic)\n",
        "num_ids": 35
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [x for x in range(1, n) if is_ludic(x)]\n",
        "num_ids": 24
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # def find_ludic(n):\n    #     '''\n    #     Return a list of all the lucid numbers smaller than or equal to n.\n    #     '''\n    #     return [ludic for ludic in range(1, n+1) if is_ludic(ludic)]\n",
        "num_ids": 31
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        if (i + 1) % 2!= 0:\n            ludic.append(i + 1)\n    return ludic\n",
        "num_ids": 47
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    def dfs(n, path=''):\n        if n == 0:\n            if path not in ludic:\n                ludic.append(path)\n        else:\n            dfs(n-1, path+'0')\n            dfs(n-2, path+'1')\n    dfs(n)\n    return ludic\n",
        "num_ids": 89
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        # Number of digits of i\n        length = len(str(i))\n        # If the number of digits is 1\n        if length == 1:\n            # If the first digit is 2, or 3, or 5, or 7, or 11\n            if str(i)[0] in ['2','3','5','7','1']:\n                # Append i to the list of ludic\n                ludic.append(i)\n        # If the number of digits is 2\n        elif length == 2:\n            # If the first digit is 2, or 3, or 5, or 7, or 11\n            if str(i)[0] in ['2','3','5','7','1']:\n                # If the second digit is a multiple of 2\n                if str(i)[1] in ['0','2','4','6','8']:\n                    # Append i to the list of ludic\n                    ludic.append(i)\n            # If the second digit is a multiple of 3\n            elif str(i)[1] in ['0','3','6','9']:\n                # Append i to the list of ludic\n                ludic.append(i)\n        # If the number of digits is 3\n        elif length == 3:\n            # If the first digit is 2, or 3, or 5, or 7, or 11\n            if str(i)[0] in ['2','3','5','7','1']:\n                # If the second digit is a multiple of 2\n                if str(i)[1] in ['0','2','4','6','8']:\n                    # If the third digit is a multiple of 2\n                    if str(i)[2] in ['0','2','4','6','8']:\n                        # Append i to the list of ludic\n                        ludic.append(i)\n                    # If the third digit is a multiple of 3\n                    elif str(i)[2] in ['0','3','6','9']:\n                        # Append i to the list of ludic\n                        ludic.append(i)\n            # If the second digit is a multiple of 3\n            elif str(i)[1] in ['0','3','6','9']:\n                # If the third digit is a multiple of 3\n                if str(i)[2] in ['0','3','6','9']:\n                    # Append i to the list of ludic\n                    ludic.append(i)\n    # Return the list of ludic\n    return ludic\n",
        "num_ids": 594
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    count = 0\n    for num in range(1,n):\n        num_as_list = [int(x) for x in str(num)]\n        num_rev = [int(x) for x in str(num)[::-1]]\n        if sorted(num_as_list) == sorted(num_rev):\n            count += 1\n    return count\n",
        "num_ids": 87
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if str(i) == ''.join(sorted(str(i))):\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 55
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def get_ludic_rec(n, x):\n        if n < 0:\n            return []\n        elif n == 0:\n            return [0]\n        elif n == x:\n            return [n]\n        elif n > x:\n            return get_ludic_rec(n - x, x) + get_ludic_rec(n, x * 2)\n        elif n < x:\n            return get_ludic_rec(n - x, x) + [x]\n",
        "num_ids": 121
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_words_helper(s, start, end):\n        if end < start:\n            return\n        while start < end and s[start]!='':\n            start += 1\n        while start < end and s[end]!='':\n            end -= 1\n        reverse_words_helper(s, start + 1, end - 1)\n        s[start: end+1] = reversed(s[start: end+1])\n",
        "num_ids": 108
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = ''.join(reversed(s))\n    s = s.split(' ')\n    s =''.join(reversed(s))\n    return s\n",
        "num_ids": 43
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    print(\"Original string:\", s)\n",
        "num_ids": 12
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    rev_words = words[::-1]\n    return''.join(rev_words)\n",
        "num_ids": 34
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    rev_string = ''\n    for word in words[::-1]:\n        rev_string += word +''\n",
        "num_ids": 39
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    s = list(s)\n    i, j = 0, len(s)-1\n    while i < j:\n        while i < j and not s[i].isspace():\n            i += 1\n        while i < j and not s[j].isspace():\n            j -= 1\n        s[i], s[j] = s[j], s[i]\n        i, j = i+1, j-1\n    \n    return ''.join(s)\n",
        "num_ids": 115
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    strs = s.split()\n    strs.reverse()\n    return''.join(strs)\n",
        "num_ids": 27
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #return s.split(' ')[::-1]\n    words = s.split(' ')\n    return''.join(reversed(words))\n",
        "num_ids": 38
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return''.join(s)\n",
        "num_ids": 28
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return \"\"\n",
        "num_ids": 12
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # 1 is not a prime number.\n    if num == 1:\n        return False\n    # 0 and negative numbers are not prime numbers.\n    elif num <= 0:\n        return False\n    # 2 is the only even prime number.\n    elif num == 2:\n        return True\n    # All other even numbers are not prime.\n    elif num % 2 == 0:\n        return False\n    # Only check odd numbers up to the square root of the number.\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 149
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 0 or num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    else:\n        for i in range(2,num):\n            if num%i == 0:\n                return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n    ",
        "num_ids": 55
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    flag = True\n    if num == 1:\n        return False\n    for i in range(2,num//2+1):\n        if num%i == 0:\n            flag = False\n            break\n    return flag\n",
        "num_ids": 54
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                break\n            else:\n                print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n",
        "num_ids": 80
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\n    \ndef prime_list(num):\n    '''\n    Write a function to return all the prime numbers up to a given integer.\n    '''\n    # Initialize an empty array for all the prime numbers\n    prime_list = []\n    for i in range(num):\n        if prime_num(i+1):\n            prime_list.append(i+1)\n    return prime_list\n    \ndef prime_factorization(num):\n    '''\n    Write a function to return all the prime factors of the given integer.\n    '''\n    # Initialize an empty list for prime factors\n    prime_factor_list = []\n    # Iterate through all numbers from 2 up to the given number\n    for i in range(2,num+1):\n        if num % i == 0:\n            # Check if the number is prime and add to list if true\n            if prime_num(i):\n                prime_factor_list.append(i)\n    return prime_factor_list\n        \ndef prime_factor_decomposition(num):\n    '''\n    Write a function to return prime factor decomposition of the given integer.\n    '''\n    # Initialize an empty list for prime factor decomposition\n    prime_factor_decomposition_list = []\n    # Iterate through all numbers from 2 up to the given number\n    for i in range(2,num+1):\n        if num % i == 0:\n            # Check if the number is prime and add to list if true\n            if prime_num(i):\n                prime_factor_decomposition_list.append(i)\n                num = num/i\n    # Add the last number to the list\n    prime_factor_decomposition_list.append(int(num))\n    return prime_factor_decomposition_list\n    \ndef fibonacci_sum(num):\n    '''\n    Write a function to return the sum of the first n Fibonacci numbers.\n    '''\n    # Initialize an empty array for fibonacci numbers\n    fibonacci_array = []\n    # Initialize the first two fibonacci numbers\n    fibonacci_array.append(1)\n    fibonacci_array.append(1)\n    # Iterate through the fibonacci number array up to the given number\n    for i in range(num-2):\n        fibonacci_array.append(fibonacci_array[i]+fibonacci_array[i+1])\n    return sum(fibonacci_array)\n    \ndef fibonacci_sequence(num):\n    '''\n    Write a function to return the fibonacci sequence up to a given number.\n    '''\n    # Initialize an empty array for the fibonacci sequence\n    fibonacci_sequence = []\n    # Initialize the first two fibonacci numbers\n    fibonacci_sequence.append(1)\n    fibonacci_sequence.append(1)\n    # Iterate through the fibonacci sequence array up to the given number\n    for i in range(num-2):\n        fibonacci_sequence.append(fibonacci_sequence[i]+fibonacci_sequence[i+1])\n    # Return the fibonacci sequence array\n    return fibonacci_sequence\n    \ndef fibonacci_sequence_up_to_nth_term(num):\n    '''\n    Write a function to return the fibonacci sequence up to the given number.\n    '''\n    # Initialize the fibonacci number arrays\n    fibonacci_sequence = []\n    fibonacci_sequence.append(1)\n    fibonacci_sequence.append(1)\n    # Iterate through the fibonacci sequence array up to the given number\n    for i in range(num-2):\n        fibonacci_sequence.append(fibonacci_sequence[i]+fibonacci_sequence[i+1])\n    # Return the fibonacci sequence array\n    return fibonacci_sequence\n    \ndef palindrome_array(num):\n    '''\n    Write a function to return the palindrome array for a given integer.\n    '''\n    # Initialize an empty array for palindromes\n    palindrome_array = []\n    # Iterate through all numbers from 1 up to the given number\n    for i in range(1,num+1):\n        # Check if the number is a palindrome and add to list if true\n        if str(i) == str(i)[::-1]:\n            palindrome_array.append(i)\n    return palindrome_array\n    \ndef palindrome_list(num):\n    '''\n    Write a function to return all the palindromes up to a given integer.\n    '''\n    # Initialize an empty array for palindromes\n    palindrome_list = []\n    # Iterate through all numbers from 1 up to the given number\n    for i in range(1,num+1):\n        # Check if the number is a palindrome and add to list if true\n        if str(i) == str(i)[::-1]:\n            palindrome_list.append(i)\n    return palindrome_list\n    \ndef palindrome_list_decomposition(num):\n    '''\n    Write a function to return the palindrome decomposition of a given integer.\n    '''\n    # Initialize an empty array for palindrome decomposition\n    palindrome_list_decomposition = []\n    # Iterate through all numbers from 1 up to the given number\n    for i in range(1,num+1):\n        # Check if the number is a palindrome and add to list if true\n        if str(i) == str(i)[::-1]:\n            # Initialize an empty list for palindromes\n            palindrome_list = []\n            # Iterate through all numbers from 1 up to the given number\n            for j in range(1,i+1):\n                # Check if the number is a palindrome and add to list if true\n                if str(i) == str(i)[::-1]:\n                    # Add palindrome to list if true\n                    palindrome_list.append(j)\n                    i = i/j\n            # Add the last palindrome to the list\n            palindrome_list_decomposition.append(palindrome_list)\n    return palindrome_list_decomposition\n",
        "num_ids": 249
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (math.pi * degree) / 180\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    \n    if type(degree) == int:\n        return math.pi*degree/180\n    elif type(degree) == float:\n        return math.pi*degree/180\n    else:\n        print(\"please input an integer or a float\")\n    \n",
        "num_ids": 63
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_two(degree_1,degree_2):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree_1*degree_2\ndef m_to_km(m):\n    '''\n    Write a function to convert meters to kilometers.\n    '''\n    return m/1000\ndef km_to_m(km):\n    '''\n    Write a function to convert kilometers to meters.\n    '''\n    return km*1000\ndef km_to_feet(km):\n    '''\n    Write a function to convert kilometers to feet.\n    '''\n    return km*3280.84\ndef km_to_miles(km):\n    '''\n    Write a function to convert kilometers to miles.\n    '''\n    return km/1.609\ndef mph_to_miles(mph):\n    '''\n    Write a function to convert miles per hour to miles.\n    '''\n    return mph/1.609\ndef miles_to_mph(miles):\n    '''\n    Write a function to convert miles to miles per hour.\n    '''\n    return miles*1.609\ndef mph_to_kmh(mph):\n    '''\n    Write a function to convert miles per hour to kilometers per hour.\n    '''\n    return mph*3.6\ndef mph_to_mps(mph):\n    '''\n    Write a function to convert miles per hour to meters per second.\n    '''\n    return mph*0.44704\ndef mps_to_mph(mps):\n    '''\n    Write a function to convert meters per second to miles per hour.\n    '''\n    return mps*2.23694\ndef mps_to_kmh(mps):\n    '''\n    Write a function to convert meters per second to kilometers per hour.\n    '''\n    return mps*3.6\ndef mps_to_knots(mps):\n    '''\n    Write a function to convert meters per second to knots.\n    '''\n    return mps*1.94384\ndef knots_to_mps(knots):\n    '''\n    Write a function to convert knots to meters per second.\n    '''\n    return knots*0.514444\ndef knots_to_mph(knots):\n    '''\n    Write a function to convert knots to miles per hour.\n    '''\n    return knots*0.868976\ndef knots_to_kmh(knots):\n    '''\n    Write a function to convert knots to kilometers per hour.\n    '''\n    return knots*1.94384\ndef knots_to_m_s(knots):\n    '''\n    Write a function to convert knots to meters per second.\n    '''\n    return knots*0.514444\ndef m_s_to_knots(m_s):\n    '''\n    Write a function to convert meters per second to knots.\n    '''\n    return m_s*1.94384\ndef m_s_to_mph(m_s):\n    '''\n    Write a function to convert meters per second to miles per hour.\n    '''\n    return m_s*0.44704\ndef m_s_to_kmh(m_s):\n    '''\n    Write a function to convert meters per second to kilometers per hour.\n    '''\n    return m_s*3.6\ndef m_s_to_knots(m_s):\n    '''\n    Write a function to convert meters per second to knots.\n    '''\n    return m_s*0.514444\ndef m_s_to_mps(m_s):\n    '''\n    Write a function to convert meters per second to miles per second.\n    '''\n    return m_s*0.001\ndef m_s_to_mph_s(m_s):\n    '''\n    Write a function to convert meters per second to miles per second.\n    '''\n    return m_s*0.001\ndef mph_s_to_mps(mph_s):\n    '''\n    Write a function to convert miles per second to meters per second.\n    '''\n    return mph_s*0.44704\ndef mph_s_to_kmh(mph_s):\n    '''\n    Write a function to convert miles per second to kilometers per hour.\n    '''\n    return mph_s*1.94384\ndef mph_s_to_knots(mph_s):\n    '''\n    Write a function to convert miles per second to knots.\n    '''\n    return mph_s*0.868976\ndef kmh_s_to_mps(kmh_s):\n    '''\n    Write a function to convert kilometers per second to meters per second.\n    '''\n    return kmh_s*0.001\ndef kmh_s_to_mph(kmh_s):\n    '''\n    Write a function to convert kilometers per second to miles per hour.\n    '''\n    return kmh_s*0.868976\ndef kmh_s_to_knots(kmh_s):\n    '''\n    Write a function to convert kilometers per second to knots.\n    '''\n    return kmh_s*1.94384\ndef knots_s_to_mps(knots_s):\n    '''\n    Write a function to convert knots to meters per second.\n    '''\n    return knots_s*0.514444\ndef knots_s_to_mph(knots_s):\n    '''\n    Write a function to convert knots to miles per hour.\n    '''\n    return knots_s*0.868976\ndef knots_s_to_kmh(knots_s):\n    '''\n    Write a function to convert knots to kilometers per hour.\n    '''\n    return knots_s*1.94384\ndef knots_s_to_m_s(knots_s):\n    '''\n    Write a function to convert knots to meters per second.\n    '''\n    return knots_s*0.514444\ndef knots_s_to_mph_s(knots_s):\n    '''\n    Write a function to convert knots to miles per second.\n    '''\n    return knots_s*0.868976\ndef knots_s_to_kmh_s(knots_s):\n    '''\n    Write a function to convert knots to kilometers per second.\n    '''\n    return knots_s*1.94384\ndef knots_s_to_knots(knots_s):\n    '''\n    Write a function to convert knots to knots.\n    '''\n    return knots_s\ndef kms_s_to_mps(kms_s):\n    '''\n    Write a function to convert kilometers per second to meters per second.\n    '''\n    return kms_s*1000\ndef kms_s_to_mph(kms_s):\n    '''\n    Write a function to convert kilometers per second to miles per hour.\n    '''\n    return kms_s*2.23694\ndef kms_s_to_kmh(kms_s):\n    '''\n    Write a function to convert kilometers per second to kilometers per hour.\n    '''\n    return kms_s*3.6\ndef kms_s_to_knots(kms_s):\n    '''\n    Write a function to convert kilometers per second to knots.\n    '''\n    return kms_s*1.94384\ndef kms_s_to_m_s(kms_s):\n    '''\n    Write a function to convert kilometers per second to meters per second.\n    '''\n    return kms_s*1000\ndef kms_s_to_mph_s(kms_s):\n    '''\n    Write a function to convert kilometers per second to miles per second.\n    '''\n    return kms_s*2.23694\ndef kms_s_to_kmh_s(kms_s):\n    '''\n    Write a function to convert kilometers per second to kilometers per second.\n    '''\n    return kms_s*3.6\ndef kmh_s_to_mps(kmh_s):\n    '''\n    Write a function to convert kilometers per hour to meters per second.\n    '''\n    return kmh_s*1000\nde",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    s = text\n    p = pattern\n    # Iterate over all matches\n    for match in re.finditer(p, s):\n        #print(match)\n        #print(match.start())\n        #print(match.end())\n        #print(s[match.start():match.end()])\n        return s[match.start():match.end()]\n",
        "num_ids": 89
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Remove comments from the text\n    text = re.sub(r'#.*', '', text)\n",
        "num_ids": 27
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    a = re.search(pattern, text)\n    return a.group()\n",
        "num_ids": 21
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # return pattern.search(text).group(), pattern.search(text).span()\n    return re.search(pattern, text).group(), re.search(pattern, text).span()\n",
        "num_ids": 45
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # search = re.search(pattern, text)\n    # start_index = search.start()\n    # end_index = search.end()\n    # return start_index, end_index\n",
        "num_ids": 48
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    for match in regex.finditer(text):\n        yield match.group()\n",
        "num_ids": 34
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text)\n    return result\n",
        "num_ids": 19
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text).group(), re.search(pattern, text).start(), re.search(pattern, text).end()\n",
        "num_ids": 35
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text).group(), re.search(pattern, text).start(), re.search(pattern, text).end()\n",
        "num_ids": 35
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    bell_nums = [0]\n    for x in range(1,n+1):\n        bell = bell + x\n        bell_nums.append(bell)\n    return bell_nums[n]\n",
        "num_ids": 58
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]\n    for i in range(1, n+1):\n        bell.append(i*bell[i-1])\n    return bell[n]\n",
        "num_ids": 43
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0, 1, 1] \n    for i in range(3, n+1): \n        bell.append(bell[i-1] + bell[i-2]) \n    return bell[n] \n",
        "num_ids": 56
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bells = [1]\n    for i in range(1, n + 1):\n        bells.append(bells[i - 1] + bell(i - 1))\n    return bells[n]\ndef sum_Of_digits(n):\n    '''\n    Write a python function to find sum of digits of a given number n.\n    '''\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\ndef product_Of_digits(n):\n    '''\n    Write a python function to find product of digits of a given number n.\n    '''\n    product = 1\n    while n:\n        product *= n % 10\n        n //= 10\n    return product\ndef smallest_Number(n):\n    '''\n    Write a python function to find smallest number of n digits, such that sum of digits is equal to product of digits.\n    '''\n    s = 0\n    p = 1\n    for i in range(1, n + 1):\n        s += 9 * (10 ** i - 1) * i\n        p *= i\n    return p - s\ndef prime_Number(n):\n    '''\n    Write a python function to find nth prime number.\n    '''\n    p = [2]\n    for i in range(3, n + 1):\n        flag = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                flag = False\n                break\n        if flag == True:\n            p.append(i)\n    return p[n - 1]\ndef fibonacci_Number(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    a = 0\n    b = 1\n    for i in range(2, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return a\ndef fibonacci_Sequence(n):\n    '''\n    Write a python function to return first n terms of fibonacci sequence.\n    '''\n    fib = [0]\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 1]\n    fib.append(1)\n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib\ndef fibonacci_Sequence_Iterator(n):\n    '''\n    Write a python function to return first n terms of fibonacci sequence.\n    '''\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return iter(fib)\ndef fibonacci_Sequence_Recursive(n):\n    '''\n    Write a python function to return first n terms of fibonacci sequence.\n    '''\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 1]\n    return fibonacci_Sequence_Recursive(n - 1) + fibonacci_Sequence_Recursive(n - 2)\ndef fibonacci_Sequence_Memoized(n, fibonacci_Sequence_Memoized = {1: 0, 2: 1}):\n    '''\n    Write a python function to return first n terms of fibonacci sequence.\n    '''\n    if n in fibonacci_Sequence_Memoized:\n        return fibonacci_Sequence_Memoized[n]\n    fibonacci_Sequence_Memoized[n] = fibonacci_Sequence_Memoized[n - 1] + fibonacci_Sequence_Memoized[n - 2]\n    return fibonacci_Sequence_Memoized[n]\ndef fibonacci_Sequence_Tabulation(n):\n    '''\n    Write a python function to return first n terms of fibonacci sequence.\n    '''\n    fibonacci_Sequence_Tabulation = [0, 1]\n    for i in range(2, n):\n        fibonacci_Sequence_Tabulation.append(fibonacci_Sequence_Tabulation[i - 1] + fibonacci_Sequence_Tabulation[i - 2])\n    return fibonacci_Sequence_Tabulation\ndef fibonacci_Sequence_BottomUp(n):\n    '''\n    Write a python function to return first n terms of fibonacci sequence.\n    '''\n    fibonacci_Sequence_BottomUp = [0, 1]\n    for i in range(2, n):\n        fibonacci_Sequence_BottomUp.append(fibonacci_Sequence_BottomUp[i - 1] + fibonacci_Sequence_BottomUp[i - 2])\n    return fibonacci_Sequence_BottomUp\ndef catalan_Number(n):\n    '''\n    Write a python function to find nth catalan number.\n    '''\n    c = 1\n    for i in range(2, n + 1):\n        c *= (2 * i) - 1\n    return c\ndef harmonic_Number(n):\n    '''\n    Write a python function to find nth harmonic number.\n    '''\n    h = 0\n    for i in range(1, n + 1):\n        h += 1 / i\n    return h\ndef harmonic_Number_Efficient(n):\n    '''\n    Write a python function to find nth harmonic number.\n    '''\n    return sum(1 / i for i in range(1, n + 1))\ndef nth_Root_Of_Number(n, root):\n    '''\n    Write a python function to find nth root of a number.\n    '''\n    return n ** (1 / root)\ndef nth_Root_Of_Number_Efficient(n, root):\n    '''\n    Write a python function to find nth root of a number.\n    '''\n    root = int(root)\n    if root == 1:\n        return n\n    return n * nth_Root_Of_Number_Efficient(n, root - 1)\ndef fibonacci_Number_Sum_Of_Digits(n):\n    '''\n    Write a python function to find sum of digits of a fibonacci number.\n    '''\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return sum_Of_digits(fib[n - 1])\ndef fibonacci_Number_Product_Of_Digits(n):\n    '''\n    Write a python function to find product of digits of a fibonacci number.\n    '''\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return product_Of_digits(fib[n - 1])\ndef count_Vowels(s):\n    '''\n    Write a python function to find number of vowels present in a string.\n    '''\n    return len([i for i in list(s) if i in 'aeiou'])\ndef count_Vowels_Efficient(s):\n    '''\n    Write a python function to find number of vowels present in a string.\n    '''\n    return len([i for i in s if i in 'aeiou'])\ndef count_Vowels_Efficient_2(s):\n    '''\n    Write a python function to find number of vowels present in a string.\n    '''\n    count = 0\n    for i in s:\n        if i in 'aeiou':\n            count += 1\n    return count\ndef count_Consonants(s):\n    '''\n    Write a python function to find number of consonants present in a string.\n    '''\n    return len([i for i in list(s) if i in 'bcdfghjklmnpqrstvwxyz'])\ndef count_Consonants_Efficient(s):\n    '''\n    Write a python function to find number of consonants present in a string.\n    '''\n    return len([i for i in s if i in 'bcdfghjklmnpqrstvwxyz'])\ndef count_Consonants_Efficient_2(s):\n    '",
        "num_ids": 49
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Bell number is sum of (n-1)th bell number.\n    if (n == 0 or n == 1):\n        return 1\n",
        "num_ids": 35
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def bell_n(n):\n        bell = [0 for _ in range(n+1)]\n        bell[0] = bell[1] = 1\n        for i in range(2, n+1):\n            bell[i] = bell[i-1] + bell[i-2]\n        return bell[n]\n    return bell_n(n)\n",
        "num_ids": 88
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_n = 0\n    bell_n = bell_n + 1\n    for i in range(n - 1):\n        bell_n = bell_n + bell_n + 1\n    return bell_n",
        "num_ids": 51
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    b_num = [0, 1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 646321, 390572, 2239175, 12321603, 6473917, 387420489]\n    if n < len(b_num):\n        return b_num[n]\n    else:\n        for i in range(len(b_num), n + 1):\n            num = b_num[i - 1] + b_num[i - 5]\n            b_num.append(num)\n        return b_num[n]\n    \nif __name__ == '__main__':\n    n = int(input(\"Enter a number : \"))\n    result = bell_Number(n)\n    print(\"bell number for n =\",n,\"is :\",result)",
        "num_ids": 198
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return bell_Number(n - 1) + bell_Number(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_array = [0]*(n+1)\n    bell_array[0] = bell_array[1] = 1\n    for i in range(2, n+1):\n        bell_array[i] = bell_array[i-1] + bell_array[i-2]\n    return bell_array[n]\n",
        "num_ids": 82
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1.copy()\n    list2.pop(L)\n    return list2\n",
        "num_ids": 26
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    del list1[L]\n    return list1\n",
        "num_ids": 15
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = list1.copy()\n    new_list.pop(L)\n    return new_list\n",
        "num_ids": 29
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # write your code here\n    list1.pop(L)\n    return list1\n",
        "num_ids": 23
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L):\n        del list1[L]\n    return list1\n",
        "num_ids": 24
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    index = L\n    length = len(list1)\n",
        "num_ids": 16
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list(set(list1)-{list1[L]})\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L < 1:\n        return []\n    elif L == 1:\n        return [list1[1]] + remove_kth_element(list1[1:], L)\n    else:\n        return [list1[0]] + remove_kth_element(list1[1:], L - 1)\n",
        "num_ids": 77
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for x in list1:\n        list2.append(x)\n    list2.pop(L)\n    return list2\n    \ndef calculate_mean(list1):\n    '''\n    Write a python function which takes a list and returns the mean of the elements. \n    '''\n    total = 0\n    for x in list1:\n        total += x\n    mean = total/len(list1)\n    return mean\n    \ndef median(list1):\n    '''\n    Write a python function which takes a list and returns the median of the elements. \n    '''\n    list1.sort()\n    if len(list1) % 2 == 0:\n        return (list1[len(list1)//2] + list1[(len(list1)//2) - 1])/2\n    else:\n        return list1[(len(list1)//2)]\n",
        "num_ids": 74
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == L:\n            list1.pop(i)\n    return list1\n",
        "num_ids": 40
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    test_list_of_lists = list(zip(*test_list))\n    max_of_column = [max(list) for list in test_list_of_lists[:N]]\n    return max_of_column\n",
        "num_ids": 55
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 1:\n        return test_list[0][N-1]\n    else:\n        return max(test_list[i][N-1] for i in range(len(test_list)))\n",
        "num_ids": 57
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n",
        "num_ids": 18
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list):\n        return 'N must be less than the length of the list'\n    else:\n        return max([float(row[N]) for row in test_list])\n",
        "num_ids": 50
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = test_list[0][N]\n    for l in range(0,len(test_list)):\n        if test_list[l][N] > max:\n            max = test_list[l][N]\n    return max\n",
        "num_ids": 60
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N-1] for row in test_list])\n    \ndef binary_search_left(l, x):\n    '''\n    Given a list l and a value x, find the index of the value x in the list if it is present in the list and return the index.\n    '''\n    low = 0\n    high = len(l) - 1\n    while low <= high:\n        mid = int((low + high)/2)\n        if l[mid] == x:\n            if mid == 0 or l[mid - 1] < x:\n                return mid\n            high = mid - 1\n        elif l[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n",
        "num_ids": 107
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([element[N-1] for element in test_list])\n",
        "num_ids": 20
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n",
        "num_ids": 18
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([x[N-1] for x in test_list])\n",
        "num_ids": 20
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n",
        "num_ids": 18
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for l in lst:\n        res.append(l[0])\n        res.append(l[1])\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append([i[0],i[1]])\n    return new_lst\n",
        "num_ids": 43
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst)==1:\n        return [lst[0][0],lst[0][1]]\n    else:\n        return [merge(lst[:len(lst)//2]),merge(lst[len(lst)//2:])]\n",
        "num_ids": 70
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for x in lst:\n        res.append([x[0], x[1]])\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[i][0])\n        new_lst.append(lst[i][1])\n    return new_lst\n    \n",
        "num_ids": 64
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if lst == []:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return [[lst[0][0],lst[1][0]],[lst[0][1],lst[1][1]]]\n    return merge(lst[0:len(lst)//2]) + merge(lst[len(lst)//2:])\n",
        "num_ids": 108
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1=[]\n    for i in range(0,len(lst)):\n        lst1.append(lst[i][0])\n    lst2=[]\n    for i in range(0,len(lst)):\n        lst2.append(lst[i][1])\n    return(lst1,lst2)\n",
        "num_ids": 88
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[e[0] for e in lst],[e[1] for e in lst]]\n",
        "num_ids": 26
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n",
        "num_ids": 31
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # print(lst)\n    # return lst[::2], lst[1::2]\n    \n    # method 1\n    # import itertools\n    # return list(itertools.chain.from_iterable(lst))\n    \n    # method 2\n    return [lst[i] for i in range(len(lst)) if i%2==0] + [lst[i] for i in range(len(lst)) if i%2==1]\n    \n",
        "num_ids": 120
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    print(\"Cummulative sum is:\", sum(test_list))\n    #cumulative_sum = 0\n    #for each_tuple in test_list:\n    #    cumulative_sum += each_tuple\n    #print(cumulative_sum)\n",
        "num_ids": 64
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum = cumulative_sum + i\n    return cumulative_sum\n",
        "num_ids": 37
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum = total_sum + i\n        return total_sum\n",
        "num_ids": 35
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    tuple_list = []\n    count = 0\n    for x in test_list:\n        if isinstance(x, tuple):\n            tuple_list.append(x)\n            for num in x:\n                count += num\n        else:\n            count += x\n    return count, tuple_list\n",
        "num_ids": 74
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_list = []\n    for num in range(len(test_list)):\n        cummulative_sum = 0\n        for i in range(num+1):\n            cummulative_sum += test_list[i]\n        cummulative_list.append(cummulative_sum)\n    return cummulative_list\n",
        "num_ids": 83
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return list(itertools.accumulate(test_list, lambda x,y: x+y))\n",
        "num_ids": 28
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum_list=[]\n    cummulative_sum=0\n    for x in test_list:\n        cummulative_sum+=x\n        cummulative_sum_list.append(cummulative_sum)\n    return cummulative_sum_list\n        \ntest_list=[1,2,3,4,5,6]\n",
        "num_ids": 87
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum=0\n    for i in test_list:\n        total_sum+=i\n    return total_sum\n",
        "num_ids": 31
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return list(np.cumsum(test_list))\n",
        "num_ids": 17
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_list[i+1] if test_list[i] >= test_list[i+1] else test_list[i]\n    print(test_list)\n",
        "num_ids": 71
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    t = 0\n    for i in range(0, len(nums)):\n        for j in range(0, len(nums[i])):\n            t += nums[i][j]\n    avg = t / (len(nums) * len(nums[0]))\n    return avg\n",
        "num_ids": 78
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    list = []\n    for i in nums:\n        sum = 0\n        for j in i:\n            sum = sum + j\n        list.append(sum / len(i))\n    return list\n",
        "num_ids": 50
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avgs = []\n    for tup in nums:\n        avgs.append(sum(tup) / len(tup))\n    return avgs\n",
        "num_ids": 40
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(nums[i]) / len(nums[i]) for i in range(len(nums))]\n",
        "num_ids": 32
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # https://github.com/eunki7/Python-Programs/blob/master/tuple_average.py\n    average_list = []\n    for t in nums:\n        average_list.append(sum(t) / len(t))\n    return average_list\n",
        "num_ids": 70
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(tup)/len(tup) for tup in nums]\n",
        "num_ids": 23
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(len(nums[i])):\n            sum += nums[i][j]\n        result.append(sum / len(nums[i]))\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for num in nums:\n        sum = sum + num[0]\n    return sum/len(nums)\n",
        "num_ids": 35
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    for n in nums:\n        total = total + n[0]\n    return total / len(nums)\n",
        "num_ids": 35
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i]%test_tup2[i],)\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # test_tup1 = (9, 6, 5)\n    # test_tup2 = (1, 2, 3)\n    # test_tup3 = (9, 3, 2, 4, 1)\n    # test_tup4 = (9, 3, -2, 4, 1)\n    tup_mod = tuple(i % j for i, j in zip(test_tup1, test_tup2))\n    return tup_mod\n",
        "num_ids": 113
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tuple = []\n    for x,y in zip(test_tup1, test_tup2):\n        result_tuple.append(x % y)\n    return tuple(result_tuple)\n",
        "num_ids": 54
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([e1 % e2 for e1, e2 in zip(test_tup1, test_tup2)])\n",
        "num_ids": 34
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(el1 % el2 for el1, el2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #tuple_modulo((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (3, 4, 5, 6, 7, 8, 9, 10))\n",
        "num_ids": 48
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    try:\n        assert len(test_tup1) == len(test_tup2)\n    except AssertionError:\n        print(\"Your tuple does not have the same length.\\n\")\n        return\n",
        "num_ids": 53
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    y = 0\n    for i in range(steps):\n        if (d - y) <= i:\n            jumps += 1\n            y = i\n        elif d - y > i:\n            y = d - i\n            jumps += 1\n    print(jumps)\n    \ndef min_Jumps_DP(steps, d): \n    '''\n    Dynamic programming solution\n    '''\n    jumps = [[0 for _ in range(d + 1)] for _ in range(steps + 1)]\n    for i in range(1, steps + 1):\n        for j in range(1, d + 1):\n            if i == 1:\n                jumps[i][j] = 1\n                continue\n            if j == 1:\n                jumps[i][j] = 1\n                continue\n            if i >= j:\n                jumps[i][j] = jumps[i - 1][j]\n                continue\n            if i < j:\n                jumps[i][j] = jumps[i - 1][j - 1] + 1\n    print(jumps)\n    print(jumps[steps][d])\n    \ndef min_Jumps_DP_Opt(steps, d): \n    '''\n    Dynamic programming solution, optimized\n    '''\n    jumps = [[0 for _ in range(d + 1)] for _ in range(steps + 1)]\n    jumps[0][0] = 1\n    jumps[1][0] = 1\n    for i in range(2, steps + 1):\n        for j in range(1, d + 1):\n            if i >= j:\n                jumps[i][j] = jumps[i - 1][j] + 1\n            if i < j:\n                jumps[i][j] = jumps[i - 1][j - 1] + 1\n    print(jumps)\n    print(jumps[steps][d])\n    \n    \ndef min_Jumps_DP_Opt2(steps, d): \n    '''\n    Dynamic programming solution, optimized\n    '''\n    jumps = [0 for _ in range(d + 1)]\n    jumps[0] = 1\n    jumps[1] = 1\n    for i in range(2, steps + 1):\n        for j in range(1, d + 1):\n            if i >= j:\n                jumps[j] = jumps[j] + 1\n            if i < j:\n                jumps[j] = jumps[j - 1] + 1\n    print(jumps)\n    print(jumps[d])\n    \ndef min_Jumps_DP_Opt2_Fixed(steps, d): \n    '''\n    Dynamic programming solution, optimized\n    '''\n    jumps = [0 for _ in range(d + 1)]\n    jumps[0] = 1\n    jumps[1] = 1\n    for i in range(2, steps + 1):\n        jumps[i] = jumps[i - 1] + 1\n        for j in range(1, d + 1):\n            if i >= j:\n                jumps[j] = min(jumps[j], jumps[j] + 1)\n            if i < j:\n                jumps[j] = min(jumps[j], jumps[j - 1] + 1)\n    print(jumps)\n    print(jumps[d])\n    \ndef min_Jumps_DP_Opt3(steps, d): \n    '''\n    Dynamic programming solution, optimized\n    '''\n    jumps = [0 for _ in range(d + 1)]\n    jumps[0] = 1\n    jumps[1] = 1\n    for i in range(2, steps + 1):\n        for j in range(1, d + 1):\n            if i >= j:\n                jumps[j] = min(jumps[j], jumps[j] + 1)\n            if i < j:\n                jumps[j] = min(jumps[j], jumps[j - 1] + 1)\n    print(jumps)\n    print(jumps[d])\n    \ndef min_Jumps_DP_Opt4(steps, d): \n    '''\n    Dynamic programming solution\n    '''\n    jumps = [[0 for _ in range(d + 1)] for _ in range(steps + 1)]\n    jumps[0][0] = 1\n    jumps[1][0] = 1\n    for i in range(2, steps + 1):\n        for j in range(1, d + 1):\n            if i >= j:\n                jumps[i][j] = jumps[i - 1][j] + 1\n            if i < j:\n                jumps[i][j] = jumps[i - 1][j - 1] + 1\n    print(jumps)\n    print(jumps[steps][d])\n    \ndef min_Jumps_DP_Opt5(steps, d): \n    '''\n    Dynamic programming solution\n    '''\n    jumps = [[0 for _ in range(d + 1)] for _ in range(steps + 1)]\n    for i in range(1, steps + 1):\n        for j in range(1, d + 1):\n            if i >= j:\n                jumps[i][j] = jumps[i - 1][j] + 1\n            if i < j:\n                jumps[i][j] = jumps[i - 1][j - 1] + 1\n    print(jumps)\n    print(jumps[steps][d])\n    \n    \ndef min_Jumps_DP_Opt6(steps, d): \n    '''\n    Dynamic programming solution\n    '''\n    jumps = [[0 for _ in range(d + 1)] for _ in range(steps + 1)]\n    for i in range(1, steps + 1):\n        for j in range(1, d + 1):\n            if i == 1:\n                jumps[i][j] = 1\n                continue\n            if j == 1:\n                jumps[i][j] = 1\n                continue\n            if i >= j:\n                jumps[i][j] = jumps[i - 1][j] + 1\n            if i < j:\n                jumps[i][j] = jumps[i - 1][j - 1] + 1\n    print(jumps)\n    print(jumps[steps][d])\n    \ndef min_Jumps_DP_Opt7(steps, d): \n    '''\n    Dynamic programming solution\n    '''\n    jumps = [[0 for _ in range(d + 1)] for _ in range(steps + 1)]\n    for i in range(1, steps + 1):\n        for j in range(1, d + 1):\n            if i >= j:\n                jumps[i][j] = jumps[i - 1][j] + 1\n            if i < j:\n                jumps[i][j] = jumps[i - 1][j - 1] + 1\n    print(jumps)\n    print(jumps[steps][d])\n    \ndef min_Jumps_DP_Opt8(steps, d): \n    '''\n    Dynamic programming solution\n    '''\n    jumps = [[0 for _ in range(d + 1)] for _ in range(steps + 1)]\n    for i in range(1, steps + 1):\n        for j in range(1, d + 1):\n            if i == 1:\n                jumps[i][j] = 1\n                continue\n            if j == 1:\n                jumps[i][j] = 1\n                continue\n            if i >= j:\n                jumps[i][j] = jumps[i - 1][j] + 1\n            if i < j:\n                jumps[i][j] = jumps[i - 1][j - 1] + 1\n    print(jumps)\n    print(jumps[steps][d])\n    \ndef min_Jumps_DP_Opt9(steps, d): \n    '''\n    Dynamic programming solution\n    '''\n    jumps = [[0 for _ in range(d + 1)] for _ in range(steps + 1)]\n    for i in range(1, steps + 1):\n        for j in range(1, d + 1):\n            if i >= j:\n                jumps[i][j] = jumps[i - 1][j] + 1\n            if i < j:\n                jumps[i][j] = jumps[i - 1][j - 1] ",
        "num_ids": 107
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 1\n    if steps == 0:\n        return 0\n    if steps < 0:\n        return float('inf')\n    steps_to_origin = min_Jumps(steps - 1, d)\n    steps_to_curr = float('inf')\n    if steps > d:\n        steps_to_curr = min_Jumps(steps - d, d)\n    return 1 + min(steps_to_origin, steps_to_curr)\n",
        "num_ids": 117
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x, y = 0, 0\n    result = 0\n    for i in steps:\n        if i == 'R':\n            x = x+1\n        if i == 'L':\n            x = x-1\n        if i == 'U':\n            y = y+1\n        if i == 'D':\n            y = y-1\n        if x == d and y == 0:\n            break\n        result = result+1\n    return result\n",
        "num_ids": 108
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 0\n    elif d < 0: \n        return float('inf')\n    else: \n        if d == steps: \n            return 1\n        elif d > steps: \n            return float('inf')\n        else: \n            return min_Jumps(steps, d+1) + min_Jumps(steps, d+2)\n    \ndef min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 0\n    elif d < 0: \n        return float('inf')\n    else: \n        if d == steps: \n            return 1\n        elif d > steps: \n            return float('inf')\n        else: \n            return min_Jumps(steps, d+1) + min_Jumps(steps, d+2)\n",
        "num_ids": 94
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    return steps // d if steps % d == 0 else steps // d + 1\n",
        "num_ids": 31
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (d==0):\n        return 0\n    if (steps == 0):\n        return float(\"inf\")\n    if (d==steps):\n        return 1\n    if (d>steps):\n        return float(\"inf\")\n    minJumps = float(\"inf\")\n    for i in range(1,steps+1):\n        minJumps = min(minJumps,min_Jumps(steps-i,d-i)+1)\n    return minJumps\n",
        "num_ids": 112
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_step = steps\n    while (current_step > 0):\n        current_step -= d\n        jumps += 1\n    return jumps\nprint(min_Jumps(20, 10))\n",
        "num_ids": 54
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    i = 0\n    while (d > steps[i]):\n        d -= steps[i]\n        i += 1\n    return i+1\n",
        "num_ids": 37
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (d == 0):\n        return 0\n    if (d == steps):\n        return 1\n    return min_Jumps(steps - 1, d - 1) + min_Jumps(steps - 2, d - 2)\n",
        "num_ids": 56
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # 1 2 3 4\n    # 1 2 3 4\n    # 1 2 3 4\n    # 1 2 3 4\n    # 1 2 3 4\n    # 1 2 3 4\n    # 1 2 3 4\n    # 1 2 3 4\n",
        "num_ids": 58
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1 = nums1[:]\n    nums2 = nums2[:]\n    result = []\n    while(nums1!= [] and nums2!= []):\n        result.append(nums1.pop(0)//nums2.pop(0))\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    result = []\n    \n    for i in range(0,len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    \n    return result\n    \n",
        "num_ids": 54
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if not isinstance(nums1,list) or not isinstance(nums2,list):\n        return 0\n    elif len(nums1)!= len(nums2):\n        return 0\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n        return result\n        \ndef mul_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    if not isinstance(nums1,list) or not isinstance(nums2,list):\n        return 0\n    elif len(nums1)!= len(nums2):\n        return 0\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]*nums2[i])\n        return result\n",
        "num_ids": 97
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return False\n    else:\n        for i in range(len(nums1)):\n            if nums1[i] % nums2[i]!= 0:\n                return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = [0]*len(nums1)\n    for i in range(len(nums1)):\n        result[i] = nums1[i]/nums2[i]\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # print(nums1)\n    # print(nums2)\n    # print(nums1/nums2)\n    return nums1/nums2",
        "num_ids": 42
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    if len(nums1)!= len(nums2):\n        raise Exception('Lists of unequal length.')\n        return\n    \n    for i in range(len(nums1)):\n        nums1[i] /= nums2[i]\n    \n    return nums1\n",
        "num_ids": 75
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [i/j for i,j in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for num1,num2 in zip(nums1,nums2):\n        div_list.append(num1/num2)\n    return div_list\n",
        "num_ids": 48
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\nprint(div_list([2,6,18],[3,6,18]))\n",
        "num_ids": 64
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            new_str += i\n    return new_str\n",
        "num_ids": 40
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # reg_exp = '[0-9]+'\n    # res = re.findall(reg_exp, test_str)\n    # return res, test_str.replace(''.join(res), '')\n",
        "num_ids": 52
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_string = ''\n    for word in test_str.split():\n        if word.isdigit():\n            new_string += word\n    return new_string\n",
        "num_ids": 42
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    output_str = ''\n    for i in test_str:\n        if not i.isdigit():\n            output_str += i\n        else:\n            continue\n    return output_str\n    # return test_str.rstrip('1234567890')\n",
        "num_ids": 64
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums_only = []\n    nums_only2 = []\n    nums_only3 = []\n    nums_only4 = []\n",
        "num_ids": 37
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    list_to_str = ''.join(char for char in test_str if not char.isdigit())\n    num_list = [char for char in list_to_str if char.isdigit()]\n    num_str = ''.join(num_list)\n    num_str = int(num_str)\n    return list_to_str + num_str * num_str\n",
        "num_ids": 95
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isdigit()]) + ''.join([i for i in test_str if i.isdigit()])\n",
        "num_ids": 45
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # check if test_str is a string\n    if not isinstance(test_str, str):\n        raise TypeError('Only strings are allowed')\n    \n    # check if string is empty\n    if test_str == '':\n        raise ValueError('Empty strings are not allowed')\n        \n    # get the numbers from test_str\n    num_lst = []\n    for i in test_str:\n        if i.isdigit():\n            num_lst.append(i)\n            \n    # create a new list which includes all characters except the numbers\n    new_lst = []\n    for i in test_str:\n        if not i.isdigit():\n            new_lst.append(i)\n            \n    # check if num_lst is empty\n    if num_lst == []:\n        return test_str\n    \n    # if num_lst is not empty, join them together with a space and return the new string\n    return ''.join(new_lst) +''.join(num_lst)\n    \n    \ndef sum_lst(test_lst):\n    '''\n    Write a function which takes a list of numbers and returns the sum of the list.\n    '''\n    # check if test_lst is a list\n    if not isinstance(test_lst, list):\n        raise TypeError('Only lists are allowed')\n    \n    # check if test_lst is empty\n    if test_lst == []:\n        raise ValueError('Empty lists are not allowed')\n    \n    # create a list which contains every element of test_lst\n    sum_lst = []\n    for i in test_lst:\n        sum_lst.append(i)\n    \n    # return the sum of all the elements of the list\n    return sum(sum_lst)\n    \n    \ndef sum_lst_rec(test_lst, num=0):\n    '''\n    Write a function which takes a list of numbers and returns the sum of the list.\n    '''\n    # check if test_lst is a list\n    if not isinstance(test_lst, list):\n        raise TypeError('Only lists are allowed')\n    \n    # check if test_lst is empty\n    if test_lst == []:\n        raise ValueError('Empty lists are not allowed')\n    \n    # if list is not empty, add the first element to the variable num, then remove the first element of test_lst\n    # and append the result of sum_lst_rec(test_lst) to the variable num\n    # return the variable num\n    return num + sum_lst_rec(test_lst[1:], num + test_lst[0])\n    \n    \ndef cat_lst(test_lst, test_str):\n    '''\n    Write a function which takes a list of strings and a string and concatenates the elements of the list to the string.\n    '''\n    # check if test_lst is a list\n    if not isinstance(test_lst, list):\n        raise TypeError('Only lists are allowed')\n    \n    # check if test_lst is empty\n    if test_lst == []:\n        raise ValueError('Empty lists are not allowed')\n    \n    # if test_str is not a string, raise an error\n    if not isinstance(test_str, str):\n        raise TypeError('Only strings are allowed')\n    \n    # create a new list which contains all elements of the list except the first\n    cat_lst = test_lst[1:]\n    \n    # if cat_lst is empty, return test_str\n    if cat_lst == []:\n        return test_str\n    \n    # if cat_lst is not empty, return test_str +'' + cat_lst[0]\n    return test_str +'' + cat_lst[0]\n    \n    \ndef reverse_lst(test_lst):\n    '''\n    Write a function which takes a list of strings and reverses it.\n    '''\n    # check if test_lst is a list\n    if not isinstance(test_lst, list):\n        raise TypeError('Only lists are allowed')\n    \n    # check if test_lst is empty\n    if test_lst == []:\n        raise ValueError('Empty lists are not allowed')\n    \n    # create a new list which contains all elements of the list except the first\n    reverse_lst = test_lst[1:]\n    \n    # if reverse_lst is empty, return test_lst\n    if reverse_lst == []:\n        return test_lst\n    \n    # if reverse_lst is not empty, return test_lst[0] + reverse_lst\n    return test_lst[0] + reverse_lst\n    \n    \ndef reverse_lst_rec(test_lst, reversed_lst=[]):\n    '''\n    Write a function which takes a list of strings and reverses it.\n    '''\n    # check if test_lst is a list\n    if not isinstance(test_lst, list):\n        raise TypeError('Only lists are allowed')\n    \n    # check if test_lst is empty\n    if test_lst == []:\n        raise ValueError('Empty lists are not allowed')\n    \n    # if reversed_lst is empty, create an empty list which contains all elements of the list except the first\n    if reversed_lst == []:\n        reversed_lst = test_lst[1:]\n    \n    # if reversed_lst is not empty, return reversed_lst[0] + reverse_lst_rec(test_lst, reversed_lst[1:])\n    return reversed_lst[0] + reverse_lst_rec(test_lst, reversed_lst[1:])\n    \n    \ndef leng_lst(test_lst):\n    '''\n    Write a function which takes a list of strings and returns the length of the longest one.\n    '''\n    # check if test_lst is a list\n    if not isinstance(test_lst, list):\n        raise TypeError('Only lists are allowed')\n    \n    # check if test_lst is empty\n    if test_lst == []:\n        raise ValueError('Empty lists are not allowed')\n    \n    # create a new list which contains all elements of the list except the first\n    leng_lst = test_lst[1:]\n    \n    # if leng_lst is empty, return 0\n    if leng_lst == []:\n        return 0\n    \n    # if leng_lst is not empty, return the length of the longest element of leng_lst\n    return max(len(test_lst[0]), leng_lst[0])\n    \n    \ndef leng_lst_rec(test_lst, leng_lst=0):\n    '''\n    Write a function which takes a list of strings and returns the length of the longest one.\n    '''\n    # check if test_lst is a list\n    if not isinstance(test_lst, list):\n        raise TypeError('Only lists are allowed')\n    \n    # check if test_lst is empty\n    if test_lst == []:\n        raise ValueError('Empty lists are not allowed')\n    \n    # if leng_lst is empty, create an empty list which contains all elements of the list except the first\n    if leng_lst == 0:\n        leng_lst = test_lst[1:]\n    \n    # if leng_lst is not empty, return leng_lst[0] + leng_lst_rec(test_lst, leng_lst[1:])\n    return leng_lst + leng_lst_rec(test_lst, leng_lst[1:])\n    \n    \ndef count_lst(test_lst, test_str):\n    '''\n    Write a function which takes a list of strings and a string and returns the number of times the string appears in the list.\n    '''\n    # check if test_lst is a list\n    if not isinstance(test_lst, list):\n        raise TypeError('Only lists are allowed')\n    \n    # check if test_lst is empty\n    if test_lst == []:\n        raise ValueError('Empty lists are not allowed')\n    \n    # check if test_str is a string\n    if not isinstance",
        "num_ids": 92
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    letters = []\n    result_str = ''\n    for item in test_str:\n        if item.isdigit():\n            nums.append(item)\n        else:\n            letters.append(item)\n    result_str = ''.join(letters) + ''.join(nums)\n    return result_str\n",
        "num_ids": 85
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s=''\n    n=0\n    for i in test_str:\n        if i in '0123456789':\n            s+=test_str[n]\n            n+=1\n        else:\n            n+=1\n    print(s+test_str[n:])\n",
        "num_ids": 70
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def smallest_number(a, k):\n        # print(a, k)\n        if k == 1:\n            return -1, -1\n        if k == 0:\n            return -1, a[0]\n        if len(a) < k:\n            return -1, -1\n        max_i, max_j = k-1, len(a) - 1\n        i, j, curr_s = 0, 0, 0\n        while j <= max_j:\n            curr_s = curr_s + a[j]\n            j += 1\n            while curr_s >= k:\n                curr_s = curr_s - a[i]\n                i += 1\n            max_i, max_j = i, j-1\n        return max_i, max_j\n",
        "num_ids": 194
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return find_max_subset(a, 0, len(a), {})\n",
        "num_ids": 22
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = [int(i) for i in a]\n    a.sort()\n    max_length = 1\n    # i = 0\n    for i in range(0, len(a)):\n        if (i == 0):\n            length = 1\n            prev = a[i]\n            continue\n        if ((a[i] - prev) % 2 == 0):\n            length += 1\n            prev = a[i]\n        else:\n            if (length > max_length):\n                max_length = length\n                start = prev\n            length = 1\n            prev = a[i]\n",
        "num_ids": 141
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_sum = 0\n    sum_divisor = 1\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i]%a[j] == 0:\n                sum_divisor = sum_divisor + 1\n                max_sum = max_sum + 1\n    return max_sum\n",
        "num_ids": 93
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # result = 0\n    # for i in range(len(a)):\n    #     x = largest_subset_of_subsets(a[:i] + a[i+1:])\n    #     if x > result:\n    #         result = x\n",
        "num_ids": 66
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    x = len(a)\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    elif x == 2:\n        if a[0] % a[1] == 0 or a[1] % a[0] == 0:\n            return 2\n        else:\n            return 1\n    else:\n        divisors = [1]\n        for i in range(2, int(a[0] ** 0.5) + 1):\n            if a[0] % i == 0:\n                divisors.append(i)\n        for i in range(len(divisors)):\n            for j in range(i, len(divisors)):\n                for k in range(j, len(divisors)):\n                    if divisors[i] * divisors[j] * divisors[k] == a[0]:\n                        return 3\n    return -1\n",
        "num_ids": 220
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def is_divisible(a):\n        '''\n        Auxiliary function to determine if the pair is divisible.\n        '''\n        if a[0] % a[1] == 0:\n            return True\n        return False\n    def largest_subset(a):\n        '''\n        Function to determine the largest subset of a list of numbers so that every pair is divisible.\n        '''\n        if len(a) == 2:\n            return is_divisible(a)\n        else:\n            if is_divisible(a[0:2]):\n                return 1 + largest_subset(a[2:])\n            else:\n                return largest_subset(a[1:])\n    a.sort(reverse=True)\n    return largest_subset(a)\n",
        "num_ids": 93
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    max_size = 0\n    for i in range(1, 1 << n):\n        count = 0\n        for j in range(n):\n            if i & (1 << j):\n                count += 1\n                if count > n / 2:\n                    break\n        if count == n / 2:\n            arr = []\n            for k in range(n):\n                if i & (1 << k):\n                    arr.append(a[k])\n            max_size = max(max_size, len(arr))\n    return max_size\n",
        "num_ids": 136
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return find_largest_subset_size(a, 0)\n",
        "num_ids": 18
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return subset_sum(a, sum(a)//2)\n",
        "num_ids": 18
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = 0\n    if n == 1:\n        median = arr1[0]\n    else:\n        # find the median\n        if (arr1[n//2] < arr2[n//2]):\n            median = arr2[n//2]\n        else:\n            median = arr1[n//2]\n    return median\n",
        "num_ids": 87
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Assumptions:\n    # A is the smaller list.\n    # lists have equal length.\n    # lists are sorted.\n    # Assume no duplicates in either list.\n",
        "num_ids": 45
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    mid = n//2\n    if n == 1:\n        return min(arr1[0], arr2[0])\n",
        "num_ids": 31
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Append the arrays to an empty list\n    arr = []\n    # Iterate through the arrays and add them to the list\n    for i in range(n):\n        arr.append(arr1[i])\n        arr.append(arr2[i])\n    \n    # Sort the list and find the middle index\n    arr.sort()\n    return arr[n//2]\n",
        "num_ids": 91
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    else:\n        median = (n//2) + (n%2)\n        median_idx = median - 1\n        if (arr1[median_idx] > arr2[median_idx]):\n            return get_median(arr1, arr2[median_idx+1:], median)\n        else:\n            return get_median(arr1[median_idx+1:], arr2, median)\n",
        "num_ids": 133
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n <= 1:\n        return\n",
        "num_ids": 12
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i,j=0,0\n    a1,a2=0,0\n    temp=[]\n",
        "num_ids": 27
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j = 0, 0\n    m1, m2 = 0, 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            m1 = i\n            m2 = j\n            i += 1\n        elif arr1[i] > arr2[j]:\n            m1 = i\n            m2 = j\n            j += 1\n        else:\n            i += 1\n            j += 1\n    if (n%2 == 0):\n        return ((arr1[m1] + arr2[m2])/2)\n    else:\n        return (arr1[m1])\n",
        "num_ids": 154
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # if n == 0:\n    #     raise Exception(\"Incorrect Input\")\n    arr_new = arr1+arr2\n    arr_new.sort()\n    # print(arr_new)\n    if n % 2 == 0:\n        return (arr_new[int(n/2)-1]+arr_new[int(n/2)])/2\n    else:\n        return arr_new[int(n/2)]\n",
        "num_ids": 104
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return list(map(lambda x:x**n,nums))\nnums=[1,2,3,4,5]\nn=2\nprint(nth_nums(nums,n))\n",
        "num_ids": 51
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums_power = []\n    for i in nums:\n        nums_power.append(i**n)\n    return nums_power\n",
        "num_ids": 38
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\nprint(nth_nums([1, 2, 3, 4], 2))\n",
        "num_ids": 34
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(n):\n        for j in range(len(nums)):\n            nums[j] = nums[j] ** n\n    return nums\n",
        "num_ids": 44
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\nnums = [1,2,3,4]\nn = 3\nprint(nth_nums(nums,n)",
        "num_ids": 65
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = [x ** n for x in nums]\n    return result\n",
        "num_ids": 20
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    num_power = []\n    for num in nums:\n        num_power.append(num**n)\n    return num_power\n",
        "num_ids": 35
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not isinstance(string, str):\n        return False\n    string_to_upper = string.upper()\n    if string == string_to_upper:\n        return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for i in range(len(string)):\n        if i==0:\n            if string[i].isupper():\n                upper_case=string[i].upper()\n                return upper_case\n        else:\n            if string[i].isupper():\n                upper_case=upper_case+string[i].upper()\n                return upper_case\n",
        "num_ids": 85
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    #if it is none type\n    if string == None:\n        print(\"string is empty\")\n    # if it is a string\n    if type(string)!= str:\n        print(\"not string\")\n    else:\n        print(string.upper())\n    \nis_upper(\"\")\nis_upper(\"\")\nis_upper(\"\")\n",
        "num_ids": 82
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    #pass\n",
        "num_ids": 13
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \ndef reverse_string(string):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return string[::-1]\n",
        "num_ids": 11
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    print('is_upper: ',string.upper())\n",
        "num_ids": 15
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    lenght = len(newList)\n    if lenght < 2:\n        return\n    newList[0], newList[lenght-1] = newList[lenght-1], newList[0]\n    return newList\n",
        "num_ids": 61
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size=len(newList)\n    temp=newList[0]\n    newList[0]=newList[size-1]\n    newList[size-1]=temp\n    return newList\n",
        "num_ids": 49
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n",
        "num_ids": 31
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size=len(newList)\n    print(\"Size of list = \", size)\n    temp=newList[0]\n    newList[0]=newList[size-1]\n    newList[size-1]=temp\n    return newList\n",
        "num_ids": 60
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n",
        "num_ids": 31
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    temp = newList[0]\n    newList[0] = newList[length -1]\n    newList[length - 1] = temp\n    return newList\n",
        "num_ids": 51
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    listLen = len(newList)\n    temp = newList[0]\n    newList[0] = newList[listLen-1]\n    newList[listLen-1] = temp\n",
        "num_ids": 49
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList) \n    first = newList[0] \n    last = newList[size - 1] \n    newList[0] = last \n    newList[size - 1] = first \n    return newList\n",
        "num_ids": 61
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    def area(r, R) :\n        theta = pi/4.0\n        s = r*r/R\n        area_t = s * theta\n        area_a = s * theta * theta\n        return area_t, area_a\n    r = int(input(\"Enter radius of the semicircle : \"))\n    R = r*r\n    area_t, area_a = area(r, R)\n    print(\"area of triangle =\", area_t)\n    print(\"area of triangle =\", area_a)\n    return\ntriangle_area(7)\n",
        "num_ids": 148
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    print(\"The area of the largest triangle in a semicircle with radius\",r,\"is:\",pi*r**2)\n",
        "num_ids": 37
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import numpy as np\n    import math\n    a=0\n    if r==0 :\n        a=0\n    else :\n        x=math.pi*r**2\n        a=math.pi*(r**2)\n    return a\n",
        "num_ids": 62
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi, sqrt\n    r = float(r)\n    if r < 0 :\n        return -1\n    else :\n        return (r**2)*pi*(1/2)\n",
        "num_ids": 50
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #in this formula the area is a function of s, where s is the length of the side of the triangle\n    #radius of the semicircle is taken to be 1 \n    \n    a = 1/2 * 3.14 * r**2\n    s = (3*a)/2\n    t = (2*a)/3\n    #where pi is 3.14\n    return a,s,t\n",
        "num_ids": 96
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3.14 * r**2) / 2\nprint(triangle_area(3)) \nprint(triangle_area(2.5)) \n",
        "num_ids": 40
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = (math.pi * (r ** 2)) * (2 / 3)\n    print(f'The area of the largest triangle that can be inscribed in a semicircle with a given radius of {r} is {area:.2f}')\n",
        "num_ids": 64
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi,sqrt\n    def area(r) :\n        return pi*r*r\n    def sqr(a) :\n        return a*a\n    def rad(a) :\n        return a*(3.1415926535/180)\n    def area_triangle(s,a) :\n        return s*s*sqr(rad(a))/4\n    s1,a1 = min(area(r),area_triangle(s,a))\n    s2,a2 = max(area(r),area_triangle(s,a))\n    return s1,a1,s2,a2\n",
        "num_ids": 154
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (2*r**2)**0.5\n    return area\n",
        "num_ids": 21
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if end<=start:\n        return -1\n    mid=int((start+end)/2)\n    if array[mid]==mid+1:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return mid\n",
        "num_ids": 79
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # check if array is not empty\n    if not array:\n        return -1\n    # check if array is valid\n    if start < 0:\n        return -1\n    # check if end value is valid\n    if end is not None:\n        if end < 0:\n            return -1\n    # check if start value is greater than end value\n    if start > end:\n        return -1\n    # check if array is valid\n    if start >= len(array):\n        return -1\n    # check if end value is greater than array length\n    if end is not None:\n        if end >= len(array):\n            return -1\n    # check if array is sorted\n    if array[start] < array[start + 1]:\n        return -1\n    # define a function for recursion\n    def find_missing_value(array,start,end,path):\n        # base case\n        if start == end:\n            # check if array is sorted\n            if array[start] < array[start + 1]:\n                return -1\n            else:\n                return array[start]\n        # recursive case\n        else:\n            # find the middle value between start and end\n            mid = start + (end - start) // 2\n            # add middle value to path\n            path.append(array[mid])\n            # if middle value is less than the last element of the array\n            if array[mid] < array[end]:\n                # call the function to find the missing value in the first half of the array\n                return find_missing_value(array,start,mid,path)\n            else:\n                # call the function to find the missing value in the second half of the array\n                return find_missing_value(array,mid + 1,end,path)\n    # define a path array to store the middle values of the array\n    path = []\n    # call the function to find the missing value\n    return find_missing_value(array,start,end,path)\n",
        "num_ids": 456
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end=len(array)\n    if start<0:\n        start=0\n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    return array[end-1]+1\n",
        "num_ids": 68
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)\n",
        "num_ids": 16
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start > end:\n        return start\n    if array[start]!= start:\n        return start\n    return find_First_Missing(array, start+1, end)\n",
        "num_ids": 60
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n",
        "num_ids": 17
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n",
        "num_ids": 12
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n",
        "num_ids": 12
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start < 0:\n        return 1\n    if start >= len(array):\n        return len(array) + 1\n    if end is None:\n        end = len(array)\n    #find the first missing number\n    for index in range(start,end):\n        if array[index]!= index + 1:\n            return index + 1\n    return end + 1\n",
        "num_ids": 90
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start == end:\n        return start\n    mid = (end + start) // 2\n    if array[mid]!= mid:\n        return mid\n    elif array[mid] < mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n        ",
        "num_ids": 102
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for c in string:\n        if c =='':\n            new_string += '%20'\n        else:\n            new_string += c\n    return new_string\n",
        "num_ids": 50
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n    \n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        string[i] = string[-i-1]\n    return ''.join(string)\n    \n    \ndef swap_case(string):\n    '''\n    Write a function to swap upper case letters with lower case letters.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n        \n        \ndef add_string_numbers(string):\n    '''\n    Write a function to add all the digits in the given string.\n    '''\n    total = 0\n    for char in string:\n        if char.isdigit():\n            total += int(char)\n    return total\n    \n    \ndef mix_strings_and_numbers(a, b):\n    '''\n    Write a function to mix all the alphanumeric characters from two different strings.\n    '''\n    new_string = ''\n    for char in a:\n        if char.isalnum():\n            new_string += char\n    for char in b:\n        if char.isalnum():\n            new_string += char\n    return new_string\n    \n    \ndef count_substring(string, sub_string):\n    '''\n    Write a function to count how many times the given sub_string appears in the given string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(sub_string):\n            count += 1\n    return count\n    \n    \ndef end_other(a, b):\n    '''\n    Write a function that takes two strings as input and returns True if the first string ends with the second string,\n    and False if it does not end with the second string.\n    '''\n    if len(b) > len(a):\n        return False\n    if len(a) == 0:\n        return True\n    if a[-len(b):] == b:\n        return True\n    return False\n    \n    \ndef xyz_there(string):\n    '''\n    Write a function that takes a string as input and returns True if it contains at least one instance of the\n    substring 'xyz' and False if it does not.\n    '''\n    if 'xyz' in string:\n        return True\n    return False\n    \n    \ndef find_first_non_repeating_letter(string):\n    '''\n    Write a function that returns the first non-repeating character in a given string.\n    '''\n    for char in string:\n        if string.count(char) == 1:\n            return char\n    return None\n    \n    \ndef string_match(a, b):\n    '''\n    Write a function that takes two strings and returns True if they both have the same number of letters\n    and each letter in the first string also appears in the second string in the same order.\n    '''\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i] not in b or b[i] not in a:\n            return False\n    return True\n    \n    \ndef rotate_left(a, d):\n    '''\n    Write a function that rotates the given string by d places.\n    '''\n    return a[d:] + a[:d]\n    \n    \ndef my_enumerate(string):\n    '''\n    Write a function that takes a string and returns a new string where each character is replaced by a pair\n    consisting of a number and the character itself.\n    '''\n    result = []\n    for i, char in enumerate(string):\n        result.append((i, char))\n    return result\n    \n    \ndef my_zip(a, b):\n    '''\n    Write a function that takes two lists as input and returns a new list that contains tuples where the first\n    element in each tuple is the same as the first element in each of the lists and the second element in each tuple\n    is the same as the second element in each of the lists.\n    '''\n    return list(zip(a, b))\n    \n    \ndef my_sorted(a, b):\n    '''\n    Write a function that takes two lists as input and returns a new list that contains all the elements that are in the\n    first list but not in the second list.\n    '''\n    return sorted(a, key=lambda x: x in b)\n    \n    \ndef concatenate_string(a, b):\n    '''\n    Write a function that takes two strings and returns a new string that is the concatenation of the two input strings.\n    '''\n    return a + b\n    \n    \ndef all_in_string(a, b):\n    '''\n    Write a function that takes two strings and returns True if all of the characters in the first string are also\n    in the second string.\n    '''\n    for char in a:\n        if char not in b:\n            return False\n    return True\n    \n    \ndef find_longest(a):\n    '''\n    Write a function that takes a list of strings and returns the longest string in the list.\n    '''\n    longest = ''\n    for char in a:\n        if len(char) > len(longest):\n            longest = char\n    return longest\n    \n    \ndef my_split(a, delimiter):\n    '''\n    Write a function that takes a string as input and returns a list of words contained in the string.\n    '''\n    return a.split(delimiter)\n    \n    \ndef count_evens(nums):\n    '''\n    Write a function that counts the number of even ints in the given list.\n    '''\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += 1\n    return count\n    \n    \ndef count_upper_case(string):\n    '''\n    Write a function that returns the number of uppercase letters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n    \n    \ndef capitalize(string):\n    '''\n    Write a function that capitalizes the first letter of each word in a string.\n    '''\n    return string.title()\n    \n    \ndef capitalize_all(string):\n    '''\n    Write a function that capitalizes each word of a given string.\n    '''\n    result = ''\n    for word in string.split():\n        result += word.capitalize() +''\n    return result[:-1]\n    \n    \ndef sum_of_digits(a):\n    '''\n    Write a function that returns the sum of all digits in a given string.\n    '''\n    total = 0\n    for char in a:\n        if char.isdigit():\n            total += int(char)\n    return total\n    \n    \ndef sum_of_digits_list(nums):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all of the digits in the list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum_of_digits(str(num))\n    return total\n    \n    \ndef add_digit_strings(a, b):\n    '''\n    Write a function that takes two strings and returns True if the second string can be obtained by rotating the first string by 1 place.\n    '''\n    if len(a)!= len(b):\n        return False\n    if a == b:\n        return True\n    if a[1:] + a[0] == b:\n        return True\n    return False\n    \n    \ndef remove_all_before(items, border):\n    '''\n    Write a function that removes all items before the given border item in a list.\n    '''\n    return items[items.index(border):]\n    \n    \ndef longest_consecutive_subsequence(string):\n    '''\n    Write a function that takes a string and returns the longest substring that contains only unique letters.\n    '''\n    longest = ''\n    for i, char in enumerate(strin",
        "num_ids": 19
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return(string.replace(' ', '%20'))\n",
        "num_ids": 16
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n    \n    \n    \ndef delete_chars(string, n):\n    '''\n    Write a function to delete n characters from a string.\n    '''\n    return string[:n] + string[n+n:]\n    \n    \n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    string = string.casefold()\n    string = replace_spaces(string)\n    return string == string[::-1]\n    \n    \n    \ndef get_unique_letters(string):\n    '''\n    Write a function to get unique letters in a given string.\n    '''\n    string = string.casefold()\n    string = replace_spaces(string)\n    return len(set(string))\n    \n    \n    \ndef character_at_index(string, index):\n    '''\n    Write a function to return the character from the given index.\n    '''\n    return string[index]\n    \n    \n    \ndef string_bits(string):\n    '''\n    Write a function to convert a given string into its bits.\n    '''\n    bits = \"\"\n    for char in string:\n        bits += bin(ord(char))[2:]\n    return bits\n    \n    \n    \ndef find_string(string, sub_string):\n    '''\n    Write a function to find a sub_string in a given string.\n    '''\n    return string.find(sub_string)\n    \n    \n    \ndef string_join(string, iterable):\n    '''\n    Write a function to join a given string.\n    '''\n    return string.join(iterable)\n    \n    \n    \ndef alphabet_position(char):\n    '''\n    Write a function to return the position of a character in the alphabet.\n    '''\n    return ord(char)-64\n    \n    \n    \ndef rotate_string(string, n):\n    '''\n    Write a function to rotate a string by a given amount.\n    '''\n    return string[n:] + string[:n]\n    \n    \n    \ndef rearrange_digits(numbers):\n    '''\n    Write a function to rearrange the digits of a given numbers.\n    '''\n    numbers = [int(x) for x in str(numbers)]\n    length = len(numbers)\n    if length <= 1:\n        return numbers\n    else:\n        first_biggest = length-1\n        while first_biggest > 0:\n            for i in range(first_biggest):\n                if numbers[i] > numbers[i+1]:\n                    numbers[i],numbers[i+1] = numbers[i+1], numbers[i]\n            first_biggest -= 1\n        \n        return numbers\n    \n    \n    \ndef find_missing_number(arr):\n    '''\n    Write a function to find a missing number from the given array.\n    '''\n    arr = set(arr)\n    num = len(arr)\n    for i in range(num+1):\n        if i not in arr:\n            return i\n    \n    \n    \ndef find_missing_number2(arr):\n    '''\n    Write a function to find a missing number from the given array.\n    '''\n    num = len(arr)\n    for i in range(num+1):\n        if i not in arr:\n            return i\n        else:\n            return i\n            \n            \n            \ndef is_valid_parenthese(string):\n    '''\n    Write a function to check if a string is valid in the parenthese.\n    '''\n    open_parantheses = [\"[\",\"{\",\"(\"]\n    close_parantheses = [\"]\",\"}\",\")\"]\n    stack = []\n    for char in string:\n        if char in open_parantheses:\n            stack.append(char)\n        elif char in close_parantheses:\n            if len(stack) <= 0:\n                return False\n            index = close_parantheses.index(char)\n            if index!= open_parantheses.index(stack[-1]):\n                return False\n            stack.pop()\n    return len(stack) == 0\n    \n    \n    \ndef count_unique_words(sentence):\n    '''\n    Write a function to count the number of unique words in a given sentence.\n    '''\n    words = sentence.split(\" \")\n    return len(set(words))\n    \n    \n    \ndef find_first_uniq_char(string):\n    '''\n    Write a function to find the first non repeated character in the given string.\n    '''\n    return min(string, key=string.count)\n    \n    \n    \ndef count_substring(string, sub_string):\n    '''\n    Write a function to count the number of substrings from a given string.\n    '''\n    return string.count(sub_string)\n    \n    \n    \ndef find_substring(string, sub_string):\n    '''\n    Write a function to find the index of the first occurance of a substring in a given string.\n    '''\n    return string.find(sub_string)\n    \n    \n    \ndef find_all_substring(string, sub_string):\n    '''\n    Write a function to find all the occurences of a substring in a given string.\n    '''\n    return [i for i in range(len(string)) if string.startswith(sub_string, i)]\n    \n    \n    \ndef is_substring(string_1, string_2):\n    '''\n    Write a function to check if a given string is a substring of another given string.\n    '''\n    return string_2 in string_1\n    \n    \n    \ndef replace_substring(string, sub_string, replacement_string):\n    '''\n    Write a function to replace all the occurances of a substring in a string with another string.\n    '''\n    return string.replace(sub_string, replacement_string)\n    \n    \n    \ndef flip_case(string):\n    '''\n    Write a function to flip the case of all letters in a given string.\n    '''\n    return string.swapcase()\n    \n    \n    \ndef check_pangram(string):\n    '''\n    Write a function to check if a given string is a pangram.\n    '''\n    string = string.lower()\n    return len(set(string)) == 26\n    \n    \n    \ndef find_common_characters(string_1, string_2):\n    '''\n    Write a function to find the common characters in a given pair of strings.\n    '''\n    common = \"\"\n    for char in string_1:\n        if char in string_2 and char not in common:\n            common += char\n    return common\n    \n    \n    \ndef is_isogram(string):\n    '''\n    Write a function to check if a given string is an isogram.\n    '''\n    return len(set(string)) == len(string)\n    \n    \n    \ndef find_duplicates(arr):\n    '''\n    Write a function to find the duplicates from the given array.\n    '''\n    return [i for i in set(arr) if arr.count(i) > 1]\n    \n    \n    \ndef is_valid_parenthese2(string):\n    '''\n    Write a function to check if a given string is a valid parenthese.\n    '''\n    stack = []\n    open_parantheses = [\"[\",\"{\",\"(\"]\n    close_parantheses = [\"]\",\"}\",\")\"]\n    for char in string:\n        if char in open_parantheses:\n            stack.append(char)\n        elif char in close_parantheses:\n            index = close_parantheses.index(char)\n            if len(stack) <= 0:\n                return False\n            if index!= open_parantheses.index(stack[-1]):\n                return False\n            stack.pop()\n    return len(stack) == 0\n    \n    \n    \ndef find_duplicate_letters(string):\n    '''\n    Write a function to find the duplicate letters in a given string.\n    '''\n    counts = {}\n    for char in string:\n        if char in counts:\n            counts[cha",
        "num_ids": 27
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    print(\"Even numbers from the list: \", even)\n",
        "num_ids": 44
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [list[i] for i in range(len(list)) if list[i]%2==0]\n",
        "num_ids": 29
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n",
        "num_ids": 41
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i]%2==0:\n            print(list[i])\n        i=i+1\n",
        "num_ids": 43
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [item for item in list if item % 2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for x in list:\n        if x % 2 == 0:\n            even_list.append(x)\n    return even_list\n",
        "num_ids": 41
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [n for n in list if n % 2 == 0]\n    \ndef main():\n    \n    list = [12, 67, 34, 56, 12, 78, 23, 56, 87, 43, 12, 34, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 87, 43, 56, 12, 34, 56, 8",
        "num_ids": 2019
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for x in list:\n        if x%2==0:\n            even_num.append(x)\n    return even_num\n",
        "num_ids": 41
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    new_list = []\n    for x in list:\n        if x % 2 == 0:\n            new_list.append(x)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n",
        "num_ids": 41
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x, y+1), (x+1, y), (x, y-1), (x-1, y)]\n",
        "num_ids": 40
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    global d\n    global out\n    out.append(sub)\n    d += 1\n    for i in range(len(d[ele])):\n        adjac(d[ele][i], sub + [d[ele][i]])\n",
        "num_ids": 58
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        return sub\n    else:\n        sub.append(ele[0]+1)\n        sub.append(ele[1])\n        sub.append(ele[2])\n        return adjac(ele[3], sub)\n",
        "num_ids": 64
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    adjac = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    for item in adjac:\n        if item not in sub:\n            sub.append(item)\n    return sub\n",
        "num_ids": 79
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    x1 = y1 = x2 = y2 = x\n    x1 = x - 1\n    y1 = y - 1\n    x2 = x + 1\n    y2 = y + 1\n    sub.append((x1, y1))\n    sub.append((x2, y1))\n    sub.append((x1, y2))\n    sub.append((x2, y2))\n    return sub\n",
        "num_ids": 108
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    adj = []\n    \n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            \n            adj.append((x + i, y + j))\n    \n    return adj\n",
        "num_ids": 83
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    temp = [(ele[0]+1,ele[1]),(ele[0]-1,ele[1]),(ele[0],ele[1]+1),(ele[0],ele[1]-1),(ele[0]-1,ele[1]+1),(ele[0]+1,ele[1]-1),(ele[0]-1,ele[1]-1),(ele[0]+1,ele[1]+1)]\n    return [x for x in temp if x not in sub]\n",
        "num_ids": 117
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    coord = set()\n    for i in range(len(ele)):\n        for j in range(i+1, len(ele)):\n            coord.add((ele[i],ele[j]))\n            coord.add((ele[j],ele[i]))\n    return coord\n",
        "num_ids": 70
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n    if ele[0] == sub[0][0]:\n        if ele[1] == sub[0][1]:\n            return\n        elif ele[1] == sub[0][1] + 1:\n            return\n        elif ele[1] == sub[0][1] - 1:\n            return\n    elif ele[1] == sub[0][1]:\n        if ele[0] == sub[0][0] + 1:\n            return\n        elif ele[0] == sub[0][0] - 1:\n            return\n    elif ele[0] == sub[0][0] + 1:\n        if ele[1] == sub[0][1]:\n            return\n        elif ele[1] == sub[0][1] + 1:\n            return\n        elif ele[1] == sub[0][1] - 1:\n            return\n    elif ele[0] == sub[0][0] - 1:\n        if ele[1] == sub[0][1]:\n            return\n        elif ele[1] == sub[0][1] + 1:\n            return\n        elif ele[1] == sub[0][1] - 1:\n            return\n    elif ele[0] == sub[0][0] and ele[1] == sub[0][1] + 1:\n        return\n    elif ele[0] == sub[0][0] and ele[1] == sub[0][1] - 1:\n        return\n    elif ele[0] == sub[0][0] + 1 and ele[1] == sub[0][1]:\n        return\n    elif ele[0] == sub[0][0] - 1 and ele[1] == sub[0][1]:\n        return\n    return adjac(ele, sub)\n",
        "num_ids": 443
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    x = ele[0]\n    y = ele[1]\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i!= 0 or j!= 0) and (x + i >= 0 and x + i < 20) and (y + j >= 0 and y + j < 20):\n                adj.append(tuple([x + i, y + j]))\n    return adj\n",
        "num_ids": 109
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_string = ''\n    for i in range(len(text)):\n        if text[i] =='':\n            new_string += '_'\n        else:\n            new_string += text[i]\n    return new_string\n",
        "num_ids": 60
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_').replace(' ', '_')\n",
        "num_ids": 25
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n",
        "num_ids": 13
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if \"_\" in text:\n        return text.replace(\"_\", \" \")\n    elif \" \" in text:\n        return text.replace(\" \", \"_\")\n",
        "num_ids": 41
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    string_list = list(text)\n    text_list = [char if char!=''else '_' for char in text]\n    text = ''.join(text_list)\n    string_list = [char if char!='_' else'' for char in text]\n    text = ''.join(string_list)\n    return text\n",
        "num_ids": 83
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    s = list(text)\n    for i in range(len(s)):\n        if s[i] =='':\n            s[i] = '_'\n        elif s[i] == '_':\n            s[i] =''\n    return ''.join(s)\n",
        "num_ids": 71
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\"_\", \" \").replace(\" \", \"_\").lower()\n",
        "num_ids": 21
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    print(\"Number list given is:\",num_list)\n    # n = len(num_list)\n    num_list = [0] * num_list.count(0) + num_list\n    print(\"Number list after moving all zeroes is:\",num_list)\n    return num_list\n",
        "num_ids": 74
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for num in num_list:\n        if num == 0:\n            num_list.append(num)\n            num_list.remove(num)\n    return num_list\n",
        "num_ids": 44
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(num_list.count(0)):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n",
        "num_ids": 44
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count=num_list.count(0)\n    print(count)\n    for i in range(count):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n",
        "num_ids": 55
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list[:] = [i for i in num_list if i!=0]\n    num_list.extend([0]*num_list.count(0))\n    return num_list\n",
        "num_ids": 50
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    x = 0\n    for i in num_list:\n        if num_list[x] == 0:\n            del num_list[x]\n            num_list.append(0)\n        x += 1\n    return num_list\n",
        "num_ids": 58
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    final_list = []\n    for each in num_list:\n        if each == 0:\n            pass\n        else:\n            final_list.append(each)\n    return final_list\n",
        "num_ids": 48
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #create an empty list\n    new_list = []\n    for num in num_list:\n        #create a flag\n        flag = False\n        if num == 0:\n            #use flag to determine if the number is 0\n            flag = True\n        else:\n            #add the number to the new list\n            new_list.append(num)\n        if flag:\n            #if flag is true add 0 to the list\n            new_list.append(0)\n    return new_list\n",
        "num_ids": 117
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    lst_new = []\n    for i in num_list:\n        if i!= 0:\n            lst_new.append(i)\n        else:\n            continue\n    lst_new.extend([0]*num_list.count(0))\n    return lst_new\n",
        "num_ids": 73
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    print(arr)\n    result = 0\n    for i in range(n-1) :\n        for j in range(i+1, n) :\n            result += (arr[i] ^ arr[j])\n    return result \n",
        "num_ids": 64
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(0,n) :\n        for j in range(i+1,n) :\n            sum_xor += arr[i]^arr[j]\n    return sum_xor\n",
        "num_ids": 59
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    arr.sort()\n    for i in range(0, n - 1): \n        sum = sum + arr[i] ^ arr[i + 1]\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    temp=0\n    for i in range(n-1) : \n        for j in range(i+1,n) : \n            temp=temp^arr[i]^arr[j]\n    return temp\n",
        "num_ids": 60
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum(list(map(lambda x,y:x^y,arr[0::2],arr[1::2])))\n",
        "num_ids": 33
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pair_xor_sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            pair_xor_sum += (arr[i]^arr[j])\n",
        "num_ids": 55
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            sum ^= arr[i] ^ arr[j]\n    return sum \n",
        "num_ids": 52
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            s += arr[i] ^ arr[j]\n    return s\n",
        "num_ids": 48
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_list=[]\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            xor_list.append(arr[i]^arr[j])\n    return xor_list\n",
        "num_ids": 61
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            sum+=arr[i]^arr[j]\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n    \n",
        "num_ids": 41
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = list(iterable)\n    hq.heapify(l)\n    sorted_list = []\n    for i in range(len(l)):\n        sorted_list.append(hq.heappop(l))\n    return sorted_list\n",
        "num_ids": 66
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for item in iterable:\n        hq.heappush(h, item)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for val in iterable:\n        hq.heappush(h,val)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    hq.heapify(iterable)\n    while len(iterable)!= 1:\n        iterable[0], iterable[-1] = iterable[-1], iterable[0]\n        hq.heapify(iterable)\n        iterable.pop()\n        if len(iterable) == 1:\n            return iterable\n    return iterable\n    \ndef selection_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    while True:\n        min_el = iterable[0]\n        for i in range(len(iterable)):\n            if min_el > iterable[i]:\n                min_el = iterable[i]\n        if min_el!= iterable[0]:\n            iterable[0], iterable[iterable.index(min_el)] = iterable[iterable.index(min_el)], iterable[0]\n        else:\n            break\n    return iterable\n    \ndef insertion_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    for i in range(1, len(iterable)):\n        j = i\n        while j > 0 and iterable[j] < iterable[j-1]:\n            iterable[j], iterable[j-1] = iterable[j-1], iterable[j]\n            j -= 1\n    return iterable\n    \ndef insertion_sort_iter(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(1, len(iterable)):\n        j = i\n        while j > 0 and iterable[j] < iterable[j-1]:\n            iterable[j], iterable[j-1] = iterable[j-1], iterable[j]\n            j -= 1\n    return iterable\n    \ndef insertion_sort_recur(iterable, i=1):\n    '''\n    Write a function to sort the given list.\n    '''\n    if i == len(iterable):\n        return iterable\n    return insertion_sort_recur(iterable, i+1)\n        \ndef shell_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    gap = len(iterable) // 2\n    while gap > 0:\n        for i in range(gap, len(iterable)):\n            j = i\n            while j >= gap and iterable[j] < iterable[j-gap]:\n                iterable[j], iterable[j-gap] = iterable[j-gap], iterable[j]\n                j -= gap\n        gap //= 2\n    return iterable\n    \ndef shell_sort_iter(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    gap = len(iterable) // 2\n    while gap > 0:\n        for i in range(gap, len(iterable)):\n            j = i\n            while j >= gap and iterable[j] < iterable[j-gap]:\n                iterable[j], iterable[j-gap] = iterable[j-gap], iterable[j]\n                j -= gap\n        gap //= 2\n    return iterable\n    \ndef shell_sort_recur(iterable, gap=1):\n    '''\n    Write a function to sort the given list.\n    '''\n    if gap == len(iterable):\n        return iterable\n    return shell_sort_recur(iterable, gap+1)\n    \ndef merge(iterable, low, mid, high):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable_1, iterable_2 = iterable[low:mid+1], iterable[mid+1:high+1]\n    iterable_1.append(float('inf'))\n    iterable_2.append(float('inf'))\n    i, j = 0, 0\n    for k in range(low, high+1):\n        if iterable_1[i] < iterable_2[j]:\n            iterable[k] = iterable_1[i]\n            i += 1\n        else:\n            iterable[k] = iterable_2[j]\n            j += 1\n    return iterable\n    \ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    if len(iterable) == 1:\n        return iterable\n    mid = len(iterable) // 2\n    return merge(merge_sort(iterable[:mid]), merge_sort(iterable[mid:]), 0, mid)\n    \ndef merge_sort_iter(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    if len(iterable) == 1:\n        return iterable\n    mid = len(iterable) // 2\n    return merge(merge_sort_iter(iterable[:mid]), merge_sort_iter(iterable[mid:]), 0, mid)\n    \ndef merge_sort_recur(iterable, low=0, high=None):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    if high == None:\n        high = len(iterable) - 1\n    if high - low == 0:\n        return iterable\n    mid = (high + low) // 2\n    return merge(merge_sort_recur(iterable, low, mid), merge_sort_recur(iterable, mid+1, high), low, mid)\n    \ndef quick_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    if len(iterable) == 1:\n        return iterable\n    pivot = iterable[0]\n    smaller, greater = [], []\n    for i in iterable[1:]:\n        if i < pivot:\n            smaller.append(i)\n        else:\n            greater.append(i)\n    return quick_sort(smaller) + [pivot] + quick_sort(greater)\n    \ndef quick_sort_iter(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    if len(iterable) == 1:\n        return iterable\n    pivot = iterable[0]\n    smaller, greater = [], []\n    for i in iterable[1:]:\n        if i < pivot:\n            smaller.append(i)\n        else:\n            greater.append(i)\n    return quick_sort_iter(smaller) + [pivot] + quick_sort_iter(greater)\n    \ndef quick_sort_recur(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    if len(iterable) == 1:\n        return iterable\n    pivot = iterable[0]\n    smaller, greater = [], []\n    for i in iterable[1:]:\n        if i < pivot:\n            smaller.append(i)\n        else:\n            greater.append(i)\n    return quick_sort_recur(smaller) + [pivot] + quick_sort_recur(greater)\n    \ndef heap_sort_iter(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    hq.heapify(iterable)\n    while len(iterable)!= 1:\n        iterable[0], iterable[-1] = iterable[-1], iterable[0]\n        hq.heapify(iterable)\n        iterable.pop()\n        if len(iterable) == 1:\n            return iterable\n    return iterable\n    \ndef heap_sort_recur(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    result = []\n    for value in iterable:\n        hq.heappush(h, value)\n    for i in range(len(h)):\n        result.append(hq.heappop(h))\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if iterable == None:\n        return None\n    l = len(iterable)\n    heap = []\n    for i in range(l):\n        hq.heappush(heap, iterable[i])\n    sorted_list = []\n    for i in range(l):\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list\n",
        "num_ids": 97
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for _ in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    return [hq.heappop(heap) for i in range(len(heap))]\n",
        "num_ids": 55
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Use heapify to sort a list in ascending order\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n",
        "num_ids": 52
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print('The sale is no profit and no loss')\n    else:\n        print('The sale is not a no profit and no loss')\n",
        "num_ids": 45
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount: \n        print(\"The sale amount is equal to the actual cost\")\n    elif actual_cost < sale_amount: \n        print(\"The sale amount is greater than the actual cost\")\n    elif actual_cost > sale_amount: \n        print(\"The sale amount is less than the actual cost\")\n    \nnoprofit_noloss(50,100) \n",
        "num_ids": 99
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return(sale_amount == actual_cost)\nprint(noprofit_noloss(60,10))\nprint(noprofit_noloss(95,10))\n",
        "num_ids": 46
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount: \n        print('No Profit')\n    else: \n        print('No Loss')\n",
        "num_ids": 33
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #pass\n    if (actual_cost==sale_amount):\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print('Congratulations! You have no profit and no loss')\n        return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        print(f\"Loss : {abs(actual_cost-sale_amount)}\")\n    elif actual_cost > sale_amount:\n        print(f\"Profit : {abs(actual_cost-sale_amount)}\")\n    else:\n        print(\"no profit no loss\")\n        return\n",
        "num_ids": 83
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount: \n        return True\n    return False\n",
        "num_ids": 22
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == actual_cost:\n        print(\"No profit and no loss\")\n    else:\n        print(\"No profit and loss\")\n",
        "num_ids": 36
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    if v >=3 and t >= 10:\n        print(math.floor((13.12+0.6215*t-11.37*v**0.16+0.3965*t*v**0.16)/(3.75+0.6215*t-11.37*v**0.16+0.3965*t*v**0.16)))\n    else:\n        print(\"Value error\")\n",
        "num_ids": 117
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + (0.6215*v) - (11.37*t) + (0.3965*(v**2)) - (0.16808*(t**2)) + (0.014096*(v**2)*t) + ((0.001679*(t**2)*(v**2)))\n    return math.ceil(wci)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1996
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    return round(13.12 + 0.6215 * v - 11.37 * t + 0.3965 * t * v + 0.1683 * t * t - 0.0173 * t * t * v + 0.0036 * v * v + 0.0012 * v * t * v)",
        "num_ids": 88
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=int(v)\n    t=int(t)\n    v2=math.pow(v,0.16)\n    wci=13.12+0.6215*t-11.37*v2+0.3965*t*v2-0.1645*t*v2*v2+0.0172*t*v2*v2*v2\n    print(\"%.0f\"%wci)\n",
        "num_ids": 107
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if not isinstance(v,(int,float)) or not isinstance(t,(int,float)):\n        raise TypeError('Wind speed and temperature must be numeric values')\n    if v<3 or t<(-45):\n        raise ValueError('Wind speed must be greater than 3 or temperature must be less than -45')\n    if t<-9:\n        t= round(-9,1)\n    if v>120 or t>60:\n        raise ValueError('Wind speed and temperature must be less than 120 and 60 respectively')\n    if t>=40:\n        if v<53:\n            v=v/3.6\n            t=t+40\n            x=0.002\n            y=(math.pow(v,0.16))*(math.pow(t,0.9))\n            chill=(y*(x+0.3)+25)\n        elif v>=53 and v<=54.4:\n            v=v/3.6\n            t=t+40\n            x=(v-53)/2.5\n            chill=25+(0.326*(x**0.25))\n        elif v>=54.5 and v<=58.4:\n            v=v/3.6\n            t=t+40\n            x=(v-54.5)/2.5\n            chill=25+0.818*(x**0.25)-0.0118*(x**0.25)\n        elif v>=58.5 and v<=64.2:\n            v=v/3.6\n            t=t+40\n            x=(v-58.5)/2.5\n            chill=25+0.827*(x**0.25)-0.0104*(x**0.25)\n        elif v>=64.3 and v<=71:\n            v=v/3.6\n            t=t+40\n            x=(v-64.3)/2.5\n            chill=25+0.835*(x**0.25)-0.0064*(x**0.25)\n        else:\n            v=v/3.6\n            t=t+40\n            x=(v-71)/2.5\n            chill=25+0.849*(x**0.25)\n    else:\n        v=v/3.6\n        chill=v*0.836+(t*0.0235)-(t*(v*0.0685))\n    return round(chill)\n",
        "num_ids": 602
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = 35.74 + 0.6215 * t - 35.75 * (v**0.16) + 0.4275 * t * (v**0.16)\n    return round(wind_chill)\nprint(wind_chill(25,10))\n",
        "num_ids": 68
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=int(v)\n    t=float(t)\n    if v>4.8 and t<0:\n        r=0\n    else:\n        r=13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16\n    return round(r)\n",
        "num_ids": 84
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # V = 0.23 * T + 0.45\n    # V = wind velocity in km/h\n    # T = temperature in Celsius\n    \n    V = v\n    T = t\n    \n    if V <=3.0 or T>=25.0:\n        return None\n    \n    if V >=0.3 and T<=13.0:\n        return round(V * (1.15 + (0.7*T)) - 12.5,0)\n        \n    if V >=3.0 and T<=18.0:\n        return round(V * (1.15 + (0.7*T)) - 6.75,0)\n    \n    if V >=10.0 and T<=28.0:\n        return round(V * (1.15 + (0.7*T)) - 3.35,0)\n    \n    if V >=28.0:\n        return round(V * (1.15 + (0.7*T)) - 0.45,0)\n    \n    return None\n    ",
        "num_ids": 247
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = 13.12 + 0.6215*t - 11.37*math.pow(v,0.16) + 0.3965*t*math.pow(v,0.16)\n    return int(wind_chill)\n    \ndef wilson_score(e,n):\n    '''\n    Write a function to calculate the wilson score given the number of excess and number of missing calls. The score is rounded to the next integer.\n    '''\n    n_ = n + 1\n    e_ = e\n    n_ = n_ / (n_ + e_)\n    w_score = math.sqrt((n_ + 0.5 - e_) / (n_ + 0.5 + e_))\n    return int(w_score)\n",
        "num_ids": 73
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # windchill(v,t) = 35.74 + 0.6215 * t - 35.75 * (v ** 0.16) + 0.4275 * t * (v ** 0.16)\n",
        "num_ids": 51
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    l_name = []\n    for i in sample_names:\n        if i[0].islower():\n            continue\n        else:\n            l_name.append(i)\n    return len(''.join(l_name))\n",
        "num_ids": 57
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for i in range(len(sample_names)):\n        if sample_names[i][0].islower():\n            sum += len(sample_names[i])\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for sample in sample_names:\n        if sample[0] >= 'a' and sample[0] <= 'z':\n            sample = sample[1:]\n    return sum([len(sample) for sample in sample_names])\n",
        "num_ids": 55
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s = 0\n    for name in sample_names:\n        if not name.startswith(('a','e','i','o','u')):\n            s += len(name)\n    return s\n",
        "num_ids": 50
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = []\n    for sample_name in sample_names:\n        if not sample_name.islower():\n            result.append(sample_name)\n    return len(''.join(result))\n    \ndef word_count_gen():\n    '''\n    Write a generator to return words in the file one word at a time. You can assume that the input file contains only lowercase letters (a-z) and spaces.\n    '''\n    with open('words.txt') as words_file:\n        for line in words_file:\n            yield line\n            \ndef count_words(words):\n    '''\n    Write a function to count the number of words in the file. You can assume that the input file contains only lowercase letters (a-z) and spaces.\n    '''\n    return len(words.split())\n",
        "num_ids": 11
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for i in sample_names:\n        if i[0].islower():\n            sample_names.remove(i)\n    return sum(len(i) for i in sample_names)\n",
        "num_ids": 47
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for name in sample_names:\n        if name[0].isupper():\n            pass\n        else:\n            sample_names.remove(name)\n    return sample_names\n",
        "num_ids": 44
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for name in sample_names:\n        if name[0].islower():\n            sample_names.remove(name)\n    return sample_names\n",
        "num_ids": 37
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def sum_nam(sample_names):\n        names_without_lowercase = []\n        for name in sample_names:\n            if name[0].islower():\n                names_without_lowercase.append(name)\n        return sum([len(name) for name in names_without_lowercase])\n    return sum_nam\n",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Remove the names with only one character\n    sample_names = [name for name in sample_names if len(name) > 1]\n    # Convert to lowercase\n    sample_names = [name.lower() for name in sample_names]\n    # Return sum of the length of the names\n    return sum(len(name) for name in sample_names)\n",
        "num_ids": 86
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # your code here\n    # print(items)\n    pattern = r'\\([^\\(^\\) ]*\\)'\n    items = re.sub(pattern, '', items)\n    return items\n",
        "num_ids": 50
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    p = re.compile(r'\\((.*)\\)')\n    for i in items:\n        i = p.sub('', i)\n    return items\n",
        "num_ids": 41
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_list = []\n    for item in items:\n        match = re.search('\\(.*?\\)', item)\n        if match:\n            item = re.sub('\\(.*?\\)', '', item)\n            new_list.append(item)\n        else:\n            new_list.append(item)\n    return new_list\n",
        "num_ids": 85
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    string = str(items)\n    clean = ''\n    for char in string:\n        if char == '(' or char == ')':\n            continue\n        else:\n            clean += char\n    return clean\n",
        "num_ids": 51
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_list = []\n    for item in items:\n        if item.startswith('(') and item.endswith(')'):\n            item = item.strip('()')\n            new_list.append(item)\n        else:\n            new_list.append(item)\n    return new_list\n",
        "num_ids": 76
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        items[i]=re.sub(r'[\\(\\[].*?[\\)\\]]','',items[i])\n        items[i]=re.sub(r'[(](\\w+)[)][ ]',r'\\1',items[i])\n    return items\n",
        "num_ids": 79
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in items:\n        print(i)\n",
        "num_ids": 15
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #Regex that removes the content of parenthesis\n    regex=re.compile(r'\\(.*?\\)')\n    return re.sub(regex, '', items)\ndef remove_url(items):\n    '''\n    Write a function to remove URLs from a string.\n    '''\n    #Regex that removes the content of parenthesis\n    regex=re.compile(r'http\\S+')\n    return re.sub(regex, '', items)\ndef remove_comma(items):\n    '''\n    Write a function to remove comma between words.\n    '''\n    #Regex that removes the content of parenthesis\n    regex=re.compile(r'[,]')\n    return re.sub(regex, '', items)\ndef remove_html(items):\n    '''\n    Write a function to remove the html tag from the string.\n    '''\n    #Regex that removes the content of parenthesis\n    regex=re.compile(r'<.*?>')\n    return re.sub(regex, '', items)\ndef remove_white_space(items):\n    '''\n    Write a function to remove the whitespace at the beginning and at the end of the string.\n    '''\n    #Regex that removes the content of parenthesis\n    regex=re.compile(r'^\\s+')\n    return re.sub(regex, '', items)\ndef remove_punctuation(items):\n    '''\n    Write a function to remove the punctuation from the string.\n    '''\n    #Regex that removes the content of parenthesis\n    regex=re.compile(r'[^\\w\\s]')\n    return re.sub(regex, '', items)\ndef split_into_words(items):\n    '''\n    Write a function to split a string into a list of words.\n    '''\n    #Regex that removes the content of parenthesis\n    return re.split(' ', items)\ndef get_word_count(items):\n    '''\n    Write a function that counts the number of occurrences of a word in a string.\n    '''\n    #Regex that removes the content of parenthesis\n    words=re.split(' ', items)\n    return len(words)\ndef print_first_word(items):\n    '''\n    Write a function to print the first word of a given string.\n    '''\n    #Regex that removes the content of parenthesis\n    words=re.split(' ', items)\n    return words[0]\ndef print_last_word(items):\n    '''\n    Write a function to print the last word of a given string.\n    '''\n    #Regex that removes the content of parenthesis\n    words=re.split(' ', items)\n    return words[-1]\ndef reverse(items):\n    '''\n    Write a function to reverse the string.\n    '''\n    #Regex that removes the content of parenthesis\n    return items[::-1]\ndef make_sentence(items):\n    '''\n    Write a function to make a sentence from a given string.\n    '''\n    #Regex that removes the content of parenthesis\n    words=re.split(' ', items)\n    return''.join(words)\ndef get_unique_word_count(items):\n    '''\n    Write a function to count the number of unique words in a string.\n    '''\n    #Regex that removes the content of parenthesis\n    words=re.split(' ', items)\n    return len(set(words))\ndef capitalize(items):\n    '''\n    Write a function to capitalize the first letter of the first word of a given string.\n    '''\n    #Regex that removes the content of parenthesis\n    words=re.split(' ', items)\n    return words[0].capitalize()+' '+' '.join(words[1:])\ndef count_characters(items):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    #Regex that removes the content of parenthesis\n    return len(items)\ndef remove_characters(items,characters):\n    '''\n    Write a function to remove the given characters from a string.\n    '''\n    #Regex that removes the content of parenthesis\n    return re.sub('[%s]' % re.escape(characters), '', items)\ndef replace_characters(items,characters):\n    '''\n    Write a function to replace the given characters in a string with the given character.\n    '''\n    #Regex that removes the content of parenthesis\n    return re.sub('[%s]' % re.escape(characters), '', items)\ndef get_characters(items):\n    '''\n    Write a function to print the characters in a string.\n    '''\n    #Regex that removes the content of parenthesis\n    return re.split(' ', items)\ndef get_string_length(items):\n    '''\n    Write a function to get the length of a given string.\n    '''\n    #Regex that removes the content of parenthesis\n    return len(items)\ndef get_string_length_in_words(items):\n    '''\n    Write a function to get the length of a given string in words.\n    '''\n    #Regex that removes the content of parenthesis\n    words=re.split(' ', items)\n    return len(words)\ndef get_number_of_words(items):\n    '''\n    Write a function to get the number of words in a given string.\n    '''\n    #Regex that removes the content of parenthesis\n    words=re.split(' ', items)\n    return len(words)\ndef is_word_in_string(items, word):\n    '''\n    Write a function to check if the word is in the string.\n    '''\n    #Regex that removes the content of parenthesis\n    words=re.split(' ', items)\n    return word in words\ndef is_string_in_word(items, word):\n    '''\n    Write a function to check if the string is in the word.\n    '''\n    #Regex that removes the content of parenthesis\n    return word in items\ndef remove_last_character(items):\n    '''\n    Write a function to remove the last character of a given string.\n    '''\n    #Regex that removes the content of parenthesis\n    return items[:-1]\ndef remove_first_character(items):\n    '''\n    Write a function to remove the first character of a given string.\n    '''\n    #Regex that removes the content of parenthesis\n    return items[1:]\ndef string_after_replacing_characters(items,characters):\n    '''\n    Write a function to replace the given characters in a string with the given character.\n    '''\n    #Regex that removes the content of parenthesis\n    return re.sub('[%s]' % re.escape(characters), '', items)\ndef replace_word_with_given_word(items, word, replacement_word):\n    '''\n    Write a function to replace a word in a given string with the given word.\n    '''\n    #Regex that removes the content of parenthesis\n    return re.sub(word, replacement_word, items)\ndef get_words_after_replacing_characters(items,characters):\n    '''\n    Write a function to replace the given characters in a string with the given character.\n    '''\n    #Regex that removes the content of parenthesis\n    return re.split(' ', re.sub('[%s]' % re.escape(characters), '', items))\ndef get_words_after_removing_characters(items,characters):\n    '''\n    Write a function to replace the given characters in a string with the given character.\n    '''\n    #Regex that removes the content of parenthesis\n    return re.split(' ', re.sub('[%s]' % re.escape(characters), '', items))\ndef remove_first_n_characters(items, n):\n    '''\n    Write a function to remove the first n characters from a string.\n    '''\n    #Regex that removes the content of parenthesis\n    return items[n:]\ndef replace_first_n_characters(items, n, characters):\n    '''\n    Write a function to replace the first n characters in a string with the given character.\n    '''\n    #Regex that removes the content o",
        "num_ids": 11
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        #print(item)\n        s = re.findall(r'\\((.*?)\\)', item)\n        s = ''.join(s)\n        items[items.index(item)] = item.replace(s, '')\n        items[items.index(item)] = re.sub(r'\\(.*?\\)', '', item)\n    return items\n",
        "num_ids": 95
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    temp=items\n    temp=re.sub(r'\\([^)]*\\)', '', temp)\n    temp=re.sub(r'\\[[^]]*\\]', '', temp)\n    return temp\n",
        "num_ids": 54
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n * (n + 1) / 2)\n",
        "num_ids": 17
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        count = 3\n        last_two = [1,2]\n        while count < n:\n            new_num = sum(last_two)\n            last_two.pop(0)\n            last_two.append(new_num)\n            count += 1\n        return new_num\n",
        "num_ids": 109
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # a = 0\n    # n = 3\n    # while a < n:\n    #     a = a + 1\n    #     n = n + 1\n    # print(a)\n    # print(n)\n    return n*n + 1\n",
        "num_ids": 62
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n * (n + 1) / 2)\n",
        "num_ids": 17
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Base Case, return 0 if the n is 0.\n    if n == 0:\n        return 0\n    # Calculate nth nonagonal number.\n    nth_number = (n * n + n) / 2\n    return nth_number\n",
        "num_ids": 61
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2\n",
        "num_ids": 15
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)//2\n",
        "num_ids": 14
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_triangle(n):\n    '''\n    Write a function to find the nth triangle number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_square(n):\n    '''\n    Write a function to find the nth square number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_pentagonal(n):\n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_hexagonal(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_heptagonal(n):\n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_decimal(n):\n    '''\n    Write a function to find the nth decimal number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_roman(n):\n    '''\n    Write a function to find the nth roman number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_perfect_square(n):\n    '''\n    Write a function to find the nth perfect square number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_triangle(n):\n    '''\n    Write a function to find the nth triangle number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_square(n):\n    '''\n    Write a function to find the nth square number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_pentagonal(n):\n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_hexagonal(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_heptagonal(n):\n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_decimal(n):\n    '''\n    Write a function to find the nth decimal number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_roman(n):\n    '''\n    Write a function to find the nth roman number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_perfect_square(n):\n    '''\n    Write a function to find the nth perfect square number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)\n        n1 = n2\n        n2 = nth\n        \ndef is_triangle(n):\n    '''\n    Write a function to find the nth triangle number.\n    '''\n    n1 = 0\n    n2 = 1\n    print(0)\n    for i in range(1, n): \n        nth = n1 + n2\n        print(nth)",
        "num_ids": 48
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_number = 0\n    for i in range(1, n+1):\n        nonagonal_number += (-1)**(i+1)/i\n    return nonagonal_number\n",
        "num_ids": 47
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        if n == 1:\n            return 1\n        else:\n            return 3*n**2 - 2*n + 1\n    ",
        "num_ids": 49
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.findall(r'z\\b|z\\B',text)\n",
        "num_ids": 22
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = str(text)\n    if text[0] == 'z' or text[-1] == 'z':\n        return False\n    else:\n        if 'z' in text:\n            return True\n        else:\n            return False\n",
        "num_ids": 60
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    return re.search('^z.+z$', text)\n",
        "num_ids": 26
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # return text.strip().find('z')!= 0 and text.strip().rfind('z')!= len(text.strip())-1\n",
        "num_ids": 37
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\bz\\b)\\bz\\b(?!\\b)'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'No Match Found!'\n",
        "num_ids": 58
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    import re\n    if re.search(r'[z]', text) == None and len(text)>=2:\n        print(\"False\")\n    else:\n        print(\"True\")\n",
        "num_ids": 48
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if \"z\" in text[1:-1] :\n        return False\n    else : \n        return True\n",
        "num_ids": 29
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.search(r'[z]', text)\n    if match:\n        return match.group()\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"\\bz\\b\"\n    if re.search(pattern, text):\n        return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"z.{0,2}z\"\n    match = re.search(pattern, text)\n    if match is None:\n        return False\n    else:\n        return True\ndef text_match_wordz_not_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"z.{1,3}z\"\n    match = re.search(pattern, text)\n    if match is None:\n        return False\n    else:\n        return True\ndef text_match_start_end_word(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"z.{0,2}z.{1,3}z\"\n    match = re.search(pattern, text)\n    if match is None:\n        return False\n    else:\n        return True\n",
        "num_ids": 55
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]\n",
        "num_ids": 19
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_length = len(input)\n    if input_length == 0 or k > input_length or k == 0:\n        return []\n",
        "num_ids": 35
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if not input:\n        return input\n    if k <= 0:\n        return input\n",
        "num_ids": 23
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #code here\n    arr = list(input)\n    print(arr)\n    for i in range(0,k):\n        arr.insert(0,arr.pop())\n    return ''.join(arr)\n",
        "num_ids": 53
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input.reverse()\n    print(input)\n    return(input[:k])",
        "num_ids": 22
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_array = []\n    for i in range(k): \n        reverse_array.append(input[-i-1])\n    for i in range(k, len(input)): \n        reverse_array.append(input[i])\n    return reverse_array \n",
        "num_ids": 68
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = list(input)\n    if k<=0:\n        return input\n    if k>len(input):\n        k = k%len(input)\n    if k==len(input):\n        return input\n    i = 0\n    while i<k:\n        input[i], input[k] = input[k], input[i]\n        i+=1\n        k-=1\n    return input\n",
        "num_ids": 100
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    print(\"reverse_Array_Upto_K()\")\n    i = 0\n    while i<k:\n        print(input[i], end=\" \")\n        i += 1\n    reverse(input, 0, k - 1)\n    i = k\n    while i<len(input):\n        print(input[i], end=\" \")\n        i += 1\n        \n",
        "num_ids": 91
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = list(input)\n    print('original list is: {}'.format(l))\n    l[0:k+1] = reversed(l[0:k+1])\n    print('reversed list upto {} is: {}'.format(k, l))\n",
        "num_ids": 66
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return (input[:k][::-1] + input[k:])\n",
        "num_ids": 21
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    print('\\n')\n    print('Tuple: {}'.format(test_tup))\n    print('Dictionary: {}'.format(test_dict))\n    print(add_dict_to_tuple(test_tup, test_dict))\n",
        "num_ids": 62
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    test_tup = tuple(test_tup)\n    return test_tup\n",
        "num_ids": 50
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_dict) + test_tup\n    return test_tup\n",
        "num_ids": 27
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = dict()\n    for key in test_dict:\n        new_dict[key] = test_dict[key]\n    return test_tup + (new_dict,)\n",
        "num_ids": 47
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + test_dict\n",
        "num_ids": 13
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + tuple(test_dict.values())\n    return test_tup\n",
        "num_ids": 29
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows, cols = len(cost), len(cost[0])\n    min_cost = [[0] * cols for _ in range(rows)]\n    max_cost = [[0] * cols for _ in range(rows)]\n    min_cost[0][0] = cost[0][0]\n    max_cost[0][0] = cost[0][0]\n",
        "num_ids": 91
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def isSafe(row, col, N):\n        if row >= 0 and col >= 0 and row < N and col < N:\n            return True\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n    for i in range(n-1):\n        dp[i][i+1] = cost[i][i+1]\n    for r in range(2, n):\n        for i in range(n-r):\n            j = i + r\n            dp[i][j] = sys.maxsize\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + cost[i][j])\n    return dp[0][n-1]\n",
        "num_ids": 190
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def dfs(r, c, cell_cost):\n        '''\n        Performs a depth-first search for the given cell.\n        '''\n        nonlocal current_average, max_average, visited_cells\n        visited_cells += 1\n        current_average = (current_average + cell_cost) / visited_cells\n        if r == N-1 and c == N-1:\n            if current_average > max_average:\n                max_average = current_average\n        else:\n            if r+1 < N:\n                dfs(r+1, c, cell_cost + cost[r+1][c])\n            if c+1 < N:\n                dfs(r, c+1, cell_cost + cost[r][c+1])\n",
        "num_ids": 147
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if n == 1:\n        return sum(cost[0])\n",
        "num_ids": 26
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    from collections import defaultdict\n",
        "num_ids": 9
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    def findMax(curr, avg, visited):\n        if curr[0] >= n or curr[1] >= n or curr in visited or curr[0] < 0 or curr[1] < 0:\n            return -1\n        if curr[0] == n - 1 and curr[1] == n - 1:\n            return avg\n        return max(findMax(curr + (i,), avg + cost[curr[0]][curr[1]][i], visited + [curr]) for i in range(2))\n    \n    return findMax((0, 0), 0, [])\n",
        "num_ids": 157
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Get number of rows and columns\n    numRows = len(cost)\n    numCols = len(cost[0])\n",
        "num_ids": 33
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[0][0]\n            elif i == 0 and j!= 0:\n                dp[i][j] = dp[i][j-1] + cost[0][j]\n            elif i!= 0 and j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][0]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n                \n    return dp[N-1][N-1]/((N*N)-1)",
        "num_ids": 214
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[0][i] = cost[0][i] + dp[0][i-1]\n    for i in range(1, n):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n    \n    return dp[n-1][n-1]/((n-1)*(n-1))\n",
        "num_ids": 203
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_dict={}\n    for name,height,weight in students.items():\n        if height>=h and weight>=w:\n            new_dict[name]=students[name]\n    return new_dict\n",
        "num_ids": 54
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0] >= h and v[1] >= w}\n",
        "num_ids": 33
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_dict = {}\n    for name,tuple_val in students.items():\n        if tuple_val[0] >= h and tuple_val[1] >= w:\n            new_dict[name] = tuple_val\n    return new_dict\n",
        "num_ids": 62
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # students = {\"Rolf\":(70,150), \"Bob\":(72,150), \"Anne\":(65,145)}\n    # print(students)\n    # print(filter_data(students,65,150))\n    # print(students)\n    # print(students)\n    result = []\n    for i in students:\n        # print(i)\n        if students[i][0] > h and students[i][1] > w:\n            result.append(i)\n    return result\n",
        "num_ids": 124
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            new_students[student] = students[student]\n    return new_students\n",
        "num_ids": 59
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for i in students.keys():\n        if students[i][0]<h and students[i][1]<w:\n            print(i)\n",
        "num_ids": 38
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #test = dict(filter(lambda elem: (elem[1][0]>h or elem[1][1]>w),students.items()))\n    #return test\n    result = dict()\n    for name, info in students.items():\n        if info[0] > h and info[1] > w:\n            result[name] = info\n    return result\n",
        "num_ids": 93
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name in students:\n        if students[name][0]>=h and students[name][1]>=w:\n            result[name] = students[name]\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0]>=h and v[1]>=w}\n",
        "num_ids": 35
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {student:student_height for student,student_height in students.items() if student_height[0]>h and student_height[1]>w}\n",
        "num_ids": 41
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n = len(nums1)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums1[i] == nums1[j] and nums2[i] == nums2[j]:\n                result += 1\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    num_pairs = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            num_pairs += 1\n",
        "num_ids": 48
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    # Iterate through all the items in nums1 and nums2\n    for i, num1 in enumerate(nums1):\n        # If the current item in nums1 and nums2 match\n        if eq(num1, nums2[i]):\n            count += 1\n    return count\n",
        "num_ids": 79
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0,len(nums1)):\n        if(nums1[i] == nums2[i]):\n            count +=1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_num = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_num += 1\n    return same_num\n",
        "num_ids": 52
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for x, y in zip(nums1, nums2):\n        if eq(x, y):\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for index in range(len(nums1)):\n        if nums1[index] == nums2[index]:\n            count += 1\n    return count\n    # return len([num for num in range(len(nums1)) if nums1[num] == nums2[num]])\n",
        "num_ids": 79
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Count the number of matches from each array\n    # Compare the count to the length of the list\n    count = 0\n    for num1, num2 in zip(nums1, nums2):\n        if num1 == num2:\n            count += 1\n",
        "num_ids": 63
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The input is invalid.\")\n        return\n    same_pair_list = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_pair_list.append(i)\n    return same_pair_list\n",
        "num_ids": 89
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in str(base):\n        result += int(i)**power\n",
        "num_ids": 26
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for n in str(base**power):\n        total += int(n)\n    return total",
        "num_ids": 29
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s = 0\n    for i in str(base**power):\n        s += int(i)\n    return s\n",
        "num_ids": 30
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    elif power == 0:\n        return 1\n    else:\n        base_num = int(str(base)[0])\n        return base_num + power_base_sum(base, power - 1)\n",
        "num_ids": 62
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base < 0 or power < 0:\n        raise ValueError('Input base and power must be non-negative.')\n    total = 0\n    for i in range(1, power+1):\n        total += base**i\n    return int(total)\n",
        "num_ids": 62
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    if not base.isdigit() or not power.isdigit():\n        raise TypeError\n        \n    base, power = int(base), int(power)\n    \n    result = 0\n    \n    while base:\n        result += base % 10\n        base //= 10\n        \n    for _ in range(power-1):\n        result *= 10\n        \n    return result\n",
        "num_ids": 95
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in str(base):\n        sum += int(i)**power\n    return sum\n",
        "num_ids": 30
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    for i in range(power):\n        power_sum += base**i\n",
        "num_ids": 27
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power <= 0:\n        return 0\n    elif base <= 0:\n        return 0\n    else:\n        return base % 10 + power_base_sum(base // 10, power - 1)\n",
        "num_ids": 50
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i)**power for i in str(base)])\n    ",
        "num_ids": 22
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #my_str = re.search('\"\\w+\"',text1)\n    #print(my_str.group())\n    #print(my_str.group())\n    result = re.findall('\"(\\w+)\"',text1)\n    for i in result:\n        print(i)\n",
        "num_ids": 75
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    n = []\n    for x in text1.split():\n        if x.startswith('\"') and x.endswith('\"'):\n            n.append(x)\n    return n\n",
        "num_ids": 49
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    a=re.findall('\"[a-zA-Z0-9\\.\\s\\']+\"',text1)\n    b=list(filter(None,a))\n    #print(b)\n    if len(b)>0:\n        return b[0][1:-1]\n    else:\n        return ''\ndef extract_phone_numbers(text1):\n    '''\n    Write a function to extract phone numbers from the given string.\n    '''\n    a=re.findall(\"\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{4}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{4}|\\d{3}[-\\.\\s]??\\d{4}\",text1)\n    if len(a)>0:\n        return a[0]\n    else:\n        return ''\ndef extract_emails(text1):\n    '''\n    Write a function to extract emails from the given string.\n    '''\n    a=re.findall(\"\\w+@\\w+[-.]+\\w+\",text1)\n    if len(a)>0:\n        return a[0]\n    else:\n        return ''\ndef extract_price(text1):\n    '''\n    Write a function to extract prices from the given string.\n    '''\n    a=re.findall('\\d+[\\.,]?\\d+',text1)\n    b=list(filter(None,a))\n    if len(b)>0:\n        return b[0]\n    else:\n        return ''\ndef extract_credit_card_number(text1):\n    '''\n    Write a function to extract credit card numbers from the given string.\n    '''\n    a=re.findall('\\d{4}\\s*\\d{4}\\s*\\d{4}\\s*\\d{4}',text1)\n    b=list(filter(None,a))\n    if len(b)>0:\n        return b[0]\n    else:\n        return ''\ndef extract_credit_card_number1(text1):\n    '''\n    Write a function to extract credit card numbers from the given string.\n    '''\n    a=re.findall('\\d{4}[-\\.\\s]??\\d{4}[-\\.\\s]??\\d{4}[-\\.\\s]??\\d{4}',text1)\n    b=list(filter(None,a))\n    if len(b)>0:\n        return b[0]\n    else:\n        return ''\ndef extract_credit_card_number2(text1):\n    '''\n    Write a function to extract credit card numbers from the given string.\n    '''\n    a=re.findall('\\d{16}',text1)\n    b=list(filter(None,a))\n    if len(b)>0:\n        return b[0]\n    else:\n        return ''\ndef extract_credit_card_expiration_date(text1):\n    '''\n    Write a function to extract credit card expiration dates from the given string.\n    '''\n    a=re.findall('\\d{2}[-\\.\\s]??\\d{2}[-\\.\\s]??\\d{4}',text1)\n    b=list(filter(None,a))\n    if len(b)>0:\n        return b[0]\n    else:\n        return ''\ndef extract_credit_card_expiration_date1(text1):\n    '''\n    Write a function to extract credit card expiration dates from the given string.\n    '''\n    a=re.findall('\\d{2}[-\\.\\s]??\\d{2}[-\\.\\s]??\\d{4}',text1)\n    b=list(filter(None,a))\n    if len(b)>0:\n        return b[0]\n    else:\n        return ''\ndef extract_credit_card_expiration_date2(text1):\n    '''\n    Write a function to extract credit card expiration dates from the given string.\n    '''\n    a=re.findall('\\d{2}[-\\.\\s]??\\d{2}[-\\.\\s]??\\d{4}',text1)\n    b=list(filter(None,a))\n    if len(b)>0:\n        return b[0]\n    else:\n        return ''\ndef extract_credit_card_security_code(text1):\n    '''\n    Write a function to extract credit card security codes from the given string.\n    '''\n    a=re.findall('\\d{3}[-\\.\\s]??\\d{4}[-\\.\\s]??\\d{4}[-\\.\\s]??\\d{4}',text1)\n    b=list(filter(None,a))\n    if len(b)>0:\n        return b[0]\n    else:\n        return ''\ndef extract_credit_card_security_code1(text1):\n    '''\n    Write a function to extract credit card security codes from the given string.\n    '''\n    a=re.findall('\\d{4}[-\\.\\s]??\\d{4}[-\\.\\s]??\\d{4}[-\\.\\s]??\\d{4}',text1)\n    b=list(filter(None,a))\n    if len(b)>0:\n        return b[0]\n    else:\n        return ''\ndef extract_credit_card_security_code2(text1):\n    '''\n    Write a function to extract credit card security codes from the given string.\n    '''\n    a=re.findall('\\d{4}[-\\.\\s]??\\d{4}[-\\.\\s]??\\d{4}[-\\.\\s]??\\d{4}',text1)\n    b=list(filter(None,a))\n    if len(b)>0:\n        return b[0]\n    else:\n        return ''\ndef extract_product_details(text1):\n    '''\n    Write a function to extract product details from the given string.\n    '''\n    a=re.findall('\"([\\w\\s]+)\"',text1)\n    b=list(filter(None,a))\n    if len(b)>0:\n        return b[0]\n    else:\n        return ''\ndef extract_product_details1(text1):\n    '''\n    Write a function to extract product details from the given string.\n    '''\n    a=re.findall('\"([\\w\\s]+)\"',text1)\n    b=list(filter(None,a))\n    if len(b)>0:\n        return b[0]\n    else:\n        return ''\ndef extract_product_details2(text1):\n    '''\n    Write a function to extract product details from the given string.\n    '''\n    a=re.findall('\\d{2}[-\\.\\s]??\\d{2}[-\\.\\s]??\\d{4}',text1)\n    b=list(filter(None,a))\n    if len(b)>0:\n        return b[0]\n    else:\n        return ''\ndef extract_product_details3(text1):\n    '''\n    Write a function to extract product details from the given string.\n    '''\n    a=re.findall('\\d{2}[-\\.\\s]??\\d{2}[-\\.\\s]??\\d{4}',text1)\n    b=list(filter(None,a))\n    if len(b)>0:\n        return b[0]\n    else:\n        return ''\ndef extract_product_details4(text1):\n    '''\n    Write a function to extract product details from the given string.\n    '''\n    a=re.findall('\\d{2}[-\\.\\s]??\\d{2}[-\\.\\s]??\\d{4}',text1)\n    b=list(filter(None,a))\n    if len(b)>0:\n        return b[0]\n    else:\n        return ''\ndef extract_product_detail",
        "num_ids": 87
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text=text1.replace(' ','')\n    if text[0]=='\"' and text[-1]=='\"':\n        text=text[1:-1]\n    return text\n",
        "num_ids": 47
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    print('Values between quotation marks \" \" of the given string.')\n    pattern = r'\\\"(.*?)\\\"'\n    values = re.findall(pattern, text1)\n    print(values)\n    print()\n",
        "num_ids": 54
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # if text1:\n    #     return''.join(list(map(str,text1.split('\"'))))\n    # else:\n    #     return ''\n    if text1:\n        return''.join(list(map(str,re.findall('\"',text1))))\n    else:\n        return ''\ndef remove_quotation(text1):\n    '''\n    Write a function to remove values between quotation marks \" \" of the given string.\n    '''\n    if text1:\n        return re.sub('\"','',text1)\n    else:\n        return ''\ndef compare_text(text1, text2):\n    '''\n    Write a function to compare two strings and print their similarity.\n    '''\n    if text1 and text2:\n        return len(text1.split()) == len(text2.split())\n    else:\n        return ''\ndef count_word(text1):\n    '''\n    Write a function to count the number of words in a given text.\n    '''\n    if text1:\n        return len(text1.split())\n    else:\n        return ''\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    if text1:\n        return re.sub('[^\\w\\s]','',text1)\n    else:\n        return ''\ndef remove_non_ascii(text1):\n    '''\n    Write a function to remove non-ascii characters from a given string.\n    '''\n    if text1:\n        return re.sub('[^\\x00-\\x7F]+','',text1)\n    else:\n        return ''\ndef remove_digits(text1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    if text1:\n        return re.sub('\\d+','',text1)\n    else:\n        return ''\ndef count_upper_case(text1):\n    '''\n    Write a function to count the number of upper case letters in a given text.\n    '''\n    if text1:\n        return sum(1 for c in text1 if c.isupper())\n    else:\n        return ''\ndef count_lower_case(text1):\n    '''\n    Write a function to count the number of lower case letters in a given text.\n    '''\n    if text1:\n        return sum(1 for c in text1 if c.islower())\n    else:\n        return ''\ndef count_special_char(text1):\n    '''\n    Write a function to count the number of special characters in a given text.\n    '''\n    if text1:\n        return len(re.findall(r'\\W', text1))\n    else:\n        return ''\ndef count_space(text1):\n    '''\n    Write a function to count the number of spaces in a given text.\n    '''\n    if text1:\n        return text1.count(' ')\n    else:\n        return ''\ndef remove_multiple_space(text1):\n    '''\n    Write a function to remove multiple spaces in a given text.\n    '''\n    if text1:\n        return re.sub(' +',' ',text1)\n    else:\n        return ''\ndef remove_space(text1):\n    '''\n    Write a function to remove all spaces in a given text.\n    '''\n    if text1:\n        return re.sub(' +',' ',text1)\n    else:\n        return ''\ndef remove_newline(text1):\n    '''\n    Write a function to remove all newline characters in a given text.\n    '''\n    if text1:\n        return re.sub('\\n+','',text1)\n    else:\n        return ''\ndef replace_space(text1,text2):\n    '''\n    Write a function to replace all spaces in a given text with another given text.\n    '''\n    if text1 and text2:\n        return re.sub(' '+text2,' '+text1,text1)\n    else:\n        return ''\ndef replace_multiple_space(text1,text2):\n    '''\n    Write a function to replace multiple spaces in a given text with another given text.\n    '''\n    if text1 and text2:\n        return re.sub(' '+text2+' +',text2+' ',text1)\n    else:\n        return ''\ndef remove_blankspaces(text1):\n    '''\n    Write a function to remove all blank spaces in a given text.\n    '''\n    if text1:\n        return re.sub(' ','',text1)\n    else:\n        return ''\ndef replace_blankspaces(text1,text2):\n    '''\n    Write a function to replace all blank spaces in a given text with another given text.\n    '''\n    if text1 and text2:\n        return re.sub(' '+text2,' ',text1)\n    else:\n        return ''\ndef remove_blankspaces_before_space(text1):\n    '''\n    Write a function to remove all blank spaces before the first space in a given text.\n    '''\n    if text1:\n        return re.sub('^\\s+','',text1)\n    else:\n        return ''\ndef replace_blankspaces_before_space(text1,text2):\n    '''\n    Write a function to replace all blank spaces before the first space in a given text with another given text.\n    '''\n    if text1 and text2:\n        return re.sub('^\\s+'+text2,' '+text2,text1)\n    else:\n        return ''\ndef remove_blankspaces_after_space(text1):\n    '''\n    Write a function to remove all blank spaces after the first space in a given text.\n    '''\n    if text1:\n        return re.sub('\\s+$','',text1)\n    else:\n        return ''\ndef replace_blankspaces_after_space(text1,text2):\n    '''\n    Write a function to replace all blank spaces after the first space in a given text with another given text.\n    '''\n    if text1 and text2:\n        return re.sub('\\s+'+text2,text2+' ',text1)\n    else:\n        return ''\ndef convert_to_lower_case(text1):\n    '''\n    Write a function to convert all text to lower case in a given text.\n    '''\n    if text1:\n        return text1.lower()\n    else:\n        return ''\ndef convert_to_upper_case(text1):\n    '''\n    Write a function to convert all text to upper case in a given text.\n    '''\n    if text1:\n        return text1.upper()\n    else:\n        return ''\ndef change_first_letter_to_upper_case(text1):\n    '''\n    Write a function to convert the first character in a given text to upper case.\n    '''\n    if text1:\n        return text1.capitalize()\n    else:\n        return ''\ndef change_first_letter_to_lower_case(text1):\n    '''\n    Write a function to convert the first character in a given text to lower case.\n    '''\n    if text1:\n        return text1.lower().capitalize()\n    else:\n        return ''\ndef remove_first_char(text1):\n    '''\n    Write a function to remove first character from a given text.\n    '''\n    if text1:\n        return text1[1:]\n    else:\n        return ''\ndef add_first_char(text1,text2):\n    '''\n    Write a function to add first character to a given text.\n    '''\n    if text1 and text2:\n        return text2+text1[1:]\n    else:\n        return ''\ndef add_text(text1,text2):\n    '''\n    Write a function to add second given text after the first given text.\n    '''\n    if text1 and text2:\n        return text1+text2\n    else:\n        return ''\ndef remove_last_char(text1):\n    '''\n    Write a function to remove last character from a given text.\n    '''\n    if text1:\n        return text1[:-1]\n    els",
        "num_ids": 19
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(\"\\\"(.+?)\\\"\", text1)\n",
        "num_ids": 20
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\"([^\"]*)\"',text1)\n    #the regular expression is given for a part where is a part where there is a quotation mark and a part after it\n    #the pattern of the regular expression has 2 groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\"\n    #the first group in the regular expression is for the quotation marks and the second group in the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two groups which are the quotation marks and the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the first group in the pattern of the regular expression is for the quotation marks and the second group in the pattern of the regular expression is for the word between them\n    #the pattern of the regular expression is written as r\"\\\"([^\\\"]*)\\\".*\n    #the pattern of the regular expression has two group",
        "num_ids": 2011
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #text1 = \"Don\u2019t compare yourself with anyone in this world. Everybody has the right to be the best. Just because you don\u2019t have the personality of a winner does not mean you cannot become one.\"\n    #print(text1)\n    text1 = re.sub(r\"\\n\", \"\", text1)\n    text1 = re.sub(r\"\\t\", \"\", text1)\n    text1 = re.sub(r\"\u201c\", \"\", text1)\n    text1 = re.sub(r\"\u201d\", \"\", text1)\n    text1 = re.sub(r\"\\\"\", \"\", text1)\n    #print(text1)\n",
        "num_ids": 161
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # new_str = re.findall(r'\\\"(.+?)\\\"', text1)\n    # return new_str\n    # d = re.findall(r'\\\"(.+?)\\\"', text1)\n    # return d\n    # string = re.search(r'\\\"(.+?)\\\"', text1)\n    # return string.group(1)\n    # print(re.findall(r'\\\"(.+?)\\\"', text1))\n    # result = re.search(r'\\\"(.+?)\\\"', text1)\n    # return result.group(1)\n    \n    str_list = re.findall(r'\\\"(.+?)\\\"', text1)\n    return str_list\n",
        "num_ids": 175
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Hint: you can use list() and zip() functions to convert tuples to lists and vice versa.\n    return (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[0] * test_tup[3], test_tup[1] * test_tup[2], test_tup[1] * test_tup[3], test_tup[2] * test_tup[3])\n",
        "num_ids": 121
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # TODO: Write function body\n    return ()\n",
        "num_ids": 15
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([test_tup[i]*test_tup[i+1] for i in range(len(test_tup)-1)])\n",
        "num_ids": 39
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t_i * t_i_plus_1 for t_i, t_i_plus_1 in zip(test_tup, test_tup[1:]))\n",
        "num_ids": 46
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    list1 = []\n    for i in range(len(test_tup)):\n        if i!= (len(test_tup) - 1):\n            list1.append(test_tup[i] * test_tup[i + 1])\n    list1.insert(0, 1)\n    tup1 = tuple(list1)\n    return tup1\n",
        "num_ids": 92
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Example:\n    #   (1,2,3) => (1, 2, 6)\n    #   (3,6,9) => (3, 6, 18)\n    #   (1,4,2) => (1, 4, 8)\n    #   (6,8,5) => (6, 8, 40)\n    return tuple([ test_tup[i] * test_tup[i+1] for i in range(len(test_tup) - 1) ])\n",
        "num_ids": 121
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    mult = []\n    for i in range(len(test_tup) - 1):\n        mult.append(test_tup[i] * test_tup[i + 1])\n    return tuple(mult)\n",
        "num_ids": 54
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i*j for i,j in zip(test_tup,test_tup[1:]))\n",
        "num_ids": 30
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for index in range(0,len(test_tup)):\n        if index == 0:\n            result = (test_tup[0],)\n        else:\n            result = result + (test_tup[index] * test_tup[index+1],)\n    return result\n",
        "num_ids": 77
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x * y for x,y in zip(test_tup,test_tup[1:])])\n",
        "num_ids": 31
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1) == len(lst2)\n    return [x+y for (x,y) in zip(lst1,lst2)]\n",
        "num_ids": 42
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    out = []\n    for i in range(len(lst1)):\n        out.append(lst1[i] + lst2[i])\n    return out\n",
        "num_ids": 44
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    if len(lst1) == len(lst2):\n        for i in range(len(lst1)):\n            lst.append(lst1[i] + lst2[i])\n    return lst\n",
        "num_ids": 63
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n",
        "num_ids": 30
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_list = [None]*(len(lst1)+len(lst2))\n    i = 0\n    j = 0\n    k = 0\n    while i<len(lst1) and j<len(lst2):\n        new_list[k] = lst1[i]+lst2[j]\n        i+=1\n        j+=1\n        k+=1\n    while i<len(lst1):\n        new_list[k] = lst1[i]\n        i+=1\n        k+=1\n    while j<len(lst2):\n        new_list[k] = lst2[j]\n        j+=1\n        k+=1\n    return new_list\n",
        "num_ids": 174
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum=[]\n    for i in range(len(lst1)):\n        sum.append(lst1[i]+lst2[i])\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst_sum=[]\n    for i in range(len(lst1)):\n        lst_sum.append(lst1[i]+lst2[i])\n    return lst_sum",
        "num_ids": 51
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\nprint(sum_list([1,2,3],[4,5,6]))\n",
        "num_ids": 70
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    n=len(lst1)\n    m=len(lst2)\n    if n!=m:\n        print('The lists should be of equal length.')\n        return None\n    else:\n        sum=[]\n        for i in range(n):\n            sum.append(lst1[i]+lst2[i])\n        return sum\n",
        "num_ids": 87
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(k for k, _ in groupby(nums))\ndef main():\n    print(consecutive_duplicates([1,1,1,2,2,2,3,4,4,4,4,5,5,6,7,7,7,7,8]))\n",
        "num_ids": 74
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    # I feel like this is O(n^2) time complexity, and O(1) space\n    \n    def remove_dups(nums):\n        i = 0\n        while i < len(nums)-1:\n            if nums[i] == nums[i+1]:\n                del nums[i]\n            else:\n                i += 1\n        return nums\n    \n    return remove_dups(nums)\n    \nprint consecutive_duplicates([0,0,1,1,1,2,2,3,3,4])\n",
        "num_ids": 138
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    a = []\n    for k, g in groupby(nums):\n        a.append(k)\n    return a\n",
        "num_ids": 32
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for _, group in groupby(nums):\n        group = list(group)\n        if len(group) > 1:\n            nums[:] = nums[:nums.index(group[0])] + nums[nums.index(group[-1])+1:]\n    return nums\n",
        "num_ids": 76
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n",
        "num_ids": 18
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    for key, group in groupby(nums):\n        group_list = list(group)\n        group_list.append(key)\n        res.append(list(group))\n    for i in range(len(res)):\n        if len(res[i]) > 1:\n            for j in range(len(res[i]) - 1):\n                res[i].pop()\n    return res\n",
        "num_ids": 102
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for x, y in groupby(nums):\n        print(x, y)\n    # for item in nums:\n    #     if nums.count(item) > 1:\n    #         nums.remove(item)\n    # return nums\nnums = [0,0,1,2,3,3,3,3,4,4,5,5,6,6,7,7,8,8,9,9]\nprint(consecutive_duplicates(nums)",
        "num_ids": 122
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums)<=1:\n        return len(nums)\n    else:\n        output_list=[]\n        counter=0\n        for num,group in groupby(nums):\n            if num!=None:\n                output_list.append(num)\n                counter+=1\n        return counter,output_list\n",
        "num_ids": 82
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    temp_list = []\n    for key, group in groupby(nums):\n        temp_list.append(key)\n    return temp_list\n",
        "num_ids": 38
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(g) for k, g in groupby(nums)]\n",
        "num_ids": 21
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    s = math.pi*(r**2)*h/3\n    return s\n",
        "num_ids": 24
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return r*r*math.pi\n",
        "num_ids": 12
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Solve for lateral surface area of a cone.\n    \n    #Convert to appropriate units.\n    r=r*(10**-6)\n    h=h*(10**-6)\n    \n    #Calculate surface area.\n    A=3.14159265358979323846264338327950288*r**2+(math.pi*r**2*h)\n    \n    #Convert back to metres.\n    A=A*(10**-6)\n    \n    return A\n    \n",
        "num_ids": 127
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi*r*r + math.pi*r*h\n    return surface_area\n",
        "num_ids": 29
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*(r**2+r*h+math.sqrt(r**2+h**2+2*r*h*math.cos(math.pi/3)))\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given the length, width and height.\n    '''\n    import math\n    return 2*(l*w+l*h+w*h)\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and height.\n    '''\n    import math\n    return math.pi*r*(r+h)\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius.\n    '''\n    import math\n    return 4*math.pi*r**2\n    \ndef area_trapezium(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezium given base 1, base 2 and the height.\n    '''\n    import math\n    return 0.5*(b1+b2)*h\n    \ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the area of a parallelogram given the base and height.\n    '''\n    import math\n    return b*h\n    \ndef area_rectangle(l,b):\n    '''\n    Write a function to find the area of a rectangle given the length and breadth.\n    '''\n    return l*b\n    \ndef area_square(side):\n    '''\n    Write a function to find the area of a square given the side.\n    '''\n    return side**2\n    \ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle given the radius.\n    '''\n    import math\n    return math.pi*(r**2)\n    \ndef area_ellipse(r1,r2):\n    '''\n    Write a function to find the area of an ellipse given the radius of the horizontal and vertical axis.\n    '''\n    import math\n    return math.pi*r1*r2\n    \ndef area_sector(r,angle):\n    '''\n    Write a function to find the area of a sector given the radius and the angle subtended by the sector.\n    '''\n    import math\n    return r*r*math.sin(angle)\n    \ndef area_tria(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezium given base 1, base 2 and the height.\n    '''\n    import math\n    return 0.5*(b1*h)+(b2*h)\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given the radius and the height.\n    '''\n    import math\n    return math.pi*(r**2+r*h+math.sqrt(r**2+h**2+2*r*h*math.cos(math.pi/3)))\n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid given the length, width and height.\n    '''\n    import math\n    return l*w*h\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given the radius and height.\n    '''\n    import math\n    return math.pi*r*h\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given the radius.\n    '''\n    import math\n    return (4/3)*math.pi*(r**3)\n    \ndef volume_trapezium(b1,b2,h):\n    '''\n    Write a function to find the volume of a trapezium given base 1, base 2 and the height.\n    '''\n    import math\n    return (b1+b2)*h/3\n    \ndef volume_parallelogram(b,h):\n    '''\n    Write a function to find the volume of a parallelogram given the base and height.\n    '''\n    import math\n    return b*h\n    \ndef volume_rectangle(l,b):\n    '''\n    Write a function to find the volume of a rectangle given the length and breadth.\n    '''\n    return l*b\n    \ndef volume_square(side):\n    '''\n    Write a function to find the volume of a square given the side.\n    '''\n    return side**3\n    \ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle given the radius.\n    '''\n    import math\n    return (4/3)*math.pi*(r**3)\n    \ndef volume_ellipse(r1,r2):\n    '''\n    Write a function to find the volume of an ellipse given the radius of the horizontal and vertical axis.\n    '''\n    import math\n    return math.pi*r1*r2\n    \ndef volume_sector(r,angle):\n    '''\n    Write a function to find the volume of a sector given the radius and the angle subtended by the sector.\n    '''\n    import math\n    return r*r*math.sin(angle)\n    \ndef volume_tria(b1,b2,h):\n    '''\n    Write a function to find the volume of a trapezium given base 1, base 2 and the height.\n    '''\n    import math\n    return (b1*h)+(b2*h)/3\n    \ndef moles_of_substance(molar_mass, mass):\n    '''\n    Write a function to find the moles of substance given the molar mass and the mass.\n    '''\n    import math\n    return mass/molar_mass\n    \ndef moles_of_substance_concentration(molar_mass, mass, volume):\n    '''\n    Write a function to find the moles of substance given the molar mass, the mass and the volume.\n    '''\n    return (mass/volume)/molar_mass\n    \ndef moles_of_substance_mass(molar_mass, volume):\n    '''\n    Write a function to find the moles of substance given the molar mass and the volume.\n    '''\n    import math\n    return (volume*molar_mass)/1.6605\n    \ndef molar_mass(mole_mass, mass):\n    '''\n    Write a function to find the molar mass given the molar mass and the mass.\n    '''\n    return mass/mole_mass\n    \ndef molar_mass_concentration(mole_mass, mass, volume):\n    '''\n    Write a function to find the molar mass given the molar mass and the mass and the volume.\n    '''\n    return (mass/volume)/mole_mass\n    \ndef molar_mass_volume(mole_mass, volume):\n    '''\n    Write a function to find the molar mass given the molar mass and the volume.\n    '''\n    import math\n    return (volume*mole_mass)/1.6605\n    \ndef molar_mass_volume_concentration(molar_mass, mass, volume):\n    '''\n    Write a function to find the molar mass given the molar mass, the mass and the volume.\n    '''\n    import math\n    return (mass/volume)/molar_mass\n    \ndef molar_mass_volume_mass(molar_mass, mass):\n    '''\n    Write a function to find the molar mass given the molar mass and the mass.\n    '''\n    import math\n    return (mass/1.6605)/molar_mass\n    \ndef molar_mass_volume_mass_concentration(molar_mass, mass, volume):\n    '''\n    Write a function to find the molar mass given the molar mass, the mass, the volume and the concentration.\n    '''\n    import math\n    return (mass/volume)/molar_mass\n    \ndef ",
        "num_ids": 22
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #r=float(input(\"Enter the radius of the cone: \"))\n    #h=float(input(\"Enter the height of the cone: \"))\n    x=3.14*(r**2)*h\n    print(\"The lateral surface area of the cone is: %.2f\"%(x))\n    return x\n",
        "num_ids": 78
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (3.14 * (r**2)) + (2 * 3.14 * r * h)\n",
        "num_ids": 27
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    try:\n        return math.pi*r**2+math.pi*r*h\n    except:\n        return 'Error'\n",
        "num_ids": 34
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    base=2*math.pi*r*h\n    top=math.pi*r**2\n    return base+top\n",
        "num_ids": 32
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surfacearea = 3.14*r*r + 3.14*r*h\n    return surfacearea\n",
        "num_ids": 27
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace('.',':').replace(',','.').replace(' ','')\n",
        "num_ids": 24
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ', ':')\\\n    .replace('.', ':')\\\n    .replace(',', ':')\n",
        "num_ids": 35
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #return re.sub('\\s|\\.',':',text)\n    return text.replace(' ',':').replace(',',':').replace('.',':')\n",
        "num_ids": 43
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n",
        "num_ids": 43
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\".\", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\" \", \":\")\n    return text\n",
        "num_ids": 43
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',',' ')\n    text = text.replace('.',' ')\n    return text\n",
        "num_ids": 42
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('.', ':')\n    text = text.replace(',', ':')\n    text = text.replace(' ', ':')\n    return text\n",
        "num_ids": 44
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # find replace all matches of special characters\n    text = re.sub(r'[\\s.]', ':', text)\n    return text\n",
        "num_ids": 36
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # create a list for storing the replaced text\n    res = []\n    # replace all the special characters\n    for word in text.split():\n        # check if the word is a special character\n        if re.match(r\"[\\s\\.,]\", word):\n            # append a colon to the word\n            res.append(\"{}:\".format(word))\n        else:\n            # append the word to the list\n            res.append(word)\n    # return the list\n    return \" \".join(res)\n",
        "num_ids": 121
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[.]',' : ',text)\n    text = re.sub('[,]',' : ',text)\n    text = re.sub('[ ]',' : ',text)\n    return text\ndef get_comma_num(text):\n    '''\n    Write a function that returns the number of times the word \u201ccomma\u201d appears in the given text.\n    '''\n    return len(re.findall(r'comma',text))\ndef get_hyphen_num(text):\n    '''\n    Write a function that returns the number of times the word \u201chyphen\u201d appears in the given text.\n    '''\n    return len(re.findall(r'hyphen',text))\ndef get_period_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cperiod\u201d appears in the given text.\n    '''\n    return len(re.findall(r'period',text))\ndef get_colon_num(text):\n    '''\n    Write a function that returns the number of times the word \u201ccolon\u201d appears in the given text.\n    '''\n    return len(re.findall(r'colon',text))\ndef get_dollar_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cdollar\u201d appears in the given text.\n    '''\n    return len(re.findall(r'dollar',text))\ndef get_space_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cspace\u201d appears in the given text.\n    '''\n    return len(re.findall(r'space',text))\ndef get_slash_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cslash\u201d appears in the given text.\n    '''\n    return len(re.findall(r'slash',text))\ndef get_at_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cat\u201d appears in the given text.\n    '''\n    return len(re.findall(r'at',text))\ndef get_percent_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cpercent\u201d appears in the given text.\n    '''\n    return len(re.findall(r'percent',text))\ndef get_tilde_num(text):\n    '''\n    Write a function that returns the number of times the word \u201ctilde\u201d appears in the given text.\n    '''\n    return len(re.findall(r'tilde',text))\ndef get_question_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cquestion\u201d appears in the given text.\n    '''\n    return len(re.findall(r'question',text))\ndef get_star_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cstar\u201d appears in the given text.\n    '''\n    return len(re.findall(r'star',text))\ndef get_hash_num(text):\n    '''\n    Write a function that returns the number of times the word \u201chash\u201d appears in the given text.\n    '''\n    return len(re.findall(r'hash',text))\ndef get_hashtag_num(text):\n    '''\n    Write a function that returns the number of times the word \u201chashtag\u201d appears in the given text.\n    '''\n    return len(re.findall(r'hashtag',text))\ndef get_dollar_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cdollar\u201d appears in the given text.\n    '''\n    return len(re.findall(r'dollar',text))\ndef get_apostrophe_num(text):\n    '''\n    Write a function that returns the number of times the word \u201capostrophe\u201d appears in the given text.\n    '''\n    return len(re.findall(r'apostrophe',text))\ndef get_exclamation_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cexclamation\u201d appears in the given text.\n    '''\n    return len(re.findall(r'exclamation',text))\ndef get_punct_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cpunctuation\u201d appears in the given text.\n    '''\n    return len(re.findall(r'punctuation',text))\ndef get_url_num(text):\n    '''\n    Write a function that returns the number of times the word \u201curl\u201d appears in the given text.\n    '''\n    return len(re.findall(r'url',text))\ndef get_email_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cemail\u201d appears in the given text.\n    '''\n    return len(re.findall(r'email',text))\ndef get_ip_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cip\u201d appears in the given text.\n    '''\n    return len(re.findall(r'ip',text))\ndef get_phone_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cphone\u201d appears in the given text.\n    '''\n    return len(re.findall(r'phone',text))\ndef get_word_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cword\u201d appears in the given text.\n    '''\n    return len(re.findall(r'word',text))\ndef get_number_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cnumber\u201d appears in the given text.\n    '''\n    return len(re.findall(r'number',text))\ndef get_numbers_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cnumbers\u201d appears in the given text.\n    '''\n    return len(re.findall(r'numbers',text))\ndef get_letters_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cletters\u201d appears in the given text.\n    '''\n    return len(re.findall(r'letters',text))\ndef get_alphabet_num(text):\n    '''\n    Write a function that returns the number of times the word \u201calphabet\u201d appears in the given text.\n    '''\n    return len(re.findall(r'alphabet',text))\ndef get_special_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cspecial\u201d appears in the given text.\n    '''\n    return len(re.findall(r'special',text))\ndef get_english_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cenglish\u201d appears in the given text.\n    '''\n    return len(re.findall(r'english',text))\ndef get_upper_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cupper\u201d appears in the given text.\n    '''\n    return len(re.findall(r'upper',text))\ndef get_lower_num(text):\n    '''\n    Write a function that returns the number of times the word \u201clower\u201d appears in the given text.\n    '''\n    return len(re.findall(r'lower',text))\ndef get_first_name_num(text):\n    '''\n    Write a function that returns the number of times the word \u201cfirst name\u201d appears in the given text.\n    '''\n    return len(re.findall(r'first name',text))\ndef get_last_name_num(text):\n    '''\n    Write a function that returns the number of times the word \u201clast name\u201d appears in the given text.\n    '''\n    return len(re.findall(r'last name',tex",
        "num_ids": 17
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    if left >= len(A) or A[left]!= x:\n        return -1\n    return left\n",
        "num_ids": 92
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n",
        "num_ids": 78
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Use binary search\n    if not A:\n        return -1\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if x > A[mid]:\n            start = mid + 1\n        elif x < A[mid]:\n            end = mid - 1\n        else:\n            if mid == 0 or A[mid - 1]!= A[mid]:\n                return mid\n            else:\n                end = mid - 1\n    return -1\n",
        "num_ids": 128
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n",
        "num_ids": 17
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A)\n    \n    while start < end:\n        mid = (start + end) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                end = mid\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid\n    \n    return None\n",
        "num_ids": 109
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A)-1\n",
        "num_ids": 15
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    #using binary search\n    # O(logn)\n    # O(1)\n    low = 0\n    high = len(A) - 1\n",
        "num_ids": 38
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n",
        "num_ids": 17
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A)\n    while lo < hi:\n        mid = (lo + hi)//2\n        if A[mid] < x:\n            lo = mid+1\n        else:\n            hi = mid\n    return -1 if lo == len(A) else lo\n",
        "num_ids": 73
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start if A[start] == x else -1\n",
        "num_ids": 79
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_products = 0\n    for start in range(len(arr)):\n        for end in range(start, len(arr)):\n            prod = 1\n            for num in arr[start:end+1]:\n                prod *= num\n            sum_of_products += prod\n    return sum_of_products\n",
        "num_ids": 80
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = []\n    prod_list = []\n    total = 1\n    \n    for i in range(len(arr)):\n        total *= arr[i]\n        prod.append(total)\n    \n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            prod_list.append(prod[j]/prod[i])\n    \n    return prod_list\n",
        "num_ids": 109
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(0,n):\n        for j in range(i,n):\n            p = 1\n            for k in range(i,j+1):\n                p = p * arr[k]\n            sum = sum + p\n    return sum\n",
        "num_ids": 76
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum=0\n    for i in range(0,len(arr)):\n        if(i==0):\n            sum=sum+arr[i]\n        else:\n            sum=sum+arr[i]*(i+1)\n    return sum\nprint(sum_Of_Subarray_Prod([1, 2, 3, 4]))\n",
        "num_ids": 85
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    s = 0\n    # iterate over all subarrays\n    for i in range(n):\n        temp = 1\n        for j in range(i, n):\n            temp *= arr[j]\n            s += temp\n    return s\n",
        "num_ids": 68
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum([(sum([arr[i] for i in range(n+1)])*sum([arr[i] for i in range(n-1)])) for n in range(len(arr))])\n",
        "num_ids": 51
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_len = len(arr)\n    product_sums = []\n    for index, element in enumerate(arr):\n        product = 1\n        for num in arr[index:]:\n            product = product*num\n        product_sums.append(product)\n    return product_sums\n",
        "num_ids": 72
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    # for each element arr[i], update prefix product\n    for i in range(n):\n        sum = sum + arr[i] * prefix_prod(arr,i,n)\n    return sum\n",
        "num_ids": 63
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_len = len(arr)\n    sum_of_prod_list = []\n    sum_of_prod = 0\n    for i in range(arr_len):\n        for j in range(i+1, arr_len+1):\n            sum_of_prod = sum_of_prod + arr[i:j]\n",
        "num_ids": 84
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n=len(arr)\n    arr.sort()\n    total=0\n    for i in range(n):\n        sum_of_products=arr[i]*(i+1)\n        for j in range(i+1,n):\n            sum_of_products=sum_of_products*(arr[j]*(j+1))\n            total=total+sum_of_products\n    return total\n",
        "num_ids": 101
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Set the bits of first and last digit to 0\n    # because we have to consider only the middle digits\n    n = n & 0b10101101101101111011111111111111\n",
        "num_ids": 46
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert the number into binary\n    binary_string = bin(n)\n    # print(binary_string)\n    # Remove the first two bits\n    new_string = binary_string[2:]\n    # print(new_string)\n    # print(type(new_string))\n",
        "num_ids": 69
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #return (n & 0xAAAA) >> 1\n    return (n & 0x5555)\n",
        "num_ids": 26
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n^(n-1)\n",
        "num_ids": 12
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # The idea is to set all bits of the \n    # number except the first and the last. \n    n ^= (1 << 0) + (1 << (n.bit_length() - 1)) \n    return n \n",
        "num_ids": 57
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = n & 0b11111111111111111111111111111111\n    n &= 0b1111111111111111111111111111111111\n    n |= mask\n",
        "num_ids": 40
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n ^ (n >> 1)) \n    return n \n",
        "num_ids": 20
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (((n & 0xaaaaaaaa) >> 1) | ((n & 0x55555555) << 1))\n",
        "num_ids": 31
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # write code here\n    return n ^ ((n & (n << 1)) >> 1)\n    \n",
        "num_ids": 26
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Set the first bit\n    first = 1 << 0\n    # Set the last bit\n    last = 1 << (n.bit_length() - 1)\n    # toggle first and last bit\n    return n ^ first | last\ndef toggle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n >> 1)\n    return n ^ (n << 1)\n    # return n ^ n >> 1 # bitwise operation\ndef isPowerOfTwo(n):\n    '''\n    Write a python function to check if a number is power of 2. https://www.geeksforgeeks.org/python-program-to-check-if-number-is-power-of-two/\n    '''\n    if n == 0:\n        return False\n    while n % 2 == 0:\n        n >>= 1\n    return n == 1\ndef nextPowerOfTwo(n):\n    '''\n    Write a python function to check if a number is power of 2. https://www.geeksforgeeks.org/python-program-to-check-if-number-is-power-of-two/\n    '''\n    if n == 0:\n        return 0\n    return 2**(n-1).bit_length()\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime. https://www.geeksforgeeks.org/python-program-to-check-if-number-is-prime/\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n/2)):\n            if n % i == 0:\n                return False\n        return True\ndef all_primes_in_range(n1, n2):\n    '''\n    Write a python function to return all prime numbers in a given range. https://www.geeksforgeeks.org/python-program-to-print-all-prime-numbers-in-a-given-range/\n    '''\n    prime_nums = []\n    if n1 < 2:\n        return []\n    if n1 == 2:\n        prime_nums.append(2)\n        return prime_nums\n    for i in range(2, n2):\n        prime = True\n        for j in range(2, int(i/2) + 1):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            prime_nums.append(i)\n    return prime_nums\ndef is_in_range(n1, n2):\n    '''\n    Write a python function to check if a number is in a given range. https://www.geeksforgeeks.org/python-program-check-if-number-in-a-given-range/\n    '''\n    return n2 >= n1\ndef get_number_of_set_bits(n):\n    '''\n    Write a python function to return number of set bits of a number. https://www.geeksforgeeks.org/python-program-to-count-set-bits-in-binary-representation-of-an-integer/\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n-1)\n    return count\ndef find_missing_number(nums):\n    '''\n    Write a python function to return the missing number from a given list of numbers. https://www.geeksforgeeks.org/python-program-to-find-missing-number-in-a-list/\n    '''\n    nums = sorted(nums)\n    if nums[0] > 0:\n        return 0\n    for i in range(len(nums)-1):\n        if nums[i] + 1!= nums[i+1]:\n            return nums[i] + 1\n    return nums[-1] + 1\ndef find_missing_number2(nums):\n    '''\n    Write a python function to return the missing number from a given list of numbers. https://www.geeksforgeeks.org/python-program-to-find-missing-number-in-a-list/\n    '''\n    nums = sorted(nums)\n    for i in range(1, len(nums)):\n        if nums[i-1] + 1!= nums[i]:\n            return nums[i-1] + 1\n    return nums[-1] + 1\ndef find_missing_number3(nums):\n    '''\n    Write a python function to return the missing number from a given list of numbers. https://www.geeksforgeeks.org/python-program-to-find-missing-number-in-a-list/\n    '''\n    nums = sorted(nums)\n    i, j = 0, 0\n    while i < len(nums):\n        j = nums[i]\n        if nums[i] < len(nums) and nums[i]!= nums[j]:\n            nums[i], nums[j] = nums[j], nums[i]\n        else:\n            i += 1\n    for i in range(len(nums)):\n        if i!= nums[i]:\n            return i\n    return len(nums)\ndef sum_of_bits(n):\n    '''\n    Write a python function to return the sum of bits of a number. https://www.geeksforgeeks.org/sum-of-bits-in-binary-representation-of-an-integer/\n    '''\n    if n == 0:\n        return 0\n    count = 0\n    while n:\n        count += 1\n        n = n & (n-1)\n    return count\ndef set_bits(n):\n    '''\n    Write a python function to set the bits of a number. https://www.geeksforgeeks.org/set-bits-in-binary-representation-of-an-integer/\n    '''\n    if n == 0:\n        return 0\n    return n + (n - 1)\ndef number_of_bits(n):\n    '''\n    Write a python function to count the number of bits of a number. https://www.geeksforgeeks.org/count-set-bits-number/\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n-1)\n    return count\ndef clear_bits(n):\n    '''\n    Write a python function to clear the bits of a number. https://www.geeksforgeeks.org/clear-bits-in-binary-representation-of-an-integer/\n    '''\n    return n & (~(n + 1))\ndef clear_bits2(n):\n    '''\n    Write a python function to clear the bits of a number. https://www.geeksforgeeks.org/clear-bits-in-binary-representation-of-an-integer/\n    '''\n    # 1 0 1\n    # 2 2 1\n    # 1 0 1\n    # 1 1 1\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # 2 2 2\n    # ",
        "num_ids": 287
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    print('Input', a, 'and', x)\n    # a.sort()\n    # print(a)\n    left = bisect.bisect_left(a, x)\n    print('Left index is', left)\n    print('Index in a is', left-1)\n    print('Left insertion point is', a[left-1])\n    return left - 1\n",
        "num_ids": 89
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == []:\n        return 0\n    return bisect.bisect_left(a,x)\n",
        "num_ids": 28
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Implement your function below.\n    for i in range(len(a)):\n        if x <= a[i]:\n            return i\n",
        "num_ids": 35
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #a.sort()\n    #print(a)\n    l = 0\n    r = len(a)-1\n    while l < r:\n        mid = (l+r)//2\n        if x > a[mid]:\n            l = mid+1\n        else:\n            r = mid\n    return l\n",
        "num_ids": 77
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x > a[-1]:\n        return len(a)\n    if x < a[0]:\n        return 0\n    for i in range(len(a)):\n        if x > a[i]:\n            return i\n    return len(a)\n",
        "num_ids": 64
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    bisect.insort(a, x)\n    print(a)\n    print(bisect.bisect_left(a, x))\n    print(bisect.bisect_left(a, x))\n    print(bisect.bisect_left(a, x))\n",
        "num_ids": 68
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    insertion_point = bisect.bisect_left(a, x)\n    if insertion_point == 0:\n        return -1\n    elif insertion_point < len(a):\n        if a[insertion_point] == x:\n            return insertion_point\n        else:\n            return insertion_point - 1\n    else:\n        return len(a)\n",
        "num_ids": 89
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    insertion_point = bisect.bisect_left(a, x)\n    return insertion_point\n",
        "num_ids": 27
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    length = len(a)\n    if length == 0:\n        return 0\n    if x < a[0]:\n        return 0\n    if x > a[-1]:\n        return length\n    index = bisect.bisect_left(a, x)\n    return index\n",
        "num_ids": 68
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Initialize i\n    i = -1\n",
        "num_ids": 14
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    return False\nprint(check_str(\"This is good\")) \nprint(check_str(\"This is not good\")) \n",
        "num_ids": 63
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str1(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str2(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str3(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str4(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str5(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str6(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str7(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str8(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str9(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str10(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str11(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str12(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str13(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str14(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str15(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str16(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str17(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str18(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str19(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str20(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str21(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str22(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str23(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str24(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    else: \n        return False\ndef check_str25(string): \n    '''\n    Write a functio",
        "num_ids": 8
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if(re.match(regex, string)): \n        return True\n    else: \n        return False\n",
        "num_ids": 58
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        return True\n    else: \n        return False\n        \ndef check_str_2(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using list comprehension.\n    '''\n    if re.search('^[a-zA-Z][a-zA-Z0-9_]*', string): \n        return True\n    else: \n        return False\n        \ndef check_str_3(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using generator expression.\n    '''\n    return any(i for i in string if i.isalpha()) \n        ",
        "num_ids": 20
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pass # remove pass and write your code here\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex,string)): \n        return True\n    return False\nprint(check_str('Testing'))\n",
        "num_ids": 35
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        print(\"Given String is starting with a vowel\") \n    else: \n        print(\"Given String is not starting with a vowel\") \n",
        "num_ids": 47
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\n",
        "num_ids": 16
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if (re.search(regex,string)): \n        return True\n    else: \n        return False\n",
        "num_ids": 30
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    m = re.match(regex, string) \n    if m: \n        return \"The given string is starting with a vowel.\"\n    else: \n        return \"The given string is not starting with a vowel.\"\n    #Remove pass and write your logic here\n",
        "num_ids": 64
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += 1/i\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return n * geometric_sum(n - 1)\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    return n * (1 - geometric_sum(n - 1))\n",
        "num_ids": 29
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return ((2**n)-1) + geometric_sum(n-1)\n",
        "num_ids": 36
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 2 * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # base case\n    if n == 1:\n        return 1\n    else:\n        return 2 * geometric_sum(n - 1)\n",
        "num_ids": 35
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 2*geometric_sum(n-1)\n",
        "num_ids": 43
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    sum = n-1\n    for i in range(1,n):\n        sum *= n-i\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    x=n\n    total=0\n    while(x>0):\n        total+=x\n        x-=1\n    # print(total)\n    return int(total)\n",
        "num_ids": 45
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return n * (n + 1) // 2\n    \ndef find_Triangular_Number(n): \n    '''\n    Write a python function to find the triangular number for the index given by find_Index function\n    '''\n    index = find_Index(n)\n    return index * (index + 1) // 2\n",
        "num_ids": 24
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    j = 1\n    while(True): \n        if len(str(i*j)) == n: \n            break\n        else: \n            i += 1\n            j += 1\n    return i*j\n",
        "num_ids": 58
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    ans = 0\n    x = 1\n    while (ans==0):\n        x+=1\n        ans = len(str(x*(x+1)/2))\n    return(x,ans)\n    \ndef print_triangular_num(index,num_digits):\n    \"\"\"\n    Write a python function to print the first n triangular numbers.\n    \"\"\"\n    print(\"The first n triangular numbers with\",num_digits,\"digits are:\")\n    print(\"index, n_digits,  triangular_num,  n_digits_str:\")\n    for i in range(1,index+1):\n        print(i,num_digits, i*(i+1)//2,len(str(i*(i+1)//2)))\n        \ndef print_consecutive_tri_num(index,num_digits):\n    \"\"\"\n    Write a python function to print the first n triangular numbers.\n    \"\"\"\n    print(\"The first n triangular numbers with\",num_digits,\"digits are:\")\n    print(\"index, n_digits,  triangular_num,  n_digits_str:\")\n    for i in range(1,index+1):\n        print(i,num_digits, str(i*(i+1)//2)[:num_digits],len(str(i*(i+1)//2)))\n",
        "num_ids": 327
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # dp[i] stores the smallest triangular number with i+1 digits\n    dp = [0]*(n+1)\n    dp[1] = 1\n    for i in range(2,n+1):\n        dp[i] = 9*dp[i-1]\n        for j in range(1,i):\n            dp[i] = min(dp[i],dp[j]*(i-j))\n    return dp[n]\n",
        "num_ids": 111
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n <= 1: \n        return 0\n    else: \n        return (n * (n + 1)) / 2\ndef is_Triangular(n): \n    '''\n    Write a python function to check if the given number is a triangular number. https://www.geeksforgeeks.org/python-check-given-number-is-triangular-number-or-not/\n    '''\n    if n < 0: \n        return False\n    else: \n        return n * (n + 1) / 2 == n \ndef is_Pentagonal(n): \n    '''\n    Write a python function to check if the given number is a pentagonal number. https://www.geeksforgeeks.org/python-check-given-number-is-pentagonal-number-or-not/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = (1 + (1 + 24 * n) ** 0.5) / 6 \n        return math.floor(n) == n \ndef is_Hexagonal(n): \n    '''\n    Write a python function to check if the given number is a hexagonal number. https://www.geeksforgeeks.org/python-check-given-number-is-hexagonal-number-or-not/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = (1 + (1 + 8 * n) ** 0.5) / 4 \n        return math.floor(n) == n \ndef is_Heptagonal(n): \n    '''\n    Write a python function to check if the given number is a heptagonal number. https://www.geeksforgeeks.org/python-check-given-number-is-heptagonal-number-or-not/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = (1 + (1 + 40 * n) ** 0.5) / 10 \n        return math.floor(n) == n \ndef is_Octagonal(n): \n    '''\n    Write a python function to check if the given number is a octagonal number. https://www.geeksforgeeks.org/python-check-given-number-is-octagonal-number-or-not/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = (1 + (1 + 3 * n) ** 0.5) / 3 \n        return math.floor(n) == n \ndef is_Nontagonal(n): \n    '''\n    Write a python function to check if the given number is a nontagonal number. https://www.geeksforgeeks.org/python-check-given-number-is-nontagonal-number-or-not/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = (1 + (1 + 2 * n) ** 0.5) / 2 \n        return math.floor(n) == n \ndef find_Next_Triangular(n): \n    '''\n    Write a python function to find the next triangular number from the given number. https://www.geeksforgeeks.org/python-next-triangular-number/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = (n * (n + 1)) / 2 \n        return math.floor(n) == n \ndef find_Prev_Triangular(n): \n    '''\n    Write a python function to find the previous triangular number from the given number. https://www.geeksforgeeks.org/python-previous-triangular-number/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = (n - 1) * (n / 2) \n        return math.floor(n) == n \ndef find_Next_Pentagonal(n): \n    '''\n    Write a python function to find the next pentagonal number from the given number. https://www.geeksforgeeks.org/python-next-pentagonal-number/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = ((math.sqrt(24 * n + 1) + 1) / 6) \n        return math.floor(n) == n \ndef find_Prev_Pentagonal(n): \n    '''\n    Write a python function to find the previous pentagonal number from the given number. https://www.geeksforgeeks.org/python-previous-pentagonal-number/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = ((math.sqrt(24 * n + 1) - 1) / 6) \n        return math.floor(n) == n \ndef find_Next_Hexagonal(n): \n    '''\n    Write a python function to find the next hexagonal number from the given number. https://www.geeksforgeeks.org/python-next-hexagonal-number/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = ((math.sqrt(8 * n + 1) + 1) / 4) \n        return math.floor(n) == n \ndef find_Prev_Hexagonal(n): \n    '''\n    Write a python function to find the previous hexagonal number from the given number. https://www.geeksforgeeks.org/python-previous-hexagonal-number/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = ((math.sqrt(8 * n + 1) - 1) / 4) \n        return math.floor(n) == n \ndef find_Next_Heptagonal(n): \n    '''\n    Write a python function to find the next heptagonal number from the given number. https://www.geeksforgeeks.org/python-next-heptagonal-number/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = ((math.sqrt(40 * n + 1) + 1) / 10) \n        return math.floor(n) == n \ndef find_Prev_Heptagonal(n): \n    '''\n    Write a python function to find the previous heptagonal number from the given number. https://www.geeksforgeeks.org/python-previous-heptagonal-number/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = ((math.sqrt(40 * n + 1) - 1) / 10) \n        return math.floor(n) == n \ndef find_Next_Octagonal(n): \n    '''\n    Write a python function to find the next octagonal number from the given number. https://www.geeksforgeeks.org/python-next-octagonal-number/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = ((math.sqrt(3 * n + 1) + 1) / 3) \n        return math.floor(n) == n \ndef find_Prev_Octagonal(n): \n    '''\n    Write a python function to find the previous octagonal number from the given number. https://www.geeksforgeeks.org/python-previous-octagonal-number/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = ((math.sqrt(3 * n + 1) - 1) / 3) \n        return math.floor(n) == n \ndef find_Next_Nontagonal(n): \n    '''\n    Write a python function to find the next nontagonal number from the given number. https://www.geeksforgeeks.org/python-next-nontagonal-number/\n    '''\n    if n < 0: \n        return False\n    else: \n        n = ((math.sqrt(2 * n + 1) + 1) / 2) \n        return math.floor(n) == n \ndef find_Prev_Nontagonal(n): \n    '''\n    Write a python function to find the previous nontagonal number from the given number. https://www.geeksforgeeks.org/python-previous",
        "num_ids": 34
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = n \n    x = n \n    while True: \n        num = int(x * (x + 1) / 2) \n        x = x + 1\n        if num > 1e12: \n            break\n    \n    start = int(num)\n    end = int(num) \n    while start <= end: \n        mid = int((start + end) / 2) \n        \n        if mid**2 == num: \n            return mid \n        \n        elif mid**2 < num: \n            start = mid + 1\n            ans = mid \n            \n        else: \n            end = mid - 1\n    return ans \ndef is_triangular(n): \n    '''\n    Write a python function to find whether a given number is a triangular number or not. https://www.geeksforgeeks.org/check-whether-a-given-number-is-a-triangular-number/\n    '''\n    n = n \n    if n < 0: \n        return False\n    \n    sq = int(math.sqrt(n)) \n    \n    for i in range(1, sq + 1): \n        if (n % i == 0): \n            \n            if (i == sq) and (sq * sq!= n): \n                return False\n            \n            else: \n                return True\n    return False\ndef find_triangular_number(n): \n    '''\n    Write a python function to find the n-th triangular number. https://www.geeksforgeeks.org/find-nth-triangular-number/\n    '''\n    n = n \n    num = 0\n    for i in range(1, n + 1): \n        num = num + i \n        \n    return num \ndef generate_n_digit_triangular_number(n): \n    '''\n    Write a python function to generate n-digit triangular number. https://www.geeksforgeeks.org/generate-n-digit-triangular-number/\n    '''\n    n = n \n    num = 1\n    for i in range(1, n + 1): \n        num = num + i \n        \n    return num \ndef find_smallest_number_with_n_digits(n): \n    '''\n    Write a python function to find the smallest number with n digits. https://www.geeksforgeeks.org/smallest-number-with-n-digits/\n    '''\n    n = n \n    num = 1\n    for i in range(1, n + 1): \n        num = num * 10\n        \n    return num \ndef print_triangular_number(n): \n    '''\n    Write a python function to print the n-th triangular number. https://www.geeksforgeeks.org/print-nth-triangular-number/\n    '''\n    n = n \n    \n    num = 0\n    for i in range(1, n + 1): \n        num = num + i \n        \n    print(num) \ndef print_factors_of_a_number(n): \n    '''\n    Write a python function to print the factors of a number. https://www.geeksforgeeks.org/print-factors-of-a-number/\n    '''\n    n = n \n    for i in range(1, n + 1): \n        if (n % i == 0): \n            print(i) \ndef print_prime_factors_of_a_number(n): \n    '''\n    Write a python function to print the prime factors of a number. https://www.geeksforgeeks.org/print-prime-factors-of-a-number/\n    '''\n    n = n \n    \n    factors = [] \n    \n    while n % 2 == 0: \n        factors.append(2) \n        n = n / 2\n        \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        \n        while n % i == 0: \n            factors.append(i) \n            n = n / i \n            \n    if n > 2: \n        factors.append(n) \n        \n    print(factors) \ndef print_concatenation_product(n): \n    '''\n    Write a python function to print the concatenation product of a list. https://www.geeksforgeeks.org/print-concatenation-product-of-a-list/\n    '''\n    n = n \n    \n    factors = [] \n    \n    while n % 2 == 0: \n        factors.append(2) \n        n = n / 2\n        \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        \n        while n % i == 0: \n            factors.append(i) \n            n = n / i \n            \n    if n > 2: \n        factors.append(n) \n        \n    print(factors) \ndef print_powers_of_two(n): \n    '''\n    Write a python function to print powers of two from 0 to n. https://www.geeksforgeeks.org/print-powers-of-two/\n    '''\n    n = n \n    \n    for i in range(n + 1): \n        print(2**i) \ndef print_powers_of_two_with_o_notation(n): \n    '''\n    Write a python function to print powers of two with o notation from 0 to n. https://www.geeksforgeeks.org/print-powers-of-two-with-o-notation/\n    '''\n    n = n \n    \n    for i in range(n + 1): \n        print(2**i, end=\" \") \ndef print_powers_of_two_with_o_notation_e(n): \n    '''\n    Write a python function to print powers of two with o notation in exponential form from 0 to n. https://www.geeksforgeeks.org/print-powers-of-two-with-o-notation-in-exponential-form/\n    '''\n    n = n \n    \n    for i in range(n + 1): \n        print(2**i, end=\" \") \n        print(\"2^\", i) \ndef print_powers_of_two_with_o_notation_e_no_space(n): \n    '''\n    Write a python function to print powers of two with o notation in exponential form from 0 to n. https://www.geeksforgeeks.org/print-powers-of-two-with-o-notation-in-exponential-form/\n    '''\n    n = n \n    \n    for i in range(n + 1): \n        print(2**i, end=\" \") \ndef print_reverse_powers_of_two_with_o_notation(n): \n    '''\n    Write a python function to print powers of two in reversed form with o notation from 0 to n. https://www.geeksforgeeks.org/print-powers-of-two-in-reversed-form-with-o-notation/\n    '''\n    n = n \n    \n    for i in range(n + 1): \n        print(2**i, end=\" \") \ndef print_reverse_powers_of_two_with_o_notation_e(n): \n    '''\n    Write a python function to print powers of two in reversed form with o notation in exponential form from 0 to n. https://www.geeksforgeeks.org/print-powers-of-two-in-reversed-form-with-o-notation-in-exponential-form/\n    '''\n    n = n \n    \n    for i in range(n + 1): \n        print(2**i, end=\" \") \n        print(\"2^\", i) \ndef print_reverse_powers_of_two_with_o_notation_e_no_space(n): \n    '''\n    Write a python function to print powers of two in reversed form with o notation in exponential form from 0 to n. https://www.geeksforgeeks.org/print-powers-of-two-i",
        "num_ids": 46
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while (math.factorial(i) < n): \n        i += 1\n    return i - 1\n",
        "num_ids": 33
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n) \n    index = 0\n    for i in range(n): \n        index += (10**i) \n    return index \ndef find_Triangular_No(n): \n    '''\n    Write a python function to calculate the nth triangular number in the series.\n    '''\n    index = find_Index(n) \n    return int(((index * (index + 1))/2)) \n",
        "num_ids": 30
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    p = 1\n    while math.log10(p) < n:\n        p += 1\n    return p - 1\ndef find_First_Triangular(n):\n    '''\n    Write a python function to find the first triangular number with n digits. https://www.geeksforgeeks.org/find-number-nth-triangular-number/\n    '''\n    return int(n * (n+1) / 2)\ndef find_Triangular_Number_Digits(n):\n    '''\n    Write a python function to find the number of digits of the nth triangular number. https://www.geeksforgeeks.org/triangular-number/\n    '''\n    if(n <= 0): \n        return -1\n    return (n * (n + 1)) // 2\ndef find_Triangular_Number_Sequence(n):\n    '''\n    Write a python function to find the sequence of first n triangular numbers https://www.geeksforgeeks.org/sequence-of-first-n-triangular-numbers/\n    '''\n    if(n <= 0): \n        return -1\n    l = [0] * n\n    for i in range(n): \n        l[i] = i + 1\n    l[0] = 1\n    for i in range(1, n): \n        l[i] += l[i - 1]\n    return l\ndef find_Triangular_Number_Sequence_Top_Down(n):\n    '''\n    Write a python function to find the sequence of first n triangular numbers using top down approach https://www.geeksforgeeks.org/sequence-of-first-n-triangular-numbers/\n    '''\n    if(n <= 0): \n        return -1\n    l = [0] * n\n    for i in range(n): \n        l[i] = i + 1\n    l[0] = 1\n    for i in range(1, n): \n        l[i] += l[i - 1] + (i + 1)\n    return l\ndef find_Triangular_Number_Sequence_Bottom_Up(n):\n    '''\n    Write a python function to find the sequence of first n triangular numbers using bottom up approach https://www.geeksforgeeks.org/sequence-of-first-n-triangular-numbers/\n    '''\n    if(n <= 0): \n        return -1\n    l = [0] * n\n    for i in range(n): \n        l[i] = i + 1\n    l[0] = 1\n    for i in range(1, n): \n        for j in range(i, n): \n            l[j] += l[j - 1] + (j + 1)\n    return l\ndef find_Triangular_Number_Sequence_Bottom_Up_With_Memory(n):\n    '''\n    Write a python function to find the sequence of first n triangular numbers using bottom up approach with memory https://www.geeksforgeeks.org/sequence-of-first-n-triangular-numbers/\n    '''\n    if(n <= 0): \n        return -1\n    l = [0] * n\n    l[0] = 1\n    for i in range(1, n): \n        for j in range(i, n): \n            l[j] += l[j - 1] + (j + 1)\n    return l\ndef find_Triangular_Number_Sequence_Bottom_Up_With_Cache(n):\n    '''\n    Write a python function to find the sequence of first n triangular numbers using bottom up approach with cache https://www.geeksforgeeks.org/sequence-of-first-n-triangular-numbers/\n    '''\n    if(n <= 0): \n        return -1\n    l = [0] * n\n    l[0] = 1\n    for i in range(1, n): \n        l[i] = l[i - 1] + (i + 1)\n    return l\ndef find_Triangular_Number_Sequence_Bottom_Up_With_Cache_And_Extra_Space(n):\n    '''\n    Write a python function to find the sequence of first n triangular numbers using bottom up approach with cache and extra space https://www.geeksforgeeks.org/sequence-of-first-n-triangular-numbers/\n    '''\n    if(n <= 0): \n        return -1\n    l = [0] * n\n    for i in range(1, n): \n        for j in range(i, n): \n            l[j] += l[j - 1] + (j + 1)\n    return l\ndef find_Triangular_Number_Sequence_Bottom_Up_With_Cache_And_Extra_Space_With_Recursion(n):\n    '''\n    Write a python function to find the sequence of first n triangular numbers using bottom up approach with cache and extra space with recursion https://www.geeksforgeeks.org/sequence-of-first-n-triangular-numbers/\n    '''\n    if(n <= 0): \n        return -1\n    l = [0] * n\n    l[0] = 1\n    def find(n):\n        if n <= 0:\n            return -1\n        for i in range(1, n): \n            for j in range(i, n): \n                l[j] += l[j - 1] + (j + 1)\n        return l\n    return find(n)\ndef find_Triangular_Number_Sequence_Bottom_Up_With_Cache_And_Extra_Space_With_Recursion_And_Extra_Space(n):\n    '''\n    Write a python function to find the sequence of first n triangular numbers using bottom up approach with cache and extra space with recursion and extra space https://www.geeksforgeeks.org/sequence-of-first-n-triangular-numbers/\n    '''\n    if(n <= 0): \n        return -1\n    l = [0] * n\n    l[0] = 1\n    def find(n):\n        for i in range(1, n): \n            for j in range(i, n): \n                l[j] += l[j - 1] + (j + 1)\n        return l\n    return find(n)\ndef find_Triangular_Number_Sequence_Bottom_Up_With_Cache_And_Extra_Space_With_Recursion_And_Extra_Space_With_Max_Size_Array(n):\n    '''\n    Write a python function to find the sequence of first n triangular numbers using bottom up approach with cache and extra space with recursion and extra space with max size array https://www.geeksforgeeks.org/sequence-of-first-n-triangular-numbers/\n    '''\n    if(n <= 0): \n        return -1\n    l = [0] * n\n    l[0] = 1\n    def find(n):\n        for i in range(1, n): \n            for j in range(i, n): \n                l[j] += l[j - 1] + (j + 1)\n        return l\n    return find(n)\ndef find_Triangular_Number_Sequence_Top_Down_With_Max_Size_Array(n):\n    '''\n    Write a python function to find the sequence of first n triangular numbers using top down approach with max size array https://www.geeksforgeeks.org/sequence-of-first-n-triangular-numbers/\n    '''\n    if(n <= 0): \n        return -1\n    l = [0] * n\n    l[0] = 1\n    for i in range(1, n): \n        for j in range(0, i): \n            l[j] += l[j] + (j + 1)\n    return l\ndef find_Triangular_Number_Sequence_Bottom_Up_With_Max_Size_Array(n):\n    '''\n    Write a python function to find the sequence of first n triangular numbers using bottom up approach with max size array https://www.geeksforgeeks.org/sequence-of-first-n-triangular-numbers/\n    '''\n    if(n <= 0): \n        return -1\n    l = [0] * n\n    for i in range(0, n): \n        l[",
        "num_ids": 40
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n",
        "num_ids": 38
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_ = {}\n    for i in range(0, len(test_tup), 2):\n        dict_[test_tup[i]] = test_tup[i + 1]\n    return dict_\n    \nif __name__ == '__main__':\n    print('1.', tuple_to_dict((1, 2, 3, 4, 5, 6)))\n    print('2.', tuple_to_dict((7, 3, 0, 6, 9, 2)))\n    ",
        "num_ids": 117
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict1 = {}\n    for i in range(0,len(test_tup),2):\n        dict1[test_tup[i]] = test_tup[i+1]\n    return dict1\n",
        "num_ids": 53
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict1 = dict()\n    i=0\n    while i < len(test_tup):\n        dict1[test_tup[i]] = test_tup[i+1]\n        i = i+2\n    return dict1\n",
        "num_ids": 60
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    for i in test_tup:\n        print(i)\n",
        "num_ids": 18
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    count = 0\n    for i in range(len(test_tup)):\n        result[test_tup[count]] = test_tup[count + 1]\n        count += 2\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res_dct = dict(zip(test_tup[::2], test_tup[1::2]))\n    print(res_dct)\n",
        "num_ids": 40
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Method 1: Using zip() + dict() + lambda\n    # zip() will map the tuple elements pair-wise\n    # dict() will convert it into the dictionary\n    # lambda will convert the tuple elements into key-value pairs\n    dict_1 = dict(zip(test_tup[0::2], test_tup[1::2]))\n    return dict_1\n",
        "num_ids": 89
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n",
        "num_ids": 22
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]:test_tup[i+1] for i in range(0,len(test_tup),2)}\n",
        "num_ids": 38
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s :\n        if i == s[0] :\n            continue\n        else :\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    result = all(x == s[0] for x in s)\n    return result\n    \ndef is_all_Vowels(s) :\n    '''\n    Write a python function to check whether all the characters are vowels or not.\n    '''\n    vowels = ['a','e','i','o','u']\n    result = all(x in vowels for x in s)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return True if len(set(s)) == 1 else False\n",
        "num_ids": 17
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n",
        "num_ids": 13
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(1, len(s)) :\n        if s[i]!= s[i-1] :\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1 :\n        return True\n",
        "num_ids": 16
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = s[0]\n    for i in range(1,len(s)) :\n        if char!= s[i] :\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(i == s[0] for i in s)\n",
        "num_ids": 18
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    x = [s[i] for i in range(len(s)-1)]\n    if(len(x) == 0):\n        return True\n    for i in x :\n        if(i!=s[0]) :\n            return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return (len(set(s))==1)\n",
        "num_ids": 15
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return pow(side,2)*math.sqrt(2*(1 + math.sqrt(1 + 4*(math.pow(side,2)))))/2\n",
        "num_ids": 42
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((math.sqrt(3) * (side**2)) / 4)\n",
        "num_ids": 22
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side ** 3\n",
        "num_ids": 8
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side ** 2 * math.sqrt(3) / 4\n",
        "num_ids": 18
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side ** 2) * (3 ** (1/2)) / 4\n",
        "num_ids": 21
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3/12\n",
        "num_ids": 10
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return round(math.sqrt(3) / 4 * side ** 2, 2)\n",
        "num_ids": 23
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side ** 2 * math.sqrt(3) / 4\n",
        "num_ids": 18
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4 * side ** 2 / (math.sqrt(2))\n",
        "num_ids": 19
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3*math.sqrt(2)/12\n    \ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side**3*math.sqrt(3)/6\n    \ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    return side**2*6\n    \ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return side**3\n    \ndef area_octahedron(side):\n    '''\n    Write a function to calculate the area of a octahedron.\n    '''\n    return 4*math.sqrt(2)*side**2\n    \ndef volume_octahedron(side):\n    '''\n    Write a function to calculate the volume of a octahedron.\n    '''\n    return side**3*math.sqrt(3)/3\n    \ndef area_icosahedron(side):\n    '''\n    Write a function to calculate the area of a icosahedron.\n    '''\n    return 5*math.sqrt(5)*side**2/2\n    \ndef volume_icosahedron(side):\n    '''\n    Write a function to calculate the volume of a icosahedron.\n    '''\n    return side**3*math.sqrt(5)/12\n    \ndef area_dodecahedron(side):\n    '''\n    Write a function to calculate the area of a dodecahedron.\n    '''\n    return 5*math.sqrt(5)*side**2/2\n    \ndef volume_dodecahedron(side):\n    '''\n    Write a function to calculate the volume of a dodecahedron.\n    '''\n    return side**3*math.sqrt(5)/12\n    \ndef area_truncated_prism(side):\n    '''\n    Write a function to calculate the area of a truncated prism.\n    '''\n    return 6*side**2\n    \ndef volume_truncated_prism(side):\n    '''\n    Write a function to calculate the volume of a truncated prism.\n    '''\n    return side**3*math.sqrt(3)/2\n    \ndef area_rhombus(side):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    return 2*side**2\n    \ndef volume_rhombus(side):\n    '''\n    Write a function to calculate the volume of a rhombus.\n    '''\n    return side**2*math.sqrt(2)/2\n    \ndef area_trapezium(side):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return 3*side**2/2\n    \ndef volume_trapezium(side):\n    '''\n    Write a function to calculate the volume of a trapezium.\n    '''\n    return side**2*math.sqrt(3)/6\n    \ndef area_parallelogram(side):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return 4*side\n    \ndef volume_parallelogram(side):\n    '''\n    Write a function to calculate the volume of a parallelogram.\n    '''\n    return side**2\n    \ndef area_heptagon(side):\n    '''\n    Write a function to calculate the area of a heptagon.\n    '''\n    return 7*side**2/2\n    \ndef volume_heptagon(side):\n    '''\n    Write a function to calculate the volume of a heptagon.\n    '''\n    return side**3*math.sqrt(3)/6\n    \ndef area_kite(side):\n    '''\n    Write a function to calculate the area of a kite.\n    '''\n    return 5*side\n    \ndef volume_kite(side):\n    '''\n    Write a function to calculate the volume of a kite.\n    '''\n    return side**3/2\n    \ndef area_n_gon(n,side):\n    '''\n    Write a function to calculate the area of a n-gon.\n    '''\n    return (n*side**2)/(4*math.tan(math.pi/n))\n    \ndef volume_n_gon(n,side):\n    '''\n    Write a function to calculate the volume of a n-gon.\n    '''\n    return side**2*math.sqrt(n*math.cos(math.pi/n))/4\n    \ndef area_n_polygon(n,side):\n    '''\n    Write a function to calculate the area of a n-polygon.\n    '''\n    return n*side**2/math.sin(math.pi/n)\n    \ndef volume_n_polygon(n,side):\n    '''\n    Write a function to calculate the volume of a n-polygon.\n    '''\n    return side**n*math.sqrt(2*(n-2)/(n*math.sin(math.pi/n)*(n+1)))\n    \ndef area_prism(n,side):\n    '''\n    Write a function to calculate the area of a prism.\n    '''\n    return n*side**2\n    \ndef volume_prism(n,side):\n    '''\n    Write a function to calculate the volume of a prism.\n    '''\n    return side**n*math.sqrt(2*(n-2)/(n*math.sin(math.pi/n)*(n+1)))\n    \ndef area_disk(radius):\n    '''\n    Write a function to calculate the area of a disk.\n    '''\n    return math.pi*radius**2\n    \ndef volume_disk(radius):\n    '''\n    Write a function to calculate the volume of a disk.\n    '''\n    return math.pi*radius**3/6\n    \ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return 4*math.pi*radius**2\n    \ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return 4/3*math.pi*radius**3\n    \ndef area_hemisphere(radius):\n    '''\n    Write a function to calculate the area of a hemisphere.\n    '''\n    return 4*math.pi*radius**2/2\n    \ndef volume_hemisphere(radius):\n    '''\n    Write a function to calculate the volume of a hemisphere.\n    '''\n    return 2/3*math.pi*radius**3/3\n    \ndef area_cone(radius, height):\n    '''\n    Write a function to calculate the area of a cone.\n    '''\n    return math.pi*radius**2*math.cos(math.pi/3)/3\n    \ndef volume_cone(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return radius**2*height/3\n    \ndef area_pyramid(base, height):\n    '''\n    Write a function to calculate the area of a pyramid.\n    '''\n    return base*height/3\n    \ndef volume_pyramid(base, height):\n    '''\n    Write a function to calculate the volume of a pyramid.\n    '''\n    return base**2*height/3\n    \ndef area_cylinder(radius, height):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    return 2*math.pi*radius*height\n    \ndef volume_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return math.pi*radius**2*height\n    \ndef area_cone_cut_hemisphere(radius, height):\n    '''\n    Write a function to calculate the area of a cone-cut-hemisphere.\n    '''\n    return math.pi*(radius**2+height**2)\n    \ndef volume_cone_cut_hemisphere(radius, height):\n    '''\n    Write a function t",
        "num_ids": 7
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_length = len(list)\n    if list_length <= 1:\n        return list\n    n = m % list_length\n    rotated_list = []\n    for i in range(n):\n        rotated_list.append(list[i])\n    for i in range(n, list_length):\n        rotated_list.append(list[i])\n    return rotated_list\n",
        "num_ids": 96
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    temp = list[n - m:] + list[:n - m]\n    return(temp)\n",
        "num_ids": 34
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # m = 4\n    # list = list[m:] + list[:m]\n    # print(list)\n",
        "num_ids": 56
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list.reverse()\n    list.append(list.pop(0))\n    list.reverse()\n    return list\n",
        "num_ids": 30
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    end = list[n-1]\n    for i in range(m):\n        list.append(end)\n    for i in range(n):\n        list.pop(0)\n    print(list)\n    return list\n",
        "num_ids": 64
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    output_list = []\n",
        "num_ids": 9
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    print(list[:m])\n    print(list[m:])\n    list[:m], list[m:] = list[m:], list[:m]\n    return list\n",
        "num_ids": 46
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    N = len(list)\n    temp = list[N-m:N]\n    i = 0\n    while i < m:\n        list[N-m+i] = list[N-i-1]\n        i += 1\n    i = 0\n    while i < len(temp):\n        list[i] = temp[i]\n        i += 1\n",
        "num_ids": 88
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[-m:] + list[:-m]\n",
        "num_ids": 16
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    r = (m % n)\n    m = m % n\n    list.append(list.pop(0))\n    return list\n",
        "num_ids": 42
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test_tup = tuple(test_tup)\n    return all(i!= None for i in test_tup)\n",
        "num_ids": 33
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(type(i) is None for i in test_tup) == False:\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(i is None for i in test_tup)\n",
        "num_ids": 18
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all(i is not None for i in test_tup)\n",
        "num_ids": 19
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup.count(None) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not all(test_tup):\n        print(\"None found\")\n    else:\n        print(\"No None found\")\n",
        "num_ids": 32
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    res = any(i is None for i in test_tup)\n    return not res\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return True if None in test_tup else False\n",
        "num_ids": 15
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(map(lambda x: x is None, test_tup)):\n        return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print(\"In Function\")\n    print(list(filter(lambda x: all(x%int(i) == 0 for i in str(x)), range(startnum, endnum))))\n",
        "num_ids": 45
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers_list = [x for x in range(startnum, endnum)]\n",
        "num_ids": 22
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum+1):\n        num_divisible = True\n        str_i = str(i)\n        for digit in str_i:\n            if not i % int(digit):\n                num_divisible = False\n        if num_divisible:\n            print(i)\n",
        "num_ids": 76
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_by_digits_list = []\n    for num in range(startnum, endnum + 1):\n        if (num % 2 == 0):\n            if (num % 3 == 0):\n                if (num % 4 == 0):\n                    if (num % 5 == 0):\n                        if (num % 6 == 0):\n                            if (num % 7 == 0):\n                                if (num % 8 == 0):\n                                    if (num % 9 == 0):\n                                        divisible_by_digits_list.append(num)\n    return divisible_by_digits_list\n",
        "num_ids": 140
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    lst = []\n    for i in range(startnum, endnum + 1):\n        if i % 1 == 0:\n            for j in str(i):\n                if i % int(j)!= 0:\n                    break\n            else:\n                lst.append(i)\n    return lst\n",
        "num_ids": 74
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: not (False in [x % int(digit) == 0 for digit in str(x)]), range(startnum, endnum+1))\n    \n    # return filter(lambda x: not (False in [x % int(digit) == 0 for digit in str(x)]), range(startnum, endnum+1))\n    ",
        "num_ids": 84
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = []\n    for i in range(startnum, endnum+1):\n        flag = True\n        for j in str(i):\n            if not i % int(j):\n                continue\n            else:\n                flag = False\n                break\n        if flag:\n            numbers.append(i)\n    return numbers\n",
        "num_ids": 80
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    # (1) uses a generator to find the numbers and adds them to a list. then uses set to eliminate duplicates.\n    # (2) use list comprehension and sum() to count the total\n    # (3) use lambda function to loop through each number\n    \n    # (1)\n    nums = []\n    for num in range(startnum, endnum + 1):\n        if len(set(str(num))) == len(str(num)):\n            nums.append(num)\n    \n    # (2)\n    print(sum(nums))\n    \n    # (3)\n    total = 0\n    for num in nums:\n        total += num\n    \n    print(total)\n",
        "num_ids": 170
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    newlist=[]\n    for i in range(startnum,endnum+1):\n        if isDivisible(i):\n            newlist.append(i)\n    return newlist\n",
        "num_ids": 46
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    my_list = []\n    for num in range(startnum, endnum):\n        if all(map(lambda d: num % int(d) == 0, str(num))):\n            my_list.append(num)\n    return my_list\n",
        "num_ids": 62
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    import math\n    if a<0 or a>360:\n        return None\n    else:\n        return (math.pi*r**2)*(a/360)\n",
        "num_ids": 42
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return math.pi*(r**2)*(a/360)\n    \n    ",
        "num_ids": 33
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        return a * r**2\n",
        "num_ids": 25
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0 or a>360:\n        return None\n    return (r**2)*a\n",
        "num_ids": 26
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = abs(a)\n    area = math.pi * r * r * (angle/360)\n    return area\n",
        "num_ids": 31
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = math.radians(a)\n    if a<360:\n        return math.pi*r*r*(a/360)\n    else:\n        return None\n",
        "num_ids": 44
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The area of the sector is\",r**2*a/360)\n        \n        \ndef polygon_area(n,l):\n    '''\n    Write a function to calculate the area of a regular polygon. The function takes two inputs. The number of sides n and the length of the side l. Return None if the length is 0.\n    '''\n    if l==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The area of the polygon is\",n*l**2/4)\n        \n        \ndef rectangle_area(w,l):\n    '''\n    Write a function to calculate the area of a rectangle. The function takes two inputs. The width and length of the rectangle. Return None if the length is 0.\n    '''\n    if l==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The area of the rectangle is\",w*l)\n        \n        \ndef triangle_area(b,h):\n    '''\n    Write a function to calculate the area of a triangle. The function takes two inputs. The base and height of the triangle. Return None if the height is 0.\n    '''\n    if h==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The area of the triangle is\",b*h/2)\n        \n        \ndef parallelogram_area(w,l):\n    '''\n    Write a function to calculate the area of a parallelogram. The function takes two inputs. The width and length of the parallelogram. Return None if the length is 0.\n    '''\n    if l==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The area of the parallelogram is\",w*l)\n        \n        \ndef trapezoid_area(b1,b2,h):\n    '''\n    Write a function to calculate the area of a trapezoid. The function takes three inputs. The base of the top side, the base of the bottom side, and the height of the trapezoid. Return None if the height is 0.\n    '''\n    if h==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The area of the trapezoid is\",((b1+b2)*h)/2)\n        \n        \ndef circle_area(r):\n    '''\n    Write a function to calculate the area of a circle. The function takes one input. The radius of the circle. Return None if the radius is 0.\n    '''\n    if r==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The area of the circle is\",math.pi*(r**2))\n        \n        \ndef ellipse_area(a,b):\n    '''\n    Write a function to calculate the area of an ellipse. The function takes two inputs. The major and minor axes of the ellipse. Return None if either of them is 0.\n    '''\n    if a==0 or b==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The area of the ellipse is\",math.pi*a*b)\n        \n        \ndef circle_circumference(r):\n    '''\n    Write a function to calculate the circumference of a circle. The function takes one input. The radius of the circle. Return None if the radius is 0.\n    '''\n    if r==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The circumference of the circle is\",2*math.pi*r)\n        \n        \ndef ellipse_circumference(a,b):\n    '''\n    Write a function to calculate the circumference of an ellipse. The function takes two inputs. The major and minor axes of the ellipse. Return None if either of them is 0.\n    '''\n    if a==0 or b==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The circumference of the ellipse is\",2*math.pi*(a+b))\n        \n        \ndef rhombus_area(d1,d2):\n    '''\n    Write a function to calculate the area of a rhombus. The function takes two inputs. The first side of the rhombus and the second side of the rhombus. Return None if either of the sides is 0.\n    '''\n    if d1==0 or d2==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The area of the rhombus is\",d1*d2/2)\n        \n        \ndef rhombus_perimeter(d1,d2):\n    '''\n    Write a function to calculate the perimeter of a rhombus. The function takes two inputs. The first side of the rhombus and the second side of the rhombus. Return None if either of the sides is 0.\n    '''\n    if d1==0 or d2==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The perimeter of the rhombus is\",d1+d2)\n        \n        \ndef trapezoid_perimeter(b1,b2,h):\n    '''\n    Write a function to calculate the perimeter of a trapezoid. The function takes three inputs. The base of the top side, the base of the bottom side, and the height of the trapezoid. Return None if the height is 0.\n    '''\n    if h==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The perimeter of the trapezoid is\",b1+b2+h)\n        \n        \ndef triangle_perimeter(b,h):\n    '''\n    Write a function to calculate the perimeter of a triangle. The function takes two inputs. The base and height of the triangle. Return None if the height is 0.\n    '''\n    if h==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The perimeter of the triangle is\",b+h)\n        \n        \ndef rectangle_perimeter(w,l):\n    '''\n    Write a function to calculate the perimeter of a rectangle. The function takes two inputs. The width and length of the rectangle. Return None if the length is 0.\n    '''\n    if l==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The perimeter of the rectangle is\",w+l)\n        \n        \ndef rectangle_diagonal(w,l):\n    '''\n    Write a function to calculate the diagonal of a rectangle. The function takes two inputs. The width and length of the rectangle. Return None if the length is 0.\n    '''\n    if l==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The diagonal of the rectangle is\",(w**2+l**2)**(1/2))\n        \n        \ndef triangle_diagonal(b,h):\n    '''\n    Write a function to calculate the diagonal of a triangle. The function takes two inputs. The base and height of the triangle. Return None if the height is 0.\n    '''\n    if h==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The diagonal of the triangle is\",(b**2+h**2)**(1/2))\n        \n        \ndef rhombus_diagonal(d1,d2):\n    '''\n    Write a function to calculate the diagonal of a rhombus. The function takes two inputs. The first side of the rhombus and the second side of the rhombus. Return None if either of the sides is 0.\n    '''\n    if d1==0 or d2==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(\"The diagonal of the rhombus is\",(d1**2+d2**2)**(1/2))\n        \n        \ndef circle_circumference(r):\n    '''\n    Write a function to calculate the circumference of a circle. The function takes one input. The radius of the circle. Return None if the radius is 0.\n    '''\n    if r==0:\n        print(\"Invalid input!\")\n        return None\n    else:\n        print(",
        "num_ids": 28
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if 0<=a<360:\n        return(math.pi*(r**2)*a/360)\n    else:\n        return None\n",
        "num_ids": 37
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = math.pi*r*r*(a/360)\n    return area\n    \ndef point_x_coor(x,y,r,a):\n    '''\n    Write a function to find the x coordinate of the center of a point on a circle. The function takes three inputs, x and y coordinates of the point and the radius and angle of the point. The function returns the x coordinate of the point on the circle. If the point is not on the circle, return None.\n    '''\n    x = x + r*math.cos(math.radians(a))\n    return x\n    \ndef point_y_coor(x,y,r,a):\n    '''\n    Write a function to find the y coordinate of the center of a point on a circle. The function takes three inputs, x and y coordinates of the point and the radius and angle of the point. The function returns the y coordinate of the point on the circle. If the point is not on the circle, return None.\n    '''\n    y = y + r*math.sin(math.radians(a))\n    return y\n",
        "num_ids": 25
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    s=a/360*math.pi*r*r\n    return s\n",
        "num_ids": 21
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n",
        "num_ids": 26
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n",
        "num_ids": 26
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[None]*(l+1) for i in range(n+1)] for j in range(m+1)] \n",
        "num_ids": 62
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the first string \n    m = len(X) \n    # print(m)\n    # find the length of the second string \n    n = len(Y) \n    # print(n)\n    # find the length of the third string \n    o = len(Z) \n    # print(o)\n    # declaring the array for storing the dp values \n    L = [[None]*(o+1) for i in range(m+1)] \n    # print(L)\n    # \"\"\"Following steps build L[m + 1][n + 1] in bottom up fashion \n    # Note: L[i][j] contains length of LCS of X[0..i-1] \n    # and Y[0..j-1]\"\"\"\n    # making the 2D array\n    for i in range(m + 1): \n        for j in range(n + 1): \n            #print(i,j)\n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] and Z[j-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n",
        "num_ids": 335
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None]*(l+1) for i in range(n+1)] for j in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1]+1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][l] \n",
        "num_ids": 241
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return lcs_util(X, Y, Z, len(X), len(Y), len(Z))\n",
        "num_ids": 28
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if(len(X) == 0 or len(Y) == 0 or len(Z) == 0):\n        return 0\n    m = len(X) \n    n = len(Y)\n    l = len(Z)\n    L = [[[0 for k in range(l+1)] for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(l+1):\n                if(i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif(X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][l]\n",
        "num_ids": 269
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the first string \n    m = len(X) \n    # find the length of the second string \n    n = len(Y) \n    # find the length of the third string \n    z = len(Z) \n    # declaring the array for storing the dp values \n    L = [[None]*(n + 1) for i in range(m + 1)] \n    #to store the path of the last character\n    index = [[None]*(n + 1) for i in range(m + 1)]\n    for i in range(m + 1): \n        for j in range(n + 1): \n            if (i == 0 or j == 0): \n                L[i][j] = 0\n                index[i][j] = 0\n            elif (X[i-1] == Y[j-1] and X[i-1] == Z[j-1]): \n                L[i][j] = L[i-1][j-1] + 1\n                index[i][j] = 3\n            elif (L[i-1][j] >= L[i][j-1]): \n                L[i][j] = L[i-1][j] \n                index[i][j] = 1\n            else: \n                L[i][j] = L[i][j-1] \n                index[i][j] = 2\n    return L[m][n], index\n",
        "num_ids": 348
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create a table to store results of subproblems \n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n",
        "num_ids": 43
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return lcs_recursive(X, Y, Z, len(X), len(Y), len(Z))\n",
        "num_ids": 29
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s=str1.split(' ')\n    a=[]\n    for i in range(len(s)):\n        if s[i][0].isupper():\n            a.append(s[i])\n        else:\n            a.append(s[i])\n    return''.join(a)\nstr1=\"Python is great\"\nstr2=\"Python is good\"\nstr3=\"Python is not python snake\"\n",
        "num_ids": 100
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    regex = re.compile(r'([A-Z][a-z]+)')\n    return regex.sub(r' \\1', str1)\n",
        "num_ids": 40
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('(?<=[a-z])[A-Z](?=[a-zA-Z])','',str1)\n",
        "num_ids": 36
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    str1 = str1.split(\" \")\n    for word in str1:\n        if word[0].isupper():\n            str1 = str1.replace(word, word[0]+\" \"+word)\n    return str1\n",
        "num_ids": 59
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=\\w)([A-Z])',r' \\1',str1)\n",
        "num_ids": 32
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    list1 = re.findall(r'[A-Z][^A-Z]*',str1)\n    return \" \".join(list1)\n",
        "num_ids": 39
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if not str1:\n        return str1\n    \n    capital_words = re.compile(r'\\b[A-Z][a-z]*\\b')\n    string = re.sub(capital_words, lambda m: m.group().replace(m.group()[0], m.group()[0].upper(), 1), str1)\n",
        "num_ids": 86
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub('(?<=\\w)([A-Z])', r' \\1', str1)\n    return str2\n    \ndef sort_it_my_way(str1):\n    '''\n    Write a function to sort the given string in the given way.\n    '''\n    str2 = sorted(str1)\n    str2 = ''.join(str2)\n    return str2\n    \ndef min_max_sum_words(str1):\n    '''\n    Write a function to return the minimum, maximum and sum of the length of the words in a given string.\n    '''\n    str2 = str1.split(' ')\n    max_len_word = 0\n    min_len_word = 0\n    sum_len_word = 0\n    for i in range(len(str2)):\n        if len(str2[i]) >= max_len_word:\n            max_len_word = len(str2[i])\n        if len(str2[i]) <= min_len_word:\n            min_len_word = len(str2[i])\n        sum_len_word += len(str2[i])\n    return max_len_word, min_len_word, sum_len_word\n    \ndef reverse_string(str1):\n    '''\n    Write a function to reverse the given string.\n    '''\n    str2 = str1[::-1]\n    return str2\n    \ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all the special characters from the given string.\n    '''\n    str2 = str1.split(' ')\n    str2 = ''.join(str2)\n    str2 = re.sub(r\"[^\\w]\", \"\", str2)\n    return str2\n    \ndef check_possibility_of_palindrome(str1):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    str2 = str1.split(' ')\n    str2 = ''.join(str2)\n    if str2[::-1] == str2:\n        return True\n    return False\n    \ndef check_if_palindrome_using_stack(str1):\n    '''\n    Write a function to check if the given string is a palindrome using stack.\n    '''\n    str2 = str1.split(' ')\n    str2 = ''.join(str2)\n    stack = []\n    for i in range(len(str2)):\n        stack.append(str2[i])\n    for i in range(len(stack)):\n        if stack[i]!= stack[len(stack)-1-i]:\n            return False\n    return True\n    \ndef duplicate_words_in_string(str1):\n    '''\n    Write a function to remove duplicate words from the given string.\n    '''\n    str2 = str1.split(' ')\n    str2 = ''.join(str2)\n    str2 = list(set(str2.split(' ')))\n    str2 =''.join(str2)\n    return str2\n    \ndef count_frequency_of_word_in_string(str1):\n    '''\n    Write a function to count the frequency of each word from the given string.\n    '''\n    str2 = str1.split(' ')\n    dictionary = {}\n    for i in str2:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    for key, value in dictionary.items():\n        print(key, value)\n        \ndef count_frequency_of_chars_in_string(str1):\n    '''\n    Write a function to count the frequency of each character from the given string.\n    '''\n    str2 = str1.split(' ')\n    dictionary = {}\n    for i in str2:\n        for j in i:\n            if j not in dictionary:\n                dictionary[j] = 1\n            else:\n                dictionary[j] += 1\n    for key, value in dictionary.items():\n        print(key, value)\n        \ndef count_frequency_of_chars_in_string_using_list(str1):\n    '''\n    Write a function to count the frequency of each character from the given string.\n    '''\n    str2 = str1.split(' ')\n    dictionary = {}\n    for i in str2:\n        for j in i:\n            if j not in dictionary:\n                dictionary[j] = 1\n            else:\n                dictionary[j] += 1\n    for key, value in dictionary.items():\n        print(key, value)\n        \ndef generate_a_list_of_all_words_from_string(str1):\n    '''\n    Write a function to generate a list of all words from the given string.\n    '''\n    str2 = str1.split(' ')\n    dictionary = {}\n    for i in str2:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    for key, value in dictionary.items():\n        print(key, value)\n        \ndef check_if_substring_present(str1):\n    '''\n    Write a function to check if the given string is a substring of another string or not.\n    '''\n    str2 = str1.split(' ')\n    str2 = ''.join(str2)\n    if str2 in str1:\n        return True\n    return False\n    \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to find all occurrences of a substring in the given string.\n    '''\n    str2 = str1.split(' ')\n    str2 = ''.join(str2)\n    str2 = re.findall(sub_str, str2)\n    return str2\n    \ndef find_substring_all_positions(str1, sub_str):\n    '''\n    Write a function to find all occurrences of a substring in the given string.\n    '''\n    str2 = str1.split(' ')\n    str2 = ''.join(str2)\n    str2 = re.finditer(sub_str, str2)\n    return str2\n    \ndef find_index_of_substring_in_string(str1):\n    '''\n    Write a function to find the index of the substring in the given string.\n    '''\n    str2 = str1.split(' ')\n    str2 = ''.join(str2)\n    str2 = re.search(r\"[\\w']+\", str2)\n    return str2.start()\n    \ndef replace_string_from_substring(str1):\n    '''\n    Write a function to replace all the occurances of substring in the given string.\n    '''\n    str2 = str1.split(' ')\n    str2 = ''.join(str2)\n    str2 = re.sub(r\"[\\w']+\",'', str2)\n    return str2\n    \ndef replace_all_occurances_from_substring(str1):\n    '''\n    Write a function to replace all the occurances of substring in the given string.\n    '''\n    str2 = str1.split(' ')\n    str2 = ''.join(str2)\n    str2 = re.sub(r\"[\\w']+\",'', str2)\n    return str2\n    \ndef find_longest_word_in_string(str1):\n    '''\n    Write a function to find the longest word in the given string.\n    '''\n    str2 = str1.split(' ')\n    max_len_word = 0\n    for i in str2:\n        if len(i) >= max_len_word:\n            max_len_word = len(i)\n            max_len_word_word = i\n    return max_len_word_word\n    \ndef find_longest_word_in_string_using_loop(str1):\n    '''\n    Write a function to find the longest word in the given string.\n    '''\n    str2 = str1.split(' ')\n    max_len_word = 0\n    for i in str2:\n        if len(i) >",
        "num_ids": 38
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n",
        "num_ids": 30
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str = re.findall(r\"([A-Z][a-z]+)\",str1)\n    return \" \".join(new_str)\n",
        "num_ids": 40
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    try:\n        nums = [int(i) for i in nums_str]\n        nums.sort()\n    except:\n        nums = [float(i) for i in nums_str]\n        nums.sort()\n    return [str(i) for i in nums]\n",
        "num_ids": 74
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # take each string and split it into substrings\n    # then take each substring and convert it to int and add it to a new list\n    nums = []\n    for num in nums_str:\n        nums.append(int(num))\n    # now use the sorted() method to sort the list\n    nums.sort()\n",
        "num_ids": 81
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # TODO: Implement\n    for i in range(len(nums_str)):\n        for j in range(len(nums_str)-1):\n            if (nums_str[j] + nums_str[j+1]).isdigit():\n                if int(nums_str[j] + nums_str[j+1]) > int(nums_str[j+1] + nums_str[j]):\n                    nums_str[j], nums_str[j+1] = nums_str[j+1], nums_str[j]\n    return nums_str\n",
        "num_ids": 150
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n",
        "num_ids": 16
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n",
        "num_ids": 16
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # code goes here\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    nums_sorted = []\n    for num in nums:\n        nums_sorted.append(str(num))\n    return nums_sorted\n",
        "num_ids": 85
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Find all types of numeric strings\n    numeric_strings = list(filter(lambda x: x.replace('-', '0').isnumeric(), nums_str))\n    \n    # Now sort them in place\n    numeric_strings.sort(key=float)\n    \n    # And print them out\n    print(numeric_strings)\n    \n    \ndef compress_string(s):\n    '''\n    Write a function to return a string which contains repeating characters of a given string. \n    https://www.geeksforgeeks.org/compress-string-characters/\n    '''\n    # Iterate over the string\n    char_dict = {}\n    for char in s:\n        # If we have already reached this character\n        # print('-->', char)\n        if char_dict.get(char):\n            # Increment the count\n            char_dict[char] += 1\n        # Else, add this character to dict\n        else:\n            char_dict[char] = 1\n    \n    # Iterate over the dict and print the keys\n    s_new = ''\n    for key, val in char_dict.items():\n        # If this character is repeated more than once\n        if val > 1:\n            s_new += key\n            s_new += str(val)\n        else:\n            s_new += key\n    \n    # If there is nothing to compress\n    if s_new == s:\n        return s\n    # Else, return the compressed string\n    return s_new\n",
        "num_ids": 214
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda s: int(s[3:]))\n    return nums_str\n",
        "num_ids": 30
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Create a list of integers from the list of strings.\n    nums = [int(num) for num in nums_str]\n",
        "num_ids": 34
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    l = list()\n    for item in nums_str:\n        if item.isdigit():\n            l.append(item)\n    l.sort(key = lambda x: int(x))\n    print(l)\n",
        "num_ids": 56
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n    \ndef remove_tuple(test_list, test_tup):\n    '''\n    Write a function to remove the given tuple from the given list.\n    '''\n    test_list.remove(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    # Insert the elements of the tuple into the list\n    test_list.append(test_tup[0])\n    test_list.append(test_tup[1])\n    \n    return test_list\n    ",
        "num_ids": 55
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for i in range(i, 0, -1):\n        if arr[i] > arr[(i - 1) // 2]:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    # Root of the tree\n    left_node = 2 * i + 1\n    right_node = 2 * i + 2\n    if left_node < n and arr[left_node] > arr[i]:\n        return False\n    if right_node < n and arr[right_node] > arr[i]:\n        return False\n    return True\n",
        "num_ids": 91
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr)//2:\n        return\n    if i*2+1 < len(arr) and arr[i] > arr[2*i+1]:\n        raise ValueError(\"Not a min heap\")\n    if i*2+2 < len(arr) and arr[i] > arr[2*i+2]:\n        raise ValueError(\"Not a min heap\")\n    check_min_heap_helper(arr, i*2+1)\n    check_min_heap_helper(arr, i*2+2)\n",
        "num_ids": 133
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i <= 0:\n        return True\n    if arr[i] < arr[(i-1)//2]:\n        return False\n    check_min_heap_helper(arr, (i-1)//2)\n",
        "num_ids": 57
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] >= arr[2 * i + 1] and arr[i] >= arr[2 * i + 2]:\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n    return False\n",
        "num_ids": 92
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n    if arr[i] >= arr[int((i-1)/2)]:\n        return False\n    return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n",
        "num_ids": 84
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    size = len(arr)\n    if i >= size:\n        return True\n    left = 2*i+1\n    right = 2*i+2\n    if left < size and arr[left] < arr[i]:\n        return False\n    if right < size and arr[right] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n",
        "num_ids": 111
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n // 2:\n        return True\n    if arr[i] >= arr[i * 2 + 1] and arr[i] >= arr[i * 2 + 2]:\n        return check_min_heap_helper(arr, i * 2 + 1) and check_min_heap_helper(arr, i * 2 + 2)\n    return False\n",
        "num_ids": 97
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if(i>=0 and i<len(arr)):\n        if(arr[i]>arr[2*i+1] and arr[i]>arr[2*i+2]):\n            return True\n        else:\n            return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child_index = 2*i + 1\n    right_child_index = 2*i + 2\n    min_index = i\n    if left_child_index < len(arr) and arr[left_child_index] < arr[min_index]:\n        min_index = left_child_index\n    if right_child_index < len(arr) and arr[right_child_index] < arr[min_index]:\n        min_index = right_child_index\n    if min_index!= i:\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        check_min_heap_helper(arr, min_index)\n",
        "num_ids": 166
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if (n == 0):\n        return 0\n    if (n == 1):\n        return 1\n    return jacobsthal_num(n - 2) + jacobsthal_num(n - 1)\n",
        "num_ids": 54
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return (jacobsthal_num(n-1) + jacobsthal_num(n-2))\n    \ndef prime_factors(n):\n    '''\n    Write a function to find prime factors of a number. Prime factors is a number that is divisible by only one number. Prime numbers are numbers that can only be divided by itself and one. For example: 2,3,5,7,11,13 are prime numbers because they can only be divided by 1 and themselves. For example: 4,6,8,9,10 are not prime numbers because they can be divided by 2,3,4,5,6,7,8,9,10.\n    '''\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        while n%2 == 0:\n            print(2)\n            n = n/2\n        for i in range(3, int(n**0.5)+1,2):\n            while n%i == 0:\n                print(i)\n                n = n/i\n        if n > 2:\n            print(int(n))\n",
        "num_ids": 108
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def is_jacobsthal_num(n):\n        '''\n        Write a function to determine whether the input number is a jacobsthal number or not.\n        '''\n        if (n==0) or (n==1):\n            return True\n        else:\n            flag = True\n            while n > 2:\n                if n%2==0:\n                    flag = False\n                    break\n                else:\n                    n = 3*n + 1\n            return flag\n",
        "num_ids": 70
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #initialize the answer as 1\n    ans = 1\n    #if the number is zero or one it will return the number itself\n    if n == 0 or n == 1:\n        return n\n    #Loop until we reach the nth value\n    while n!= 1:\n        #if the number is even, we can find the value as the even index\n        #values in the sequence can be found by squaring the even index\n        #values in the sequence\n        if n % 2 == 0:\n            ans = ans * (3 * ans - 2)\n        #if the number is odd, we can find the value as the odd index\n        #values in the sequence can be found by squaring the odd index\n        #values in the sequence\n        else:\n            ans = ans * (2 * ans - 1)\n        #increment the nth value\n        n -= 1\n    #return the answer\n    return ans\n",
        "num_ids": 211
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    for i in range(2, n+1):\n        c = (a + b) % i\n        a = b\n        b = c\n    return c\n",
        "num_ids": 73
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return 1\n    return (jacobsthal_num(n - 1) + jacobsthal_num(n - 2)) \n",
        "num_ids": 58
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal_rec(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        elif n > 2:\n            return jacobsthal_rec(n-1) + 2*jacobsthal_rec(n-2)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n > 2:\n        return jacobsthal_rec(n-1) + 2*jacobsthal_rec(n-2)\n",
        "num_ids": 134
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal_rec(n): \n        if n <= 1: \n            return n \n        else: \n            return (4 * jacobsthal_rec(n - 1)) + (2 * jacobsthal_rec(n - 2)) \n    \n    return jacobsthal_rec(n) \n",
        "num_ids": 85
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if (n==1): return 2\n    return (j_num(n-1)**2 + j_num(n-1))\n",
        "num_ids": 35
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n",
        "num_ids": 20
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    def f(test_list, K):\n        if len(test_list) <= K:\n            return sorted(test_list)\n",
        "num_ids": 34
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key = lambda tup: tup[1])\n    return test_list[:K]\n",
        "num_ids": 31
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # initialize a tuple to store length of each sub-list as key and the list as value\n    min_k = {len(i): i for i in test_list}\n",
        "num_ids": 42
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n",
        "num_ids": 20
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialize list with 0's\n    min_k_list = [0] * K\n    for idx in range(K):\n        min_k_list[idx] = test_list[idx]\n    \n    # Compare all the sublists and get the smallest one\n    for i in range(K, len(test_list)):\n        if min_k_list[K-1] > test_list[i]:\n            min_k_list = test_list[i]\n    \n    return min_k_list\n",
        "num_ids": 128
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = [tuple(test_tuple) for test_tuple in test_list]\n    start = time.time()\n    min_k = k_smallest(test_list, K)\n    end = time.time()\n    return [min_k, end-start]\n",
        "num_ids": 72
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp = []\n    for row in test_list:\n        temp.append(row[0])\n    temp.sort()\n",
        "num_ids": 32
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    assert isinstance(K, int) and K > 0, 'Input K should be integer > 0'\n    assert len(test_list) >= K, 'Length of list should be larger than K'\n    # Create a list to hold the maximum values\n    res_list = []\n    for i in range(K):\n        # Set the maximum value as the first element in the list\n        max_value = test_list[0]\n        # Find the maximum value in the rest of the list\n        for x in test_list[1:]:\n            if x[1] > max_value[1]:\n                max_value = x\n        # Remove that maximum value from the list\n        res_list.append(max_value)\n        test_list.remove(max_value)\n    return res_list\n",
        "num_ids": 187
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    import random\n    random.shuffle(test_list)\n    print(test_list)\n    new_list = [item for item in test_list[:K]]\n    print(new_list)\n    print('The minimum number of records are',K)\n",
        "num_ids": 64
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] == l3[i]:\n            res.append(l1[i])\n    return res\n",
        "num_ids": 67
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = l1.index(l2[0])\n    \n    l = []\n    for i in range(len(l1)):\n        if l1[i] == l2[0]:\n            if l2 == l3[i:i + len(l2)]:\n                l.append(l1[i])\n    return l\n",
        "num_ids": 84
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            result.append(l1[i])\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    assert isinstance(l1, list)\n    assert isinstance(l2, list)\n    assert isinstance(l3, list)\n    \n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    \n    return common_elements\n",
        "num_ids": 111
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Return a list of common elements from all three lists\n    return [val for i in range(max(len(l1), len(l2), len(l3))) for val in [l1[i], l2[i], l3[i]] if val == val]\n",
        "num_ids": 66
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l2[i] in l3[i]:\n            result.append(l1[i])\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # for i in range(len(l1)):\n    #     if l1[i] in l2:\n    #         if l2[i] in l3:\n    #             l3.remove(l2[i])\n    # return l3\n",
        "num_ids": 64
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for index in range(len(l1)):\n        if l1[index] == l2[index] == l3[index]:\n            res.append(l1[index])\n    return res\n",
        "num_ids": 55
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [n for n in l1 if n in l2 and n in l3]\n",
        "num_ids": 23
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in range(len(l1)) if l1[i] in l2 and l1[i] in l3]\n",
        "num_ids": 40
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sorted_numbers = sorted(numbers)\n    # return sorted_numbers[1]\n",
        "num_ids": 26
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return 'Error: Too few numbers in list.'\n    else:\n        numbers.sort()\n        return numbers[1]\n",
        "num_ids": 43
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 2:\n        if numbers[0] > numbers[1]:\n            return numbers[1]\n        else:\n            return numbers[0]\n",
        "num_ids": 70
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError('Invalid input: list must contain at least two elements.')\n    \n    first = second = None\n    for num in numbers:\n        if first == None or num < first:\n            second = first\n            first = num\n        elif second == None or num < second:\n            second = num\n    \n    return second\n",
        "num_ids": 91
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Setting up variables\n    min_value = numbers[0]\n    # Setting up for loop\n    for i in range(len(numbers)):\n        if numbers[i] < min_value:\n            min_value = numbers[i]\n    # Setting up for loop\n    for i in range(len(numbers)):\n        if numbers[i] > min_value:\n            if numbers[i] < min_value:\n                min_value = numbers[i]\n    return min_value\n",
        "num_ids": 120
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    first = second = float('inf')\n    \n    for n in numbers:\n        if n < first:\n            second = first\n            first = n\n        elif n < second and n!= first:\n            second = n\n            \n    return second\n",
        "num_ids": 64
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    min = numbers[0]\n    sec_min = numbers[1]\n    for i in range(2, len(numbers)):\n        if numbers[i] < min:\n            min, sec_min = numbers[i], min\n        elif numbers[i] < sec_min:\n            sec_min = numbers[i]\n    return sec_min\n",
        "num_ids": 102
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    return result!= None\n",
        "num_ids": 33
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"a.*?b+\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_one_more_than_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_zero_more_than_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_exactly_zero_more_than_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_more_than_zero_more_than_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_exactly_more_than_one(text):\n    '''\n    Write a function that matches a string that has more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_more_than_one_more_than_one(text):\n    '''\n    Write a function that matches a string that has more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_exactly_one_more_than_one(text):\n    '''\n    Write a function that matches a string that has exactly one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_more_than_one_exactly_one(text):\n    '''\n    Write a function that matches a string that has more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_exactly_zero_or_one(text):\n    '''\n    Write a function that matches a string that has zero or one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_more_than_one_exactly_zero(text):\n    '''\n    Write a function that matches a string that has more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_exactly_one_or_more(text):\n    '''\n    Write a function that matches a string that has exactly one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_more_than_one_or_more(text):\n    '''\n    Write a function that matches a string that has more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_exactly_one_or_more(text):\n    '''\n    Write a function that matches a string that has exactly one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_more_than_one_or_more(text):\n    '''\n    Write a function that matches a string that has more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_exactly_one_zero_or_more(text):\n    '''\n    Write a function that matches a string that has zero or more 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_more_than_one_zero_or_more(text):\n    '''\n    Write a function that matches a string that has more than one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_exactly_one_zero_one(text):\n    '''\n    Write a function that matches a string that has exactly one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return'match'\n    return 'not match'\n    \ndef text_match_more_than_one_zero_one(text):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'ab+'\n    result = re.search(pattern, text)\n    if result == None:\n        return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    result = pattern.search(text)\n    if result!= None:\n        return \"Match was found\"\n    else:\n        return \"Match was not found\"\n",
        "num_ids": 57
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    def match(text):\n        if re.match(r\"a.*b\",text):\n            print(\"The text %r matches\" % text)\n        else:\n            print(\"The text %r does not match\" % text)\n    match(text)\n",
        "num_ids": 62
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # match_string = re.findall(r'ab+', text)\n    match_string = re.findall(r'\\w+a\\w+b\\w+', text)\n    # match_string = re.findall(r'ab{0,}', text)\n    if match_string:\n        return ''.join(match_string)\n    else:\n        return -1\n",
        "num_ids": 97
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'ab*'\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n",
        "num_ids": 40
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab+\", text)\ndef text_match_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab*\", text)\ndef text_match_exactly_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly two 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab{2}\", text)\ndef text_match_exactly_two_dot(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly two 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab{2,}\", text)\ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab*\", text)\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab+\", text)\ndef text_match_exactly_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab+\", text)\ndef text_match_exactly_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly zero 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab?\", text)\ndef text_match_exactly_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab+\", text)\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab?\", text)\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab+\", text)\ndef text_match_zero_or_more_dot(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab*\", text)\ndef text_match_one_or_more_dot(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab+\", text)\ndef text_match_exactly_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab+\", text)\ndef text_match_one_or_more_and_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab?\", text)\ndef text_match_one_or_more_and_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab+\", text)\ndef text_match_one_or_more_and_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab?\", text)\ndef text_match_one_or_more_and_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab+\", text)\ndef text_match_zero_or_one_and_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab?\", text)\ndef text_match_zero_or_one_and_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab+\", text)\ndef text_match_zero_or_one_and_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab?\", text)\ndef text_match_zero_or_one_and_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r\"ab+\", text)\ndef text_match_exactly_one_or_more_and_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly one 'b'. https://www.w3resource.com/pytho",
        "num_ids": 36
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = 'ab*?'\n    #if re.match(pattern,text):\n    #    return True\n    #else:\n    #    return False\n    return bool(re.search(r'(a.+?b)', text))\n",
        "num_ids": 61
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                reverse_pairs += 1\n    return reverse_pairs\n",
        "num_ids": 77
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total_pairs = 0\n    for i in test_list:\n        for j in test_list:\n            if(i[::-1] == j):\n                total_pairs += 1\n    return total_pairs\n",
        "num_ids": 56
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # initializing empty list\n    reverse_list = []\n    \n    # for loop to iterate the test_list\n    for i in test_list:\n        # reversing the string using the join method and slicing\n        j = ''.join(reversed(i))[::-1][:len(i)]\n        if j in reverse_list:\n            reverse_list.append(j)\n        else:\n            reverse_list.append(j)\n    \n    # print(reverse_list)\n    # print(len(reverse_list))\n    return len(reverse_list)\n",
        "num_ids": 139
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_count = 0\n    count = 0\n    len_list = len(test_list)\n    for i in range(0,len_list):\n        for j in range(i,len_list):\n            if test_list[i]==test_list[j]:\n                count = count + 1\n                if count > 1:\n                    reverse_count = reverse_count + 1\n    return reverse_count\n",
        "num_ids": 99
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pair_count = 0\n    for i in range(0, len(test_list)):\n        for j in range(i, len(test_list)):\n            if(test_list[i] == test_list[j][::-1]):\n                print(test_list[i], test_list[j])\n                pair_count = pair_count + 1\n    return pair_count\n",
        "num_ids": 96
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n",
        "num_ids": 64
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    d = dict()\n    for word in test_list:\n        if word[::-1] in d:\n            d[word[::-1]] += 1\n        else:\n            d[word[::-1]] = 1\n    return d\n",
        "num_ids": 61
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for i in test_list:\n        for j in test_list:\n            if (j[::-1] == i):\n                print(i, j)\n",
        "num_ids": 41
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Create empty dictionary\n    reverse_pairs = dict()\n    # Iterate over each string in the list\n    for string in test_list:\n    # Generate the reverse of the string\n        reverse_string = string[::-1]\n        # Check if the reverse is in the dictionary\n        if reverse_string in reverse_pairs:\n            # Increment the count of reverse string\n            reverse_pairs[reverse_string] += 1\n        else:\n            # Otherwise, create a new key, value pair\n            reverse_pairs[reverse_string] = 1\n    # Return the count of reverse pairs\n    return len(reverse_pairs)\n",
        "num_ids": 153
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    uniq_list = {}\n    for sublist in list1:\n        uniq_list[tuple(sublist)] = list1.count(sublist)\n    return uniq_list\nprint(unique_sublists([[1, 2, 1, 4, 1], [5, 5, 1, 2, 1], [2, 1, 1, 1, 1], [2, 2, 1, 2, 1], [2, 2, 2, 2, 2]]))\n",
        "num_ids": 112
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    new_list = []\n    for each_list in list1:\n        new_list.append(tuple(each_list))\n",
        "num_ids": 34
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result_list = []\n    for i in list1:\n        result_list.append(tuple(i))\n    result_list = list(set(result_list))\n    return {x:list1.count(x) for x in result_list}\n",
        "num_ids": 64
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    my_list = list(list1)\n    sub_list = []\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            \n            if list1[i] == list1[j]:\n                sub_list.append(list1[i])\n                \n    sub_list = tuple(sub_list)\n    \n    my_dict = {}\n    \n    for k in range(len(list1)):\n        \n        if list1[k] in my_dict:\n            my_dict[list1[k]] += 1\n        else:\n            my_dict[list1[k]] = 1\n            \n    # if sub_list in my_dict:\n    #     my_dict[sub_list] += 1\n    # else:\n    #     my_dict[sub_list] = 1\n        \n    return my_dict\n    \n    \ndef count_sublists(list1, list2):\n    '''\n    Write a function to count the number of sublists in a list. The function should return an integer\n    '''\n    \n    list1_count = 0\n    \n    for i in range(len(list1)):\n        \n        for j in range(i+1, len(list1)):\n            \n            if list1[i:j] in list2:\n                list1_count += 1\n                \n    return list1_count\n    \n    \n    \n    \n    \ndef join_lists(list1, list2):\n    '''\n    Write a function that takes two lists and returns one dictionary\n    whose keys are the first elements of the lists and the values are the second elements of the lists. If there are any duplicate keys, just take the last element of the list.\n    '''\n    \n    my_dict = {}\n    \n    for i in range(len(list1)):\n        \n        if list1[i] in my_dict:\n            my_dict[list1[i]].append(list2[i])\n            \n        else:\n            my_dict[list1[i]] = [list2[i]]\n    \n    return my_dict\n        \n        \n        \n        \n        \n    \ndef extract_dict(dict1, str1):\n    '''\n    Write a function that takes a dictionary and a string as arguments. The function should return a list where every key from the dictionary is duplicated for the specified number of times and the values of the original dictionary are also duplicated.\n    '''\n    \n    # my_list = []\n    \n    # for i in dict1:\n        \n    #     for j in range(dict1[i]):\n    #         my_list.append(i)\n    \n    # return my_list\n    \n    \n    # my_list = []\n    \n    # for i in dict1:\n        \n    #     for j in range(dict1[i]):\n    #         my_list.append(i)\n    \n    # return my_list\n        \n    my_dict = {}\n    \n    for i in dict1:\n        my_dict[i] = dict1[i]\n        \n    my_dict = {i:dict1[i]*str1 for i in my_dict}\n    \n    return my_dict\n    \n    \n    \ndef extract_dict_2(dict1, str1):\n    '''\n    Write a function that takes a dictionary and a string as arguments. The function should return a list where every key from the dictionary is duplicated for the specified number of times and the values of the original dictionary are also duplicated.\n    '''\n    \n    my_list = []\n    \n    for i in dict1:\n        for j in range(dict1[i]):\n            my_list.append(i)\n    \n    return my_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1123
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    uniques = set()\n    for i in list1:\n        uniques.add(tuple(i))\n    return uniques\n",
        "num_ids": 34
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #list1 = [1,2,2,2,2,3,3,3,3,4]\n    x = set(list1)\n    new_list = []\n    for i in x:\n        new_list.append((i,list1.count(i)))\n    return new_list\n    \n    \n    \n    \n    \n    \n    \ndef get_sublists(list1):\n    '''\n    Write a function that returns a list of all sublists of a given list.\n    '''\n    list_sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)+1):\n            list_sublists.append(list1[i:j])\n    return list_sublists\n    \n    \n    \ndef all_sublists(list1):\n    '''\n    Write a function that returns a list of all sublists of a given list.\n    '''\n    list_sublists = []\n    for i in range(len(list1)+1):\n        for j in range(i+1,len(list1)+1):\n            list_sublists.append(list1[i:j])\n    return list_sublists\n    \n    \n    \n    \n    \n    \n    \ndef duplicates(list1):\n    '''\n    Write a function that returns a list of all duplicates from a given list. Return None if the list has no duplicates.\n    '''\n    list_duplicates = []\n    for i in list1:\n        if list1.count(i) > 1:\n            list_duplicates.append(i)\n    if len(list_duplicates) > 0:\n        return list_duplicates\n    else:\n        return None\n        \n        \n        \n        \n        \n        \n        \ndef unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #list1 = [1,2,2,2,2,3,3,3,3,4]\n    x = set(list1)\n    new_list = []\n    for i in x:\n        new_list.append((i,list1.count(i)))\n    return new_list\n    \n    \n    \n    \n    \n    \n    \ndef get_sublists(list1):\n    '''\n    Write a function that returns a list of all sublists of a given list.\n    '''\n    list_sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)+1):\n            list_sublists.append(list1[i:j])\n    return list_sublists\n    \n    \n    \ndef all_sublists(list1):\n    '''\n    Write a function that returns a list of all sublists of a given list.\n    '''\n    list_sublists = []\n    for i in range(len(list1)+1):\n        for j in range(i+1,len(list1)+1):\n            list_sublists.append(list1[i:j])\n    return list_sublists\n    \n    \n    \ndef duplicates(list1):\n    '''\n    Write a function that returns a list of all duplicates from a given list. Return None if the list has no duplicates.\n    '''\n    list_duplicates = []\n    for i in list1:\n        if list1.count(i) > 1:\n            list_duplicates.append(i)\n    if len(list_duplicates) > 0:\n        return list_duplicates\n    else:\n        return None\n        \n        \n        \n        \n        \n        \n        \ndef unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #list1 = [1,2,2,2,2,3,3,3,3,4]\n    x = set(list1)\n    new_list = []\n    for i in x:\n        new_list.append((i,list1.count(i)))\n    return new_list\n    \n    \n    \n    \n    \n    \n    \ndef get_sublists(list1):\n    '''\n    Write a function that returns a list of all sublists of a given list.\n    '''\n    list_sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)+1):\n            list_sublists.append(list1[i:j])\n    return list_sublists\n    \n    \n    \ndef all_sublists(list1):\n    '''\n    Write a function that returns a list of all sublists of a given list.\n    '''\n    list_sublists = []\n    for i in range(len(list1)+1):\n        for j in range(i+1,len(list1)+1):\n            list_sublists.append(list1[i:j])\n    return list_sublists\n    \n    \n    \ndef duplicates(list1):\n    '''\n    Write a function that returns a list of all duplicates from a given list. Return None if the list has no duplicates.\n    '''\n    list_duplicates = []\n    for i in list1:\n        if list1.count(i) > 1:\n            list_duplicates.append(i)\n    if len(list_duplicates) > 0:\n        return list_duplicates\n    else:\n        return None\n        \n        \n        \n        \n        \n        \n        \ndef unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #list1 = [1,2,2,2,2,3,3,3,3,4]\n    x = set(list1)\n    new_list = []\n    for i in x:\n        new_list.append((i,list1.count(i)))\n    return new_list\n    \n    \n    \n    \n    \n    \n    \ndef get_sublists(list1):\n    '''\n    Write a function that returns a list of all sublists of a given list.\n    '''\n    list_sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)+1):\n            list_sublists.append(list1[i:j])\n    return list_sublists\n    \n    \n    \ndef all_sublists(list1):\n    '''\n    Write a function that returns a list of all sublists of a given list.\n    '''\n    list_sublists = []\n    for i in range(len(list1)+1):\n        for j in range(i+1,len(list1)+1):\n            list_sublists.append(list1[i:j])\n    return list_sublists\n    \n    \n    \ndef duplicates(list1):\n    '''\n    Write a function that returns a list of all duplicates from a given list. Return None if the list has no duplicates.\n    '''\n    list_duplicates = []\n    for i in list1:\n        if list1.count(i) > 1:\n            list_duplicates.append(i)\n    if len(list_duplicates) > 0:\n        return list_duplicates\n    else:\n        return None\n        \n        \n        \n        \n        \n        \n        \ndef unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #list1 = [1,2,2,2,2,3,3,",
        "num_ids": 22
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = [1, [2, 2, 1], [2, 1], [1, 2, 1], [2, 2, 2], [2, 2, 2], [1, 2, 2], [2, 1, 2], [1, 1, 2]]\n    dic = {}\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            if tuple(list1[i]) in dic:\n                dic[tuple(list1[i])] += 1\n            else:\n                dic[tuple(list1[i])] = 1\n    return dic\nprint(unique_sublists(list1))\n",
        "num_ids": 162
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_of_lists = []\n    for sublist in list1:\n        list_of_lists.append(tuple(sublist))\n    unique_list = []\n    for element in list_of_lists:\n        if element not in unique_list:\n            unique_list.append(element)\n    dictionary = {}\n    for element in unique_list:\n        dictionary[element] = list_of_lists.count(element)\n    return dictionary\n",
        "num_ids": 111
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if len(list1)==0:\n        return {}\n    elif len(list1)==1:\n        return {list1[0]:1}\n    else:\n        temp_list = []\n        for i in range(0,len(list1)):\n            temp_list.append(list1[i])\n        count = 1\n        temp_dict = {tuple(temp_list):count}\n        for j in range(1,len(list1)):\n            if list1[j:j+1] not in list1[j:]:\n                temp_list = []\n                for i in range(j,len(list1)):\n                    temp_list.append(list1[i])\n                temp_dict[tuple(temp_list)] = 1\n            else:\n                count +=1\n                temp_dict[tuple(temp_list)] = count\n        return temp_dict\n",
        "num_ids": 215
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = []\n    result = {}\n    for sublist in list1:\n        unique_list.append(tuple(sublist))\n    for item in unique_list:\n        result[item] = list1.count(item)\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' not in num:\n        return False\n    return num.split('.')[1].isdigit()\n    \nis_decimal(\"5.2\")\n",
        "num_ids": 50
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if num.count('.')!= 1 or num.split('.')[1].isdigit() == False:\n        return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # i.e. '0.99' or '1.0'\n    if len(num) >= 3 and num[0] == '0' and num[1] == '.':\n        for i in num[2:]:\n            if not i.isdigit():\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 83
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    # Method 1:\n    try:\n        num = float(num)\n        if abs(round(num, 2)-num) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n    \n    # Method 2:\n    # try:\n    #     num = int(num)\n    #     return False\n    # except ValueError:\n    #     return True\n        \n        \nif __name__ == '__main__':\n    # print(is_decimal(\"0.5\"))\n    # print(is_decimal(\"-0.5\"))\n    # print(is_decimal(\"0.5-1\"))\n    # print(is_decimal(\"1.5\"))\n    # print(is_decimal(\".2\"))\n    # print(is_decimal(\".02\"))\n    # print(is_decimal(\"0\"))\n    # print(is_decimal(\"-1\"))\n    print(is_decimal(\"+1.2\"))\n    print(is_decimal(\"-1.2\")",
        "num_ids": 256
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' in num:\n        dot = num.index('.')\n        left_part = num[:dot]\n        right_part = num[dot+1:]\n        if left_part.isdigit() and right_part.isdigit():\n            return True\n    return False\n",
        "num_ids": 79
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    num = num.split(\".\")\n    if len(num) > 2:\n        return False\n    else:\n        if len(num) == 1:\n            if num[0].isdigit():\n                return True\n            else:\n                return False\n        elif len(num) == 2:\n            if num[0].isdigit() and num[1].isdigit():\n                return True\n            else:\n                return False\n    return True\n    # num_list = list(num)\n    # if num_list[0] == \"-\" or num_list[0] == \"+\":\n    #     num_list.pop(0)\n    # for i in range(len(num_list)):\n    #     if i == 1 and num_list[i] == \".\":\n    #         continue\n    #     if not num_list[i].isdigit():\n    #         return False\n    # return True\n",
        "num_ids": 229
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    if type(num)!= str:\n        return False\n    \n    for c in num:\n        if c not in '0123456789':\n            return False\n            \n    return True\n    \ndef is_binary(num):\n    '''\n    Write a function to check whether a given string is a binary number with a precision of 2.\n    '''\n    \n    if type(num)!= str:\n        return False\n    \n    for c in num:\n        if c not in '01':\n            return False\n            \n    return True\n    \ndef is_hex(num):\n    '''\n    Write a function to check whether a given string is a hex number with a precision of 2.\n    '''\n    \n    if type(num)!= str:\n        return False\n    \n    for c in num:\n        if c not in '0123456789ABCDEF':\n            return False\n            \n    return True\n    \ndef to_decimal(num):\n    '''\n    Write a function to convert a decimal number with a precision of 2 to a string.\n    '''\n    \n    if not is_decimal(num):\n        return None\n        \n    return str(int(num, 2))\n",
        "num_ids": 32
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return bool(re.match('^[-+]?([0-9]*[.])?[0-9]{1,2}$', num))\n",
        "num_ids": 39
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) == 0:\n        return False\n    for i in range(len(num)):\n        if num[i] not in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}:\n            return False\n    return True\n",
        "num_ids": 77
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    a=0\n    for i in arr:\n        if arr.count(i) == 1:\n            a = a+1\n            break\n    if a>0:\n        print(\"Unique element\")\n    else:\n        print(\"There are more than one distinct element\")\n",
        "num_ids": 66
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return (len(set(arr))==len(arr))\nprint(unique_Element([0,0,1,0,1,0,1,0,1,0,1,0,1]))\n",
        "num_ids": 51
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    element = arr[0]\n    for i in range(1,len(arr)):\n        if element == arr[i]:\n            return False\n        else:\n            element = arr[i]\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr))==1:\n        print('Array contains only one distinct element')\n    else:\n        print('Array contains more than one distinct element')\n",
        "num_ids": 41
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == len(arr)\n",
        "num_ids": 16
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #converting to set\n    arr=set(arr)\n    if len(arr)==1:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 41
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    print(list(set(arr)))\n",
        "num_ids": 12
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return False if len(set(arr)) == len(arr) else True\n",
        "num_ids": 20
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return(sum(set(arr)==1)==1)\n",
        "num_ids": 18
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_30_days = [4, 6, 9, 11]\n    for month in month_30_days:\n        if month == monthnum3:\n            return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = {\n        1: \"January\",\n        2: \"February\",\n        3: \"March\",\n        4: \"April\",\n        5: \"May\",\n        6: \"June\",\n        7: \"July\",\n        8: \"August\",\n        9: \"September\",\n        10: \"October\",\n        11: \"November\",\n        12: \"December\"\n    }\n    if monthnum3 in range(1,13):\n        print(months[monthnum3])\n        return months[monthnum3]\n    else:\n        print(\"Enter the correct month number between 1 to 12\")\n        return \"Enter the correct month number between 1 to 12\"\n",
        "num_ids": 158
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12):\n        return 30\n    elif (monthnum3 == 2):\n        return 29\n    elif (monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11):\n        return 30\n    else:\n        return -1\n",
        "num_ids": 109
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_no = int(monthnum3)\n    if month_no > 12:\n        return \"Wrong number\"\n    elif month_no == 1 or month_no == 3 or month_no == 5 or month_no == 7 or month_no == 8 or month_no == 10 or month_no == 12:\n        return 30\n    elif month_no == 4 or month_no == 6 or month_no == 9 or month_no == 11:\n        return 31\n    else:\n        return \"Wrong number\"\n",
        "num_ids": 125
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return 30\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return 31\n    else:\n        return \"Error\"\n",
        "num_ids": 93
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return \"Febraury has 28 or 29 days!\"\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return \"This month has 30 days!\"\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return \"This month has 31 days!\"\n    else:\n        return \"Invalid input!\"\n",
        "num_ids": 129
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return 30\n    elif monthnum3 in [4,6,9,11]:\n        return 31\n    elif monthnum3 == 2:\n        return 28\n    else:\n        return -1\n",
        "num_ids": 72
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"\\nThe number of days in the month is 30\")\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"\\nThe number of days in the month is 31\")\n    else:\n        print(\"\\nWrong input. Please try again\")\n",
        "num_ids": 125
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return '30'\n    elif monthnum3 in [4,6,9,11]:\n        return '31'\n",
        "num_ids": 53
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort array\n    arr.sort()\n    # initialize difference\n    diff = arr[n-1] - arr[0]\n    for i in range(1, n):\n        diff = min(diff, arr[i] - arr[i - 1])\n    return diff\n",
        "num_ids": 67
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    print (arr)\n    min_diff = arr[1] - arr[0] \n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[j] - arr[i]) < min_diff: \n                min_diff = arr[j] - arr[i] \n    return min_diff \n \ndef find_min_diff2(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    print (arr)\n    min_diff = arr[1] - arr[0] \n    for i in range(n - 1): \n        if (arr[i + 1] - arr[i]) < min_diff: \n            min_diff = arr[i + 1] - arr[i] \n    return min_diff \n \narr = [5, 1, 10, 20, 35, 40, 50] \nn = len(arr) \nprint(find_min_diff2(arr,n)) \n ",
        "num_ids": 134
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    diff = arr[1] - arr[0] \n    for i in range(1, n): \n        if arr[i] - arr[i - 1] < diff: \n            diff = arr[i] - arr[i - 1] \n    return(diff) \n",
        "num_ids": 76
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1,n):\n        if arr[i] - arr[i - 1] < min_diff:\n            min_diff = arr[i] - arr[i - 1]\n    return min_diff\n",
        "num_ids": 76
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n):\n        if(arr[i] - arr[i-1] < min_diff):\n            min_diff = arr[i] - arr[i-1]\n    return min_diff\n",
        "num_ids": 75
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    minimum = arr[1] - arr[0]\n    for i in range(1, n-1):\n        minimum = min(minimum, arr[i+1] - arr[i])\n    return minimum \n",
        "num_ids": 58
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    minimum_difference = arr[1] - arr[0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) < minimum_difference:\n                minimum_difference = abs(arr[i] - arr[j])\n",
        "num_ids": 80
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = arr[0] \n    for i in range(0, n): \n        if arr[i] < diff: \n            diff = arr[i] \n    minimum = 2147483647\n    for i in range(0, n): \n        if (arr[i] - diff) < minimum: \n            minimum = arr[i] - diff \n    return minimum\n",
        "num_ids": 94
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    return arr[1]-arr[0]\n",
        "num_ids": 19
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1:\n        return arr[0], arr[0]\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    \n    for i in range(1, n):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n            min_index = i\n    return arr[min_index - 1], arr[min_index]\n",
        "num_ids": 114
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num = 0\n    for i in str:\n        if i.isdigit():\n            num += 1\n    return num\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digit_count = 0\n    for letter in str:\n        if letter.isdigit():\n            digit_count += 1\n    return digit_count\n",
        "num_ids": 38
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for ch in str:\n        if ch.isdigit():\n            ctr += 1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # def digit_counter(str):\n    #     total = 0\n    #     for i in range(0, len(str)):\n    #         if str[i].isdigit():\n    #             total += 1\n    #     return total\n",
        "num_ids": 61
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    counter = 0\n    for i in str:\n        if i.isdigit():\n            counter += 1\n    return counter\n",
        "num_ids": 32
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n%2 == 0: \n        return n//2\n    else: \n        return 3*n+1\n",
        "num_ids": 31
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    temp = 0\n    for i in range(1, n):\n        temp = 2 * i * i + 3 * i + 1\n        if (temp <= n):\n            if (n % temp == 0):\n                return False \n        else:\n            return True \n    return True \n",
        "num_ids": 70
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 0\n    for i in range(n):\n        num = num + math.floor(i / (i + 1))\n    return num\n",
        "num_ids": 37
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    ans = 0\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            count += 1\n        else:\n            count = 0\n        ans = count\n        if ans == n:\n            return i\n    return -1\n",
        "num_ids": 70
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    numbers = [1,2,3,4]\n    count = 0\n    for i in range(len(numbers)):\n        count +=1\n        if count == n:\n            return numbers[i]\n    return -1\ndef polite_count(n):\n    '''\n    Write a function to find all the polite numbers up to n. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    for i in range(n):\n        if is_polite(i) >= 0:\n            count+=1\n    return count\ndef number_of_divisors(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors2(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors3(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors4(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors5(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors6(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors7(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors8(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors9(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors10(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors11(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors12(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors13(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors14(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors15(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors16(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors17(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors18(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors19(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors20(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors21(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors22(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1\n    return div\ndef number_of_divisors23(n):\n    '''\n    Write a function to find number of divisors of a number n.\n    '''\n    i = 1\n    div = 1\n    while(i<=n):\n        if (n%i ==0):\n            div +=1\n        i +=1",
        "num_ids": 40
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<1: \n        return False \n    if n==1: \n        return True\n    if n==2: \n        return False \n    if n==3: \n        return True \n    if n==4: \n        return False \n    if n%2==0: \n        return False \n    if n%2==1: \n        return True \n    if n%4==0: \n        return False \n    if n%4==1: \n        return True \n    if n%4==3: \n        return False \n    if n%4==2: \n        return True \n    if n%8==0: \n        return False \n    if n%8==1: \n        return True \n    if n%8==5: \n        return False \n    if n%8==7: \n        return True \n    if n%8==6: \n        return False \n    if n%8==3: \n        return True \n    if n%8==4: \n        return True \n    if n%8==2: \n        return True \n    if n%8==9: \n        return True \n    if n%8==8: \n        return True \n    if n%8==0: \n        return False \n    if n%8==10: \n        return True \n    if n%8==6: \n        return True \n    if n%8==12: \n        return True \n    if n%8==11: \n        return False \n    if n%8==13: \n        return True \n    if n%8==14: \n        return True \n    if n%8==15: \n        return False \n    if n%8==16: \n        return True \n    if n%8==17: \n        return True \n    if n%8==18: \n        return True \n    if n%8==19: \n        return True \n    if n%8==20: \n        return True \n    if n%8==21: \n        return True \n    if n%8==22: \n        return True \n    if n%8==23: \n        return True \n    if n%8==24: \n        return True \n    if n%8==25: \n        return True \n    if n%8==26: \n        return True \n    if n%8==27: \n        return True \n    if n%8==28: \n        return True \n    if n%8==29: \n        return True \n    if n%8==30: \n        return True \n    if n%8==31: \n        return True \n    if n%8==32: \n        return True \n    if n%8==33: \n        return True \n    if n%8==34: \n        return True \n    if n%8==35: \n        return True \n    if n%8==36: \n        return True \n    if n%8==37: \n        return True \n    if n%8==38: \n        return True \n    if n%8==39: \n        return True \n    if n%8==40: \n        return True \n    if n%8==41: \n        return True \n    if n%8==42: \n        return True \n    if n%8==43: \n        return True \n    if n%8==44: \n        return True \n    if n%8==45: \n        return True \n    if n%8==46: \n        return True \n    if n%8==47: \n        return True \n    if n%8==48: \n        return True \n    if n%8==49: \n        return True \n    if n%8==50: \n        return True \n    if n%8==51: \n        return True \n    if n%8==52: \n        return True \n    if n%8==53: \n        return True \n    if n%8==54: \n        return True \n    if n%8==55: \n        return True \n    if n%8==56: \n        return True \n    if n%8==57: \n        return True \n    if n%8==58: \n        return True \n    if n%8==59: \n        return True \n    if n%8==60: \n        return True \n    if n%8==61: \n        return True \n    if n%8==62: \n        return True \n    if n%8==63: \n        return True \n    if n%8==64: \n        return True \n    if n%8==65: \n        return True \n    if n%8==66: \n        return True \n    if n%8==67: \n        return True \n    if n%8==68: \n        return True \n    if n%8==69: \n        return True \n    if n%8==70: \n        return True \n    if n%8==71: \n        return True \n    if n%8==72: \n        return True \n    if n%8==73: \n        return True \n    if n%8==74: \n        return True \n    if n%8==75: \n        return True \n    if n%8==76: \n        return True \n    if n%8==77: \n        return True \n    if n%8==78: \n        return True \n    if n%8==79: \n        return True \n    if n%8==80: \n        return True \n    if n%8==81: \n        return True \n    if n%8==82: \n        return True \n    if n%8==83: \n        return True \n    if n%8==84: \n        return True \n    if n%8==85: \n        return True \n    if n%8==86: \n        return True \n    if n%8==87: \n        return True \n    if n%8==88: \n        return True \n    if n%8==89: \n        return True \n    if n%8==90: \n        return True \n    if n%8==91: \n        return True \n    if n%8==92: \n        return True \n    if n%8==93: \n        return True \n    if n%8==94: \n        return True \n    if n%8==95: \n        return True \n    if n%8==96: \n        return True \n    if n%8==97: \n        return True \n    if n%8==98: \n        return True \n    if n%8==99: \n        return True \n    if n%8==100: \n        return True \n    if n%8==101: \n        return True \n    if n%8==102: \n        return True \n    if n%8==103: \n        return True \n    if n%8==104: \n        return True \n    if n%8==105: \n        return True \n    if n%8==106: \n        return True \n    if n%8==107: \n        return True \n    if n%8==108: \n        return True \n    if n%8==109: \n        return True \n    if n%8==110: \n        return True \n    if n%8==111: \n        return True \n    if n%8==112: \n        return True \n    if n%8==113: \n        return True \n    if n%8==114: \n        return True \n    if n%8==115: \n        return True \n    if n%8==116: \n        return True \n    if n%8==117: \n        return True \n    if n%8==118: \n        return True \n    if n%8==119: \n        return True \n    if n%8==120: \n        return True",
        "num_ids": 1999
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n%2==0: \n        return False \n    if n<0: \n        return False \n    if n<=3: \n        return True \n    if n%3==0 or n%5==0: \n        return False \n    for i in range(2,math.ceil(math.sqrt(n))+1): \n        if n%i==0: \n            return False \n    return True \n",
        "num_ids": 110
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n=int(input(\"Enter a number: \"))\n    a=0\n    b=1\n    i=1\n    while i<=n:\n        if n>=a+b:\n            a=b\n            b=a+b\n            i+=1\n        else:\n            break\n    print(a,b)\n    print(\"Sum of a & b is: \",a+b)\n    print(\"The nth polite number is: \",a+b-n)\n    print(\"---------------\")\nis_polite(8)\ndef is_polite_improved(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n=int(input(\"Enter a number: \"))\n    a=0\n    b=1\n    i=1\n    count=0\n    while count<=n:\n        if n>=a+b:\n            a=b\n            b=a+b\n            i+=1\n        else:\n            break\n    print(a,b)\n    print(\"Sum of a & b is: \",a+b)\n    print(\"The nth polite number is: \",a+b-n)\n    print(\"---------------\")\nis_polite_improved(8)\ndef find_min(array,n): \n    '''\n    Write a function to find nth min of array. \n    '''\n    min_value=array[0]\n    for i in range(0,n):\n        if array[i]<min_value:\n            min_value=array[i]\n    print(min_value)\n    print(\"---------------\")\narray=[2,5,3,9,8,7]\nfind_min(array,6)\ndef find_max(array,n): \n    '''\n    Write a function to find nth min of array. \n    '''\n    max_value=array[0]\n    for i in range(0,n):\n        if array[i]>max_value:\n            max_value=array[i]\n    print(max_value)\n    print(\"---------------\")\narray=[2,5,3,9,8,7]\nfind_max(array,6)\ndef find_max_index(array,n): \n    '''\n    Write a function to find nth min of array. \n    '''\n    max_value=array[0]\n    for i in range(0,n):\n        if array[i]>max_value:\n            max_value=array[i]\n    for i in range(0,len(array)):\n        if array[i]==max_value:\n            max_index=i\n    print(max_index)\n    print(\"---------------\")\narray=[2,5,3,9,8,7]\nfind_max_index(array,6)\ndef find_sum(array,n): \n    '''\n    Write a function to find nth min of array. \n    '''\n    sum=0\n    for i in range(0,n):\n        sum=sum+array[i]\n    print(sum)\n    print(\"---------------\")\narray=[2,5,3,9,8,7]\nfind_sum(array,6)\ndef sum_array(array,n): \n    '''\n    Write a function to find nth min of array. \n    '''\n    sum=0\n    for i in range(0,n):\n        sum=sum+array[i]\n    return sum\n    print(\"---------------\")\narray=[2,5,3,9,8,7]\nsum_array(array,6)\ndef find_avg(array,n): \n    '''\n    Write a function to find nth min of array. \n    '''\n    sum=0\n    for i in range(0,n):\n        sum=sum+array[i]\n    avg=sum/n\n    print(avg)\n    print(\"---------------\")\narray=[2,5,3,9,8,7]\nfind_avg(array,6)\ndef find_max_min_sum(array,n): \n    '''\n    Write a function to find nth min of array. \n    '''\n    max_value=array[0]\n    min_value=array[0]\n    sum=0\n    for i in range(0,n):\n        if array[i]>max_value:\n            max_value=array[i]\n        if array[i]<min_value:\n            min_value=array[i]\n        sum=sum+array[i]\n    print(\"Max value is: \",max_value)\n    print(\"Min value is: \",min_value)\n    print(\"Sum of array is: \",sum)\n    print(\"---------------\")\narray=[2,5,3,9,8,7]\nfind_max_min_sum(array,6)\ndef find_median(array,n): \n    '''\n    Write a function to find nth min of array. \n    '''\n    array.sort()\n    median_index=(n-1)//2\n    print(\"Median is: \",array[median_index])\n    print(\"---------------\")\narray=[2,5,3,9,8,7]\nfind_median(array,6)\ndef find_mode(array,n): \n    '''\n    Write a function to find nth min of array. \n    '''\n    dict={}\n    for i in range(0,n):\n        if array[i] in dict:\n            dict[array[i]]+=1\n        else:\n            dict[array[i]]=1\n    sorted_dict=sorted(dict.items(),key=lambda x:x[1])\n    max_value=sorted_dict[-1][1]\n    mode_list=[]\n    for i in range(0,len(sorted_dict)):\n        if sorted_dict[i][1]==max_value:\n            mode_list.append(sorted_dict[i][0])\n    print(\"The mode(s) is: \",mode_list)\n    print(\"---------------\")\narray=[2,5,3,9,8,7]\nfind_mode(array,6)\ndef find_range(array,n): \n    '''\n    Write a function to find nth min of array. \n    '''\n    min_value=array[0]\n    max_value=array[0]\n    for i in range(0,n):\n        if array[i]>max_value:\n            max_value=array[i]\n        if array[i]<min_value:\n            min_value=array[i]\n    print(\"Range is: \",max_value-min_value)\n    print(\"---------------\")\narray=[2,5,3,9,8,7]\nfind_range(array,6)\ndef find_difference(array,n): \n    '''\n    Write a function to find nth min of array. \n    '''\n    max_value=array[0]\n    for i in range(0,n):\n        if array[i]>max_value:\n            max_value=array[i]\n    min_value=array[0]\n    for i in range(0,n):\n        if array[i]<min_value:\n            min_value=array[i]\n    difference=max_value-min_value\n    print(\"Difference is: \",difference)\n    print(\"---------------\")\narray=[2,5,3,9,8,7]\nfind_difference(array,6)\ndef find_product(array,n): \n    '''\n    Write a function to find nth min of array. \n    '''\n    product=1\n    for i in range(0,n):\n        product=product*array[i]\n    print(\"Product of array is: \",product)\n    print(\"---------------\")\narray=[2,5,3,9,8,7]\nfind_product(array,6)\ndef find_mean(array,n): \n    '''\n    Write a function to find nth min of array. \n    '''\n    sum=0\n    for i in range(0,n):\n        sum=sum+array[i]\n",
        "num_ids": 28
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    polite = 1\n    while (count!= n):\n        polite += 1\n        if is_prime(polite):\n            count += 1\n    return polite\n",
        "num_ids": 47
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Code here\n    if n==1:\n        return 2\n    if n==2:\n        return 6\n    if n==3:\n        return 10\n    if n==4:\n        return 14\n    if n==5:\n        return 18\n    if n==6:\n        return 22\n    if n==7:\n        return 26\n    if n==8:\n        return 30\n    if n==9:\n        return 34\n    if n==10:\n        return 38\n    if n==11:\n        return 42\n    if n==12:\n        return 46\n    if n==13:\n        return 50\n    if n==14:\n        return 54\n    if n==15:\n        return 58\n    if n==16:\n        return 62\n    if n==17:\n        return 66\n    if n==18:\n        return 70\n    if n==19:\n        return 74\n    if n==20:\n        return 78\n    if n==21:\n        return 82\n    if n==22:\n        return 86\n    if n==23:\n        return 90\n    if n==24:\n        return 94\n    if n==25:\n        return 98\n    if n==26:\n        return 102\n    if n==27:\n        return 106\n    if n==28:\n        return 110\n    if n==29:\n        return 114\n    if n==30:\n        return 118\n    if n==31:\n        return 122\n    if n==32:\n        return 126\n    if n==33:\n        return 130\n    if n==34:\n        return 134\n    if n==35:\n        return 138\n    if n==36:\n        return 142\n    if n==37:\n        return 146\n    if n==38:\n        return 150\n    if n==39:\n        return 154\n    if n==40:\n        return 158\n    if n==41:\n        return 162\n    if n==42:\n        return 166\n    if n==43:\n        return 170\n    if n==44:\n        return 174\n    if n==45:\n        return 178\n    if n==46:\n        return 182\n    if n==47:\n        return 186\n    if n==48:\n        return 190\n    if n==49:\n        return 194\n    if n==50:\n        return 198\n    if n==51:\n        return 202\n    if n==52:\n        return 206\n    if n==53:\n        return 210\n    if n==54:\n        return 214\n    if n==55:\n        return 218\n    if n==56:\n        return 222\n    if n==57:\n        return 226\n    if n==58:\n        return 230\n    if n==59:\n        return 234\n    if n==60:\n        return 238\n    if n==61:\n        return 242\n    if n==62:\n        return 246\n    if n==63:\n        return 250\n    if n==64:\n        return 254\n    if n==65:\n        return 258\n    if n==66:\n        return 262\n    if n==67:\n        return 266\n    if n==68:\n        return 270\n    if n==69:\n        return 274\n    if n==70:\n        return 278\n    if n==71:\n        return 282\n    if n==72:\n        return 286\n    if n==73:\n        return 290\n    if n==74:\n        return 294\n    if n==75:\n        return 298\n    if n==76:\n        return 302\n    if n==77:\n        return 306\n    if n==78:\n        return 310\n    if n==79:\n        return 314\n    if n==80:\n        return 318\n    if n==81:\n        return 322\n    if n==82:\n        return 326\n    if n==83:\n        return 330\n    if n==84:\n        return 334\n    if n==85:\n        return 338\n    if n==86:\n        return 342\n    if n==87:\n        return 346\n    if n==88:\n        return 350\n    if n==89:\n        return 354\n    if n==90:\n        return 358\n    if n==91:\n        return 362\n    if n==92:\n        return 366\n    if n==93:\n        return 370\n    if n==94:\n        return 374\n    if n==95:\n        return 378\n    if n==96:\n        return 382\n    if n==97:\n        return 386\n    if n==98:\n        return 390\n    if n==99:\n        return 394\n    if n==100:\n        return 398\n    if n==101:\n        return 402\n    if n==102:\n        return 406\n    if n==103:\n        return 410\n    if n==104:\n        return 414\n    if n==105:\n        return 418\n    if n==106:\n        return 422\n    if n==107:\n        return 426\n    if n==108:\n        return 430\n    if n==109:\n        return 434\n    if n==110:\n        return 438\n    if n==111:\n        return 442\n    if n==112:\n        return 446\n    if n==113:\n        return 450\n    if n==114:\n        return 454\n    if n==115:\n        return 458\n    if n==116:\n        return 462\n    if n==117:\n        return 466\n    if n==118:\n        return 470\n    if n==119:\n        return 474\n    if n==120:\n        return 478\n    if n==121:\n        return 482\n    if n==122:\n        return 486\n    if n==123:\n        return 490\n    if n==124:\n        return 494\n    if n==125:\n        return 498\n    if n==126:\n        return 502\n    if n==127:\n        return 506\n    if n==128:\n        return 510\n    if n==129:\n        return 514\n    if n==130:\n        return 518\n    if n==131:\n        return 522\n    if n==132:\n        return 526\n    if n==133:\n        return 530\n    if n==134:\n        return 534\n    if n==135:\n        return 538\n    if n==136:\n        return 542\n    if n==137:\n        return 546\n    if n==138:\n        return 550\n    if n==139:\n        return 554\n    if n==140:\n        return 558\n    if n==141:\n        return 562\n    if n==142:\n        return 566\n    if n==143:\n        return 570\n    if n==144:\n        return 574\n    if n==145:\n        return 578\n    if n==146:\n        return 582\n    if n==147:\n        return 586\n    if n==148:\n        return 590\n    if n==149:\n        return 594\n    if n==150:\n        return 598\n    if n==151:\n        return 602\n    if n==152:\n        return 606\n    if n==153:\n        return 610\n    if n==154:\n        return 614\n    if n==155:\n        return 618\n    if n==156:\n        return 622\n    if n==157:\n        return 626\n    if n==158:\n        return 630\n    if n==159:\n        return 634\n    if n==160:\n        return 638\n    if n==161:\n        return 642\n    if n==162:\n        return 646\n    if n==163:\n        return 650\n    if n==164:\n        return 654\n    if n==165:\n        return 658\n    if n==166:\n        return 662\n    if n==167:\n        return 666\n    if n==168:\n        return 670\n    if n==169:\n        return 674\n    if n==170:\n        return 678\n    if n==171:\n        return 682\n    if n==172:\n        return 686\n    if n==173:\n        return 690\n    if n==174:\n        return 694\n    if n==175:\n        return 698\n    if n==176:\n        return 702\n    i",
        "num_ids": 2000
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # l1 = [1, 2, 3, 4, 5]\n    # p = []\n    # for i in range(len(l1)-1):\n    #     p.append([l1[i], l1[i+1]])\n    # p.append([l1[-2], l1[-1]])\n    # print(p)\n    return [l1[i:i+2] for i in range(0,len(l1)-1)]\n",
        "num_ids": 115
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    a = []\n    for i in range(0,len(l1)-1):\n        a.append([l1[i],l1[i+1]])\n    return a\n",
        "num_ids": 46
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1)>1:\n        return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n    else:\n        return None\n",
        "num_ids": 49
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result=[]\n    for i in range(len(l1)-1):\n        result.append([l1[i],l1[i+1]])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i],l1[i+1]))\n    return pairs\n",
        "num_ids": 46
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return list(zip(l1[0:-1],l1[1:]))\n",
        "num_ids": 22
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        else:\n            pair = (l1[i],l1[i+1])\n            pairs.append(pair)\n    return pairs\n",
        "num_ids": 70
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(0, len(l1)-1)]\n",
        "num_ids": 32
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1.sort()\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i], l1[i+1]))\n    return l2\n",
        "num_ids": 54
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if (arr[i]+arr[j]) == sum:\n                count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    n = len(arr)\n    count = 0\n    l = 0\n    r = n-1\n    while l < r:\n        if arr[l] + arr[r] == sum:\n            count += 1\n            l += 1\n            r -= 1\n        elif arr[l] + arr[r] < sum:\n            l += 1\n        else:\n            r -= 1\n    return count\n",
        "num_ids": 104
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    arr.sort()\n",
        "num_ids": 14
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    arr.sort()\n",
        "num_ids": 14
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count=0\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count+=1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    hash_map = dict()\n",
        "num_ids": 18
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if sum == 0:\n        return 0\n    if len(arr)<=1:\n        return 0\n    pairs = 0\n    arr.sort()\n    i = 0\n    j = len(arr)-1\n    while i<j:\n        if arr[i]+arr[j]<sum:\n            i+=1\n        elif arr[i]+arr[j]>sum:\n            j-=1\n        else:\n            pairs +=1\n            i+=1\n            j-=1\n",
        "num_ids": 122
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    hash_map = {}\n    for i in arr:\n        if i in hash_map.keys():\n            hash_map[i] += 1\n        else:\n            hash_map[i] = 1\n",
        "num_ids": 51
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n",
        "num_ids": 66
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n",
        "num_ids": 33
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif= [i for i in li1 + li2 if i in li1 and i in li2]\n    return li_dif\n",
        "num_ids": 37
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i in li1 and i not in li2]\n    return li_dif\n",
        "num_ids": 38
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i in li1 and i in li2]\n    return li_dif\n",
        "num_ids": 37
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n",
        "num_ids": 19
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = list(set(li1) - set(li2))\n    return result\n",
        "num_ids": 23
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n    \ndef Convert(string): \n    li = list(string.split(\" \")) \n    return li\n",
        "num_ids": 45
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i**4) \n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i**4 for i in range(1,n+1) if i%2!= 0])\n",
        "num_ids": 29
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Your code goes here\n    return n**3\n",
        "num_ids": 15
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 0 :\n        return \"please enter positive number\"\n    if n == 1 :\n        return 1\n    sum = 0\n    for i in range(1, n + 1, 2) :\n        sum += i ** 4\n    return sum\n",
        "num_ids": 61
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_numbers = range(0,n+1,2)\n    return sum([i**4 for i in odd_numbers])\n",
        "num_ids": 35
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if i%2!= 0 : \n            sum += (i**4)\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if (i%2!= 0):\n            total += i**4\n    return total\n",
        "num_ids": 42
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while (i<=n):\n        sum = sum + ((i * 4) ** 3)\n        i = i + 1\n    return sum\n    \ndef main():\n    print(odd_num_sum(3))\n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 80
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if i % 2!= 0 :\n            sum += pow(i,4)\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_brackets = ['(', '{', '[']\n    close_brackets = [')', '}', ']']\n    for bracket in exp:\n        if bracket in open_brackets:\n            stack.append(bracket)\n        elif bracket in close_brackets:\n            pos = close_brackets.index(bracket)\n            if len(stack) > 0 and open_brackets[pos] == stack[len(stack)-1]:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 154
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_paran = '({['\n    close_paran = ')}]'\n    stack = deque()\n    for paran in exp:\n        if paran in open_paran:\n            stack.append(paran)\n        elif paran in close_paran:\n            pos = close_paran.index(paran)\n            if ((len(stack) > 0) and\n                (open_paran[pos] == stack[len(stack)-1])):\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n",
        "num_ids": 144
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    operators = ['+', '-', '*', '/']\n",
        "num_ids": 25
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_brackets = ['(', '{', '[']\n    close_brackets = [')', '}', ']']\n    bracket_pair = dict(zip(close_brackets, open_brackets))\n",
        "num_ids": 55
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # initialize deque with opening bracket \n    stack = deque() \n    stack.append('(') \n    n = len(exp) \n    # Traverse through every character of expression \n    for i in range(0, n): \n        # if current character is an closing bracket \n        if exp[i] == ')': \n            # pop the topmost element from stack if it is not a closing bracket \n            if len(stack) > 0 and stack[-1]!= '(': \n                return False\n            stack.pop() \n        else: \n            stack.append(exp[i]) \n",
        "num_ids": 149
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    opening_brackets = deque(\"({[\")\n    closing_brackets = deque(\")}]\")\n    mapping = dict(zip(opening_brackets, closing_brackets))\n    open_brackets = set(opening_brackets)\n    close_brackets = set(closing_brackets)\n    stack = []\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if len(stack) == 0:\n                return False\n            else:\n                last_open = stack.pop()\n                if not last_open == mapping[char]:\n                    return False\n    return True\n",
        "num_ids": 167
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in '({[':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            if char == ')':\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            elif char == ']':\n                if stack[-1] == '[':\n                    stack.pop()\n                else:\n                    return False\n            elif char == '}':\n                if stack[-1] == '{':\n                    stack.pop()\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 175
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    brackets = ['(', ')', '[', ']', '{', '}']\n    # Using deque to represent a stack. The front is the end of the queue.\n    stack = deque()\n    # Iterate through the expression in bracket\n    for br in exp:\n        if br not in brackets:\n            continue\n        if br in brackets:\n            # Check if the bracket is an opening bracket and push it to the stack.\n            if br in ('(', '{', '['):\n                stack.append(br)\n            elif br in (')', '}', ']'):\n                if len(stack) == 0:\n                    return False\n                # Check if the top of the stack matches with the closing bracket\n                if br == ')' and stack.pop()!= '(':\n                    return False\n                elif br == '}' and stack.pop()!= '{':\n                    return False\n                elif br == ']' and stack.pop()!= '[':\n                    return False\n    # Check if the stack is empty\n    if len(stack) > 0:\n        return False\n    return True\n",
        "num_ids": 261
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stk = deque()\n    for char in exp:\n        if char in ['(','{','[']:\n            stk.append(char)\n        elif char in [')', '}', ']']:\n            if not stk:\n                return False\n            elif stk.pop() == '(' and char!= ')':\n                return False\n            elif stk.pop() == '{' and char!= '}':\n                return False\n            elif stk.pop() == '[' and char!= ']':\n                return False\n    if stk:\n        return False\n    return True\n",
        "num_ids": 148
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    lst = test_str.split(' ')\n    lst1 = []\n    for i in lst:\n        if len(i) == K:\n            lst1.append(i)\n    for i in lst1:\n        lst.remove(i)\n    return lst\n",
        "num_ids": 73
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if not K:\n        return test_str\n",
        "num_ids": 14
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    lst = test_str.split()\n    lst = [x for x in lst if len(x) < K]\n    return \" \".join(lst)\n",
        "num_ids": 43
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return \" \".join(filter(lambda x: len(x)!= K, test_str.split(\" \")))\n",
        "num_ids": 29
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    length_set = set()\n    for word in test_str.split():\n        if len(word) == K:\n            length_set.add(word)\n    for i in length_set:\n        test_str = test_str.replace(i, '')\n    return test_str\n",
        "num_ids": 72
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = []\n    for word in test_str.split():\n        if len(word)!= K:\n            res.append(word)\n    return''.join(res)\n",
        "num_ids": 44
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) == 0 or K == 0:\n        return test_str\n    count = 0\n    for i in range(len(test_str)):\n        if len(test_str[i:].split()) == K:\n            count += 1\n            test_str = test_str[:i] + test_str[i + K:]\n    return test_str\n",
        "num_ids": 93
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = []\n    for word in test_str.split():\n        if len(word) == K:\n            continue\n        else:\n            new_str.append(word)\n    return''.join(new_str)\n",
        "num_ids": 57
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = test_str.split(' ')\n    return''.join([new_str[i] for i in range(len(new_str)) if len(new_str[i])!= K])\n",
        "num_ids": 52
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    length_dict = {}\n    for test_word in test_str.split():\n        if len(test_word) not in length_dict:\n            length_dict[len(test_word)] = 1\n        else:\n            length_dict[len(test_word)] += 1\n",
        "num_ids": 69
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #text = input('Please enter a string:')\n    #pattern = input('Please enter a pattern:')\n    index_positions = []\n    for m in re.finditer(pattern, text):\n        index_positions.append(m.start())\n    return index_positions\n",
        "num_ids": 70
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance = re.search(pattern, text)\n    if occurance:\n        print('occurance',occurance.group())\n        print('occurance_pos',occurance.span())\n        print('occurance_start',occurance.start())\n        print('occurance_end',occurance.end())\n        print('occurance_span',occurance.span())\n    else:\n        print('None')\n",
        "num_ids": 99
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text=text.lower()\n    pattern=pattern.lower()\n    result_list=[]\n    # iterate text and pattern\n    for i in range(0,len(text)):\n        for j in range(0,len(pattern)):\n            # find pattern in text\n            if text[i+j] == pattern[j]:\n                # increase count\n                count+=1\n                # if index not added\n                if count==len(pattern):\n                    result_list.append(i+1)\n                    count=0\n            # if pattern not found\n            else:\n                count=0\n    return result_list\n",
        "num_ids": 147
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_list = []\n    for m in re.finditer(pattern,text):\n        pattern_list.append(m.group())\n    if not pattern_list:\n        return None\n    else:\n        return pattern_list\n",
        "num_ids": 57
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print(f'The occurence of the substring {pattern} is {text.count(pattern)}')\n    print(f'The occurence of the substring {pattern} is {text.find(pattern)}')\n",
        "num_ids": 54
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance = [i.start() for i in re.finditer(pattern, text)]\n    occurance = [i for i in occurance if i!= 0]\n    if len(occurance) == 0:\n        return None\n    else:\n        return occurance\ndef count_substring(text, pattern):\n    '''\n    Write a function to find the number of occurrences of a substring in a string. Return 0 if there is no match.\n    '''\n    return len(occurance_substring(text,pattern))\n    ",
        "num_ids": 18
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.findall(pattern,text)\n    if match:\n        occurance = match.count(match[0])\n        return occurance\n    else:\n        return None\n    \n",
        "num_ids": 48
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if len(matches) > 0:\n        return matches\n    return None\n",
        "num_ids": 35
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern\n    #substring_list = []\n    occurance = 0\n    for m in re.finditer(pattern, text):\n        #print(m.group())\n        occurance += 1\n        #substring_list.append(m.group())\n        #print(m.start())\n    return occurance\n",
        "num_ids": 79
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # print(pattern)\n    # if pattern not in text:\n    #     print(\"No match\")\n    #     return None\n",
        "num_ids": 33
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) <= 0:\n        return False\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return False\n        elif i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 83
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not nums[i] % 2:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if nums:\n        return all(nums[i] % 2 == 1 for i in range(1, len(nums), 2))\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    result = True\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            result = False\n            break\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(nums[i] % 2 == 1 for i in range(1,len(nums),2))\n",
        "num_ids": 30
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    left,right = 0,len(test_str) - 1\n    while left < right:\n        if test_str[left] in vowels and test_str[right] in vowels:\n            return True\n        left += 1\n        right -= 1\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    \n    for i,v in enumerate(test_str):\n        if (i-1 >= 0) and (v in vowels) and (test_str[i-1] in vowels):\n            count += 1\n        if (i+1 < len(test_str)) and (v in vowels) and (test_str[i+1] in vowels):\n            count += 1\n    \n    return count\n    \n    \ndef count_consonants(test_str):\n    '''\n    Write a function to count those characters which have consonants as their neighbors in the given string.\n    '''\n    consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z','B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Y','Z']\n    count = 0\n    \n    for i,v in enumerate(test_str):\n        if (i-1 >= 0) and (v in consonants) and (test_str[i-1] in consonants):\n            count += 1\n        if (i+1 < len(test_str)) and (v in consonants) and (test_str[i+1] in consonants):\n            count += 1\n    \n    return count\n    \n    \ndef count_digits(test_str):\n    '''\n    Write a function to count those characters which have digits as their neighbors in the given string.\n    '''\n    digits = ['0','1','2','3','4','5','6','7','8','9','0']\n    count = 0\n    \n    for i,v in enumerate(test_str):\n        if (i-1 >= 0) and (v in digits) and (test_str[i-1] in digits):\n            count += 1\n        if (i+1 < len(test_str)) and (v in digits) and (test_str[i+1] in digits):\n            count += 1\n    \n    return count\n    \n    \ndef count_vowels_for_word(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string for each word.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    \n    for i,v in enumerate(test_str):\n        if (i-1 >= 0) and (v in vowels) and (test_str[i-1] in vowels):\n            count += 1\n        if (i+1 < len(test_str)) and (v in vowels) and (test_str[i+1] in vowels):\n            count += 1\n    \n    return count\n    \n    \ndef count_consonants_for_word(test_str):\n    '''\n    Write a function to count those characters which have consonants as their neighbors in the given string for each word.\n    '''\n    consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z','B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Y','Z']\n    count = 0\n    \n    for i,v in enumerate(test_str):\n        if (i-1 >= 0) and (v in consonants) and (test_str[i-1] in consonants):\n            count += 1\n        if (i+1 < len(test_str)) and (v in consonants) and (test_str[i+1] in consonants):\n            count += 1\n    \n    return count\n    \n    \ndef count_digits_for_word(test_str):\n    '''\n    Write a function to count those characters which have digits as their neighbors in the given string for each word.\n    '''\n    digits = ['0','1','2','3','4','5','6','7','8','9','0']\n    count = 0\n    \n    for i,v in enumerate(test_str):\n        if (i-1 >= 0) and (v in digits) and (test_str[i-1] in digits):\n            count += 1\n        if (i+1 < len(test_str)) and (v in digits) and (test_str[i+1] in digits):\n            count += 1\n    \n    return count\n    \n    \ndef count_vowels_for_words(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string for each word.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    \n    for i,v in enumerate(test_str.split(' ')):\n        if (i-1 >= 0) and (v in vowels) and (test_str.split(' ')[i-1] in vowels):\n            count += 1\n        if (i+1 < len(test_str.split(' '))) and (v in vowels) and (test_str.split(' ')[i+1] in vowels):\n            count += 1\n    \n    return count\n    \n    \ndef count_consonants_for_words(test_str):\n    '''\n    Write a function to count those characters which have consonants as their neighbors in the given string for each word.\n    '''\n    consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z','B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Y','Z']\n    count = 0\n    \n    for i,v in enumerate(test_str.split(' ')):\n        if (i-1 >= 0) and (v in consonants) and (test_str.split(' ')[i-1] in consonants):\n            count += 1\n        if (i+1 < len(test_str.split(' '))) and (v in consonants) and (test_str.split(' ')[i+1] in consonants):\n            count += 1\n    \n    return count\n    \n    \ndef count_digits_for_words(test_str):\n    '''\n    Write a function to count those characters which have digits as their neighbors in the given string for each word.\n    '''\n    digits = ['0','1','2','3','4','5','6','7','8','9','0']\n    count = 0\n    \n    for i,v in enumerate(test_str.split(' ')):\n        if (i-1 >= 0) and (v in digits) and (test_str.split(' ')[i-1] in digits):\n            count += 1\n        if (i+1 < len(test_str.split(' '))) and (v in digits) and (test_str.split(' ')[i+1] in digits):\n            count += 1\n    \n    return count\n    \n    \ndef count_vowels_for_sentence(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string for each word.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    \n    for i,v in enumerate(test_str.split(' ')):\n        if (i-1 >= 0) and (v in vowels) and (test_str.split(' ')[i-1] in vowels):\n            count += 1\n        if (i+1 < len(test_str.split(' '))) and (v in vowels) and (test_str.split(' ')[i+1] in vowels):\n            count += 1\n    \n    return count\n    \n    \ndef count",
        "num_ids": 155
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    \n    # Method 1\n    # count = 0\n    # for c in test_str:\n    #     if c in vowels:\n    #         count += 1\n    \n    # Method 2\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n        elif test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count\n    \n",
        "num_ids": 166
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if (i < len(test_str) - 1) and (test_str[i+1] in vowels):\n                count += 1\n            if (i > 0) and (test_str[i-1] in vowels):\n                count += 1\n    return count\n",
        "num_ids": 122
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    for i in test_str:\n        if i in vowels:\n            if test_str[test_str.index(i)-1] in vowels or test_str[test_str.index(i)+1] in vowels:\n                count += 1\n    return count\n",
        "num_ids": 99
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i == 0:\n                if test_str[i+1] in vowels:\n                    count += 1\n            elif i == len(test_str)-1:\n                if test_str[i-1] in vowels:\n                    count += 1\n            else:\n                if test_str[i-1] in vowels or test_str[i+1] in vowels:\n                    count += 1\n    return count\n",
        "num_ids": 146
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    vowel_counter = 0\n    for idx, char in enumerate(test_str):\n        if char in vowels and (idx == 0 or test_str[idx-1] not in vowels):\n            vowel_counter += 1\n        elif char in vowels and (idx == len(test_str)-1 or test_str[idx+1] not in vowels):\n            vowel_counter += 1\n    return vowel_counter\n",
        "num_ids": 124
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    print(test_str)\n    counter=0\n    for i in range(0,len(test_str)-1):\n        if test_str[i]==\"a\" or test_str[i]==\"e\" or test_str[i]==\"i\" or test_str[i]==\"o\" or test_str[i]==\"u\" or test_str[i]==\"A\" or test_str[i]==\"E\" or test_str[i]==\"I\" or test_str[i]==\"O\" or test_str[i]==\"U\" :\n            if test_str[i+1]==\"a\" or test_str[i+1]==\"e\" or test_str[i+1]==\"i\" or test_str[i+1]==\"o\" or test_str[i+1]==\"u\" or test_str[i+1]==\"A\" or test_str[i+1]==\"E\" or test_str[i+1]==\"I\" or test_str[i+1]==\"O\" or test_str[i+1]==\"U\" :\n                counter+=1\n    print(counter)\n    return counter\ncount_vowels(\"Hello there\")",
        "num_ids": 302
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    count = 0\n    for i, c in enumerate(test_str):\n        if c in vowels:\n            try:\n                if test_str[i+1] in vowels:\n                    count += 1\n            except:\n                pass\n            try:\n                if test_str[i-1] in vowels:\n                    count += 1\n            except:\n                pass\n    return count\n",
        "num_ids": 107
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if i + 1 < len(test_str) and test_str[i + 1] in VOWELS:\n            count += 1\n        if i - 1 >= 0 and test_str[i - 1] in VOWELS:\n            count += 1\n    return count\n",
        "num_ids": 84
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = sorted(arr)\n    i = 0\n    j = 1\n    while j<len(arr):\n        if arr[i]!= arr[j]:\n            i+=1\n            j+=1\n        else:\n            j+=1\n    return(arr[i])\n",
        "num_ids": 69
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # step1: Check if list is not empty\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 28
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "num_ids": 11
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x = set(arr)\n    total = sum(set(arr))\n    return total\n",
        "num_ids": 24
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Driver code  \n    #arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] \n    #print(find_sum(arr)) \n",
        "num_ids": 57
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    for i in range(len(arr)): \n        index = abs(arr[i]) \n        arr[index - 1] = -abs(arr[index - 1]) \n    return sum(arr) \n  \ndef printArray(arr, n): \n    '''\n    Write a python function to print the given list in a specific format.\n    '''\n    for i in range(n): \n        print(arr[i], end = \" \") \n  ",
        "num_ids": 27
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sums = sum(set(arr))\n    return sums\n",
        "num_ids": 17
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #arr = [0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9] \n    # sum=0\n    # for i in range(0, len(arr)): \n    #     sum = sum ^ arr[i] \n    # return sum \n    # return sum(set(arr))\n",
        "num_ids": 82
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def grouped_list(iterable, n):\n        return [list(group) for key, group in groupby(iterable, lambda x: x[0]==n)]\n    new_list = grouped_list(list1, 1)\n    print(new_list)\n",
        "num_ids": 66
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # list1 = [1,2,2,3,3,3,3,4,4,4,4,4,4,5,5,5,6,6,6,6,6,7]\n    list2 = []\n    list3 = []\n    for key, group in groupby(list1):\n        list2.append(key)\n        list3.append(len(list(group)))\n    return list2, list3\n    #print(list2)\n    #print(list3)\n",
        "num_ids": 124
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for k, g in groupby(list1):\n        new_list.append(list(g))\n    return new_list\n",
        "num_ids": 40
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for _, group in groupby(list1)]\n",
        "num_ids": 21
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # code here\n    new_list = []\n    for key, group in groupby(list1):\n        new_list.append(list(group))\n    return new_list\n    \n",
        "num_ids": 47
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    print(list(groupby(list1)))\n    list2=[]\n    for key, group in groupby(list1):\n        list2.append(list(group))\n    return list2\nlist1=[0,0,0,1,2,3,4,5,6,6]\nprint(pack_consecutive_duplicates(list1))\n",
        "num_ids": 89
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key,group in groupby(list1):\n        result.append(list(group))\n    return result\nprint(pack_consecutive_duplicates([2, 4, 4, 6, 6, 8, 10, 12, 12, 14]))\nprint(pack_consecutive_duplicates([5, 4, 5, 6, 7, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(pack_consecutive_duplicates([1, 2, 3, 4, 4, 4, 5, 6, 6, 6, 6, 7, 8, 9, 9, 9, 9, 10, 11, 12, 13, 14, 14, 15, 16]))\n",
        "num_ids": 176
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    prev = None\n    for k, g in groupby(list1):\n        if prev!= k:\n            prev = k\n            res.append(list(g))\n        else:\n            res[-1].append(k)\n    return res\nprint(pack_consecutive_duplicates([1,2,3,4,5,4,3,4,3,4,3,4,5,4,3,4,3,4,3,4,5,4,3,4,3,4,3,4,5,4,3,4,3,4,3,4,5,4,3,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3,4,5,4,3,4,3",
        "num_ids": 2000
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for key,group in groupby(list1):\n        new_list.append(list(group))\n    return new_list\n",
        "num_ids": 40
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list=[]\n    for k,g in groupby(list1):\n        new_list.append(list(g))\n    return new_list\n",
        "num_ids": 40
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = [tuple(list1[i:i+2]) for i in range(0,len(list1)-1)]\n    list3 = []\n    list4 = []\n    for i in range(len(list2)):\n        for j in range(len(list2)):\n            if list2[i] == list2[j]:\n                list4.append(list2[i])\n    for i in range(len(list4)):\n        if list4[i] not in list3:\n            list3.append(list4[i])\n    dict1 = dict((i,list3.count(i)) for i in list3)\n    return dict1\n",
        "num_ids": 163
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    lst = []\n    for item in list1:\n        if type(item) == list:\n            lst.append(tuple(item))\n    return {i:list1.count(i) for i in lst}\n",
        "num_ids": 57
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    num_of_lists = 0\n    for i in list1:\n        if type(i) == list:\n            num_of_lists += 1\n    \n    dict_of_lists = {}\n    for i in list1:\n        if type(i) == list:\n            tuple_of_i = tuple(i)\n            dict_of_lists[tuple_of_i] = 0\n    for i in list1:\n        if type(i) == list:\n            tuple_of_i = tuple(i)\n            dict_of_lists[tuple_of_i] += 1\n    for i in dict_of_lists:\n        dict_of_lists[i] = [i, dict_of_lists[i]]\n    dict_of_lists = {k: v for k, v in dict_of_lists.items() if v!= 0}\n    return dict_of_lists\n",
        "num_ids": 217
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    for x in list1:\n        if type(x) is list:\n            list1.append(tuple(x))\n    return list1\n",
        "num_ids": 37
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dic = {}\n    for x in list1:\n        if tuple(x) in dic:\n            dic[tuple(x)] += 1\n        else:\n            dic[tuple(x)] = 1\n    return dic\n",
        "num_ids": 60
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counted = {}\n    for i in list1:\n        try:\n            counted[tuple(i)] += 1\n        except KeyError:\n            counted[tuple(i)] = 1\n    return counted\n",
        "num_ids": 54
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    for sublist in list1:\n        for item in sublist:\n            list2.append(item)\n    list2 = tuple(list2)\n    dict1 = {}\n    for item in list2:\n        if item in dict1:\n            dict1[item] = dict1[item] + 1\n        else:\n            dict1[item] = 1\n    return dict1\n",
        "num_ids": 99
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    for i in range(len(list1)):\n        if list1[i] not in unique_list:\n            unique_list.append(list1[i])\n",
        "num_ids": 49
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for i in list1:\n        if type(i) == list:\n            sublists.append(tuple(i))\n    return dict(Counter(sublists))\n",
        "num_ids": 48
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [x for x in combinations(test_list,2)]\n",
        "num_ids": 18
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # return list(combinations(test_list,3))\n    sum_list = []\n    for i in test_list:\n        for j in test_list:\n            for k in test_list:\n                if i+j+k == 2020:\n                    sum_list.append([i,j,k])\n    return sum_list\n",
        "num_ids": 82
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # for i in range(1, len(test_list)):\n    #     # print(i)\n    #     for j in combinations(test_list, i):\n    #         print(j)\n    # # print(i)\n    # # print(combinations(test_list, i))\n",
        "num_ids": 74
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #Using itertools.combinations() to find the combinations of sum from the tuple list\n    combinations_list = list(combinations(test_list,2))\n    #returning the combinations\n    return combinations_list\n",
        "num_ids": 54
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combos = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            all_combos.append( (test_list[i], test_list[j]) )\n    return all_combos\n",
        "num_ids": 72
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        comb = combinations(test_list, i+1)\n        for i in comb:\n            if sum(i) not in sum_list:\n                sum_list.append(sum(i))\n    return sum_list\n",
        "num_ids": 75
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #from itertools import combinations\n    #def find_sum_combinations(nums, target):\n    #    for length in range(len(nums)+1):\n    #        for combination in combinations(nums, length):\n    #            if sum(combination) == target:\n    #                yield combination\n    test_list = [1, 2, 3, 4, 5, 6, 7]\n    nums = list(combinations(test_list, 3))\n    print(nums)\n    print(list(combinations(test_list, 3)))\n    print(list(find_sum_combinations(test_list, 6)))\n    print(list(combinations(test_list, 2)))\n    \n    def find_sum_combinations(nums, target):\n        for length in range(len(nums)+1):\n            for combination in combinations(nums, length):\n                if sum(combination) == target:\n                    yield combination\n    \n    #for combination in find_sum_combinations(test_list, 6):\n    #    print(combination)\n    \n    print(list(find_sum_combinations(test_list, 6)))\n    \ndef binary_search(array, target):\n    '''Write a function to search for a target number in a sorted array of numbers'''\n    index = -1\n    \n    # Find the middle element\n    middle = len(array)//2\n    \n    # Compare the middle element with the target number\n    if array[middle] == target:\n        index = middle\n    \n    # If the middle element is greater than the target number,\n    # recur the search for the first half of the array\n    elif array[middle] > target:\n        index = binary_search(array[:middle], target)\n    \n    # Else recur the search for the second half of the array\n    else:\n        index = binary_search(array[middle + 1:], target)\n    \n    return index\n    \ndef check_permutation(string_a, string_b):\n    '''Write a function to check whether two strings are permutations of each other'''\n    if len(string_a)!= len(string_b):\n        return False\n    \n    count_a = [0]*256\n    count_b = [0]*256\n    \n    for char in string_a:\n        count_a[ord(char)] += 1\n    for char in string_b:\n        count_b[ord(char)] += 1\n    \n    if count_a == count_b:\n        return True\n    else:\n        return False\n        \ndef check_permutation_1(string_a, string_b):\n    # The characters of string_a and string_b are distinct. So set is used\n    if len(string_a)!= len(string_b):\n        return False\n    \n    char_set = [0]*128\n    \n    for char in string_a:\n        char_set[ord(char)] += 1\n    \n    for char in string_b:\n        char_set[ord(char)] -= 1\n    \n    for i in char_set:\n        if i!= 0:\n            return False\n    \n    return True\n    \ndef string_rotation(s1, s2):\n    '''Write a function to check whether two strings are a rotation of each other'''\n    # Use s2 as a reference string\n    if len(s1)!= len(s2):\n        return False\n    \n    for i in range(len(s1)):\n        if s1[i:] + s1[:i] == s2:\n            return True\n    return False\n    \ndef is_string_rotation_using_comparison(str1, str2):\n    '''Write a function to check whether two strings are a rotation of each other'''\n    # Store the first string in a variable S\n    S = str1\n    # Remove the first character\n    S = S[1:] + S[:1]\n    # Now compare the strings\n    if S == str2:\n        return True\n    else:\n        return False\n    \ndef check_substring(string_a, string_b):\n    '''Write a function to check whether a string is a substring of another string'''\n    \n    string_a_length = len(string_a)\n    string_b_length = len(string_b)\n    \n    if string_a_length > string_b_length:\n        return False\n    \n    for i in range(string_b_length - string_a_length + 1):\n        if string_a == string_b[i:i+string_a_length]:\n            return True\n    \n    return False\n    \ndef find_maximum_and_minimum_string(string):\n    '''Write a function to find the maximum and minimum characters of a given string'''\n    minimum = string[0]\n    maximum = string[0]\n    \n    for char in string:\n        if char < minimum:\n            minimum = char\n        if char > maximum:\n            maximum = char\n    \n    return minimum, maximum\n    \ndef find_max_length_of_substring(string):\n    '''Write a function to find the maximum length of the substring with distinct characters in a given string'''\n    current_length = 1\n    maximum_length = 1\n    \n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[j] not in string[i:j]:\n                current_length += 1\n            else:\n                if current_length > maximum_length:\n                    maximum_length = current_length\n                break\n        if maximum_length == current_length:\n            maximum_length = current_length\n            \n        current_length = 1\n    \n    return maximum_length\n    \ndef generate_substring(string):\n    '''Write a function to generate all the substrings of a string'''\n    if len(string) == 0:\n        return []\n    \n    result = ['']\n    \n    for i in range(1, len(string)+1):\n        result += [string[j:j+i] for j in range(0, len(string))]\n    \n    return result\n    \ndef get_max_len_substring(string, k):\n    '''Write a function to find the maximum length of the substrings of a given string of length k with distinct characters'''\n    max_length = 0\n    \n    for substring in generate_substring(string):\n        if len(substring) == k:\n            max_length = max(max_length, len(substring))\n    \n    return max_length\n    \ndef split_string_in_balanced_parantheses(string):\n    '''Write a function to split a string into balanced parantheses'''\n    \n    stack = []\n    \n    for char in string:\n        if char == '(':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    \n    return True if len(stack) == 0 else False\n    \ndef reverse_string(string):\n    '''Write a function to reverse a string'''\n    \n    string_reversed = ''\n    for char in string:\n        string_reversed = char + string_reversed\n    return string_reversed\n    \ndef reverse_string_1(string):\n    '''Write a function to reverse a string using slice'''\n    \n    return string[::-1]\n    \ndef sort_array_of_strings_with_repetition(string_array):\n    '''Write a function to sort the string array with duplicate strings'''\n    \n    # A helper function to find the index of the first occurrence of the string in the array\n    def first_index(string, string_array):\n        for i in range(len(string_array)):\n            if string == string_array[i]:\n                return i\n    \n    # If the given string is already present in the array\n    if string in string_array:\n        # The first occurrence of the string is its index in the array\n        string_first_occurrence = first_index(string, string_array)\n        # The string to be moved in the end of the array\n        string_t",
        "num_ids": 142
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #initializing the list of lists\n    #combinations_list=[]\n    #for i in range(0,len(test_list)):\n    #    for j in range(0,len(test_list)):\n    #        if i==j:\n    #            continue\n    #        else:\n    #            combinations_list.append(list(combinations(test_list[i],2)))\n    #return combinations_list\n    #using itertools\n    return [list(combinations(test_list[i],2)) for i in range(0,len(test_list))]\n",
        "num_ids": 144
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            print(i,j)\n            for tup in combinations(test_list[i],2):\n                #print(tup)\n                if sum(tup) == test_list[j]:\n                    print(tup)\n                    \ntest_list = [(1, 3, 4), (1, 3, 5), (1, 3, 6), (2, 3, 4), (2, 3, 5), (2, 3, 6)]\nfind_combinations(test_list)\n",
        "num_ids": 147
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    print(list(combinations(test_list, 2)))\n",
        "num_ids": 17
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    n=abs(n)\n    count=0\n    for i in range(1,int(math.sqrt(n))+1) :\n        if(n%i==0) :\n            if(n/i==i) :\n                count+=1\n            else :\n                count+=2\n    return count \n",
        "num_ids": 78
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1): \n        if (n % i == 0) : \n            count += 1\n    if (count % 2 == 0): \n        return True\n    else : \n        return False\n    return \n",
        "num_ids": 66
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    x = int(math.sqrt(n))\n    count = 0\n    for i in range(1, x+1) :\n        if n % i == 0 :\n            if n / i == i :\n                count += 1\n            else :\n                count += 2\n    return count\n",
        "num_ids": 70
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    cnt=0\n    for i in range(1,int(n**0.5)+1):\n        if n%i == 0:\n            cnt+=1\n    if cnt % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef gcd(a, b): \n    '''\n    Write a function to return the GCD of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-19.php\n    '''\n    if a > b : \n        small = b \n    else : \n        small = a \n    for i in range(1, small+1): \n        if((a % i == 0) and (b % i == 0)): \n            gcd = i \n    return gcd \n",
        "num_ids": 74
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i <= n :\n        if n % i == 0:\n            count += 1\n        i += 1\n    if count % 2 == 0:\n        return True\n    else :\n        return False\ndef diff_product(a,b):\n    '''\n    Write a Python program to check whether the product of three positive integers is equal to the given number n.\n    '''\n    return math.prod(a,b,n)\ndef how_many_letters(word):\n    '''\n    Write a Python program to calculate the sum of the absolute values of the difference of two successive elements of a given list.\n    '''\n    return math.fsum(map(abs, zip(word[:-1], word[1:])))\ndef roman_to_decimal(roman):\n    '''\n    Write a Python program to get the decimal equivalent of a string of Roman numerals.\n    '''\n    return math.prod(map(int, roman))\ndef sum_factorial(n):\n    '''\n    Write a Python program to calculate the summation of the absolute difference of n distinct numbers.\n    '''\n    return sum(map(lambda x: abs(x), itertools.permutations(range(n))))\ndef to_camel_case(text):\n    '''\n    Write a Python program to convert a given string to camel case.\n    '''\n    return text.title().replace(\" \", \"\")\ndef prime_factors(n):\n    '''\n    Write a Python program to get the number of prime factors of a given integer.\n    '''\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            n = n/i\n        else:\n            i += 1\n    return i\ndef count_vowels(text):\n    '''\n    Write a Python program to count the number of vowels in a given text.\n    '''\n    return len(re.findall(r'[aeiou]', text, flags=re.IGNORECASE))\ndef encrypt_message(string,shift):\n    '''\n    Write a Python program to encrypt a message.\n    '''\n    cipher = \"\"\n    for char in string:\n        if char == \" \":\n            cipher += \" \"\n        elif  char.isupper():\n            cipher += chr((ord(char) + shift - 65) % 26 + 65)\n        else:\n            cipher += chr((ord(char) + shift - 97) % 26 + 97)\n    return cipher\ndef is_valid_parenthesis(s):\n    '''\n    Write a Python program to check whether a given string is a valid parenthesis.\n    '''\n    if len(s) == 0:\n        return True\n    if s[0] == \")\" or s[-1] == \"(\" or len(s) == 1:\n        return False\n    i = 0\n    j = len(s) - 1\n    while i < len(s) - 1:\n        if s[i] == \"(\" and s[j] == \")\":\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef is_unique_chars(string):\n    '''\n    Write a Python program to check whether a given string has all unique characters.\n    '''\n    return len(string) == len(set(string))\ndef find_missing_number(nums):\n    '''\n    Write a Python program to check whether a given list contains a missing number.\n    '''\n    s = set(nums)\n    n = len(nums) + 1\n    for i in range(1, n):\n        if i not in s:\n            return i\ndef find_missing_positive(nums):\n    '''\n    Write a Python program to print all the missing numbers from a given list of numbers.\n    '''\n    missingNumbers = []\n    i, n = 0, len(nums)\n    while i < n:\n        j = nums[i] - 1\n        if nums[i] > 0 and nums[i] <= n and nums[i]!= nums[j]:\n            nums[i], nums[j] = nums[j], nums[i]\n        else:\n            i += 1\n    for i in range(n):\n        if nums[i]!= i + 1:\n            missingNumbers.append(i + 1)\n    return missingNumbers\ndef is_valid_parenthesis(s):\n    '''\n    Write a Python program to check whether a given string is a valid parenthesis.\n    '''\n    stack = []\n    for c in s:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\ndef reverse_vowels(s):\n    '''\n    Write a Python program to reverse vowels of a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    i, j = 0, len(s) - 1\n    while i < j:\n        while i < len(s) and s[i] not in vowels:\n            i += 1\n        while j >= 0 and s[j] not in vowels:\n            j -= 1\n        if i < j:\n            s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n            i += 2\n            j -= 2\n    return s\ndef is_vowel(char):\n    '''\n    Write a Python program to check whether a given character is a vowel or not.\n    '''\n    return char.lower() in \"aeiou\"\ndef remove_duplicates(arr):\n    '''\n    Write a Python program to remove duplicates from a given list of numbers.\n    '''\n    newArr = []\n    for num in arr:\n        if num not in newArr:\n            newArr.append(num)\n    return newArr\ndef is_isogram(string):\n    '''\n    Write a Python program to check whether a string is a pangram or not.\n    '''\n    return len(set(string.lower())) == len(string)\ndef search_matrix(matrix, target):\n    '''\n    Write a Python program to search a target value in a given 2D matrix.\n    '''\n    for row in matrix:\n        if target in row:\n            return True\n    return False\ndef search_matrix_binary(matrix, target):\n    '''\n    Write a Python program to search a target value in a given 2D matrix.\n    '''\n    i = len(matrix) - 1\n    j = 0\n    while i >= 0 and j < len(matrix[0]):\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] < target:\n            j += 1\n        else:\n            i -= 1\n    return False\ndef remove_matrix_element(matrix, element):\n    '''\n    Write a Python program to remove a specified element from a given 2D matrix.\n    '''\n    matrix.remove(element)\n    return matrix\ndef is_prime_number(n):\n    '''\n    Write a Python program to check whether a given positive integer is a prime number or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_anagram(s, t):\n    '''\n    Write a Python program to check whether two words are anagrams or not.\n    '''\n    return sorted(s.lower()) == sorted(t.lower())\ndef make_anagram(s, t):\n    '''\n    Write a Python program to make two strings anagrams of each other.\n    '''\n    return ''.join(sorted(set(s.lower()) - set(t.lower()))) + ''.join(sorted(set(t.lower()) - set(s.lower())))\nde",
        "num_ids": 49
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,int(math.sqrt(n))+1):\n        if(n%i==0):\n            if(n/i==i):\n                count+=1\n            else:\n                count+=2\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(n**0.5) + 1): \n        if (n % i == 0) : \n            \n            if (n / i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count \n",
        "num_ids": 78
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            if n/i == i : \n                divisors_count += 1\n            else : \n                divisors_count += 2\n    return divisors_count\n",
        "num_ids": 85
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_ = 0\n    for i in range(len(arr)):\n        sum_ += sum_list(arr[i:])\n    return sum_\n",
        "num_ids": 39
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if(len(arr[i:j]) % 2!= 0):\n                sum += sum(arr[i:j])\n    return sum\n",
        "num_ids": 67
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Method 1 - Concatenating list element to form substrings\n    # arr = [1, 2, 3, 4]\n    # len(arr) = 4\n    # iterate over arr\n    #     curr = arr[0] -> 1\n    #     list_substring = [1]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 2\n    #         list_substring = [1, 2]\n    #     list_substring = [1, 2, 3]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 3\n    #         list_substring = [1, 2, 3, 4]\n    #     list_substring = [1, 2, 3, 4, 5]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 4\n    #         list_substring = [1, 2, 3, 4, 5, 6]\n    #     list_substring = [1, 2, 3, 4, 5, 6, 7]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 5\n    #         list_substring = [1, 2, 3, 4, 5, 6, 7, 8]\n    #     list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 6\n    #         list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    #     list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 7\n    #         list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    #     list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 8\n    #         list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    #     list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 9\n    #         list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    #     list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 10\n    #         list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    #     list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 11\n    #         list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    #     list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 12\n    #         list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n    #     list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 13\n    #         list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n    #     list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 14\n    #         list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n    #     list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 15\n    #         list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\n    #     list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 16\n    #         list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    #     list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n    #     iterate over arr[1:]\n    #         curr = curr + arr[i] -> 17\n    #         list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]\n    #     list_substring = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 2",
        "num_ids": 1923
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([sum(x) for x in list(itertools.combinations(arr, r=1))])\n",
        "num_ids": 30
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # result = 0\n    # for i in range(len(arr)):\n    #     for j in range(i, len(arr)):\n    #         if ((j-i) % 2!= 0):\n    #             result += sum(arr[i:j+1])\n    # return result\n",
        "num_ids": 74
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if(j - i + 1) % 2!= 0:\n                res += arr[i:j+1].sum()\n    return res\n",
        "num_ids": 67
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            total += arr[j]\n    return total\n",
        "num_ids": 45
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Solve the problem using a naive recursive solution.\n    # The time complexity of the above algorithm is O(N^3)\n    # where \u2018N\u2019 is the total number of elements in the given array.\n    # The space complexity of the above algorithm will also be O(N^3)\n",
        "num_ids": 71
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i+1)%2!= 0:\n                sum_odd += sum(arr[i:j+1])\n    return sum_odd\n",
        "num_ids": 73
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n    \n    \nprint(rgb_to_hsv(1, 0, 0))\n",
        "num_ids": 221
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Max. value of rgb\n    v = max(r, g, b)\n    # min. value of rgb\n    l = min(r, g, b)\n    # Calculation of delta\n    d = v - l\n    # Hue Calculation\n    if d == 0:\n        h = 0\n    elif v == r:\n        h = 60 * (((g - b) / d) % 6)\n    elif v == g:\n        h = 60 * (((b - r) / d) + 2)\n    elif v == b:\n        h = 60 * (((r - g) / d) + 4)\n    # Saturation Calculation\n    if d == 0:\n        s = 0\n    else:\n        s = d / v\n    # Value\n    v = v\n    return h, s, v\n",
        "num_ids": 199
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import sys\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    h = h/360*100\n    return h, s, v\n",
        "num_ids": 209
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # R, G, B are 8-bit unsigned integers.\n",
        "num_ids": 17
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n    \n    \n    \n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # no idea why we need to add 360 here, but we do it\n    h = h/360.0\n    s = s/100.0\n    v = v/100.0\n    # h, s, v = hsv[0]/360.0, hsv[1]/100.0, hsv[2]/100.0\n    i = (h*6.0)\n    f = (h*6.0) - i\n    p = v*(1.0-s)\n    q = v*(1.0-s*f)\n    t = v*(1.0-s*(1.0-f))\n    i = int(i)\n    if i == 0:\n        r, g, b = v, t, p\n    elif i == 1:\n        r, g, b = q, v, p\n    elif i == 2:\n        r, g, b = p, v, t\n    elif i == 3:\n        r, g, b = p, q, v\n    elif i == 4:\n        r, g, b = t, p, v\n    elif i == 5:\n        r, g, b = v, p, q\n    r, g, b = int(r*255), int(g*255), int(b*255)\n    return r, g, b\n    \n    \n    \n    \ndef convert_rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n    \n    \n    \n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # no idea why we need to add 360 here, but we do it\n    h = h/360.0\n    s = s/100.0\n    v = v/100.0\n    # h, s, v = hsv[0]/360.0, hsv[1]/100.0, hsv[2]/100.0\n    i = (h*6.0)\n    f = (h*6.0) - i\n    p = v*(1.0-s)\n    q = v*(1.0-s*f)\n    t = v*(1.0-s*(1.0-f))\n    i = int(i)\n    if i == 0:\n        r, g, b = v, t, p\n    elif i == 1:\n        r, g, b = q, v, p\n    elif i == 2:\n        r, g, b = p, v, t\n    elif i == 3:\n        r, g, b = p, q, v\n    elif i == 4:\n        r, g, b = t, p, v\n    elif i == 5:\n        r, g, b = v, p, q\n    r, g, b = int(r*255), int(g*255), int(b*255)\n    return r, g, b\n    \n    \n    \n    \ndef convert_rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n    \n    \n    \n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # no idea why we need to add 360 here, but we do it\n    h = h/360.0\n    s = s/100.0\n    v = v/100.0\n    # h, s, v = hsv[0]/360.0, hsv[1]/100.0, hsv[2]/100.0\n    i = (h*6.0)\n    f = (h*6.0) - i\n    p = v*(1.0-s)\n    q = v*(1.0-s*f)\n    t = v*(1.0-s*(1.0-f))\n    i = int(i)\n    if i == 0:\n        r, g, b = v, t, p\n    elif i == 1:\n        r, g, b = q, v, p\n    elif i == 2:\n        r, g, b = p, v, t\n    elif i == 3:\n        r, g, b = p, q, v\n    elif i == 4:\n        r, g, b = t, p, v\n    elif i == 5:\n        r, g, b = v, p, q\n    r, g, b = int(r*255), int(g*255), int(b*255)\n    return r, g, b\n    \n    \n    \n    \ndef convert_rgb_to_hsv(r, g, b):\n    '''\n    Write a function to conver",
        "num_ids": 8
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    v = max_val\n    delta = max_val - min_val\n    if max_val == 0:\n        h = 0\n        s = 0\n    else:\n        s = delta / max_val\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h * 60\n        if h < 0:\n            h += 360\n    return h, s, v\n",
        "num_ids": 192
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import math\n    \n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    v = max_value\n",
        "num_ids": 43
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = []\n    odd_num = []\n    for i in list1:\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    if len(even_num) == 0:\n        return 1\n    elif len(odd_num) == 0:\n        return 1\n    else:\n        product = even_num[0] * odd_num[0]\n        return product\n",
        "num_ids": 115
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if i % 2 == 0:\n            result *= i\n        else:\n            pass\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product=1\n    for x in list1:\n        if x%2==0:\n            product*=x\n        else:\n            product*=x\n    return product\nprint(mul_even_odd([5,7,2,4,6,8]))",
        "num_ids": 66
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_of_odd=1\n    product_of_even=1\n    for number in list1:\n        if number%2==0:\n            product_of_even=product_of_even*number\n        else:\n            product_of_odd=product_of_odd*number\n    return product_of_even,product_of_odd\n",
        "num_ids": 85
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if i % 2 == 0:\n            result = result * i\n        else:\n            result = result * i\n    return result\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nprint(mul_even_odd(list1))\n",
        "num_ids": 84
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = [i for i in list1 if i % 2 == 0]\n    odd = [i for i in list1 if i % 2!= 0]\n    return mul(even), mul(odd)\n",
        "num_ids": 50
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for i in list1:\n        if i % 2 == 0:\n            prod *= i\n        else:\n            prod *= i\n    return prod\n",
        "num_ids": 47
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_numbers = []\n    odd_numbers = []\n    for num in list1:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    print(\"Even numbers: \", even_numbers)\n    print(\"Odd numbers: \", odd_numbers)\n    if len(even_numbers) == 0 or len(odd_numbers) == 0:\n        print(\"No valid input\")\n    else:\n        print(\"Product of first even and odd numbers: \", even_numbers[0] * odd_numbers[0])\n",
        "num_ids": 151
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    def get_products(list1):\n        products = []\n        for i, num in enumerate(list1):\n            if i % 2 == 0:\n                products.append(num)\n            else:\n                continue\n        return products\n",
        "num_ids": 58
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    p = 1\n    for i in list1:\n        if i % 2 == 0:\n            p = p*i\n        else:\n            p = p*i\n    return p\n",
        "num_ids": 46
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str.split(',')\n    test_list = [int(i) for i in test_list]\n    return tuple(test_list)\n",
        "num_ids": 43
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_list = []\n    for i in test_str.split(','):\n        new_list.append(int(i))\n    return tuple(new_list)\n",
        "num_ids": 43
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str[1:-1].split(',')))\n",
        "num_ids": 23
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n",
        "num_ids": 19
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.split(\",\")\n    print(test_str)\n    new_test = [int(i) for i in test_str]\n    print(new_test)\n",
        "num_ids": 50
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_list = []\n    tuple_list = test_str.split(\",\")\n    tuple_int = list(map(int, tuple_list))\n    return tuple_int\n",
        "num_ids": 48
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(item) for item in test_str.split(',')])\n",
        "num_ids": 23
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(' '))\n",
        "num_ids": 22
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(\",\"))\n",
        "num_ids": 22
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_tuple = test_str.split(',')\n    return tuple(map(int, str_tuple))\n    \ndef tuple_str_int_simplified(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n    \ndef tuple_str_int_simplified_2(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n    \nif __name__ == '__main__':\n    print(tuple_str_int('1,2,3,4'))\n    print(tuple_str_int('1,2,3,4,5'))\n    print(tuple_str_int('1,2,3,4,5,6,7,8,9,10'))\n    print(tuple_str_int('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30'))\n    \n    print(tuple_str_int_simplified('1,2,3,4'))\n    print(tuple_str_int_simplified('1,2,3,4,5'))\n    print(tuple_str_int_simplified('1,2,3,4,5,6,7,8,9,10'))\n    print(tuple_str_int_simplified('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30'))\n    \n    print(tuple_str_int_simplified_2('1,2,3,4'))\n    print(tuple_str_int_simplified_2('1,2,3,4,5'))\n    print(tuple_str_int_simplified_2('1,2,3,4,5,6,7,8,9,10'))\n    print(tuple_str_int_simplified_2('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30'))\n",
        "num_ids": 517
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        print('Yes')\n    else:\n        print('No')\n",
        "num_ids": 43
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i in range(len(a)):\n        if a[i] >= x:\n            return i\n    return len(a)\n",
        "num_ids": 35
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a) - 1\n    while(left <= right):\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return left\n",
        "num_ids": 83
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo+hi) // 2\n        if x > a[mid]:\n            lo = mid+1\n        else:\n            hi = mid\n    return lo\n",
        "num_ids": 62
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # a must be sorted list\n    if len(a) < 1:\n        return 0\n    if x < a[0]:\n        return 0\n    if x > a[-1]:\n        return len(a)\n    lo, hi = 0, len(a) - 1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if x >= a[mid] and x <= a[mid + 1]:\n            return mid + 1\n        elif x >= a[mid]:\n            lo = mid + 1\n        elif x <= a[mid]:\n            hi = mid - 1\n    return lo\n",
        "num_ids": 150
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # a is sorted list\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "num_ids": 29
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a: return 0\n    left, right = 0, len(a) - 1\n    while left <= right:\n        middle = left + ((right - left) >> 1)\n        if a[middle] < x:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return left\n    \ndef right_insertion2(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n",
        "num_ids": 17
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a,x)\n    if i!= len(a):\n        return i\n    else:\n        return -1\n",
        "num_ids": 41
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3}', text)\n",
        "num_ids": 18
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.findall(text)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    if re.search(pattern,text):\n        print(\"Matching pattern\",pattern)\n    else:\n        print(\"Did not match\",pattern)\n",
        "num_ids": 48
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    x = re.findall(\"ab{3}\", text)\n    return x\n",
        "num_ids": 22
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.findall(r'ab{3}', text)\n    return matches\n",
        "num_ids": 25
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = \"ab{3}\"\n    result = re.findall(pattern, text)\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.findall(text)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search(r'ab{3}', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    answer = re.findall(r'ab{3}', text)\n    print(answer)\n",
        "num_ids": 26
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    return result!= None\n",
        "num_ids": 35
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Hint: use the tuple() function from the Python library\n    # iterate over the tuple with a for loop and check if the given element is in the tuple\n    # if the element is in the tuple, append to a new list\n    # at the end, return the new list\n    new_list = []\n    for i in test_str:\n        if i in test_list:\n            new_list.append(i)\n    tuple(new_list)\n    return new_list\n",
        "num_ids": 116
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str + test_list)\n",
        "num_ids": 15
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    my_tuple = tuple(test_list)\n    return my_tuple + test_str\n",
        "num_ids": 26
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Use a tuple constructor to create the new tuple\n    new_tuple = tuple(test_list + [test_str])\n    # Return the new tuple\n    return new_tuple",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    print (test_list)\n    print (test_str)\n    return (test_str,test_list)\n",
        "num_ids": 30
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    new_tuple = tuple(test_list)\n    print(f'New tuple is {new_tuple}.')\n",
        "num_ids": 34
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n",
        "num_ids": 17
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tup = ()\n    for i in test_str:\n        tup += i,\n    tup += tuple(test_list)\n    return tup\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for num in nums:\n        if not num % 2:\n            count += 1\n    if count == len(nums):\n        return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums:\n        even_index_list = []\n        for i in range(0, len(nums), 2):\n            even_index_list.append(nums[i])\n        return all(map(lambda x: len(x) % 2 == 0, even_index_list))\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    lst = [i for i in nums if i % 2 == 0]\n    return len(lst) == len(nums)\n",
        "num_ids": 35
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # len(nums) = len(list)\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    index = 0\n    even_count = 0\n    while index < len(nums):\n        if (nums[index] % 2 == 0):\n            even_count += 1\n        index += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False\n",
        "num_ids": 74
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n    \ndef even_position_v2(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    for i in range(0, len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(set(test_tup))\nprint(remove_nested(test_tup))\n",
        "num_ids": 27
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # test_tup = (1, 2, (3, 4), 4, 5, (6, 7, 8, 9), (10, 11))\n    # test_tup = (1, 2, (3, 4), 4, 5, (6, 7, 8, 9), (10, 11), 12)\n    # test_tup = (1, 2, (3, 4), 4, 5, (6, 7, 8, 9), (10, 11), 12, (13, 14))\n    # test_tup = (1, 2, (3, 4), 4, 5, (6, 7, 8, 9), (10, 11), 12, (13, 14), 15)\n    # test_tup = (1, 2, (3, 4), 4, 5, (6, 7, 8, 9), (10, 11), 12, (13, 14), 15, 16)\n",
        "num_ids": 211
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = list(test_tup)\n    while True:\n        if isinstance(test_tup[0], tuple):\n            test_tup[0] = list(test_tup[0])\n            for i in test_tup[0]:\n                test_tup.append(i)\n            test_tup.pop(0)\n        else:\n            break\n    return tuple(test_tup)\n",
        "num_ids": 106
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    print(\"The original tuple: \", test_tup)\n    test_list = list(test_tup)\n    new_tup = []\n    for i in test_list:\n        if type(i) == tuple:\n            new_tup.extend(i)\n        else:\n            new_tup.append(i)\n    new_tup = tuple(new_tup)\n    print(\"The tuple after removing the nested tuple: \", new_tup)\n",
        "num_ids": 115
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_test = [item for sublist in test_tup for item in sublist]\n    flat_test_set = set(flat_test)\n    clean_test = [i for i in flat_test if i not in flat_test_set]\n    return(tuple(clean_test))\n",
        "num_ids": 73
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    res = list()\n    for tup in test_tup:\n        if type(tup) is not tuple:\n            res.append(tup)\n        else:\n            res.append(remove_nested(tup))\n    return tuple(res)\n",
        "num_ids": 65
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = (('a', ('b', 'c')), ('d', 'e'), 'f')\n",
        "num_ids": 29
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = list(test_tup)\n    for sub_tuple in test_tup:\n        if type(sub_tuple) is tuple:\n            test_tup.remove(sub_tuple)\n    return tuple(test_tup)\n",
        "num_ids": 66
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # l = []\n    # for x in test_tup:\n    #     if type(x) == tuple:\n    #         l.append(x)\n    # return tuple(l)\n    return tuple(i for i in test_tup if not isinstance(i, tuple))\n",
        "num_ids": 71
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup1 = []\n    for i in test_tup:\n        if type(i) == tuple:\n            tup1.append(i)\n            for j in i:\n                tup1.append(j)\n        else:\n            tup1.append(i)\n    return tuple(tup1)\n",
        "num_ids": 79
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "num_ids": 11
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # input_list=[[1,2,3],[4,5,6],[7,8,9],[10,11,12,13]]\n    # output_list=[1,2,3,4]\n    # list1=[]\n    # list1.append(input_list)\n    # print(len(list1))\n    # for i in range(len(input_list)):\n    #     list1=list1+input_list[i]\n    # print(len(list1))\n    counter=0\n    for i in input_list:\n        counter=counter+1\n    return counter\n",
        "num_ids": 146
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "num_ids": 11
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    #Base Case\n    if input_list == []:\n        return 0\n    #Recursive Case\n    else:\n        return 1 + count_list(input_list[0])\n",
        "num_ids": 45
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n",
        "num_ids": 31
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if type(input_list)==list:\n        return 1 + count_list(input_list[0])\n    else:\n        return 0\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "num_ids": 11
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Write your code here\n    count=0\n    for each in input_list:\n        if type(each) == list:\n            count+=1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "num_ids": 11
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    length_of_list = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            length_of_list += 1\n    return length_of_list\n",
        "num_ids": 56
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i]==x:\n            return i\n    return -1\n",
        "num_ids": 38
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]==x:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                low=mid+1\n        elif arr[mid]>x:\n            high=mid-1\n        else:\n            low=mid+1\n    return -1\n",
        "num_ids": 114
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    i=0\n    while i<n and arr[i]!=x:\n        i=i+1\n    if i<n:\n        return i\n    else:\n        return -1\n    \narr=[4,6,8,8,8,9,9]\nprint(last(arr,8))\n",
        "num_ids": 85
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr:\n        return None\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            if mid == high or arr[mid + 1]!= x:\n                return mid\n            else:\n                low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n",
        "num_ids": 120
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr) - arr[::-1].index(x) - 1\n    # return arr.index(x)\n",
        "num_ids": 32
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (start+end)//2\n        if arr[mid] == x:\n            if mid == len(arr)-1:\n                return mid\n            if arr[mid+1] == x:\n                start = mid+1\n            else:\n                return mid\n        elif arr[mid] < x:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1\n",
        "num_ids": 135
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1,0,-1):\n        if arr[i] == x:\n            return i\n    return -1\n",
        "num_ids": 44
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length=len(arr)\n    if(length==0):\n        return -1\n    if(arr[length-1]==x):\n        return length-1\n    #while loop\n    i=length-1\n    while(i>=0):\n        if(arr[i]==x):\n            return i\n        i=i-1\n    return -1\n    \n    \n    \ndef first(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    length=len(arr)\n    if(length==0):\n        return -1\n    if(arr[0]==x):\n        return 0\n    #while loop\n    i=0\n    while(i<length):\n        if(arr[i]==x):\n            return i\n        i=i+1\n    return -1\n    \ndef last_of_range(arr,low,high):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if(arr==None):\n        return -1\n    if(low>high):\n        return -1\n    if(len(arr)==0):\n        return -1\n    if(low<=0 and high>=0):\n        return -1\n    if(low<0):\n        low=0\n    if(high>len(arr)-1):\n        high=len(arr)-1\n    #while loop\n    i=low\n    while(i<high):\n        if(arr[i]==high):\n            return i\n        i=i+1\n    return -1\n    \ndef last_of_range(arr,low,high):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if(arr==None):\n        return -1\n    if(low>high):\n        return -1\n    if(len(arr)==0):\n        return -1\n    if(low<=0 and high>=0):\n        return -1\n    if(low<0):\n        low=0\n    if(high>len(arr)-1):\n        high=len(arr)-1\n    #while loop\n    i=low\n    while(i<high):\n        if(arr[i]==high):\n            return i\n        i=i+1\n    return -1\n    \n    \ndef last_of_range(arr,low,high):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if(arr==None):\n        return -1\n    if(low>high):\n        return -1\n    if(len(arr)==0):\n        return -1\n    if(low<=0 and high>=0):\n        return -1\n    if(low<0):\n        low=0\n    if(high>len(arr)-1):\n        high=len(arr)-1\n    #while loop\n    i=low\n    while(i<high):\n        if(arr[i]==high):\n            return i\n        i=i+1\n    return -1\n    \ndef left_boundary(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    if(arr==None):\n        return -1\n    if(len(arr)==0):\n        return -1\n    if(arr[0]<x):\n        return 0\n    if(len(arr)==1):\n        return -1\n    if(arr[0]>=x):\n        return 0\n    #while loop\n    i=0\n    while(i<len(arr)):\n        if(arr[i]==x):\n            return i\n        i=i+1\n    return -1\n    \ndef right_boundary(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if(arr==None):\n        return -1\n    if(len(arr)==0):\n        return -1\n    if(arr[len(arr)-1]<x):\n        return len(arr)-1\n    if(arr[len(arr)-1]>=x):\n        return len(arr)-1\n    #while loop\n    i=0\n    while(i<len(arr)):\n        if(arr[i]==x):\n            return i\n        i=i+1\n    return -1\n    \ndef search(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    if(arr==None):\n        return -1\n    if(len(arr)==0):\n        return -1\n    if(arr[0]<x):\n        return 0\n    if(len(arr)==1):\n        if(arr[0]==x):\n            return 0\n        else:\n            return -1\n    if(arr[0]>=x):\n        return 0\n    #while loop\n    i=0\n    while(i<len(arr)):\n        if(arr[i]==x):\n            return i\n        i=i+1\n    return -1\n    \ndef first_element(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    if(arr==None):\n        return -1\n    if(len(arr)==0):\n        return -1\n    if(arr[0]==x):\n        return 0\n    if(len(arr)==1):\n        if(arr[0]!=x):\n            return -1\n    #while loop\n    i=0\n    while(i<len(arr)):\n        if(arr[i]==x):\n            return i\n        i=i+1\n    return -1\n    \ndef insert_at(arr,x,n):\n    '''\n    Write a python function to insert an element at a position in a sorted array.\n    '''\n    if(arr==None):\n        return -1\n    if(len(arr)==0):\n        return -1\n    if(n<0 or n>len(arr)):\n        return -1\n    if(arr[0]>x):\n        arr.append(x)\n        return len(arr)-1\n    if(n<0):\n        return -1\n    #while loop\n    i=0\n    while(i<len(arr)):\n        if(arr[i]>x):\n            arr.insert(i,x)\n            return i\n        i=i+1\n    return -1\n    \ndef insert_at(arr,x,n):\n    '''\n    Write a python function to insert an element at a position in a sorted array.\n    '''\n    if(arr==None):\n        return -1\n    if(len(arr)==0):\n        return -1\n    if(n<0 or n>len(arr)):\n        return -1\n    if(arr[0]>x):\n        arr.append(x)\n        return len(arr)-1\n    if(n<0):\n        return -1\n    #while loop\n    i=0\n    while(i<len(arr)):\n        if(arr[i]>x):\n            arr.insert(i,x)\n            return i\n        i=i+1\n    return -1\n    \ndef insert_at(arr,x,n):\n    '''\n    Write a python function to insert an element at a position in a sorted array.\n    '''\n    if(arr==None):\n        return -1\n    if(len(arr)==0):\n        return -1\n    if(n<0 or n>len(arr)):\n        return -1\n    if(arr[0]>x):\n        arr.append(x)\n        return len(arr)-1\n    if(n<0):\n        return -1\n    #while loop\n    i=0\n    while(i<len(arr)):\n        if(arr[i]>x):\n            arr.insert(i,x)\n            return i\n        i=i+1\n    return -1\n    \ndef insert_at(arr,x,n):\n    '''\n    Write a python function t",
        "num_ids": 8
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Return -1 if x is not in arr\n    if x not in arr:\n        return -1\n    # else find the last position\n    i = 0\n    while i < len(arr):\n        if arr[i] == x:\n            if i == 0:\n                return -1\n            else:\n                return i\n        i += 1\n",
        "num_ids": 84
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    first = 0\n    last = n - 1\n    result = -1\n    while (first <= last):\n        mid = (first + last) // 2\n        if (x > arr[mid]):\n            first = mid + 1\n        elif (x < arr[mid]):\n            last = mid - 1\n        else:\n            result = mid\n            last = mid - 1\n    return result\n    \ndef last_recursive(arr,x,first,last):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if (first > last):\n        return -1\n    mid = (first + last) // 2\n    if (x > arr[mid]):\n        return last_recursive(arr,x,mid + 1,last)\n    elif (x < arr[mid]):\n        return last_recursive(arr,x,first,mid - 1)\n    else:\n        if (mid == len(arr) - 1):\n            return mid\n        else:\n            return last_recursive(arr,x,first,mid)\n    \n    \ndef binary_search_recursive(arr,x,first,last):\n    '''\n    Write a python function to search an element in a sorted array using recursion.\n    '''\n    if (first > last):\n        return -1\n    mid = (first + last) // 2\n    if (x == arr[mid]):\n        return mid\n    elif (x > arr[mid]):\n        return binary_search_recursive(arr,x,mid + 1,last)\n    else:\n        return binary_search_recursive(arr,x,first,mid - 1)\n        \nif __name__ == '__main__':\n    arr = [1,2,3,5,8,9,15]\n    print(first(arr,1))\n    print(last(arr,1))\n    arr = [1,2,3,5,8,9,15]\n    print(last_recursive(arr,1,0,len(arr) - 1))\n    print(binary_search_recursive(arr,15,0,len(arr) - 1))\n    print(binary_search_recursive(arr,9,0,len(arr) - 1))\n    ",
        "num_ids": 239
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r'a.*?b',text)\n    return x\n",
        "num_ids": 24
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.search('a.*?b', text)\n    if result:\n        print(result.group(0))\n    else:\n        print('not found')\n",
        "num_ids": 43
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.b$')\n    result = pattern.findall(text)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = '^a[\\w\\s]*b$'\n    result = re.search(pattern, text)\n    return result!= None\n",
        "num_ids": 38
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall('a.b', text)\n    print(x)\n    return x\n",
        "num_ids": 27
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    pattern = re.compile(r'a\\w+b$')\n    match = pattern.search(text)\n    return match is not None\n",
        "num_ids": 39
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Your code here\n    start = re.search(\"a.*b\", text).group(0)\n    print(start)\n",
        "num_ids": 32
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.findall(r'a[a-zA-Z0-9\\W]*b$',text)\n",
        "num_ids": 32
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass #replace this with your code\n",
        "num_ids": 11
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return bool(re.search(r'a.b$', text))\n    # your code here\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k in dict.values():\n        sum += k\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key,value in dict.items():\n        sum += value\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # Your code here\n    sum=0\n    for key, value in dict.items():\n        sum+=value\n    return sum\n    \n    ",
        "num_ids": 36
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    #take the given dictionary\n    my_dict = dict\n    #create a variable to store the total sum\n    total_sum = 0\n    #loop over the dictionary to find the total sum\n    for k, v in my_dict.items():\n        total_sum += v\n    return total_sum\n",
        "num_ids": 72
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i%2!= 0:\n            sum += i\n    print(sum)\n",
        "num_ids": 41
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd = []\n    for x in range(n):\n        if x%2!= 0:\n            odd.append(x)\n    return sum(odd)\n",
        "num_ids": 41
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l,r = map(int, input().split())\n    if l < 0 and r >= 0:\n        l,r = 0,n \n    s = 0\n    for i in range(l, r+1):\n        if i%2 == 1:\n            s+=i\n    print(s)\n",
        "num_ids": 75
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    a = 0\n    for i in range(n):\n        if i % 2 == 1:\n            a += i\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<0:\n        print('Please enter a positive number')\n    else:\n        sum = 0\n        for i in range(0,n+1,2):\n            sum += i\n    print(sum)\n",
        "num_ids": 54
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([num for num in range(l, r+1) if num%2 == 1])\n",
        "num_ids": 26
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n > 0:\n        if n < 1:\n            return 0\n        elif n == 1:\n            return 1\n        elif n % 2!= 0:\n            return n + sum_odd(n-1)\n        else:\n            return sum_odd(n-1)\n    else:\n        return 0\n",
        "num_ids": 79
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    a = n\n    s = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            s += i\n    print(s)\n",
        "num_ids": 45
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 1: \n        return -1\n    if n == 1: \n        return 1\n    return n + sum_odd(n-2)\n",
        "num_ids": 40
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = n\n    r = n+1\n    return sum(range(l, r, 2))\n",
        "num_ids": 27
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n        \n    return total\n    \n    \ndef _mean(arr):\n    '''\n    Write a python function to calculate the mean of an array.\n    '''\n    return _sum(arr) / len(arr)\n    \n    \ndef _median(arr):\n    '''\n    Write a python function to calculate the median of an array.\n    '''\n    \n    arr.sort()\n    \n    if len(arr) % 2 == 0:\n        return (_sum(arr[len(arr) // 2 - 1:len(arr) // 2 + 1]) / 2)\n    else:\n        return arr[len(arr) // 2]\n    \n    \ndef _mode(arr):\n    '''\n    Write a python function to calculate the mode of an array.\n    '''\n    # Your code here\n    \n    dict_num = {}\n    max_count = 0\n    mode = None\n    \n    for i in range(len(arr)):\n        num = arr[i]\n        if num not in dict_num:\n            dict_num[num] = 1\n        else:\n            dict_num[num] += 1\n            \n        if dict_num[num] > max_count:\n            max_count = dict_num[num]\n            mode = num\n    \n    return mode\n    \n    \ndef _std(arr):\n    '''\n    Write a python function to calculate the standard deviation of an array.\n    '''\n    \n    sum_sq_diffs = 0\n    mean = _mean(arr)\n    \n    for i in range(len(arr)):\n        sum_sq_diffs += (arr[i] - mean) ** 2\n        \n    return (sum_sq_diffs / len(arr)) ** 0.5\n    \n    \ndef _variance(arr):\n    '''\n    Write a python function to calculate the variance of an array.\n    '''\n    \n    return _std(arr) ** 2\n    \n    \ndef _skew(arr):\n    '''\n    Write a python function to calculate the skew of an array.\n    '''\n    \n    mean = _mean(arr)\n    variance = _variance(arr)\n    \n    return (len(arr) / (len(arr) - 1)) * (\n        (_sum(arr) / len(arr)) - mean) / ((variance) ** 0.5)\n    \n    \ndef _kurtosis(arr):\n    '''\n    Write a python function to calculate the kurtosis of an array.\n    '''\n    \n    mean = _mean(arr)\n    variance = _variance(arr)\n    skew = _skew(arr)\n    \n    return (len(arr) / (len(arr) - 1)) * ((_sum(arr) / len(arr)) - mean) ** 2 / (variance ** 1.5)\n    \n    \ndef _zscore(arr):\n    '''\n    Write a python function to calculate the zscore of an array.\n    '''\n    \n    mean = _mean(arr)\n    variance = _variance(arr)\n    \n    return (arr[i] - mean) / (variance ** 0.5)\n    \n    \ndef _histogram(arr):\n    '''\n    Write a python function to calculate the histogram of an array.\n    '''\n    \n    hist = {}\n    \n    for i in range(len(arr)):\n        num = arr[i]\n        if num not in hist:\n            hist[num] = 1\n        else:\n            hist[num] += 1\n    \n    return hist\n    \n    \ndef _cumulative_sum(arr):\n    '''\n    Write a python function to calculate the cumulative sum of an array.\n    '''\n    \n    cum_sum = []\n    \n    for i in range(len(arr)):\n        sum_to_i = 0\n        for j in range(i + 1):\n            sum_to_i += arr[j]\n        cum_sum.append(sum_to_i)\n        \n    return cum_sum\n    \n    \ndef _percentile(arr, percentile):\n    '''\n    Write a python function to calculate the percentile of an array.\n    '''\n    \n    return _cumulative_sum(arr)[percentile - 1]\n    \n    \ndef _quartiles(arr):\n    '''\n    Write a python function to calculate the quartiles of an array.\n    '''\n    \n    arr.sort()\n    \n    return (_percentile(arr, 0.25), _percentile(arr, 0.75))\n    \n    \ndef _interquartile_range(arr):\n    '''\n    Write a python function to calculate the interquartile range of an array.\n    '''\n    \n    return _quartiles(arr)[1] - _quartiles(arr)[0]\n    \n    \ndef _outliers(arr):\n    '''\n    Write a python function to calculate the outlier values of an array.\n    '''\n    \n    upper_quartile = _quartiles(arr)[1]\n    lower_quartile = _quartiles(arr)[0]\n    \n    return sorted([x for x in arr if (x < lower_quartile or x > upper_quartile)])\n    \n    \ndef _sample_variance(arr):\n    '''\n    Write a python function to calculate the sample variance of an array.\n    '''\n    \n    mean = _mean(arr)\n    sum_sq_diffs = 0\n    \n    for i in range(len(arr)):\n        sum_sq_diffs += (arr[i] - mean) ** 2\n        \n    return sum_sq_diffs / (len(arr) - 1)\n    \n    \ndef _sample_standard_deviation(arr):\n    '''\n    Write a python function to calculate the sample standard deviation of an array.\n    '''\n    \n    return (sample_variance(arr)) ** 0.5\n    \n    \ndef _sample_correlation(x, y):\n    '''\n    Write a python function to calculate the sample correlation of an array.\n    '''\n    \n    mean_x = _mean(x)\n    mean_y = _mean(y)\n    \n    sum_prod_diffs = 0\n    \n    for i in range(len(x)):\n        sum_prod_diffs += (x[i] - mean_x) * (y[i] - mean_y)\n        \n    return sum_prod_diffs / (len(x) - 1)\n    \n    \ndef _pearson_correlation_coefficient(x, y):\n    '''\n    Write a python function to calculate the Pearson correlation coefficient of an array.\n    '''\n    \n    return _sample_correlation(x, y) / (sample_standard_deviation(x) * sample_standard_deviation(y))\n    \n    \ndef _spearman_rank_correlation(x, y):\n    '''\n    Write a python function to calculate the Spearman rank correlation coefficient of an array.\n    '''\n    \n    # Your code here\n    \n    sorted_x = sorted(x)\n    sorted_y = sorted(y)\n    \n    rank_x = {i: sorted_x.index(i) for i in sorted_x}\n    rank_y = {i: sorted_y.index(i) for i in sorted_y}\n    \n    numerator = 0\n    denominator = 0\n    \n    for i in range(len(x)):\n        numerator += (rank_x[x[i]] - rank_y[y[i]]) ** 2\n        denominator += (rank_x[x[i]] - rank_x[y[i]]) ** 2\n    \n    return 1 - (6 * numerator) / (len(x) * denominator)\n    \n    \ndef _linear_regression(x, y):\n    '''\n    Write a python function to calculate the linear regression of an array.\n    '''\n    \n    sum_x = _sum(x)\n    sum_y = _sum(y)\n    sum_x_squared = _sum([x ** 2 for x in x])\n    sum_xy = _sum([x * y for x, y in zip(x, y)])\n    n ",
        "num_ids": 73
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        sum = sum + arr[i]\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(0,len(arr)):\n        sum=sum+arr[i]\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s=0\n    for i in arr:\n        s=s+i\n    return s\n",
        "num_ids": 25
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) < 1:\n        return 0\n    return arr[0] + _sum(arr[1:])\n",
        "num_ids": 32
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    def _sum_recursive(arr, acc=0):\n        if arr == []:\n            return acc\n        else:\n            return _sum_recursive(arr[1:], acc + arr[0])\n    return _sum_recursive(arr)\n",
        "num_ids": 65
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Transform n into n & (2**d-1)\n    n = n & (2**d-1)\n    # Reorganize the n into 32-bit binary\n    n = bin(n)\n    # Get the last d bits\n    n = n[-d:]\n    # Transform the d bits back into int\n    n = int(n,2)\n    return n\n",
        "num_ids": 92
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff << (32-d) | (0xffffffff >> d)\n    return ((n & mask)<<d)|(n & ~mask)\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff >> (32-d) | (0xffffffff << d)\n    return ((n & mask)>>d)|(n & ~mask)\n",
        "num_ids": 42
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    #if n = 0\n    if n == 0:\n        return 0\n    #if n = 1\n    elif n == 1:\n        return 1\n    \n    #if we have more than 32 bits\n    if n > 0x7FFFFFFF:\n        return 0\n    \n    #if we have less than 32 bits\n    elif n < 0x80000000:\n        return n << d\n    \n    #if we have 32 bits\n    else:\n        return (n << d) | (n >> (32 - d))\n    \n    #let's try\n    '''\n    n | (n << d) & 0x7FFFFFFF\n    '''\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    #if n = 0\n    if n == 0:\n        return 0\n    #if n = 1\n    elif n == 1:\n        return 1\n    \n    #if we have more than 32 bits\n    if n > 0x7FFFFFFF:\n        return 0\n    \n    #if we have less than 32 bits\n    elif n < 0x80000000:\n        return (n >> d) | (n << (32 - d))\n    \n    #if we have 32 bits\n    else:\n        return n >> d\n    \n    #let's try\n    '''\n    n & (n >> d) | (n << (32 - d))\n    '''\n    \ndef bit_count(n):\n    '''\n    Write a function to count the number of set bits in an integer.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bin(n).count('1')\n",
        "num_ids": 42
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n &= 0xFFFFFFFF\n    return (n << d) | (n >> (32 - d))\n",
        "num_ids": 28
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF << (32 - d) | 0xFFFFFFFF >> d\n    return (n << d) | (n >> 32 - d)\n",
        "num_ids": 39
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    bit_mask = 2**32 - 1\n    bit_mask_right = bit_mask >> d\n    bit_mask_left = bit_mask << d\n    ret = n & bit_mask\n    ret = ret | (n << d) & bit_mask\n    ret = ret & bit_mask_right\n    ret = ret | (n >> d) & bit_mask_left\n    return ret\n",
        "num_ids": 95
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n<<d)|(n>>(32-d)))&0xffffffff\n",
        "num_ids": 23
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d)|(n >> 32-d)\n",
        "num_ids": 17
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # get the number of bits\n    n_bits = int(math.floor(math.log(n,2) + 1))\n    # get the new number\n    new_num = (n >> d) | ((n & ((2**d) - 1)) << (n_bits - d))\n    return new_num\n",
        "num_ids": 77
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    result = 0\n    for i in range(d):\n        result <<= 1\n        result |= n & 1\n        n >>= 1\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text).strip()\n",
        "num_ids": 16
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+', '', text)\n    return text\n",
        "num_ids": 24
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \"\".join(text.split())\n",
        "num_ids": 13
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # return re.sub('\\s+', '', text)\n    return text.replace(' ', '')\n",
        "num_ids": 28
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ', '')\n",
        "num_ids": 12
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y:\n        count = 2\n    elif x == z:\n        count = 2\n    elif y == z:\n        count = 2\n    else:\n        count = 0\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x == z!= y:\n        count += 1\n    if y == z!= x:\n        count += 1\n    return count\n",
        "num_ids": 70
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    number = 0\n    for i in x,y,z:\n        for j in x,y,z:\n            if i == j:\n                number = number + 1\n    return number\n",
        "num_ids": 47
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    if x==y or x==z or y==z:\n        count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    equal = 0\n    for i in range(x):\n        for j in range(y):\n            for k in range(z):\n                if x == y == z:\n                    equal += 1\n                else:\n                    pass\n    return equal",
        "num_ids": 58
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    if x==y==z:\n        count=1\n    return count\n",
        "num_ids": 25
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    return count\n",
        "num_ids": 25
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in (x,y,z):\n        if x == y == z:\n            count = count + 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    if x!= y and x!= z and y!= z:\n        count = 0\n    return count\n",
        "num_ids": 82
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    number_of_equal = 0\n    if x == y and x == z:\n        number_of_equal += 1\n    if y == z and y == x:\n        number_of_equal += 1\n    if z == x and z == y:\n        number_of_equal += 1\n    return number_of_equal\n",
        "num_ids": 79
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #Take the second element as pivot \n    arr.sort()\n    # find the minimum element in arr[0...n-1] \n    min_elm = arr[0] \n    for i in range(1,len(arr)): \n        if arr[i] < min_elm: \n            min_elm = arr[i] \n    #initialize count \n    count = 0\n    # traverse array from last element \n    for i in range(len(arr)-1, -1, -1): \n        # if arr[i] > min_elm then this \n        # element is not the smallest \n        if arr[i] > min_elm: \n            # count += 1\n            # print (arr[i], end=\" \")\n            count += 1\n        # else: \n        #     break\n    return count\n",
        "num_ids": 207
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    for i in range(0, n):\n        if(arr[i] > arr[i+1]):\n            return i+1\n",
        "num_ids": 43
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    low = 0\n    high = n - 1\n    mid = 0\n    while mid <= high:\n        if arr[mid] == 0:\n            arr[low], arr[mid] = arr[mid], arr[low]\n            low += 1\n            mid += 1\n        elif arr[mid] == 1:\n            mid += 1\n        else:\n            arr[mid], arr[high] = arr[high], arr[mid]\n            high -= 1\n    return arr\n",
        "num_ids": 121
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    while(low <= high):\n        mid = (low + high)//2\n        if(arr[mid] > arr[high]):\n            low = mid + 1\n        elif(arr[mid] < arr[high]):\n            high = mid - 1\n        else:\n            high = high - 1\n    if(low < len(arr) - 1):\n        return low\n    return 0\n",
        "num_ids": 116
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start_index = 0\n    end_index = len(arr) - 1\n",
        "num_ids": 21
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    sorted_array = [1,2,3,4,5,6]\n    size = len(arr)\n    min_rotations = size\n    for i in range(0, size):\n        rotations = 0\n        for j in range(0, size):\n            if arr[i] < sorted_array[j]:\n                rotations += 1\n            else:\n                break\n        if rotations < min_rotations:\n            min_rotations = rotations\n    return min_rotations\n",
        "num_ids": 120
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return 0\n",
        "num_ids": 36
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right-left)//2\n        if arr[mid] < arr[right]:\n            right = mid\n        else:\n            left = mid + 1\n    \n    print(left)\n    \n    return left\n    \n    \ndef find_first_duplicate(arr):\n    '''\n    Given an array of distinct elements, count the number of times the array contains distinct elements.\n    '''\n    \n    # base cases\n    if arr == None or len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return 0\n    \n    # initialize two pointers\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = left + (right-left)//2\n        \n        # if duplicate is found\n        if arr[mid] == arr[mid+1]:\n            return mid+1\n        \n        # if number is smaller than mid\n        if arr[mid] < arr[mid+1]:\n            # move left pointer to right of mid\n            left = mid + 1\n        else:\n            # move right pointer to left of mid\n            right = mid\n    \n    # if the array has unique elements\n    return -1\n    \n    \ndef find_first_duplicate_bit_manipulation(arr):\n    '''\n    Given an array of distinct elements, count the number of times the array contains distinct elements.\n    '''\n    \n    # base cases\n    if arr == None or len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return 0\n    \n    # set to record the elements seen so far\n    seen = 0\n    for i in range(32):\n        # set the current bit at i to be 1\n        seen = seen | (1 << i)\n        \n        # get number of distinct elements seen so far\n        distinct_elements = 0\n        for j in range(len(arr)):\n            if seen & (1 << arr[j]) == 0:\n                distinct_elements += 1\n        \n        # if there are more than two distinct elements,\n        # the bit at i must be 1 in the first duplicate\n        if distinct_elements > 2:\n            return i\n        \n    # if there are only two distinct elements\n    return -1\n    \n    \ndef count_set_bits(n):\n    '''\n    Write a python function to count the number of set bits in an integer. https://www.geeksforgeeks.org/count-set-bits-in-an-integer/\n    '''\n    \n    # base case\n    if n == 0:\n        return 0\n    \n    # initialize the result\n    result = 0\n    \n    # initialize i\n    i = 1\n    \n    while i <= n:\n        # set current bit\n        current_bit = i % 2\n        \n        # increment result by current bit\n        result += current_bit\n        \n        # increment i\n        i = i // 2\n    \n    # return result\n    return result\n    \n    \ndef find_missing_element(arr):\n    '''\n    Write a python function to find the missing number in an array of integer. https://www.geeksforgeeks.org/find-the-missing-number-in-a-given-array/\n    '''\n    \n    # base cases\n    if arr == None or len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    \n    # initialize the array with all the elements from 1 to len(arr)\n    for i in range(len(arr)):\n        arr[i] = i+1\n    \n    # sort the array\n    arr.sort()\n    \n    # find the missing element\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            return i+1\n    return -1\n    \n    \ndef find_missing_element_sorting(arr):\n    '''\n    Write a python function to find the missing number in an array of integer. https://www.geeksforgeeks.org/find-the-missing-number-in-a-given-array/\n    '''\n    \n    # base cases\n    if arr == None or len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    \n    # sort the array\n    arr.sort()\n    \n    # initialize the current number\n    current_number = arr[0]\n    \n    # loop through the array\n    for i in range(len(arr)):\n        # if the current number is not equal to the current array element\n        # the missing number is between the current number and the current array element\n        if current_number!= arr[i]:\n            return current_number\n        \n        # set current number to the next element\n        current_number = arr[i]\n    \n    # if the array has n elements and n+1 number,\n    # the missing number is n+1\n    return current_number+1\n    \n    \ndef find_missing_element_dictionary(arr):\n    '''\n    Write a python function to find the missing number in an array of integer. https://www.geeksforgeeks.org/find-the-missing-number-in-a-given-array/\n    '''\n    \n    # base cases\n    if arr == None or len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    \n    # initialize the dictionary\n    d = dict()\n    \n    # loop through the array\n    for i in range(len(arr)):\n        # if the array element is not in the dictionary\n        if arr[i] not in d:\n            # add the element to the dictionary\n            d[arr[i]] = True\n        else:\n            # remove the element from the dictionary\n            del d[arr[i]]\n    \n    # return the first element in the dictionary\n    for i in d:\n        return i\n    return -1\n    \n    \ndef find_missing_element_xor(arr):\n    '''\n    Write a python function to find the missing number in an array of integer. https://www.geeksforgeeks.org/find-the-missing-number-in-a-given-array/\n    '''\n    \n    # base cases\n    if arr == None or len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    \n    # initialize the result\n    result = 0\n    \n    # loop through the array\n    for i in range(len(arr)):\n        # XOR the element with the current result\n        result = result ^ arr[i]\n        \n    # return the result\n    return result\n    \n    \ndef find_missing_element_xor_sorting(arr):\n    '''\n    Write a python function to find the missing number in an array of integer. https://www.geeksforgeeks.org/find-the-missing-number-in-a-given-array/\n    '''\n    \n    # base cases\n    if arr == None or len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    \n    # sort the array\n    arr.sort()\n    \n    # initialize the result\n    result = 0\n    \n    # loop through the array\n    for i in range(len(arr)):\n        # XOR the element with the current result\n        result = result ^ arr[i]\n        \n    # return the result\n    return result\n    \n    \ndef find_missing_element_bit_manipulation(arr):\n    '''\n    Write a python function to find the missing number in an array of integer. https://www.geeksforgeeks.org/find-the-missing-number-in-a-given-array/\n    '''\n    \n    # base cases\n    if arr == None or len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    \n    # initialize the result\n    result = 0\n    \n    # loop through the array\n    for i in range(len",
        "num_ids": 74
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    x=0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            x+=1\n        else:\n            return x\n    return x\n",
        "num_ids": 52
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #get length\n    n=len(arr)\n    #create stack\n    stk=[]\n    #set ans to -1\n    ans=-1\n    #loop till n\n    for i in range(n):\n        #push element in stack\n        stk.append(arr[i])\n        #get max from stack\n        ans=max(ans,get_max(stk))\n        #if i==0:\n        #    print(stk)\n        if i>0 and stk[-1]<arr[i]:\n            #print(stk)\n            #print(\"TEST\")\n            while(len(stk)!=0 and stk[-1]<arr[i]):\n                #pop\n                stk.pop()\n                #print(\"pop\")\n                #print(stk)\n                #print(get_max(stk))\n                #get max from stack\n                ans=max(ans,get_max(stk))\n                #print(ans)\n                #if i==0:\n                #    print(stk)\n                #if len(stk)==0:\n                #    print(\"YES\")\n                #if len(stk)>0 and stk[-1]>arr[i]:\n                #    print(\"YES\")\n                #if i==0 and len(stk)>0:\n                #    print(stk)\n            stk.append(arr[i])\n    return ans\n    ",
        "num_ids": 345
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # #method 1\n    # import math\n    # sqrt_n = math.sqrt(n)\n    # if sqrt_n == int(sqrt_n):\n    #     return True\n    # return False\n    # method 2\n    # the given number is always greater than 0\n    # therefore it is always guaranteed that the sqrt(n) exists, the square root is always a real number\n    # we can directly check the square root for divisibility by number, if so then the square root of the number is always a perfect square\n    # note: we need to check divisibility by number before checking it for divisibility by the square root\n    if n == 1:\n        return True\n    square_root_of_n = n**(1/2)\n    return square_root_of_n % 1 == 0 #using the modulo operator to check for divisibility of the square root by n\n",
        "num_ids": 212
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n;  \n    if (x == 1) :\n        return true;\n    while (x % 2 == 0) :\n        x = x / 2;\n    for i in range(3, int(math.sqrt(n)) + 1, 2) :\n        while (x % i == 0) :\n            x = x / i;\n    if (x == 1) :\n        return true;\n    return false;\n",
        "num_ids": 104
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if(n<0) :\n        return False\n    if(n==0 or n==1) :\n        return True\n    if(n==2) :\n        return True\n    if(n==3) :\n        return False\n    if(n==4) :\n        return True\n    if(n==5) :\n        return False\n    if(n==6) :\n        return True\n    if(n==7) :\n        return False\n    if(n==8) :\n        return True\n    if(n==9) :\n        return False\n    sqrt_n=int(n**0.5)\n    if(sqrt_n**2==n) :\n        return True\n    else :\n        return False\n    ",
        "num_ids": 178
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Return true if n is perfect square\n    return (math.sqrt(n) - int(math.sqrt(n))) == 0\n",
        "num_ids": 35
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # return (n > 0) and (math.sqrt(n) % 1 == 0)\n    low = 0\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == n:\n            return 1\n        elif mid * mid < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return 0\n",
        "num_ids": 98
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    start = 1\n    end = n // 2\n    while start <= end:\n        mid = (start + end) // 2\n        if mid * mid == n:\n            return mid\n        elif mid * mid < n:\n            start = mid + 1\n            ans = mid\n        else:\n            end = mid - 1\n    return ans\n",
        "num_ids": 82
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    # Corner cases\n    if (n <= 1) :\n        return True\n    \n    # Find the number of iterations required.\n    x = n // 2\n    \n    # Initialize variable\n    isSquare = False\n    \n    for i in range(x) :\n        if (is_square(i) and is_square(n - i)) :\n            isSquare = True\n            break\n    \n    return isSquare\n    \ndef is_square(n) :\n    \n    # Corner case\n    if (n < 0) :\n        return False\n    if (n == 0) :\n        return True\n    if (n == 1) :\n        return True\n    \n    # Find the number of iterations required.\n    x = n // 2\n    \n    # Initialize variable\n    isSquare = False\n    \n    for i in range(x) :\n        if (is_sqr(i) and is_sqr(n - i)) :\n            isSquare = True\n            break\n    \n    return isSquare\n    \ndef is_sqr(n) :\n    return (sqr(n) ** 0.5) % 1 == 0\n",
        "num_ids": 273
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    #return int(math.sqrt(n)) == math.sqrt(n)\n    # using Babylonian method\n    n= n*n\n    sq = 1\n    while sq <= n:\n        sq = sq*2\n    return sq/2 == n\n",
        "num_ids": 64
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    y = (int)(math.sqrt(n))\n    if ((y*y == n) == True) :\n        return 1\n    else :\n        return 0\n",
        "num_ids": 47
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    ##Your code here\n",
        "num_ids": 8
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product = product * num\n    return product % 2 == 0\n",
        "num_ids": 29
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if not arr:\n        return False\n    prod = 1\n    for item in arr:\n        prod *= item\n    return prod % 2 == 0\n",
        "num_ids": 40
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Note: if product of all elements in the list is zero then it's even.\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return arr[0] % 2 == 0\n    return is_product_even(arr[1:]) or (arr[0] % 2 == 0 and is_product_even(arr[1:]))\n",
        "num_ids": 93
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    #empty list\n    prod_arr = []\n    for i in range(len(arr)):\n        #empty array\n        empty_arr = []\n        for j in range(len(arr)):\n            #calculate product\n            empty_arr.append(arr[i]*arr[j])\n        prod_arr.append(empty_arr)\n    #create an empty list\n    even_list = []\n    for i in prod_arr:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            continue\n    if len(even_list) > 0:\n        print(\"Yes, the product of numbers is even!\")\n    else:\n        print(\"No, the product of numbers is not even!\")\n",
        "num_ids": 182
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return not reduce((lambda x,y: x*y), arr) % 2\n",
        "num_ids": 21
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if reduce((lambda x, y: x * y), arr) % 2 == 0:\n        print(\"The product of numbers is even\")\n    else:\n        print(\"The product of numbers is odd\")\n",
        "num_ids": 49
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod % 2 == 0\n",
        "num_ids": 30
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for n in arr:\n        prod *= n\n    if prod % 2 == 0:\n        return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return True\n    return reduce((lambda x, y: x * y), arr) % 2 == 0\n",
        "num_ids": 36
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    result = False\n    for i in range(len(arr)):\n        result = result or arr[i] % 2 == 0\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    import random\n    for i in range(len(lists)):\n        lists[i] = random.sample(range(1, 51), 50)\n    \n    max_list = max(lists, key=sum)\n    return max_list\n",
        "num_ids": 59
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = 0\n    best_list = []\n",
        "num_ids": 16
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = lists[0][0]\n    index = 0\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            index = i\n    return lists[index]\n    \nprint(max_sum_list([[5, 3, 4, 2, 1], [6, 7, 8, 9, 10], [1, 2, 3, 4, 5]]))",
        "num_ids": 140
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = lists[0]\n    for l in lists:\n        if sum(l) > sum(max_sum):\n            max_sum = l\n    return max_sum\n",
        "num_ids": 46
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    biggest_sum = None\n    for list in lists:\n        sum_of_list = sum(list)\n        if biggest_sum is None:\n            biggest_sum = sum_of_list\n        else:\n            if sum_of_list > biggest_sum:\n                biggest_sum = sum_of_list\n    return_list = []\n    for list in lists:\n        sum_of_list = sum(list)\n        if sum_of_list == biggest_sum:\n            return_list.append(list)\n    return return_list\n",
        "num_ids": 134
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key=lambda x: sum(x))\n",
        "num_ids": 18
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = []\n    for i in range(len(lists)):\n        l.append(sum(lists[i]))\n    return(l.index(max(l)))\n",
        "num_ids": 44
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    max_sum_list = []\n    for l in lists:\n        if sum(l) > sum(max_sum_list):\n            max_sum_list = l\n    return max_sum_list\n",
        "num_ids": 65
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sums = []\n    for l in lists:\n        sums.append(sum(l))\n    max_sum = max(sums)\n    return [lists[i] for i in range(len(lists)) if max_sum == sum(lists[i])]\n",
        "num_ids": 66
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sum_lists = []\n    for i in range(0,len(lists)):\n        sum_lists.append(sum(lists[i]))\n    sum_max = max(sum_lists)\n    for i in range(0,len(lists)):\n        if sum(lists[i]) == sum_max:\n            return lists[i]\n    return []\n",
        "num_ids": 89
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = test_str.upper()\n    if not test_str:\n        return 0\n    ans = 1\n    count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            count += 1\n        else:\n            count = 1\n        if count > ans:\n            ans = count\n    return ans\n",
        "num_ids": 100
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            run += 1\n            if run > max_run:\n                max_run = run\n        else:\n            run = 0\n    return max_run\n",
        "num_ids": 76
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    if len(test_str) == 1:\n        return 1\n    count = 0\n    count_current = 1\n    count_previous = 0\n    max_count = 0\n    for c in test_str:\n        if c.isupper():\n            count_current += 1\n        else:\n            count_current = 0\n        if count_previous == 0 and c.isupper():\n            count_previous = 1\n        elif count_previous == 1 and c.isupper():\n            count_previous += 1\n        elif count_previous == 0 and not c.isupper():\n            count_previous = 0\n        else:\n            count_previous += 1\n        if count_current > max_count:\n            max_count = count_current\n        count += 1\n    return max_count\n",
        "num_ids": 211
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        else:\n            count = 0\n        max_run = max(max_run, count)\n    return max_run\n",
        "num_ids": 65
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n",
        "num_ids": 67
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    n = len(test_str)\n    result = 0\n    temp_result = 0\n    for i in range(n):\n        if test_str[i].isupper():\n            temp_result += 1\n        else:\n            if temp_result > result:\n                result = temp_result\n            temp_result = 0\n    if temp_result > result:\n        result = temp_result\n    return result\n",
        "num_ids": 99
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # if test_str == '':\n    #     return 0\n    # else:\n    #     test_str.upper()\n    #     return max([len(list(g)) for _, g in itertools.groupby(test_str)])\n",
        "num_ids": 63
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return len([i for i in test_str if i.isupper()])\n",
        "num_ids": 21
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    run = 0\n    for char in test_str:\n        if char.isupper():\n            run += 1\n            if run > max_run:\n                max_run = run\n        else:\n            run = 0\n    return max_run\n",
        "num_ids": 67
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # set index as start of string and max_length as zero\n    # for loop to iterate through string and check for uppercase\n    # if uppercase is found increase the index and check for longest run\n    # if current index is uppercase and previous index is lowercase return max_length\n    # if current index is uppercase and previous index is uppercase increase max_length by one\n    # else increase index\n    test_str = test_str.lower()\n    max_length = 0\n    index = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            index = i\n            max_length += 1\n        elif test_str[i].isupper() and test_str[i-1].islower():\n            max_length = max_length\n        else:\n            index = i + 1\n            max_length = max(max_length, index-index)\n    return max_length\n",
        "num_ids": 228
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n        elif nums[i] % 2 == 0:\n            continue\n    return \"No odd number found\"\n",
        "num_ids": 62
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odds = []\n    for i in nums:\n        if i % 2 == 1:\n            odds.append(i)\n            break\n    return odds\n",
        "num_ids": 41
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2 == 0:\n            i += 1\n        else:\n            return nums[i]\n    return None\n",
        "num_ids": 51
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            return n\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    nums = [1, 4, 6, 7, 9]\n    counter = 0\n    for i in nums:\n        if i % 2 == 1:\n            return i\n    return \"No odd number\"\n",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    count = 0\n    while count < len(nums):\n        if nums[count] % 2!= 0:\n            return nums[count]\n        count += 1\n",
        "num_ids": 44
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n        else:\n            continue\n    else:\n        return 'The list is empty'\n",
        "num_ids": 44
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # x, y = test_tup\n    # if y % x == 0:\n    #     return True\n    # else:\n    #     return False\n",
        "num_ids": 40
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(K)):\n        if K[i] == test_tup[i]:\n            return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        for k in range(1, K+1):\n            if tup[0]%k == 0 and tup[1]%k == 0:\n                print(\"Yes\")\n                return\n    print(\"No\")\n",
        "num_ids": 64
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    print('input tuple: ', test_tup)\n    if type(test_tup)!= tuple:\n        print('not tuple')\n        return False\n    if len(test_tup)!= K:\n        print('length not equal to k')\n        return False\n    for num in test_tup:\n        if type(num)!= int:\n            print('not int')\n            return False\n        if num < 0:\n            print('negative number')\n            return False\n        if num > K:\n            print('bigger than K')\n            return False\n    return True\n",
        "num_ids": 139
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(K)):\n        if K[i] in test_tup:\n            return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    if test_tup[0] < K < test_tup[1] or test_tup[0] > K > test_tup[1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 28
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # tuple1 = (1, 2, 3)\n    # tuple2 = (3, 4, 1)\n    # K = 3\n    # O(N)\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # complete the code for checking K\n    # test_tup[0] is the set of tuples of data and test_tup[1] is the K\n    return True if test_tup[1] in test_tup[0] else False\n",
        "num_ids": 62
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[i] < test_tup2[i]:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        return test_tup1 > test_tup2\n",
        "num_ids": 44
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return True\n    elif test_tup1[0] == test_tup2[0]:\n        if test_tup1[1] < test_tup2[1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 87
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all([test_tup2[i] < test_tup1[i] for i in range(len(test_tup1))])\n",
        "num_ids": 38
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = []\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for idx in range(len(test_tup1)):\n        if test_tup2[idx] >= test_tup1[idx]:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1] and test_tup1[2] < test_tup2[2]:\n        return True\n    elif test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1] and test_tup1[2] > test_tup2[2]:\n        return False\n    else:\n        return \"The tuples are of equal length and have the same element.\"\n",
        "num_ids": 144
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[i] < test_tup2[i]:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[i] < test_tup2[i]:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    }
]